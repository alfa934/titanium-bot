
ultraman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003940  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003a4c  08003a4c  00004a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a78  08003a78  00005024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003a78  08003a78  00005024  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003a78  08003a78  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a78  08003a78  00004a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a7c  08003a7c  00004a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003a80  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000024  08003aa4  00005024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08003aa4  000051b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bea5  00000000  00000000  0000504d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd5  00000000  00000000  00010ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00012ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000991  00000000  00000000  000136f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179ab  00000000  00000000  00014081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d170  00000000  00000000  0002ba2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008abc0  00000000  00000000  00038b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c375c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000336c  00000000  00000000  000c37a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000c6b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a34 	.word	0x08003a34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08003a34 	.word	0x08003a34

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <ReadUltrasonic>:
uint32_t pMillis;
uint32_t pulseStart, pulseEnd;
uint16_t distances_cm[4] = {0};

uint16_t ReadUltrasonic(GPIO_TypeDef* TRIG_PORT, uint16_t TRIG_PIN,
                       GPIO_TypeDef* ECHO_PORT, uint16_t ECHO_PIN) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	607a      	str	r2, [r7, #4]
 8000652:	461a      	mov	r2, r3
 8000654:	460b      	mov	r3, r1
 8000656:	817b      	strh	r3, [r7, #10]
 8000658:	4613      	mov	r3, r2
 800065a:	813b      	strh	r3, [r7, #8]
    uint32_t timeout;


    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 800065c:	897b      	ldrh	r3, [r7, #10]
 800065e:	2201      	movs	r2, #1
 8000660:	4619      	mov	r1, r3
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f001 fac7 	bl	8001bf6 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000668:	4b3b      	ldr	r3, [pc, #236]	@ (8000758 <ReadUltrasonic+0x110>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	625a      	str	r2, [r3, #36]	@ 0x24
    while(__HAL_TIM_GET_COUNTER(&htim1) < 10);
 8000670:	bf00      	nop
 8000672:	4b39      	ldr	r3, [pc, #228]	@ (8000758 <ReadUltrasonic+0x110>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000678:	2b09      	cmp	r3, #9
 800067a:	d9fa      	bls.n	8000672 <ReadUltrasonic+0x2a>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 800067c:	897b      	ldrh	r3, [r7, #10]
 800067e:	2200      	movs	r2, #0
 8000680:	4619      	mov	r1, r3
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	f001 fab7 	bl	8001bf6 <HAL_GPIO_WritePin>


    timeout = HAL_GetTick();
 8000688:	f000 fd3c 	bl	8001104 <HAL_GetTick>
 800068c:	6178      	str	r0, [r7, #20]
    while(!HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) && (HAL_GetTick() - timeout < 15));
 800068e:	bf00      	nop
 8000690:	893b      	ldrh	r3, [r7, #8]
 8000692:	4619      	mov	r1, r3
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f001 fa97 	bl	8001bc8 <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d106      	bne.n	80006ae <ReadUltrasonic+0x66>
 80006a0:	f000 fd30 	bl	8001104 <HAL_GetTick>
 80006a4:	4602      	mov	r2, r0
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	2b0e      	cmp	r3, #14
 80006ac:	d9f0      	bls.n	8000690 <ReadUltrasonic+0x48>
    if(HAL_GetTick() - timeout >= 15) return 999;
 80006ae:	f000 fd29 	bl	8001104 <HAL_GetTick>
 80006b2:	4602      	mov	r2, r0
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	2b0e      	cmp	r3, #14
 80006ba:	d902      	bls.n	80006c2 <ReadUltrasonic+0x7a>
 80006bc:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80006c0:	e045      	b.n	800074e <ReadUltrasonic+0x106>

    pulseStart = __HAL_TIM_GET_COUNTER(&htim1);
 80006c2:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <ReadUltrasonic+0x110>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006c8:	4a24      	ldr	r2, [pc, #144]	@ (800075c <ReadUltrasonic+0x114>)
 80006ca:	6013      	str	r3, [r2, #0]

    timeout = HAL_GetTick();
 80006cc:	f000 fd1a 	bl	8001104 <HAL_GetTick>
 80006d0:	6178      	str	r0, [r7, #20]
    while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) && (HAL_GetTick() - timeout < 30));
 80006d2:	bf00      	nop
 80006d4:	893b      	ldrh	r3, [r7, #8]
 80006d6:	4619      	mov	r1, r3
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f001 fa75 	bl	8001bc8 <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d006      	beq.n	80006f2 <ReadUltrasonic+0xaa>
 80006e4:	f000 fd0e 	bl	8001104 <HAL_GetTick>
 80006e8:	4602      	mov	r2, r0
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	2b1d      	cmp	r3, #29
 80006f0:	d9f0      	bls.n	80006d4 <ReadUltrasonic+0x8c>
    if(HAL_GetTick() - timeout >= 30) return 999;
 80006f2:	f000 fd07 	bl	8001104 <HAL_GetTick>
 80006f6:	4602      	mov	r2, r0
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	2b1d      	cmp	r3, #29
 80006fe:	d902      	bls.n	8000706 <ReadUltrasonic+0xbe>
 8000700:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000704:	e023      	b.n	800074e <ReadUltrasonic+0x106>

    pulseEnd = __HAL_TIM_GET_COUNTER(&htim1);
 8000706:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <ReadUltrasonic+0x110>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800070c:	4a14      	ldr	r2, [pc, #80]	@ (8000760 <ReadUltrasonic+0x118>)
 800070e:	6013      	str	r3, [r2, #0]

    uint16_t distance = (pulseEnd - pulseStart) * 0.034f / 2.0f;
 8000710:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <ReadUltrasonic+0x118>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b11      	ldr	r3, [pc, #68]	@ (800075c <ReadUltrasonic+0x114>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fdcc 	bl	80002b8 <__aeabi_ui2f>
 8000720:	4603      	mov	r3, r0
 8000722:	4910      	ldr	r1, [pc, #64]	@ (8000764 <ReadUltrasonic+0x11c>)
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fe1f 	bl	8000368 <__aeabi_fmul>
 800072a:	4603      	mov	r3, r0
 800072c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fecd 	bl	80004d0 <__aeabi_fdiv>
 8000736:	4603      	mov	r3, r0
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff65 	bl	8000608 <__aeabi_f2uiz>
 800073e:	4603      	mov	r3, r0
 8000740:	827b      	strh	r3, [r7, #18]
    return (distance < 5) ? 0 : distance;
 8000742:	8a7b      	ldrh	r3, [r7, #18]
 8000744:	2b04      	cmp	r3, #4
 8000746:	d901      	bls.n	800074c <ReadUltrasonic+0x104>
 8000748:	8a7b      	ldrh	r3, [r7, #18]
 800074a:	e000      	b.n	800074e <ReadUltrasonic+0x106>
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3718      	adds	r7, #24
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000040 	.word	0x20000040
 800075c:	200001a0 	.word	0x200001a0
 8000760:	200001a4 	.word	0x200001a4
 8000764:	3d0b4396 	.word	0x3d0b4396

08000768 <HAL_TIM_PeriodElapsedCallback>:


char tx[23] = "ABC";
int tim_cnt = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a16      	ldr	r2, [pc, #88]	@ (80007cc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d125      	bne.n	80007c4 <HAL_TIM_PeriodElapsedCallback+0x5c>
	{
		tim_cnt++;
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	4a14      	ldr	r2, [pc, #80]	@ (80007d0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000780:	6013      	str	r3, [r2, #0]
		if(tim_cnt >= 249)
 8000782:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2bf8      	cmp	r3, #248	@ 0xf8
 8000788:	dd07      	ble.n	800079a <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800078a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800078e:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000790:	f001 fa49 	bl	8001c26 <HAL_GPIO_TogglePin>
			tim_cnt = 0;
 8000794:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
		}

		memcpy(tx + 3, &distances_cm[0], 2);
 800079a:	4a0f      	ldr	r2, [pc, #60]	@ (80007d8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	8013      	strh	r3, [r2, #0]
		memcpy(tx + 5, &distances_cm[1], 2);
 80007a2:	4a0f      	ldr	r2, [pc, #60]	@ (80007e0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80007a4:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007a6:	885b      	ldrh	r3, [r3, #2]
 80007a8:	8013      	strh	r3, [r2, #0]
		memcpy(tx + 7, &distances_cm[2], 2);
 80007aa:	4a0e      	ldr	r2, [pc, #56]	@ (80007e4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80007ac:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007ae:	889b      	ldrh	r3, [r3, #4]
 80007b0:	8013      	strh	r3, [r2, #0]
		memcpy(tx + 9, &distances_cm[3], 2);
 80007b2:	4a0d      	ldr	r2, [pc, #52]	@ (80007e8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007b6:	88db      	ldrh	r3, [r3, #6]
 80007b8:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)tx, sizeof(tx));
 80007ba:	2217      	movs	r2, #23
 80007bc:	490b      	ldr	r1, [pc, #44]	@ (80007ec <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007be:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80007c0:	f002 fae6 	bl	8002d90 <HAL_UART_Transmit_DMA>
	}
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000088 	.word	0x20000088
 80007d0:	200001b0 	.word	0x200001b0
 80007d4:	40011000 	.word	0x40011000
 80007d8:	20000003 	.word	0x20000003
 80007dc:	200001a8 	.word	0x200001a8
 80007e0:	20000005 	.word	0x20000005
 80007e4:	20000007 	.word	0x20000007
 80007e8:	20000009 	.word	0x20000009
 80007ec:	20000000 	.word	0x20000000
 80007f0:	200000d0 	.word	0x200000d0

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 fc2c 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f86e 	bl	80008dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f000 f99e 	bl	8000b40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000804:	f000 f976 	bl	8000af4 <MX_DMA_Init>
  MX_TIM1_Init();
 8000808:	f000 f8ae 	bl	8000968 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800080c:	f000 f948 	bl	8000aa0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000810:	f000 f8fa 	bl	8000a08 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000814:	482c      	ldr	r0, [pc, #176]	@ (80008c8 <main+0xd4>)
 8000816:	f001 fe7f 	bl	8002518 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800081a:	482c      	ldr	r0, [pc, #176]	@ (80008cc <main+0xd8>)
 800081c:	f001 fec6 	bl	80025ac <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(TRIG1_PORT, TRIG1_PIN, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000826:	482a      	ldr	r0, [pc, #168]	@ (80008d0 <main+0xdc>)
 8000828:	f001 f9e5 	bl	8001bf6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000832:	4827      	ldr	r0, [pc, #156]	@ (80008d0 <main+0xdc>)
 8000834:	f001 f9df 	bl	8001bf6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIG3_PORT, TRIG3_PIN, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800083e:	4824      	ldr	r0, [pc, #144]	@ (80008d0 <main+0xdc>)
 8000840:	f001 f9d9 	bl	8001bf6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIG4_PORT, TRIG4_PIN, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2101      	movs	r1, #1
 8000848:	4822      	ldr	r0, [pc, #136]	@ (80008d4 <main+0xe0>)
 800084a:	f001 f9d4 	bl	8001bf6 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	distances_cm[0] = ReadUltrasonic(TRIG1_PORT, TRIG1_PIN, ECHO1_PORT, ECHO1_PIN);
 800084e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000852:	4a1f      	ldr	r2, [pc, #124]	@ (80008d0 <main+0xdc>)
 8000854:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000858:	481d      	ldr	r0, [pc, #116]	@ (80008d0 <main+0xdc>)
 800085a:	f7ff fef5 	bl	8000648 <ReadUltrasonic>
 800085e:	4603      	mov	r3, r0
 8000860:	461a      	mov	r2, r3
 8000862:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <main+0xe4>)
 8000864:	801a      	strh	r2, [r3, #0]
	HAL_Delay(6);  // Short delay between sensors
 8000866:	2006      	movs	r0, #6
 8000868:	f000 fc56 	bl	8001118 <HAL_Delay>

	distances_cm[1] = ReadUltrasonic(TRIG2_PORT, TRIG2_PIN, ECHO2_PORT, ECHO2_PIN);
 800086c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000870:	4a17      	ldr	r2, [pc, #92]	@ (80008d0 <main+0xdc>)
 8000872:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000876:	4816      	ldr	r0, [pc, #88]	@ (80008d0 <main+0xdc>)
 8000878:	f7ff fee6 	bl	8000648 <ReadUltrasonic>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <main+0xe4>)
 8000882:	805a      	strh	r2, [r3, #2]
	HAL_Delay(6);
 8000884:	2006      	movs	r0, #6
 8000886:	f000 fc47 	bl	8001118 <HAL_Delay>

	distances_cm[2] = ReadUltrasonic(TRIG3_PORT, TRIG3_PIN, ECHO3_PORT, ECHO3_PIN);
 800088a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800088e:	4a10      	ldr	r2, [pc, #64]	@ (80008d0 <main+0xdc>)
 8000890:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000894:	480e      	ldr	r0, [pc, #56]	@ (80008d0 <main+0xdc>)
 8000896:	f7ff fed7 	bl	8000648 <ReadUltrasonic>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <main+0xe4>)
 80008a0:	809a      	strh	r2, [r3, #4]
	HAL_Delay(6);
 80008a2:	2006      	movs	r0, #6
 80008a4:	f000 fc38 	bl	8001118 <HAL_Delay>

	distances_cm[3] = ReadUltrasonic(TRIG4_PORT, TRIG4_PIN, ECHO4_PORT, ECHO4_PIN);
 80008a8:	2302      	movs	r3, #2
 80008aa:	4a0a      	ldr	r2, [pc, #40]	@ (80008d4 <main+0xe0>)
 80008ac:	2101      	movs	r1, #1
 80008ae:	4809      	ldr	r0, [pc, #36]	@ (80008d4 <main+0xe0>)
 80008b0:	f7ff feca 	bl	8000648 <ReadUltrasonic>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <main+0xe4>)
 80008ba:	80da      	strh	r2, [r3, #6]

	HAL_Delay(32);
 80008bc:	2020      	movs	r0, #32
 80008be:	f000 fc2b 	bl	8001118 <HAL_Delay>
	distances_cm[0] = ReadUltrasonic(TRIG1_PORT, TRIG1_PIN, ECHO1_PORT, ECHO1_PIN);
 80008c2:	bf00      	nop
 80008c4:	e7c3      	b.n	800084e <main+0x5a>
 80008c6:	bf00      	nop
 80008c8:	20000040 	.word	0x20000040
 80008cc:	20000088 	.word	0x20000088
 80008d0:	40010800 	.word	0x40010800
 80008d4:	40010c00 	.word	0x40010c00
 80008d8:	200001a8 	.word	0x200001a8

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b090      	sub	sp, #64	@ 0x40
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	f107 0318 	add.w	r3, r7, #24
 80008e6:	2228      	movs	r2, #40	@ 0x28
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 f876 	bl	80039dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000902:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000906:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090c:	2301      	movs	r3, #1
 800090e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000910:	2302      	movs	r3, #2
 8000912:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000914:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000918:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800091a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800091e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	f107 0318 	add.w	r3, r7, #24
 8000924:	4618      	mov	r0, r3
 8000926:	f001 f997 	bl	8001c58 <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000930:	f000 f9a2 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000934:	230f      	movs	r3, #15
 8000936:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000938:	2302      	movs	r3, #2
 800093a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000940:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2102      	movs	r1, #2
 800094e:	4618      	mov	r0, r3
 8000950:	f001 fc04 	bl	800215c <HAL_RCC_ClockConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800095a:	f000 f98d 	bl	8000c78 <Error_Handler>
  }
}
 800095e:	bf00      	nop
 8000960:	3740      	adds	r7, #64	@ 0x40
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000984:	4b1e      	ldr	r3, [pc, #120]	@ (8000a00 <MX_TIM1_Init+0x98>)
 8000986:	4a1f      	ldr	r2, [pc, #124]	@ (8000a04 <MX_TIM1_Init+0x9c>)
 8000988:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 800098a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <MX_TIM1_Init+0x98>)
 800098c:	2247      	movs	r2, #71	@ 0x47
 800098e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b1b      	ldr	r3, [pc, #108]	@ (8000a00 <MX_TIM1_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000996:	4b1a      	ldr	r3, [pc, #104]	@ (8000a00 <MX_TIM1_Init+0x98>)
 8000998:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800099c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099e:	4b18      	ldr	r3, [pc, #96]	@ (8000a00 <MX_TIM1_Init+0x98>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a4:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <MX_TIM1_Init+0x98>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009aa:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <MX_TIM1_Init+0x98>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b0:	4813      	ldr	r0, [pc, #76]	@ (8000a00 <MX_TIM1_Init+0x98>)
 80009b2:	f001 fd61 	bl	8002478 <HAL_TIM_Base_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009bc:	f000 f95c 	bl	8000c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	4619      	mov	r1, r3
 80009cc:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <MX_TIM1_Init+0x98>)
 80009ce:	f001 ff2f 	bl	8002830 <HAL_TIM_ConfigClockSource>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009d8:	f000 f94e 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_TIM1_Init+0x98>)
 80009ea:	f002 f911 	bl	8002c10 <HAL_TIMEx_MasterConfigSynchronization>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009f4:	f000 f940 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000040 	.word	0x20000040
 8000a04:	40012c00 	.word	0x40012c00

08000a08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <MX_TIM2_Init+0x94>)
 8000a26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a9c <MX_TIM2_Init+0x94>)
 8000a2e:	2247      	movs	r2, #71	@ 0x47
 8000a30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <MX_TIM2_Init+0x94>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000a38:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <MX_TIM2_Init+0x94>)
 8000a3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a40:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_TIM2_Init+0x94>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <MX_TIM2_Init+0x94>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a4c:	4813      	ldr	r0, [pc, #76]	@ (8000a9c <MX_TIM2_Init+0x94>)
 8000a4e:	f001 fd13 	bl	8002478 <HAL_TIM_Base_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a58:	f000 f90e 	bl	8000c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	4619      	mov	r1, r3
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <MX_TIM2_Init+0x94>)
 8000a6a:	f001 fee1 	bl	8002830 <HAL_TIM_ConfigClockSource>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a74:	f000 f900 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_TIM2_Init+0x94>)
 8000a86:	f002 f8c3 	bl	8002c10 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a90:	f000 f8f2 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000088 	.word	0x20000088

08000aa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <MX_USART2_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f002 f90a 	bl	8002cf0 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f8c9 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000d0 	.word	0x200000d0
 8000af0:	40004400 	.word	0x40004400

08000af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <MX_DMA_Init+0x48>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	4a0f      	ldr	r2, [pc, #60]	@ (8000b3c <MX_DMA_Init+0x48>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6153      	str	r3, [r2, #20]
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <MX_DMA_Init+0x48>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2010      	movs	r0, #16
 8000b18:	f000 fbf9 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000b1c:	2010      	movs	r0, #16
 8000b1e:	f000 fc12 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2011      	movs	r0, #17
 8000b28:	f000 fbf1 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000b2c:	2011      	movs	r0, #17
 8000b2e:	f000 fc0a 	bl	8001346 <HAL_NVIC_EnableIRQ>

}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b54:	4b44      	ldr	r3, [pc, #272]	@ (8000c68 <MX_GPIO_Init+0x128>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a43      	ldr	r2, [pc, #268]	@ (8000c68 <MX_GPIO_Init+0x128>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b41      	ldr	r3, [pc, #260]	@ (8000c68 <MX_GPIO_Init+0x128>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0310 	and.w	r3, r3, #16
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8000c68 <MX_GPIO_Init+0x128>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a3d      	ldr	r2, [pc, #244]	@ (8000c68 <MX_GPIO_Init+0x128>)
 8000b72:	f043 0320 	orr.w	r3, r3, #32
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b3b      	ldr	r3, [pc, #236]	@ (8000c68 <MX_GPIO_Init+0x128>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0320 	and.w	r3, r3, #32
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b38      	ldr	r3, [pc, #224]	@ (8000c68 <MX_GPIO_Init+0x128>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a37      	ldr	r2, [pc, #220]	@ (8000c68 <MX_GPIO_Init+0x128>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b35      	ldr	r3, [pc, #212]	@ (8000c68 <MX_GPIO_Init+0x128>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9c:	4b32      	ldr	r3, [pc, #200]	@ (8000c68 <MX_GPIO_Init+0x128>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a31      	ldr	r2, [pc, #196]	@ (8000c68 <MX_GPIO_Init+0x128>)
 8000ba2:	f043 0308 	orr.w	r3, r3, #8
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b2f      	ldr	r3, [pc, #188]	@ (8000c68 <MX_GPIO_Init+0x128>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0308 	and.w	r3, r3, #8
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bba:	482c      	ldr	r0, [pc, #176]	@ (8000c6c <MX_GPIO_Init+0x12c>)
 8000bbc:	f001 f81b 	bl	8001bf6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	482a      	ldr	r0, [pc, #168]	@ (8000c70 <MX_GPIO_Init+0x130>)
 8000bc6:	f001 f816 	bl	8001bf6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 51b0 	mov.w	r1, #5632	@ 0x1600
 8000bd0:	4828      	ldr	r0, [pc, #160]	@ (8000c74 <MX_GPIO_Init+0x134>)
 8000bd2:	f001 f810 	bl	8001bf6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4619      	mov	r1, r3
 8000bee:	481f      	ldr	r0, [pc, #124]	@ (8000c6c <MX_GPIO_Init+0x12c>)
 8000bf0:	f000 fe66 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4819      	ldr	r0, [pc, #100]	@ (8000c70 <MX_GPIO_Init+0x130>)
 8000c0c:	f000 fe58 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c10:	2302      	movs	r3, #2
 8000c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4619      	mov	r1, r3
 8000c22:	4813      	ldr	r0, [pc, #76]	@ (8000c70 <MX_GPIO_Init+0x130>)
 8000c24:	f000 fe4c 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_15;
 8000c28:	f44f 4309 	mov.w	r3, #35072	@ 0x8900
 8000c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480d      	ldr	r0, [pc, #52]	@ (8000c74 <MX_GPIO_Init+0x134>)
 8000c3e:	f000 fe3f 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8000c42:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 8000c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4806      	ldr	r0, [pc, #24]	@ (8000c74 <MX_GPIO_Init+0x134>)
 8000c5c:	f000 fe30 	bl	80018c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c60:	bf00      	nop
 8000c62:	3720      	adds	r7, #32
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40011000 	.word	0x40011000
 8000c70:	40010c00 	.word	0x40010c00
 8000c74:	40010800 	.word	0x40010800

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <Error_Handler+0x8>

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <HAL_MspInit+0x6c>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	4a18      	ldr	r2, [pc, #96]	@ (8000cf0 <HAL_MspInit+0x6c>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6193      	str	r3, [r2, #24]
 8000c96:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <HAL_MspInit+0x6c>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <HAL_MspInit+0x6c>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4a12      	ldr	r2, [pc, #72]	@ (8000cf0 <HAL_MspInit+0x6c>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cac:	61d3      	str	r3, [r2, #28]
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <HAL_MspInit+0x6c>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2005      	movs	r0, #5
 8000cc0:	f000 fb25 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000cc4:	2005      	movs	r0, #5
 8000cc6:	f000 fb3e 	bl	8001346 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <HAL_MspInit+0x70>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <HAL_MspInit+0x70>)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000

08000cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a26      	ldr	r2, [pc, #152]	@ (8000da0 <HAL_TIM_Base_MspInit+0xa8>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12c      	bne.n	8000d64 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0a:	4b26      	ldr	r3, [pc, #152]	@ (8000da4 <HAL_TIM_Base_MspInit+0xac>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	4a25      	ldr	r2, [pc, #148]	@ (8000da4 <HAL_TIM_Base_MspInit+0xac>)
 8000d10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d14:	6193      	str	r3, [r2, #24]
 8000d16:	4b23      	ldr	r3, [pc, #140]	@ (8000da4 <HAL_TIM_Base_MspInit+0xac>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	2018      	movs	r0, #24
 8000d28:	f000 faf1 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000d2c:	2018      	movs	r0, #24
 8000d2e:	f000 fb0a 	bl	8001346 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	2019      	movs	r0, #25
 8000d38:	f000 fae9 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d3c:	2019      	movs	r0, #25
 8000d3e:	f000 fb02 	bl	8001346 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	201a      	movs	r0, #26
 8000d48:	f000 fae1 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000d4c:	201a      	movs	r0, #26
 8000d4e:	f000 fafa 	bl	8001346 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	201b      	movs	r0, #27
 8000d58:	f000 fad9 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d5c:	201b      	movs	r0, #27
 8000d5e:	f000 faf2 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d62:	e018      	b.n	8000d96 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d6c:	d113      	bne.n	8000d96 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <HAL_TIM_Base_MspInit+0xac>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	4a0c      	ldr	r2, [pc, #48]	@ (8000da4 <HAL_TIM_Base_MspInit+0xac>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	61d3      	str	r3, [r2, #28]
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <HAL_TIM_Base_MspInit+0xac>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	201c      	movs	r0, #28
 8000d8c:	f000 fabf 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d90:	201c      	movs	r0, #28
 8000d92:	f000 fad8 	bl	8001346 <HAL_NVIC_EnableIRQ>
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40012c00 	.word	0x40012c00
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a46      	ldr	r2, [pc, #280]	@ (8000edc <HAL_UART_MspInit+0x134>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	f040 8084 	bne.w	8000ed2 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dca:	4b45      	ldr	r3, [pc, #276]	@ (8000ee0 <HAL_UART_MspInit+0x138>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a44      	ldr	r2, [pc, #272]	@ (8000ee0 <HAL_UART_MspInit+0x138>)
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd4:	61d3      	str	r3, [r2, #28]
 8000dd6:	4b42      	ldr	r3, [pc, #264]	@ (8000ee0 <HAL_UART_MspInit+0x138>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ee0 <HAL_UART_MspInit+0x138>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ee0 <HAL_UART_MspInit+0x138>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	6193      	str	r3, [r2, #24]
 8000dee:	4b3c      	ldr	r3, [pc, #240]	@ (8000ee0 <HAL_UART_MspInit+0x138>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4835      	ldr	r0, [pc, #212]	@ (8000ee4 <HAL_UART_MspInit+0x13c>)
 8000e0e:	f000 fd57 	bl	80018c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e12:	2308      	movs	r3, #8
 8000e14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	482f      	ldr	r0, [pc, #188]	@ (8000ee4 <HAL_UART_MspInit+0x13c>)
 8000e26:	f000 fd4b 	bl	80018c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee8 <HAL_UART_MspInit+0x140>)
 8000e2c:	4a2f      	ldr	r2, [pc, #188]	@ (8000eec <HAL_UART_MspInit+0x144>)
 8000e2e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee8 <HAL_UART_MspInit+0x140>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee8 <HAL_UART_MspInit+0x140>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee8 <HAL_UART_MspInit+0x140>)
 8000e3e:	2280      	movs	r2, #128	@ 0x80
 8000e40:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e42:	4b29      	ldr	r3, [pc, #164]	@ (8000ee8 <HAL_UART_MspInit+0x140>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e48:	4b27      	ldr	r3, [pc, #156]	@ (8000ee8 <HAL_UART_MspInit+0x140>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <HAL_UART_MspInit+0x140>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e54:	4b24      	ldr	r3, [pc, #144]	@ (8000ee8 <HAL_UART_MspInit+0x140>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e5a:	4823      	ldr	r0, [pc, #140]	@ (8000ee8 <HAL_UART_MspInit+0x140>)
 8000e5c:	f000 fa8e 	bl	800137c <HAL_DMA_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8000e66:	f7ff ff07 	bl	8000c78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee8 <HAL_UART_MspInit+0x140>)
 8000e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e70:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee8 <HAL_UART_MspInit+0x140>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000e76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <HAL_UART_MspInit+0x148>)
 8000e78:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef4 <HAL_UART_MspInit+0x14c>)
 8000e7a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <HAL_UART_MspInit+0x148>)
 8000e7e:	2210      	movs	r2, #16
 8000e80:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <HAL_UART_MspInit+0x148>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e88:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <HAL_UART_MspInit+0x148>)
 8000e8a:	2280      	movs	r2, #128	@ 0x80
 8000e8c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <HAL_UART_MspInit+0x148>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e94:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <HAL_UART_MspInit+0x148>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <HAL_UART_MspInit+0x148>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea0:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <HAL_UART_MspInit+0x148>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ea6:	4812      	ldr	r0, [pc, #72]	@ (8000ef0 <HAL_UART_MspInit+0x148>)
 8000ea8:	f000 fa68 	bl	800137c <HAL_DMA_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000eb2:	f7ff fee1 	bl	8000c78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef0 <HAL_UART_MspInit+0x148>)
 8000eba:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef0 <HAL_UART_MspInit+0x148>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2026      	movs	r0, #38	@ 0x26
 8000ec8:	f000 fa21 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ecc:	2026      	movs	r0, #38	@ 0x26
 8000ece:	f000 fa3a 	bl	8001346 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40004400 	.word	0x40004400
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010800 	.word	0x40010800
 8000ee8:	20000118 	.word	0x20000118
 8000eec:	4002006c 	.word	0x4002006c
 8000ef0:	2000015c 	.word	0x2000015c
 8000ef4:	40020080 	.word	0x40020080

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <NMI_Handler+0x4>

08000f00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <MemManage_Handler+0x4>

08000f10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 f8ca 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f60:	4802      	ldr	r0, [pc, #8]	@ (8000f6c <DMA1_Channel6_IRQHandler+0x10>)
 8000f62:	f000 fb79 	bl	8001658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000118 	.word	0x20000118

08000f70 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <DMA1_Channel7_IRQHandler+0x10>)
 8000f76:	f000 fb6f 	bl	8001658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000015c 	.word	0x2000015c

08000f84 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f88:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <TIM1_BRK_IRQHandler+0x10>)
 8000f8a:	f001 fb61 	bl	8002650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000040 	.word	0x20000040

08000f98 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f9c:	4802      	ldr	r0, [pc, #8]	@ (8000fa8 <TIM1_UP_IRQHandler+0x10>)
 8000f9e:	f001 fb57 	bl	8002650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000040 	.word	0x20000040

08000fac <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fb0:	4802      	ldr	r0, [pc, #8]	@ (8000fbc <TIM1_TRG_COM_IRQHandler+0x10>)
 8000fb2:	f001 fb4d 	bl	8002650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000040 	.word	0x20000040

08000fc0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <TIM1_CC_IRQHandler+0x10>)
 8000fc6:	f001 fb43 	bl	8002650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000040 	.word	0x20000040

08000fd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <TIM2_IRQHandler+0x10>)
 8000fda:	f001 fb39 	bl	8002650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000088 	.word	0x20000088

08000fe8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <USART2_IRQHandler+0x10>)
 8000fee:	f001 ff3f 	bl	8002e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000d0 	.word	0x200000d0

08000ffc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001008:	f7ff fff8 	bl	8000ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800100c:	480b      	ldr	r0, [pc, #44]	@ (800103c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800100e:	490c      	ldr	r1, [pc, #48]	@ (8001040 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001010:	4a0c      	ldr	r2, [pc, #48]	@ (8001044 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a09      	ldr	r2, [pc, #36]	@ (8001048 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001024:	4c09      	ldr	r4, [pc, #36]	@ (800104c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001032:	f002 fcdb 	bl	80039ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001036:	f7ff fbdd 	bl	80007f4 <main>
  bx lr
 800103a:	4770      	bx	lr
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001044:	08003a80 	.word	0x08003a80
  ldr r2, =_sbss
 8001048:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800104c:	200001b8 	.word	0x200001b8

08001050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_2_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	@ (800107c <HAL_Init+0x28>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	@ (800107c <HAL_Init+0x28>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f947 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	200f      	movs	r0, #15
 800106c:	f000 f808 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fe08 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40022000 	.word	0x40022000

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f95f 	bl	8001362 <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 f927 	bl	800130e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	@ (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000018 	.word	0x20000018
 80010d8:	20000020 	.word	0x20000020
 80010dc:	2000001c 	.word	0x2000001c

080010e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <HAL_IncTick+0x1c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <HAL_IncTick+0x20>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a03      	ldr	r2, [pc, #12]	@ (8001100 <HAL_IncTick+0x20>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	20000020 	.word	0x20000020
 8001100:	200001b4 	.word	0x200001b4

08001104 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b02      	ldr	r3, [pc, #8]	@ (8001114 <HAL_GetTick+0x10>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	200001b4 	.word	0x200001b4

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff fff0 	bl	8001104 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <HAL_Delay+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113e:	bf00      	nop
 8001140:	f7ff ffe0 	bl	8001104 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000020 	.word	0x20000020

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4906      	ldr	r1, [pc, #24]	@ (80011f8 <__NVIC_EnableIRQ+0x34>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	@ (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	@ (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	@ 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	@ 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c4:	d301      	bcc.n	80012ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00f      	b.n	80012ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ca:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <SysTick_Config+0x40>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d2:	210f      	movs	r1, #15
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f7ff ff90 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <SysTick_Config+0x40>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e2:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <SysTick_Config+0x40>)
 80012e4:	2207      	movs	r2, #7
 80012e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff2d 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001320:	f7ff ff42 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 8001324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff ff90 	bl	8001250 <NVIC_EncodePriority>
 8001330:	4602      	mov	r2, r0
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff5f 	bl	80011fc <__NVIC_SetPriority>
}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff35 	bl	80011c4 <__NVIC_EnableIRQ>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffa2 	bl	80012b4 <SysTick_Config>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e043      	b.n	800141a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <HAL_DMA_Init+0xa8>)
 800139a:	4413      	add	r3, r2
 800139c:	4a22      	ldr	r2, [pc, #136]	@ (8001428 <HAL_DMA_Init+0xac>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	009a      	lsls	r2, r3, #2
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a1f      	ldr	r2, [pc, #124]	@ (800142c <HAL_DMA_Init+0xb0>)
 80013ae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2202      	movs	r2, #2
 80013b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013c6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80013ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	bffdfff8 	.word	0xbffdfff8
 8001428:	cccccccd 	.word	0xcccccccd
 800142c:	40020000 	.word	0x40020000

08001430 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_DMA_Start_IT+0x20>
 800144c:	2302      	movs	r3, #2
 800144e:	e04b      	b.n	80014e8 <HAL_DMA_Start_IT+0xb8>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b01      	cmp	r3, #1
 8001462:	d13a      	bne.n	80014da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2202      	movs	r2, #2
 8001468:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2200      	movs	r2, #0
 8001470:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0201 	bic.w	r2, r2, #1
 8001480:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	68b9      	ldr	r1, [r7, #8]
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f000 f9eb 	bl	8001864 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001492:	2b00      	cmp	r3, #0
 8001494:	d008      	beq.n	80014a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 020e 	orr.w	r2, r2, #14
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	e00f      	b.n	80014c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0204 	bic.w	r2, r2, #4
 80014b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 020a 	orr.w	r2, r2, #10
 80014c6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0201 	orr.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	e005      	b.n	80014e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014e2:	2302      	movs	r3, #2
 80014e4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d008      	beq.n	800151a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2204      	movs	r2, #4
 800150c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e020      	b.n	800155c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 020e 	bic.w	r2, r2, #14
 8001528:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0201 	bic.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001542:	2101      	movs	r1, #1
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800155a:	7bfb      	ldrb	r3, [r7, #15]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
	...

08001568 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d005      	beq.n	800158c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2204      	movs	r2, #4
 8001584:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	e051      	b.n	8001630 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 020e 	bic.w	r2, r2, #14
 800159a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0201 	bic.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a22      	ldr	r2, [pc, #136]	@ (800163c <HAL_DMA_Abort_IT+0xd4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d029      	beq.n	800160a <HAL_DMA_Abort_IT+0xa2>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a21      	ldr	r2, [pc, #132]	@ (8001640 <HAL_DMA_Abort_IT+0xd8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d022      	beq.n	8001606 <HAL_DMA_Abort_IT+0x9e>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001644 <HAL_DMA_Abort_IT+0xdc>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d01a      	beq.n	8001600 <HAL_DMA_Abort_IT+0x98>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001648 <HAL_DMA_Abort_IT+0xe0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d012      	beq.n	80015fa <HAL_DMA_Abort_IT+0x92>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a1c      	ldr	r2, [pc, #112]	@ (800164c <HAL_DMA_Abort_IT+0xe4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d00a      	beq.n	80015f4 <HAL_DMA_Abort_IT+0x8c>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001650 <HAL_DMA_Abort_IT+0xe8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d102      	bne.n	80015ee <HAL_DMA_Abort_IT+0x86>
 80015e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015ec:	e00e      	b.n	800160c <HAL_DMA_Abort_IT+0xa4>
 80015ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015f2:	e00b      	b.n	800160c <HAL_DMA_Abort_IT+0xa4>
 80015f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015f8:	e008      	b.n	800160c <HAL_DMA_Abort_IT+0xa4>
 80015fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015fe:	e005      	b.n	800160c <HAL_DMA_Abort_IT+0xa4>
 8001600:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001604:	e002      	b.n	800160c <HAL_DMA_Abort_IT+0xa4>
 8001606:	2310      	movs	r3, #16
 8001608:	e000      	b.n	800160c <HAL_DMA_Abort_IT+0xa4>
 800160a:	2301      	movs	r3, #1
 800160c:	4a11      	ldr	r2, [pc, #68]	@ (8001654 <HAL_DMA_Abort_IT+0xec>)
 800160e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	4798      	blx	r3
    } 
  }
  return status;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40020008 	.word	0x40020008
 8001640:	4002001c 	.word	0x4002001c
 8001644:	40020030 	.word	0x40020030
 8001648:	40020044 	.word	0x40020044
 800164c:	40020058 	.word	0x40020058
 8001650:	4002006c 	.word	0x4002006c
 8001654:	40020000 	.word	0x40020000

08001658 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	2204      	movs	r2, #4
 8001676:	409a      	lsls	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d04f      	beq.n	8001720 <HAL_DMA_IRQHandler+0xc8>
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d04a      	beq.n	8001720 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0320 	and.w	r3, r3, #32
 8001694:	2b00      	cmp	r3, #0
 8001696:	d107      	bne.n	80016a8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0204 	bic.w	r2, r2, #4
 80016a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a66      	ldr	r2, [pc, #408]	@ (8001848 <HAL_DMA_IRQHandler+0x1f0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d029      	beq.n	8001706 <HAL_DMA_IRQHandler+0xae>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a65      	ldr	r2, [pc, #404]	@ (800184c <HAL_DMA_IRQHandler+0x1f4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d022      	beq.n	8001702 <HAL_DMA_IRQHandler+0xaa>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a63      	ldr	r2, [pc, #396]	@ (8001850 <HAL_DMA_IRQHandler+0x1f8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d01a      	beq.n	80016fc <HAL_DMA_IRQHandler+0xa4>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a62      	ldr	r2, [pc, #392]	@ (8001854 <HAL_DMA_IRQHandler+0x1fc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d012      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x9e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a60      	ldr	r2, [pc, #384]	@ (8001858 <HAL_DMA_IRQHandler+0x200>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00a      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x98>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a5f      	ldr	r2, [pc, #380]	@ (800185c <HAL_DMA_IRQHandler+0x204>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d102      	bne.n	80016ea <HAL_DMA_IRQHandler+0x92>
 80016e4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016e8:	e00e      	b.n	8001708 <HAL_DMA_IRQHandler+0xb0>
 80016ea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80016ee:	e00b      	b.n	8001708 <HAL_DMA_IRQHandler+0xb0>
 80016f0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80016f4:	e008      	b.n	8001708 <HAL_DMA_IRQHandler+0xb0>
 80016f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016fa:	e005      	b.n	8001708 <HAL_DMA_IRQHandler+0xb0>
 80016fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001700:	e002      	b.n	8001708 <HAL_DMA_IRQHandler+0xb0>
 8001702:	2340      	movs	r3, #64	@ 0x40
 8001704:	e000      	b.n	8001708 <HAL_DMA_IRQHandler+0xb0>
 8001706:	2304      	movs	r3, #4
 8001708:	4a55      	ldr	r2, [pc, #340]	@ (8001860 <HAL_DMA_IRQHandler+0x208>)
 800170a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 8094 	beq.w	800183e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800171e:	e08e      	b.n	800183e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	2202      	movs	r2, #2
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d056      	beq.n	80017de <HAL_DMA_IRQHandler+0x186>
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d051      	beq.n	80017de <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10b      	bne.n	8001760 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 020a 	bic.w	r2, r2, #10
 8001756:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a38      	ldr	r2, [pc, #224]	@ (8001848 <HAL_DMA_IRQHandler+0x1f0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d029      	beq.n	80017be <HAL_DMA_IRQHandler+0x166>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a37      	ldr	r2, [pc, #220]	@ (800184c <HAL_DMA_IRQHandler+0x1f4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d022      	beq.n	80017ba <HAL_DMA_IRQHandler+0x162>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a35      	ldr	r2, [pc, #212]	@ (8001850 <HAL_DMA_IRQHandler+0x1f8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d01a      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x15c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a34      	ldr	r2, [pc, #208]	@ (8001854 <HAL_DMA_IRQHandler+0x1fc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d012      	beq.n	80017ae <HAL_DMA_IRQHandler+0x156>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a32      	ldr	r2, [pc, #200]	@ (8001858 <HAL_DMA_IRQHandler+0x200>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00a      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x150>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a31      	ldr	r2, [pc, #196]	@ (800185c <HAL_DMA_IRQHandler+0x204>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d102      	bne.n	80017a2 <HAL_DMA_IRQHandler+0x14a>
 800179c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80017a0:	e00e      	b.n	80017c0 <HAL_DMA_IRQHandler+0x168>
 80017a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017a6:	e00b      	b.n	80017c0 <HAL_DMA_IRQHandler+0x168>
 80017a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017ac:	e008      	b.n	80017c0 <HAL_DMA_IRQHandler+0x168>
 80017ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017b2:	e005      	b.n	80017c0 <HAL_DMA_IRQHandler+0x168>
 80017b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017b8:	e002      	b.n	80017c0 <HAL_DMA_IRQHandler+0x168>
 80017ba:	2320      	movs	r3, #32
 80017bc:	e000      	b.n	80017c0 <HAL_DMA_IRQHandler+0x168>
 80017be:	2302      	movs	r3, #2
 80017c0:	4a27      	ldr	r2, [pc, #156]	@ (8001860 <HAL_DMA_IRQHandler+0x208>)
 80017c2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d034      	beq.n	800183e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017dc:	e02f      	b.n	800183e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	2208      	movs	r2, #8
 80017e4:	409a      	lsls	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d028      	beq.n	8001840 <HAL_DMA_IRQHandler+0x1e8>
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d023      	beq.n	8001840 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 020e 	bic.w	r2, r2, #14
 8001806:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f202 	lsl.w	r2, r1, r2
 8001816:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	4798      	blx	r3
    }
  }
  return;
 800183e:	bf00      	nop
 8001840:	bf00      	nop
}
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40020008 	.word	0x40020008
 800184c:	4002001c 	.word	0x4002001c
 8001850:	40020030 	.word	0x40020030
 8001854:	40020044 	.word	0x40020044
 8001858:	40020058 	.word	0x40020058
 800185c:	4002006c 	.word	0x4002006c
 8001860:	40020000 	.word	0x40020000

08001864 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800187a:	2101      	movs	r1, #1
 800187c:	fa01 f202 	lsl.w	r2, r1, r2
 8001880:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b10      	cmp	r3, #16
 8001890:	d108      	bne.n	80018a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018a2:	e007      	b.n	80018b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	60da      	str	r2, [r3, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b08b      	sub	sp, #44	@ 0x2c
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d2:	e169      	b.n	8001ba8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018d4:	2201      	movs	r2, #1
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	f040 8158 	bne.w	8001ba2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4a9a      	ldr	r2, [pc, #616]	@ (8001b60 <HAL_GPIO_Init+0x2a0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d05e      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 80018fc:	4a98      	ldr	r2, [pc, #608]	@ (8001b60 <HAL_GPIO_Init+0x2a0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d875      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 8001902:	4a98      	ldr	r2, [pc, #608]	@ (8001b64 <HAL_GPIO_Init+0x2a4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d058      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 8001908:	4a96      	ldr	r2, [pc, #600]	@ (8001b64 <HAL_GPIO_Init+0x2a4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d86f      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 800190e:	4a96      	ldr	r2, [pc, #600]	@ (8001b68 <HAL_GPIO_Init+0x2a8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d052      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 8001914:	4a94      	ldr	r2, [pc, #592]	@ (8001b68 <HAL_GPIO_Init+0x2a8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d869      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 800191a:	4a94      	ldr	r2, [pc, #592]	@ (8001b6c <HAL_GPIO_Init+0x2ac>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d04c      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 8001920:	4a92      	ldr	r2, [pc, #584]	@ (8001b6c <HAL_GPIO_Init+0x2ac>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d863      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 8001926:	4a92      	ldr	r2, [pc, #584]	@ (8001b70 <HAL_GPIO_Init+0x2b0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d046      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 800192c:	4a90      	ldr	r2, [pc, #576]	@ (8001b70 <HAL_GPIO_Init+0x2b0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d85d      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 8001932:	2b12      	cmp	r3, #18
 8001934:	d82a      	bhi.n	800198c <HAL_GPIO_Init+0xcc>
 8001936:	2b12      	cmp	r3, #18
 8001938:	d859      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 800193a:	a201      	add	r2, pc, #4	@ (adr r2, 8001940 <HAL_GPIO_Init+0x80>)
 800193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001940:	080019bb 	.word	0x080019bb
 8001944:	08001995 	.word	0x08001995
 8001948:	080019a7 	.word	0x080019a7
 800194c:	080019e9 	.word	0x080019e9
 8001950:	080019ef 	.word	0x080019ef
 8001954:	080019ef 	.word	0x080019ef
 8001958:	080019ef 	.word	0x080019ef
 800195c:	080019ef 	.word	0x080019ef
 8001960:	080019ef 	.word	0x080019ef
 8001964:	080019ef 	.word	0x080019ef
 8001968:	080019ef 	.word	0x080019ef
 800196c:	080019ef 	.word	0x080019ef
 8001970:	080019ef 	.word	0x080019ef
 8001974:	080019ef 	.word	0x080019ef
 8001978:	080019ef 	.word	0x080019ef
 800197c:	080019ef 	.word	0x080019ef
 8001980:	080019ef 	.word	0x080019ef
 8001984:	0800199d 	.word	0x0800199d
 8001988:	080019b1 	.word	0x080019b1
 800198c:	4a79      	ldr	r2, [pc, #484]	@ (8001b74 <HAL_GPIO_Init+0x2b4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001992:	e02c      	b.n	80019ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	623b      	str	r3, [r7, #32]
          break;
 800199a:	e029      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	3304      	adds	r3, #4
 80019a2:	623b      	str	r3, [r7, #32]
          break;
 80019a4:	e024      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	3308      	adds	r3, #8
 80019ac:	623b      	str	r3, [r7, #32]
          break;
 80019ae:	e01f      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	330c      	adds	r3, #12
 80019b6:	623b      	str	r3, [r7, #32]
          break;
 80019b8:	e01a      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019c2:	2304      	movs	r3, #4
 80019c4:	623b      	str	r3, [r7, #32]
          break;
 80019c6:	e013      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d0:	2308      	movs	r3, #8
 80019d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	611a      	str	r2, [r3, #16]
          break;
 80019da:	e009      	b.n	80019f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019dc:	2308      	movs	r3, #8
 80019de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	615a      	str	r2, [r3, #20]
          break;
 80019e6:	e003      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
          break;
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          break;
 80019ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2bff      	cmp	r3, #255	@ 0xff
 80019f4:	d801      	bhi.n	80019fa <HAL_GPIO_Init+0x13a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	e001      	b.n	80019fe <HAL_GPIO_Init+0x13e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3304      	adds	r3, #4
 80019fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2bff      	cmp	r3, #255	@ 0xff
 8001a04:	d802      	bhi.n	8001a0c <HAL_GPIO_Init+0x14c>
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0x152>
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	3b08      	subs	r3, #8
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	210f      	movs	r1, #15
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	401a      	ands	r2, r3
 8001a24:	6a39      	ldr	r1, [r7, #32]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 80b1 	beq.w	8001ba2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a40:	4b4d      	ldr	r3, [pc, #308]	@ (8001b78 <HAL_GPIO_Init+0x2b8>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a4c      	ldr	r2, [pc, #304]	@ (8001b78 <HAL_GPIO_Init+0x2b8>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b78 <HAL_GPIO_Init+0x2b8>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a58:	4a48      	ldr	r2, [pc, #288]	@ (8001b7c <HAL_GPIO_Init+0x2bc>)
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	220f      	movs	r2, #15
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a40      	ldr	r2, [pc, #256]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d013      	beq.n	8001aac <HAL_GPIO_Init+0x1ec>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a3f      	ldr	r2, [pc, #252]	@ (8001b84 <HAL_GPIO_Init+0x2c4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_GPIO_Init+0x1e8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b88 <HAL_GPIO_Init+0x2c8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d007      	beq.n	8001aa4 <HAL_GPIO_Init+0x1e4>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a3d      	ldr	r2, [pc, #244]	@ (8001b8c <HAL_GPIO_Init+0x2cc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_GPIO_Init+0x1e0>
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e006      	b.n	8001aae <HAL_GPIO_Init+0x1ee>
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	e004      	b.n	8001aae <HAL_GPIO_Init+0x1ee>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e002      	b.n	8001aae <HAL_GPIO_Init+0x1ee>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_GPIO_Init+0x1ee>
 8001aac:	2300      	movs	r3, #0
 8001aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab0:	f002 0203 	and.w	r2, r2, #3
 8001ab4:	0092      	lsls	r2, r2, #2
 8001ab6:	4093      	lsls	r3, r2
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001abe:	492f      	ldr	r1, [pc, #188]	@ (8001b7c <HAL_GPIO_Init+0x2bc>)
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac2:	089b      	lsrs	r3, r3, #2
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	492c      	ldr	r1, [pc, #176]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	4928      	ldr	r1, [pc, #160]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b00:	4b23      	ldr	r3, [pc, #140]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	4922      	ldr	r1, [pc, #136]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b0e:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	491e      	ldr	r1, [pc, #120]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b28:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	4918      	ldr	r1, [pc, #96]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b36:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	4914      	ldr	r1, [pc, #80]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d021      	beq.n	8001b94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b50:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	490e      	ldr	r1, [pc, #56]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e021      	b.n	8001ba2 <HAL_GPIO_Init+0x2e2>
 8001b5e:	bf00      	nop
 8001b60:	10320000 	.word	0x10320000
 8001b64:	10310000 	.word	0x10310000
 8001b68:	10220000 	.word	0x10220000
 8001b6c:	10210000 	.word	0x10210000
 8001b70:	10120000 	.word	0x10120000
 8001b74:	10110000 	.word	0x10110000
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	40010800 	.word	0x40010800
 8001b84:	40010c00 	.word	0x40010c00
 8001b88:	40011000 	.word	0x40011000
 8001b8c:	40011400 	.word	0x40011400
 8001b90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <HAL_GPIO_Init+0x304>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	4909      	ldr	r1, [pc, #36]	@ (8001bc4 <HAL_GPIO_Init+0x304>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bae:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f47f ae8e 	bne.w	80018d4 <HAL_GPIO_Init+0x14>
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	372c      	adds	r7, #44	@ 0x2c
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	40010400 	.word	0x40010400

08001bc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	887b      	ldrh	r3, [r7, #2]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	e001      	b.n	8001bea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	807b      	strh	r3, [r7, #2]
 8001c02:	4613      	mov	r3, r2
 8001c04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c06:	787b      	ldrb	r3, [r7, #1]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c0c:	887a      	ldrh	r2, [r7, #2]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c12:	e003      	b.n	8001c1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c14:	887b      	ldrh	r3, [r7, #2]
 8001c16:	041a      	lsls	r2, r3, #16
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	611a      	str	r2, [r3, #16]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b085      	sub	sp, #20
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c38:	887a      	ldrh	r2, [r7, #2]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	041a      	lsls	r2, r3, #16
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	400b      	ands	r3, r1
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	611a      	str	r2, [r3, #16]
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e272      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 8087 	beq.w	8001d86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c78:	4b92      	ldr	r3, [pc, #584]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d00c      	beq.n	8001c9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c84:	4b8f      	ldr	r3, [pc, #572]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d112      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x5e>
 8001c90:	4b8c      	ldr	r3, [pc, #560]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c9c:	d10b      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9e:	4b89      	ldr	r3, [pc, #548]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d06c      	beq.n	8001d84 <HAL_RCC_OscConfig+0x12c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d168      	bne.n	8001d84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e24c      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cbe:	d106      	bne.n	8001cce <HAL_RCC_OscConfig+0x76>
 8001cc0:	4b80      	ldr	r3, [pc, #512]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	e02e      	b.n	8001d2c <HAL_RCC_OscConfig+0xd4>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x98>
 8001cd6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a7a      	ldr	r2, [pc, #488]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b78      	ldr	r3, [pc, #480]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a77      	ldr	r2, [pc, #476]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e01d      	b.n	8001d2c <HAL_RCC_OscConfig+0xd4>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0xbc>
 8001cfa:	4b72      	ldr	r3, [pc, #456]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a71      	ldr	r2, [pc, #452]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b6f      	ldr	r3, [pc, #444]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0xd4>
 8001d14:	4b6b      	ldr	r3, [pc, #428]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a6a      	ldr	r2, [pc, #424]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b68      	ldr	r3, [pc, #416]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a67      	ldr	r2, [pc, #412]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d013      	beq.n	8001d5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff f9e6 	bl	8001104 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f9e2 	bl	8001104 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	@ 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e200      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0xe4>
 8001d5a:	e014      	b.n	8001d86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7ff f9d2 	bl	8001104 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff f9ce 	bl	8001104 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	@ 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e1ec      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	4b53      	ldr	r3, [pc, #332]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x10c>
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d063      	beq.n	8001e5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d92:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00b      	beq.n	8001db6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d9e:	4b49      	ldr	r3, [pc, #292]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d11c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x18c>
 8001daa:	4b46      	ldr	r3, [pc, #280]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d116      	bne.n	8001de4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	4b43      	ldr	r3, [pc, #268]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_RCC_OscConfig+0x176>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e1c0      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4939      	ldr	r1, [pc, #228]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de2:	e03a      	b.n	8001e5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d020      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dec:	4b36      	ldr	r3, [pc, #216]	@ (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7ff f987 	bl	8001104 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfa:	f7ff f983 	bl	8001104 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e1a1      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e18:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4927      	ldr	r1, [pc, #156]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]
 8001e2c:	e015      	b.n	8001e5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2e:	4b26      	ldr	r3, [pc, #152]	@ (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff f966 	bl	8001104 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3c:	f7ff f962 	bl	8001104 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e180      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d03a      	beq.n	8001edc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d019      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <HAL_RCC_OscConfig+0x274>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e74:	f7ff f946 	bl	8001104 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7ff f942 	bl	8001104 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e160      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f000 face 	bl	800243c <RCC_Delay>
 8001ea0:	e01c      	b.n	8001edc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <HAL_RCC_OscConfig+0x274>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea8:	f7ff f92c 	bl	8001104 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eae:	e00f      	b.n	8001ed0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7ff f928 	bl	8001104 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d908      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e146      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	42420000 	.word	0x42420000
 8001ecc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed0:	4b92      	ldr	r3, [pc, #584]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1e9      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a6 	beq.w	8002036 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eee:	4b8b      	ldr	r3, [pc, #556]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10d      	bne.n	8001f16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	4b88      	ldr	r3, [pc, #544]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a87      	ldr	r2, [pc, #540]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b85      	ldr	r3, [pc, #532]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f12:	2301      	movs	r3, #1
 8001f14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	4b82      	ldr	r3, [pc, #520]	@ (8002120 <HAL_RCC_OscConfig+0x4c8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d118      	bne.n	8001f54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f22:	4b7f      	ldr	r3, [pc, #508]	@ (8002120 <HAL_RCC_OscConfig+0x4c8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a7e      	ldr	r2, [pc, #504]	@ (8002120 <HAL_RCC_OscConfig+0x4c8>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2e:	f7ff f8e9 	bl	8001104 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f36:	f7ff f8e5 	bl	8001104 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b64      	cmp	r3, #100	@ 0x64
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e103      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	4b75      	ldr	r3, [pc, #468]	@ (8002120 <HAL_RCC_OscConfig+0x4c8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x312>
 8001f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a6e      	ldr	r2, [pc, #440]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	e02d      	b.n	8001fc6 <HAL_RCC_OscConfig+0x36e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x334>
 8001f72:	4b6a      	ldr	r3, [pc, #424]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a69      	ldr	r2, [pc, #420]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6213      	str	r3, [r2, #32]
 8001f7e:	4b67      	ldr	r3, [pc, #412]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4a66      	ldr	r2, [pc, #408]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	f023 0304 	bic.w	r3, r3, #4
 8001f88:	6213      	str	r3, [r2, #32]
 8001f8a:	e01c      	b.n	8001fc6 <HAL_RCC_OscConfig+0x36e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d10c      	bne.n	8001fae <HAL_RCC_OscConfig+0x356>
 8001f94:	4b61      	ldr	r3, [pc, #388]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4a60      	ldr	r2, [pc, #384]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	6213      	str	r3, [r2, #32]
 8001fa0:	4b5e      	ldr	r3, [pc, #376]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4a5d      	ldr	r2, [pc, #372]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6213      	str	r3, [r2, #32]
 8001fac:	e00b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x36e>
 8001fae:	4b5b      	ldr	r3, [pc, #364]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a5a      	ldr	r2, [pc, #360]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	6213      	str	r3, [r2, #32]
 8001fba:	4b58      	ldr	r3, [pc, #352]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a57      	ldr	r2, [pc, #348]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f023 0304 	bic.w	r3, r3, #4
 8001fc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d015      	beq.n	8001ffa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fce:	f7ff f899 	bl	8001104 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7ff f895 	bl	8001104 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e0b1      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fec:	4b4b      	ldr	r3, [pc, #300]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ee      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x37e>
 8001ff8:	e014      	b.n	8002024 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7ff f883 	bl	8001104 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7ff f87f 	bl	8001104 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e09b      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002018:	4b40      	ldr	r3, [pc, #256]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ee      	bne.n	8002002 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d105      	bne.n	8002036 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202a:	4b3c      	ldr	r3, [pc, #240]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4a3b      	ldr	r2, [pc, #236]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8002030:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002034:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8087 	beq.w	800214e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002040:	4b36      	ldr	r3, [pc, #216]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	d061      	beq.n	8002110 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d146      	bne.n	80020e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002054:	4b33      	ldr	r3, [pc, #204]	@ (8002124 <HAL_RCC_OscConfig+0x4cc>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205a:	f7ff f853 	bl	8001104 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002062:	f7ff f84f 	bl	8001104 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e06d      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002074:	4b29      	ldr	r3, [pc, #164]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f0      	bne.n	8002062 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002088:	d108      	bne.n	800209c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800208a:	4b24      	ldr	r3, [pc, #144]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	4921      	ldr	r1, [pc, #132]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800209c:	4b1f      	ldr	r3, [pc, #124]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a19      	ldr	r1, [r3, #32]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	430b      	orrs	r3, r1
 80020ae:	491b      	ldr	r1, [pc, #108]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <HAL_RCC_OscConfig+0x4cc>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7ff f823 	bl	8001104 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c2:	f7ff f81f 	bl	8001104 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e03d      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d4:	4b11      	ldr	r3, [pc, #68]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x46a>
 80020e0:	e035      	b.n	800214e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <HAL_RCC_OscConfig+0x4cc>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff f80c 	bl	8001104 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7ff f808 	bl	8001104 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e026      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002102:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_RCC_OscConfig+0x4c4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x498>
 800210e:	e01e      	b.n	800214e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d107      	bne.n	8002128 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e019      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
 800211c:	40021000 	.word	0x40021000
 8002120:	40007000 	.word	0x40007000
 8002124:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_RCC_OscConfig+0x500>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	429a      	cmp	r2, r3
 800213a:	d106      	bne.n	800214a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002146:	429a      	cmp	r2, r3
 8002148:	d001      	beq.n	800214e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000

0800215c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0d0      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002170:	4b6a      	ldr	r3, [pc, #424]	@ (800231c <HAL_RCC_ClockConfig+0x1c0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d910      	bls.n	80021a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b67      	ldr	r3, [pc, #412]	@ (800231c <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 0207 	bic.w	r2, r3, #7
 8002186:	4965      	ldr	r1, [pc, #404]	@ (800231c <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b63      	ldr	r3, [pc, #396]	@ (800231c <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0b8      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d020      	beq.n	80021ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b8:	4b59      	ldr	r3, [pc, #356]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4a58      	ldr	r2, [pc, #352]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021d0:	4b53      	ldr	r3, [pc, #332]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a52      	ldr	r2, [pc, #328]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021dc:	4b50      	ldr	r3, [pc, #320]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	494d      	ldr	r1, [pc, #308]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d040      	beq.n	800227c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	4b47      	ldr	r3, [pc, #284]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d115      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e07f      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221a:	4b41      	ldr	r3, [pc, #260]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e073      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222a:	4b3d      	ldr	r3, [pc, #244]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e06b      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800223a:	4b39      	ldr	r3, [pc, #228]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4936      	ldr	r1, [pc, #216]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800224c:	f7fe ff5a 	bl	8001104 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	e00a      	b.n	800226a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002254:	f7fe ff56 	bl	8001104 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e053      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	4b2d      	ldr	r3, [pc, #180]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 020c 	and.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	429a      	cmp	r2, r3
 800227a:	d1eb      	bne.n	8002254 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800227c:	4b27      	ldr	r3, [pc, #156]	@ (800231c <HAL_RCC_ClockConfig+0x1c0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d210      	bcs.n	80022ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b24      	ldr	r3, [pc, #144]	@ (800231c <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 0207 	bic.w	r2, r3, #7
 8002292:	4922      	ldr	r1, [pc, #136]	@ (800231c <HAL_RCC_ClockConfig+0x1c0>)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b20      	ldr	r3, [pc, #128]	@ (800231c <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e032      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b8:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4916      	ldr	r1, [pc, #88]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022d6:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	490e      	ldr	r1, [pc, #56]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ea:	f000 f821 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80022ee:	4602      	mov	r2, r0
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	490a      	ldr	r1, [pc, #40]	@ (8002324 <HAL_RCC_ClockConfig+0x1c8>)
 80022fc:	5ccb      	ldrb	r3, [r1, r3]
 80022fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002302:	4a09      	ldr	r2, [pc, #36]	@ (8002328 <HAL_RCC_ClockConfig+0x1cc>)
 8002304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002306:	4b09      	ldr	r3, [pc, #36]	@ (800232c <HAL_RCC_ClockConfig+0x1d0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe feb8 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40022000 	.word	0x40022000
 8002320:	40021000 	.word	0x40021000
 8002324:	08003a4c 	.word	0x08003a4c
 8002328:	20000018 	.word	0x20000018
 800232c:	2000001c 	.word	0x2000001c

08002330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800234a:	4b1e      	ldr	r3, [pc, #120]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b04      	cmp	r3, #4
 8002358:	d002      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x30>
 800235a:	2b08      	cmp	r3, #8
 800235c:	d003      	beq.n	8002366 <HAL_RCC_GetSysClockFreq+0x36>
 800235e:	e027      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002360:	4b19      	ldr	r3, [pc, #100]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002362:	613b      	str	r3, [r7, #16]
      break;
 8002364:	e027      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	0c9b      	lsrs	r3, r3, #18
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	4a17      	ldr	r2, [pc, #92]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002370:	5cd3      	ldrb	r3, [r2, r3]
 8002372:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d010      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800237e:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	0c5b      	lsrs	r3, r3, #17
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	4a11      	ldr	r2, [pc, #68]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a0d      	ldr	r2, [pc, #52]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002392:	fb03 f202 	mul.w	r2, r3, r2
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e004      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a0c      	ldr	r2, [pc, #48]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023a4:	fb02 f303 	mul.w	r3, r2, r3
 80023a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	613b      	str	r3, [r7, #16]
      break;
 80023ae:	e002      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023b0:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80023b2:	613b      	str	r3, [r7, #16]
      break;
 80023b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b6:	693b      	ldr	r3, [r7, #16]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	007a1200 	.word	0x007a1200
 80023cc:	08003a64 	.word	0x08003a64
 80023d0:	08003a74 	.word	0x08003a74
 80023d4:	003d0900 	.word	0x003d0900

080023d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023dc:	4b02      	ldr	r3, [pc, #8]	@ (80023e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	20000018 	.word	0x20000018

080023ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023f0:	f7ff fff2 	bl	80023d8 <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b05      	ldr	r3, [pc, #20]	@ (800240c <HAL_RCC_GetPCLK1Freq+0x20>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4903      	ldr	r1, [pc, #12]	@ (8002410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	08003a5c 	.word	0x08003a5c

08002414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002418:	f7ff ffde 	bl	80023d8 <HAL_RCC_GetHCLKFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b05      	ldr	r3, [pc, #20]	@ (8002434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	0adb      	lsrs	r3, r3, #11
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4903      	ldr	r1, [pc, #12]	@ (8002438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	08003a5c 	.word	0x08003a5c

0800243c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002444:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <RCC_Delay+0x34>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0a      	ldr	r2, [pc, #40]	@ (8002474 <RCC_Delay+0x38>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0a5b      	lsrs	r3, r3, #9
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002458:	bf00      	nop
  }
  while (Delay --);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1e5a      	subs	r2, r3, #1
 800245e:	60fa      	str	r2, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f9      	bne.n	8002458 <RCC_Delay+0x1c>
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	20000018 	.word	0x20000018
 8002474:	10624dd3 	.word	0x10624dd3

08002478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e041      	b.n	800250e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fc2a 	bl	8000cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3304      	adds	r3, #4
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f000 faa6 	bl	8002a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d001      	beq.n	8002530 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e032      	b.n	8002596 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a18      	ldr	r2, [pc, #96]	@ (80025a0 <HAL_TIM_Base_Start+0x88>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00e      	beq.n	8002560 <HAL_TIM_Base_Start+0x48>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800254a:	d009      	beq.n	8002560 <HAL_TIM_Base_Start+0x48>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a14      	ldr	r2, [pc, #80]	@ (80025a4 <HAL_TIM_Base_Start+0x8c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d004      	beq.n	8002560 <HAL_TIM_Base_Start+0x48>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a13      	ldr	r2, [pc, #76]	@ (80025a8 <HAL_TIM_Base_Start+0x90>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d111      	bne.n	8002584 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b06      	cmp	r3, #6
 8002570:	d010      	beq.n	8002594 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0201 	orr.w	r2, r2, #1
 8002580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002582:	e007      	b.n	8002594 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40000800 	.word	0x40000800

080025ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d001      	beq.n	80025c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e03a      	b.n	800263a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a18      	ldr	r2, [pc, #96]	@ (8002644 <HAL_TIM_Base_Start_IT+0x98>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00e      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x58>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ee:	d009      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x58>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a14      	ldr	r2, [pc, #80]	@ (8002648 <HAL_TIM_Base_Start_IT+0x9c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d004      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x58>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a13      	ldr	r2, [pc, #76]	@ (800264c <HAL_TIM_Base_Start_IT+0xa0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d111      	bne.n	8002628 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b06      	cmp	r3, #6
 8002614:	d010      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002626:	e007      	b.n	8002638 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	40012c00 	.word	0x40012c00
 8002648:	40000400 	.word	0x40000400
 800264c:	40000800 	.word	0x40000800

08002650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d020      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01b      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0202 	mvn.w	r2, #2
 8002684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f998 	bl	80029d0 <HAL_TIM_IC_CaptureCallback>
 80026a0:	e005      	b.n	80026ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f98b 	bl	80029be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f99a 	bl	80029e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d020      	beq.n	8002700 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01b      	beq.n	8002700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0204 	mvn.w	r2, #4
 80026d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2202      	movs	r2, #2
 80026d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f972 	bl	80029d0 <HAL_TIM_IC_CaptureCallback>
 80026ec:	e005      	b.n	80026fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f965 	bl	80029be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f974 	bl	80029e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d020      	beq.n	800274c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01b      	beq.n	800274c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0208 	mvn.w	r2, #8
 800271c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2204      	movs	r2, #4
 8002722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f94c 	bl	80029d0 <HAL_TIM_IC_CaptureCallback>
 8002738:	e005      	b.n	8002746 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f93f 	bl	80029be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f94e 	bl	80029e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	d020      	beq.n	8002798 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01b      	beq.n	8002798 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0210 	mvn.w	r2, #16
 8002768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2208      	movs	r2, #8
 800276e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f926 	bl	80029d0 <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f919 	bl	80029be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f928 	bl	80029e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0201 	mvn.w	r2, #1
 80027b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fd ffd6 	bl	8000768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00c      	beq.n	80027e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d007      	beq.n	80027e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80027d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fa7f 	bl	8002cde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00c      	beq.n	8002804 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d007      	beq.n	8002804 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f8f8 	bl	80029f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0220 	mvn.w	r2, #32
 8002820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fa52 	bl	8002ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_TIM_ConfigClockSource+0x1c>
 8002848:	2302      	movs	r3, #2
 800284a:	e0b4      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x186>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800286a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002884:	d03e      	beq.n	8002904 <HAL_TIM_ConfigClockSource+0xd4>
 8002886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800288a:	f200 8087 	bhi.w	800299c <HAL_TIM_ConfigClockSource+0x16c>
 800288e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002892:	f000 8086 	beq.w	80029a2 <HAL_TIM_ConfigClockSource+0x172>
 8002896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800289a:	d87f      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
 800289c:	2b70      	cmp	r3, #112	@ 0x70
 800289e:	d01a      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0xa6>
 80028a0:	2b70      	cmp	r3, #112	@ 0x70
 80028a2:	d87b      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
 80028a4:	2b60      	cmp	r3, #96	@ 0x60
 80028a6:	d050      	beq.n	800294a <HAL_TIM_ConfigClockSource+0x11a>
 80028a8:	2b60      	cmp	r3, #96	@ 0x60
 80028aa:	d877      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
 80028ac:	2b50      	cmp	r3, #80	@ 0x50
 80028ae:	d03c      	beq.n	800292a <HAL_TIM_ConfigClockSource+0xfa>
 80028b0:	2b50      	cmp	r3, #80	@ 0x50
 80028b2:	d873      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
 80028b4:	2b40      	cmp	r3, #64	@ 0x40
 80028b6:	d058      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x13a>
 80028b8:	2b40      	cmp	r3, #64	@ 0x40
 80028ba:	d86f      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
 80028bc:	2b30      	cmp	r3, #48	@ 0x30
 80028be:	d064      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x15a>
 80028c0:	2b30      	cmp	r3, #48	@ 0x30
 80028c2:	d86b      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d060      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x15a>
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d867      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d05c      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x15a>
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	d05a      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x15a>
 80028d4:	e062      	b.n	800299c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028e6:	f000 f974 	bl	8002bd2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	609a      	str	r2, [r3, #8]
      break;
 8002902:	e04f      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002914:	f000 f95d 	bl	8002bd2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002926:	609a      	str	r2, [r3, #8]
      break;
 8002928:	e03c      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002936:	461a      	mov	r2, r3
 8002938:	f000 f8d4 	bl	8002ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2150      	movs	r1, #80	@ 0x50
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f92b 	bl	8002b9e <TIM_ITRx_SetConfig>
      break;
 8002948:	e02c      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002956:	461a      	mov	r2, r3
 8002958:	f000 f8f2 	bl	8002b40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2160      	movs	r1, #96	@ 0x60
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f91b 	bl	8002b9e <TIM_ITRx_SetConfig>
      break;
 8002968:	e01c      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002976:	461a      	mov	r2, r3
 8002978:	f000 f8b4 	bl	8002ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2140      	movs	r1, #64	@ 0x40
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f90b 	bl	8002b9e <TIM_ITRx_SetConfig>
      break;
 8002988:	e00c      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4619      	mov	r1, r3
 8002994:	4610      	mov	r0, r2
 8002996:	f000 f902 	bl	8002b9e <TIM_ITRx_SetConfig>
      break;
 800299a:	e003      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
      break;
 80029a0:	e000      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
	...

08002a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002ad8 <TIM_Base_SetConfig+0xd0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00b      	beq.n	8002a38 <TIM_Base_SetConfig+0x30>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a26:	d007      	beq.n	8002a38 <TIM_Base_SetConfig+0x30>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8002adc <TIM_Base_SetConfig+0xd4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d003      	beq.n	8002a38 <TIM_Base_SetConfig+0x30>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a2b      	ldr	r2, [pc, #172]	@ (8002ae0 <TIM_Base_SetConfig+0xd8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d108      	bne.n	8002a4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a22      	ldr	r2, [pc, #136]	@ (8002ad8 <TIM_Base_SetConfig+0xd0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00b      	beq.n	8002a6a <TIM_Base_SetConfig+0x62>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a58:	d007      	beq.n	8002a6a <TIM_Base_SetConfig+0x62>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002adc <TIM_Base_SetConfig+0xd4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d003      	beq.n	8002a6a <TIM_Base_SetConfig+0x62>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae0 <TIM_Base_SetConfig+0xd8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d108      	bne.n	8002a7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad8 <TIM_Base_SetConfig+0xd0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d103      	bne.n	8002ab0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f023 0201 	bic.w	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	611a      	str	r2, [r3, #16]
  }
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40000800 	.word	0x40000800

08002ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	f023 0201 	bic.w	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f023 030a 	bic.w	r3, r3, #10
 8002b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	621a      	str	r2, [r3, #32]
}
 8002b36:	bf00      	nop
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	f023 0210 	bic.w	r2, r3, #16
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	031b      	lsls	r3, r3, #12
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	621a      	str	r2, [r3, #32]
}
 8002b94:	bf00      	nop
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f043 0307 	orr.w	r3, r3, #7
 8002bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b087      	sub	sp, #28
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	021a      	lsls	r2, r3, #8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	609a      	str	r2, [r3, #8]
}
 8002c06:	bf00      	nop
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e046      	b.n	8002cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a16      	ldr	r2, [pc, #88]	@ (8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00e      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c74:	d009      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a12      	ldr	r2, [pc, #72]	@ (8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a10      	ldr	r2, [pc, #64]	@ (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10c      	bne.n	8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	40012c00 	.word	0x40012c00
 8002cc4:	40000400 	.word	0x40000400
 8002cc8:	40000800 	.word	0x40000800

08002ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e042      	b.n	8002d88 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe f846 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	@ 0x24
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fdc3 	bl	80038c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08c      	sub	sp, #48	@ 0x30
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d156      	bne.n	8002e58 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_UART_Transmit_DMA+0x26>
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e04f      	b.n	8002e5a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	88fa      	ldrh	r2, [r7, #6]
 8002dca:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2221      	movs	r2, #33	@ 0x21
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dde:	4a21      	ldr	r2, [pc, #132]	@ (8002e64 <HAL_UART_Transmit_DMA+0xd4>)
 8002de0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de6:	4a20      	ldr	r2, [pc, #128]	@ (8002e68 <HAL_UART_Transmit_DMA+0xd8>)
 8002de8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dee:	4a1f      	ldr	r2, [pc, #124]	@ (8002e6c <HAL_UART_Transmit_DMA+0xdc>)
 8002df0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df6:	2200      	movs	r2, #0
 8002df8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002dfa:	f107 0308 	add.w	r3, r7, #8
 8002dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e06:	6819      	ldr	r1, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	461a      	mov	r2, r3
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	f7fe fb0d 	bl	8001430 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e1e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3314      	adds	r3, #20
 8002e26:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	e853 3f00 	ldrex	r3, [r3]
 8002e2e:	617b      	str	r3, [r7, #20]
   return(result);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3314      	adds	r3, #20
 8002e3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e40:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e42:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e44:	6a39      	ldr	r1, [r7, #32]
 8002e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e48:	e841 2300 	strex	r3, r2, [r1]
 8002e4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1e5      	bne.n	8002e20 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	e000      	b.n	8002e5a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002e58:	2302      	movs	r3, #2
  }
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3730      	adds	r7, #48	@ 0x30
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	080033f3 	.word	0x080033f3
 8002e68:	0800348d 	.word	0x0800348d
 8002e6c:	080034a9 	.word	0x080034a9

08002e70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b0ba      	sub	sp, #232	@ 0xe8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10f      	bne.n	8002ed6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x66>
 8002ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fc38 	bl	8003744 <UART_Receive_IT>
      return;
 8002ed4:	e25b      	b.n	800338e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 80de 	beq.w	800309c <HAL_UART_IRQHandler+0x22c>
 8002ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ef0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80d1 	beq.w	800309c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_UART_IRQHandler+0xae>
 8002f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f16:	f043 0201 	orr.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <HAL_UART_IRQHandler+0xd2>
 8002f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f043 0202 	orr.w	r2, r3, #2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_UART_IRQHandler+0xf6>
 8002f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5e:	f043 0204 	orr.w	r2, r3, #4
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d011      	beq.n	8002f96 <HAL_UART_IRQHandler+0x126>
 8002f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8e:	f043 0208 	orr.w	r2, r3, #8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 81f2 	beq.w	8003384 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_UART_IRQHandler+0x14e>
 8002fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fbc3 	bl	8003744 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <HAL_UART_IRQHandler+0x17a>
 8002fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d04f      	beq.n	800308a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 facd 	bl	800358a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d041      	beq.n	8003082 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3314      	adds	r3, #20
 8003004:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800300c:	e853 3f00 	ldrex	r3, [r3]
 8003010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003014:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800301c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3314      	adds	r3, #20
 8003026:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800302a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800302e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003036:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800303a:	e841 2300 	strex	r3, r2, [r1]
 800303e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1d9      	bne.n	8002ffe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d013      	beq.n	800307a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003056:	4a7e      	ldr	r2, [pc, #504]	@ (8003250 <HAL_UART_IRQHandler+0x3e0>)
 8003058:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fa82 	bl	8001568 <HAL_DMA_Abort_IT>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003074:	4610      	mov	r0, r2
 8003076:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003078:	e00e      	b.n	8003098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f9a5 	bl	80033ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003080:	e00a      	b.n	8003098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f9a1 	bl	80033ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003088:	e006      	b.n	8003098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f99d 	bl	80033ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003096:	e175      	b.n	8003384 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003098:	bf00      	nop
    return;
 800309a:	e173      	b.n	8003384 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	f040 814f 	bne.w	8003344 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 8148 	beq.w	8003344 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8141 	beq.w	8003344 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80b6 	beq.w	8003254 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8145 	beq.w	8003388 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003106:	429a      	cmp	r2, r3
 8003108:	f080 813e 	bcs.w	8003388 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003112:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b20      	cmp	r3, #32
 800311c:	f000 8088 	beq.w	8003230 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800312e:	e853 3f00 	ldrex	r3, [r3]
 8003132:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003136:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800313a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800313e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	330c      	adds	r3, #12
 8003148:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800314c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003150:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003154:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003158:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003164:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1d9      	bne.n	8003120 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3314      	adds	r3, #20
 8003172:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003176:	e853 3f00 	ldrex	r3, [r3]
 800317a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800317c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3314      	adds	r3, #20
 800318c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003190:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003194:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003198:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800319c:	e841 2300 	strex	r3, r2, [r1]
 80031a0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80031a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1e1      	bne.n	800316c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3314      	adds	r3, #20
 80031ae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80031b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3314      	adds	r3, #20
 80031c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80031cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80031d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80031da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e3      	bne.n	80031a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	330c      	adds	r3, #12
 80031f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80031fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003200:	f023 0310 	bic.w	r3, r3, #16
 8003204:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	330c      	adds	r3, #12
 800320e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003212:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003214:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003218:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e3      	bne.n	80031ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe f960 	bl	80014f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800323e:	b29b      	uxth	r3, r3
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	b29b      	uxth	r3, r3
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8c8 	bl	80033dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800324c:	e09c      	b.n	8003388 <HAL_UART_IRQHandler+0x518>
 800324e:	bf00      	nop
 8003250:	0800364f 	.word	0x0800364f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800325c:	b29b      	uxth	r3, r3
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 808e 	beq.w	800338c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003270:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 8089 	beq.w	800338c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	330c      	adds	r3, #12
 8003280:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800328a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003290:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	330c      	adds	r3, #12
 800329a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800329e:	647a      	str	r2, [r7, #68]	@ 0x44
 80032a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e3      	bne.n	800327a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3314      	adds	r3, #20
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032bc:	e853 3f00 	ldrex	r3, [r3]
 80032c0:	623b      	str	r3, [r7, #32]
   return(result);
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3314      	adds	r3, #20
 80032d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80032d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e3      	bne.n	80032b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	330c      	adds	r3, #12
 80032fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	e853 3f00 	ldrex	r3, [r3]
 8003306:	60fb      	str	r3, [r7, #12]
   return(result);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0310 	bic.w	r3, r3, #16
 800330e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	330c      	adds	r3, #12
 8003318:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800331c:	61fa      	str	r2, [r7, #28]
 800331e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003320:	69b9      	ldr	r1, [r7, #24]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	e841 2300 	strex	r3, r2, [r1]
 8003328:	617b      	str	r3, [r7, #20]
   return(result);
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e3      	bne.n	80032f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003336:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800333a:	4619      	mov	r1, r3
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f84d 	bl	80033dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003342:	e023      	b.n	800338c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334c:	2b00      	cmp	r3, #0
 800334e:	d009      	beq.n	8003364 <HAL_UART_IRQHandler+0x4f4>
 8003350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f98a 	bl	8003676 <UART_Transmit_IT>
    return;
 8003362:	e014      	b.n	800338e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00e      	beq.n	800338e <HAL_UART_IRQHandler+0x51e>
 8003370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f9c9 	bl	8003714 <UART_EndTransmit_IT>
    return;
 8003382:	e004      	b.n	800338e <HAL_UART_IRQHandler+0x51e>
    return;
 8003384:	bf00      	nop
 8003386:	e002      	b.n	800338e <HAL_UART_IRQHandler+0x51e>
      return;
 8003388:	bf00      	nop
 800338a:	e000      	b.n	800338e <HAL_UART_IRQHandler+0x51e>
      return;
 800338c:	bf00      	nop
  }
}
 800338e:	37e8      	adds	r7, #232	@ 0xe8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr

080033ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b090      	sub	sp, #64	@ 0x40
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0320 	and.w	r3, r3, #32
 800340a:	2b00      	cmp	r3, #0
 800340c:	d137      	bne.n	800347e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800340e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003410:	2200      	movs	r2, #0
 8003412:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3314      	adds	r3, #20
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	623b      	str	r3, [r7, #32]
   return(result);
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800342a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800342c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3314      	adds	r3, #20
 8003432:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003434:	633a      	str	r2, [r7, #48]	@ 0x30
 8003436:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800343a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800343c:	e841 2300 	strex	r3, r2, [r1]
 8003440:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e5      	bne.n	8003414 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	e853 3f00 	ldrex	r3, [r3]
 8003456:	60fb      	str	r3, [r7, #12]
   return(result);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800345e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	330c      	adds	r3, #12
 8003466:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003468:	61fa      	str	r2, [r7, #28]
 800346a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346c:	69b9      	ldr	r1, [r7, #24]
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	e841 2300 	strex	r3, r2, [r1]
 8003474:	617b      	str	r3, [r7, #20]
   return(result);
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e5      	bne.n	8003448 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800347c:	e002      	b.n	8003484 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800347e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003480:	f7ff ff88 	bl	8003394 <HAL_UART_TxCpltCallback>
}
 8003484:	bf00      	nop
 8003486:	3740      	adds	r7, #64	@ 0x40
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f7ff ff83 	bl	80033a6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034a0:	bf00      	nop
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	bf14      	ite	ne
 80034c8:	2301      	movne	r3, #1
 80034ca:	2300      	moveq	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b21      	cmp	r3, #33	@ 0x21
 80034da:	d108      	bne.n	80034ee <UART_DMAError+0x46>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2200      	movs	r2, #0
 80034e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80034e8:	68b8      	ldr	r0, [r7, #8]
 80034ea:	f000 f827 	bl	800353c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b22      	cmp	r3, #34	@ 0x22
 800350e:	d108      	bne.n	8003522 <UART_DMAError+0x7a>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2200      	movs	r2, #0
 800351a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800351c:	68b8      	ldr	r0, [r7, #8]
 800351e:	f000 f834 	bl	800358a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	f043 0210 	orr.w	r2, r3, #16
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800352e:	68b8      	ldr	r0, [r7, #8]
 8003530:	f7ff ff4b 	bl	80033ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003534:	bf00      	nop
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800353c:	b480      	push	{r7}
 800353e:	b089      	sub	sp, #36	@ 0x24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	330c      	adds	r3, #12
 800354a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	e853 3f00 	ldrex	r3, [r3]
 8003552:	60bb      	str	r3, [r7, #8]
   return(result);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	330c      	adds	r3, #12
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	61ba      	str	r2, [r7, #24]
 8003566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003568:	6979      	ldr	r1, [r7, #20]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	e841 2300 	strex	r3, r2, [r1]
 8003570:	613b      	str	r3, [r7, #16]
   return(result);
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e5      	bne.n	8003544 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003580:	bf00      	nop
 8003582:	3724      	adds	r7, #36	@ 0x24
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr

0800358a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800358a:	b480      	push	{r7}
 800358c:	b095      	sub	sp, #84	@ 0x54
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	330c      	adds	r3, #12
 8003598:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	330c      	adds	r3, #12
 80035b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80035b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035ba:	e841 2300 	strex	r3, r2, [r1]
 80035be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1e5      	bne.n	8003592 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3314      	adds	r3, #20
 80035cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3314      	adds	r3, #20
 80035e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ee:	e841 2300 	strex	r3, r2, [r1]
 80035f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e5      	bne.n	80035c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d119      	bne.n	8003636 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	60bb      	str	r3, [r7, #8]
   return(result);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f023 0310 	bic.w	r3, r3, #16
 8003618:	647b      	str	r3, [r7, #68]	@ 0x44
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	330c      	adds	r3, #12
 8003620:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003622:	61ba      	str	r2, [r7, #24]
 8003624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	6979      	ldr	r1, [r7, #20]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	613b      	str	r3, [r7, #16]
   return(result);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e5      	bne.n	8003602 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003644:	bf00      	nop
 8003646:	3754      	adds	r7, #84	@ 0x54
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr

0800364e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f7ff feae 	bl	80033ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b21      	cmp	r3, #33	@ 0x21
 8003688:	d13e      	bne.n	8003708 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003692:	d114      	bne.n	80036be <UART_Transmit_IT+0x48>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d110      	bne.n	80036be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	1c9a      	adds	r2, r3, #2
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	621a      	str	r2, [r3, #32]
 80036bc:	e008      	b.n	80036d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	1c59      	adds	r1, r3, #1
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6211      	str	r1, [r2, #32]
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29b      	uxth	r3, r3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	4619      	mov	r1, r3
 80036de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10f      	bne.n	8003704 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003702:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	e000      	b.n	800370a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800372a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff fe2d 	bl	8003394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	@ 0x30
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b22      	cmp	r3, #34	@ 0x22
 8003756:	f040 80ae 	bne.w	80038b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003762:	d117      	bne.n	8003794 <UART_Receive_IT+0x50>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d113      	bne.n	8003794 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800376c:	2300      	movs	r3, #0
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003774:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	b29b      	uxth	r3, r3
 800377e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003782:	b29a      	uxth	r2, r3
 8003784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003786:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378c:	1c9a      	adds	r2, r3, #2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	629a      	str	r2, [r3, #40]	@ 0x28
 8003792:	e026      	b.n	80037e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a6:	d007      	beq.n	80037b8 <UART_Receive_IT+0x74>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <UART_Receive_IT+0x82>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c2:	701a      	strb	r2, [r3, #0]
 80037c4:	e008      	b.n	80037d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4619      	mov	r1, r3
 80037f0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d15d      	bne.n	80038b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0220 	bic.w	r2, r2, #32
 8003804:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003814:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003838:	2b01      	cmp	r3, #1
 800383a:	d135      	bne.n	80038a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	613b      	str	r3, [r7, #16]
   return(result);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f023 0310 	bic.w	r3, r3, #16
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	330c      	adds	r3, #12
 8003860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003862:	623a      	str	r2, [r7, #32]
 8003864:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003866:	69f9      	ldr	r1, [r7, #28]
 8003868:	6a3a      	ldr	r2, [r7, #32]
 800386a:	e841 2300 	strex	r3, r2, [r1]
 800386e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e5      	bne.n	8003842 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b10      	cmp	r3, #16
 8003882:	d10a      	bne.n	800389a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff fd9b 	bl	80033dc <HAL_UARTEx_RxEventCallback>
 80038a6:	e002      	b.n	80038ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7ff fd85 	bl	80033b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e002      	b.n	80038b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e000      	b.n	80038b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
  }
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3730      	adds	r7, #48	@ 0x30
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80038fa:	f023 030c 	bic.w	r3, r3, #12
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	68b9      	ldr	r1, [r7, #8]
 8003904:	430b      	orrs	r3, r1
 8003906:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a2c      	ldr	r2, [pc, #176]	@ (80039d4 <UART_SetConfig+0x114>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d103      	bne.n	8003930 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003928:	f7fe fd74 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	e002      	b.n	8003936 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003930:	f7fe fd5c 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8003934:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	009a      	lsls	r2, r3, #2
 8003940:	441a      	add	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	4a22      	ldr	r2, [pc, #136]	@ (80039d8 <UART_SetConfig+0x118>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	0119      	lsls	r1, r3, #4
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	009a      	lsls	r2, r3, #2
 8003960:	441a      	add	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	fbb2 f2f3 	udiv	r2, r2, r3
 800396c:	4b1a      	ldr	r3, [pc, #104]	@ (80039d8 <UART_SetConfig+0x118>)
 800396e:	fba3 0302 	umull	r0, r3, r3, r2
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2064      	movs	r0, #100	@ 0x64
 8003976:	fb00 f303 	mul.w	r3, r0, r3
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	3332      	adds	r3, #50	@ 0x32
 8003980:	4a15      	ldr	r2, [pc, #84]	@ (80039d8 <UART_SetConfig+0x118>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800398c:	4419      	add	r1, r3
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	009a      	lsls	r2, r3, #2
 8003998:	441a      	add	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a4:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <UART_SetConfig+0x118>)
 80039a6:	fba3 0302 	umull	r0, r3, r3, r2
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	2064      	movs	r0, #100	@ 0x64
 80039ae:	fb00 f303 	mul.w	r3, r0, r3
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	3332      	adds	r3, #50	@ 0x32
 80039b8:	4a07      	ldr	r2, [pc, #28]	@ (80039d8 <UART_SetConfig+0x118>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	f003 020f 	and.w	r2, r3, #15
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	440a      	add	r2, r1
 80039ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40013800 	.word	0x40013800
 80039d8:	51eb851f 	.word	0x51eb851f

080039dc <memset>:
 80039dc:	4603      	mov	r3, r0
 80039de:	4402      	add	r2, r0
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d100      	bne.n	80039e6 <memset+0xa>
 80039e4:	4770      	bx	lr
 80039e6:	f803 1b01 	strb.w	r1, [r3], #1
 80039ea:	e7f9      	b.n	80039e0 <memset+0x4>

080039ec <__libc_init_array>:
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	2600      	movs	r6, #0
 80039f0:	4d0c      	ldr	r5, [pc, #48]	@ (8003a24 <__libc_init_array+0x38>)
 80039f2:	4c0d      	ldr	r4, [pc, #52]	@ (8003a28 <__libc_init_array+0x3c>)
 80039f4:	1b64      	subs	r4, r4, r5
 80039f6:	10a4      	asrs	r4, r4, #2
 80039f8:	42a6      	cmp	r6, r4
 80039fa:	d109      	bne.n	8003a10 <__libc_init_array+0x24>
 80039fc:	f000 f81a 	bl	8003a34 <_init>
 8003a00:	2600      	movs	r6, #0
 8003a02:	4d0a      	ldr	r5, [pc, #40]	@ (8003a2c <__libc_init_array+0x40>)
 8003a04:	4c0a      	ldr	r4, [pc, #40]	@ (8003a30 <__libc_init_array+0x44>)
 8003a06:	1b64      	subs	r4, r4, r5
 8003a08:	10a4      	asrs	r4, r4, #2
 8003a0a:	42a6      	cmp	r6, r4
 8003a0c:	d105      	bne.n	8003a1a <__libc_init_array+0x2e>
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
 8003a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a14:	4798      	blx	r3
 8003a16:	3601      	adds	r6, #1
 8003a18:	e7ee      	b.n	80039f8 <__libc_init_array+0xc>
 8003a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a1e:	4798      	blx	r3
 8003a20:	3601      	adds	r6, #1
 8003a22:	e7f2      	b.n	8003a0a <__libc_init_array+0x1e>
 8003a24:	08003a78 	.word	0x08003a78
 8003a28:	08003a78 	.word	0x08003a78
 8003a2c:	08003a78 	.word	0x08003a78
 8003a30:	08003a7c 	.word	0x08003a7c

08003a34 <_init>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	bf00      	nop
 8003a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3a:	bc08      	pop	{r3}
 8003a3c:	469e      	mov	lr, r3
 8003a3e:	4770      	bx	lr

08003a40 <_fini>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	bf00      	nop
 8003a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a46:	bc08      	pop	{r3}
 8003a48:	469e      	mov	lr, r3
 8003a4a:	4770      	bx	lr

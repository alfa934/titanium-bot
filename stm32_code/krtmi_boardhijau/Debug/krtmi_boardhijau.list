
krtmi_boardhijau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ed8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002db0  08017068  08017068  00018068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019e18  08019e18  0001b128  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08019e18  08019e18  0001ae18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019e20  08019e20  0001b128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019e20  08019e20  0001ae20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019e24  08019e24  0001ae24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000128  20000000  08019e28  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001b128  2**0
                  CONTENTS
 10 .bss          0000b3ec  20000128  20000128  0001b128  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000b514  2000b514  0001b128  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001b128  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029ba2  00000000  00000000  0001b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006f90  00000000  00000000  00044cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002188  00000000  00000000  0004bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ab5  00000000  00000000  0004de18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033829  00000000  00000000  0004f8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003636e  00000000  00000000  000830f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6960  00000000  00000000  000b9464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001afdc4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009744  00000000  00000000  001afe08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001b954c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000128 	.word	0x20000128
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017050 	.word	0x08017050

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000012c 	.word	0x2000012c
 80001cc:	08017050 	.word	0x08017050

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 b988 	b.w	8000f34 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	468e      	mov	lr, r1
 8000c44:	4604      	mov	r4, r0
 8000c46:	4688      	mov	r8, r1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d14a      	bne.n	8000ce2 <__udivmoddi4+0xa6>
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	4617      	mov	r7, r2
 8000c50:	d962      	bls.n	8000d18 <__udivmoddi4+0xdc>
 8000c52:	fab2 f682 	clz	r6, r2
 8000c56:	b14e      	cbz	r6, 8000c6c <__udivmoddi4+0x30>
 8000c58:	f1c6 0320 	rsb	r3, r6, #32
 8000c5c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c60:	fa20 f303 	lsr.w	r3, r0, r3
 8000c64:	40b7      	lsls	r7, r6
 8000c66:	ea43 0808 	orr.w	r8, r3, r8
 8000c6a:	40b4      	lsls	r4, r6
 8000c6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c70:	fa1f fc87 	uxth.w	ip, r7
 8000c74:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c78:	0c23      	lsrs	r3, r4, #16
 8000c7a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c82:	fb01 f20c 	mul.w	r2, r1, ip
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x62>
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c90:	f080 80ea 	bcs.w	8000e68 <__udivmoddi4+0x22c>
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f240 80e7 	bls.w	8000e68 <__udivmoddi4+0x22c>
 8000c9a:	3902      	subs	r1, #2
 8000c9c:	443b      	add	r3, r7
 8000c9e:	1a9a      	subs	r2, r3, r2
 8000ca0:	b2a3      	uxth	r3, r4
 8000ca2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000caa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cae:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cb2:	459c      	cmp	ip, r3
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x8e>
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000cbc:	f080 80d6 	bcs.w	8000e6c <__udivmoddi4+0x230>
 8000cc0:	459c      	cmp	ip, r3
 8000cc2:	f240 80d3 	bls.w	8000e6c <__udivmoddi4+0x230>
 8000cc6:	443b      	add	r3, r7
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cce:	eba3 030c 	sub.w	r3, r3, ip
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa2>
 8000cd6:	40f3      	lsrs	r3, r6
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xb6>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb0>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa2>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x14c>
 8000cfa:	4573      	cmp	r3, lr
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xc8>
 8000cfe:	4282      	cmp	r2, r0
 8000d00:	f200 8105 	bhi.w	8000f0e <__udivmoddi4+0x2d2>
 8000d04:	1a84      	subs	r4, r0, r2
 8000d06:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	4690      	mov	r8, r2
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	d0e5      	beq.n	8000cde <__udivmoddi4+0xa2>
 8000d12:	e9c5 4800 	strd	r4, r8, [r5]
 8000d16:	e7e2      	b.n	8000cde <__udivmoddi4+0xa2>
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f000 8090 	beq.w	8000e3e <__udivmoddi4+0x202>
 8000d1e:	fab2 f682 	clz	r6, r2
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f040 80a4 	bne.w	8000e70 <__udivmoddi4+0x234>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	b280      	uxth	r0, r0
 8000d32:	b2bc      	uxth	r4, r7
 8000d34:	2101      	movs	r1, #1
 8000d36:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d3a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d42:	fb04 f20c 	mul.w	r2, r4, ip
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x11e>
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x11c>
 8000d52:	429a      	cmp	r2, r3
 8000d54:	f200 80e0 	bhi.w	8000f18 <__udivmoddi4+0x2dc>
 8000d58:	46c4      	mov	ip, r8
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d60:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d64:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d68:	fb02 f404 	mul.w	r4, r2, r4
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0x144>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x142>
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	f200 80ca 	bhi.w	8000f12 <__udivmoddi4+0x2d6>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	1b1b      	subs	r3, r3, r4
 8000d82:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x98>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa0e f401 	lsl.w	r4, lr, r1
 8000d98:	fa20 f306 	lsr.w	r3, r0, r6
 8000d9c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000da0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000da4:	4323      	orrs	r3, r4
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	fa1f fc87 	uxth.w	ip, r7
 8000dae:	fbbe f0f9 	udiv	r0, lr, r9
 8000db2:	0c1c      	lsrs	r4, r3, #16
 8000db4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000db8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dbc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d909      	bls.n	8000ddc <__udivmoddi4+0x1a0>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dce:	f080 809c 	bcs.w	8000f0a <__udivmoddi4+0x2ce>
 8000dd2:	45a6      	cmp	lr, r4
 8000dd4:	f240 8099 	bls.w	8000f0a <__udivmoddi4+0x2ce>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	eba4 040e 	sub.w	r4, r4, lr
 8000de0:	fa1f fe83 	uxth.w	lr, r3
 8000de4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de8:	fb09 4413 	mls	r4, r9, r3, r4
 8000dec:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000df0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df4:	45a4      	cmp	ip, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1ce>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dfe:	f080 8082 	bcs.w	8000f06 <__udivmoddi4+0x2ca>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d97f      	bls.n	8000f06 <__udivmoddi4+0x2ca>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e0e:	eba4 040c 	sub.w	r4, r4, ip
 8000e12:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e16:	4564      	cmp	r4, ip
 8000e18:	4673      	mov	r3, lr
 8000e1a:	46e1      	mov	r9, ip
 8000e1c:	d362      	bcc.n	8000ee4 <__udivmoddi4+0x2a8>
 8000e1e:	d05f      	beq.n	8000ee0 <__udivmoddi4+0x2a4>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x1fe>
 8000e22:	ebb8 0203 	subs.w	r2, r8, r3
 8000e26:	eb64 0409 	sbc.w	r4, r4, r9
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e32:	431e      	orrs	r6, r3
 8000e34:	40cc      	lsrs	r4, r1
 8000e36:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	e74f      	b.n	8000cde <__udivmoddi4+0xa2>
 8000e3e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e42:	0c01      	lsrs	r1, r0, #16
 8000e44:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4638      	mov	r0, r7
 8000e52:	463c      	mov	r4, r7
 8000e54:	46b8      	mov	r8, r7
 8000e56:	46be      	mov	lr, r7
 8000e58:	2620      	movs	r6, #32
 8000e5a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e5e:	eba2 0208 	sub.w	r2, r2, r8
 8000e62:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e66:	e766      	b.n	8000d36 <__udivmoddi4+0xfa>
 8000e68:	4601      	mov	r1, r0
 8000e6a:	e718      	b.n	8000c9e <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e72c      	b.n	8000cca <__udivmoddi4+0x8e>
 8000e70:	f1c6 0220 	rsb	r2, r6, #32
 8000e74:	fa2e f302 	lsr.w	r3, lr, r2
 8000e78:	40b7      	lsls	r7, r6
 8000e7a:	40b1      	lsls	r1, r6
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e84:	430a      	orrs	r2, r1
 8000e86:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e8a:	b2bc      	uxth	r4, r7
 8000e8c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e90:	0c11      	lsrs	r1, r2, #16
 8000e92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e96:	fb08 f904 	mul.w	r9, r8, r4
 8000e9a:	40b0      	lsls	r0, r6
 8000e9c:	4589      	cmp	r9, r1
 8000e9e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ea2:	b280      	uxth	r0, r0
 8000ea4:	d93e      	bls.n	8000f24 <__udivmoddi4+0x2e8>
 8000ea6:	1879      	adds	r1, r7, r1
 8000ea8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000eac:	d201      	bcs.n	8000eb2 <__udivmoddi4+0x276>
 8000eae:	4589      	cmp	r9, r1
 8000eb0:	d81f      	bhi.n	8000ef2 <__udivmoddi4+0x2b6>
 8000eb2:	eba1 0109 	sub.w	r1, r1, r9
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fb09 f804 	mul.w	r8, r9, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec8:	4542      	cmp	r2, r8
 8000eca:	d229      	bcs.n	8000f20 <__udivmoddi4+0x2e4>
 8000ecc:	18ba      	adds	r2, r7, r2
 8000ece:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ed2:	d2c4      	bcs.n	8000e5e <__udivmoddi4+0x222>
 8000ed4:	4542      	cmp	r2, r8
 8000ed6:	d2c2      	bcs.n	8000e5e <__udivmoddi4+0x222>
 8000ed8:	f1a9 0102 	sub.w	r1, r9, #2
 8000edc:	443a      	add	r2, r7
 8000ede:	e7be      	b.n	8000e5e <__udivmoddi4+0x222>
 8000ee0:	45f0      	cmp	r8, lr
 8000ee2:	d29d      	bcs.n	8000e20 <__udivmoddi4+0x1e4>
 8000ee4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ee8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000eec:	3801      	subs	r0, #1
 8000eee:	46e1      	mov	r9, ip
 8000ef0:	e796      	b.n	8000e20 <__udivmoddi4+0x1e4>
 8000ef2:	eba7 0909 	sub.w	r9, r7, r9
 8000ef6:	4449      	add	r1, r9
 8000ef8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000efc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f00:	fb09 f804 	mul.w	r8, r9, r4
 8000f04:	e7db      	b.n	8000ebe <__udivmoddi4+0x282>
 8000f06:	4673      	mov	r3, lr
 8000f08:	e77f      	b.n	8000e0a <__udivmoddi4+0x1ce>
 8000f0a:	4650      	mov	r0, sl
 8000f0c:	e766      	b.n	8000ddc <__udivmoddi4+0x1a0>
 8000f0e:	4608      	mov	r0, r1
 8000f10:	e6fd      	b.n	8000d0e <__udivmoddi4+0xd2>
 8000f12:	443b      	add	r3, r7
 8000f14:	3a02      	subs	r2, #2
 8000f16:	e733      	b.n	8000d80 <__udivmoddi4+0x144>
 8000f18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f1c:	443b      	add	r3, r7
 8000f1e:	e71c      	b.n	8000d5a <__udivmoddi4+0x11e>
 8000f20:	4649      	mov	r1, r9
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x222>
 8000f24:	eba1 0109 	sub.w	r1, r1, r9
 8000f28:	46c4      	mov	ip, r8
 8000f2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2e:	fb09 f804 	mul.w	r8, r9, r4
 8000f32:	e7c4      	b.n	8000ebe <__udivmoddi4+0x282>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f4c:	4a21      	ldr	r2, [pc, #132]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f52:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f58:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f72:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f7a:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <MX_ADC1_Init+0xa0>)
 8000f7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f92:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f98:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000f9a:	f003 fd51 	bl	8004a40 <HAL_ADC_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fa4:	f001 f9d4 	bl	8002350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <MX_ADC1_Init+0x98>)
 8000fba:	f003 fd85 	bl	8004ac8 <HAL_ADC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fc4:	f001 f9c4 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000144 	.word	0x20000144
 8000fd4:	40012000 	.word	0x40012000
 8000fd8:	0f000001 	.word	0x0f000001

08000fdc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	@ 0x30
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a31      	ldr	r2, [pc, #196]	@ (80010c0 <HAL_ADC_MspInit+0xe4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d15b      	bne.n	80010b6 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	4b30      	ldr	r3, [pc, #192]	@ (80010c4 <HAL_ADC_MspInit+0xe8>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	4a2f      	ldr	r2, [pc, #188]	@ (80010c4 <HAL_ADC_MspInit+0xe8>)
 8001008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100c:	6453      	str	r3, [r2, #68]	@ 0x44
 800100e:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <HAL_ADC_MspInit+0xe8>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	4b29      	ldr	r3, [pc, #164]	@ (80010c4 <HAL_ADC_MspInit+0xe8>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a28      	ldr	r2, [pc, #160]	@ (80010c4 <HAL_ADC_MspInit+0xe8>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <HAL_ADC_MspInit+0xe8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b22      	ldr	r3, [pc, #136]	@ (80010c4 <HAL_ADC_MspInit+0xe8>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a21      	ldr	r2, [pc, #132]	@ (80010c4 <HAL_ADC_MspInit+0xe8>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <HAL_ADC_MspInit+0xe8>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <HAL_ADC_MspInit+0xe8>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a1a      	ldr	r2, [pc, #104]	@ (80010c4 <HAL_ADC_MspInit+0xe8>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <HAL_ADC_MspInit+0xe8>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800106e:	230d      	movs	r3, #13
 8001070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001072:	2303      	movs	r3, #3
 8001074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	4811      	ldr	r0, [pc, #68]	@ (80010c8 <HAL_ADC_MspInit+0xec>)
 8001082:	f005 fe8f 	bl	8006da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001086:	2330      	movs	r3, #48	@ 0x30
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <HAL_ADC_MspInit+0xf0>)
 800109a:	f005 fe83 	bl	8006da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800109e:	2303      	movs	r3, #3
 80010a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a2:	2303      	movs	r3, #3
 80010a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	4807      	ldr	r0, [pc, #28]	@ (80010d0 <HAL_ADC_MspInit+0xf4>)
 80010b2:	f005 fe77 	bl	8006da4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010b6:	bf00      	nop
 80010b8:	3730      	adds	r7, #48	@ 0x30
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40012000 	.word	0x40012000
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020800 	.word	0x40020800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40020400 	.word	0x40020400

080010d4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <MX_CAN1_Init+0x60>)
 80010da:	4a17      	ldr	r2, [pc, #92]	@ (8001138 <MX_CAN1_Init+0x64>)
 80010dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80010de:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <MX_CAN1_Init+0x60>)
 80010e0:	2210      	movs	r2, #16
 80010e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <MX_CAN1_Init+0x60>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010ea:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <MX_CAN1_Init+0x60>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80010f0:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <MX_CAN1_Init+0x60>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <MX_CAN1_Init+0x60>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <MX_CAN1_Init+0x60>)
 80010fe:	2200      	movs	r2, #0
 8001100:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001102:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_CAN1_Init+0x60>)
 8001104:	2200      	movs	r2, #0
 8001106:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001108:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <MX_CAN1_Init+0x60>)
 800110a:	2200      	movs	r2, #0
 800110c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_CAN1_Init+0x60>)
 8001110:	2200      	movs	r2, #0
 8001112:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001114:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <MX_CAN1_Init+0x60>)
 8001116:	2200      	movs	r2, #0
 8001118:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_CAN1_Init+0x60>)
 800111c:	2200      	movs	r2, #0
 800111e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	@ (8001134 <MX_CAN1_Init+0x60>)
 8001122:	f003 feef 	bl	8004f04 <HAL_CAN_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800112c:	f001 f910 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000018c 	.word	0x2000018c
 8001138:	40006400 	.word	0x40006400

0800113c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a19      	ldr	r2, [pc, #100]	@ (80011c0 <HAL_CAN_MspInit+0x84>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d12c      	bne.n	80011b8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <HAL_CAN_MspInit+0x88>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	4a17      	ldr	r2, [pc, #92]	@ (80011c4 <HAL_CAN_MspInit+0x88>)
 8001168:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800116c:	6413      	str	r3, [r2, #64]	@ 0x40
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <HAL_CAN_MspInit+0x88>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <HAL_CAN_MspInit+0x88>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a10      	ldr	r2, [pc, #64]	@ (80011c4 <HAL_CAN_MspInit+0x88>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <HAL_CAN_MspInit+0x88>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001196:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011a8:	2309      	movs	r3, #9
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <HAL_CAN_MspInit+0x8c>)
 80011b4:	f005 fdf6 	bl	8006da4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	@ 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40006400 	.word	0x40006400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000

080011cc <Controller_Drift>:
 */

#include "controller.h"

int8_t Controller_Drift(int8_t value, int8_t max)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	460a      	mov	r2, r1
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
	if(abs(value) < max)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bfb8      	it	lt
 80011e4:	425b      	neglt	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	da01      	bge.n	80011f6 <Controller_Drift+0x2a>
	{
		return 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e00e      	b.n	8001214 <Controller_Drift+0x48>
	}
	else if(value > 0)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dd05      	ble.n	800120a <Controller_Drift+0x3e>
	{
		return value - max;
 80011fe:	79fa      	ldrb	r2, [r7, #7]
 8001200:	79bb      	ldrb	r3, [r7, #6]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	b25b      	sxtb	r3, r3
 8001208:	e004      	b.n	8001214 <Controller_Drift+0x48>
	}
	else
	{
		return value + max;
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	4413      	add	r3, r2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	b25b      	sxtb	r3, r3
	}
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <map>:

int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	69b9      	ldr	r1, [r7, #24]
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	1a8a      	subs	r2, r1, r2
 800123a:	fb03 f202 	mul.w	r2, r3, r2
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	1acb      	subs	r3, r1, r3
 8001244:	fb92 f2f3 	sdiv	r2, r2, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	4413      	add	r3, r2
}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b3f      	ldr	r3, [pc, #252]	@ (8001360 <MX_DMA_Init+0x108>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a3e      	ldr	r2, [pc, #248]	@ (8001360 <MX_DMA_Init+0x108>)
 8001268:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b3c      	ldr	r3, [pc, #240]	@ (8001360 <MX_DMA_Init+0x108>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b38      	ldr	r3, [pc, #224]	@ (8001360 <MX_DMA_Init+0x108>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a37      	ldr	r2, [pc, #220]	@ (8001360 <MX_DMA_Init+0x108>)
 8001284:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b35      	ldr	r3, [pc, #212]	@ (8001360 <MX_DMA_Init+0x108>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	200b      	movs	r0, #11
 800129c:	f004 f809 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012a0:	200b      	movs	r0, #11
 80012a2:	f004 f822 	bl	80052ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	200c      	movs	r0, #12
 80012ac:	f004 f801 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012b0:	200c      	movs	r0, #12
 80012b2:	f004 f81a 	bl	80052ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	200d      	movs	r0, #13
 80012bc:	f003 fff9 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012c0:	200d      	movs	r0, #13
 80012c2:	f004 f812 	bl	80052ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	200e      	movs	r0, #14
 80012cc:	f003 fff1 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80012d0:	200e      	movs	r0, #14
 80012d2:	f004 f80a 	bl	80052ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	200f      	movs	r0, #15
 80012dc:	f003 ffe9 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80012e0:	200f      	movs	r0, #15
 80012e2:	f004 f802 	bl	80052ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	2010      	movs	r0, #16
 80012ec:	f003 ffe1 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012f0:	2010      	movs	r0, #16
 80012f2:	f003 fffa 	bl	80052ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2011      	movs	r0, #17
 80012fc:	f003 ffd9 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001300:	2011      	movs	r0, #17
 8001302:	f003 fff2 	bl	80052ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	202f      	movs	r0, #47	@ 0x2f
 800130c:	f003 ffd1 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001310:	202f      	movs	r0, #47	@ 0x2f
 8001312:	f003 ffea 	bl	80052ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2039      	movs	r0, #57	@ 0x39
 800131c:	f003 ffc9 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001320:	2039      	movs	r0, #57	@ 0x39
 8001322:	f003 ffe2 	bl	80052ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	203a      	movs	r0, #58	@ 0x3a
 800132c:	f003 ffc1 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001330:	203a      	movs	r0, #58	@ 0x3a
 8001332:	f003 ffda 	bl	80052ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2045      	movs	r0, #69	@ 0x45
 800133c:	f003 ffb9 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001340:	2045      	movs	r0, #69	@ 0x45
 8001342:	f003 ffd2 	bl	80052ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2046      	movs	r0, #70	@ 0x46
 800134c:	f003 ffb1 	bl	80052b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001350:	2046      	movs	r0, #70	@ 0x46
 8001352:	f003 ffca 	bl	80052ea <HAL_NVIC_EnableIRQ>

}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800

08001364 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	@ 0x30
 8001368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	4b50      	ldr	r3, [pc, #320]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a4f      	ldr	r2, [pc, #316]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 8001384:	f043 0310 	orr.w	r3, r3, #16
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b4d      	ldr	r3, [pc, #308]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	4b49      	ldr	r3, [pc, #292]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a48      	ldr	r2, [pc, #288]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b46      	ldr	r3, [pc, #280]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	4b42      	ldr	r3, [pc, #264]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a41      	ldr	r2, [pc, #260]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 80013bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b3f      	ldr	r3, [pc, #252]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b3b      	ldr	r3, [pc, #236]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a3a      	ldr	r2, [pc, #232]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b38      	ldr	r3, [pc, #224]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b34      	ldr	r3, [pc, #208]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a33      	ldr	r2, [pc, #204]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b31      	ldr	r3, [pc, #196]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b2d      	ldr	r3, [pc, #180]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a2c      	ldr	r2, [pc, #176]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b2a      	ldr	r3, [pc, #168]	@ (80014c0 <MX_GPIO_Init+0x15c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 8001422:	2200      	movs	r2, #0
 8001424:	f247 519f 	movw	r1, #30111	@ 0x759f
 8001428:	4826      	ldr	r0, [pc, #152]	@ (80014c4 <MX_GPIO_Init+0x160>)
 800142a:	f005 fe57 	bl	80070dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8001434:	4824      	ldr	r0, [pc, #144]	@ (80014c8 <MX_GPIO_Init+0x164>)
 8001436:	f005 fe51 	bl	80070dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 414d 	mov.w	r1, #52480	@ 0xcd00
 8001440:	4822      	ldr	r0, [pc, #136]	@ (80014cc <MX_GPIO_Init+0x168>)
 8001442:	f005 fe4b 	bl	80070dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE7
                           PE8 PE10 PE12 PE13
                           PE14 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 8001446:	f247 539f 	movw	r3, #30111	@ 0x759f
 800144a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	4819      	ldr	r0, [pc, #100]	@ (80014c4 <MX_GPIO_Init+0x160>)
 8001460:	f005 fca0 	bl	8006da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001464:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	4812      	ldr	r0, [pc, #72]	@ (80014c8 <MX_GPIO_Init+0x164>)
 800147e:	f005 fc91 	bl	8006da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 PD11 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8001482:	f44f 434d 	mov.w	r3, #52480	@ 0xcd00
 8001486:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	480c      	ldr	r0, [pc, #48]	@ (80014cc <MX_GPIO_Init+0x168>)
 800149c:	f005 fc82 	bl	8006da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80014a0:	239b      	movs	r3, #155	@ 0x9b
 80014a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	@ (80014cc <MX_GPIO_Init+0x168>)
 80014b4:	f005 fc76 	bl	8006da4 <HAL_GPIO_Init>

}
 80014b8:	bf00      	nop
 80014ba:	3730      	adds	r7, #48	@ 0x30
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40020800 	.word	0x40020800
 80014cc:	40020c00 	.word	0x40020c00

080014d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d4:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <MX_I2C1_Init+0x50>)
 80014d6:	4a13      	ldr	r2, [pc, #76]	@ (8001524 <MX_I2C1_Init+0x54>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <MX_I2C1_Init+0x50>)
 80014dc:	4a12      	ldr	r2, [pc, #72]	@ (8001528 <MX_I2C1_Init+0x58>)
 80014de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <MX_I2C1_Init+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <MX_I2C1_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <MX_I2C1_Init+0x50>)
 80014ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001500:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <MX_I2C1_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <MX_I2C1_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	@ (8001520 <MX_I2C1_Init+0x50>)
 800150e:	f005 fdff 	bl	8007110 <HAL_I2C_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001518:	f000 ff1a 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200001b4 	.word	0x200001b4
 8001524:	40005400 	.word	0x40005400
 8001528:	000186a0 	.word	0x000186a0

0800152c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <MX_I2C3_Init+0x50>)
 8001532:	4a13      	ldr	r2, [pc, #76]	@ (8001580 <MX_I2C3_Init+0x54>)
 8001534:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MX_I2C3_Init+0x50>)
 8001538:	4a12      	ldr	r2, [pc, #72]	@ (8001584 <MX_I2C3_Init+0x58>)
 800153a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800153c:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <MX_I2C3_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001542:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <MX_I2C3_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <MX_I2C3_Init+0x50>)
 800154a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800154e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001550:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <MX_I2C3_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <MX_I2C3_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800155c:	4b07      	ldr	r3, [pc, #28]	@ (800157c <MX_I2C3_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <MX_I2C3_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	@ (800157c <MX_I2C3_Init+0x50>)
 800156a:	f005 fdd1 	bl	8007110 <HAL_I2C_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001574:	f000 feec 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000208 	.word	0x20000208
 8001580:	40005c00 	.word	0x40005c00
 8001584:	000186a0 	.word	0x000186a0

08001588 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08c      	sub	sp, #48	@ 0x30
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a42      	ldr	r2, [pc, #264]	@ (80016b0 <HAL_I2C_MspInit+0x128>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d12c      	bne.n	8001604 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	4b41      	ldr	r3, [pc, #260]	@ (80016b4 <HAL_I2C_MspInit+0x12c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a40      	ldr	r2, [pc, #256]	@ (80016b4 <HAL_I2C_MspInit+0x12c>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	4b3e      	ldr	r3, [pc, #248]	@ (80016b4 <HAL_I2C_MspInit+0x12c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	61bb      	str	r3, [r7, #24]
 80015c4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015c6:	23c0      	movs	r3, #192	@ 0xc0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ca:	2312      	movs	r3, #18
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d6:	2304      	movs	r3, #4
 80015d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4835      	ldr	r0, [pc, #212]	@ (80016b8 <HAL_I2C_MspInit+0x130>)
 80015e2:	f005 fbdf 	bl	8006da4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	4b32      	ldr	r3, [pc, #200]	@ (80016b4 <HAL_I2C_MspInit+0x12c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	4a31      	ldr	r2, [pc, #196]	@ (80016b4 <HAL_I2C_MspInit+0x12c>)
 80015f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f6:	4b2f      	ldr	r3, [pc, #188]	@ (80016b4 <HAL_I2C_MspInit+0x12c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001602:	e050      	b.n	80016a6 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a2c      	ldr	r2, [pc, #176]	@ (80016bc <HAL_I2C_MspInit+0x134>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d14b      	bne.n	80016a6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <HAL_I2C_MspInit+0x12c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a27      	ldr	r2, [pc, #156]	@ (80016b4 <HAL_I2C_MspInit+0x12c>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <HAL_I2C_MspInit+0x12c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <HAL_I2C_MspInit+0x12c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a20      	ldr	r2, [pc, #128]	@ (80016b4 <HAL_I2C_MspInit+0x12c>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <HAL_I2C_MspInit+0x12c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001646:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164c:	2312      	movs	r3, #18
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001658:	2304      	movs	r3, #4
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	4817      	ldr	r0, [pc, #92]	@ (80016c0 <HAL_I2C_MspInit+0x138>)
 8001664:	f005 fb9e 	bl	8006da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001668:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166e:	2312      	movs	r3, #18
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800167a:	2304      	movs	r3, #4
 800167c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	480f      	ldr	r0, [pc, #60]	@ (80016c4 <HAL_I2C_MspInit+0x13c>)
 8001686:	f005 fb8d 	bl	8006da4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_I2C_MspInit+0x12c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4a08      	ldr	r2, [pc, #32]	@ (80016b4 <HAL_I2C_MspInit+0x12c>)
 8001694:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001698:	6413      	str	r3, [r2, #64]	@ 0x40
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_I2C_MspInit+0x12c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
}
 80016a6:	bf00      	nop
 80016a8:	3730      	adds	r7, #48	@ 0x30
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40005400 	.word	0x40005400
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40005c00 	.word	0x40005c00
 80016c0:	40020800 	.word	0x40020800
 80016c4:	40020000 	.word	0x40020000

080016c8 <flip_yaw>:
float yaw_flip;
uint16_t UltraSonic[4];


float flip_yaw(float original_yaw)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	ed87 0a01 	vstr	s0, [r7, #4]
    return 360.0f - fmodf(original_yaw, 360.0f);
 80016d2:	eddf 0a08 	vldr	s1, [pc, #32]	@ 80016f4 <flip_yaw+0x2c>
 80016d6:	ed97 0a01 	vldr	s0, [r7, #4]
 80016da:	f014 fc45 	bl	8015f68 <fmodf>
 80016de:	eef0 7a40 	vmov.f32	s15, s0
 80016e2:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 80016f4 <flip_yaw+0x2c>
 80016e6:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80016ea:	eeb0 0a67 	vmov.f32	s0, s15
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	43b40000 	.word	0x43b40000

080016f8 <Robot_Init>:

void Robot_Init()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af04      	add	r7, sp, #16
	Motor_Init(	&motorA,
 80016fe:	2301      	movs	r3, #1
 8001700:	9303      	str	r3, [sp, #12]
 8001702:	2300      	movs	r3, #0
 8001704:	9302      	str	r3, [sp, #8]
 8001706:	4b58      	ldr	r3, [pc, #352]	@ (8001868 <Robot_Init+0x170>)
 8001708:	9301      	str	r3, [sp, #4]
 800170a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	4b56      	ldr	r3, [pc, #344]	@ (800186c <Robot_Init+0x174>)
 8001712:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001716:	4955      	ldr	r1, [pc, #340]	@ (800186c <Robot_Init+0x174>)
 8001718:	4855      	ldr	r0, [pc, #340]	@ (8001870 <Robot_Init+0x178>)
 800171a:	f000 fe1f 	bl	800235c <Motor_Init>
				GPIOC, GPIO_PIN_15,
				GPIOC, GPIO_PIN_13,
				&htim11, TIM_CHANNEL_1, 1);

	Motor_Init(	&motorB,
 800171e:	2300      	movs	r3, #0
 8001720:	9303      	str	r3, [sp, #12]
 8001722:	2300      	movs	r3, #0
 8001724:	9302      	str	r3, [sp, #8]
 8001726:	4b53      	ldr	r3, [pc, #332]	@ (8001874 <Robot_Init+0x17c>)
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	2301      	movs	r3, #1
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	4b52      	ldr	r3, [pc, #328]	@ (8001878 <Robot_Init+0x180>)
 8001730:	2208      	movs	r2, #8
 8001732:	4951      	ldr	r1, [pc, #324]	@ (8001878 <Robot_Init+0x180>)
 8001734:	4851      	ldr	r0, [pc, #324]	@ (800187c <Robot_Init+0x184>)
 8001736:	f000 fe11 	bl	800235c <Motor_Init>
				GPIOE, GPIO_PIN_3,
				GPIOE, GPIO_PIN_0,
				&htim10, TIM_CHANNEL_1, 0);

	Motor_Init(	&motorC,
 800173a:	2301      	movs	r3, #1
 800173c:	9303      	str	r3, [sp, #12]
 800173e:	2300      	movs	r3, #0
 8001740:	9302      	str	r3, [sp, #8]
 8001742:	4b4f      	ldr	r3, [pc, #316]	@ (8001880 <Robot_Init+0x188>)
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	4b4d      	ldr	r3, [pc, #308]	@ (8001884 <Robot_Init+0x18c>)
 800174e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001752:	494c      	ldr	r1, [pc, #304]	@ (8001884 <Robot_Init+0x18c>)
 8001754:	484c      	ldr	r0, [pc, #304]	@ (8001888 <Robot_Init+0x190>)
 8001756:	f000 fe01 	bl	800235c <Motor_Init>
				GPIOD, GPIO_PIN_10,
				GPIOD, GPIO_PIN_8,
				&htim12, TIM_CHANNEL_1, 1);

	Encoder_Init(&encA, &htim3, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	494b      	ldr	r1, [pc, #300]	@ (800188c <Robot_Init+0x194>)
 800175e:	484c      	ldr	r0, [pc, #304]	@ (8001890 <Robot_Init+0x198>)
 8001760:	f000 fe98 	bl	8002494 <Encoder_Init>
	Encoder_Init(&encB, &htim4, 1);
 8001764:	2201      	movs	r2, #1
 8001766:	494b      	ldr	r1, [pc, #300]	@ (8001894 <Robot_Init+0x19c>)
 8001768:	484b      	ldr	r0, [pc, #300]	@ (8001898 <Robot_Init+0x1a0>)
 800176a:	f000 fe93 	bl	8002494 <Encoder_Init>
	Encoder_Init(&encC, &htim2, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	494a      	ldr	r1, [pc, #296]	@ (800189c <Robot_Init+0x1a4>)
 8001772:	484b      	ldr	r0, [pc, #300]	@ (80018a0 <Robot_Init+0x1a8>)
 8001774:	f000 fe8e 	bl	8002494 <Encoder_Init>

	kp = 45;
 8001778:	4b4a      	ldr	r3, [pc, #296]	@ (80018a4 <Robot_Init+0x1ac>)
 800177a:	4a4b      	ldr	r2, [pc, #300]	@ (80018a8 <Robot_Init+0x1b0>)
 800177c:	601a      	str	r2, [r3, #0]
	ki = 2.5;
 800177e:	4b4b      	ldr	r3, [pc, #300]	@ (80018ac <Robot_Init+0x1b4>)
 8001780:	4a4b      	ldr	r2, [pc, #300]	@ (80018b0 <Robot_Init+0x1b8>)
 8001782:	601a      	str	r2, [r3, #0]
	kd = 0;
 8001784:	4b4b      	ldr	r3, [pc, #300]	@ (80018b4 <Robot_Init+0x1bc>)
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

    PID_Init(&PID_A, kp, ki, kd);
 800178c:	4b45      	ldr	r3, [pc, #276]	@ (80018a4 <Robot_Init+0x1ac>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	4b46      	ldr	r3, [pc, #280]	@ (80018ac <Robot_Init+0x1b4>)
 8001794:	ed93 7a00 	vldr	s14, [r3]
 8001798:	4b46      	ldr	r3, [pc, #280]	@ (80018b4 <Robot_Init+0x1bc>)
 800179a:	edd3 6a00 	vldr	s13, [r3]
 800179e:	eeb0 1a66 	vmov.f32	s2, s13
 80017a2:	eef0 0a47 	vmov.f32	s1, s14
 80017a6:	eeb0 0a67 	vmov.f32	s0, s15
 80017aa:	4843      	ldr	r0, [pc, #268]	@ (80018b8 <Robot_Init+0x1c0>)
 80017ac:	f000 ff4e 	bl	800264c <PID_Init>
    PID_Init(&PID_B, kp, ki, kd);
 80017b0:	4b3c      	ldr	r3, [pc, #240]	@ (80018a4 <Robot_Init+0x1ac>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	4b3d      	ldr	r3, [pc, #244]	@ (80018ac <Robot_Init+0x1b4>)
 80017b8:	ed93 7a00 	vldr	s14, [r3]
 80017bc:	4b3d      	ldr	r3, [pc, #244]	@ (80018b4 <Robot_Init+0x1bc>)
 80017be:	edd3 6a00 	vldr	s13, [r3]
 80017c2:	eeb0 1a66 	vmov.f32	s2, s13
 80017c6:	eef0 0a47 	vmov.f32	s1, s14
 80017ca:	eeb0 0a67 	vmov.f32	s0, s15
 80017ce:	483b      	ldr	r0, [pc, #236]	@ (80018bc <Robot_Init+0x1c4>)
 80017d0:	f000 ff3c 	bl	800264c <PID_Init>
    PID_Init(&PID_C, kp, ki, kd);
 80017d4:	4b33      	ldr	r3, [pc, #204]	@ (80018a4 <Robot_Init+0x1ac>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	4b34      	ldr	r3, [pc, #208]	@ (80018ac <Robot_Init+0x1b4>)
 80017dc:	ed93 7a00 	vldr	s14, [r3]
 80017e0:	4b34      	ldr	r3, [pc, #208]	@ (80018b4 <Robot_Init+0x1bc>)
 80017e2:	edd3 6a00 	vldr	s13, [r3]
 80017e6:	eeb0 1a66 	vmov.f32	s2, s13
 80017ea:	eef0 0a47 	vmov.f32	s1, s14
 80017ee:	eeb0 0a67 	vmov.f32	s0, s15
 80017f2:	4833      	ldr	r0, [pc, #204]	@ (80018c0 <Robot_Init+0x1c8>)
 80017f4:	f000 ff2a 	bl	800264c <PID_Init>
    PID_Init(&PID_VY, 0.65, 0, 0);
 80017f8:	ed9f 1a32 	vldr	s2, [pc, #200]	@ 80018c4 <Robot_Init+0x1cc>
 80017fc:	eddf 0a31 	vldr	s1, [pc, #196]	@ 80018c4 <Robot_Init+0x1cc>
 8001800:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 80018c8 <Robot_Init+0x1d0>
 8001804:	4831      	ldr	r0, [pc, #196]	@ (80018cc <Robot_Init+0x1d4>)
 8001806:	f000 ff21 	bl	800264c <PID_Init>
    PID_Init(&PID_VW, 0.5, 0, 0);
 800180a:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 80018c4 <Robot_Init+0x1cc>
 800180e:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 80018c4 <Robot_Init+0x1cc>
 8001812:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001816:	482e      	ldr	r0, [pc, #184]	@ (80018d0 <Robot_Init+0x1d8>)
 8001818:	f000 ff18 	bl	800264c <PID_Init>

    HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 800181c:	2235      	movs	r2, #53	@ 0x35
 800181e:	492d      	ldr	r1, [pc, #180]	@ (80018d4 <Robot_Init+0x1dc>)
 8001820:	482d      	ldr	r0, [pc, #180]	@ (80018d8 <Robot_Init+0x1e0>)
 8001822:	f007 fb61 	bl	8008ee8 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
 8001826:	2217      	movs	r2, #23
 8001828:	492c      	ldr	r1, [pc, #176]	@ (80018dc <Robot_Init+0x1e4>)
 800182a:	482d      	ldr	r0, [pc, #180]	@ (80018e0 <Robot_Init+0x1e8>)
 800182c:	f007 fb5c 	bl	8008ee8 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 8001830:	222b      	movs	r2, #43	@ 0x2b
 8001832:	492c      	ldr	r1, [pc, #176]	@ (80018e4 <Robot_Init+0x1ec>)
 8001834:	482c      	ldr	r0, [pc, #176]	@ (80018e8 <Robot_Init+0x1f0>)
 8001836:	f007 fb57 	bl	8008ee8 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 800183a:	2235      	movs	r2, #53	@ 0x35
 800183c:	492b      	ldr	r1, [pc, #172]	@ (80018ec <Robot_Init+0x1f4>)
 800183e:	482c      	ldr	r0, [pc, #176]	@ (80018f0 <Robot_Init+0x1f8>)
 8001840:	f007 fb52 	bl	8008ee8 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 8001844:	2217      	movs	r2, #23
 8001846:	492b      	ldr	r1, [pc, #172]	@ (80018f4 <Robot_Init+0x1fc>)
 8001848:	482b      	ldr	r0, [pc, #172]	@ (80018f8 <Robot_Init+0x200>)
 800184a:	f007 fb4d 	bl	8008ee8 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 800184e:	2207      	movs	r2, #7
 8001850:	492a      	ldr	r1, [pc, #168]	@ (80018fc <Robot_Init+0x204>)
 8001852:	482b      	ldr	r0, [pc, #172]	@ (8001900 <Robot_Init+0x208>)
 8001854:	f007 fb48 	bl	8008ee8 <HAL_UART_Receive_DMA>

	udpClient_connect();
 8001858:	f002 f8c6 	bl	80039e8 <udpClient_connect>

	HAL_TIM_Base_Start_IT(&htim6);
 800185c:	4829      	ldr	r0, [pc, #164]	@ (8001904 <Robot_Init+0x20c>)
 800185e:	f006 fa83 	bl	8007d68 <HAL_TIM_Base_Start_IT>
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000790 	.word	0x20000790
 800186c:	40020800 	.word	0x40020800
 8001870:	20000288 	.word	0x20000288
 8001874:	20000748 	.word	0x20000748
 8001878:	40021000 	.word	0x40021000
 800187c:	200002a4 	.word	0x200002a4
 8001880:	200007d8 	.word	0x200007d8
 8001884:	40020c00 	.word	0x40020c00
 8001888:	200002c0 	.word	0x200002c0
 800188c:	20000598 	.word	0x20000598
 8001890:	200002dc 	.word	0x200002dc
 8001894:	200005e0 	.word	0x200005e0
 8001898:	200002e4 	.word	0x200002e4
 800189c:	20000550 	.word	0x20000550
 80018a0:	200002ec 	.word	0x200002ec
 80018a4:	20000400 	.word	0x20000400
 80018a8:	42340000 	.word	0x42340000
 80018ac:	20000404 	.word	0x20000404
 80018b0:	40200000 	.word	0x40200000
 80018b4:	20000408 	.word	0x20000408
 80018b8:	20000304 	.word	0x20000304
 80018bc:	20000334 	.word	0x20000334
 80018c0:	20000364 	.word	0x20000364
 80018c4:	00000000 	.word	0x00000000
 80018c8:	3f266666 	.word	0x3f266666
 80018cc:	20000394 	.word	0x20000394
 80018d0:	200003c4 	.word	0x200003c4
 80018d4:	2000040c 	.word	0x2000040c
 80018d8:	20000974 	.word	0x20000974
 80018dc:	20000444 	.word	0x20000444
 80018e0:	200009bc 	.word	0x200009bc
 80018e4:	2000045c 	.word	0x2000045c
 80018e8:	20000a04 	.word	0x20000a04
 80018ec:	20000488 	.word	0x20000488
 80018f0:	200008e4 	.word	0x200008e4
 80018f4:	200004c0 	.word	0x200004c0
 80018f8:	2000092c 	.word	0x2000092c
 80018fc:	200004d8 	.word	0x200004d8
 8001900:	20000a4c 	.word	0x20000a4c
 8001904:	20000670 	.word	0x20000670

08001908 <Robot_Motor>:

void Robot_Motor()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
	static uint16_t timer = 0;

	if(timer >= 9)
 800190e:	4b61      	ldr	r3, [pc, #388]	@ (8001a94 <Robot_Motor+0x18c>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	2b08      	cmp	r3, #8
 8001914:	f240 80b4 	bls.w	8001a80 <Robot_Motor+0x178>
//		PID_Update(&PID_VY, 20, avg_distance, 5);
//
//		PID_Update(&PID_VW, UltraSonic[0], UltraSonic[1], 5);


		int16_t va = Kinematics_Triangle(MOTOR_A, vx, vy, vw);
 8001918:	4b5f      	ldr	r3, [pc, #380]	@ (8001a98 <Robot_Motor+0x190>)
 800191a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800191e:	4b5f      	ldr	r3, [pc, #380]	@ (8001a9c <Robot_Motor+0x194>)
 8001920:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001924:	4b5e      	ldr	r3, [pc, #376]	@ (8001aa0 <Robot_Motor+0x198>)
 8001926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192a:	2000      	movs	r0, #0
 800192c:	f000 fdf8 	bl	8002520 <Kinematics_Triangle>
 8001930:	4603      	mov	r3, r0
 8001932:	80fb      	strh	r3, [r7, #6]
		int16_t vb = Kinematics_Triangle(MOTOR_B, vx, vy, vw);
 8001934:	4b58      	ldr	r3, [pc, #352]	@ (8001a98 <Robot_Motor+0x190>)
 8001936:	f9b3 1000 	ldrsh.w	r1, [r3]
 800193a:	4b58      	ldr	r3, [pc, #352]	@ (8001a9c <Robot_Motor+0x194>)
 800193c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001940:	4b57      	ldr	r3, [pc, #348]	@ (8001aa0 <Robot_Motor+0x198>)
 8001942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001946:	2001      	movs	r0, #1
 8001948:	f000 fdea 	bl	8002520 <Kinematics_Triangle>
 800194c:	4603      	mov	r3, r0
 800194e:	80bb      	strh	r3, [r7, #4]
		int16_t vc = Kinematics_Triangle(MOTOR_C, vx, vy, vw);
 8001950:	4b51      	ldr	r3, [pc, #324]	@ (8001a98 <Robot_Motor+0x190>)
 8001952:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001956:	4b51      	ldr	r3, [pc, #324]	@ (8001a9c <Robot_Motor+0x194>)
 8001958:	f9b3 2000 	ldrsh.w	r2, [r3]
 800195c:	4b50      	ldr	r3, [pc, #320]	@ (8001aa0 <Robot_Motor+0x198>)
 800195e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001962:	2002      	movs	r0, #2
 8001964:	f000 fddc 	bl	8002520 <Kinematics_Triangle>
 8001968:	4603      	mov	r3, r0
 800196a:	807b      	strh	r3, [r7, #2]
//		int16_t va = udp_rx.motor_a;
//		int16_t vb = udp_rx.motor_b;
//		int16_t vc = udp_rx.motor_c;


		Encoder_GetCount(&encA);
 800196c:	484d      	ldr	r0, [pc, #308]	@ (8001aa4 <Robot_Motor+0x19c>)
 800196e:	f000 fda8 	bl	80024c2 <Encoder_GetCount>
		Encoder_GetCount(&encB);
 8001972:	484d      	ldr	r0, [pc, #308]	@ (8001aa8 <Robot_Motor+0x1a0>)
 8001974:	f000 fda5 	bl	80024c2 <Encoder_GetCount>
		Encoder_GetCount(&encC);
 8001978:	484c      	ldr	r0, [pc, #304]	@ (8001aac <Robot_Motor+0x1a4>)
 800197a:	f000 fda2 	bl	80024c2 <Encoder_GetCount>

		/* Save UDP */
		udp_tx.enc_a = encA.count;
 800197e:	4b49      	ldr	r3, [pc, #292]	@ (8001aa4 <Robot_Motor+0x19c>)
 8001980:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001984:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab0 <Robot_Motor+0x1a8>)
 8001986:	801a      	strh	r2, [r3, #0]
		udp_tx.enc_b = encB.count;
 8001988:	4b47      	ldr	r3, [pc, #284]	@ (8001aa8 <Robot_Motor+0x1a0>)
 800198a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800198e:	4b48      	ldr	r3, [pc, #288]	@ (8001ab0 <Robot_Motor+0x1a8>)
 8001990:	805a      	strh	r2, [r3, #2]
		udp_tx.enc_c = encC.count;
 8001992:	4b46      	ldr	r3, [pc, #280]	@ (8001aac <Robot_Motor+0x1a4>)
 8001994:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001998:	4b45      	ldr	r3, [pc, #276]	@ (8001ab0 <Robot_Motor+0x1a8>)
 800199a:	809a      	strh	r2, [r3, #4]

		Encoder_ResetCount(&encA);
 800199c:	4841      	ldr	r0, [pc, #260]	@ (8001aa4 <Robot_Motor+0x19c>)
 800199e:	f000 fdb0 	bl	8002502 <Encoder_ResetCount>
		Encoder_ResetCount(&encB);
 80019a2:	4841      	ldr	r0, [pc, #260]	@ (8001aa8 <Robot_Motor+0x1a0>)
 80019a4:	f000 fdad 	bl	8002502 <Encoder_ResetCount>
		Encoder_ResetCount(&encC);
 80019a8:	4840      	ldr	r0, [pc, #256]	@ (8001aac <Robot_Motor+0x1a4>)
 80019aa:	f000 fdaa 	bl	8002502 <Encoder_ResetCount>

		PID_Update(&PID_A, (float)va, (float)encA.count, 999);
 80019ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ba:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa4 <Robot_Motor+0x19c>)
 80019bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019c0:	ee07 3a10 	vmov	s14, r3
 80019c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80019c8:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 8001ab4 <Robot_Motor+0x1ac>
 80019cc:	eef0 0a47 	vmov.f32	s1, s14
 80019d0:	eeb0 0a67 	vmov.f32	s0, s15
 80019d4:	4838      	ldr	r0, [pc, #224]	@ (8001ab8 <Robot_Motor+0x1b0>)
 80019d6:	f000 fe76 	bl	80026c6 <PID_Update>
		PID_Update(&PID_B, (float)vb, (float)encB.count, 999);
 80019da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e6:	4b30      	ldr	r3, [pc, #192]	@ (8001aa8 <Robot_Motor+0x1a0>)
 80019e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019ec:	ee07 3a10 	vmov	s14, r3
 80019f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80019f4:	ed9f 1a2f 	vldr	s2, [pc, #188]	@ 8001ab4 <Robot_Motor+0x1ac>
 80019f8:	eef0 0a47 	vmov.f32	s1, s14
 80019fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001a00:	482e      	ldr	r0, [pc, #184]	@ (8001abc <Robot_Motor+0x1b4>)
 8001a02:	f000 fe60 	bl	80026c6 <PID_Update>
		PID_Update(&PID_C, (float)vc, (float)encC.count, 999);
 8001a06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a12:	4b26      	ldr	r3, [pc, #152]	@ (8001aac <Robot_Motor+0x1a4>)
 8001a14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a18:	ee07 3a10 	vmov	s14, r3
 8001a1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001a20:	ed9f 1a24 	vldr	s2, [pc, #144]	@ 8001ab4 <Robot_Motor+0x1ac>
 8001a24:	eef0 0a47 	vmov.f32	s1, s14
 8001a28:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2c:	4824      	ldr	r0, [pc, #144]	@ (8001ac0 <Robot_Motor+0x1b8>)
 8001a2e:	f000 fe4a 	bl	80026c6 <PID_Update>

		Motor_Run(&motorA, (int16_t)PID_A.output);
 8001a32:	4b21      	ldr	r3, [pc, #132]	@ (8001ab8 <Robot_Motor+0x1b0>)
 8001a34:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3c:	ee17 3a90 	vmov	r3, s15
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	4619      	mov	r1, r3
 8001a44:	481f      	ldr	r0, [pc, #124]	@ (8001ac4 <Robot_Motor+0x1bc>)
 8001a46:	f000 fcb3 	bl	80023b0 <Motor_Run>
		Motor_Run(&motorB, (int16_t)PID_B.output);
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001abc <Robot_Motor+0x1b4>)
 8001a4c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001a50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a54:	ee17 3a90 	vmov	r3, s15
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	481a      	ldr	r0, [pc, #104]	@ (8001ac8 <Robot_Motor+0x1c0>)
 8001a5e:	f000 fca7 	bl	80023b0 <Motor_Run>
		Motor_Run(&motorC, (int16_t)PID_C.output);
 8001a62:	4b17      	ldr	r3, [pc, #92]	@ (8001ac0 <Robot_Motor+0x1b8>)
 8001a64:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6c:	ee17 3a90 	vmov	r3, s15
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4619      	mov	r1, r3
 8001a74:	4815      	ldr	r0, [pc, #84]	@ (8001acc <Robot_Motor+0x1c4>)
 8001a76:	f000 fc9b 	bl	80023b0 <Motor_Run>

		timer = 0;
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <Robot_Motor+0x18c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	801a      	strh	r2, [r3, #0]
	}

	timer++;
 8001a80:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <Robot_Motor+0x18c>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	4b02      	ldr	r3, [pc, #8]	@ (8001a94 <Robot_Motor+0x18c>)
 8001a8a:	801a      	strh	r2, [r3, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200004fc 	.word	0x200004fc
 8001a98:	200003f4 	.word	0x200003f4
 8001a9c:	200003f6 	.word	0x200003f6
 8001aa0:	200003f8 	.word	0x200003f8
 8001aa4:	200002dc 	.word	0x200002dc
 8001aa8:	200002e4 	.word	0x200002e4
 8001aac:	200002ec 	.word	0x200002ec
 8001ab0:	20000874 	.word	0x20000874
 8001ab4:	4479c000 	.word	0x4479c000
 8001ab8:	20000304 	.word	0x20000304
 8001abc:	20000334 	.word	0x20000334
 8001ac0:	20000364 	.word	0x20000364
 8001ac4:	20000288 	.word	0x20000288
 8001ac8:	200002a4 	.word	0x200002a4
 8001acc:	200002c0 	.word	0x200002c0

08001ad0 <Robot_LED_Blink>:

void Robot_LED_Blink()
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	static uint16_t timer = 0;
	static uint8_t state = 0;

	if(timer >= 99)
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <Robot_LED_Blink+0x44>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	2b62      	cmp	r3, #98	@ 0x62
 8001ada:	d913      	bls.n	8001b04 <Robot_LED_Blink+0x34>
	{
		state = !(state);
 8001adc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <Robot_LED_Blink+0x48>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <Robot_LED_Blink+0x48>)
 8001aee:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, state);
 8001af0:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <Robot_LED_Blink+0x48>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	2102      	movs	r1, #2
 8001af8:	4808      	ldr	r0, [pc, #32]	@ (8001b1c <Robot_LED_Blink+0x4c>)
 8001afa:	f005 faef 	bl	80070dc <HAL_GPIO_WritePin>
		timer = 0;
 8001afe:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <Robot_LED_Blink+0x44>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	801a      	strh	r2, [r3, #0]
	}

	timer++;
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <Robot_LED_Blink+0x44>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b01      	ldr	r3, [pc, #4]	@ (8001b14 <Robot_LED_Blink+0x44>)
 8001b0e:	801a      	strh	r2, [r3, #0]
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200004fe 	.word	0x200004fe
 8001b18:	20000500 	.word	0x20000500
 8001b1c:	40021000 	.word	0x40021000

08001b20 <Robot_Transmit_UART>:

void Robot_Transmit_UART()
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	memcpy(UART1_TX_BUFFER + 3, &cnt_tx, 2);
 8001b24:	4a09      	ldr	r2, [pc, #36]	@ (8001b4c <Robot_Transmit_UART+0x2c>)
 8001b26:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <Robot_Transmit_UART+0x30>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)UART1_TX_BUFFER, sizeof(UART1_TX_BUFFER));
 8001b2c:	2235      	movs	r2, #53	@ 0x35
 8001b2e:	4909      	ldr	r1, [pc, #36]	@ (8001b54 <Robot_Transmit_UART+0x34>)
 8001b30:	4809      	ldr	r0, [pc, #36]	@ (8001b58 <Robot_Transmit_UART+0x38>)
 8001b32:	f007 f95d 	bl	8008df0 <HAL_UART_Transmit_DMA>
	cnt_tx++;
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <Robot_Transmit_UART+0x30>)
 8001b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	b21a      	sxth	r2, r3
 8001b44:	4b02      	ldr	r3, [pc, #8]	@ (8001b50 <Robot_Transmit_UART+0x30>)
 8001b46:	801a      	strh	r2, [r3, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000003 	.word	0x20000003
 8001b50:	200004e2 	.word	0x200004e2
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000974 	.word	0x20000974

08001b5c <Robot_Loop>:

void Robot_Loop()
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	Robot_Transmit_UART();
 8001b60:	f7ff ffde 	bl	8001b20 <Robot_Transmit_UART>

	Robot_Motor();
 8001b64:	f7ff fed0 	bl	8001908 <Robot_Motor>

	Robot_LED_Blink();
 8001b68:	f7ff ffb2 	bl	8001ad0 <Robot_LED_Blink>
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

	if(htim == &htim6)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a07      	ldr	r2, [pc, #28]	@ (8001b98 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d107      	bne.n	8001b90 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		udp_cnt++;
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001b8a:	701a      	strb	r2, [r3, #0]

		Robot_Loop();
 8001b8c:	f7ff ffe6 	bl	8001b5c <Robot_Loop>
	}
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000670 	.word	0x20000670
 8001b9c:	2000025c 	.word	0x2000025c

08001ba0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af02      	add	r7, sp, #8
 8001ba8:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //--- VGT ARM
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4abe      	ldr	r2, [pc, #760]	@ (8001ea8 <HAL_UART_RxCpltCallback+0x308>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d109      	bne.n	8001bc6 <HAL_UART_RxCpltCallback+0x26>
	{
		memcpy(&cnt_rx, UART1_RX_BUFFER + 3, 2);
 8001bb2:	4bbe      	ldr	r3, [pc, #760]	@ (8001eac <HAL_UART_RxCpltCallback+0x30c>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	4bbd      	ldr	r3, [pc, #756]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x310>)
 8001bba:	801a      	strh	r2, [r3, #0]

		HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8001bbc:	2235      	movs	r2, #53	@ 0x35
 8001bbe:	49bd      	ldr	r1, [pc, #756]	@ (8001eb4 <HAL_UART_RxCpltCallback+0x314>)
 8001bc0:	48b9      	ldr	r0, [pc, #740]	@ (8001ea8 <HAL_UART_RxCpltCallback+0x308>)
 8001bc2:	f007 f991 	bl	8008ee8 <HAL_UART_Receive_DMA>
//		udp_tx.yaw_degree = yaw_degree;
//
//		HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
//	}

	if(huart == &huart3)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4abb      	ldr	r2, [pc, #748]	@ (8001eb8 <HAL_UART_RxCpltCallback+0x318>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	f040 812c 	bne.w	8001e28 <HAL_UART_RxCpltCallback+0x288>
	{
		memcpy((uint8_t*)&input + 4, UART3_RX_BUFFER + 3, sizeof(input) - 4);
 8001bd0:	4bba      	ldr	r3, [pc, #744]	@ (8001ebc <HAL_UART_RxCpltCallback+0x31c>)
 8001bd2:	49bb      	ldr	r1, [pc, #748]	@ (8001ec0 <HAL_UART_RxCpltCallback+0x320>)
 8001bd4:	2224      	movs	r2, #36	@ 0x24
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f013 faef 	bl	80151ba <memcpy>

		input.lX = Controller_Drift(input.lX_raw, 12);
 8001bdc:	4bb9      	ldr	r3, [pc, #740]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001bde:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001be2:	210c      	movs	r1, #12
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff faf1 	bl	80011cc <Controller_Drift>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	4bb5      	ldr	r3, [pc, #724]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001bf0:	709a      	strb	r2, [r3, #2]
		input.lY = Controller_Drift(input.lY_raw, 12);
 8001bf2:	4bb4      	ldr	r3, [pc, #720]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001bf4:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001bf8:	210c      	movs	r1, #12
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fae6 	bl	80011cc <Controller_Drift>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	4baf      	ldr	r3, [pc, #700]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001c06:	70da      	strb	r2, [r3, #3]
		input.rX = Controller_Drift(input.rX_raw, 12);
 8001c08:	4bae      	ldr	r3, [pc, #696]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001c0a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001c0e:	210c      	movs	r1, #12
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fadb 	bl	80011cc <Controller_Drift>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4baa      	ldr	r3, [pc, #680]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001c1c:	701a      	strb	r2, [r3, #0]
		input.rY = Controller_Drift(input.rY_raw, 12);
 8001c1e:	4ba9      	ldr	r3, [pc, #676]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001c20:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001c24:	210c      	movs	r1, #12
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fad0 	bl	80011cc <Controller_Drift>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4ba4      	ldr	r3, [pc, #656]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001c32:	705a      	strb	r2, [r3, #1]

		input.lX = map(input.lX, -128, 127, -30, 30);
 8001c34:	4ba3      	ldr	r3, [pc, #652]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001c36:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	231e      	movs	r3, #30
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	f06f 031d 	mvn.w	r3, #29
 8001c44:	227f      	movs	r2, #127	@ 0x7f
 8001c46:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001c4a:	f7ff fae9 	bl	8001220 <map>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	b25a      	sxtb	r2, r3
 8001c52:	4b9c      	ldr	r3, [pc, #624]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001c54:	709a      	strb	r2, [r3, #2]
		input.lY = map(input.lY, -128, 127, -30, 30);
 8001c56:	4b9b      	ldr	r3, [pc, #620]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001c58:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	231e      	movs	r3, #30
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	f06f 031d 	mvn.w	r3, #29
 8001c66:	227f      	movs	r2, #127	@ 0x7f
 8001c68:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001c6c:	f7ff fad8 	bl	8001220 <map>
 8001c70:	4603      	mov	r3, r0
 8001c72:	b25a      	sxtb	r2, r3
 8001c74:	4b93      	ldr	r3, [pc, #588]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001c76:	70da      	strb	r2, [r3, #3]
		input.rX = map(input.rX, -128, 127, -15, 15);
 8001c78:	4b92      	ldr	r3, [pc, #584]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001c7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	230f      	movs	r3, #15
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	f06f 030e 	mvn.w	r3, #14
 8001c88:	227f      	movs	r2, #127	@ 0x7f
 8001c8a:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001c8e:	f7ff fac7 	bl	8001220 <map>
 8001c92:	4603      	mov	r3, r0
 8001c94:	b25a      	sxtb	r2, r3
 8001c96:	4b8b      	ldr	r3, [pc, #556]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001c98:	701a      	strb	r2, [r3, #0]
		input.rY = map(input.rY, -128, 127, -30, 30);
 8001c9a:	4b8a      	ldr	r3, [pc, #552]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001c9c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	231e      	movs	r3, #30
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	f06f 031d 	mvn.w	r3, #29
 8001caa:	227f      	movs	r2, #127	@ 0x7f
 8001cac:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001cb0:	f7ff fab6 	bl	8001220 <map>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	b25a      	sxtb	r2, r3
 8001cb8:	4b82      	ldr	r3, [pc, #520]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001cba:	705a      	strb	r2, [r3, #1]
//		vx_controller = input.lX;
//		vy_controller = input.lY;
//		vw_controller = -(input.rX);

		//--- Field Centric
		vx_controller = input.lX *  cos(yaw_radian) + input.lY * sin(yaw_radian);
 8001cbc:	4b81      	ldr	r3, [pc, #516]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001cbe:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fc26 	bl	8000514 <__aeabi_i2d>
 8001cc8:	4680      	mov	r8, r0
 8001cca:	4689      	mov	r9, r1
 8001ccc:	4b7e      	ldr	r3, [pc, #504]	@ (8001ec8 <HAL_UART_RxCpltCallback+0x328>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fc31 	bl	8000538 <__aeabi_f2d>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	ec43 2b10 	vmov	d0, r2, r3
 8001cde:	f014 f89b 	bl	8015e18 <cos>
 8001ce2:	ec53 2b10 	vmov	r2, r3, d0
 8001ce6:	4640      	mov	r0, r8
 8001ce8:	4649      	mov	r1, r9
 8001cea:	f7fe fc7d 	bl	80005e8 <__aeabi_dmul>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4692      	mov	sl, r2
 8001cf4:	469b      	mov	fp, r3
 8001cf6:	4b73      	ldr	r3, [pc, #460]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001cf8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fc09 	bl	8000514 <__aeabi_i2d>
 8001d02:	4680      	mov	r8, r0
 8001d04:	4689      	mov	r9, r1
 8001d06:	4b70      	ldr	r3, [pc, #448]	@ (8001ec8 <HAL_UART_RxCpltCallback+0x328>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc14 	bl	8000538 <__aeabi_f2d>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	ec43 2b10 	vmov	d0, r2, r3
 8001d18:	f014 f8d2 	bl	8015ec0 <sin>
 8001d1c:	ec53 2b10 	vmov	r2, r3, d0
 8001d20:	4640      	mov	r0, r8
 8001d22:	4649      	mov	r1, r9
 8001d24:	f7fe fc60 	bl	80005e8 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4650      	mov	r0, sl
 8001d2e:	4659      	mov	r1, fp
 8001d30:	f7fe faa4 	bl	800027c <__adddf3>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f7fe feee 	bl	8000b1c <__aeabi_d2iz>
 8001d40:	4603      	mov	r3, r0
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	4b61      	ldr	r3, [pc, #388]	@ (8001ecc <HAL_UART_RxCpltCallback+0x32c>)
 8001d46:	801a      	strh	r2, [r3, #0]
		vy_controller = input.lX * -sin(yaw_radian) + input.lY * cos(yaw_radian);
 8001d48:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001d4a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fbe0 	bl	8000514 <__aeabi_i2d>
 8001d54:	4680      	mov	r8, r0
 8001d56:	4689      	mov	r9, r1
 8001d58:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec8 <HAL_UART_RxCpltCallback+0x328>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fbeb 	bl	8000538 <__aeabi_f2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	ec43 2b10 	vmov	d0, r2, r3
 8001d6a:	f014 f8a9 	bl	8015ec0 <sin>
 8001d6e:	ec53 2b10 	vmov	r2, r3, d0
 8001d72:	4614      	mov	r4, r2
 8001d74:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001d78:	4622      	mov	r2, r4
 8001d7a:	462b      	mov	r3, r5
 8001d7c:	4640      	mov	r0, r8
 8001d7e:	4649      	mov	r1, r9
 8001d80:	f7fe fc32 	bl	80005e8 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4690      	mov	r8, r2
 8001d8a:	4699      	mov	r9, r3
 8001d8c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001d8e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fbbe 	bl	8000514 <__aeabi_i2d>
 8001d98:	4604      	mov	r4, r0
 8001d9a:	460d      	mov	r5, r1
 8001d9c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ec8 <HAL_UART_RxCpltCallback+0x328>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fbc9 	bl	8000538 <__aeabi_f2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	ec43 2b10 	vmov	d0, r2, r3
 8001dae:	f014 f833 	bl	8015e18 <cos>
 8001db2:	ec53 2b10 	vmov	r2, r3, d0
 8001db6:	4620      	mov	r0, r4
 8001db8:	4629      	mov	r1, r5
 8001dba:	f7fe fc15 	bl	80005e8 <__aeabi_dmul>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4640      	mov	r0, r8
 8001dc4:	4649      	mov	r1, r9
 8001dc6:	f7fe fa59 	bl	800027c <__adddf3>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7fe fea3 	bl	8000b1c <__aeabi_d2iz>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b21a      	sxth	r2, r3
 8001dda:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed0 <HAL_UART_RxCpltCallback+0x330>)
 8001ddc:	801a      	strh	r2, [r3, #0]
		vw_controller = -(input.rX);
 8001dde:	4b39      	ldr	r3, [pc, #228]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001de0:	f993 3000 	ldrsb.w	r3, [r3]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	425b      	negs	r3, r3
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	4b39      	ldr	r3, [pc, #228]	@ (8001ed4 <HAL_UART_RxCpltCallback+0x334>)
 8001dee:	801a      	strh	r2, [r3, #0]

		vx = vx_controller;
 8001df0:	4b36      	ldr	r3, [pc, #216]	@ (8001ecc <HAL_UART_RxCpltCallback+0x32c>)
 8001df2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001df6:	4b38      	ldr	r3, [pc, #224]	@ (8001ed8 <HAL_UART_RxCpltCallback+0x338>)
 8001df8:	801a      	strh	r2, [r3, #0]
		vy = vy_controller;
 8001dfa:	4b35      	ldr	r3, [pc, #212]	@ (8001ed0 <HAL_UART_RxCpltCallback+0x330>)
 8001dfc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e00:	4b36      	ldr	r3, [pc, #216]	@ (8001edc <HAL_UART_RxCpltCallback+0x33c>)
 8001e02:	801a      	strh	r2, [r3, #0]
		vw = vw_controller;
 8001e04:	4b33      	ldr	r3, [pc, #204]	@ (8001ed4 <HAL_UART_RxCpltCallback+0x334>)
 8001e06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e0a:	4b35      	ldr	r3, [pc, #212]	@ (8001ee0 <HAL_UART_RxCpltCallback+0x340>)
 8001e0c:	801a      	strh	r2, [r3, #0]

		if(input.crs)
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x324>)
 8001e10:	7b9b      	ldrb	r3, [r3, #14]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_UART_RxCpltCallback+0x27e>
		{
			yaw_adjust = yaw_flip;
 8001e16:	4b33      	ldr	r3, [pc, #204]	@ (8001ee4 <HAL_UART_RxCpltCallback+0x344>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a33      	ldr	r2, [pc, #204]	@ (8001ee8 <HAL_UART_RxCpltCallback+0x348>)
 8001e1c:	6013      	str	r3, [r2, #0]
		}


		HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 8001e1e:	222b      	movs	r2, #43	@ 0x2b
 8001e20:	4932      	ldr	r1, [pc, #200]	@ (8001eec <HAL_UART_RxCpltCallback+0x34c>)
 8001e22:	4825      	ldr	r0, [pc, #148]	@ (8001eb8 <HAL_UART_RxCpltCallback+0x318>)
 8001e24:	f007 f860 	bl	8008ee8 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart4)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a31      	ldr	r2, [pc, #196]	@ (8001ef0 <HAL_UART_RxCpltCallback+0x350>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d116      	bne.n	8001e5e <HAL_UART_RxCpltCallback+0x2be>
	{
		memcpy(&encX.count, UART4_RX_BUFFER + 3, 2);
 8001e30:	4b30      	ldr	r3, [pc, #192]	@ (8001ef4 <HAL_UART_RxCpltCallback+0x354>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	4b30      	ldr	r3, [pc, #192]	@ (8001ef8 <HAL_UART_RxCpltCallback+0x358>)
 8001e38:	809a      	strh	r2, [r3, #4]
		memcpy(&encY.count, UART4_RX_BUFFER + 5, 2);
 8001e3a:	4b30      	ldr	r3, [pc, #192]	@ (8001efc <HAL_UART_RxCpltCallback+0x35c>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b2f      	ldr	r3, [pc, #188]	@ (8001f00 <HAL_UART_RxCpltCallback+0x360>)
 8001e42:	809a      	strh	r2, [r3, #4]

		/* Save UDP */
		memcpy(&udp_tx.enc_x, &encX.count, 2);
 8001e44:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef8 <HAL_UART_RxCpltCallback+0x358>)
 8001e46:	889a      	ldrh	r2, [r3, #4]
 8001e48:	4b2e      	ldr	r3, [pc, #184]	@ (8001f04 <HAL_UART_RxCpltCallback+0x364>)
 8001e4a:	80da      	strh	r2, [r3, #6]
		memcpy(&udp_tx.enc_y, &encY.count, 2);
 8001e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f00 <HAL_UART_RxCpltCallback+0x360>)
 8001e4e:	889a      	ldrh	r2, [r3, #4]
 8001e50:	4b2c      	ldr	r3, [pc, #176]	@ (8001f04 <HAL_UART_RxCpltCallback+0x364>)
 8001e52:	811a      	strh	r2, [r3, #8]

		HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 8001e54:	2235      	movs	r2, #53	@ 0x35
 8001e56:	492c      	ldr	r1, [pc, #176]	@ (8001f08 <HAL_UART_RxCpltCallback+0x368>)
 8001e58:	4825      	ldr	r0, [pc, #148]	@ (8001ef0 <HAL_UART_RxCpltCallback+0x350>)
 8001e5a:	f007 f845 	bl	8008ee8 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart5)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a2a      	ldr	r2, [pc, #168]	@ (8001f0c <HAL_UART_RxCpltCallback+0x36c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d111      	bne.n	8001e8a <HAL_UART_RxCpltCallback+0x2ea>
	{
		memcpy(UltraSonic, UART5_RX_BUFFER + 3, sizeof(UltraSonic));
 8001e66:	4b2a      	ldr	r3, [pc, #168]	@ (8001f10 <HAL_UART_RxCpltCallback+0x370>)
 8001e68:	2208      	movs	r2, #8
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4829      	ldr	r0, [pc, #164]	@ (8001f14 <HAL_UART_RxCpltCallback+0x374>)
 8001e6e:	f013 f9a4 	bl	80151ba <memcpy>

		/* Save UDP */
		memcpy(udp_tx.ultrasonic, UltraSonic, sizeof(udp_tx.ultrasonic));
 8001e72:	4b24      	ldr	r3, [pc, #144]	@ (8001f04 <HAL_UART_RxCpltCallback+0x364>)
 8001e74:	4a27      	ldr	r2, [pc, #156]	@ (8001f14 <HAL_UART_RxCpltCallback+0x374>)
 8001e76:	3314      	adds	r3, #20
 8001e78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e7c:	e883 0003 	stmia.w	r3, {r0, r1}

		HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 8001e80:	2217      	movs	r2, #23
 8001e82:	4925      	ldr	r1, [pc, #148]	@ (8001f18 <HAL_UART_RxCpltCallback+0x378>)
 8001e84:	4821      	ldr	r0, [pc, #132]	@ (8001f0c <HAL_UART_RxCpltCallback+0x36c>)
 8001e86:	f007 f82f 	bl	8008ee8 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart6)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a23      	ldr	r2, [pc, #140]	@ (8001f1c <HAL_UART_RxCpltCallback+0x37c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d17d      	bne.n	8001f8e <HAL_UART_RxCpltCallback+0x3ee>
	{
		memcpy(&yaw_degree, UART6_RX_BUFFER + 3, 4);
 8001e92:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <HAL_UART_RxCpltCallback+0x380>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b22      	ldr	r3, [pc, #136]	@ (8001f24 <HAL_UART_RxCpltCallback+0x384>)
 8001e9a:	601a      	str	r2, [r3, #0]

		yaw_flip = flip_yaw(yaw_degree);
 8001e9c:	4b21      	ldr	r3, [pc, #132]	@ (8001f24 <HAL_UART_RxCpltCallback+0x384>)
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea6:	e03f      	b.n	8001f28 <HAL_UART_RxCpltCallback+0x388>
 8001ea8:	20000974 	.word	0x20000974
 8001eac:	2000040f 	.word	0x2000040f
 8001eb0:	200004e0 	.word	0x200004e0
 8001eb4:	2000040c 	.word	0x2000040c
 8001eb8:	20000a04 	.word	0x20000a04
 8001ebc:	20000264 	.word	0x20000264
 8001ec0:	2000045f 	.word	0x2000045f
 8001ec4:	20000260 	.word	0x20000260
 8001ec8:	200004e8 	.word	0x200004e8
 8001ecc:	200003fa 	.word	0x200003fa
 8001ed0:	200003fc 	.word	0x200003fc
 8001ed4:	200003fe 	.word	0x200003fe
 8001ed8:	200003f4 	.word	0x200003f4
 8001edc:	200003f6 	.word	0x200003f6
 8001ee0:	200003f8 	.word	0x200003f8
 8001ee4:	200004f0 	.word	0x200004f0
 8001ee8:	200004ec 	.word	0x200004ec
 8001eec:	2000045c 	.word	0x2000045c
 8001ef0:	200008e4 	.word	0x200008e4
 8001ef4:	2000048b 	.word	0x2000048b
 8001ef8:	200002f4 	.word	0x200002f4
 8001efc:	2000048d 	.word	0x2000048d
 8001f00:	200002fc 	.word	0x200002fc
 8001f04:	20000874 	.word	0x20000874
 8001f08:	20000488 	.word	0x20000488
 8001f0c:	2000092c 	.word	0x2000092c
 8001f10:	200004c3 	.word	0x200004c3
 8001f14:	200004f4 	.word	0x200004f4
 8001f18:	200004c0 	.word	0x200004c0
 8001f1c:	20000a4c 	.word	0x20000a4c
 8001f20:	200004db 	.word	0x200004db
 8001f24:	200004e4 	.word	0x200004e4
 8001f28:	f7ff fbce 	bl	80016c8 <flip_yaw>
 8001f2c:	eef0 7a40 	vmov.f32	s15, s0
 8001f30:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <HAL_UART_RxCpltCallback+0x400>)
 8001f32:	edc3 7a00 	vstr	s15, [r3]

		yaw_radian = (yaw_flip - yaw_adjust) * M_PI/180.0;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa0 <HAL_UART_RxCpltCallback+0x400>)
 8001f38:	ed93 7a00 	vldr	s14, [r3]
 8001f3c:	4b19      	ldr	r3, [pc, #100]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x404>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f46:	ee17 0a90 	vmov	r0, s15
 8001f4a:	f7fe faf5 	bl	8000538 <__aeabi_f2d>
 8001f4e:	a312      	add	r3, pc, #72	@ (adr r3, 8001f98 <HAL_UART_RxCpltCallback+0x3f8>)
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	f7fe fb48 	bl	80005e8 <__aeabi_dmul>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x408>)
 8001f66:	f7fe fc69 	bl	800083c <__aeabi_ddiv>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f7fe fdfb 	bl	8000b6c <__aeabi_d2f>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4a0c      	ldr	r2, [pc, #48]	@ (8001fac <HAL_UART_RxCpltCallback+0x40c>)
 8001f7a:	6013      	str	r3, [r2, #0]

		/* Save UDP */
		udp_tx.yaw_degree = yaw_flip;
 8001f7c:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <HAL_UART_RxCpltCallback+0x400>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x410>)
 8001f82:	6113      	str	r3, [r2, #16]

		HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 8001f84:	2207      	movs	r2, #7
 8001f86:	490b      	ldr	r1, [pc, #44]	@ (8001fb4 <HAL_UART_RxCpltCallback+0x414>)
 8001f88:	480b      	ldr	r0, [pc, #44]	@ (8001fb8 <HAL_UART_RxCpltCallback+0x418>)
 8001f8a:	f006 ffad 	bl	8008ee8 <HAL_UART_Receive_DMA>
	}

}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f98:	54442d18 	.word	0x54442d18
 8001f9c:	400921fb 	.word	0x400921fb
 8001fa0:	200004f0 	.word	0x200004f0
 8001fa4:	200004ec 	.word	0x200004ec
 8001fa8:	40668000 	.word	0x40668000
 8001fac:	200004e8 	.word	0x200004e8
 8001fb0:	20000874 	.word	0x20000874
 8001fb4:	200004d8 	.word	0x200004d8
 8001fb8:	20000a4c 	.word	0x20000a4c

08001fbc <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //--- VGT ARM
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a49      	ldr	r2, [pc, #292]	@ (80020ec <HAL_UART_RxHalfCpltCallback+0x130>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d113      	bne.n	8001ff4 <HAL_UART_RxHalfCpltCallback+0x38>
	{
		if(!(UART1_RX_BUFFER[0] == 'A' && UART1_RX_BUFFER[1] == 'B' && UART1_RX_BUFFER[2] == 'C'))
 8001fcc:	4b48      	ldr	r3, [pc, #288]	@ (80020f0 <HAL_UART_RxHalfCpltCallback+0x134>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b41      	cmp	r3, #65	@ 0x41
 8001fd2:	d107      	bne.n	8001fe4 <HAL_UART_RxHalfCpltCallback+0x28>
 8001fd4:	4b46      	ldr	r3, [pc, #280]	@ (80020f0 <HAL_UART_RxHalfCpltCallback+0x134>)
 8001fd6:	785b      	ldrb	r3, [r3, #1]
 8001fd8:	2b42      	cmp	r3, #66	@ 0x42
 8001fda:	d103      	bne.n	8001fe4 <HAL_UART_RxHalfCpltCallback+0x28>
 8001fdc:	4b44      	ldr	r3, [pc, #272]	@ (80020f0 <HAL_UART_RxHalfCpltCallback+0x134>)
 8001fde:	789b      	ldrb	r3, [r3, #2]
 8001fe0:	2b43      	cmp	r3, #67	@ 0x43
 8001fe2:	d007      	beq.n	8001ff4 <HAL_UART_RxHalfCpltCallback+0x38>
		{
			HAL_UART_AbortReceive(&huart1);
 8001fe4:	4841      	ldr	r0, [pc, #260]	@ (80020ec <HAL_UART_RxHalfCpltCallback+0x130>)
 8001fe6:	f006 ffa4 	bl	8008f32 <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8001fea:	2235      	movs	r2, #53	@ 0x35
 8001fec:	4940      	ldr	r1, [pc, #256]	@ (80020f0 <HAL_UART_RxHalfCpltCallback+0x134>)
 8001fee:	483f      	ldr	r0, [pc, #252]	@ (80020ec <HAL_UART_RxHalfCpltCallback+0x130>)
 8001ff0:	f006 ff7a 	bl	8008ee8 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a3f      	ldr	r2, [pc, #252]	@ (80020f4 <HAL_UART_RxHalfCpltCallback+0x138>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d113      	bne.n	8002024 <HAL_UART_RxHalfCpltCallback+0x68>
	{
		if(!(UART2_RX_BUFFER[0] == 'A' && UART2_RX_BUFFER[1] == 'B' && UART2_RX_BUFFER[2] == 'C'))
 8001ffc:	4b3e      	ldr	r3, [pc, #248]	@ (80020f8 <HAL_UART_RxHalfCpltCallback+0x13c>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b41      	cmp	r3, #65	@ 0x41
 8002002:	d107      	bne.n	8002014 <HAL_UART_RxHalfCpltCallback+0x58>
 8002004:	4b3c      	ldr	r3, [pc, #240]	@ (80020f8 <HAL_UART_RxHalfCpltCallback+0x13c>)
 8002006:	785b      	ldrb	r3, [r3, #1]
 8002008:	2b42      	cmp	r3, #66	@ 0x42
 800200a:	d103      	bne.n	8002014 <HAL_UART_RxHalfCpltCallback+0x58>
 800200c:	4b3a      	ldr	r3, [pc, #232]	@ (80020f8 <HAL_UART_RxHalfCpltCallback+0x13c>)
 800200e:	789b      	ldrb	r3, [r3, #2]
 8002010:	2b43      	cmp	r3, #67	@ 0x43
 8002012:	d007      	beq.n	8002024 <HAL_UART_RxHalfCpltCallback+0x68>
		{
			HAL_UART_AbortReceive(&huart2);
 8002014:	4837      	ldr	r0, [pc, #220]	@ (80020f4 <HAL_UART_RxHalfCpltCallback+0x138>)
 8002016:	f006 ff8c 	bl	8008f32 <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
 800201a:	2217      	movs	r2, #23
 800201c:	4936      	ldr	r1, [pc, #216]	@ (80020f8 <HAL_UART_RxHalfCpltCallback+0x13c>)
 800201e:	4835      	ldr	r0, [pc, #212]	@ (80020f4 <HAL_UART_RxHalfCpltCallback+0x138>)
 8002020:	f006 ff62 	bl	8008ee8 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart3)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a35      	ldr	r2, [pc, #212]	@ (80020fc <HAL_UART_RxHalfCpltCallback+0x140>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d113      	bne.n	8002054 <HAL_UART_RxHalfCpltCallback+0x98>
	{
		if(!(UART3_RX_BUFFER[0] == 'A' && UART3_RX_BUFFER[1] == 'B' && UART3_RX_BUFFER[2] == 'C'))
 800202c:	4b34      	ldr	r3, [pc, #208]	@ (8002100 <HAL_UART_RxHalfCpltCallback+0x144>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b41      	cmp	r3, #65	@ 0x41
 8002032:	d107      	bne.n	8002044 <HAL_UART_RxHalfCpltCallback+0x88>
 8002034:	4b32      	ldr	r3, [pc, #200]	@ (8002100 <HAL_UART_RxHalfCpltCallback+0x144>)
 8002036:	785b      	ldrb	r3, [r3, #1]
 8002038:	2b42      	cmp	r3, #66	@ 0x42
 800203a:	d103      	bne.n	8002044 <HAL_UART_RxHalfCpltCallback+0x88>
 800203c:	4b30      	ldr	r3, [pc, #192]	@ (8002100 <HAL_UART_RxHalfCpltCallback+0x144>)
 800203e:	789b      	ldrb	r3, [r3, #2]
 8002040:	2b43      	cmp	r3, #67	@ 0x43
 8002042:	d007      	beq.n	8002054 <HAL_UART_RxHalfCpltCallback+0x98>
		{
			HAL_UART_AbortReceive(&huart3);
 8002044:	482d      	ldr	r0, [pc, #180]	@ (80020fc <HAL_UART_RxHalfCpltCallback+0x140>)
 8002046:	f006 ff74 	bl	8008f32 <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 800204a:	222b      	movs	r2, #43	@ 0x2b
 800204c:	492c      	ldr	r1, [pc, #176]	@ (8002100 <HAL_UART_RxHalfCpltCallback+0x144>)
 800204e:	482b      	ldr	r0, [pc, #172]	@ (80020fc <HAL_UART_RxHalfCpltCallback+0x140>)
 8002050:	f006 ff4a 	bl	8008ee8 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart4)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a2b      	ldr	r2, [pc, #172]	@ (8002104 <HAL_UART_RxHalfCpltCallback+0x148>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d113      	bne.n	8002084 <HAL_UART_RxHalfCpltCallback+0xc8>
	{
		if(!(UART4_RX_BUFFER[0] == 'A' && UART4_RX_BUFFER[1] == 'B' && UART4_RX_BUFFER[2] == 'C'))
 800205c:	4b2a      	ldr	r3, [pc, #168]	@ (8002108 <HAL_UART_RxHalfCpltCallback+0x14c>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b41      	cmp	r3, #65	@ 0x41
 8002062:	d107      	bne.n	8002074 <HAL_UART_RxHalfCpltCallback+0xb8>
 8002064:	4b28      	ldr	r3, [pc, #160]	@ (8002108 <HAL_UART_RxHalfCpltCallback+0x14c>)
 8002066:	785b      	ldrb	r3, [r3, #1]
 8002068:	2b42      	cmp	r3, #66	@ 0x42
 800206a:	d103      	bne.n	8002074 <HAL_UART_RxHalfCpltCallback+0xb8>
 800206c:	4b26      	ldr	r3, [pc, #152]	@ (8002108 <HAL_UART_RxHalfCpltCallback+0x14c>)
 800206e:	789b      	ldrb	r3, [r3, #2]
 8002070:	2b43      	cmp	r3, #67	@ 0x43
 8002072:	d007      	beq.n	8002084 <HAL_UART_RxHalfCpltCallback+0xc8>
		{
			HAL_UART_AbortReceive(&huart4);
 8002074:	4823      	ldr	r0, [pc, #140]	@ (8002104 <HAL_UART_RxHalfCpltCallback+0x148>)
 8002076:	f006 ff5c 	bl	8008f32 <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 800207a:	2235      	movs	r2, #53	@ 0x35
 800207c:	4922      	ldr	r1, [pc, #136]	@ (8002108 <HAL_UART_RxHalfCpltCallback+0x14c>)
 800207e:	4821      	ldr	r0, [pc, #132]	@ (8002104 <HAL_UART_RxHalfCpltCallback+0x148>)
 8002080:	f006 ff32 	bl	8008ee8 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart5)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a21      	ldr	r2, [pc, #132]	@ (800210c <HAL_UART_RxHalfCpltCallback+0x150>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d113      	bne.n	80020b4 <HAL_UART_RxHalfCpltCallback+0xf8>
	{
		if(!(UART5_RX_BUFFER[0] == 'A' && UART5_RX_BUFFER[1] == 'B' && UART5_RX_BUFFER[2] == 'C'))
 800208c:	4b20      	ldr	r3, [pc, #128]	@ (8002110 <HAL_UART_RxHalfCpltCallback+0x154>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b41      	cmp	r3, #65	@ 0x41
 8002092:	d107      	bne.n	80020a4 <HAL_UART_RxHalfCpltCallback+0xe8>
 8002094:	4b1e      	ldr	r3, [pc, #120]	@ (8002110 <HAL_UART_RxHalfCpltCallback+0x154>)
 8002096:	785b      	ldrb	r3, [r3, #1]
 8002098:	2b42      	cmp	r3, #66	@ 0x42
 800209a:	d103      	bne.n	80020a4 <HAL_UART_RxHalfCpltCallback+0xe8>
 800209c:	4b1c      	ldr	r3, [pc, #112]	@ (8002110 <HAL_UART_RxHalfCpltCallback+0x154>)
 800209e:	789b      	ldrb	r3, [r3, #2]
 80020a0:	2b43      	cmp	r3, #67	@ 0x43
 80020a2:	d007      	beq.n	80020b4 <HAL_UART_RxHalfCpltCallback+0xf8>
		{
			HAL_UART_AbortReceive(&huart5);
 80020a4:	4819      	ldr	r0, [pc, #100]	@ (800210c <HAL_UART_RxHalfCpltCallback+0x150>)
 80020a6:	f006 ff44 	bl	8008f32 <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 80020aa:	2217      	movs	r2, #23
 80020ac:	4918      	ldr	r1, [pc, #96]	@ (8002110 <HAL_UART_RxHalfCpltCallback+0x154>)
 80020ae:	4817      	ldr	r0, [pc, #92]	@ (800210c <HAL_UART_RxHalfCpltCallback+0x150>)
 80020b0:	f006 ff1a 	bl	8008ee8 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart6)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a17      	ldr	r2, [pc, #92]	@ (8002114 <HAL_UART_RxHalfCpltCallback+0x158>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d113      	bne.n	80020e4 <HAL_UART_RxHalfCpltCallback+0x128>
	{
		if(!(UART6_RX_BUFFER[0] == 'A' && UART6_RX_BUFFER[1] == 'B' && UART6_RX_BUFFER[2] == 'C'))
 80020bc:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <HAL_UART_RxHalfCpltCallback+0x15c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b41      	cmp	r3, #65	@ 0x41
 80020c2:	d107      	bne.n	80020d4 <HAL_UART_RxHalfCpltCallback+0x118>
 80020c4:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <HAL_UART_RxHalfCpltCallback+0x15c>)
 80020c6:	785b      	ldrb	r3, [r3, #1]
 80020c8:	2b42      	cmp	r3, #66	@ 0x42
 80020ca:	d103      	bne.n	80020d4 <HAL_UART_RxHalfCpltCallback+0x118>
 80020cc:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <HAL_UART_RxHalfCpltCallback+0x15c>)
 80020ce:	789b      	ldrb	r3, [r3, #2]
 80020d0:	2b43      	cmp	r3, #67	@ 0x43
 80020d2:	d007      	beq.n	80020e4 <HAL_UART_RxHalfCpltCallback+0x128>
		{
			HAL_UART_AbortReceive(&huart6);
 80020d4:	480f      	ldr	r0, [pc, #60]	@ (8002114 <HAL_UART_RxHalfCpltCallback+0x158>)
 80020d6:	f006 ff2c 	bl	8008f32 <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 80020da:	2207      	movs	r2, #7
 80020dc:	490e      	ldr	r1, [pc, #56]	@ (8002118 <HAL_UART_RxHalfCpltCallback+0x15c>)
 80020de:	480d      	ldr	r0, [pc, #52]	@ (8002114 <HAL_UART_RxHalfCpltCallback+0x158>)
 80020e0:	f006 ff02 	bl	8008ee8 <HAL_UART_Receive_DMA>
		}
	}

}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000974 	.word	0x20000974
 80020f0:	2000040c 	.word	0x2000040c
 80020f4:	200009bc 	.word	0x200009bc
 80020f8:	20000444 	.word	0x20000444
 80020fc:	20000a04 	.word	0x20000a04
 8002100:	2000045c 	.word	0x2000045c
 8002104:	200008e4 	.word	0x200008e4
 8002108:	20000488 	.word	0x20000488
 800210c:	2000092c 	.word	0x2000092c
 8002110:	200004c0 	.word	0x200004c0
 8002114:	20000a4c 	.word	0x20000a4c
 8002118:	200004d8 	.word	0x200004d8

0800211c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //--- VGT ARM
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a25      	ldr	r2, [pc, #148]	@ (80021bc <HAL_UART_ErrorCallback+0xa0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d107      	bne.n	800213c <HAL_UART_ErrorCallback+0x20>
	{
		HAL_UART_AbortReceive(&huart1);
 800212c:	4823      	ldr	r0, [pc, #140]	@ (80021bc <HAL_UART_ErrorCallback+0xa0>)
 800212e:	f006 ff00 	bl	8008f32 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8002132:	2235      	movs	r2, #53	@ 0x35
 8002134:	4922      	ldr	r1, [pc, #136]	@ (80021c0 <HAL_UART_ErrorCallback+0xa4>)
 8002136:	4821      	ldr	r0, [pc, #132]	@ (80021bc <HAL_UART_ErrorCallback+0xa0>)
 8002138:	f006 fed6 	bl	8008ee8 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a21      	ldr	r2, [pc, #132]	@ (80021c4 <HAL_UART_ErrorCallback+0xa8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d107      	bne.n	8002154 <HAL_UART_ErrorCallback+0x38>
	{
		HAL_UART_AbortReceive(&huart2);
 8002144:	481f      	ldr	r0, [pc, #124]	@ (80021c4 <HAL_UART_ErrorCallback+0xa8>)
 8002146:	f006 fef4 	bl	8008f32 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
 800214a:	2217      	movs	r2, #23
 800214c:	491e      	ldr	r1, [pc, #120]	@ (80021c8 <HAL_UART_ErrorCallback+0xac>)
 800214e:	481d      	ldr	r0, [pc, #116]	@ (80021c4 <HAL_UART_ErrorCallback+0xa8>)
 8002150:	f006 feca 	bl	8008ee8 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart3)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a1d      	ldr	r2, [pc, #116]	@ (80021cc <HAL_UART_ErrorCallback+0xb0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d107      	bne.n	800216c <HAL_UART_ErrorCallback+0x50>
	{
		HAL_UART_AbortReceive(&huart3);
 800215c:	481b      	ldr	r0, [pc, #108]	@ (80021cc <HAL_UART_ErrorCallback+0xb0>)
 800215e:	f006 fee8 	bl	8008f32 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 8002162:	222b      	movs	r2, #43	@ 0x2b
 8002164:	491a      	ldr	r1, [pc, #104]	@ (80021d0 <HAL_UART_ErrorCallback+0xb4>)
 8002166:	4819      	ldr	r0, [pc, #100]	@ (80021cc <HAL_UART_ErrorCallback+0xb0>)
 8002168:	f006 febe 	bl	8008ee8 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart4)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a19      	ldr	r2, [pc, #100]	@ (80021d4 <HAL_UART_ErrorCallback+0xb8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d107      	bne.n	8002184 <HAL_UART_ErrorCallback+0x68>
	{
		HAL_UART_AbortReceive(&huart4);
 8002174:	4817      	ldr	r0, [pc, #92]	@ (80021d4 <HAL_UART_ErrorCallback+0xb8>)
 8002176:	f006 fedc 	bl	8008f32 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 800217a:	2235      	movs	r2, #53	@ 0x35
 800217c:	4916      	ldr	r1, [pc, #88]	@ (80021d8 <HAL_UART_ErrorCallback+0xbc>)
 800217e:	4815      	ldr	r0, [pc, #84]	@ (80021d4 <HAL_UART_ErrorCallback+0xb8>)
 8002180:	f006 feb2 	bl	8008ee8 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart5)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a15      	ldr	r2, [pc, #84]	@ (80021dc <HAL_UART_ErrorCallback+0xc0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d107      	bne.n	800219c <HAL_UART_ErrorCallback+0x80>
	{
		HAL_UART_AbortReceive(&huart5);
 800218c:	4813      	ldr	r0, [pc, #76]	@ (80021dc <HAL_UART_ErrorCallback+0xc0>)
 800218e:	f006 fed0 	bl	8008f32 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 8002192:	2217      	movs	r2, #23
 8002194:	4912      	ldr	r1, [pc, #72]	@ (80021e0 <HAL_UART_ErrorCallback+0xc4>)
 8002196:	4811      	ldr	r0, [pc, #68]	@ (80021dc <HAL_UART_ErrorCallback+0xc0>)
 8002198:	f006 fea6 	bl	8008ee8 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart6)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a11      	ldr	r2, [pc, #68]	@ (80021e4 <HAL_UART_ErrorCallback+0xc8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d107      	bne.n	80021b4 <HAL_UART_ErrorCallback+0x98>
	{
		HAL_UART_AbortReceive(&huart6);
 80021a4:	480f      	ldr	r0, [pc, #60]	@ (80021e4 <HAL_UART_ErrorCallback+0xc8>)
 80021a6:	f006 fec4 	bl	8008f32 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 80021aa:	2207      	movs	r2, #7
 80021ac:	490e      	ldr	r1, [pc, #56]	@ (80021e8 <HAL_UART_ErrorCallback+0xcc>)
 80021ae:	480d      	ldr	r0, [pc, #52]	@ (80021e4 <HAL_UART_ErrorCallback+0xc8>)
 80021b0:	f006 fe9a 	bl	8008ee8 <HAL_UART_Receive_DMA>

	}

}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000974 	.word	0x20000974
 80021c0:	2000040c 	.word	0x2000040c
 80021c4:	200009bc 	.word	0x200009bc
 80021c8:	20000444 	.word	0x20000444
 80021cc:	20000a04 	.word	0x20000a04
 80021d0:	2000045c 	.word	0x2000045c
 80021d4:	200008e4 	.word	0x200008e4
 80021d8:	20000488 	.word	0x20000488
 80021dc:	2000092c 	.word	0x2000092c
 80021e0:	200004c0 	.word	0x200004c0
 80021e4:	20000a4c 	.word	0x20000a4c
 80021e8:	200004d8 	.word	0x200004d8

080021ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021f0:	f002 fb90 	bl	8004914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021f4:	f000 f842 	bl	800227c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f8:	f7ff f8b4 	bl	8001364 <MX_GPIO_Init>
  MX_DMA_Init();
 80021fc:	f7ff f82c 	bl	8001258 <MX_DMA_Init>
  MX_ADC1_Init();
 8002200:	f7fe fe9a 	bl	8000f38 <MX_ADC1_Init>
  MX_CAN1_Init();
 8002204:	f7fe ff66 	bl	80010d4 <MX_CAN1_Init>
  MX_I2C1_Init();
 8002208:	f7ff f962 	bl	80014d0 <MX_I2C1_Init>
  MX_I2C3_Init();
 800220c:	f7ff f98e 	bl	800152c <MX_I2C3_Init>
  MX_TIM1_Init();
 8002210:	f000 fcf0 	bl	8002bf4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002214:	f000 fd46 	bl	8002ca4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002218:	f000 fd98 	bl	8002d4c <MX_TIM3_Init>
  MX_TIM4_Init();
 800221c:	f000 fdea 	bl	8002df4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002220:	f000 fe3c 	bl	8002e9c <MX_TIM5_Init>
  MX_TIM8_Init();
 8002224:	f000 fed4 	bl	8002fd0 <MX_TIM8_Init>
  MX_TIM9_Init();
 8002228:	f000 ff56 	bl	80030d8 <MX_TIM9_Init>
  MX_TIM10_Init();
 800222c:	f000 ffa4 	bl	8003178 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002230:	f000 fff0 	bl	8003214 <MX_TIM11_Init>
  MX_TIM12_Init();
 8002234:	f001 f83c 	bl	80032b0 <MX_TIM12_Init>
  MX_TIM13_Init();
 8002238:	f001 f88a 	bl	8003350 <MX_TIM13_Init>
  MX_UART4_Init();
 800223c:	f001 fd12 	bl	8003c64 <MX_UART4_Init>
  MX_UART5_Init();
 8002240:	f001 fd3a 	bl	8003cb8 <MX_UART5_Init>
  MX_TIM6_Init();
 8002244:	f000 fe8e 	bl	8002f64 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8002248:	f001 fd8a 	bl	8003d60 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800224c:	f001 fd5e 	bl	8003d0c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002250:	f001 fdb0 	bl	8003db4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8002254:	f001 fdd8 	bl	8003e08 <MX_USART6_UART_Init>
  MX_LWIP_Init();
 8002258:	f008 f80e 	bl	800a278 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  Robot_Init();
 800225c:	f7ff fa4c 	bl	80016f8 <Robot_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(udp_cnt >= 1)
 8002260:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <main+0x8c>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0fb      	beq.n	8002260 <main+0x74>
	  {
		  MX_LWIP_Process();
 8002268:	f008 f946 	bl	800a4f8 <MX_LWIP_Process>
		  udpClient_send();
 800226c:	f001 fc9e 	bl	8003bac <udpClient_send>
		  udp_cnt = 0;
 8002270:	4b01      	ldr	r3, [pc, #4]	@ (8002278 <main+0x8c>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
	  if(udp_cnt >= 1)
 8002276:	e7f3      	b.n	8002260 <main+0x74>
 8002278:	2000025c 	.word	0x2000025c

0800227c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b094      	sub	sp, #80	@ 0x50
 8002280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002282:	f107 0320 	add.w	r3, r7, #32
 8002286:	2230      	movs	r2, #48	@ 0x30
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f012 ff19 	bl	80150c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	4b28      	ldr	r3, [pc, #160]	@ (8002348 <SystemClock_Config+0xcc>)
 80022a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a8:	4a27      	ldr	r2, [pc, #156]	@ (8002348 <SystemClock_Config+0xcc>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b0:	4b25      	ldr	r3, [pc, #148]	@ (8002348 <SystemClock_Config+0xcc>)
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022bc:	2300      	movs	r3, #0
 80022be:	607b      	str	r3, [r7, #4]
 80022c0:	4b22      	ldr	r3, [pc, #136]	@ (800234c <SystemClock_Config+0xd0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a21      	ldr	r2, [pc, #132]	@ (800234c <SystemClock_Config+0xd0>)
 80022c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b1f      	ldr	r3, [pc, #124]	@ (800234c <SystemClock_Config+0xd0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022d8:	2301      	movs	r3, #1
 80022da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e2:	2302      	movs	r3, #2
 80022e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022ec:	2304      	movs	r3, #4
 80022ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80022f0:	23a8      	movs	r3, #168	@ 0xa8
 80022f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022f4:	2302      	movs	r3, #2
 80022f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022f8:	2304      	movs	r3, #4
 80022fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022fc:	f107 0320 	add.w	r3, r7, #32
 8002300:	4618      	mov	r0, r3
 8002302:	f005 f849 	bl	8007398 <HAL_RCC_OscConfig>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800230c:	f000 f820 	bl	8002350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002310:	230f      	movs	r3, #15
 8002312:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002314:	2302      	movs	r3, #2
 8002316:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800231c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002320:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002322:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002326:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	2105      	movs	r1, #5
 800232e:	4618      	mov	r0, r3
 8002330:	f005 faaa 	bl	8007888 <HAL_RCC_ClockConfig>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800233a:	f000 f809 	bl	8002350 <Error_Handler>
  }
}
 800233e:	bf00      	nop
 8002340:	3750      	adds	r7, #80	@ 0x50
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800
 800234c:	40007000 	.word	0x40007000

08002350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002354:	b672      	cpsid	i
}
 8002356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <Error_Handler+0x8>

0800235c <Motor_Init>:
void Motor_Init(Motor_t *uMotor,
               GPIO_TypeDef *GPIO_A, uint16_t GPIO_PIN_A,
               GPIO_TypeDef *GPIO_B, uint16_t GPIO_PIN_B,
               TIM_HandleTypeDef *htimx, uint32_t channel,
               uint8_t reversed)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	80fb      	strh	r3, [r7, #6]
	uMotor -> GPIO_A 		= GPIO_A;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	601a      	str	r2, [r3, #0]
	uMotor -> GPIO_PIN_A 	= GPIO_PIN_A;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	88fa      	ldrh	r2, [r7, #6]
 8002376:	809a      	strh	r2, [r3, #4]
	uMotor -> GPIO_B 		= GPIO_B;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	609a      	str	r2, [r3, #8]
	uMotor -> GPIO_PIN_B 	= GPIO_PIN_B;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8b3a      	ldrh	r2, [r7, #24]
 8002382:	819a      	strh	r2, [r3, #12]
	uMotor -> htimx 		= htimx;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	611a      	str	r2, [r3, #16]
	uMotor -> channel 		= channel;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a3a      	ldr	r2, [r7, #32]
 800238e:	615a      	str	r2, [r3, #20]
	uMotor -> reversed 		= reversed;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002396:	761a      	strb	r2, [r3, #24]

	HAL_TIM_PWM_Start(uMotor->htimx, uMotor->channel);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	4619      	mov	r1, r3
 80023a2:	4610      	mov	r0, r2
 80023a4:	f005 fda0 	bl	8007ee8 <HAL_TIM_PWM_Start>

	return;
 80023a8:	bf00      	nop
}
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <Motor_Run>:


void Motor_Run(Motor_t *uMotor, int16_t speed)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
    if(uMotor -> reversed)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	7e1b      	ldrb	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <Motor_Run+0x1c>
    {
        speed = -speed;
 80023c4:	887b      	ldrh	r3, [r7, #2]
 80023c6:	425b      	negs	r3, r3
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	807b      	strh	r3, [r7, #2]
    }

	uint8_t dir_a = (speed >= 0);
 80023cc:	887b      	ldrh	r3, [r7, #2]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	0bdb      	lsrs	r3, r3, #15
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	73fb      	strb	r3, [r7, #15]
	uint8_t dir_b = (speed <  0);
 80023d8:	887b      	ldrh	r3, [r7, #2]
 80023da:	0bdb      	lsrs	r3, r3, #15
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	73bb      	strb	r3, [r7, #14]
	speed = abs(speed);
 80023e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bfb8      	it	lt
 80023e8:	425b      	neglt	r3, r3
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(uMotor -> GPIO_A, uMotor -> GPIO_PIN_A, dir_a);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	889b      	ldrh	r3, [r3, #4]
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	4619      	mov	r1, r3
 80023fa:	f004 fe6f 	bl	80070dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(uMotor -> GPIO_B, uMotor -> GPIO_PIN_B, dir_b);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6898      	ldr	r0, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	899b      	ldrh	r3, [r3, #12]
 8002406:	7bba      	ldrb	r2, [r7, #14]
 8002408:	4619      	mov	r1, r3
 800240a:	f004 fe67 	bl	80070dc <HAL_GPIO_WritePin>

	switch (uMotor->channel)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b0c      	cmp	r3, #12
 8002414:	d838      	bhi.n	8002488 <Motor_Run+0xd8>
 8002416:	a201      	add	r2, pc, #4	@ (adr r2, 800241c <Motor_Run+0x6c>)
 8002418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241c:	08002451 	.word	0x08002451
 8002420:	08002489 	.word	0x08002489
 8002424:	08002489 	.word	0x08002489
 8002428:	08002489 	.word	0x08002489
 800242c:	0800245f 	.word	0x0800245f
 8002430:	08002489 	.word	0x08002489
 8002434:	08002489 	.word	0x08002489
 8002438:	08002489 	.word	0x08002489
 800243c:	0800246d 	.word	0x0800246d
 8002440:	08002489 	.word	0x08002489
 8002444:	08002489 	.word	0x08002489
 8002448:	08002489 	.word	0x08002489
 800244c:	0800247b 	.word	0x0800247b
	{
		case TIM_CHANNEL_1:
			uMotor -> htimx -> Instance -> CCR1 = speed;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800245a:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800245c:	e015      	b.n	800248a <Motor_Run+0xda>
		case TIM_CHANNEL_2:
			uMotor -> htimx -> Instance -> CCR2 = speed;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002468:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 800246a:	e00e      	b.n	800248a <Motor_Run+0xda>
		case TIM_CHANNEL_3:
			uMotor -> htimx -> Instance -> CCR3 = speed;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002476:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8002478:	e007      	b.n	800248a <Motor_Run+0xda>
		case TIM_CHANNEL_4:
			uMotor -> htimx -> Instance -> CCR4 = speed;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8002486:	e000      	b.n	800248a <Motor_Run+0xda>
		default:
			break;
 8002488:	bf00      	nop
	}

	return;
 800248a:	bf00      	nop
}
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop

08002494 <Encoder_Init>:


void Encoder_Init(Encoder_t *uEncoder, TIM_HandleTypeDef *htimx, uint8_t reversed)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	4613      	mov	r3, r2
 80024a0:	71fb      	strb	r3, [r7, #7]
	uEncoder -> htimx 		= htimx;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	601a      	str	r2, [r3, #0]
	uEncoder -> reversed 	= reversed;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	79fa      	ldrb	r2, [r7, #7]
 80024ac:	719a      	strb	r2, [r3, #6]

	HAL_TIM_Encoder_Start(uEncoder->htimx, TIM_CHANNEL_ALL);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	213c      	movs	r1, #60	@ 0x3c
 80024b4:	4618      	mov	r0, r3
 80024b6:	f005 fe85 	bl	80081c4 <HAL_TIM_Encoder_Start>

	return;
 80024ba:	bf00      	nop
}
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <Encoder_GetCount>:


void Encoder_GetCount(Encoder_t *uEncoder)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
	if(uEncoder -> reversed)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	799b      	ldrb	r3, [r3, #6]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <Encoder_GetCount+0x26>
	{
		uEncoder -> count = -(uEncoder -> htimx -> Instance -> CNT);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	b29b      	uxth	r3, r3
 80024dc:	425b      	negs	r3, r3
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b21a      	sxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	809a      	strh	r2, [r3, #4]
	else
	{
		uEncoder -> count = uEncoder -> htimx -> Instance -> CNT;
	}

	return;
 80024e6:	e007      	b.n	80024f8 <Encoder_GetCount+0x36>
		uEncoder -> count = uEncoder -> htimx -> Instance -> CNT;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	b21a      	sxth	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	809a      	strh	r2, [r3, #4]
	return;
 80024f6:	bf00      	nop
}
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <Encoder_ResetCount>:


void Encoder_ResetCount(Encoder_t *uEncoder)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
	uEncoder -> htimx -> Instance -> CNT = 0;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24

	return;
 8002514:	bf00      	nop
}
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <Kinematics_Triangle>:


int16_t Kinematics_Triangle(Motor_e eMotor, int16_t vx, int16_t vy, int16_t vw)
{
 8002520:	b5b0      	push	{r4, r5, r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	4604      	mov	r4, r0
 8002528:	4608      	mov	r0, r1
 800252a:	4611      	mov	r1, r2
 800252c:	461a      	mov	r2, r3
 800252e:	4623      	mov	r3, r4
 8002530:	71fb      	strb	r3, [r7, #7]
 8002532:	4603      	mov	r3, r0
 8002534:	80bb      	strh	r3, [r7, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	807b      	strh	r3, [r7, #2]
 800253a:	4613      	mov	r3, r2
 800253c:	803b      	strh	r3, [r7, #0]
	switch(eMotor)
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d042      	beq.n	80025ca <Kinematics_Triangle+0xaa>
 8002544:	2b02      	cmp	r3, #2
 8002546:	dc76      	bgt.n	8002636 <Kinematics_Triangle+0x116>
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <Kinematics_Triangle+0x32>
 800254c:	2b01      	cmp	r3, #1
 800254e:	d006      	beq.n	800255e <Kinematics_Triangle+0x3e>
 8002550:	e071      	b.n	8002636 <Kinematics_Triangle+0x116>
	{
		case MOTOR_A:
			return vx + vw;
 8002552:	88ba      	ldrh	r2, [r7, #4]
 8002554:	883b      	ldrh	r3, [r7, #0]
 8002556:	4413      	add	r3, r2
 8002558:	b29b      	uxth	r3, r3
 800255a:	b21b      	sxth	r3, r3
 800255c:	e06c      	b.n	8002638 <Kinematics_Triangle+0x118>
		case MOTOR_B:
			return (-0.5 * vx) + (0.866025 * vy) + vw;
 800255e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fd ffd6 	bl	8000514 <__aeabi_i2d>
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	4b36      	ldr	r3, [pc, #216]	@ (8002648 <Kinematics_Triangle+0x128>)
 800256e:	f7fe f83b 	bl	80005e8 <__aeabi_dmul>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4614      	mov	r4, r2
 8002578:	461d      	mov	r5, r3
 800257a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fd ffc8 	bl	8000514 <__aeabi_i2d>
 8002584:	a32e      	add	r3, pc, #184	@ (adr r3, 8002640 <Kinematics_Triangle+0x120>)
 8002586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258a:	f7fe f82d 	bl	80005e8 <__aeabi_dmul>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4620      	mov	r0, r4
 8002594:	4629      	mov	r1, r5
 8002596:	f7fd fe71 	bl	800027c <__adddf3>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4614      	mov	r4, r2
 80025a0:	461d      	mov	r5, r3
 80025a2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fd ffb4 	bl	8000514 <__aeabi_i2d>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4620      	mov	r0, r4
 80025b2:	4629      	mov	r1, r5
 80025b4:	f7fd fe62 	bl	800027c <__adddf3>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	f7fe faac 	bl	8000b1c <__aeabi_d2iz>
 80025c4:	4603      	mov	r3, r0
 80025c6:	b21b      	sxth	r3, r3
 80025c8:	e036      	b.n	8002638 <Kinematics_Triangle+0x118>
		case MOTOR_C:
			return (-0.5 * vx) - (0.866025 * vy) + vw;
 80025ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ffa0 	bl	8000514 <__aeabi_i2d>
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002648 <Kinematics_Triangle+0x128>)
 80025da:	f7fe f805 	bl	80005e8 <__aeabi_dmul>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4614      	mov	r4, r2
 80025e4:	461d      	mov	r5, r3
 80025e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ff92 	bl	8000514 <__aeabi_i2d>
 80025f0:	a313      	add	r3, pc, #76	@ (adr r3, 8002640 <Kinematics_Triangle+0x120>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fd fff7 	bl	80005e8 <__aeabi_dmul>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4620      	mov	r0, r4
 8002600:	4629      	mov	r1, r5
 8002602:	f7fd fe39 	bl	8000278 <__aeabi_dsub>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4614      	mov	r4, r2
 800260c:	461d      	mov	r5, r3
 800260e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd ff7e 	bl	8000514 <__aeabi_i2d>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4620      	mov	r0, r4
 800261e:	4629      	mov	r1, r5
 8002620:	f7fd fe2c 	bl	800027c <__adddf3>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	f7fe fa76 	bl	8000b1c <__aeabi_d2iz>
 8002630:	4603      	mov	r3, r0
 8002632:	b21b      	sxth	r3, r3
 8002634:	e000      	b.n	8002638 <Kinematics_Triangle+0x118>
		case MOTOR_D:
		case MOTOR_E:
		case MOTOR_F:
		case MOTOR_G:
		default:
			return 0;
 8002636:	2300      	movs	r3, #0
	}
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bdb0      	pop	{r4, r5, r7, pc}
 8002640:	0f9096bc 	.word	0x0f9096bc
 8002644:	3febb67a 	.word	0x3febb67a
 8002648:	bfe00000 	.word	0xbfe00000

0800264c <PID_Init>:

#include "pid.h"

/* Functions */
void PID_Init(PID_t *uPID, float kp, float ki, float kd)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	ed87 0a02 	vstr	s0, [r7, #8]
 8002658:	edc7 0a01 	vstr	s1, [r7, #4]
 800265c:	ed87 1a00 	vstr	s2, [r7]
	uPID -> kp = kp;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	601a      	str	r2, [r3, #0]
	uPID -> ki = ki;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	605a      	str	r2, [r3, #4]
	uPID -> kd = kd;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	609a      	str	r2, [r3, #8]

	uPID -> proportional 	= 0;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	60da      	str	r2, [r3, #12]
	uPID -> integral 		= 0;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
	uPID -> derivative 		= 0;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	615a      	str	r2, [r3, #20]

	uPID -> error 			= 0;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
	uPID -> prev_error 		= 0;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	61da      	str	r2, [r3, #28]
	uPID -> setpoint 		= 0;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	621a      	str	r2, [r3, #32]
	uPID -> feedback		= 0;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	625a      	str	r2, [r3, #36]	@ 0x24

	uPID -> max_output		= 0;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	629a      	str	r2, [r3, #40]	@ 0x28
	uPID -> output			= 0;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	62da      	str	r2, [r3, #44]	@ 0x2c

	return;
 80026ba:	bf00      	nop
}
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <PID_Update>:


void PID_Update(PID_t *uPID, float setpoint, float feedback, float max_output)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	ed87 0a02 	vstr	s0, [r7, #8]
 80026d2:	edc7 0a01 	vstr	s1, [r7, #4]
 80026d6:	ed87 1a00 	vstr	s2, [r7]
	uPID->setpoint 		= setpoint;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	621a      	str	r2, [r3, #32]
	uPID->feedback 		= feedback;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	625a      	str	r2, [r3, #36]	@ 0x24
	uPID->max_output 	= max_output;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	629a      	str	r2, [r3, #40]	@ 0x28

	uPID->error = uPID->setpoint - uPID->feedback;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	ed93 7a08 	vldr	s14, [r3, #32]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80026f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	edc3 7a06 	vstr	s15, [r3, #24]
//	    if(uPID->error > 180) 			{ setpoint -= 360; }
//	    else if(uPID->error < -180) 	{ setpoint += 360; }
//	    uPID->error = setpoint - feedback;
//	}

	uPID->proportional = uPID->kp * uPID->error;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	ed93 7a00 	vldr	s14, [r3]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	edd3 7a06 	vldr	s15, [r3, #24]
 800270e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	edc3 7a03 	vstr	s15, [r3, #12]
	uPID->integral    += uPID->ki * uPID->error;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	ed93 7a04 	vldr	s14, [r3, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	edd3 6a01 	vldr	s13, [r3, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	edd3 7a06 	vldr	s15, [r3, #24]
 800272a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	edc3 7a04 	vstr	s15, [r3, #16]
	uPID->derivative   = uPID->kd * (uPID->error - uPID->prev_error);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	ed93 7a02 	vldr	s14, [r3, #8]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	edd3 6a06 	vldr	s13, [r3, #24]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	edd3 7a07 	vldr	s15, [r3, #28]
 800274a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800274e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	edc3 7a05 	vstr	s15, [r3, #20]
	uPID->prev_error   = uPID->error;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	699a      	ldr	r2, [r3, #24]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	61da      	str	r2, [r3, #28]

	if(uPID->integral >= uPID->max_output) 			{ uPID->integral =   uPID->max_output;  }
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	ed93 7a04 	vldr	s14, [r3, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800276c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002774:	db04      	blt.n	8002780 <PID_Update+0xba>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	611a      	str	r2, [r3, #16]
 800277e:	e014      	b.n	80027aa <PID_Update+0xe4>
	else if(uPID->integral < -(uPID->max_output)) 	{ uPID->integral = -(uPID->max_output); }
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	ed93 7a04 	vldr	s14, [r3, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800278c:	eef1 7a67 	vneg.f32	s15, s15
 8002790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002798:	d507      	bpl.n	80027aa <PID_Update+0xe4>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80027a0:	eef1 7a67 	vneg.f32	s15, s15
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	edc3 7a04 	vstr	s15, [r3, #16]

	uPID->output = (uPID->proportional) + (uPID->integral) + (uPID->derivative);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	ed93 7a03 	vldr	s14, [r3, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80027b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	edd3 7a05 	vldr	s15, [r3, #20]
 80027c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	if(uPID->output >= uPID->max_output) 			{ uPID->output =   uPID->max_output;  }
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80027d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027de:	db04      	blt.n	80027ea <PID_Update+0x124>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }

	return;
 80027e8:	e016      	b.n	8002818 <PID_Update+0x152>
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80027f6:	eef1 7a67 	vneg.f32	s15, s15
 80027fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002802:	d400      	bmi.n	8002806 <PID_Update+0x140>
	return;
 8002804:	e008      	b.n	8002818 <PID_Update+0x152>
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800280c:	eef1 7a67 	vneg.f32	s15, s15
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	return;
 8002816:	bf00      	nop
}
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <HAL_MspInit+0x4c>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	4a0f      	ldr	r2, [pc, #60]	@ (8002870 <HAL_MspInit+0x4c>)
 8002834:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002838:	6453      	str	r3, [r2, #68]	@ 0x44
 800283a:	4b0d      	ldr	r3, [pc, #52]	@ (8002870 <HAL_MspInit+0x4c>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <HAL_MspInit+0x4c>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	4a08      	ldr	r2, [pc, #32]	@ (8002870 <HAL_MspInit+0x4c>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002854:	6413      	str	r3, [r2, #64]	@ 0x40
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_MspInit+0x4c>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800

08002874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <NMI_Handler+0x4>

0800287c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <HardFault_Handler+0x4>

08002884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <MemManage_Handler+0x4>

0800288c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002890:	bf00      	nop
 8002892:	e7fd      	b.n	8002890 <BusFault_Handler+0x4>

08002894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <UsageFault_Handler+0x4>

0800289c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ca:	f002 f875 	bl	80049b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80028d8:	4802      	ldr	r0, [pc, #8]	@ (80028e4 <DMA1_Stream0_IRQHandler+0x10>)
 80028da:	f002 feb9 	bl	8005650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000b54 	.word	0x20000b54

080028e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80028ec:	4802      	ldr	r0, [pc, #8]	@ (80028f8 <DMA1_Stream1_IRQHandler+0x10>)
 80028ee:	f002 feaf 	bl	8005650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000d94 	.word	0x20000d94

080028fc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002900:	4802      	ldr	r0, [pc, #8]	@ (800290c <DMA1_Stream2_IRQHandler+0x10>)
 8002902:	f002 fea5 	bl	8005650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000a94 	.word	0x20000a94

08002910 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002914:	4802      	ldr	r0, [pc, #8]	@ (8002920 <DMA1_Stream3_IRQHandler+0x10>)
 8002916:	f002 fe9b 	bl	8005650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000df4 	.word	0x20000df4

08002924 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002928:	4802      	ldr	r0, [pc, #8]	@ (8002934 <DMA1_Stream4_IRQHandler+0x10>)
 800292a:	f002 fe91 	bl	8005650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000af4 	.word	0x20000af4

08002938 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800293c:	4802      	ldr	r0, [pc, #8]	@ (8002948 <DMA1_Stream5_IRQHandler+0x10>)
 800293e:	f002 fe87 	bl	8005650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000cd4 	.word	0x20000cd4

0800294c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002950:	4802      	ldr	r0, [pc, #8]	@ (800295c <DMA1_Stream6_IRQHandler+0x10>)
 8002952:	f002 fe7d 	bl	8005650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000d34 	.word	0x20000d34

08002960 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002964:	4802      	ldr	r0, [pc, #8]	@ (8002970 <USART1_IRQHandler+0x10>)
 8002966:	f006 fb87 	bl	8009078 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000974 	.word	0x20000974

08002974 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002978:	4802      	ldr	r0, [pc, #8]	@ (8002984 <USART2_IRQHandler+0x10>)
 800297a:	f006 fb7d 	bl	8009078 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200009bc 	.word	0x200009bc

08002988 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800298c:	4802      	ldr	r0, [pc, #8]	@ (8002998 <USART3_IRQHandler+0x10>)
 800298e:	f006 fb73 	bl	8009078 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000a04 	.word	0x20000a04

0800299c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80029a0:	4802      	ldr	r0, [pc, #8]	@ (80029ac <DMA1_Stream7_IRQHandler+0x10>)
 80029a2:	f002 fe55 	bl	8005650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000bb4 	.word	0x20000bb4

080029b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80029b4:	4802      	ldr	r0, [pc, #8]	@ (80029c0 <UART4_IRQHandler+0x10>)
 80029b6:	f006 fb5f 	bl	8009078 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200008e4 	.word	0x200008e4

080029c4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80029c8:	4802      	ldr	r0, [pc, #8]	@ (80029d4 <UART5_IRQHandler+0x10>)
 80029ca:	f006 fb55 	bl	8009078 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	2000092c 	.word	0x2000092c

080029d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029dc:	4802      	ldr	r0, [pc, #8]	@ (80029e8 <TIM6_DAC_IRQHandler+0x10>)
 80029de:	f005 fc7f 	bl	80082e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000670 	.word	0x20000670

080029ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80029f0:	4802      	ldr	r0, [pc, #8]	@ (80029fc <DMA2_Stream1_IRQHandler+0x10>)
 80029f2:	f002 fe2d 	bl	8005650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000e54 	.word	0x20000e54

08002a00 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002a04:	4802      	ldr	r0, [pc, #8]	@ (8002a10 <DMA2_Stream2_IRQHandler+0x10>)
 8002a06:	f002 fe23 	bl	8005650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000c14 	.word	0x20000c14

08002a14 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002a18:	4802      	ldr	r0, [pc, #8]	@ (8002a24 <DMA2_Stream6_IRQHandler+0x10>)
 8002a1a:	f002 fe19 	bl	8005650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000eb4 	.word	0x20000eb4

08002a28 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002a2c:	4802      	ldr	r0, [pc, #8]	@ (8002a38 <DMA2_Stream7_IRQHandler+0x10>)
 8002a2e:	f002 fe0f 	bl	8005650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000c74 	.word	0x20000c74

08002a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return 1;
 8002a40:	2301      	movs	r3, #1
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_kill>:

int _kill(int pid, int sig)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a56:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <_kill+0x20>)
 8002a58:	2216      	movs	r2, #22
 8002a5a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	2000b504 	.word	0x2000b504

08002a70 <_exit>:

void _exit (int status)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ffe5 	bl	8002a4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a82:	bf00      	nop
 8002a84:	e7fd      	b.n	8002a82 <_exit+0x12>

08002a86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e00a      	b.n	8002aae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a98:	f3af 8000 	nop.w
 8002a9c:	4601      	mov	r1, r0
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	60ba      	str	r2, [r7, #8]
 8002aa4:	b2ca      	uxtb	r2, r1
 8002aa6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	dbf0      	blt.n	8002a98 <_read+0x12>
  }

  return len;
 8002ab6:	687b      	ldr	r3, [r7, #4]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e009      	b.n	8002ae6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	60ba      	str	r2, [r7, #8]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	dbf1      	blt.n	8002ad2 <_write+0x12>
  }
  return len;
 8002aee:	687b      	ldr	r3, [r7, #4]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <_close>:

int _close(int file)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b20:	605a      	str	r2, [r3, #4]
  return 0;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_isatty>:

int _isatty(int file)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b38:	2301      	movs	r3, #1
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b68:	4a14      	ldr	r2, [pc, #80]	@ (8002bbc <_sbrk+0x5c>)
 8002b6a:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <_sbrk+0x60>)
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b74:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <_sbrk+0x64>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <_sbrk+0x64>)
 8002b7e:	4a12      	ldr	r2, [pc, #72]	@ (8002bc8 <_sbrk+0x68>)
 8002b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b82:	4b10      	ldr	r3, [pc, #64]	@ (8002bc4 <_sbrk+0x64>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d205      	bcs.n	8002b9c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002b90:	4b0e      	ldr	r3, [pc, #56]	@ (8002bcc <_sbrk+0x6c>)
 8002b92:	220c      	movs	r2, #12
 8002b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b9a:	e009      	b.n	8002bb0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b9c:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <_sbrk+0x64>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ba2:	4b08      	ldr	r3, [pc, #32]	@ (8002bc4 <_sbrk+0x64>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	4a06      	ldr	r2, [pc, #24]	@ (8002bc4 <_sbrk+0x64>)
 8002bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bae:	68fb      	ldr	r3, [r7, #12]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	20020000 	.word	0x20020000
 8002bc0:	00000400 	.word	0x00000400
 8002bc4:	20000504 	.word	0x20000504
 8002bc8:	2000b518 	.word	0x2000b518
 8002bcc:	2000b504 	.word	0x2000b504

08002bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <SystemInit+0x20>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bda:	4a05      	ldr	r2, [pc, #20]	@ (8002bf0 <SystemInit+0x20>)
 8002bdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002be0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	@ 0x30
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bfa:	f107 030c 	add.w	r3, r7, #12
 8002bfe:	2224      	movs	r2, #36	@ 0x24
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f012 fa5d 	bl	80150c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c10:	4b22      	ldr	r3, [pc, #136]	@ (8002c9c <MX_TIM1_Init+0xa8>)
 8002c12:	4a23      	ldr	r2, [pc, #140]	@ (8002ca0 <MX_TIM1_Init+0xac>)
 8002c14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002c16:	4b21      	ldr	r3, [pc, #132]	@ (8002c9c <MX_TIM1_Init+0xa8>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c9c <MX_TIM1_Init+0xa8>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002c22:	4b1e      	ldr	r3, [pc, #120]	@ (8002c9c <MX_TIM1_Init+0xa8>)
 8002c24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c9c <MX_TIM1_Init+0xa8>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c30:	4b1a      	ldr	r3, [pc, #104]	@ (8002c9c <MX_TIM1_Init+0xa8>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c36:	4b19      	ldr	r3, [pc, #100]	@ (8002c9c <MX_TIM1_Init+0xa8>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c44:	2301      	movs	r3, #1
 8002c46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c50:	2300      	movs	r3, #0
 8002c52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c54:	2301      	movs	r3, #1
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002c60:	f107 030c 	add.w	r3, r7, #12
 8002c64:	4619      	mov	r1, r3
 8002c66:	480d      	ldr	r0, [pc, #52]	@ (8002c9c <MX_TIM1_Init+0xa8>)
 8002c68:	f005 fa06 	bl	8008078 <HAL_TIM_Encoder_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002c72:	f7ff fb6d 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	4806      	ldr	r0, [pc, #24]	@ (8002c9c <MX_TIM1_Init+0xa8>)
 8002c84:	f005 ff82 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002c8e:	f7ff fb5f 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002c92:	bf00      	nop
 8002c94:	3730      	adds	r7, #48	@ 0x30
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000508 	.word	0x20000508
 8002ca0:	40010000 	.word	0x40010000

08002ca4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08c      	sub	sp, #48	@ 0x30
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002caa:	f107 030c 	add.w	r3, r7, #12
 8002cae:	2224      	movs	r2, #36	@ 0x24
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f012 fa05 	bl	80150c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb8:	1d3b      	adds	r3, r7, #4
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cc0:	4b21      	ldr	r3, [pc, #132]	@ (8002d48 <MX_TIM2_Init+0xa4>)
 8002cc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d48 <MX_TIM2_Init+0xa4>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cce:	4b1e      	ldr	r3, [pc, #120]	@ (8002d48 <MX_TIM2_Init+0xa4>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d48 <MX_TIM2_Init+0xa4>)
 8002cd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d48 <MX_TIM2_Init+0xa4>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce2:	4b19      	ldr	r3, [pc, #100]	@ (8002d48 <MX_TIM2_Init+0xa4>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cec:	2300      	movs	r3, #0
 8002cee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d00:	2301      	movs	r3, #1
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002d0c:	f107 030c 	add.w	r3, r7, #12
 8002d10:	4619      	mov	r1, r3
 8002d12:	480d      	ldr	r0, [pc, #52]	@ (8002d48 <MX_TIM2_Init+0xa4>)
 8002d14:	f005 f9b0 	bl	8008078 <HAL_TIM_Encoder_Init>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002d1e:	f7ff fb17 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d22:	2300      	movs	r3, #0
 8002d24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4806      	ldr	r0, [pc, #24]	@ (8002d48 <MX_TIM2_Init+0xa4>)
 8002d30:	f005 ff2c 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002d3a:	f7ff fb09 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d3e:	bf00      	nop
 8002d40:	3730      	adds	r7, #48	@ 0x30
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000550 	.word	0x20000550

08002d4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08c      	sub	sp, #48	@ 0x30
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d52:	f107 030c 	add.w	r3, r7, #12
 8002d56:	2224      	movs	r2, #36	@ 0x24
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f012 f9b1 	bl	80150c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d60:	1d3b      	adds	r3, r7, #4
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d68:	4b20      	ldr	r3, [pc, #128]	@ (8002dec <MX_TIM3_Init+0xa0>)
 8002d6a:	4a21      	ldr	r2, [pc, #132]	@ (8002df0 <MX_TIM3_Init+0xa4>)
 8002d6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002dec <MX_TIM3_Init+0xa0>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d74:	4b1d      	ldr	r3, [pc, #116]	@ (8002dec <MX_TIM3_Init+0xa0>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dec <MX_TIM3_Init+0xa0>)
 8002d7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d82:	4b1a      	ldr	r3, [pc, #104]	@ (8002dec <MX_TIM3_Init+0xa0>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d88:	4b18      	ldr	r3, [pc, #96]	@ (8002dec <MX_TIM3_Init+0xa0>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d96:	2301      	movs	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002da2:	2300      	movs	r3, #0
 8002da4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002da6:	2301      	movs	r3, #1
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002daa:	2300      	movs	r3, #0
 8002dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002db2:	f107 030c 	add.w	r3, r7, #12
 8002db6:	4619      	mov	r1, r3
 8002db8:	480c      	ldr	r0, [pc, #48]	@ (8002dec <MX_TIM3_Init+0xa0>)
 8002dba:	f005 f95d 	bl	8008078 <HAL_TIM_Encoder_Init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002dc4:	f7ff fac4 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dd0:	1d3b      	adds	r3, r7, #4
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4805      	ldr	r0, [pc, #20]	@ (8002dec <MX_TIM3_Init+0xa0>)
 8002dd6:	f005 fed9 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002de0:	f7ff fab6 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002de4:	bf00      	nop
 8002de6:	3730      	adds	r7, #48	@ 0x30
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20000598 	.word	0x20000598
 8002df0:	40000400 	.word	0x40000400

08002df4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08c      	sub	sp, #48	@ 0x30
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002dfa:	f107 030c 	add.w	r3, r7, #12
 8002dfe:	2224      	movs	r2, #36	@ 0x24
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f012 f95d 	bl	80150c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e10:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <MX_TIM4_Init+0xa0>)
 8002e12:	4a21      	ldr	r2, [pc, #132]	@ (8002e98 <MX_TIM4_Init+0xa4>)
 8002e14:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002e16:	4b1f      	ldr	r3, [pc, #124]	@ (8002e94 <MX_TIM4_Init+0xa0>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e94 <MX_TIM4_Init+0xa0>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002e22:	4b1c      	ldr	r3, [pc, #112]	@ (8002e94 <MX_TIM4_Init+0xa0>)
 8002e24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e28:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <MX_TIM4_Init+0xa0>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e30:	4b18      	ldr	r3, [pc, #96]	@ (8002e94 <MX_TIM4_Init+0xa0>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002e36:	2301      	movs	r3, #1
 8002e38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e52:	2300      	movs	r3, #0
 8002e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002e5a:	f107 030c 	add.w	r3, r7, #12
 8002e5e:	4619      	mov	r1, r3
 8002e60:	480c      	ldr	r0, [pc, #48]	@ (8002e94 <MX_TIM4_Init+0xa0>)
 8002e62:	f005 f909 	bl	8008078 <HAL_TIM_Encoder_Init>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002e6c:	f7ff fa70 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e70:	2300      	movs	r3, #0
 8002e72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4805      	ldr	r0, [pc, #20]	@ (8002e94 <MX_TIM4_Init+0xa0>)
 8002e7e:	f005 fe85 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002e88:	f7ff fa62 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e8c:	bf00      	nop
 8002e8e:	3730      	adds	r7, #48	@ 0x30
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	200005e0 	.word	0x200005e0
 8002e98:	40000800 	.word	0x40000800

08002e9c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08a      	sub	sp, #40	@ 0x28
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea2:	f107 0320 	add.w	r3, r7, #32
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	60da      	str	r2, [r3, #12]
 8002eb8:	611a      	str	r2, [r3, #16]
 8002eba:	615a      	str	r2, [r3, #20]
 8002ebc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ebe:	4b27      	ldr	r3, [pc, #156]	@ (8002f5c <MX_TIM5_Init+0xc0>)
 8002ec0:	4a27      	ldr	r2, [pc, #156]	@ (8002f60 <MX_TIM5_Init+0xc4>)
 8002ec2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8002ec4:	4b25      	ldr	r3, [pc, #148]	@ (8002f5c <MX_TIM5_Init+0xc0>)
 8002ec6:	2253      	movs	r2, #83	@ 0x53
 8002ec8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eca:	4b24      	ldr	r3, [pc, #144]	@ (8002f5c <MX_TIM5_Init+0xc0>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002ed0:	4b22      	ldr	r3, [pc, #136]	@ (8002f5c <MX_TIM5_Init+0xc0>)
 8002ed2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ed6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed8:	4b20      	ldr	r3, [pc, #128]	@ (8002f5c <MX_TIM5_Init+0xc0>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ede:	4b1f      	ldr	r3, [pc, #124]	@ (8002f5c <MX_TIM5_Init+0xc0>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002ee4:	481d      	ldr	r0, [pc, #116]	@ (8002f5c <MX_TIM5_Init+0xc0>)
 8002ee6:	f004 ffaf 	bl	8007e48 <HAL_TIM_PWM_Init>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002ef0:	f7ff fa2e 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002efc:	f107 0320 	add.w	r3, r7, #32
 8002f00:	4619      	mov	r1, r3
 8002f02:	4816      	ldr	r0, [pc, #88]	@ (8002f5c <MX_TIM5_Init+0xc0>)
 8002f04:	f005 fe42 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002f0e:	f7ff fa1f 	bl	8002350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f12:	2360      	movs	r3, #96	@ 0x60
 8002f14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	2200      	movs	r2, #0
 8002f26:	4619      	mov	r1, r3
 8002f28:	480c      	ldr	r0, [pc, #48]	@ (8002f5c <MX_TIM5_Init+0xc0>)
 8002f2a:	f005 fac9 	bl	80084c0 <HAL_TIM_PWM_ConfigChannel>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002f34:	f7ff fa0c 	bl	8002350 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4807      	ldr	r0, [pc, #28]	@ (8002f5c <MX_TIM5_Init+0xc0>)
 8002f40:	f005 fabe 	bl	80084c0 <HAL_TIM_PWM_ConfigChannel>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002f4a:	f7ff fa01 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002f4e:	4803      	ldr	r0, [pc, #12]	@ (8002f5c <MX_TIM5_Init+0xc0>)
 8002f50:	f000 fc22 	bl	8003798 <HAL_TIM_MspPostInit>

}
 8002f54:	bf00      	nop
 8002f56:	3728      	adds	r7, #40	@ 0x28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000628 	.word	0x20000628
 8002f60:	40000c00 	.word	0x40000c00

08002f64 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f6a:	463b      	mov	r3, r7
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002f72:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <MX_TIM6_Init+0x64>)
 8002f74:	4a15      	ldr	r2, [pc, #84]	@ (8002fcc <MX_TIM6_Init+0x68>)
 8002f76:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8002f78:	4b13      	ldr	r3, [pc, #76]	@ (8002fc8 <MX_TIM6_Init+0x64>)
 8002f7a:	2253      	movs	r2, #83	@ 0x53
 8002f7c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7e:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <MX_TIM6_Init+0x64>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 8002f84:	4b10      	ldr	r3, [pc, #64]	@ (8002fc8 <MX_TIM6_Init+0x64>)
 8002f86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f8a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc8 <MX_TIM6_Init+0x64>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f92:	480d      	ldr	r0, [pc, #52]	@ (8002fc8 <MX_TIM6_Init+0x64>)
 8002f94:	f004 fe98 	bl	8007cc8 <HAL_TIM_Base_Init>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002f9e:	f7ff f9d7 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002faa:	463b      	mov	r3, r7
 8002fac:	4619      	mov	r1, r3
 8002fae:	4806      	ldr	r0, [pc, #24]	@ (8002fc8 <MX_TIM6_Init+0x64>)
 8002fb0:	f005 fdec 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002fba:	f7ff f9c9 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000670 	.word	0x20000670
 8002fcc:	40001000 	.word	0x40001000

08002fd0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b092      	sub	sp, #72	@ 0x48
 8002fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
 8002ff0:	615a      	str	r2, [r3, #20]
 8002ff2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f012 f861 	bl	80150c2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003000:	4b33      	ldr	r3, [pc, #204]	@ (80030d0 <MX_TIM8_Init+0x100>)
 8003002:	4a34      	ldr	r2, [pc, #208]	@ (80030d4 <MX_TIM8_Init+0x104>)
 8003004:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 8003006:	4b32      	ldr	r3, [pc, #200]	@ (80030d0 <MX_TIM8_Init+0x100>)
 8003008:	22a7      	movs	r2, #167	@ 0xa7
 800300a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300c:	4b30      	ldr	r3, [pc, #192]	@ (80030d0 <MX_TIM8_Init+0x100>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8003012:	4b2f      	ldr	r3, [pc, #188]	@ (80030d0 <MX_TIM8_Init+0x100>)
 8003014:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003018:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800301a:	4b2d      	ldr	r3, [pc, #180]	@ (80030d0 <MX_TIM8_Init+0x100>)
 800301c:	2200      	movs	r2, #0
 800301e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003020:	4b2b      	ldr	r3, [pc, #172]	@ (80030d0 <MX_TIM8_Init+0x100>)
 8003022:	2200      	movs	r2, #0
 8003024:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003026:	4b2a      	ldr	r3, [pc, #168]	@ (80030d0 <MX_TIM8_Init+0x100>)
 8003028:	2200      	movs	r2, #0
 800302a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800302c:	4828      	ldr	r0, [pc, #160]	@ (80030d0 <MX_TIM8_Init+0x100>)
 800302e:	f004 ff0b 	bl	8007e48 <HAL_TIM_PWM_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003038:	f7ff f98a 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800303c:	2300      	movs	r3, #0
 800303e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003040:	2300      	movs	r3, #0
 8003042:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003044:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003048:	4619      	mov	r1, r3
 800304a:	4821      	ldr	r0, [pc, #132]	@ (80030d0 <MX_TIM8_Init+0x100>)
 800304c:	f005 fd9e 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8003056:	f7ff f97b 	bl	8002350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800305a:	2360      	movs	r3, #96	@ 0x60
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003062:	2300      	movs	r3, #0
 8003064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003066:	2300      	movs	r3, #0
 8003068:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800306a:	2300      	movs	r3, #0
 800306c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003072:	2300      	movs	r3, #0
 8003074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800307a:	2208      	movs	r2, #8
 800307c:	4619      	mov	r1, r3
 800307e:	4814      	ldr	r0, [pc, #80]	@ (80030d0 <MX_TIM8_Init+0x100>)
 8003080:	f005 fa1e 	bl	80084c0 <HAL_TIM_PWM_ConfigChannel>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800308a:	f7ff f961 	bl	8002350 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	4619      	mov	r1, r3
 80030b0:	4807      	ldr	r0, [pc, #28]	@ (80030d0 <MX_TIM8_Init+0x100>)
 80030b2:	f005 fde7 	bl	8008c84 <HAL_TIMEx_ConfigBreakDeadTime>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 80030bc:	f7ff f948 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80030c0:	4803      	ldr	r0, [pc, #12]	@ (80030d0 <MX_TIM8_Init+0x100>)
 80030c2:	f000 fb69 	bl	8003798 <HAL_TIM_MspPostInit>

}
 80030c6:	bf00      	nop
 80030c8:	3748      	adds	r7, #72	@ 0x48
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200006b8 	.word	0x200006b8
 80030d4:	40010400 	.word	0x40010400

080030d8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
 80030ec:	615a      	str	r2, [r3, #20]
 80030ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80030f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003170 <MX_TIM9_Init+0x98>)
 80030f2:	4a20      	ldr	r2, [pc, #128]	@ (8003174 <MX_TIM9_Init+0x9c>)
 80030f4:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 80030f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003170 <MX_TIM9_Init+0x98>)
 80030f8:	22a7      	movs	r2, #167	@ 0xa7
 80030fa:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003170 <MX_TIM9_Init+0x98>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8003102:	4b1b      	ldr	r3, [pc, #108]	@ (8003170 <MX_TIM9_Init+0x98>)
 8003104:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003108:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800310a:	4b19      	ldr	r3, [pc, #100]	@ (8003170 <MX_TIM9_Init+0x98>)
 800310c:	2200      	movs	r2, #0
 800310e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003110:	4b17      	ldr	r3, [pc, #92]	@ (8003170 <MX_TIM9_Init+0x98>)
 8003112:	2200      	movs	r2, #0
 8003114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003116:	4816      	ldr	r0, [pc, #88]	@ (8003170 <MX_TIM9_Init+0x98>)
 8003118:	f004 fe96 	bl	8007e48 <HAL_TIM_PWM_Init>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8003122:	f7ff f915 	bl	8002350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003126:	2360      	movs	r3, #96	@ 0x60
 8003128:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	2200      	movs	r2, #0
 800313a:	4619      	mov	r1, r3
 800313c:	480c      	ldr	r0, [pc, #48]	@ (8003170 <MX_TIM9_Init+0x98>)
 800313e:	f005 f9bf 	bl	80084c0 <HAL_TIM_PWM_ConfigChannel>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8003148:	f7ff f902 	bl	8002350 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	2204      	movs	r2, #4
 8003150:	4619      	mov	r1, r3
 8003152:	4807      	ldr	r0, [pc, #28]	@ (8003170 <MX_TIM9_Init+0x98>)
 8003154:	f005 f9b4 	bl	80084c0 <HAL_TIM_PWM_ConfigChannel>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800315e:	f7ff f8f7 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003162:	4803      	ldr	r0, [pc, #12]	@ (8003170 <MX_TIM9_Init+0x98>)
 8003164:	f000 fb18 	bl	8003798 <HAL_TIM_MspPostInit>

}
 8003168:	bf00      	nop
 800316a:	3720      	adds	r7, #32
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000700 	.word	0x20000700
 8003174:	40014000 	.word	0x40014000

08003178 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800317e:	1d3b      	adds	r3, r7, #4
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	611a      	str	r2, [r3, #16]
 800318c:	615a      	str	r2, [r3, #20]
 800318e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003190:	4b1e      	ldr	r3, [pc, #120]	@ (800320c <MX_TIM10_Init+0x94>)
 8003192:	4a1f      	ldr	r2, [pc, #124]	@ (8003210 <MX_TIM10_Init+0x98>)
 8003194:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8003196:	4b1d      	ldr	r3, [pc, #116]	@ (800320c <MX_TIM10_Init+0x94>)
 8003198:	22a7      	movs	r2, #167	@ 0xa7
 800319a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800319c:	4b1b      	ldr	r3, [pc, #108]	@ (800320c <MX_TIM10_Init+0x94>)
 800319e:	2200      	movs	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 80031a2:	4b1a      	ldr	r3, [pc, #104]	@ (800320c <MX_TIM10_Init+0x94>)
 80031a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031a8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031aa:	4b18      	ldr	r3, [pc, #96]	@ (800320c <MX_TIM10_Init+0x94>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031b0:	4b16      	ldr	r3, [pc, #88]	@ (800320c <MX_TIM10_Init+0x94>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80031b6:	4815      	ldr	r0, [pc, #84]	@ (800320c <MX_TIM10_Init+0x94>)
 80031b8:	f004 fd86 	bl	8007cc8 <HAL_TIM_Base_Init>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80031c2:	f7ff f8c5 	bl	8002350 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80031c6:	4811      	ldr	r0, [pc, #68]	@ (800320c <MX_TIM10_Init+0x94>)
 80031c8:	f004 fe3e 	bl	8007e48 <HAL_TIM_PWM_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80031d2:	f7ff f8bd 	bl	8002350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031d6:	2360      	movs	r3, #96	@ 0x60
 80031d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031e6:	1d3b      	adds	r3, r7, #4
 80031e8:	2200      	movs	r2, #0
 80031ea:	4619      	mov	r1, r3
 80031ec:	4807      	ldr	r0, [pc, #28]	@ (800320c <MX_TIM10_Init+0x94>)
 80031ee:	f005 f967 	bl	80084c0 <HAL_TIM_PWM_ConfigChannel>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80031f8:	f7ff f8aa 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80031fc:	4803      	ldr	r0, [pc, #12]	@ (800320c <MX_TIM10_Init+0x94>)
 80031fe:	f000 facb 	bl	8003798 <HAL_TIM_MspPostInit>

}
 8003202:	bf00      	nop
 8003204:	3720      	adds	r7, #32
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000748 	.word	0x20000748
 8003210:	40014400 	.word	0x40014400

08003214 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]
 8003228:	615a      	str	r2, [r3, #20]
 800322a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800322c:	4b1e      	ldr	r3, [pc, #120]	@ (80032a8 <MX_TIM11_Init+0x94>)
 800322e:	4a1f      	ldr	r2, [pc, #124]	@ (80032ac <MX_TIM11_Init+0x98>)
 8003230:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8003232:	4b1d      	ldr	r3, [pc, #116]	@ (80032a8 <MX_TIM11_Init+0x94>)
 8003234:	22a7      	movs	r2, #167	@ 0xa7
 8003236:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003238:	4b1b      	ldr	r3, [pc, #108]	@ (80032a8 <MX_TIM11_Init+0x94>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 800323e:	4b1a      	ldr	r3, [pc, #104]	@ (80032a8 <MX_TIM11_Init+0x94>)
 8003240:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003244:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003246:	4b18      	ldr	r3, [pc, #96]	@ (80032a8 <MX_TIM11_Init+0x94>)
 8003248:	2200      	movs	r2, #0
 800324a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800324c:	4b16      	ldr	r3, [pc, #88]	@ (80032a8 <MX_TIM11_Init+0x94>)
 800324e:	2200      	movs	r2, #0
 8003250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003252:	4815      	ldr	r0, [pc, #84]	@ (80032a8 <MX_TIM11_Init+0x94>)
 8003254:	f004 fd38 	bl	8007cc8 <HAL_TIM_Base_Init>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800325e:	f7ff f877 	bl	8002350 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <MX_TIM11_Init+0x94>)
 8003264:	f004 fdf0 	bl	8007e48 <HAL_TIM_PWM_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800326e:	f7ff f86f 	bl	8002350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003272:	2360      	movs	r3, #96	@ 0x60
 8003274:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	2200      	movs	r2, #0
 8003286:	4619      	mov	r1, r3
 8003288:	4807      	ldr	r0, [pc, #28]	@ (80032a8 <MX_TIM11_Init+0x94>)
 800328a:	f005 f919 	bl	80084c0 <HAL_TIM_PWM_ConfigChannel>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8003294:	f7ff f85c 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8003298:	4803      	ldr	r0, [pc, #12]	@ (80032a8 <MX_TIM11_Init+0x94>)
 800329a:	f000 fa7d 	bl	8003798 <HAL_TIM_MspPostInit>

}
 800329e:	bf00      	nop
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000790 	.word	0x20000790
 80032ac:	40014800 	.word	0x40014800

080032b0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
 80032c4:	615a      	str	r2, [r3, #20]
 80032c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80032c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003348 <MX_TIM12_Init+0x98>)
 80032ca:	4a20      	ldr	r2, [pc, #128]	@ (800334c <MX_TIM12_Init+0x9c>)
 80032cc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 80032ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003348 <MX_TIM12_Init+0x98>)
 80032d0:	2253      	movs	r2, #83	@ 0x53
 80032d2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003348 <MX_TIM12_Init+0x98>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 80032da:	4b1b      	ldr	r3, [pc, #108]	@ (8003348 <MX_TIM12_Init+0x98>)
 80032dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80032e0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e2:	4b19      	ldr	r3, [pc, #100]	@ (8003348 <MX_TIM12_Init+0x98>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032e8:	4b17      	ldr	r3, [pc, #92]	@ (8003348 <MX_TIM12_Init+0x98>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80032ee:	4816      	ldr	r0, [pc, #88]	@ (8003348 <MX_TIM12_Init+0x98>)
 80032f0:	f004 fdaa 	bl	8007e48 <HAL_TIM_PWM_Init>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80032fa:	f7ff f829 	bl	8002350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032fe:	2360      	movs	r3, #96	@ 0x60
 8003300:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	2200      	movs	r2, #0
 8003312:	4619      	mov	r1, r3
 8003314:	480c      	ldr	r0, [pc, #48]	@ (8003348 <MX_TIM12_Init+0x98>)
 8003316:	f005 f8d3 	bl	80084c0 <HAL_TIM_PWM_ConfigChannel>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8003320:	f7ff f816 	bl	8002350 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003324:	1d3b      	adds	r3, r7, #4
 8003326:	2204      	movs	r2, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4807      	ldr	r0, [pc, #28]	@ (8003348 <MX_TIM12_Init+0x98>)
 800332c:	f005 f8c8 	bl	80084c0 <HAL_TIM_PWM_ConfigChannel>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8003336:	f7ff f80b 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800333a:	4803      	ldr	r0, [pc, #12]	@ (8003348 <MX_TIM12_Init+0x98>)
 800333c:	f000 fa2c 	bl	8003798 <HAL_TIM_MspPostInit>

}
 8003340:	bf00      	nop
 8003342:	3720      	adds	r7, #32
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	200007d8 	.word	0x200007d8
 800334c:	40001800 	.word	0x40001800

08003350 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003356:	1d3b      	adds	r3, r7, #4
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	611a      	str	r2, [r3, #16]
 8003364:	615a      	str	r2, [r3, #20]
 8003366:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003368:	4b1e      	ldr	r3, [pc, #120]	@ (80033e4 <MX_TIM13_Init+0x94>)
 800336a:	4a1f      	ldr	r2, [pc, #124]	@ (80033e8 <MX_TIM13_Init+0x98>)
 800336c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 800336e:	4b1d      	ldr	r3, [pc, #116]	@ (80033e4 <MX_TIM13_Init+0x94>)
 8003370:	2253      	movs	r2, #83	@ 0x53
 8003372:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003374:	4b1b      	ldr	r3, [pc, #108]	@ (80033e4 <MX_TIM13_Init+0x94>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 800337a:	4b1a      	ldr	r3, [pc, #104]	@ (80033e4 <MX_TIM13_Init+0x94>)
 800337c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003380:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003382:	4b18      	ldr	r3, [pc, #96]	@ (80033e4 <MX_TIM13_Init+0x94>)
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003388:	4b16      	ldr	r3, [pc, #88]	@ (80033e4 <MX_TIM13_Init+0x94>)
 800338a:	2200      	movs	r2, #0
 800338c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800338e:	4815      	ldr	r0, [pc, #84]	@ (80033e4 <MX_TIM13_Init+0x94>)
 8003390:	f004 fc9a 	bl	8007cc8 <HAL_TIM_Base_Init>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800339a:	f7fe ffd9 	bl	8002350 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800339e:	4811      	ldr	r0, [pc, #68]	@ (80033e4 <MX_TIM13_Init+0x94>)
 80033a0:	f004 fd52 	bl	8007e48 <HAL_TIM_PWM_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80033aa:	f7fe ffd1 	bl	8002350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033ae:	2360      	movs	r3, #96	@ 0x60
 80033b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033be:	1d3b      	adds	r3, r7, #4
 80033c0:	2200      	movs	r2, #0
 80033c2:	4619      	mov	r1, r3
 80033c4:	4807      	ldr	r0, [pc, #28]	@ (80033e4 <MX_TIM13_Init+0x94>)
 80033c6:	f005 f87b 	bl	80084c0 <HAL_TIM_PWM_ConfigChannel>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80033d0:	f7fe ffbe 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80033d4:	4803      	ldr	r0, [pc, #12]	@ (80033e4 <MX_TIM13_Init+0x94>)
 80033d6:	f000 f9df 	bl	8003798 <HAL_TIM_MspPostInit>

}
 80033da:	bf00      	nop
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000820 	.word	0x20000820
 80033e8:	40001c00 	.word	0x40001c00

080033ec <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b090      	sub	sp, #64	@ 0x40
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a74      	ldr	r2, [pc, #464]	@ (80035dc <HAL_TIM_Encoder_MspInit+0x1f0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d12d      	bne.n	800346a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003412:	4b73      	ldr	r3, [pc, #460]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003416:	4a72      	ldr	r2, [pc, #456]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6453      	str	r3, [r2, #68]	@ 0x44
 800341e:	4b70      	ldr	r3, [pc, #448]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003428:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24
 800342e:	4b6c      	ldr	r3, [pc, #432]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	4a6b      	ldr	r2, [pc, #428]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003434:	f043 0310 	orr.w	r3, r3, #16
 8003438:	6313      	str	r3, [r2, #48]	@ 0x30
 800343a:	4b69      	ldr	r3, [pc, #420]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003446:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344c:	2302      	movs	r3, #2
 800344e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003454:	2300      	movs	r3, #0
 8003456:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003458:	2301      	movs	r3, #1
 800345a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800345c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003460:	4619      	mov	r1, r3
 8003462:	4860      	ldr	r0, [pc, #384]	@ (80035e4 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8003464:	f003 fc9e 	bl	8006da4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003468:	e0b4      	b.n	80035d4 <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(tim_encoderHandle->Instance==TIM2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003472:	d14b      	bne.n	800350c <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003474:	2300      	movs	r3, #0
 8003476:	623b      	str	r3, [r7, #32]
 8003478:	4b59      	ldr	r3, [pc, #356]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347c:	4a58      	ldr	r2, [pc, #352]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	6413      	str	r3, [r2, #64]	@ 0x40
 8003484:	4b56      	ldr	r3, [pc, #344]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	623b      	str	r3, [r7, #32]
 800348e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	4b52      	ldr	r3, [pc, #328]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003498:	4a51      	ldr	r2, [pc, #324]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6313      	str	r3, [r2, #48]	@ 0x30
 80034a0:	4b4f      	ldr	r3, [pc, #316]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80034a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	61fb      	str	r3, [r7, #28]
 80034aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	4b4b      	ldr	r3, [pc, #300]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80034b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b4:	4a4a      	ldr	r2, [pc, #296]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80034b6:	f043 0302 	orr.w	r3, r3, #2
 80034ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80034bc:	4b48      	ldr	r3, [pc, #288]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80034be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80034c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ce:	2302      	movs	r3, #2
 80034d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d6:	2300      	movs	r3, #0
 80034d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034da:	2301      	movs	r3, #1
 80034dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034e2:	4619      	mov	r1, r3
 80034e4:	4840      	ldr	r0, [pc, #256]	@ (80035e8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 80034e6:	f003 fc5d 	bl	8006da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034ea:	2308      	movs	r3, #8
 80034ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ee:	2302      	movs	r3, #2
 80034f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f6:	2300      	movs	r3, #0
 80034f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034fa:	2301      	movs	r3, #1
 80034fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003502:	4619      	mov	r1, r3
 8003504:	4839      	ldr	r0, [pc, #228]	@ (80035ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003506:	f003 fc4d 	bl	8006da4 <HAL_GPIO_Init>
}
 800350a:	e063      	b.n	80035d4 <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(tim_encoderHandle->Instance==TIM3)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a37      	ldr	r2, [pc, #220]	@ (80035f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d12c      	bne.n	8003570 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	4b31      	ldr	r3, [pc, #196]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	4a30      	ldr	r2, [pc, #192]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	6413      	str	r3, [r2, #64]	@ 0x40
 8003526:	4b2e      	ldr	r3, [pc, #184]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	4b2a      	ldr	r3, [pc, #168]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	4a29      	ldr	r2, [pc, #164]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	6313      	str	r3, [r2, #48]	@ 0x30
 8003542:	4b27      	ldr	r3, [pc, #156]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800354e:	2330      	movs	r3, #48	@ 0x30
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003552:	2302      	movs	r3, #2
 8003554:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355a:	2300      	movs	r3, #0
 800355c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800355e:	2302      	movs	r3, #2
 8003560:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003562:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003566:	4619      	mov	r1, r3
 8003568:	4820      	ldr	r0, [pc, #128]	@ (80035ec <HAL_TIM_Encoder_MspInit+0x200>)
 800356a:	f003 fc1b 	bl	8006da4 <HAL_GPIO_Init>
}
 800356e:	e031      	b.n	80035d4 <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(tim_encoderHandle->Instance==TIM4)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1f      	ldr	r2, [pc, #124]	@ (80035f4 <HAL_TIM_Encoder_MspInit+0x208>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d12c      	bne.n	80035d4 <HAL_TIM_Encoder_MspInit+0x1e8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	4b18      	ldr	r3, [pc, #96]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	4a17      	ldr	r2, [pc, #92]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003584:	f043 0304 	orr.w	r3, r3, #4
 8003588:	6413      	str	r3, [r2, #64]	@ 0x40
 800358a:	4b15      	ldr	r3, [pc, #84]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	4b11      	ldr	r3, [pc, #68]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	4a10      	ldr	r2, [pc, #64]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80035a0:	f043 0308 	orr.w	r3, r3, #8
 80035a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a6:	4b0e      	ldr	r3, [pc, #56]	@ (80035e0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80035b2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80035b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b8:	2302      	movs	r3, #2
 80035ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c0:	2300      	movs	r3, #0
 80035c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80035c4:	2302      	movs	r3, #2
 80035c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035cc:	4619      	mov	r1, r3
 80035ce:	480a      	ldr	r0, [pc, #40]	@ (80035f8 <HAL_TIM_Encoder_MspInit+0x20c>)
 80035d0:	f003 fbe8 	bl	8006da4 <HAL_GPIO_Init>
}
 80035d4:	bf00      	nop
 80035d6:	3740      	adds	r7, #64	@ 0x40
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40010000 	.word	0x40010000
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40020000 	.word	0x40020000
 80035ec:	40020400 	.word	0x40020400
 80035f0:	40000400 	.word	0x40000400
 80035f4:	40000800 	.word	0x40000800
 80035f8:	40020c00 	.word	0x40020c00

080035fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a29      	ldr	r2, [pc, #164]	@ (80036b0 <HAL_TIM_PWM_MspInit+0xb4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d10e      	bne.n	800362c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	4b28      	ldr	r3, [pc, #160]	@ (80036b4 <HAL_TIM_PWM_MspInit+0xb8>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	4a27      	ldr	r2, [pc, #156]	@ (80036b4 <HAL_TIM_PWM_MspInit+0xb8>)
 8003618:	f043 0308 	orr.w	r3, r3, #8
 800361c:	6413      	str	r3, [r2, #64]	@ 0x40
 800361e:	4b25      	ldr	r3, [pc, #148]	@ (80036b4 <HAL_TIM_PWM_MspInit+0xb8>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800362a:	e03a      	b.n	80036a2 <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM8)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a21      	ldr	r2, [pc, #132]	@ (80036b8 <HAL_TIM_PWM_MspInit+0xbc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d10e      	bne.n	8003654 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	4b1e      	ldr	r3, [pc, #120]	@ (80036b4 <HAL_TIM_PWM_MspInit+0xb8>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363e:	4a1d      	ldr	r2, [pc, #116]	@ (80036b4 <HAL_TIM_PWM_MspInit+0xb8>)
 8003640:	f043 0302 	orr.w	r3, r3, #2
 8003644:	6453      	str	r3, [r2, #68]	@ 0x44
 8003646:	4b1b      	ldr	r3, [pc, #108]	@ (80036b4 <HAL_TIM_PWM_MspInit+0xb8>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]
}
 8003652:	e026      	b.n	80036a2 <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM9)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a18      	ldr	r2, [pc, #96]	@ (80036bc <HAL_TIM_PWM_MspInit+0xc0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10e      	bne.n	800367c <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	4b14      	ldr	r3, [pc, #80]	@ (80036b4 <HAL_TIM_PWM_MspInit+0xb8>)
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	4a13      	ldr	r2, [pc, #76]	@ (80036b4 <HAL_TIM_PWM_MspInit+0xb8>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800366c:	6453      	str	r3, [r2, #68]	@ 0x44
 800366e:	4b11      	ldr	r3, [pc, #68]	@ (80036b4 <HAL_TIM_PWM_MspInit+0xb8>)
 8003670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
}
 800367a:	e012      	b.n	80036a2 <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM12)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0f      	ldr	r2, [pc, #60]	@ (80036c0 <HAL_TIM_PWM_MspInit+0xc4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d10d      	bne.n	80036a2 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <HAL_TIM_PWM_MspInit+0xb8>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	4a09      	ldr	r2, [pc, #36]	@ (80036b4 <HAL_TIM_PWM_MspInit+0xb8>)
 8003690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003694:	6413      	str	r3, [r2, #64]	@ 0x40
 8003696:	4b07      	ldr	r3, [pc, #28]	@ (80036b4 <HAL_TIM_PWM_MspInit+0xb8>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]
}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40000c00 	.word	0x40000c00
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40010400 	.word	0x40010400
 80036bc:	40014000 	.word	0x40014000
 80036c0:	40001800 	.word	0x40001800

080036c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003784 <HAL_TIM_Base_MspInit+0xc0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d116      	bne.n	8003704 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	4b2b      	ldr	r3, [pc, #172]	@ (8003788 <HAL_TIM_Base_MspInit+0xc4>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	4a2a      	ldr	r2, [pc, #168]	@ (8003788 <HAL_TIM_Base_MspInit+0xc4>)
 80036e0:	f043 0310 	orr.w	r3, r3, #16
 80036e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036e6:	4b28      	ldr	r3, [pc, #160]	@ (8003788 <HAL_TIM_Base_MspInit+0xc4>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80036f2:	2200      	movs	r2, #0
 80036f4:	2100      	movs	r1, #0
 80036f6:	2036      	movs	r0, #54	@ 0x36
 80036f8:	f001 fddb 	bl	80052b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036fc:	2036      	movs	r0, #54	@ 0x36
 80036fe:	f001 fdf4 	bl	80052ea <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003702:	e03a      	b.n	800377a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a20      	ldr	r2, [pc, #128]	@ (800378c <HAL_TIM_Base_MspInit+0xc8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d10e      	bne.n	800372c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	4b1d      	ldr	r3, [pc, #116]	@ (8003788 <HAL_TIM_Base_MspInit+0xc4>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	4a1c      	ldr	r2, [pc, #112]	@ (8003788 <HAL_TIM_Base_MspInit+0xc4>)
 8003718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800371c:	6453      	str	r3, [r2, #68]	@ 0x44
 800371e:	4b1a      	ldr	r3, [pc, #104]	@ (8003788 <HAL_TIM_Base_MspInit+0xc4>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	693b      	ldr	r3, [r7, #16]
}
 800372a:	e026      	b.n	800377a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a17      	ldr	r2, [pc, #92]	@ (8003790 <HAL_TIM_Base_MspInit+0xcc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d10e      	bne.n	8003754 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	4b13      	ldr	r3, [pc, #76]	@ (8003788 <HAL_TIM_Base_MspInit+0xc4>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	4a12      	ldr	r2, [pc, #72]	@ (8003788 <HAL_TIM_Base_MspInit+0xc4>)
 8003740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003744:	6453      	str	r3, [r2, #68]	@ 0x44
 8003746:	4b10      	ldr	r3, [pc, #64]	@ (8003788 <HAL_TIM_Base_MspInit+0xc4>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
}
 8003752:	e012      	b.n	800377a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM13)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0e      	ldr	r2, [pc, #56]	@ (8003794 <HAL_TIM_Base_MspInit+0xd0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d10d      	bne.n	800377a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	4b09      	ldr	r3, [pc, #36]	@ (8003788 <HAL_TIM_Base_MspInit+0xc4>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	4a08      	ldr	r2, [pc, #32]	@ (8003788 <HAL_TIM_Base_MspInit+0xc4>)
 8003768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800376c:	6413      	str	r3, [r2, #64]	@ 0x40
 800376e:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <HAL_TIM_Base_MspInit+0xc4>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	68bb      	ldr	r3, [r7, #8]
}
 800377a:	bf00      	nop
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40001000 	.word	0x40001000
 8003788:	40023800 	.word	0x40023800
 800378c:	40014400 	.word	0x40014400
 8003790:	40014800 	.word	0x40014800
 8003794:	40001c00 	.word	0x40001c00

08003798 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08e      	sub	sp, #56	@ 0x38
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a80      	ldr	r2, [pc, #512]	@ (80039b8 <HAL_TIM_MspPostInit+0x220>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d11e      	bne.n	80037f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	623b      	str	r3, [r7, #32]
 80037be:	4b7f      	ldr	r3, [pc, #508]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	4a7e      	ldr	r2, [pc, #504]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ca:	4b7c      	ldr	r3, [pc, #496]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	623b      	str	r3, [r7, #32]
 80037d4:	6a3b      	ldr	r3, [r7, #32]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80037d6:	2309      	movs	r3, #9
 80037d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037da:	2302      	movs	r3, #2
 80037dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e2:	2300      	movs	r3, #0
 80037e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80037e6:	2302      	movs	r3, #2
 80037e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ee:	4619      	mov	r1, r3
 80037f0:	4873      	ldr	r0, [pc, #460]	@ (80039c0 <HAL_TIM_MspPostInit+0x228>)
 80037f2:	f003 fad7 	bl	8006da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80037f6:	e0da      	b.n	80039ae <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM8)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a71      	ldr	r2, [pc, #452]	@ (80039c4 <HAL_TIM_MspPostInit+0x22c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d11f      	bne.n	8003842 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	4b6d      	ldr	r3, [pc, #436]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	4a6c      	ldr	r2, [pc, #432]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 800380c:	f043 0304 	orr.w	r3, r3, #4
 8003810:	6313      	str	r3, [r2, #48]	@ 0x30
 8003812:	4b6a      	ldr	r3, [pc, #424]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800381e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003822:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003824:	2302      	movs	r3, #2
 8003826:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382c:	2300      	movs	r3, #0
 800382e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003830:	2303      	movs	r3, #3
 8003832:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003838:	4619      	mov	r1, r3
 800383a:	4863      	ldr	r0, [pc, #396]	@ (80039c8 <HAL_TIM_MspPostInit+0x230>)
 800383c:	f003 fab2 	bl	8006da4 <HAL_GPIO_Init>
}
 8003840:	e0b5      	b.n	80039ae <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM9)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a61      	ldr	r2, [pc, #388]	@ (80039cc <HAL_TIM_MspPostInit+0x234>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d11e      	bne.n	800388a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	4b5a      	ldr	r3, [pc, #360]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003854:	4a59      	ldr	r2, [pc, #356]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 8003856:	f043 0310 	orr.w	r3, r3, #16
 800385a:	6313      	str	r3, [r2, #48]	@ 0x30
 800385c:	4b57      	ldr	r3, [pc, #348]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003868:	2360      	movs	r3, #96	@ 0x60
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386c:	2302      	movs	r3, #2
 800386e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003870:	2300      	movs	r3, #0
 8003872:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003874:	2300      	movs	r3, #0
 8003876:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003878:	2303      	movs	r3, #3
 800387a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800387c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003880:	4619      	mov	r1, r3
 8003882:	4853      	ldr	r0, [pc, #332]	@ (80039d0 <HAL_TIM_MspPostInit+0x238>)
 8003884:	f003 fa8e 	bl	8006da4 <HAL_GPIO_Init>
}
 8003888:	e091      	b.n	80039ae <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM10)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a51      	ldr	r2, [pc, #324]	@ (80039d4 <HAL_TIM_MspPostInit+0x23c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d11f      	bne.n	80038d4 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	4b48      	ldr	r3, [pc, #288]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 800389a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389c:	4a47      	ldr	r2, [pc, #284]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 800389e:	f043 0302 	orr.w	r3, r3, #2
 80038a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80038a4:	4b45      	ldr	r3, [pc, #276]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 80038a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80038b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b6:	2302      	movs	r3, #2
 80038b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038be:	2300      	movs	r3, #0
 80038c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80038c2:	2303      	movs	r3, #3
 80038c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038ca:	4619      	mov	r1, r3
 80038cc:	4842      	ldr	r0, [pc, #264]	@ (80039d8 <HAL_TIM_MspPostInit+0x240>)
 80038ce:	f003 fa69 	bl	8006da4 <HAL_GPIO_Init>
}
 80038d2:	e06c      	b.n	80039ae <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM11)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a40      	ldr	r2, [pc, #256]	@ (80039dc <HAL_TIM_MspPostInit+0x244>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d11f      	bne.n	800391e <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	4b36      	ldr	r3, [pc, #216]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e6:	4a35      	ldr	r2, [pc, #212]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 80038e8:	f043 0302 	orr.w	r3, r3, #2
 80038ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ee:	4b33      	ldr	r3, [pc, #204]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80038fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003900:	2302      	movs	r3, #2
 8003902:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2300      	movs	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003908:	2300      	movs	r3, #0
 800390a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800390c:	2303      	movs	r3, #3
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003914:	4619      	mov	r1, r3
 8003916:	4830      	ldr	r0, [pc, #192]	@ (80039d8 <HAL_TIM_MspPostInit+0x240>)
 8003918:	f003 fa44 	bl	8006da4 <HAL_GPIO_Init>
}
 800391c:	e047      	b.n	80039ae <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM12)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a2f      	ldr	r2, [pc, #188]	@ (80039e0 <HAL_TIM_MspPostInit+0x248>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d11f      	bne.n	8003968 <HAL_TIM_MspPostInit+0x1d0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	4b23      	ldr	r3, [pc, #140]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003930:	4a22      	ldr	r2, [pc, #136]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 8003932:	f043 0302 	orr.w	r3, r3, #2
 8003936:	6313      	str	r3, [r2, #48]	@ 0x30
 8003938:	4b20      	ldr	r3, [pc, #128]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003944:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003948:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394a:	2302      	movs	r3, #2
 800394c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394e:	2300      	movs	r3, #0
 8003950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003952:	2300      	movs	r3, #0
 8003954:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003956:	2309      	movs	r3, #9
 8003958:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800395a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800395e:	4619      	mov	r1, r3
 8003960:	481d      	ldr	r0, [pc, #116]	@ (80039d8 <HAL_TIM_MspPostInit+0x240>)
 8003962:	f003 fa1f 	bl	8006da4 <HAL_GPIO_Init>
}
 8003966:	e022      	b.n	80039ae <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM13)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1d      	ldr	r2, [pc, #116]	@ (80039e4 <HAL_TIM_MspPostInit+0x24c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d11d      	bne.n	80039ae <HAL_TIM_MspPostInit+0x216>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	4b11      	ldr	r3, [pc, #68]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397a:	4a10      	ldr	r2, [pc, #64]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	6313      	str	r3, [r2, #48]	@ 0x30
 8003982:	4b0e      	ldr	r3, [pc, #56]	@ (80039bc <HAL_TIM_MspPostInit+0x224>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800398e:	2340      	movs	r3, #64	@ 0x40
 8003990:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003992:	2302      	movs	r3, #2
 8003994:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	2300      	movs	r3, #0
 8003998:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399a:	2300      	movs	r3, #0
 800399c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800399e:	2309      	movs	r3, #9
 80039a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039a6:	4619      	mov	r1, r3
 80039a8:	4805      	ldr	r0, [pc, #20]	@ (80039c0 <HAL_TIM_MspPostInit+0x228>)
 80039aa:	f003 f9fb 	bl	8006da4 <HAL_GPIO_Init>
}
 80039ae:	bf00      	nop
 80039b0:	3738      	adds	r7, #56	@ 0x38
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40000c00 	.word	0x40000c00
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40020000 	.word	0x40020000
 80039c4:	40010400 	.word	0x40010400
 80039c8:	40020800 	.word	0x40020800
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40014400 	.word	0x40014400
 80039d8:	40020400 	.word	0x40020400
 80039dc:	40014800 	.word	0x40014800
 80039e0:	40001800 	.word	0x40001800
 80039e4:	40001c00 	.word	0x40001c00

080039e8 <udpClient_connect>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port);

void udpClient_connect(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
	err_t err;
	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 80039ee:	f00e fef5 	bl	80127dc <udp_new>
 80039f2:	4603      	mov	r3, r0
 80039f4:	4a67      	ldr	r2, [pc, #412]	@ (8003b94 <udpClient_connect+0x1ac>)
 80039f6:	6013      	str	r3, [r2, #0]
	/* Bind the block to module's IP and port */
	IP_ADDR4(&stm32IPaddr, stm32_addr.a, stm32_addr.b, stm32_addr.c, stm32_addr.d); //--- stm32
 80039f8:	4b67      	ldr	r3, [pc, #412]	@ (8003b98 <udpClient_connect+0x1b0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	061a      	lsls	r2, r3, #24
 80039fe:	4b66      	ldr	r3, [pc, #408]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	041b      	lsls	r3, r3, #16
 8003a04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	4b63      	ldr	r3, [pc, #396]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	431a      	orrs	r2, r3
 8003a14:	4b60      	ldr	r3, [pc, #384]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	061a      	lsls	r2, r3, #24
 8003a1e:	4b5e      	ldr	r3, [pc, #376]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	0619      	lsls	r1, r3, #24
 8003a24:	4b5c      	ldr	r3, [pc, #368]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	041b      	lsls	r3, r3, #16
 8003a2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a2e:	4319      	orrs	r1, r3
 8003a30:	4b59      	ldr	r3, [pc, #356]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	4319      	orrs	r1, r3
 8003a3a:	4b57      	ldr	r3, [pc, #348]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	430b      	orrs	r3, r1
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	4b53      	ldr	r3, [pc, #332]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	0619      	lsls	r1, r3, #24
 8003a50:	4b51      	ldr	r3, [pc, #324]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	041b      	lsls	r3, r3, #16
 8003a56:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a5a:	4319      	orrs	r1, r3
 8003a5c:	4b4e      	ldr	r3, [pc, #312]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	4319      	orrs	r1, r3
 8003a66:	4b4c      	ldr	r3, [pc, #304]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003a74:	431a      	orrs	r2, r3
 8003a76:	4b48      	ldr	r3, [pc, #288]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	0619      	lsls	r1, r3, #24
 8003a7c:	4b46      	ldr	r3, [pc, #280]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	041b      	lsls	r3, r3, #16
 8003a82:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a86:	4319      	orrs	r1, r3
 8003a88:	4b43      	ldr	r3, [pc, #268]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	4319      	orrs	r1, r3
 8003a92:	4b41      	ldr	r3, [pc, #260]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	0e1b      	lsrs	r3, r3, #24
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b9c <udpClient_connect+0x1b4>)
 8003aa0:	6013      	str	r3, [r2, #0]
	udp_bind(upcb, &stm32IPaddr, stm32_addr.port);
 8003aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8003b94 <udpClient_connect+0x1ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a3c      	ldr	r2, [pc, #240]	@ (8003b98 <udpClient_connect+0x1b0>)
 8003aa8:	6912      	ldr	r2, [r2, #16]
 8003aaa:	b292      	uxth	r2, r2
 8003aac:	493b      	ldr	r1, [pc, #236]	@ (8003b9c <udpClient_connect+0x1b4>)
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f00e fd7e 	bl	80125b0 <udp_bind>
	/* configure destination IP address and port */
	IP_ADDR4(&pcIPaddr, pc_addr.a, pc_addr.b, pc_addr.c, pc_addr.d); //--- NUC/MINI PC
 8003ab4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	061a      	lsls	r2, r3, #24
 8003aba:	4b39      	ldr	r3, [pc, #228]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	4b36      	ldr	r3, [pc, #216]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	4b33      	ldr	r3, [pc, #204]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	061a      	lsls	r2, r3, #24
 8003ada:	4b31      	ldr	r3, [pc, #196]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	0619      	lsls	r1, r3, #24
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	041b      	lsls	r3, r3, #16
 8003ae6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003aea:	4319      	orrs	r1, r3
 8003aec:	4b2c      	ldr	r3, [pc, #176]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	4319      	orrs	r1, r3
 8003af6:	4b2a      	ldr	r3, [pc, #168]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	430b      	orrs	r3, r1
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003b04:	431a      	orrs	r2, r3
 8003b06:	4b26      	ldr	r3, [pc, #152]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	0619      	lsls	r1, r3, #24
 8003b0c:	4b24      	ldr	r3, [pc, #144]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003b16:	4319      	orrs	r1, r3
 8003b18:	4b21      	ldr	r3, [pc, #132]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	4319      	orrs	r1, r3
 8003b22:	4b1f      	ldr	r3, [pc, #124]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	0a1b      	lsrs	r3, r3, #8
 8003b2c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003b30:	431a      	orrs	r2, r3
 8003b32:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	0619      	lsls	r1, r3, #24
 8003b38:	4b19      	ldr	r3, [pc, #100]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	041b      	lsls	r3, r3, #16
 8003b3e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003b42:	4319      	orrs	r1, r3
 8003b44:	4b16      	ldr	r3, [pc, #88]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	021b      	lsls	r3, r3, #8
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	4319      	orrs	r1, r3
 8003b4e:	4b14      	ldr	r3, [pc, #80]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	430b      	orrs	r3, r1
 8003b56:	0e1b      	lsrs	r3, r3, #24
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ba4 <udpClient_connect+0x1bc>)
 8003b5c:	6013      	str	r3, [r2, #0]
	err= udp_connect(upcb, &pcIPaddr, pc_addr.port);
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <udpClient_connect+0x1ac>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a0f      	ldr	r2, [pc, #60]	@ (8003ba0 <udpClient_connect+0x1b8>)
 8003b64:	6912      	ldr	r2, [r2, #16]
 8003b66:	b292      	uxth	r2, r2
 8003b68:	490e      	ldr	r1, [pc, #56]	@ (8003ba4 <udpClient_connect+0x1bc>)
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f00e fda8 	bl	80126c0 <udp_connect>
 8003b70:	4603      	mov	r3, r0
 8003b72:	71fb      	strb	r3, [r7, #7]

	if (err == ERR_OK)
 8003b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <udpClient_connect+0x1a2>
	{
		udp_recv(upcb, udp_receive_callback, NULL);
 8003b7c:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <udpClient_connect+0x1ac>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2200      	movs	r2, #0
 8003b82:	4909      	ldr	r1, [pc, #36]	@ (8003ba8 <udpClient_connect+0x1c0>)
 8003b84:	4618      	mov	r0, r3
 8003b86:	f00e fe09 	bl	801279c <udp_recv>
	}
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000868 	.word	0x20000868
 8003b98:	2000003c 	.word	0x2000003c
 8003b9c:	2000086c 	.word	0x2000086c
 8003ba0:	20000050 	.word	0x20000050
 8003ba4:	20000870 	.word	0x20000870
 8003ba8:	08003c21 	.word	0x08003c21

08003bac <udpClient_send>:


void udpClient_send(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
  struct pbuf *txBuf;

  int len = sizeof(udp_tx_buffer);
 8003bb2:	2340      	movs	r3, #64	@ 0x40
 8003bb4:	607b      	str	r3, [r7, #4]

  memcpy(udp_tx_buffer +  3, &udp_tx, sizeof(udpTx_t));
 8003bb6:	4b14      	ldr	r3, [pc, #80]	@ (8003c08 <udpClient_send+0x5c>)
 8003bb8:	2220      	movs	r2, #32
 8003bba:	4914      	ldr	r1, [pc, #80]	@ (8003c0c <udpClient_send+0x60>)
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f011 fafc 	bl	80151ba <memcpy>

  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_POOL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8003bca:	4619      	mov	r1, r3
 8003bcc:	2036      	movs	r0, #54	@ 0x36
 8003bce:	f008 f8c1 	bl	800bd54 <pbuf_alloc>
 8003bd2:	6038      	str	r0, [r7, #0]

  if (txBuf != NULL)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d012      	beq.n	8003c00 <udpClient_send+0x54>
  {
    pbuf_take(txBuf, udp_tx_buffer, len);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	490b      	ldr	r1, [pc, #44]	@ (8003c10 <udpClient_send+0x64>)
 8003be2:	6838      	ldr	r0, [r7, #0]
 8003be4:	f008 fe06 	bl	800c7f4 <pbuf_take>

    udp_sendto(upcb, txBuf, &pcIPaddr, pc_addr.port);
 8003be8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c14 <udpClient_send+0x68>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	4b0a      	ldr	r3, [pc, #40]	@ (8003c18 <udpClient_send+0x6c>)
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8003c1c <udpClient_send+0x70>)
 8003bf4:	6839      	ldr	r1, [r7, #0]
 8003bf6:	f00e fb25 	bl	8012244 <udp_sendto>

    pbuf_free(txBuf);
 8003bfa:	6838      	ldr	r0, [r7, #0]
 8003bfc:	f008 fb8e 	bl	800c31c <pbuf_free>
  }
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000067 	.word	0x20000067
 8003c0c:	20000874 	.word	0x20000874
 8003c10:	20000064 	.word	0x20000064
 8003c14:	20000868 	.word	0x20000868
 8003c18:	20000050 	.word	0x20000050
 8003c1c:	20000870 	.word	0x20000870

08003c20 <udp_receive_callback>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	memcpy(udp_rx_buffer, p->payload, p->len);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6859      	ldr	r1, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	895b      	ldrh	r3, [r3, #10]
 8003c36:	461a      	mov	r2, r3
 8003c38:	4807      	ldr	r0, [pc, #28]	@ (8003c58 <udp_receive_callback+0x38>)
 8003c3a:	f011 fabe 	bl	80151ba <memcpy>

	memcpy(&udp_rx, udp_rx_buffer +  3, sizeof(udpRx_t));
 8003c3e:	4b07      	ldr	r3, [pc, #28]	@ (8003c5c <udp_receive_callback+0x3c>)
 8003c40:	220e      	movs	r2, #14
 8003c42:	4619      	mov	r1, r3
 8003c44:	4806      	ldr	r0, [pc, #24]	@ (8003c60 <udp_receive_callback+0x40>)
 8003c46:	f011 fab8 	bl	80151ba <memcpy>

	pbuf_free(p);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f008 fb66 	bl	800c31c <pbuf_free>
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	200008a4 	.word	0x200008a4
 8003c5c:	200008a7 	.word	0x200008a7
 8003c60:	20000894 	.word	0x20000894

08003c64 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003c68:	4b11      	ldr	r3, [pc, #68]	@ (8003cb0 <MX_UART4_Init+0x4c>)
 8003c6a:	4a12      	ldr	r2, [pc, #72]	@ (8003cb4 <MX_UART4_Init+0x50>)
 8003c6c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003c6e:	4b10      	ldr	r3, [pc, #64]	@ (8003cb0 <MX_UART4_Init+0x4c>)
 8003c70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c74:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003c76:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb0 <MX_UART4_Init+0x4c>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb0 <MX_UART4_Init+0x4c>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003c82:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb0 <MX_UART4_Init+0x4c>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003c88:	4b09      	ldr	r3, [pc, #36]	@ (8003cb0 <MX_UART4_Init+0x4c>)
 8003c8a:	220c      	movs	r2, #12
 8003c8c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c8e:	4b08      	ldr	r3, [pc, #32]	@ (8003cb0 <MX_UART4_Init+0x4c>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c94:	4b06      	ldr	r3, [pc, #24]	@ (8003cb0 <MX_UART4_Init+0x4c>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003c9a:	4805      	ldr	r0, [pc, #20]	@ (8003cb0 <MX_UART4_Init+0x4c>)
 8003c9c:	f005 f858 	bl	8008d50 <HAL_UART_Init>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003ca6:	f7fe fb53 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	200008e4 	.word	0x200008e4
 8003cb4:	40004c00 	.word	0x40004c00

08003cb8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003cbc:	4b11      	ldr	r3, [pc, #68]	@ (8003d04 <MX_UART5_Init+0x4c>)
 8003cbe:	4a12      	ldr	r2, [pc, #72]	@ (8003d08 <MX_UART5_Init+0x50>)
 8003cc0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003cc2:	4b10      	ldr	r3, [pc, #64]	@ (8003d04 <MX_UART5_Init+0x4c>)
 8003cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003cc8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003cca:	4b0e      	ldr	r3, [pc, #56]	@ (8003d04 <MX_UART5_Init+0x4c>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d04 <MX_UART5_Init+0x4c>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d04 <MX_UART5_Init+0x4c>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003cdc:	4b09      	ldr	r3, [pc, #36]	@ (8003d04 <MX_UART5_Init+0x4c>)
 8003cde:	220c      	movs	r2, #12
 8003ce0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ce2:	4b08      	ldr	r3, [pc, #32]	@ (8003d04 <MX_UART5_Init+0x4c>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ce8:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <MX_UART5_Init+0x4c>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003cee:	4805      	ldr	r0, [pc, #20]	@ (8003d04 <MX_UART5_Init+0x4c>)
 8003cf0:	f005 f82e 	bl	8008d50 <HAL_UART_Init>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003cfa:	f7fe fb29 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	2000092c 	.word	0x2000092c
 8003d08:	40005000 	.word	0x40005000

08003d0c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d10:	4b11      	ldr	r3, [pc, #68]	@ (8003d58 <MX_USART1_UART_Init+0x4c>)
 8003d12:	4a12      	ldr	r2, [pc, #72]	@ (8003d5c <MX_USART1_UART_Init+0x50>)
 8003d14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d16:	4b10      	ldr	r3, [pc, #64]	@ (8003d58 <MX_USART1_UART_Init+0x4c>)
 8003d18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d58 <MX_USART1_UART_Init+0x4c>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d24:	4b0c      	ldr	r3, [pc, #48]	@ (8003d58 <MX_USART1_UART_Init+0x4c>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <MX_USART1_UART_Init+0x4c>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d30:	4b09      	ldr	r3, [pc, #36]	@ (8003d58 <MX_USART1_UART_Init+0x4c>)
 8003d32:	220c      	movs	r2, #12
 8003d34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d36:	4b08      	ldr	r3, [pc, #32]	@ (8003d58 <MX_USART1_UART_Init+0x4c>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d3c:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <MX_USART1_UART_Init+0x4c>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d42:	4805      	ldr	r0, [pc, #20]	@ (8003d58 <MX_USART1_UART_Init+0x4c>)
 8003d44:	f005 f804 	bl	8008d50 <HAL_UART_Init>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d4e:	f7fe faff 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000974 	.word	0x20000974
 8003d5c:	40011000 	.word	0x40011000

08003d60 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d64:	4b11      	ldr	r3, [pc, #68]	@ (8003dac <MX_USART2_UART_Init+0x4c>)
 8003d66:	4a12      	ldr	r2, [pc, #72]	@ (8003db0 <MX_USART2_UART_Init+0x50>)
 8003d68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d6a:	4b10      	ldr	r3, [pc, #64]	@ (8003dac <MX_USART2_UART_Init+0x4c>)
 8003d6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d72:	4b0e      	ldr	r3, [pc, #56]	@ (8003dac <MX_USART2_UART_Init+0x4c>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d78:	4b0c      	ldr	r3, [pc, #48]	@ (8003dac <MX_USART2_UART_Init+0x4c>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <MX_USART2_UART_Init+0x4c>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d84:	4b09      	ldr	r3, [pc, #36]	@ (8003dac <MX_USART2_UART_Init+0x4c>)
 8003d86:	220c      	movs	r2, #12
 8003d88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d8a:	4b08      	ldr	r3, [pc, #32]	@ (8003dac <MX_USART2_UART_Init+0x4c>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d90:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <MX_USART2_UART_Init+0x4c>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d96:	4805      	ldr	r0, [pc, #20]	@ (8003dac <MX_USART2_UART_Init+0x4c>)
 8003d98:	f004 ffda 	bl	8008d50 <HAL_UART_Init>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003da2:	f7fe fad5 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	200009bc 	.word	0x200009bc
 8003db0:	40004400 	.word	0x40004400

08003db4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003db8:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <MX_USART3_UART_Init+0x4c>)
 8003dba:	4a12      	ldr	r2, [pc, #72]	@ (8003e04 <MX_USART3_UART_Init+0x50>)
 8003dbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003dbe:	4b10      	ldr	r3, [pc, #64]	@ (8003e00 <MX_USART3_UART_Init+0x4c>)
 8003dc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003dc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e00 <MX_USART3_UART_Init+0x4c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <MX_USART3_UART_Init+0x4c>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e00 <MX_USART3_UART_Init+0x4c>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003dd8:	4b09      	ldr	r3, [pc, #36]	@ (8003e00 <MX_USART3_UART_Init+0x4c>)
 8003dda:	220c      	movs	r2, #12
 8003ddc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dde:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <MX_USART3_UART_Init+0x4c>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003de4:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <MX_USART3_UART_Init+0x4c>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003dea:	4805      	ldr	r0, [pc, #20]	@ (8003e00 <MX_USART3_UART_Init+0x4c>)
 8003dec:	f004 ffb0 	bl	8008d50 <HAL_UART_Init>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003df6:	f7fe faab 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000a04 	.word	0x20000a04
 8003e04:	40004800 	.word	0x40004800

08003e08 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003e0c:	4b11      	ldr	r3, [pc, #68]	@ (8003e54 <MX_USART6_UART_Init+0x4c>)
 8003e0e:	4a12      	ldr	r2, [pc, #72]	@ (8003e58 <MX_USART6_UART_Init+0x50>)
 8003e10:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003e12:	4b10      	ldr	r3, [pc, #64]	@ (8003e54 <MX_USART6_UART_Init+0x4c>)
 8003e14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e18:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e54 <MX_USART6_UART_Init+0x4c>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003e20:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <MX_USART6_UART_Init+0x4c>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003e26:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <MX_USART6_UART_Init+0x4c>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003e2c:	4b09      	ldr	r3, [pc, #36]	@ (8003e54 <MX_USART6_UART_Init+0x4c>)
 8003e2e:	220c      	movs	r2, #12
 8003e30:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e32:	4b08      	ldr	r3, [pc, #32]	@ (8003e54 <MX_USART6_UART_Init+0x4c>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e38:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <MX_USART6_UART_Init+0x4c>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003e3e:	4805      	ldr	r0, [pc, #20]	@ (8003e54 <MX_USART6_UART_Init+0x4c>)
 8003e40:	f004 ff86 	bl	8008d50 <HAL_UART_Init>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003e4a:	f7fe fa81 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000a4c 	.word	0x20000a4c
 8003e58:	40011400 	.word	0x40011400

08003e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b096      	sub	sp, #88	@ 0x58
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e64:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	605a      	str	r2, [r3, #4]
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a4a      	ldr	r2, [pc, #296]	@ (8003fa4 <HAL_UART_MspInit+0x148>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	f040 80a0 	bne.w	8003fc0 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003e80:	2300      	movs	r3, #0
 8003e82:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e84:	4b48      	ldr	r3, [pc, #288]	@ (8003fa8 <HAL_UART_MspInit+0x14c>)
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	4a47      	ldr	r2, [pc, #284]	@ (8003fa8 <HAL_UART_MspInit+0x14c>)
 8003e8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e90:	4b45      	ldr	r3, [pc, #276]	@ (8003fa8 <HAL_UART_MspInit+0x14c>)
 8003e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e98:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ea0:	4b41      	ldr	r3, [pc, #260]	@ (8003fa8 <HAL_UART_MspInit+0x14c>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea4:	4a40      	ldr	r2, [pc, #256]	@ (8003fa8 <HAL_UART_MspInit+0x14c>)
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eac:	4b3e      	ldr	r3, [pc, #248]	@ (8003fa8 <HAL_UART_MspInit+0x14c>)
 8003eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003eb8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003ebc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003eca:	2308      	movs	r3, #8
 8003ecc:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ece:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4835      	ldr	r0, [pc, #212]	@ (8003fac <HAL_UART_MspInit+0x150>)
 8003ed6:	f002 ff65 	bl	8006da4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003eda:	4b35      	ldr	r3, [pc, #212]	@ (8003fb0 <HAL_UART_MspInit+0x154>)
 8003edc:	4a35      	ldr	r2, [pc, #212]	@ (8003fb4 <HAL_UART_MspInit+0x158>)
 8003ede:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003ee0:	4b33      	ldr	r3, [pc, #204]	@ (8003fb0 <HAL_UART_MspInit+0x154>)
 8003ee2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003ee6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ee8:	4b31      	ldr	r3, [pc, #196]	@ (8003fb0 <HAL_UART_MspInit+0x154>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eee:	4b30      	ldr	r3, [pc, #192]	@ (8003fb0 <HAL_UART_MspInit+0x154>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8003fb0 <HAL_UART_MspInit+0x154>)
 8003ef6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003efa:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003efc:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb0 <HAL_UART_MspInit+0x154>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f02:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb0 <HAL_UART_MspInit+0x154>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003f08:	4b29      	ldr	r3, [pc, #164]	@ (8003fb0 <HAL_UART_MspInit+0x154>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f0e:	4b28      	ldr	r3, [pc, #160]	@ (8003fb0 <HAL_UART_MspInit+0x154>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f14:	4b26      	ldr	r3, [pc, #152]	@ (8003fb0 <HAL_UART_MspInit+0x154>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003f1a:	4825      	ldr	r0, [pc, #148]	@ (8003fb0 <HAL_UART_MspInit+0x154>)
 8003f1c:	f001 fa00 	bl	8005320 <HAL_DMA_Init>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003f26:	f7fe fa13 	bl	8002350 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a20      	ldr	r2, [pc, #128]	@ (8003fb0 <HAL_UART_MspInit+0x154>)
 8003f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f30:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb0 <HAL_UART_MspInit+0x154>)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003f36:	4b20      	ldr	r3, [pc, #128]	@ (8003fb8 <HAL_UART_MspInit+0x15c>)
 8003f38:	4a20      	ldr	r2, [pc, #128]	@ (8003fbc <HAL_UART_MspInit+0x160>)
 8003f3a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8003f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb8 <HAL_UART_MspInit+0x15c>)
 8003f3e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003f42:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f44:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb8 <HAL_UART_MspInit+0x15c>)
 8003f46:	2240      	movs	r2, #64	@ 0x40
 8003f48:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb8 <HAL_UART_MspInit+0x15c>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f50:	4b19      	ldr	r3, [pc, #100]	@ (8003fb8 <HAL_UART_MspInit+0x15c>)
 8003f52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f56:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f58:	4b17      	ldr	r3, [pc, #92]	@ (8003fb8 <HAL_UART_MspInit+0x15c>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f5e:	4b16      	ldr	r3, [pc, #88]	@ (8003fb8 <HAL_UART_MspInit+0x15c>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003f64:	4b14      	ldr	r3, [pc, #80]	@ (8003fb8 <HAL_UART_MspInit+0x15c>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f6a:	4b13      	ldr	r3, [pc, #76]	@ (8003fb8 <HAL_UART_MspInit+0x15c>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f70:	4b11      	ldr	r3, [pc, #68]	@ (8003fb8 <HAL_UART_MspInit+0x15c>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003f76:	4810      	ldr	r0, [pc, #64]	@ (8003fb8 <HAL_UART_MspInit+0x15c>)
 8003f78:	f001 f9d2 	bl	8005320 <HAL_DMA_Init>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003f82:	f7fe f9e5 	bl	8002350 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a0b      	ldr	r2, [pc, #44]	@ (8003fb8 <HAL_UART_MspInit+0x15c>)
 8003f8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8003fb8 <HAL_UART_MspInit+0x15c>)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003f92:	2200      	movs	r2, #0
 8003f94:	2100      	movs	r1, #0
 8003f96:	2034      	movs	r0, #52	@ 0x34
 8003f98:	f001 f98b 	bl	80052b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003f9c:	2034      	movs	r0, #52	@ 0x34
 8003f9e:	f001 f9a4 	bl	80052ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003fa2:	e375      	b.n	8004690 <HAL_UART_MspInit+0x834>
 8003fa4:	40004c00 	.word	0x40004c00
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40020800 	.word	0x40020800
 8003fb0:	20000a94 	.word	0x20000a94
 8003fb4:	40026040 	.word	0x40026040
 8003fb8:	20000af4 	.word	0x20000af4
 8003fbc:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a5a      	ldr	r2, [pc, #360]	@ (8004130 <HAL_UART_MspInit+0x2d4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	f040 80c2 	bne.w	8004150 <HAL_UART_MspInit+0x2f4>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003fcc:	2300      	movs	r3, #0
 8003fce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fd0:	4b58      	ldr	r3, [pc, #352]	@ (8004134 <HAL_UART_MspInit+0x2d8>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd4:	4a57      	ldr	r2, [pc, #348]	@ (8004134 <HAL_UART_MspInit+0x2d8>)
 8003fd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fdc:	4b55      	ldr	r3, [pc, #340]	@ (8004134 <HAL_UART_MspInit+0x2d8>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fe8:	2300      	movs	r3, #0
 8003fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fec:	4b51      	ldr	r3, [pc, #324]	@ (8004134 <HAL_UART_MspInit+0x2d8>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff0:	4a50      	ldr	r2, [pc, #320]	@ (8004134 <HAL_UART_MspInit+0x2d8>)
 8003ff2:	f043 0304 	orr.w	r3, r3, #4
 8003ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ff8:	4b4e      	ldr	r3, [pc, #312]	@ (8004134 <HAL_UART_MspInit+0x2d8>)
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	637b      	str	r3, [r7, #52]	@ 0x34
 8004002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004004:	2300      	movs	r3, #0
 8004006:	633b      	str	r3, [r7, #48]	@ 0x30
 8004008:	4b4a      	ldr	r3, [pc, #296]	@ (8004134 <HAL_UART_MspInit+0x2d8>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	4a49      	ldr	r2, [pc, #292]	@ (8004134 <HAL_UART_MspInit+0x2d8>)
 800400e:	f043 0308 	orr.w	r3, r3, #8
 8004012:	6313      	str	r3, [r2, #48]	@ 0x30
 8004014:	4b47      	ldr	r3, [pc, #284]	@ (8004134 <HAL_UART_MspInit+0x2d8>)
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	633b      	str	r3, [r7, #48]	@ 0x30
 800401e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004024:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004026:	2302      	movs	r3, #2
 8004028:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800402e:	2303      	movs	r3, #3
 8004030:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004032:	2308      	movs	r3, #8
 8004034:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004036:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800403a:	4619      	mov	r1, r3
 800403c:	483e      	ldr	r0, [pc, #248]	@ (8004138 <HAL_UART_MspInit+0x2dc>)
 800403e:	f002 feb1 	bl	8006da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004042:	2304      	movs	r3, #4
 8004044:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004046:	2302      	movs	r3, #2
 8004048:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404a:	2300      	movs	r3, #0
 800404c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404e:	2303      	movs	r3, #3
 8004050:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004052:	2308      	movs	r3, #8
 8004054:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004056:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800405a:	4619      	mov	r1, r3
 800405c:	4837      	ldr	r0, [pc, #220]	@ (800413c <HAL_UART_MspInit+0x2e0>)
 800405e:	f002 fea1 	bl	8006da4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8004062:	4b37      	ldr	r3, [pc, #220]	@ (8004140 <HAL_UART_MspInit+0x2e4>)
 8004064:	4a37      	ldr	r2, [pc, #220]	@ (8004144 <HAL_UART_MspInit+0x2e8>)
 8004066:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8004068:	4b35      	ldr	r3, [pc, #212]	@ (8004140 <HAL_UART_MspInit+0x2e4>)
 800406a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800406e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004070:	4b33      	ldr	r3, [pc, #204]	@ (8004140 <HAL_UART_MspInit+0x2e4>)
 8004072:	2200      	movs	r2, #0
 8004074:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004076:	4b32      	ldr	r3, [pc, #200]	@ (8004140 <HAL_UART_MspInit+0x2e4>)
 8004078:	2200      	movs	r2, #0
 800407a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800407c:	4b30      	ldr	r3, [pc, #192]	@ (8004140 <HAL_UART_MspInit+0x2e4>)
 800407e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004082:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004084:	4b2e      	ldr	r3, [pc, #184]	@ (8004140 <HAL_UART_MspInit+0x2e4>)
 8004086:	2200      	movs	r2, #0
 8004088:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800408a:	4b2d      	ldr	r3, [pc, #180]	@ (8004140 <HAL_UART_MspInit+0x2e4>)
 800408c:	2200      	movs	r2, #0
 800408e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8004090:	4b2b      	ldr	r3, [pc, #172]	@ (8004140 <HAL_UART_MspInit+0x2e4>)
 8004092:	2200      	movs	r2, #0
 8004094:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004096:	4b2a      	ldr	r3, [pc, #168]	@ (8004140 <HAL_UART_MspInit+0x2e4>)
 8004098:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800409c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800409e:	4b28      	ldr	r3, [pc, #160]	@ (8004140 <HAL_UART_MspInit+0x2e4>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80040a4:	4826      	ldr	r0, [pc, #152]	@ (8004140 <HAL_UART_MspInit+0x2e4>)
 80040a6:	f001 f93b 	bl	8005320 <HAL_DMA_Init>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80040b0:	f7fe f94e 	bl	8002350 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a22      	ldr	r2, [pc, #136]	@ (8004140 <HAL_UART_MspInit+0x2e4>)
 80040b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80040ba:	4a21      	ldr	r2, [pc, #132]	@ (8004140 <HAL_UART_MspInit+0x2e4>)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80040c0:	4b21      	ldr	r3, [pc, #132]	@ (8004148 <HAL_UART_MspInit+0x2ec>)
 80040c2:	4a22      	ldr	r2, [pc, #136]	@ (800414c <HAL_UART_MspInit+0x2f0>)
 80040c4:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80040c6:	4b20      	ldr	r3, [pc, #128]	@ (8004148 <HAL_UART_MspInit+0x2ec>)
 80040c8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80040cc:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004148 <HAL_UART_MspInit+0x2ec>)
 80040d0:	2240      	movs	r2, #64	@ 0x40
 80040d2:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004148 <HAL_UART_MspInit+0x2ec>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040da:	4b1b      	ldr	r3, [pc, #108]	@ (8004148 <HAL_UART_MspInit+0x2ec>)
 80040dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040e0:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040e2:	4b19      	ldr	r3, [pc, #100]	@ (8004148 <HAL_UART_MspInit+0x2ec>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040e8:	4b17      	ldr	r3, [pc, #92]	@ (8004148 <HAL_UART_MspInit+0x2ec>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80040ee:	4b16      	ldr	r3, [pc, #88]	@ (8004148 <HAL_UART_MspInit+0x2ec>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80040f4:	4b14      	ldr	r3, [pc, #80]	@ (8004148 <HAL_UART_MspInit+0x2ec>)
 80040f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80040fa:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040fc:	4b12      	ldr	r3, [pc, #72]	@ (8004148 <HAL_UART_MspInit+0x2ec>)
 80040fe:	2200      	movs	r2, #0
 8004100:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004102:	4811      	ldr	r0, [pc, #68]	@ (8004148 <HAL_UART_MspInit+0x2ec>)
 8004104:	f001 f90c 	bl	8005320 <HAL_DMA_Init>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_UART_MspInit+0x2b6>
      Error_Handler();
 800410e:	f7fe f91f 	bl	8002350 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a0c      	ldr	r2, [pc, #48]	@ (8004148 <HAL_UART_MspInit+0x2ec>)
 8004116:	639a      	str	r2, [r3, #56]	@ 0x38
 8004118:	4a0b      	ldr	r2, [pc, #44]	@ (8004148 <HAL_UART_MspInit+0x2ec>)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800411e:	2200      	movs	r2, #0
 8004120:	2100      	movs	r1, #0
 8004122:	2035      	movs	r0, #53	@ 0x35
 8004124:	f001 f8c5 	bl	80052b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004128:	2035      	movs	r0, #53	@ 0x35
 800412a:	f001 f8de 	bl	80052ea <HAL_NVIC_EnableIRQ>
}
 800412e:	e2af      	b.n	8004690 <HAL_UART_MspInit+0x834>
 8004130:	40005000 	.word	0x40005000
 8004134:	40023800 	.word	0x40023800
 8004138:	40020800 	.word	0x40020800
 800413c:	40020c00 	.word	0x40020c00
 8004140:	20000b54 	.word	0x20000b54
 8004144:	40026010 	.word	0x40026010
 8004148:	20000bb4 	.word	0x20000bb4
 800414c:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a96      	ldr	r2, [pc, #600]	@ (80043b0 <HAL_UART_MspInit+0x554>)
 8004156:	4293      	cmp	r3, r2
 8004158:	f040 8092 	bne.w	8004280 <HAL_UART_MspInit+0x424>
    __HAL_RCC_USART1_CLK_ENABLE();
 800415c:	2300      	movs	r3, #0
 800415e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004160:	4b94      	ldr	r3, [pc, #592]	@ (80043b4 <HAL_UART_MspInit+0x558>)
 8004162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004164:	4a93      	ldr	r2, [pc, #588]	@ (80043b4 <HAL_UART_MspInit+0x558>)
 8004166:	f043 0310 	orr.w	r3, r3, #16
 800416a:	6453      	str	r3, [r2, #68]	@ 0x44
 800416c:	4b91      	ldr	r3, [pc, #580]	@ (80043b4 <HAL_UART_MspInit+0x558>)
 800416e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004178:	2300      	movs	r3, #0
 800417a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800417c:	4b8d      	ldr	r3, [pc, #564]	@ (80043b4 <HAL_UART_MspInit+0x558>)
 800417e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004180:	4a8c      	ldr	r2, [pc, #560]	@ (80043b4 <HAL_UART_MspInit+0x558>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6313      	str	r3, [r2, #48]	@ 0x30
 8004188:	4b8a      	ldr	r3, [pc, #552]	@ (80043b4 <HAL_UART_MspInit+0x558>)
 800418a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004194:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004198:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800419a:	2302      	movs	r3, #2
 800419c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a2:	2303      	movs	r3, #3
 80041a4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041a6:	2307      	movs	r3, #7
 80041a8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041aa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80041ae:	4619      	mov	r1, r3
 80041b0:	4881      	ldr	r0, [pc, #516]	@ (80043b8 <HAL_UART_MspInit+0x55c>)
 80041b2:	f002 fdf7 	bl	8006da4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80041b6:	4b81      	ldr	r3, [pc, #516]	@ (80043bc <HAL_UART_MspInit+0x560>)
 80041b8:	4a81      	ldr	r2, [pc, #516]	@ (80043c0 <HAL_UART_MspInit+0x564>)
 80041ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80041bc:	4b7f      	ldr	r3, [pc, #508]	@ (80043bc <HAL_UART_MspInit+0x560>)
 80041be:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80041c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041c4:	4b7d      	ldr	r3, [pc, #500]	@ (80043bc <HAL_UART_MspInit+0x560>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041ca:	4b7c      	ldr	r3, [pc, #496]	@ (80043bc <HAL_UART_MspInit+0x560>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041d0:	4b7a      	ldr	r3, [pc, #488]	@ (80043bc <HAL_UART_MspInit+0x560>)
 80041d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041d8:	4b78      	ldr	r3, [pc, #480]	@ (80043bc <HAL_UART_MspInit+0x560>)
 80041da:	2200      	movs	r2, #0
 80041dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041de:	4b77      	ldr	r3, [pc, #476]	@ (80043bc <HAL_UART_MspInit+0x560>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80041e4:	4b75      	ldr	r3, [pc, #468]	@ (80043bc <HAL_UART_MspInit+0x560>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041ea:	4b74      	ldr	r3, [pc, #464]	@ (80043bc <HAL_UART_MspInit+0x560>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041f0:	4b72      	ldr	r3, [pc, #456]	@ (80043bc <HAL_UART_MspInit+0x560>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80041f6:	4871      	ldr	r0, [pc, #452]	@ (80043bc <HAL_UART_MspInit+0x560>)
 80041f8:	f001 f892 	bl	8005320 <HAL_DMA_Init>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_UART_MspInit+0x3aa>
      Error_Handler();
 8004202:	f7fe f8a5 	bl	8002350 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a6c      	ldr	r2, [pc, #432]	@ (80043bc <HAL_UART_MspInit+0x560>)
 800420a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800420c:	4a6b      	ldr	r2, [pc, #428]	@ (80043bc <HAL_UART_MspInit+0x560>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004212:	4b6c      	ldr	r3, [pc, #432]	@ (80043c4 <HAL_UART_MspInit+0x568>)
 8004214:	4a6c      	ldr	r2, [pc, #432]	@ (80043c8 <HAL_UART_MspInit+0x56c>)
 8004216:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004218:	4b6a      	ldr	r3, [pc, #424]	@ (80043c4 <HAL_UART_MspInit+0x568>)
 800421a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800421e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004220:	4b68      	ldr	r3, [pc, #416]	@ (80043c4 <HAL_UART_MspInit+0x568>)
 8004222:	2240      	movs	r2, #64	@ 0x40
 8004224:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004226:	4b67      	ldr	r3, [pc, #412]	@ (80043c4 <HAL_UART_MspInit+0x568>)
 8004228:	2200      	movs	r2, #0
 800422a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800422c:	4b65      	ldr	r3, [pc, #404]	@ (80043c4 <HAL_UART_MspInit+0x568>)
 800422e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004232:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004234:	4b63      	ldr	r3, [pc, #396]	@ (80043c4 <HAL_UART_MspInit+0x568>)
 8004236:	2200      	movs	r2, #0
 8004238:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800423a:	4b62      	ldr	r3, [pc, #392]	@ (80043c4 <HAL_UART_MspInit+0x568>)
 800423c:	2200      	movs	r2, #0
 800423e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004240:	4b60      	ldr	r3, [pc, #384]	@ (80043c4 <HAL_UART_MspInit+0x568>)
 8004242:	2200      	movs	r2, #0
 8004244:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004246:	4b5f      	ldr	r3, [pc, #380]	@ (80043c4 <HAL_UART_MspInit+0x568>)
 8004248:	2200      	movs	r2, #0
 800424a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800424c:	4b5d      	ldr	r3, [pc, #372]	@ (80043c4 <HAL_UART_MspInit+0x568>)
 800424e:	2200      	movs	r2, #0
 8004250:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004252:	485c      	ldr	r0, [pc, #368]	@ (80043c4 <HAL_UART_MspInit+0x568>)
 8004254:	f001 f864 	bl	8005320 <HAL_DMA_Init>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_UART_MspInit+0x406>
      Error_Handler();
 800425e:	f7fe f877 	bl	8002350 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a57      	ldr	r2, [pc, #348]	@ (80043c4 <HAL_UART_MspInit+0x568>)
 8004266:	639a      	str	r2, [r3, #56]	@ 0x38
 8004268:	4a56      	ldr	r2, [pc, #344]	@ (80043c4 <HAL_UART_MspInit+0x568>)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800426e:	2200      	movs	r2, #0
 8004270:	2100      	movs	r1, #0
 8004272:	2025      	movs	r0, #37	@ 0x25
 8004274:	f001 f81d 	bl	80052b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004278:	2025      	movs	r0, #37	@ 0x25
 800427a:	f001 f836 	bl	80052ea <HAL_NVIC_EnableIRQ>
}
 800427e:	e207      	b.n	8004690 <HAL_UART_MspInit+0x834>
  else if(uartHandle->Instance==USART2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a51      	ldr	r2, [pc, #324]	@ (80043cc <HAL_UART_MspInit+0x570>)
 8004286:	4293      	cmp	r3, r2
 8004288:	f040 80ac 	bne.w	80043e4 <HAL_UART_MspInit+0x588>
    __HAL_RCC_USART2_CLK_ENABLE();
 800428c:	2300      	movs	r3, #0
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004290:	4b48      	ldr	r3, [pc, #288]	@ (80043b4 <HAL_UART_MspInit+0x558>)
 8004292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004294:	4a47      	ldr	r2, [pc, #284]	@ (80043b4 <HAL_UART_MspInit+0x558>)
 8004296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800429a:	6413      	str	r3, [r2, #64]	@ 0x40
 800429c:	4b45      	ldr	r3, [pc, #276]	@ (80043b4 <HAL_UART_MspInit+0x558>)
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80042a8:	2300      	movs	r3, #0
 80042aa:	623b      	str	r3, [r7, #32]
 80042ac:	4b41      	ldr	r3, [pc, #260]	@ (80043b4 <HAL_UART_MspInit+0x558>)
 80042ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b0:	4a40      	ldr	r2, [pc, #256]	@ (80043b4 <HAL_UART_MspInit+0x558>)
 80042b2:	f043 0308 	orr.w	r3, r3, #8
 80042b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80042b8:	4b3e      	ldr	r3, [pc, #248]	@ (80043b4 <HAL_UART_MspInit+0x558>)
 80042ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	623b      	str	r3, [r7, #32]
 80042c2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80042c4:	2360      	movs	r3, #96	@ 0x60
 80042c6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c8:	2302      	movs	r3, #2
 80042ca:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042d0:	2303      	movs	r3, #3
 80042d2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80042d4:	2307      	movs	r3, #7
 80042d6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042d8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80042dc:	4619      	mov	r1, r3
 80042de:	483c      	ldr	r0, [pc, #240]	@ (80043d0 <HAL_UART_MspInit+0x574>)
 80042e0:	f002 fd60 	bl	8006da4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80042e4:	4b3b      	ldr	r3, [pc, #236]	@ (80043d4 <HAL_UART_MspInit+0x578>)
 80042e6:	4a3c      	ldr	r2, [pc, #240]	@ (80043d8 <HAL_UART_MspInit+0x57c>)
 80042e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80042ea:	4b3a      	ldr	r3, [pc, #232]	@ (80043d4 <HAL_UART_MspInit+0x578>)
 80042ec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80042f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042f2:	4b38      	ldr	r3, [pc, #224]	@ (80043d4 <HAL_UART_MspInit+0x578>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042f8:	4b36      	ldr	r3, [pc, #216]	@ (80043d4 <HAL_UART_MspInit+0x578>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042fe:	4b35      	ldr	r3, [pc, #212]	@ (80043d4 <HAL_UART_MspInit+0x578>)
 8004300:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004304:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004306:	4b33      	ldr	r3, [pc, #204]	@ (80043d4 <HAL_UART_MspInit+0x578>)
 8004308:	2200      	movs	r2, #0
 800430a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800430c:	4b31      	ldr	r3, [pc, #196]	@ (80043d4 <HAL_UART_MspInit+0x578>)
 800430e:	2200      	movs	r2, #0
 8004310:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004312:	4b30      	ldr	r3, [pc, #192]	@ (80043d4 <HAL_UART_MspInit+0x578>)
 8004314:	2200      	movs	r2, #0
 8004316:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004318:	4b2e      	ldr	r3, [pc, #184]	@ (80043d4 <HAL_UART_MspInit+0x578>)
 800431a:	2200      	movs	r2, #0
 800431c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800431e:	4b2d      	ldr	r3, [pc, #180]	@ (80043d4 <HAL_UART_MspInit+0x578>)
 8004320:	2200      	movs	r2, #0
 8004322:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004324:	482b      	ldr	r0, [pc, #172]	@ (80043d4 <HAL_UART_MspInit+0x578>)
 8004326:	f000 fffb 	bl	8005320 <HAL_DMA_Init>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_UART_MspInit+0x4d8>
      Error_Handler();
 8004330:	f7fe f80e 	bl	8002350 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a27      	ldr	r2, [pc, #156]	@ (80043d4 <HAL_UART_MspInit+0x578>)
 8004338:	63da      	str	r2, [r3, #60]	@ 0x3c
 800433a:	4a26      	ldr	r2, [pc, #152]	@ (80043d4 <HAL_UART_MspInit+0x578>)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004340:	4b26      	ldr	r3, [pc, #152]	@ (80043dc <HAL_UART_MspInit+0x580>)
 8004342:	4a27      	ldr	r2, [pc, #156]	@ (80043e0 <HAL_UART_MspInit+0x584>)
 8004344:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004346:	4b25      	ldr	r3, [pc, #148]	@ (80043dc <HAL_UART_MspInit+0x580>)
 8004348:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800434c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800434e:	4b23      	ldr	r3, [pc, #140]	@ (80043dc <HAL_UART_MspInit+0x580>)
 8004350:	2240      	movs	r2, #64	@ 0x40
 8004352:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004354:	4b21      	ldr	r3, [pc, #132]	@ (80043dc <HAL_UART_MspInit+0x580>)
 8004356:	2200      	movs	r2, #0
 8004358:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800435a:	4b20      	ldr	r3, [pc, #128]	@ (80043dc <HAL_UART_MspInit+0x580>)
 800435c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004360:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004362:	4b1e      	ldr	r3, [pc, #120]	@ (80043dc <HAL_UART_MspInit+0x580>)
 8004364:	2200      	movs	r2, #0
 8004366:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004368:	4b1c      	ldr	r3, [pc, #112]	@ (80043dc <HAL_UART_MspInit+0x580>)
 800436a:	2200      	movs	r2, #0
 800436c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800436e:	4b1b      	ldr	r3, [pc, #108]	@ (80043dc <HAL_UART_MspInit+0x580>)
 8004370:	2200      	movs	r2, #0
 8004372:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004374:	4b19      	ldr	r3, [pc, #100]	@ (80043dc <HAL_UART_MspInit+0x580>)
 8004376:	2200      	movs	r2, #0
 8004378:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800437a:	4b18      	ldr	r3, [pc, #96]	@ (80043dc <HAL_UART_MspInit+0x580>)
 800437c:	2200      	movs	r2, #0
 800437e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004380:	4816      	ldr	r0, [pc, #88]	@ (80043dc <HAL_UART_MspInit+0x580>)
 8004382:	f000 ffcd 	bl	8005320 <HAL_DMA_Init>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_UART_MspInit+0x534>
      Error_Handler();
 800438c:	f7fd ffe0 	bl	8002350 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a12      	ldr	r2, [pc, #72]	@ (80043dc <HAL_UART_MspInit+0x580>)
 8004394:	639a      	str	r2, [r3, #56]	@ 0x38
 8004396:	4a11      	ldr	r2, [pc, #68]	@ (80043dc <HAL_UART_MspInit+0x580>)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800439c:	2200      	movs	r2, #0
 800439e:	2100      	movs	r1, #0
 80043a0:	2026      	movs	r0, #38	@ 0x26
 80043a2:	f000 ff86 	bl	80052b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80043a6:	2026      	movs	r0, #38	@ 0x26
 80043a8:	f000 ff9f 	bl	80052ea <HAL_NVIC_EnableIRQ>
}
 80043ac:	e170      	b.n	8004690 <HAL_UART_MspInit+0x834>
 80043ae:	bf00      	nop
 80043b0:	40011000 	.word	0x40011000
 80043b4:	40023800 	.word	0x40023800
 80043b8:	40020000 	.word	0x40020000
 80043bc:	20000c14 	.word	0x20000c14
 80043c0:	40026440 	.word	0x40026440
 80043c4:	20000c74 	.word	0x20000c74
 80043c8:	400264b8 	.word	0x400264b8
 80043cc:	40004400 	.word	0x40004400
 80043d0:	40020c00 	.word	0x40020c00
 80043d4:	20000cd4 	.word	0x20000cd4
 80043d8:	40026088 	.word	0x40026088
 80043dc:	20000d34 	.word	0x20000d34
 80043e0:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a5a      	ldr	r2, [pc, #360]	@ (8004554 <HAL_UART_MspInit+0x6f8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	f040 80c2 	bne.w	8004574 <HAL_UART_MspInit+0x718>
    __HAL_RCC_USART3_CLK_ENABLE();
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	4b58      	ldr	r3, [pc, #352]	@ (8004558 <HAL_UART_MspInit+0x6fc>)
 80043f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f8:	4a57      	ldr	r2, [pc, #348]	@ (8004558 <HAL_UART_MspInit+0x6fc>)
 80043fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8004400:	4b55      	ldr	r3, [pc, #340]	@ (8004558 <HAL_UART_MspInit+0x6fc>)
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800440c:	2300      	movs	r3, #0
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	4b51      	ldr	r3, [pc, #324]	@ (8004558 <HAL_UART_MspInit+0x6fc>)
 8004412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004414:	4a50      	ldr	r2, [pc, #320]	@ (8004558 <HAL_UART_MspInit+0x6fc>)
 8004416:	f043 0302 	orr.w	r3, r3, #2
 800441a:	6313      	str	r3, [r2, #48]	@ 0x30
 800441c:	4b4e      	ldr	r3, [pc, #312]	@ (8004558 <HAL_UART_MspInit+0x6fc>)
 800441e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	4b4a      	ldr	r3, [pc, #296]	@ (8004558 <HAL_UART_MspInit+0x6fc>)
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	4a49      	ldr	r2, [pc, #292]	@ (8004558 <HAL_UART_MspInit+0x6fc>)
 8004432:	f043 0308 	orr.w	r3, r3, #8
 8004436:	6313      	str	r3, [r2, #48]	@ 0x30
 8004438:	4b47      	ldr	r3, [pc, #284]	@ (8004558 <HAL_UART_MspInit+0x6fc>)
 800443a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004444:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004448:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444a:	2302      	movs	r3, #2
 800444c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444e:	2300      	movs	r3, #0
 8004450:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004452:	2303      	movs	r3, #3
 8004454:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004456:	2307      	movs	r3, #7
 8004458:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800445a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800445e:	4619      	mov	r1, r3
 8004460:	483e      	ldr	r0, [pc, #248]	@ (800455c <HAL_UART_MspInit+0x700>)
 8004462:	f002 fc9f 	bl	8006da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004466:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800446a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446c:	2302      	movs	r3, #2
 800446e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004470:	2300      	movs	r3, #0
 8004472:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004474:	2303      	movs	r3, #3
 8004476:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004478:	2307      	movs	r3, #7
 800447a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800447c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004480:	4619      	mov	r1, r3
 8004482:	4837      	ldr	r0, [pc, #220]	@ (8004560 <HAL_UART_MspInit+0x704>)
 8004484:	f002 fc8e 	bl	8006da4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004488:	4b36      	ldr	r3, [pc, #216]	@ (8004564 <HAL_UART_MspInit+0x708>)
 800448a:	4a37      	ldr	r2, [pc, #220]	@ (8004568 <HAL_UART_MspInit+0x70c>)
 800448c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800448e:	4b35      	ldr	r3, [pc, #212]	@ (8004564 <HAL_UART_MspInit+0x708>)
 8004490:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004494:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004496:	4b33      	ldr	r3, [pc, #204]	@ (8004564 <HAL_UART_MspInit+0x708>)
 8004498:	2200      	movs	r2, #0
 800449a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800449c:	4b31      	ldr	r3, [pc, #196]	@ (8004564 <HAL_UART_MspInit+0x708>)
 800449e:	2200      	movs	r2, #0
 80044a0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044a2:	4b30      	ldr	r3, [pc, #192]	@ (8004564 <HAL_UART_MspInit+0x708>)
 80044a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044aa:	4b2e      	ldr	r3, [pc, #184]	@ (8004564 <HAL_UART_MspInit+0x708>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004564 <HAL_UART_MspInit+0x708>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80044b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004564 <HAL_UART_MspInit+0x708>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044bc:	4b29      	ldr	r3, [pc, #164]	@ (8004564 <HAL_UART_MspInit+0x708>)
 80044be:	2200      	movs	r2, #0
 80044c0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044c2:	4b28      	ldr	r3, [pc, #160]	@ (8004564 <HAL_UART_MspInit+0x708>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80044c8:	4826      	ldr	r0, [pc, #152]	@ (8004564 <HAL_UART_MspInit+0x708>)
 80044ca:	f000 ff29 	bl	8005320 <HAL_DMA_Init>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_UART_MspInit+0x67c>
      Error_Handler();
 80044d4:	f7fd ff3c 	bl	8002350 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a22      	ldr	r2, [pc, #136]	@ (8004564 <HAL_UART_MspInit+0x708>)
 80044dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80044de:	4a21      	ldr	r2, [pc, #132]	@ (8004564 <HAL_UART_MspInit+0x708>)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80044e4:	4b21      	ldr	r3, [pc, #132]	@ (800456c <HAL_UART_MspInit+0x710>)
 80044e6:	4a22      	ldr	r2, [pc, #136]	@ (8004570 <HAL_UART_MspInit+0x714>)
 80044e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80044ea:	4b20      	ldr	r3, [pc, #128]	@ (800456c <HAL_UART_MspInit+0x710>)
 80044ec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80044f0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044f2:	4b1e      	ldr	r3, [pc, #120]	@ (800456c <HAL_UART_MspInit+0x710>)
 80044f4:	2240      	movs	r2, #64	@ 0x40
 80044f6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044f8:	4b1c      	ldr	r3, [pc, #112]	@ (800456c <HAL_UART_MspInit+0x710>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044fe:	4b1b      	ldr	r3, [pc, #108]	@ (800456c <HAL_UART_MspInit+0x710>)
 8004500:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004504:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004506:	4b19      	ldr	r3, [pc, #100]	@ (800456c <HAL_UART_MspInit+0x710>)
 8004508:	2200      	movs	r2, #0
 800450a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800450c:	4b17      	ldr	r3, [pc, #92]	@ (800456c <HAL_UART_MspInit+0x710>)
 800450e:	2200      	movs	r2, #0
 8004510:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004512:	4b16      	ldr	r3, [pc, #88]	@ (800456c <HAL_UART_MspInit+0x710>)
 8004514:	2200      	movs	r2, #0
 8004516:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004518:	4b14      	ldr	r3, [pc, #80]	@ (800456c <HAL_UART_MspInit+0x710>)
 800451a:	2200      	movs	r2, #0
 800451c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800451e:	4b13      	ldr	r3, [pc, #76]	@ (800456c <HAL_UART_MspInit+0x710>)
 8004520:	2200      	movs	r2, #0
 8004522:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004524:	4811      	ldr	r0, [pc, #68]	@ (800456c <HAL_UART_MspInit+0x710>)
 8004526:	f000 fefb 	bl	8005320 <HAL_DMA_Init>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_UART_MspInit+0x6d8>
      Error_Handler();
 8004530:	f7fd ff0e 	bl	8002350 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a0d      	ldr	r2, [pc, #52]	@ (800456c <HAL_UART_MspInit+0x710>)
 8004538:	639a      	str	r2, [r3, #56]	@ 0x38
 800453a:	4a0c      	ldr	r2, [pc, #48]	@ (800456c <HAL_UART_MspInit+0x710>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004540:	2200      	movs	r2, #0
 8004542:	2100      	movs	r1, #0
 8004544:	2027      	movs	r0, #39	@ 0x27
 8004546:	f000 feb4 	bl	80052b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800454a:	2027      	movs	r0, #39	@ 0x27
 800454c:	f000 fecd 	bl	80052ea <HAL_NVIC_EnableIRQ>
}
 8004550:	e09e      	b.n	8004690 <HAL_UART_MspInit+0x834>
 8004552:	bf00      	nop
 8004554:	40004800 	.word	0x40004800
 8004558:	40023800 	.word	0x40023800
 800455c:	40020400 	.word	0x40020400
 8004560:	40020c00 	.word	0x40020c00
 8004564:	20000d94 	.word	0x20000d94
 8004568:	40026028 	.word	0x40026028
 800456c:	20000df4 	.word	0x20000df4
 8004570:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a47      	ldr	r2, [pc, #284]	@ (8004698 <HAL_UART_MspInit+0x83c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	f040 8088 	bne.w	8004690 <HAL_UART_MspInit+0x834>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004580:	2300      	movs	r3, #0
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	4b45      	ldr	r3, [pc, #276]	@ (800469c <HAL_UART_MspInit+0x840>)
 8004586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004588:	4a44      	ldr	r2, [pc, #272]	@ (800469c <HAL_UART_MspInit+0x840>)
 800458a:	f043 0320 	orr.w	r3, r3, #32
 800458e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004590:	4b42      	ldr	r3, [pc, #264]	@ (800469c <HAL_UART_MspInit+0x840>)
 8004592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	4b3e      	ldr	r3, [pc, #248]	@ (800469c <HAL_UART_MspInit+0x840>)
 80045a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a4:	4a3d      	ldr	r2, [pc, #244]	@ (800469c <HAL_UART_MspInit+0x840>)
 80045a6:	f043 0304 	orr.w	r3, r3, #4
 80045aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ac:	4b3b      	ldr	r3, [pc, #236]	@ (800469c <HAL_UART_MspInit+0x840>)
 80045ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80045b8:	23c0      	movs	r3, #192	@ 0xc0
 80045ba:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045bc:	2302      	movs	r3, #2
 80045be:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c4:	2303      	movs	r3, #3
 80045c6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80045c8:	2308      	movs	r3, #8
 80045ca:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045cc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80045d0:	4619      	mov	r1, r3
 80045d2:	4833      	ldr	r0, [pc, #204]	@ (80046a0 <HAL_UART_MspInit+0x844>)
 80045d4:	f002 fbe6 	bl	8006da4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80045d8:	4b32      	ldr	r3, [pc, #200]	@ (80046a4 <HAL_UART_MspInit+0x848>)
 80045da:	4a33      	ldr	r2, [pc, #204]	@ (80046a8 <HAL_UART_MspInit+0x84c>)
 80045dc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80045de:	4b31      	ldr	r3, [pc, #196]	@ (80046a4 <HAL_UART_MspInit+0x848>)
 80045e0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80045e4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045e6:	4b2f      	ldr	r3, [pc, #188]	@ (80046a4 <HAL_UART_MspInit+0x848>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045ec:	4b2d      	ldr	r3, [pc, #180]	@ (80046a4 <HAL_UART_MspInit+0x848>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045f2:	4b2c      	ldr	r3, [pc, #176]	@ (80046a4 <HAL_UART_MspInit+0x848>)
 80045f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045f8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045fa:	4b2a      	ldr	r3, [pc, #168]	@ (80046a4 <HAL_UART_MspInit+0x848>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004600:	4b28      	ldr	r3, [pc, #160]	@ (80046a4 <HAL_UART_MspInit+0x848>)
 8004602:	2200      	movs	r2, #0
 8004604:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004606:	4b27      	ldr	r3, [pc, #156]	@ (80046a4 <HAL_UART_MspInit+0x848>)
 8004608:	2200      	movs	r2, #0
 800460a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800460c:	4b25      	ldr	r3, [pc, #148]	@ (80046a4 <HAL_UART_MspInit+0x848>)
 800460e:	2200      	movs	r2, #0
 8004610:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004612:	4b24      	ldr	r3, [pc, #144]	@ (80046a4 <HAL_UART_MspInit+0x848>)
 8004614:	2200      	movs	r2, #0
 8004616:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004618:	4822      	ldr	r0, [pc, #136]	@ (80046a4 <HAL_UART_MspInit+0x848>)
 800461a:	f000 fe81 	bl	8005320 <HAL_DMA_Init>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_UART_MspInit+0x7cc>
      Error_Handler();
 8004624:	f7fd fe94 	bl	8002350 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a1e      	ldr	r2, [pc, #120]	@ (80046a4 <HAL_UART_MspInit+0x848>)
 800462c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800462e:	4a1d      	ldr	r2, [pc, #116]	@ (80046a4 <HAL_UART_MspInit+0x848>)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004634:	4b1d      	ldr	r3, [pc, #116]	@ (80046ac <HAL_UART_MspInit+0x850>)
 8004636:	4a1e      	ldr	r2, [pc, #120]	@ (80046b0 <HAL_UART_MspInit+0x854>)
 8004638:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800463a:	4b1c      	ldr	r3, [pc, #112]	@ (80046ac <HAL_UART_MspInit+0x850>)
 800463c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004640:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004642:	4b1a      	ldr	r3, [pc, #104]	@ (80046ac <HAL_UART_MspInit+0x850>)
 8004644:	2240      	movs	r2, #64	@ 0x40
 8004646:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004648:	4b18      	ldr	r3, [pc, #96]	@ (80046ac <HAL_UART_MspInit+0x850>)
 800464a:	2200      	movs	r2, #0
 800464c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800464e:	4b17      	ldr	r3, [pc, #92]	@ (80046ac <HAL_UART_MspInit+0x850>)
 8004650:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004654:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004656:	4b15      	ldr	r3, [pc, #84]	@ (80046ac <HAL_UART_MspInit+0x850>)
 8004658:	2200      	movs	r2, #0
 800465a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800465c:	4b13      	ldr	r3, [pc, #76]	@ (80046ac <HAL_UART_MspInit+0x850>)
 800465e:	2200      	movs	r2, #0
 8004660:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004662:	4b12      	ldr	r3, [pc, #72]	@ (80046ac <HAL_UART_MspInit+0x850>)
 8004664:	2200      	movs	r2, #0
 8004666:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004668:	4b10      	ldr	r3, [pc, #64]	@ (80046ac <HAL_UART_MspInit+0x850>)
 800466a:	2200      	movs	r2, #0
 800466c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800466e:	4b0f      	ldr	r3, [pc, #60]	@ (80046ac <HAL_UART_MspInit+0x850>)
 8004670:	2200      	movs	r2, #0
 8004672:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004674:	480d      	ldr	r0, [pc, #52]	@ (80046ac <HAL_UART_MspInit+0x850>)
 8004676:	f000 fe53 	bl	8005320 <HAL_DMA_Init>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <HAL_UART_MspInit+0x828>
      Error_Handler();
 8004680:	f7fd fe66 	bl	8002350 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a09      	ldr	r2, [pc, #36]	@ (80046ac <HAL_UART_MspInit+0x850>)
 8004688:	639a      	str	r2, [r3, #56]	@ 0x38
 800468a:	4a08      	ldr	r2, [pc, #32]	@ (80046ac <HAL_UART_MspInit+0x850>)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004690:	bf00      	nop
 8004692:	3758      	adds	r7, #88	@ 0x58
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40011400 	.word	0x40011400
 800469c:	40023800 	.word	0x40023800
 80046a0:	40020800 	.word	0x40020800
 80046a4:	20000e54 	.word	0x20000e54
 80046a8:	40026428 	.word	0x40026428
 80046ac:	20000eb4 	.word	0x20000eb4
 80046b0:	400264a0 	.word	0x400264a0

080046b4 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  


  ldr   sp, =_estack     /* set stack pointer */
 80046b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80046b8:	f7fe fa8a 	bl	8002bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046bc:	480c      	ldr	r0, [pc, #48]	@ (80046f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046be:	490d      	ldr	r1, [pc, #52]	@ (80046f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046c0:	4a0d      	ldr	r2, [pc, #52]	@ (80046f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046c4:	e002      	b.n	80046cc <LoopCopyDataInit>

080046c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046ca:	3304      	adds	r3, #4

080046cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046d0:	d3f9      	bcc.n	80046c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046d2:	4a0a      	ldr	r2, [pc, #40]	@ (80046fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046d4:	4c0a      	ldr	r4, [pc, #40]	@ (8004700 <LoopFillZerobss+0x22>)
  movs r3, #0
 80046d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046d8:	e001      	b.n	80046de <LoopFillZerobss>

080046da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046dc:	3204      	adds	r2, #4

080046de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046e0:	d3fb      	bcc.n	80046da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046e2:	f010 fd43 	bl	801516c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046e6:	f7fd fd81 	bl	80021ec <main>
  bx  lr    
 80046ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80046ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046f4:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 80046f8:	08019e28 	.word	0x08019e28
  ldr r2, =_sbss
 80046fc:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8004700:	2000b514 	.word	0x2000b514

08004704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004704:	e7fe      	b.n	8004704 <ADC_IRQHandler>

08004706 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <LAN8742_RegisterBusIO+0x28>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d007      	beq.n	800472e <LAN8742_RegisterBusIO+0x28>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <LAN8742_RegisterBusIO+0x28>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d102      	bne.n	8004734 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800472e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004732:	e014      	b.n	800475e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800476a:	b580      	push	{r7, lr}
 800476c:	b086      	sub	sp, #24
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d139      	bne.n	80047fa <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e01c      	b.n	80047da <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	f107 020c 	add.w	r2, r7, #12
 80047a8:	2112      	movs	r1, #18
 80047aa:	6978      	ldr	r0, [r7, #20]
 80047ac:	4798      	blx	r3
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	da03      	bge.n	80047bc <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80047b4:	f06f 0304 	mvn.w	r3, #4
 80047b8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80047ba:	e00b      	b.n	80047d4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d105      	bne.n	80047d4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]
         break;
 80047d2:	e005      	b.n	80047e0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	3301      	adds	r3, #1
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b1f      	cmp	r3, #31
 80047de:	d9df      	bls.n	80047a0 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b1f      	cmp	r3, #31
 80047e6:	d902      	bls.n	80047ee <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80047e8:	f06f 0302 	mvn.w	r3, #2
 80047ec:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d102      	bne.n	80047fa <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80047fa:	693b      	ldr	r3, [r7, #16]
 }
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6810      	ldr	r0, [r2, #0]
 8004818:	f107 020c 	add.w	r2, r7, #12
 800481c:	2101      	movs	r1, #1
 800481e:	4798      	blx	r3
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	da02      	bge.n	800482c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004826:	f06f 0304 	mvn.w	r3, #4
 800482a:	e06e      	b.n	800490a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6810      	ldr	r0, [r2, #0]
 8004834:	f107 020c 	add.w	r2, r7, #12
 8004838:	2101      	movs	r1, #1
 800483a:	4798      	blx	r3
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	da02      	bge.n	8004848 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004842:	f06f 0304 	mvn.w	r3, #4
 8004846:	e060      	b.n	800490a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8004852:	2301      	movs	r3, #1
 8004854:	e059      	b.n	800490a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6810      	ldr	r0, [r2, #0]
 800485e:	f107 020c 	add.w	r2, r7, #12
 8004862:	2100      	movs	r1, #0
 8004864:	4798      	blx	r3
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	da02      	bge.n	8004872 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800486c:	f06f 0304 	mvn.w	r3, #4
 8004870:	e04b      	b.n	800490a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d11b      	bne.n	80048b4 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d006      	beq.n	8004894 <LAN8742_GetLinkState+0x90>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8004890:	2302      	movs	r3, #2
 8004892:	e03a      	b.n	800490a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800489e:	2303      	movs	r3, #3
 80048a0:	e033      	b.n	800490a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80048ac:	2304      	movs	r3, #4
 80048ae:	e02c      	b.n	800490a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80048b0:	2305      	movs	r3, #5
 80048b2:	e02a      	b.n	800490a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6810      	ldr	r0, [r2, #0]
 80048bc:	f107 020c 	add.w	r2, r7, #12
 80048c0:	211f      	movs	r1, #31
 80048c2:	4798      	blx	r3
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	da02      	bge.n	80048d0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80048ca:	f06f 0304 	mvn.w	r3, #4
 80048ce:	e01c      	b.n	800490a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80048da:	2306      	movs	r3, #6
 80048dc:	e015      	b.n	800490a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 031c 	and.w	r3, r3, #28
 80048e4:	2b18      	cmp	r3, #24
 80048e6:	d101      	bne.n	80048ec <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80048e8:	2302      	movs	r3, #2
 80048ea:	e00e      	b.n	800490a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 031c 	and.w	r3, r3, #28
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d101      	bne.n	80048fa <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e007      	b.n	800490a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 031c 	and.w	r3, r3, #28
 8004900:	2b14      	cmp	r3, #20
 8004902:	d101      	bne.n	8004908 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8004904:	2304      	movs	r3, #4
 8004906:	e000      	b.n	800490a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8004908:	2305      	movs	r3, #5
    }
  }
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004918:	4b0e      	ldr	r3, [pc, #56]	@ (8004954 <HAL_Init+0x40>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a0d      	ldr	r2, [pc, #52]	@ (8004954 <HAL_Init+0x40>)
 800491e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004924:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <HAL_Init+0x40>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a0a      	ldr	r2, [pc, #40]	@ (8004954 <HAL_Init+0x40>)
 800492a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800492e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004930:	4b08      	ldr	r3, [pc, #32]	@ (8004954 <HAL_Init+0x40>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a07      	ldr	r2, [pc, #28]	@ (8004954 <HAL_Init+0x40>)
 8004936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800493a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800493c:	2003      	movs	r0, #3
 800493e:	f000 fcad 	bl	800529c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004942:	200f      	movs	r0, #15
 8004944:	f000 f808 	bl	8004958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004948:	f7fd ff6c 	bl	8002824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40023c00 	.word	0x40023c00

08004958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004960:	4b12      	ldr	r3, [pc, #72]	@ (80049ac <HAL_InitTick+0x54>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b12      	ldr	r3, [pc, #72]	@ (80049b0 <HAL_InitTick+0x58>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	4619      	mov	r1, r3
 800496a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800496e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004972:	fbb2 f3f3 	udiv	r3, r2, r3
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fcc5 	bl	8005306 <HAL_SYSTICK_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e00e      	b.n	80049a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b0f      	cmp	r3, #15
 800498a:	d80a      	bhi.n	80049a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800498c:	2200      	movs	r2, #0
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004994:	f000 fc8d 	bl	80052b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004998:	4a06      	ldr	r2, [pc, #24]	@ (80049b4 <HAL_InitTick+0x5c>)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	e000      	b.n	80049a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20000038 	.word	0x20000038
 80049b0:	200000a8 	.word	0x200000a8
 80049b4:	200000a4 	.word	0x200000a4

080049b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049bc:	4b06      	ldr	r3, [pc, #24]	@ (80049d8 <HAL_IncTick+0x20>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <HAL_IncTick+0x24>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4413      	add	r3, r2
 80049c8:	4a04      	ldr	r2, [pc, #16]	@ (80049dc <HAL_IncTick+0x24>)
 80049ca:	6013      	str	r3, [r2, #0]
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	200000a8 	.word	0x200000a8
 80049dc:	20000f14 	.word	0x20000f14

080049e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return uwTick;
 80049e4:	4b03      	ldr	r3, [pc, #12]	@ (80049f4 <HAL_GetTick+0x14>)
 80049e6:	681b      	ldr	r3, [r3, #0]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20000f14 	.word	0x20000f14

080049f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a00:	f7ff ffee 	bl	80049e0 <HAL_GetTick>
 8004a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a10:	d005      	beq.n	8004a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a12:	4b0a      	ldr	r3, [pc, #40]	@ (8004a3c <HAL_Delay+0x44>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a1e:	bf00      	nop
 8004a20:	f7ff ffde 	bl	80049e0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d8f7      	bhi.n	8004a20 <HAL_Delay+0x28>
  {
  }
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	200000a8 	.word	0x200000a8

08004a40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e033      	b.n	8004abe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fc fabc 	bl	8000fdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d118      	bne.n	8004ab0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004a86:	f023 0302 	bic.w	r3, r3, #2
 8004a8a:	f043 0202 	orr.w	r2, r3, #2
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f93a 	bl	8004d0c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	f023 0303 	bic.w	r3, r3, #3
 8004aa6:	f043 0201 	orr.w	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	641a      	str	r2, [r3, #64]	@ 0x40
 8004aae:	e001      	b.n	8004ab4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x1c>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e105      	b.n	8004cf0 <HAL_ADC_ConfigChannel+0x228>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b09      	cmp	r3, #9
 8004af2:	d925      	bls.n	8004b40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68d9      	ldr	r1, [r3, #12]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	461a      	mov	r2, r3
 8004b02:	4613      	mov	r3, r2
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	3b1e      	subs	r3, #30
 8004b0a:	2207      	movs	r2, #7
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	43da      	mvns	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	400a      	ands	r2, r1
 8004b18:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68d9      	ldr	r1, [r3, #12]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	4403      	add	r3, r0
 8004b32:	3b1e      	subs	r3, #30
 8004b34:	409a      	lsls	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	60da      	str	r2, [r3, #12]
 8004b3e:	e022      	b.n	8004b86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6919      	ldr	r1, [r3, #16]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4613      	mov	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	4413      	add	r3, r2
 8004b54:	2207      	movs	r2, #7
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43da      	mvns	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	400a      	ands	r2, r1
 8004b62:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6919      	ldr	r1, [r3, #16]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	4618      	mov	r0, r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	4403      	add	r3, r0
 8004b7c:	409a      	lsls	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b06      	cmp	r3, #6
 8004b8c:	d824      	bhi.n	8004bd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3b05      	subs	r3, #5
 8004ba0:	221f      	movs	r2, #31
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43da      	mvns	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	400a      	ands	r2, r1
 8004bae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	3b05      	subs	r3, #5
 8004bca:	fa00 f203 	lsl.w	r2, r0, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004bd6:	e04c      	b.n	8004c72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b0c      	cmp	r3, #12
 8004bde:	d824      	bhi.n	8004c2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	3b23      	subs	r3, #35	@ 0x23
 8004bf2:	221f      	movs	r2, #31
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	43da      	mvns	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	400a      	ands	r2, r1
 8004c00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	4618      	mov	r0, r3
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	3b23      	subs	r3, #35	@ 0x23
 8004c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c28:	e023      	b.n	8004c72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	3b41      	subs	r3, #65	@ 0x41
 8004c3c:	221f      	movs	r2, #31
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43da      	mvns	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	400a      	ands	r2, r1
 8004c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	4618      	mov	r0, r3
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	3b41      	subs	r3, #65	@ 0x41
 8004c66:	fa00 f203 	lsl.w	r2, r0, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c72:	4b22      	ldr	r3, [pc, #136]	@ (8004cfc <HAL_ADC_ConfigChannel+0x234>)
 8004c74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a21      	ldr	r2, [pc, #132]	@ (8004d00 <HAL_ADC_ConfigChannel+0x238>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d109      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x1cc>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b12      	cmp	r3, #18
 8004c86:	d105      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a19      	ldr	r2, [pc, #100]	@ (8004d00 <HAL_ADC_ConfigChannel+0x238>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d123      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x21e>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b10      	cmp	r3, #16
 8004ca4:	d003      	beq.n	8004cae <HAL_ADC_ConfigChannel+0x1e6>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b11      	cmp	r3, #17
 8004cac:	d11b      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b10      	cmp	r3, #16
 8004cc0:	d111      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004cc2:	4b10      	ldr	r3, [pc, #64]	@ (8004d04 <HAL_ADC_ConfigChannel+0x23c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a10      	ldr	r2, [pc, #64]	@ (8004d08 <HAL_ADC_ConfigChannel+0x240>)
 8004cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ccc:	0c9a      	lsrs	r2, r3, #18
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004cd8:	e002      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f9      	bne.n	8004cda <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	40012300 	.word	0x40012300
 8004d00:	40012000 	.word	0x40012000
 8004d04:	20000038 	.word	0x20000038
 8004d08:	431bde83 	.word	0x431bde83

08004d0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d14:	4b79      	ldr	r3, [pc, #484]	@ (8004efc <ADC_Init+0x1f0>)
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6859      	ldr	r1, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	021a      	lsls	r2, r3, #8
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6859      	ldr	r1, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6899      	ldr	r1, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9e:	4a58      	ldr	r2, [pc, #352]	@ (8004f00 <ADC_Init+0x1f4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d022      	beq.n	8004dea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004db2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6899      	ldr	r1, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004dd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6899      	ldr	r1, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	609a      	str	r2, [r3, #8]
 8004de8:	e00f      	b.n	8004e0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004e08:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0202 	bic.w	r2, r2, #2
 8004e18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6899      	ldr	r1, [r3, #8]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	7e1b      	ldrb	r3, [r3, #24]
 8004e24:	005a      	lsls	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01b      	beq.n	8004e70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e46:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004e56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6859      	ldr	r1, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	3b01      	subs	r3, #1
 8004e64:	035a      	lsls	r2, r3, #13
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	605a      	str	r2, [r3, #4]
 8004e6e:	e007      	b.n	8004e80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e7e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	051a      	lsls	r2, r3, #20
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004eb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6899      	ldr	r1, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ec2:	025a      	lsls	r2, r3, #9
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6899      	ldr	r1, [r3, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	029a      	lsls	r2, r3, #10
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	609a      	str	r2, [r3, #8]
}
 8004ef0:	bf00      	nop
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	40012300 	.word	0x40012300
 8004f00:	0f000001 	.word	0x0f000001

08004f04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e0ed      	b.n	80050f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fc f90a 	bl	800113c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f38:	f7ff fd52 	bl	80049e0 <HAL_GetTick>
 8004f3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f3e:	e012      	b.n	8004f66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f40:	f7ff fd4e 	bl	80049e0 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b0a      	cmp	r3, #10
 8004f4c:	d90b      	bls.n	8004f66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2205      	movs	r2, #5
 8004f5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e0c5      	b.n	80050f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0e5      	beq.n	8004f40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0202 	bic.w	r2, r2, #2
 8004f82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f84:	f7ff fd2c 	bl	80049e0 <HAL_GetTick>
 8004f88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004f8a:	e012      	b.n	8004fb2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f8c:	f7ff fd28 	bl	80049e0 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b0a      	cmp	r3, #10
 8004f98:	d90b      	bls.n	8004fb2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2205      	movs	r2, #5
 8004faa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e09f      	b.n	80050f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e5      	bne.n	8004f8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	7e1b      	ldrb	r3, [r3, #24]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d108      	bne.n	8004fda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	e007      	b.n	8004fea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fe8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	7e5b      	ldrb	r3, [r3, #25]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d108      	bne.n	8005004 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	e007      	b.n	8005014 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005012:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	7e9b      	ldrb	r3, [r3, #26]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d108      	bne.n	800502e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0220 	orr.w	r2, r2, #32
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e007      	b.n	800503e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0220 	bic.w	r2, r2, #32
 800503c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	7edb      	ldrb	r3, [r3, #27]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d108      	bne.n	8005058 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0210 	bic.w	r2, r2, #16
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e007      	b.n	8005068 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0210 	orr.w	r2, r2, #16
 8005066:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	7f1b      	ldrb	r3, [r3, #28]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d108      	bne.n	8005082 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0208 	orr.w	r2, r2, #8
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	e007      	b.n	8005092 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0208 	bic.w	r2, r2, #8
 8005090:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	7f5b      	ldrb	r3, [r3, #29]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d108      	bne.n	80050ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0204 	orr.w	r2, r2, #4
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	e007      	b.n	80050bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0204 	bic.w	r2, r2, #4
 80050ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	ea42 0103 	orr.w	r1, r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	1e5a      	subs	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800510c:	4b0c      	ldr	r3, [pc, #48]	@ (8005140 <__NVIC_SetPriorityGrouping+0x44>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005118:	4013      	ands	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005124:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800512c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800512e:	4a04      	ldr	r2, [pc, #16]	@ (8005140 <__NVIC_SetPriorityGrouping+0x44>)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	60d3      	str	r3, [r2, #12]
}
 8005134:	bf00      	nop
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	e000ed00 	.word	0xe000ed00

08005144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005148:	4b04      	ldr	r3, [pc, #16]	@ (800515c <__NVIC_GetPriorityGrouping+0x18>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	0a1b      	lsrs	r3, r3, #8
 800514e:	f003 0307 	and.w	r3, r3, #7
}
 8005152:	4618      	mov	r0, r3
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	e000ed00 	.word	0xe000ed00

08005160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800516a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516e:	2b00      	cmp	r3, #0
 8005170:	db0b      	blt.n	800518a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	f003 021f 	and.w	r2, r3, #31
 8005178:	4907      	ldr	r1, [pc, #28]	@ (8005198 <__NVIC_EnableIRQ+0x38>)
 800517a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	2001      	movs	r0, #1
 8005182:	fa00 f202 	lsl.w	r2, r0, r2
 8005186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	e000e100 	.word	0xe000e100

0800519c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	6039      	str	r1, [r7, #0]
 80051a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	db0a      	blt.n	80051c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	490c      	ldr	r1, [pc, #48]	@ (80051e8 <__NVIC_SetPriority+0x4c>)
 80051b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ba:	0112      	lsls	r2, r2, #4
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	440b      	add	r3, r1
 80051c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051c4:	e00a      	b.n	80051dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	4908      	ldr	r1, [pc, #32]	@ (80051ec <__NVIC_SetPriority+0x50>)
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	3b04      	subs	r3, #4
 80051d4:	0112      	lsls	r2, r2, #4
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	440b      	add	r3, r1
 80051da:	761a      	strb	r2, [r3, #24]
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	e000e100 	.word	0xe000e100
 80051ec:	e000ed00 	.word	0xe000ed00

080051f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b089      	sub	sp, #36	@ 0x24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f1c3 0307 	rsb	r3, r3, #7
 800520a:	2b04      	cmp	r3, #4
 800520c:	bf28      	it	cs
 800520e:	2304      	movcs	r3, #4
 8005210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	3304      	adds	r3, #4
 8005216:	2b06      	cmp	r3, #6
 8005218:	d902      	bls.n	8005220 <NVIC_EncodePriority+0x30>
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	3b03      	subs	r3, #3
 800521e:	e000      	b.n	8005222 <NVIC_EncodePriority+0x32>
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005224:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	43da      	mvns	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	401a      	ands	r2, r3
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005238:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	fa01 f303 	lsl.w	r3, r1, r3
 8005242:	43d9      	mvns	r1, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005248:	4313      	orrs	r3, r2
         );
}
 800524a:	4618      	mov	r0, r3
 800524c:	3724      	adds	r7, #36	@ 0x24
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3b01      	subs	r3, #1
 8005264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005268:	d301      	bcc.n	800526e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800526a:	2301      	movs	r3, #1
 800526c:	e00f      	b.n	800528e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800526e:	4a0a      	ldr	r2, [pc, #40]	@ (8005298 <SysTick_Config+0x40>)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3b01      	subs	r3, #1
 8005274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005276:	210f      	movs	r1, #15
 8005278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800527c:	f7ff ff8e 	bl	800519c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005280:	4b05      	ldr	r3, [pc, #20]	@ (8005298 <SysTick_Config+0x40>)
 8005282:	2200      	movs	r2, #0
 8005284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005286:	4b04      	ldr	r3, [pc, #16]	@ (8005298 <SysTick_Config+0x40>)
 8005288:	2207      	movs	r2, #7
 800528a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	e000e010 	.word	0xe000e010

0800529c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff ff29 	bl	80050fc <__NVIC_SetPriorityGrouping>
}
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b086      	sub	sp, #24
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	4603      	mov	r3, r0
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
 80052be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052c4:	f7ff ff3e 	bl	8005144 <__NVIC_GetPriorityGrouping>
 80052c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	6978      	ldr	r0, [r7, #20]
 80052d0:	f7ff ff8e 	bl	80051f0 <NVIC_EncodePriority>
 80052d4:	4602      	mov	r2, r0
 80052d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff ff5d 	bl	800519c <__NVIC_SetPriority>
}
 80052e2:	bf00      	nop
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b082      	sub	sp, #8
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	4603      	mov	r3, r0
 80052f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff ff31 	bl	8005160 <__NVIC_EnableIRQ>
}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff ffa2 	bl	8005258 <SysTick_Config>
 8005314:	4603      	mov	r3, r0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800532c:	f7ff fb58 	bl	80049e0 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e099      	b.n	8005470 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0201 	bic.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800535c:	e00f      	b.n	800537e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800535e:	f7ff fb3f 	bl	80049e0 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b05      	cmp	r3, #5
 800536a:	d908      	bls.n	800537e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2203      	movs	r2, #3
 8005376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e078      	b.n	8005470 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e8      	bne.n	800535e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4b38      	ldr	r3, [pc, #224]	@ (8005478 <HAL_DMA_Init+0x158>)
 8005398:	4013      	ands	r3, r2
 800539a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d107      	bne.n	80053e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e0:	4313      	orrs	r3, r2
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f023 0307 	bic.w	r3, r3, #7
 80053fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540e:	2b04      	cmp	r3, #4
 8005410:	d117      	bne.n	8005442 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00e      	beq.n	8005442 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fb0d 	bl	8005a44 <DMA_CheckFifoParam>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2240      	movs	r2, #64	@ 0x40
 8005434:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800543e:	2301      	movs	r3, #1
 8005440:	e016      	b.n	8005470 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fac4 	bl	80059d8 <DMA_CalcBaseAndBitshift>
 8005450:	4603      	mov	r3, r0
 8005452:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005458:	223f      	movs	r2, #63	@ 0x3f
 800545a:	409a      	lsls	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	f010803f 	.word	0xf010803f

0800547c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005492:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_DMA_Start_IT+0x26>
 800549e:	2302      	movs	r3, #2
 80054a0:	e040      	b.n	8005524 <HAL_DMA_Start_IT+0xa8>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d12f      	bne.n	8005516 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2202      	movs	r2, #2
 80054ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 fa56 	bl	800597c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d4:	223f      	movs	r2, #63	@ 0x3f
 80054d6:	409a      	lsls	r2, r3
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0216 	orr.w	r2, r2, #22
 80054ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d007      	beq.n	8005504 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0208 	orr.w	r2, r2, #8
 8005502:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0201 	orr.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e005      	b.n	8005522 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800551e:	2302      	movs	r3, #2
 8005520:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005522:	7dfb      	ldrb	r3, [r7, #23]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005538:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800553a:	f7ff fa51 	bl	80049e0 <HAL_GetTick>
 800553e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d008      	beq.n	800555e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2280      	movs	r2, #128	@ 0x80
 8005550:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e052      	b.n	8005604 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0216 	bic.w	r2, r2, #22
 800556c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695a      	ldr	r2, [r3, #20]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800557c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005582:	2b00      	cmp	r3, #0
 8005584:	d103      	bne.n	800558e <HAL_DMA_Abort+0x62>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0208 	bic.w	r2, r2, #8
 800559c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0201 	bic.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055ae:	e013      	b.n	80055d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055b0:	f7ff fa16 	bl	80049e0 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b05      	cmp	r3, #5
 80055bc:	d90c      	bls.n	80055d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2203      	movs	r2, #3
 80055c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e015      	b.n	8005604 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1e4      	bne.n	80055b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ea:	223f      	movs	r2, #63	@ 0x3f
 80055ec:	409a      	lsls	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d004      	beq.n	800562a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2280      	movs	r2, #128	@ 0x80
 8005624:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e00c      	b.n	8005644 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2205      	movs	r2, #5
 800562e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0201 	bic.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800565c:	4b8e      	ldr	r3, [pc, #568]	@ (8005898 <HAL_DMA_IRQHandler+0x248>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a8e      	ldr	r2, [pc, #568]	@ (800589c <HAL_DMA_IRQHandler+0x24c>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	0a9b      	lsrs	r3, r3, #10
 8005668:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800567a:	2208      	movs	r2, #8
 800567c:	409a      	lsls	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4013      	ands	r3, r2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01a      	beq.n	80056bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d013      	beq.n	80056bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0204 	bic.w	r2, r2, #4
 80056a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a8:	2208      	movs	r2, #8
 80056aa:	409a      	lsls	r2, r3
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b4:	f043 0201 	orr.w	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c0:	2201      	movs	r2, #1
 80056c2:	409a      	lsls	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4013      	ands	r3, r2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d012      	beq.n	80056f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00b      	beq.n	80056f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056de:	2201      	movs	r2, #1
 80056e0:	409a      	lsls	r2, r3
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ea:	f043 0202 	orr.w	r2, r3, #2
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f6:	2204      	movs	r2, #4
 80056f8:	409a      	lsls	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d012      	beq.n	8005728 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00b      	beq.n	8005728 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005714:	2204      	movs	r2, #4
 8005716:	409a      	lsls	r2, r3
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005720:	f043 0204 	orr.w	r2, r3, #4
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800572c:	2210      	movs	r2, #16
 800572e:	409a      	lsls	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4013      	ands	r3, r2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d043      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d03c      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800574a:	2210      	movs	r2, #16
 800574c:	409a      	lsls	r2, r3
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d018      	beq.n	8005792 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d108      	bne.n	8005780 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d024      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	4798      	blx	r3
 800577e:	e01f      	b.n	80057c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01b      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	4798      	blx	r3
 8005790:	e016      	b.n	80057c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579c:	2b00      	cmp	r3, #0
 800579e:	d107      	bne.n	80057b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0208 	bic.w	r2, r2, #8
 80057ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c4:	2220      	movs	r2, #32
 80057c6:	409a      	lsls	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 808f 	beq.w	80058f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 8087 	beq.w	80058f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e6:	2220      	movs	r2, #32
 80057e8:	409a      	lsls	r2, r3
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b05      	cmp	r3, #5
 80057f8:	d136      	bne.n	8005868 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0216 	bic.w	r2, r2, #22
 8005808:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695a      	ldr	r2, [r3, #20]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005818:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	d103      	bne.n	800582a <HAL_DMA_IRQHandler+0x1da>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005826:	2b00      	cmp	r3, #0
 8005828:	d007      	beq.n	800583a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0208 	bic.w	r2, r2, #8
 8005838:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800583e:	223f      	movs	r2, #63	@ 0x3f
 8005840:	409a      	lsls	r2, r3
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800585a:	2b00      	cmp	r3, #0
 800585c:	d07e      	beq.n	800595c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	4798      	blx	r3
        }
        return;
 8005866:	e079      	b.n	800595c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01d      	beq.n	80058b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10d      	bne.n	80058a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005888:	2b00      	cmp	r3, #0
 800588a:	d031      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	4798      	blx	r3
 8005894:	e02c      	b.n	80058f0 <HAL_DMA_IRQHandler+0x2a0>
 8005896:	bf00      	nop
 8005898:	20000038 	.word	0x20000038
 800589c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d023      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	4798      	blx	r3
 80058b0:	e01e      	b.n	80058f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10f      	bne.n	80058e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0210 	bic.w	r2, r2, #16
 80058ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d032      	beq.n	800595e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d022      	beq.n	800594a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2205      	movs	r2, #5
 8005908:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0201 	bic.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	3301      	adds	r3, #1
 8005920:	60bb      	str	r3, [r7, #8]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	429a      	cmp	r2, r3
 8005926:	d307      	bcc.n	8005938 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1f2      	bne.n	800591c <HAL_DMA_IRQHandler+0x2cc>
 8005936:	e000      	b.n	800593a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005938:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	4798      	blx	r3
 800595a:	e000      	b.n	800595e <HAL_DMA_IRQHandler+0x30e>
        return;
 800595c:	bf00      	nop
    }
  }
}
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005970:	4618      	mov	r0, r3
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005998:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2b40      	cmp	r3, #64	@ 0x40
 80059a8:	d108      	bne.n	80059bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80059ba:	e007      	b.n	80059cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	60da      	str	r2, [r3, #12]
}
 80059cc:	bf00      	nop
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	3b10      	subs	r3, #16
 80059e8:	4a14      	ldr	r2, [pc, #80]	@ (8005a3c <DMA_CalcBaseAndBitshift+0x64>)
 80059ea:	fba2 2303 	umull	r2, r3, r2, r3
 80059ee:	091b      	lsrs	r3, r3, #4
 80059f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059f2:	4a13      	ldr	r2, [pc, #76]	@ (8005a40 <DMA_CalcBaseAndBitshift+0x68>)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d909      	bls.n	8005a1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a0e:	f023 0303 	bic.w	r3, r3, #3
 8005a12:	1d1a      	adds	r2, r3, #4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a18:	e007      	b.n	8005a2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a22:	f023 0303 	bic.w	r3, r3, #3
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	aaaaaaab 	.word	0xaaaaaaab
 8005a40:	08019a60 	.word	0x08019a60

08005a44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d11f      	bne.n	8005a9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d856      	bhi.n	8005b12 <DMA_CheckFifoParam+0xce>
 8005a64:	a201      	add	r2, pc, #4	@ (adr r2, 8005a6c <DMA_CheckFifoParam+0x28>)
 8005a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6a:	bf00      	nop
 8005a6c:	08005a7d 	.word	0x08005a7d
 8005a70:	08005a8f 	.word	0x08005a8f
 8005a74:	08005a7d 	.word	0x08005a7d
 8005a78:	08005b13 	.word	0x08005b13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d046      	beq.n	8005b16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a8c:	e043      	b.n	8005b16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a96:	d140      	bne.n	8005b1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a9c:	e03d      	b.n	8005b1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aa6:	d121      	bne.n	8005aec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d837      	bhi.n	8005b1e <DMA_CheckFifoParam+0xda>
 8005aae:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab4 <DMA_CheckFifoParam+0x70>)
 8005ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab4:	08005ac5 	.word	0x08005ac5
 8005ab8:	08005acb 	.word	0x08005acb
 8005abc:	08005ac5 	.word	0x08005ac5
 8005ac0:	08005add 	.word	0x08005add
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac8:	e030      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ace:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d025      	beq.n	8005b22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ada:	e022      	b.n	8005b22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ae4:	d11f      	bne.n	8005b26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005aea:	e01c      	b.n	8005b26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d903      	bls.n	8005afa <DMA_CheckFifoParam+0xb6>
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d003      	beq.n	8005b00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005af8:	e018      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	73fb      	strb	r3, [r7, #15]
      break;
 8005afe:	e015      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00e      	beq.n	8005b2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b10:	e00b      	b.n	8005b2a <DMA_CheckFifoParam+0xe6>
      break;
 8005b12:	bf00      	nop
 8005b14:	e00a      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
      break;
 8005b16:	bf00      	nop
 8005b18:	e008      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
      break;
 8005b1a:	bf00      	nop
 8005b1c:	e006      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
      break;
 8005b1e:	bf00      	nop
 8005b20:	e004      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
      break;
 8005b22:	bf00      	nop
 8005b24:	e002      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
      break;   
 8005b26:	bf00      	nop
 8005b28:	e000      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
      break;
 8005b2a:	bf00      	nop
    }
  } 
  
  return status; 
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop

08005b3c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e08a      	b.n	8005c64 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d106      	bne.n	8005b66 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f004 fe8d 	bl	800a880 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b66:	2300      	movs	r3, #0
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	4b40      	ldr	r3, [pc, #256]	@ (8005c6c <HAL_ETH_Init+0x130>)
 8005b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6e:	4a3f      	ldr	r2, [pc, #252]	@ (8005c6c <HAL_ETH_Init+0x130>)
 8005b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b76:	4b3d      	ldr	r3, [pc, #244]	@ (8005c6c <HAL_ETH_Init+0x130>)
 8005b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8005b82:	4b3b      	ldr	r3, [pc, #236]	@ (8005c70 <HAL_ETH_Init+0x134>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	4a3a      	ldr	r2, [pc, #232]	@ (8005c70 <HAL_ETH_Init+0x134>)
 8005b88:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005b8c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8005b8e:	4b38      	ldr	r3, [pc, #224]	@ (8005c70 <HAL_ETH_Init+0x134>)
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	4936      	ldr	r1, [pc, #216]	@ (8005c70 <HAL_ETH_Init+0x134>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8005b9c:	4b34      	ldr	r3, [pc, #208]	@ (8005c70 <HAL_ETH_Init+0x134>)
 8005b9e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6812      	ldr	r2, [r2, #0]
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005bb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bb8:	f7fe ff12 	bl	80049e0 <HAL_GetTick>
 8005bbc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005bbe:	e011      	b.n	8005be4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005bc0:	f7fe ff0e 	bl	80049e0 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005bce:	d909      	bls.n	8005be4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2204      	movs	r2, #4
 8005bd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	22e0      	movs	r2, #224	@ 0xe0
 8005bdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e03f      	b.n	8005c64 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e4      	bne.n	8005bc0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fe16 	bl	8006828 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fec1 	bl	8006984 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 ff17 	bl	8006a36 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	2100      	movs	r1, #0
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fe7f 	bl	8006914 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8005c24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c36:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005c3a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8005c4e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2210      	movs	r2, #16
 8005c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40023800 	.word	0x40023800
 8005c70:	40013800 	.word	0x40013800

08005c74 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c82:	2b10      	cmp	r3, #16
 8005c84:	d150      	bne.n	8005d28 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2204      	movs	r2, #4
 8005c92:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f9f8 	bl	800608a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0208 	orr.w	r2, r2, #8
 8005ca8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	f7fe fea0 	bl	80049f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0204 	orr.w	r2, r2, #4
 8005cce:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005cd8:	2001      	movs	r0, #1
 8005cda:	f7fe fe8d 	bl	80049f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fc3a 	bl	8006560 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6812      	ldr	r2, [r2, #0]
 8005cfa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005cfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d02:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6812      	ldr	r2, [r2, #0]
 8005d12:	f043 0302 	orr.w	r3, r3, #2
 8005d16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d1a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2240      	movs	r2, #64	@ 0x40
 8005d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	e000      	b.n	8005d2a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
  }
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d40:	2b40      	cmp	r3, #64	@ 0x40
 8005d42:	d14a      	bne.n	8005dda <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d62:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	f023 0302 	bic.w	r3, r3, #2
 8005d76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d7a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0204 	bic.w	r2, r2, #4
 8005d8a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d94:	2001      	movs	r0, #1
 8005d96:	f7fe fe2f 	bl	80049f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fbdc 	bl	8006560 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0208 	bic.w	r2, r2, #8
 8005db6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	f7fe fe19 	bl	80049f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2210      	movs	r2, #16
 8005dd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e000      	b.n	8005ddc <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
  }
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfc:	f043 0201 	orr.w	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e07c      	b.n	8005f04 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e10:	2b40      	cmp	r3, #64	@ 0x40
 8005e12:	d176      	bne.n	8005f02 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8005e14:	2200      	movs	r2, #0
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 fe7b 	bl	8006b14 <ETH_Prepare_Tx_Descriptors>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2a:	f043 0202 	orr.w	r2, r3, #2
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e065      	b.n	8005f04 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8005e38:	f3bf 8f4f 	dsb	sy
}
 8005e3c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3206      	adds	r2, #6
 8005e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e4a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d904      	bls.n	8005e68 <HAL_ETH_Transmit+0x84>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e62:	1f1a      	subs	r2, r3, #4
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3106      	adds	r1, #6
 8005e74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005e7c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8005e7e:	f7fe fdaf 	bl	80049e0 <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005e84:	e037      	b.n	8005ef6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d011      	beq.n	8005ebc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9e:	f043 0208 	orr.w	r2, r3, #8
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eb0:	695a      	ldr	r2, [r3, #20]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e023      	b.n	8005f04 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ec2:	d018      	beq.n	8005ef6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ec4:	f7fe fd8c 	bl	80049e0 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d302      	bcc.n	8005eda <HAL_ETH_Transmit+0xf6>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10d      	bne.n	8005ef6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee0:	f043 0204 	orr.w	r2, r3, #4
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8005ef0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e006      	b.n	8005f04 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	dbc3      	blt.n	8005e86 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e000      	b.n	8005f04 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
  }
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d109      	bne.n	8005f38 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f2a:	f043 0201 	orr.w	r2, r3, #1
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e0a4      	b.n	8006082 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f3e:	2b40      	cmp	r3, #64	@ 0x40
 8005f40:	d001      	beq.n	8005f46 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e09d      	b.n	8006082 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f4a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	69fa      	ldr	r2, [r7, #28]
 8005f50:	3212      	adds	r2, #18
 8005f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f56:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f5c:	f1c3 0304 	rsb	r3, r3, #4
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005f62:	e066      	b.n	8006032 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d007      	beq.n	8005f80 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	699a      	ldr	r2, [r3, #24]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d103      	bne.n	8005f94 <HAL_ETH_ReadData+0x88>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d03c      	beq.n	800600e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	0c1b      	lsrs	r3, r3, #16
 8005fb2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005fb6:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005fe8:	461a      	mov	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f004 fdf7 	bl	800abe0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	441a      	add	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	2200      	movs	r2, #0
 800600c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	3301      	adds	r3, #1
 8006012:	61fb      	str	r3, [r7, #28]
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	2b03      	cmp	r3, #3
 8006018:	d902      	bls.n	8006020 <HAL_ETH_ReadData+0x114>
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	3b04      	subs	r3, #4
 800601e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	3212      	adds	r2, #18
 8006026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	3301      	adds	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8006036:	2b00      	cmp	r3, #0
 8006038:	db06      	blt.n	8006048 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	429a      	cmp	r2, r3
 8006040:	d202      	bcs.n	8006048 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8006042:	7cfb      	ldrb	r3, [r7, #19]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d08d      	beq.n	8005f64 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	441a      	add	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f814 	bl	800608a <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8006068:	7cfb      	ldrb	r3, [r7, #19]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d108      	bne.n	8006080 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	e000      	b.n	8006082 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
}
 8006082:	4618      	mov	r0, r3
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b088      	sub	sp, #32
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8006096:	2301      	movs	r3, #1
 8006098:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800609e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	3212      	adds	r2, #18
 80060a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060aa:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060b0:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80060b2:	e044      	b.n	800613e <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d112      	bne.n	80060e2 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80060bc:	f107 0308 	add.w	r3, r7, #8
 80060c0:	4618      	mov	r0, r3
 80060c2:	f004 fd5d 	bl	800ab80 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	74fb      	strb	r3, [r7, #19]
 80060d0:	e007      	b.n	80060e2 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	461a      	mov	r2, r3
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	461a      	mov	r2, r3
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80060e2:	7cfb      	ldrb	r3, [r7, #19]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d02a      	beq.n	800613e <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d108      	bne.n	8006102 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	6053      	str	r3, [r2, #4]
 8006100:	e005      	b.n	800610e <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	3301      	adds	r3, #1
 800611e:	61fb      	str	r3, [r7, #28]
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	2b03      	cmp	r3, #3
 8006124:	d902      	bls.n	800612c <ETH_UpdateDescriptor+0xa2>
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	3b04      	subs	r3, #4
 800612a:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	3212      	adds	r2, #18
 8006132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006136:	617b      	str	r3, [r7, #20]
      desccount--;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	3b01      	subs	r3, #1
 800613c:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <ETH_UpdateDescriptor+0xc0>
 8006144:	7cfb      	ldrb	r3, [r7, #19]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1b4      	bne.n	80060b4 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	429a      	cmp	r2, r3
 8006152:	d01a      	beq.n	800618a <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	3303      	adds	r3, #3
 8006158:	f003 0303 	and.w	r3, r3, #3
 800615c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800615e:	f3bf 8f5f 	dmb	sy
}
 8006162:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6919      	ldr	r1, [r3, #16]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	18ca      	adds	r2, r1, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800617c:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69fa      	ldr	r2, [r7, #28]
 8006182:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800618a:	bf00      	nop
 800618c:	3720      	adds	r7, #32
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b086      	sub	sp, #24
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
 800619e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f003 031c 	and.w	r3, r3, #28
 80061ae:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	02db      	lsls	r3, r3, #11
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	019b      	lsls	r3, r3, #6
 80061c0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 0302 	bic.w	r3, r3, #2
 80061d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f043 0301 	orr.w	r3, r3, #1
 80061d8:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80061e2:	f7fe fbfd 	bl	80049e0 <HAL_GetTick>
 80061e6:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80061e8:	e00d      	b.n	8006206 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80061ea:	f7fe fbf9 	bl	80049e0 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061f8:	d301      	bcc.n	80061fe <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e010      	b.n	8006220 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1ec      	bne.n	80061ea <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	b29b      	uxth	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f003 031c 	and.w	r3, r3, #28
 8006244:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	02db      	lsls	r3, r3, #11
 800624a:	b29b      	uxth	r3, r3
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	019b      	lsls	r3, r3, #6
 8006256:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f043 0302 	orr.w	r3, r3, #2
 8006266:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006282:	f7fe fbad 	bl	80049e0 <HAL_GetTick>
 8006286:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006288:	e00d      	b.n	80062a6 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800628a:	f7fe fba9 	bl	80049e0 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006298:	d301      	bcc.n	800629e <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e009      	b.n	80062b2 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1ec      	bne.n	800628a <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e0e6      	b.n	800649c <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bf14      	ite	ne
 80062dc:	2301      	movne	r3, #1
 80062de:	2300      	moveq	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006302:	2b00      	cmp	r3, #0
 8006304:	bf0c      	ite	eq
 8006306:	2301      	moveq	r3, #1
 8006308:	2300      	movne	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 800631e:	2b00      	cmp	r3, #0
 8006320:	bf14      	ite	ne
 8006322:	2301      	movne	r3, #1
 8006324:	2300      	moveq	r3, #0
 8006326:	b2db      	uxtb	r3, r3
 8006328:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006338:	2b00      	cmp	r3, #0
 800633a:	bf0c      	ite	eq
 800633c:	2301      	moveq	r3, #1
 800633e:	2300      	movne	r3, #0
 8006340:	b2db      	uxtb	r3, r3
 8006342:	461a      	mov	r2, r3
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006352:	2b00      	cmp	r3, #0
 8006354:	bf14      	ite	ne
 8006356:	2301      	movne	r3, #1
 8006358:	2300      	moveq	r3, #0
 800635a:	b2db      	uxtb	r3, r3
 800635c:	461a      	mov	r2, r3
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006388:	2b00      	cmp	r3, #0
 800638a:	bf0c      	ite	eq
 800638c:	2301      	moveq	r3, #1
 800638e:	2300      	movne	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	bf0c      	ite	eq
 80063a6:	2301      	moveq	r3, #1
 80063a8:	2300      	movne	r3, #0
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bf14      	ite	ne
 80063c0:	2301      	movne	r3, #1
 80063c2:	2300      	moveq	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	bf14      	ite	ne
 80063e8:	2301      	movne	r3, #1
 80063ea:	2300      	moveq	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	bf14      	ite	ne
 8006402:	2301      	movne	r3, #1
 8006404:	2300      	moveq	r3, #0
 8006406:	b2db      	uxtb	r3, r3
 8006408:	461a      	mov	r2, r3
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	bf14      	ite	ne
 800641c:	2301      	movne	r3, #1
 800641e:	2300      	moveq	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	461a      	mov	r2, r3
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006434:	2b00      	cmp	r3, #0
 8006436:	bf0c      	ite	eq
 8006438:	2301      	moveq	r3, #1
 800643a:	2300      	movne	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	461a      	mov	r2, r3
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	0c1b      	lsrs	r3, r3, #16
 800645c:	b29a      	uxth	r2, r3
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	bf14      	ite	ne
 8006470:	2301      	movne	r3, #1
 8006472:	2300      	moveq	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	461a      	mov	r2, r3
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8006488:	2b00      	cmp	r3, #0
 800648a:	bf14      	ite	ne
 800648c:	2301      	movne	r3, #1
 800648e:	2300      	moveq	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e00b      	b.n	80064d4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064c2:	2b10      	cmp	r3, #16
 80064c4:	d105      	bne.n	80064d2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f86f 	bl	80065ac <ETH_SetMACConfig>

    return HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e000      	b.n	80064d4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
  }
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 031c 	bic.w	r3, r3, #28
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80064f4:	f001 fbb4 	bl	8007c60 <HAL_RCC_GetHCLKFreq>
 80064f8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	4a14      	ldr	r2, [pc, #80]	@ (8006550 <HAL_ETH_SetMDIOClockRange+0x74>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d804      	bhi.n	800650c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f043 0308 	orr.w	r3, r3, #8
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	e019      	b.n	8006540 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4a11      	ldr	r2, [pc, #68]	@ (8006554 <HAL_ETH_SetMDIOClockRange+0x78>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d204      	bcs.n	800651e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f043 030c 	orr.w	r3, r3, #12
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	e010      	b.n	8006540 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	4a0d      	ldr	r2, [pc, #52]	@ (8006558 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d90c      	bls.n	8006540 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	4a0c      	ldr	r2, [pc, #48]	@ (800655c <HAL_ETH_SetMDIOClockRange+0x80>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d804      	bhi.n	8006538 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f043 0304 	orr.w	r3, r3, #4
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	e003      	b.n	8006540 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f043 0310 	orr.w	r3, r3, #16
 800653e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	611a      	str	r2, [r3, #16]
}
 8006548:	bf00      	nop
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	02160ebf 	.word	0x02160ebf
 8006554:	03938700 	.word	0x03938700
 8006558:	05f5e0ff 	.word	0x05f5e0ff
 800655c:	08f0d17f 	.word	0x08f0d17f

08006560 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800657e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006582:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006590:	2001      	movs	r0, #1
 8006592:	f7fe fa31 	bl	80049f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80065a0:	6193      	str	r3, [r2, #24]
}
 80065a2:	bf00      	nop
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	4b53      	ldr	r3, [pc, #332]	@ (8006710 <ETH_SetMACConfig+0x164>)
 80065c2:	4013      	ands	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	7b9b      	ldrb	r3, [r3, #14]
 80065ca:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	7c12      	ldrb	r2, [r2, #16]
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	d102      	bne.n	80065da <ETH_SetMACConfig+0x2e>
 80065d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80065d8:	e000      	b.n	80065dc <ETH_SetMACConfig+0x30>
 80065da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80065dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	7c52      	ldrb	r2, [r2, #17]
 80065e2:	2a00      	cmp	r2, #0
 80065e4:	d102      	bne.n	80065ec <ETH_SetMACConfig+0x40>
 80065e6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80065ea:	e000      	b.n	80065ee <ETH_SetMACConfig+0x42>
 80065ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80065ee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80065f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	7fdb      	ldrb	r3, [r3, #31]
 80065fa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80065fc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006602:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	7f92      	ldrb	r2, [r2, #30]
 8006608:	2a00      	cmp	r2, #0
 800660a:	d102      	bne.n	8006612 <ETH_SetMACConfig+0x66>
 800660c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006610:	e000      	b.n	8006614 <ETH_SetMACConfig+0x68>
 8006612:	2200      	movs	r2, #0
                        macconf->Speed |
 8006614:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	7f1b      	ldrb	r3, [r3, #28]
 800661a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800661c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006622:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	791b      	ldrb	r3, [r3, #4]
 8006628:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800662a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006632:	2a00      	cmp	r2, #0
 8006634:	d102      	bne.n	800663c <ETH_SetMACConfig+0x90>
 8006636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800663a:	e000      	b.n	800663e <ETH_SetMACConfig+0x92>
 800663c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800663e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	7bdb      	ldrb	r3, [r3, #15]
 8006644:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006646:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800664c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006654:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006656:	4313      	orrs	r3, r2
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800666e:	2001      	movs	r0, #1
 8006670:	f7fe f9c2 	bl	80049f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800668a:	4013      	ands	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006692:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800669a:	2a00      	cmp	r2, #0
 800669c:	d101      	bne.n	80066a2 <ETH_SetMACConfig+0xf6>
 800669e:	2280      	movs	r2, #128	@ 0x80
 80066a0:	e000      	b.n	80066a4 <ETH_SetMACConfig+0xf8>
 80066a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80066a4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80066aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80066b2:	2a01      	cmp	r2, #1
 80066b4:	d101      	bne.n	80066ba <ETH_SetMACConfig+0x10e>
 80066b6:	2208      	movs	r2, #8
 80066b8:	e000      	b.n	80066bc <ETH_SetMACConfig+0x110>
 80066ba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80066bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80066c4:	2a01      	cmp	r2, #1
 80066c6:	d101      	bne.n	80066cc <ETH_SetMACConfig+0x120>
 80066c8:	2204      	movs	r2, #4
 80066ca:	e000      	b.n	80066ce <ETH_SetMACConfig+0x122>
 80066cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80066ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80066d6:	2a01      	cmp	r2, #1
 80066d8:	d101      	bne.n	80066de <ETH_SetMACConfig+0x132>
 80066da:	2202      	movs	r2, #2
 80066dc:	e000      	b.n	80066e0 <ETH_SetMACConfig+0x134>
 80066de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80066e0:	4313      	orrs	r3, r2
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80066f8:	2001      	movs	r0, #1
 80066fa:	f7fe f97d 	bl	80049f8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	619a      	str	r2, [r3, #24]
}
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	fd20810f 	.word	0xfd20810f

08006714 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4b3d      	ldr	r3, [pc, #244]	@ (8006824 <ETH_SetDMAConfig+0x110>)
 800672e:	4013      	ands	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	7b1b      	ldrb	r3, [r3, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <ETH_SetDMAConfig+0x2c>
 800673a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800673e:	e000      	b.n	8006742 <ETH_SetDMAConfig+0x2e>
 8006740:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	7b5b      	ldrb	r3, [r3, #13]
 8006746:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006748:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	7f52      	ldrb	r2, [r2, #29]
 800674e:	2a00      	cmp	r2, #0
 8006750:	d102      	bne.n	8006758 <ETH_SetDMAConfig+0x44>
 8006752:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006756:	e000      	b.n	800675a <ETH_SetDMAConfig+0x46>
 8006758:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800675a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	7b9b      	ldrb	r3, [r3, #14]
 8006760:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006762:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006768:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	7f1b      	ldrb	r3, [r3, #28]
 800676e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006770:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	7f9b      	ldrb	r3, [r3, #30]
 8006776:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006778:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800677e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006786:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006788:	4313      	orrs	r3, r2
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006798:	461a      	mov	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80067aa:	2001      	movs	r0, #1
 80067ac:	f7fe f924 	bl	80049f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067b8:	461a      	mov	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	791b      	ldrb	r3, [r3, #4]
 80067c2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80067c8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80067ce:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80067d4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80067dc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80067de:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80067e6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80067ec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6812      	ldr	r2, [r2, #0]
 80067f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80067fa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006808:	2001      	movs	r0, #1
 800680a:	f7fe f8f5 	bl	80049f8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006816:	461a      	mov	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6013      	str	r3, [r2, #0]
}
 800681c:	bf00      	nop
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	f8de3f23 	.word	0xf8de3f23

08006828 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b0a6      	sub	sp, #152	@ 0x98
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006830:	2301      	movs	r3, #1
 8006832:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8006836:	2301      	movs	r3, #1
 8006838:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800683c:	2300      	movs	r3, #0
 800683e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006840:	2300      	movs	r3, #0
 8006842:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8006846:	2301      	movs	r3, #1
 8006848:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800684c:	2300      	movs	r3, #0
 800684e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006852:	2301      	movs	r3, #1
 8006854:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006858:	2301      	movs	r3, #1
 800685a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800685e:	2300      	movs	r3, #0
 8006860:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006864:	2300      	movs	r3, #0
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800686a:	2300      	movs	r3, #0
 800686c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800686e:	2300      	movs	r3, #0
 8006870:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006874:	2300      	movs	r3, #0
 8006876:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006878:	2300      	movs	r3, #0
 800687a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800687e:	2300      	movs	r3, #0
 8006880:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006884:	2300      	movs	r3, #0
 8006886:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800688a:	2300      	movs	r3, #0
 800688c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006890:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006894:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006896:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800689a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800689c:	2300      	movs	r3, #0
 800689e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80068a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7ff fe7f 	bl	80065ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80068ae:	2301      	movs	r3, #1
 80068b0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80068b2:	2301      	movs	r3, #1
 80068b4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80068bc:	2301      	movs	r3, #1
 80068be:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80068c0:	2300      	movs	r3, #0
 80068c2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80068c4:	2300      	movs	r3, #0
 80068c6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80068ca:	2300      	movs	r3, #0
 80068cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80068d0:	2300      	movs	r3, #0
 80068d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80068d4:	2301      	movs	r3, #1
 80068d6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80068da:	2301      	movs	r3, #1
 80068dc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80068de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80068e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80068e4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80068e8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80068ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80068ee:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80068fe:	f107 0308 	add.w	r3, r7, #8
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff ff05 	bl	8006714 <ETH_SetDMAConfig>
}
 800690a:	bf00      	nop
 800690c:	3798      	adds	r7, #152	@ 0x98
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3305      	adds	r3, #5
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	3204      	adds	r2, #4
 800692c:	7812      	ldrb	r2, [r2, #0]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	4b11      	ldr	r3, [pc, #68]	@ (800697c <ETH_MACAddressConfig+0x68>)
 8006936:	4413      	add	r3, r2
 8006938:	461a      	mov	r2, r3
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3303      	adds	r3, #3
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	061a      	lsls	r2, r3, #24
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3302      	adds	r3, #2
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	041b      	lsls	r3, r3, #16
 800694e:	431a      	orrs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3301      	adds	r3, #1
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	4313      	orrs	r3, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	7812      	ldrb	r2, [r2, #0]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	4b06      	ldr	r3, [pc, #24]	@ (8006980 <ETH_MACAddressConfig+0x6c>)
 8006966:	4413      	add	r3, r2
 8006968:	461a      	mov	r2, r3
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	6013      	str	r3, [r2, #0]
}
 800696e:	bf00      	nop
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	40028040 	.word	0x40028040
 8006980:	40028044 	.word	0x40028044

08006984 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	e03e      	b.n	8006a10 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68d9      	ldr	r1, [r3, #12]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4613      	mov	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	440b      	add	r3, r1
 80069a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2200      	movs	r2, #0
 80069ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2200      	movs	r2, #0
 80069b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2200      	movs	r2, #0
 80069ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	3206      	adds	r2, #6
 80069c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d80c      	bhi.n	80069f4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68d9      	ldr	r1, [r3, #12]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	440b      	add	r3, r1
 80069ec:	461a      	mov	r2, r3
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	60da      	str	r2, [r3, #12]
 80069f2:	e004      	b.n	80069fe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	461a      	mov	r2, r3
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d9bd      	bls.n	8006992 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a28:	611a      	str	r2, [r3, #16]
}
 8006a2a:	bf00      	nop
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	e048      	b.n	8006ad6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6919      	ldr	r1, [r3, #16]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	440b      	add	r3, r1
 8006a54:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2200      	movs	r2, #0
 8006a66:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2200      	movs	r2, #0
 8006a72:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2200      	movs	r2, #0
 8006a78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006a80:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006a9a:	68b9      	ldr	r1, [r7, #8]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	3212      	adds	r2, #18
 8006aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d80c      	bhi.n	8006ac6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6919      	ldr	r1, [r3, #16]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	440b      	add	r3, r1
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	60da      	str	r2, [r3, #12]
 8006ac4:	e004      	b.n	8006ad0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	461a      	mov	r2, r3
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2b03      	cmp	r3, #3
 8006ada:	d9b3      	bls.n	8006a44 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691a      	ldr	r2, [r3, #16]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b06:	60da      	str	r2, [r3, #12]
}
 8006b08:	bf00      	nop
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b091      	sub	sp, #68	@ 0x44
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3318      	adds	r3, #24
 8006b24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b56:	d007      	beq.n	8006b68 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e115      	b.n	8006d98 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8006b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b6e:	3301      	adds	r3, #1
 8006b70:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8006b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8006b84:	f023 031f 	bic.w	r3, r3, #31
 8006b88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b8a:	6852      	ldr	r2, [r2, #4]
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d008      	beq.n	8006bb0 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	431a      	orrs	r2, r3
 8006bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bae:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d008      	beq.n	8006bce <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0304 	and.w	r3, r3, #4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d005      	beq.n	8006be6 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf0:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8006bf2:	e084      	b.n	8006cfe <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfe:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d006      	beq.n	8006c14 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	e005      	b.n	8006c20 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c22:	3301      	adds	r3, #1
 8006c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	d902      	bls.n	8006c32 <ETH_Prepare_Tx_Descriptors+0x11e>
 8006c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2e:	3b04      	subs	r3, #4
 8006c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c48:	d007      	beq.n	8006c5a <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c4e:	3304      	adds	r3, #4
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d029      	beq.n	8006cae <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c66:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8006c68:	2300      	movs	r3, #0
 8006c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c6c:	e019      	b.n	8006ca2 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8006c6e:	f3bf 8f5f 	dmb	sy
}
 8006c72:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8006c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c82:	3301      	adds	r3, #1
 8006c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d902      	bls.n	8006c92 <ETH_Prepare_Tx_Descriptors+0x17e>
 8006c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c8e:	3b04      	subs	r3, #4
 8006c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ca2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d3e1      	bcc.n	8006c6e <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8006caa:	2302      	movs	r3, #2
 8006cac:	e074      	b.n	8006d98 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb8:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8006cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8006cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8006cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cce:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8006cd8:	f023 031f 	bic.w	r3, r3, #31
 8006cdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cde:	6852      	ldr	r2, [r2, #4]
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce4:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8006ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce8:	3301      	adds	r3, #1
 8006cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8006cec:	f3bf 8f5f 	dmb	sy
}
 8006cf0:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfc:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8006cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f47f af76 	bne.w	8006bf4 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d006      	beq.n	8006d1c <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	e005      	b.n	8006d28 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d26:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d36:	6a3a      	ldr	r2, [r7, #32]
 8006d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8006d3e:	f3bf 8f5f 	dmb	sy
}
 8006d42:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d58:	3304      	adds	r3, #4
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	440b      	add	r3, r1
 8006d5e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006d64:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d66:	f3ef 8310 	mrs	r3, PRIMASK
 8006d6a:	613b      	str	r3, [r7, #16]
  return(result);
 8006d6c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8006d6e:	61fb      	str	r3, [r7, #28]
 8006d70:	2301      	movs	r3, #1
 8006d72:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f383 8810 	msr	PRIMASK, r3
}
 8006d7a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d82:	4413      	add	r3, r2
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	f383 8810 	msr	PRIMASK, r3
}
 8006d94:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3744      	adds	r7, #68	@ 0x44
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b089      	sub	sp, #36	@ 0x24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006dba:	2300      	movs	r3, #0
 8006dbc:	61fb      	str	r3, [r7, #28]
 8006dbe:	e16b      	b.n	8007098 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	f040 815a 	bne.w	8007092 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d005      	beq.n	8006df6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d130      	bne.n	8006e58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	2203      	movs	r2, #3
 8006e02:	fa02 f303 	lsl.w	r3, r2, r3
 8006e06:	43db      	mvns	r3, r3
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	fa02 f303 	lsl.w	r3, r2, r3
 8006e34:	43db      	mvns	r3, r3
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	4013      	ands	r3, r2
 8006e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	091b      	lsrs	r3, r3, #4
 8006e42:	f003 0201 	and.w	r2, r3, #1
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f003 0303 	and.w	r3, r3, #3
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d017      	beq.n	8006e94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	2203      	movs	r2, #3
 8006e70:	fa02 f303 	lsl.w	r3, r2, r3
 8006e74:	43db      	mvns	r3, r3
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	4013      	ands	r3, r2
 8006e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	fa02 f303 	lsl.w	r3, r2, r3
 8006e88:	69ba      	ldr	r2, [r7, #24]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f003 0303 	and.w	r3, r3, #3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d123      	bne.n	8006ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	08da      	lsrs	r2, r3, #3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3208      	adds	r2, #8
 8006ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	f003 0307 	and.w	r3, r3, #7
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	220f      	movs	r2, #15
 8006eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebc:	43db      	mvns	r3, r3
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	08da      	lsrs	r2, r3, #3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3208      	adds	r2, #8
 8006ee2:	69b9      	ldr	r1, [r7, #24]
 8006ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	2203      	movs	r2, #3
 8006ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef8:	43db      	mvns	r3, r3
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	4013      	ands	r3, r2
 8006efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f003 0203 	and.w	r2, r3, #3
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 80b4 	beq.w	8007092 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	4b60      	ldr	r3, [pc, #384]	@ (80070b0 <HAL_GPIO_Init+0x30c>)
 8006f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f32:	4a5f      	ldr	r2, [pc, #380]	@ (80070b0 <HAL_GPIO_Init+0x30c>)
 8006f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80070b0 <HAL_GPIO_Init+0x30c>)
 8006f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f46:	4a5b      	ldr	r2, [pc, #364]	@ (80070b4 <HAL_GPIO_Init+0x310>)
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	089b      	lsrs	r3, r3, #2
 8006f4c:	3302      	adds	r3, #2
 8006f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	220f      	movs	r2, #15
 8006f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f62:	43db      	mvns	r3, r3
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	4013      	ands	r3, r2
 8006f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a52      	ldr	r2, [pc, #328]	@ (80070b8 <HAL_GPIO_Init+0x314>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d02b      	beq.n	8006fca <HAL_GPIO_Init+0x226>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a51      	ldr	r2, [pc, #324]	@ (80070bc <HAL_GPIO_Init+0x318>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d025      	beq.n	8006fc6 <HAL_GPIO_Init+0x222>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a50      	ldr	r2, [pc, #320]	@ (80070c0 <HAL_GPIO_Init+0x31c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d01f      	beq.n	8006fc2 <HAL_GPIO_Init+0x21e>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a4f      	ldr	r2, [pc, #316]	@ (80070c4 <HAL_GPIO_Init+0x320>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d019      	beq.n	8006fbe <HAL_GPIO_Init+0x21a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a4e      	ldr	r2, [pc, #312]	@ (80070c8 <HAL_GPIO_Init+0x324>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d013      	beq.n	8006fba <HAL_GPIO_Init+0x216>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a4d      	ldr	r2, [pc, #308]	@ (80070cc <HAL_GPIO_Init+0x328>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00d      	beq.n	8006fb6 <HAL_GPIO_Init+0x212>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a4c      	ldr	r2, [pc, #304]	@ (80070d0 <HAL_GPIO_Init+0x32c>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d007      	beq.n	8006fb2 <HAL_GPIO_Init+0x20e>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a4b      	ldr	r2, [pc, #300]	@ (80070d4 <HAL_GPIO_Init+0x330>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d101      	bne.n	8006fae <HAL_GPIO_Init+0x20a>
 8006faa:	2307      	movs	r3, #7
 8006fac:	e00e      	b.n	8006fcc <HAL_GPIO_Init+0x228>
 8006fae:	2308      	movs	r3, #8
 8006fb0:	e00c      	b.n	8006fcc <HAL_GPIO_Init+0x228>
 8006fb2:	2306      	movs	r3, #6
 8006fb4:	e00a      	b.n	8006fcc <HAL_GPIO_Init+0x228>
 8006fb6:	2305      	movs	r3, #5
 8006fb8:	e008      	b.n	8006fcc <HAL_GPIO_Init+0x228>
 8006fba:	2304      	movs	r3, #4
 8006fbc:	e006      	b.n	8006fcc <HAL_GPIO_Init+0x228>
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e004      	b.n	8006fcc <HAL_GPIO_Init+0x228>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e002      	b.n	8006fcc <HAL_GPIO_Init+0x228>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e000      	b.n	8006fcc <HAL_GPIO_Init+0x228>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	f002 0203 	and.w	r2, r2, #3
 8006fd2:	0092      	lsls	r2, r2, #2
 8006fd4:	4093      	lsls	r3, r2
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fdc:	4935      	ldr	r1, [pc, #212]	@ (80070b4 <HAL_GPIO_Init+0x310>)
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	089b      	lsrs	r3, r3, #2
 8006fe2:	3302      	adds	r3, #2
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006fea:	4b3b      	ldr	r3, [pc, #236]	@ (80070d8 <HAL_GPIO_Init+0x334>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	43db      	mvns	r3, r3
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	4313      	orrs	r3, r2
 800700c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800700e:	4a32      	ldr	r2, [pc, #200]	@ (80070d8 <HAL_GPIO_Init+0x334>)
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007014:	4b30      	ldr	r3, [pc, #192]	@ (80070d8 <HAL_GPIO_Init+0x334>)
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	43db      	mvns	r3, r3
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	4013      	ands	r3, r2
 8007022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007038:	4a27      	ldr	r2, [pc, #156]	@ (80070d8 <HAL_GPIO_Init+0x334>)
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800703e:	4b26      	ldr	r3, [pc, #152]	@ (80070d8 <HAL_GPIO_Init+0x334>)
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	43db      	mvns	r3, r3
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	4013      	ands	r3, r2
 800704c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4313      	orrs	r3, r2
 8007060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007062:	4a1d      	ldr	r2, [pc, #116]	@ (80070d8 <HAL_GPIO_Init+0x334>)
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007068:	4b1b      	ldr	r3, [pc, #108]	@ (80070d8 <HAL_GPIO_Init+0x334>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	43db      	mvns	r3, r3
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	4013      	ands	r3, r2
 8007076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	4313      	orrs	r3, r2
 800708a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800708c:	4a12      	ldr	r2, [pc, #72]	@ (80070d8 <HAL_GPIO_Init+0x334>)
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	3301      	adds	r3, #1
 8007096:	61fb      	str	r3, [r7, #28]
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	2b0f      	cmp	r3, #15
 800709c:	f67f ae90 	bls.w	8006dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070a0:	bf00      	nop
 80070a2:	bf00      	nop
 80070a4:	3724      	adds	r7, #36	@ 0x24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	40023800 	.word	0x40023800
 80070b4:	40013800 	.word	0x40013800
 80070b8:	40020000 	.word	0x40020000
 80070bc:	40020400 	.word	0x40020400
 80070c0:	40020800 	.word	0x40020800
 80070c4:	40020c00 	.word	0x40020c00
 80070c8:	40021000 	.word	0x40021000
 80070cc:	40021400 	.word	0x40021400
 80070d0:	40021800 	.word	0x40021800
 80070d4:	40021c00 	.word	0x40021c00
 80070d8:	40013c00 	.word	0x40013c00

080070dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	807b      	strh	r3, [r7, #2]
 80070e8:	4613      	mov	r3, r2
 80070ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80070ec:	787b      	ldrb	r3, [r7, #1]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070f2:	887a      	ldrh	r2, [r7, #2]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80070f8:	e003      	b.n	8007102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80070fa:	887b      	ldrh	r3, [r7, #2]
 80070fc:	041a      	lsls	r2, r3, #16
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	619a      	str	r2, [r3, #24]
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
	...

08007110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e12b      	b.n	800737a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d106      	bne.n	800713c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7fa fa26 	bl	8001588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2224      	movs	r2, #36	@ 0x24
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 0201 	bic.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007174:	f000 fd80 	bl	8007c78 <HAL_RCC_GetPCLK1Freq>
 8007178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	4a81      	ldr	r2, [pc, #516]	@ (8007384 <HAL_I2C_Init+0x274>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d807      	bhi.n	8007194 <HAL_I2C_Init+0x84>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4a80      	ldr	r2, [pc, #512]	@ (8007388 <HAL_I2C_Init+0x278>)
 8007188:	4293      	cmp	r3, r2
 800718a:	bf94      	ite	ls
 800718c:	2301      	movls	r3, #1
 800718e:	2300      	movhi	r3, #0
 8007190:	b2db      	uxtb	r3, r3
 8007192:	e006      	b.n	80071a2 <HAL_I2C_Init+0x92>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4a7d      	ldr	r2, [pc, #500]	@ (800738c <HAL_I2C_Init+0x27c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	bf94      	ite	ls
 800719c:	2301      	movls	r3, #1
 800719e:	2300      	movhi	r3, #0
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e0e7      	b.n	800737a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4a78      	ldr	r2, [pc, #480]	@ (8007390 <HAL_I2C_Init+0x280>)
 80071ae:	fba2 2303 	umull	r2, r3, r2, r3
 80071b2:	0c9b      	lsrs	r3, r3, #18
 80071b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	4a6a      	ldr	r2, [pc, #424]	@ (8007384 <HAL_I2C_Init+0x274>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d802      	bhi.n	80071e4 <HAL_I2C_Init+0xd4>
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	3301      	adds	r3, #1
 80071e2:	e009      	b.n	80071f8 <HAL_I2C_Init+0xe8>
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80071ea:	fb02 f303 	mul.w	r3, r2, r3
 80071ee:	4a69      	ldr	r2, [pc, #420]	@ (8007394 <HAL_I2C_Init+0x284>)
 80071f0:	fba2 2303 	umull	r2, r3, r2, r3
 80071f4:	099b      	lsrs	r3, r3, #6
 80071f6:	3301      	adds	r3, #1
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6812      	ldr	r2, [r2, #0]
 80071fc:	430b      	orrs	r3, r1
 80071fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800720a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	495c      	ldr	r1, [pc, #368]	@ (8007384 <HAL_I2C_Init+0x274>)
 8007214:	428b      	cmp	r3, r1
 8007216:	d819      	bhi.n	800724c <HAL_I2C_Init+0x13c>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	1e59      	subs	r1, r3, #1
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	fbb1 f3f3 	udiv	r3, r1, r3
 8007226:	1c59      	adds	r1, r3, #1
 8007228:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800722c:	400b      	ands	r3, r1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <HAL_I2C_Init+0x138>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	1e59      	subs	r1, r3, #1
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007240:	3301      	adds	r3, #1
 8007242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007246:	e051      	b.n	80072ec <HAL_I2C_Init+0x1dc>
 8007248:	2304      	movs	r3, #4
 800724a:	e04f      	b.n	80072ec <HAL_I2C_Init+0x1dc>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d111      	bne.n	8007278 <HAL_I2C_Init+0x168>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	1e58      	subs	r0, r3, #1
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6859      	ldr	r1, [r3, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	440b      	add	r3, r1
 8007262:	fbb0 f3f3 	udiv	r3, r0, r3
 8007266:	3301      	adds	r3, #1
 8007268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800726c:	2b00      	cmp	r3, #0
 800726e:	bf0c      	ite	eq
 8007270:	2301      	moveq	r3, #1
 8007272:	2300      	movne	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	e012      	b.n	800729e <HAL_I2C_Init+0x18e>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	1e58      	subs	r0, r3, #1
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6859      	ldr	r1, [r3, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	0099      	lsls	r1, r3, #2
 8007288:	440b      	add	r3, r1
 800728a:	fbb0 f3f3 	udiv	r3, r0, r3
 800728e:	3301      	adds	r3, #1
 8007290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007294:	2b00      	cmp	r3, #0
 8007296:	bf0c      	ite	eq
 8007298:	2301      	moveq	r3, #1
 800729a:	2300      	movne	r3, #0
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <HAL_I2C_Init+0x196>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e022      	b.n	80072ec <HAL_I2C_Init+0x1dc>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10e      	bne.n	80072cc <HAL_I2C_Init+0x1bc>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	1e58      	subs	r0, r3, #1
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6859      	ldr	r1, [r3, #4]
 80072b6:	460b      	mov	r3, r1
 80072b8:	005b      	lsls	r3, r3, #1
 80072ba:	440b      	add	r3, r1
 80072bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80072c0:	3301      	adds	r3, #1
 80072c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072ca:	e00f      	b.n	80072ec <HAL_I2C_Init+0x1dc>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	1e58      	subs	r0, r3, #1
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6859      	ldr	r1, [r3, #4]
 80072d4:	460b      	mov	r3, r1
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	440b      	add	r3, r1
 80072da:	0099      	lsls	r1, r3, #2
 80072dc:	440b      	add	r3, r1
 80072de:	fbb0 f3f3 	udiv	r3, r0, r3
 80072e2:	3301      	adds	r3, #1
 80072e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	6809      	ldr	r1, [r1, #0]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	69da      	ldr	r2, [r3, #28]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	430a      	orrs	r2, r1
 800730e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800731a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	6911      	ldr	r1, [r2, #16]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	68d2      	ldr	r2, [r2, #12]
 8007326:	4311      	orrs	r1, r2
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6812      	ldr	r2, [r2, #0]
 800732c:	430b      	orrs	r3, r1
 800732e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	695a      	ldr	r2, [r3, #20]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f042 0201 	orr.w	r2, r2, #1
 800735a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	000186a0 	.word	0x000186a0
 8007388:	001e847f 	.word	0x001e847f
 800738c:	003d08ff 	.word	0x003d08ff
 8007390:	431bde83 	.word	0x431bde83
 8007394:	10624dd3 	.word	0x10624dd3

08007398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e267      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d075      	beq.n	80074a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80073b6:	4b88      	ldr	r3, [pc, #544]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 030c 	and.w	r3, r3, #12
 80073be:	2b04      	cmp	r3, #4
 80073c0:	d00c      	beq.n	80073dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073c2:	4b85      	ldr	r3, [pc, #532]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	d112      	bne.n	80073f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073ce:	4b82      	ldr	r3, [pc, #520]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073da:	d10b      	bne.n	80073f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073dc:	4b7e      	ldr	r3, [pc, #504]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d05b      	beq.n	80074a0 <HAL_RCC_OscConfig+0x108>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d157      	bne.n	80074a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e242      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073fc:	d106      	bne.n	800740c <HAL_RCC_OscConfig+0x74>
 80073fe:	4b76      	ldr	r3, [pc, #472]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a75      	ldr	r2, [pc, #468]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 8007404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007408:	6013      	str	r3, [r2, #0]
 800740a:	e01d      	b.n	8007448 <HAL_RCC_OscConfig+0xb0>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007414:	d10c      	bne.n	8007430 <HAL_RCC_OscConfig+0x98>
 8007416:	4b70      	ldr	r3, [pc, #448]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a6f      	ldr	r2, [pc, #444]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 800741c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	4b6d      	ldr	r3, [pc, #436]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a6c      	ldr	r2, [pc, #432]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 8007428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	e00b      	b.n	8007448 <HAL_RCC_OscConfig+0xb0>
 8007430:	4b69      	ldr	r3, [pc, #420]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a68      	ldr	r2, [pc, #416]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 8007436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	4b66      	ldr	r3, [pc, #408]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a65      	ldr	r2, [pc, #404]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 8007442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d013      	beq.n	8007478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007450:	f7fd fac6 	bl	80049e0 <HAL_GetTick>
 8007454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007456:	e008      	b.n	800746a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007458:	f7fd fac2 	bl	80049e0 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	2b64      	cmp	r3, #100	@ 0x64
 8007464:	d901      	bls.n	800746a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e207      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800746a:	4b5b      	ldr	r3, [pc, #364]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0f0      	beq.n	8007458 <HAL_RCC_OscConfig+0xc0>
 8007476:	e014      	b.n	80074a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007478:	f7fd fab2 	bl	80049e0 <HAL_GetTick>
 800747c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800747e:	e008      	b.n	8007492 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007480:	f7fd faae 	bl	80049e0 <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	2b64      	cmp	r3, #100	@ 0x64
 800748c:	d901      	bls.n	8007492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e1f3      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007492:	4b51      	ldr	r3, [pc, #324]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1f0      	bne.n	8007480 <HAL_RCC_OscConfig+0xe8>
 800749e:	e000      	b.n	80074a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d063      	beq.n	8007576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80074ae:	4b4a      	ldr	r3, [pc, #296]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f003 030c 	and.w	r3, r3, #12
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00b      	beq.n	80074d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074ba:	4b47      	ldr	r3, [pc, #284]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80074c2:	2b08      	cmp	r3, #8
 80074c4:	d11c      	bne.n	8007500 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074c6:	4b44      	ldr	r3, [pc, #272]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d116      	bne.n	8007500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074d2:	4b41      	ldr	r3, [pc, #260]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d005      	beq.n	80074ea <HAL_RCC_OscConfig+0x152>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d001      	beq.n	80074ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e1c7      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ea:	4b3b      	ldr	r3, [pc, #236]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	4937      	ldr	r1, [pc, #220]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074fe:	e03a      	b.n	8007576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d020      	beq.n	800754a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007508:	4b34      	ldr	r3, [pc, #208]	@ (80075dc <HAL_RCC_OscConfig+0x244>)
 800750a:	2201      	movs	r2, #1
 800750c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800750e:	f7fd fa67 	bl	80049e0 <HAL_GetTick>
 8007512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007514:	e008      	b.n	8007528 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007516:	f7fd fa63 	bl	80049e0 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	2b02      	cmp	r3, #2
 8007522:	d901      	bls.n	8007528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e1a8      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007528:	4b2b      	ldr	r3, [pc, #172]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0302 	and.w	r3, r3, #2
 8007530:	2b00      	cmp	r3, #0
 8007532:	d0f0      	beq.n	8007516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007534:	4b28      	ldr	r3, [pc, #160]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	4925      	ldr	r1, [pc, #148]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 8007544:	4313      	orrs	r3, r2
 8007546:	600b      	str	r3, [r1, #0]
 8007548:	e015      	b.n	8007576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800754a:	4b24      	ldr	r3, [pc, #144]	@ (80075dc <HAL_RCC_OscConfig+0x244>)
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007550:	f7fd fa46 	bl	80049e0 <HAL_GetTick>
 8007554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007556:	e008      	b.n	800756a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007558:	f7fd fa42 	bl	80049e0 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e187      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800756a:	4b1b      	ldr	r3, [pc, #108]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1f0      	bne.n	8007558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0308 	and.w	r3, r3, #8
 800757e:	2b00      	cmp	r3, #0
 8007580:	d036      	beq.n	80075f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d016      	beq.n	80075b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800758a:	4b15      	ldr	r3, [pc, #84]	@ (80075e0 <HAL_RCC_OscConfig+0x248>)
 800758c:	2201      	movs	r2, #1
 800758e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007590:	f7fd fa26 	bl	80049e0 <HAL_GetTick>
 8007594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007596:	e008      	b.n	80075aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007598:	f7fd fa22 	bl	80049e0 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e167      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075aa:	4b0b      	ldr	r3, [pc, #44]	@ (80075d8 <HAL_RCC_OscConfig+0x240>)
 80075ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0f0      	beq.n	8007598 <HAL_RCC_OscConfig+0x200>
 80075b6:	e01b      	b.n	80075f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075b8:	4b09      	ldr	r3, [pc, #36]	@ (80075e0 <HAL_RCC_OscConfig+0x248>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075be:	f7fd fa0f 	bl	80049e0 <HAL_GetTick>
 80075c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075c4:	e00e      	b.n	80075e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075c6:	f7fd fa0b 	bl	80049e0 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d907      	bls.n	80075e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e150      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
 80075d8:	40023800 	.word	0x40023800
 80075dc:	42470000 	.word	0x42470000
 80075e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075e4:	4b88      	ldr	r3, [pc, #544]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 80075e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1ea      	bne.n	80075c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 8097 	beq.w	800772c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075fe:	2300      	movs	r3, #0
 8007600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007602:	4b81      	ldr	r3, [pc, #516]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 8007604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10f      	bne.n	800762e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800760e:	2300      	movs	r3, #0
 8007610:	60bb      	str	r3, [r7, #8]
 8007612:	4b7d      	ldr	r3, [pc, #500]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 8007614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007616:	4a7c      	ldr	r2, [pc, #496]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 8007618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800761c:	6413      	str	r3, [r2, #64]	@ 0x40
 800761e:	4b7a      	ldr	r3, [pc, #488]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 8007620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007626:	60bb      	str	r3, [r7, #8]
 8007628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800762a:	2301      	movs	r3, #1
 800762c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800762e:	4b77      	ldr	r3, [pc, #476]	@ (800780c <HAL_RCC_OscConfig+0x474>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007636:	2b00      	cmp	r3, #0
 8007638:	d118      	bne.n	800766c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800763a:	4b74      	ldr	r3, [pc, #464]	@ (800780c <HAL_RCC_OscConfig+0x474>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a73      	ldr	r2, [pc, #460]	@ (800780c <HAL_RCC_OscConfig+0x474>)
 8007640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007646:	f7fd f9cb 	bl	80049e0 <HAL_GetTick>
 800764a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800764c:	e008      	b.n	8007660 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800764e:	f7fd f9c7 	bl	80049e0 <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	2b02      	cmp	r3, #2
 800765a:	d901      	bls.n	8007660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e10c      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007660:	4b6a      	ldr	r3, [pc, #424]	@ (800780c <HAL_RCC_OscConfig+0x474>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007668:	2b00      	cmp	r3, #0
 800766a:	d0f0      	beq.n	800764e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d106      	bne.n	8007682 <HAL_RCC_OscConfig+0x2ea>
 8007674:	4b64      	ldr	r3, [pc, #400]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 8007676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007678:	4a63      	ldr	r2, [pc, #396]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 800767a:	f043 0301 	orr.w	r3, r3, #1
 800767e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007680:	e01c      	b.n	80076bc <HAL_RCC_OscConfig+0x324>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	2b05      	cmp	r3, #5
 8007688:	d10c      	bne.n	80076a4 <HAL_RCC_OscConfig+0x30c>
 800768a:	4b5f      	ldr	r3, [pc, #380]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 800768c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800768e:	4a5e      	ldr	r2, [pc, #376]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 8007690:	f043 0304 	orr.w	r3, r3, #4
 8007694:	6713      	str	r3, [r2, #112]	@ 0x70
 8007696:	4b5c      	ldr	r3, [pc, #368]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 8007698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800769a:	4a5b      	ldr	r2, [pc, #364]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 800769c:	f043 0301 	orr.w	r3, r3, #1
 80076a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80076a2:	e00b      	b.n	80076bc <HAL_RCC_OscConfig+0x324>
 80076a4:	4b58      	ldr	r3, [pc, #352]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 80076a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a8:	4a57      	ldr	r2, [pc, #348]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 80076aa:	f023 0301 	bic.w	r3, r3, #1
 80076ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80076b0:	4b55      	ldr	r3, [pc, #340]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 80076b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b4:	4a54      	ldr	r2, [pc, #336]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 80076b6:	f023 0304 	bic.w	r3, r3, #4
 80076ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d015      	beq.n	80076f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c4:	f7fd f98c 	bl	80049e0 <HAL_GetTick>
 80076c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076ca:	e00a      	b.n	80076e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076cc:	f7fd f988 	bl	80049e0 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076da:	4293      	cmp	r3, r2
 80076dc:	d901      	bls.n	80076e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e0cb      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076e2:	4b49      	ldr	r3, [pc, #292]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 80076e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0ee      	beq.n	80076cc <HAL_RCC_OscConfig+0x334>
 80076ee:	e014      	b.n	800771a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076f0:	f7fd f976 	bl	80049e0 <HAL_GetTick>
 80076f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076f6:	e00a      	b.n	800770e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076f8:	f7fd f972 	bl	80049e0 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007706:	4293      	cmp	r3, r2
 8007708:	d901      	bls.n	800770e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e0b5      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800770e:	4b3e      	ldr	r3, [pc, #248]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 8007710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1ee      	bne.n	80076f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800771a:	7dfb      	ldrb	r3, [r7, #23]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d105      	bne.n	800772c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007720:	4b39      	ldr	r3, [pc, #228]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 8007722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007724:	4a38      	ldr	r2, [pc, #224]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 8007726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800772a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 80a1 	beq.w	8007878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007736:	4b34      	ldr	r3, [pc, #208]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f003 030c 	and.w	r3, r3, #12
 800773e:	2b08      	cmp	r3, #8
 8007740:	d05c      	beq.n	80077fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	2b02      	cmp	r3, #2
 8007748:	d141      	bne.n	80077ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800774a:	4b31      	ldr	r3, [pc, #196]	@ (8007810 <HAL_RCC_OscConfig+0x478>)
 800774c:	2200      	movs	r2, #0
 800774e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007750:	f7fd f946 	bl	80049e0 <HAL_GetTick>
 8007754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007756:	e008      	b.n	800776a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007758:	f7fd f942 	bl	80049e0 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e087      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800776a:	4b27      	ldr	r3, [pc, #156]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1f0      	bne.n	8007758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	69da      	ldr	r2, [r3, #28]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	431a      	orrs	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007784:	019b      	lsls	r3, r3, #6
 8007786:	431a      	orrs	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800778c:	085b      	lsrs	r3, r3, #1
 800778e:	3b01      	subs	r3, #1
 8007790:	041b      	lsls	r3, r3, #16
 8007792:	431a      	orrs	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007798:	061b      	lsls	r3, r3, #24
 800779a:	491b      	ldr	r1, [pc, #108]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 800779c:	4313      	orrs	r3, r2
 800779e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077a0:	4b1b      	ldr	r3, [pc, #108]	@ (8007810 <HAL_RCC_OscConfig+0x478>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077a6:	f7fd f91b 	bl	80049e0 <HAL_GetTick>
 80077aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077ac:	e008      	b.n	80077c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077ae:	f7fd f917 	bl	80049e0 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d901      	bls.n	80077c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e05c      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077c0:	4b11      	ldr	r3, [pc, #68]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d0f0      	beq.n	80077ae <HAL_RCC_OscConfig+0x416>
 80077cc:	e054      	b.n	8007878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077ce:	4b10      	ldr	r3, [pc, #64]	@ (8007810 <HAL_RCC_OscConfig+0x478>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077d4:	f7fd f904 	bl	80049e0 <HAL_GetTick>
 80077d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077da:	e008      	b.n	80077ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077dc:	f7fd f900 	bl	80049e0 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d901      	bls.n	80077ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e045      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077ee:	4b06      	ldr	r3, [pc, #24]	@ (8007808 <HAL_RCC_OscConfig+0x470>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1f0      	bne.n	80077dc <HAL_RCC_OscConfig+0x444>
 80077fa:	e03d      	b.n	8007878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d107      	bne.n	8007814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e038      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
 8007808:	40023800 	.word	0x40023800
 800780c:	40007000 	.word	0x40007000
 8007810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007814:	4b1b      	ldr	r3, [pc, #108]	@ (8007884 <HAL_RCC_OscConfig+0x4ec>)
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d028      	beq.n	8007874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800782c:	429a      	cmp	r2, r3
 800782e:	d121      	bne.n	8007874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800783a:	429a      	cmp	r2, r3
 800783c:	d11a      	bne.n	8007874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007844:	4013      	ands	r3, r2
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800784a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800784c:	4293      	cmp	r3, r2
 800784e:	d111      	bne.n	8007874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785a:	085b      	lsrs	r3, r3, #1
 800785c:	3b01      	subs	r3, #1
 800785e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007860:	429a      	cmp	r2, r3
 8007862:	d107      	bne.n	8007874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007870:	429a      	cmp	r2, r3
 8007872:	d001      	beq.n	8007878 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e000      	b.n	800787a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3718      	adds	r7, #24
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	40023800 	.word	0x40023800

08007888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e0cc      	b.n	8007a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800789c:	4b68      	ldr	r3, [pc, #416]	@ (8007a40 <HAL_RCC_ClockConfig+0x1b8>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0307 	and.w	r3, r3, #7
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d90c      	bls.n	80078c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078aa:	4b65      	ldr	r3, [pc, #404]	@ (8007a40 <HAL_RCC_ClockConfig+0x1b8>)
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	b2d2      	uxtb	r2, r2
 80078b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078b2:	4b63      	ldr	r3, [pc, #396]	@ (8007a40 <HAL_RCC_ClockConfig+0x1b8>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0307 	and.w	r3, r3, #7
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d001      	beq.n	80078c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e0b8      	b.n	8007a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d020      	beq.n	8007912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0304 	and.w	r3, r3, #4
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078dc:	4b59      	ldr	r3, [pc, #356]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	4a58      	ldr	r2, [pc, #352]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 80078e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80078e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0308 	and.w	r3, r3, #8
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078f4:	4b53      	ldr	r3, [pc, #332]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	4a52      	ldr	r2, [pc, #328]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 80078fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80078fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007900:	4b50      	ldr	r3, [pc, #320]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	494d      	ldr	r1, [pc, #308]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 800790e:	4313      	orrs	r3, r2
 8007910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d044      	beq.n	80079a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d107      	bne.n	8007936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007926:	4b47      	ldr	r3, [pc, #284]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d119      	bne.n	8007966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e07f      	b.n	8007a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d003      	beq.n	8007946 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007942:	2b03      	cmp	r3, #3
 8007944:	d107      	bne.n	8007956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007946:	4b3f      	ldr	r3, [pc, #252]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d109      	bne.n	8007966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e06f      	b.n	8007a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007956:	4b3b      	ldr	r3, [pc, #236]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e067      	b.n	8007a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007966:	4b37      	ldr	r3, [pc, #220]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f023 0203 	bic.w	r2, r3, #3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	4934      	ldr	r1, [pc, #208]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 8007974:	4313      	orrs	r3, r2
 8007976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007978:	f7fd f832 	bl	80049e0 <HAL_GetTick>
 800797c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800797e:	e00a      	b.n	8007996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007980:	f7fd f82e 	bl	80049e0 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800798e:	4293      	cmp	r3, r2
 8007990:	d901      	bls.n	8007996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e04f      	b.n	8007a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007996:	4b2b      	ldr	r3, [pc, #172]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f003 020c 	and.w	r2, r3, #12
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d1eb      	bne.n	8007980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079a8:	4b25      	ldr	r3, [pc, #148]	@ (8007a40 <HAL_RCC_ClockConfig+0x1b8>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0307 	and.w	r3, r3, #7
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d20c      	bcs.n	80079d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079b6:	4b22      	ldr	r3, [pc, #136]	@ (8007a40 <HAL_RCC_ClockConfig+0x1b8>)
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	b2d2      	uxtb	r2, r2
 80079bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079be:	4b20      	ldr	r3, [pc, #128]	@ (8007a40 <HAL_RCC_ClockConfig+0x1b8>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d001      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e032      	b.n	8007a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d008      	beq.n	80079ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079dc:	4b19      	ldr	r3, [pc, #100]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	4916      	ldr	r1, [pc, #88]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0308 	and.w	r3, r3, #8
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d009      	beq.n	8007a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079fa:	4b12      	ldr	r3, [pc, #72]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	00db      	lsls	r3, r3, #3
 8007a08:	490e      	ldr	r1, [pc, #56]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a0e:	f000 f821 	bl	8007a54 <HAL_RCC_GetSysClockFreq>
 8007a12:	4602      	mov	r2, r0
 8007a14:	4b0b      	ldr	r3, [pc, #44]	@ (8007a44 <HAL_RCC_ClockConfig+0x1bc>)
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	091b      	lsrs	r3, r3, #4
 8007a1a:	f003 030f 	and.w	r3, r3, #15
 8007a1e:	490a      	ldr	r1, [pc, #40]	@ (8007a48 <HAL_RCC_ClockConfig+0x1c0>)
 8007a20:	5ccb      	ldrb	r3, [r1, r3]
 8007a22:	fa22 f303 	lsr.w	r3, r2, r3
 8007a26:	4a09      	ldr	r2, [pc, #36]	@ (8007a4c <HAL_RCC_ClockConfig+0x1c4>)
 8007a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007a2a:	4b09      	ldr	r3, [pc, #36]	@ (8007a50 <HAL_RCC_ClockConfig+0x1c8>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fc ff92 	bl	8004958 <HAL_InitTick>

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	40023c00 	.word	0x40023c00
 8007a44:	40023800 	.word	0x40023800
 8007a48:	08019a48 	.word	0x08019a48
 8007a4c:	20000038 	.word	0x20000038
 8007a50:	200000a4 	.word	0x200000a4

08007a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a58:	b094      	sub	sp, #80	@ 0x50
 8007a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a6c:	4b79      	ldr	r3, [pc, #484]	@ (8007c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f003 030c 	and.w	r3, r3, #12
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d00d      	beq.n	8007a94 <HAL_RCC_GetSysClockFreq+0x40>
 8007a78:	2b08      	cmp	r3, #8
 8007a7a:	f200 80e1 	bhi.w	8007c40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d002      	beq.n	8007a88 <HAL_RCC_GetSysClockFreq+0x34>
 8007a82:	2b04      	cmp	r3, #4
 8007a84:	d003      	beq.n	8007a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8007a86:	e0db      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a88:	4b73      	ldr	r3, [pc, #460]	@ (8007c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007a8c:	e0db      	b.n	8007c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a8e:	4b73      	ldr	r3, [pc, #460]	@ (8007c5c <HAL_RCC_GetSysClockFreq+0x208>)
 8007a90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007a92:	e0d8      	b.n	8007c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a94:	4b6f      	ldr	r3, [pc, #444]	@ (8007c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8007c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d063      	beq.n	8007b72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8007c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	099b      	lsrs	r3, r3, #6
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ab4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007abe:	2300      	movs	r3, #0
 8007ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007ac6:	4622      	mov	r2, r4
 8007ac8:	462b      	mov	r3, r5
 8007aca:	f04f 0000 	mov.w	r0, #0
 8007ace:	f04f 0100 	mov.w	r1, #0
 8007ad2:	0159      	lsls	r1, r3, #5
 8007ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ad8:	0150      	lsls	r0, r2, #5
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4621      	mov	r1, r4
 8007ae0:	1a51      	subs	r1, r2, r1
 8007ae2:	6139      	str	r1, [r7, #16]
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	f04f 0300 	mov.w	r3, #0
 8007af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007af8:	4659      	mov	r1, fp
 8007afa:	018b      	lsls	r3, r1, #6
 8007afc:	4651      	mov	r1, sl
 8007afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b02:	4651      	mov	r1, sl
 8007b04:	018a      	lsls	r2, r1, #6
 8007b06:	4651      	mov	r1, sl
 8007b08:	ebb2 0801 	subs.w	r8, r2, r1
 8007b0c:	4659      	mov	r1, fp
 8007b0e:	eb63 0901 	sbc.w	r9, r3, r1
 8007b12:	f04f 0200 	mov.w	r2, #0
 8007b16:	f04f 0300 	mov.w	r3, #0
 8007b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b26:	4690      	mov	r8, r2
 8007b28:	4699      	mov	r9, r3
 8007b2a:	4623      	mov	r3, r4
 8007b2c:	eb18 0303 	adds.w	r3, r8, r3
 8007b30:	60bb      	str	r3, [r7, #8]
 8007b32:	462b      	mov	r3, r5
 8007b34:	eb49 0303 	adc.w	r3, r9, r3
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	f04f 0200 	mov.w	r2, #0
 8007b3e:	f04f 0300 	mov.w	r3, #0
 8007b42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007b46:	4629      	mov	r1, r5
 8007b48:	024b      	lsls	r3, r1, #9
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b50:	4621      	mov	r1, r4
 8007b52:	024a      	lsls	r2, r1, #9
 8007b54:	4610      	mov	r0, r2
 8007b56:	4619      	mov	r1, r3
 8007b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b64:	f7f9 f852 	bl	8000c0c <__aeabi_uldivmod>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b70:	e058      	b.n	8007c24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b72:	4b38      	ldr	r3, [pc, #224]	@ (8007c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	099b      	lsrs	r3, r3, #6
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b82:	623b      	str	r3, [r7, #32]
 8007b84:	2300      	movs	r3, #0
 8007b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007b8c:	4642      	mov	r2, r8
 8007b8e:	464b      	mov	r3, r9
 8007b90:	f04f 0000 	mov.w	r0, #0
 8007b94:	f04f 0100 	mov.w	r1, #0
 8007b98:	0159      	lsls	r1, r3, #5
 8007b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b9e:	0150      	lsls	r0, r2, #5
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4641      	mov	r1, r8
 8007ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8007baa:	4649      	mov	r1, r9
 8007bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8007bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8007bcc:	f04f 0200 	mov.w	r2, #0
 8007bd0:	f04f 0300 	mov.w	r3, #0
 8007bd4:	00eb      	lsls	r3, r5, #3
 8007bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bda:	00e2      	lsls	r2, r4, #3
 8007bdc:	4614      	mov	r4, r2
 8007bde:	461d      	mov	r5, r3
 8007be0:	4643      	mov	r3, r8
 8007be2:	18e3      	adds	r3, r4, r3
 8007be4:	603b      	str	r3, [r7, #0]
 8007be6:	464b      	mov	r3, r9
 8007be8:	eb45 0303 	adc.w	r3, r5, r3
 8007bec:	607b      	str	r3, [r7, #4]
 8007bee:	f04f 0200 	mov.w	r2, #0
 8007bf2:	f04f 0300 	mov.w	r3, #0
 8007bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	028b      	lsls	r3, r1, #10
 8007bfe:	4621      	mov	r1, r4
 8007c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c04:	4621      	mov	r1, r4
 8007c06:	028a      	lsls	r2, r1, #10
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c0e:	2200      	movs	r2, #0
 8007c10:	61bb      	str	r3, [r7, #24]
 8007c12:	61fa      	str	r2, [r7, #28]
 8007c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c18:	f7f8 fff8 	bl	8000c0c <__aeabi_uldivmod>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4613      	mov	r3, r2
 8007c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007c24:	4b0b      	ldr	r3, [pc, #44]	@ (8007c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	0c1b      	lsrs	r3, r3, #16
 8007c2a:	f003 0303 	and.w	r3, r3, #3
 8007c2e:	3301      	adds	r3, #1
 8007c30:	005b      	lsls	r3, r3, #1
 8007c32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007c34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007c3e:	e002      	b.n	8007c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c40:	4b05      	ldr	r3, [pc, #20]	@ (8007c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8007c42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3750      	adds	r7, #80	@ 0x50
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c52:	bf00      	nop
 8007c54:	40023800 	.word	0x40023800
 8007c58:	00f42400 	.word	0x00f42400
 8007c5c:	007a1200 	.word	0x007a1200

08007c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c60:	b480      	push	{r7}
 8007c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c64:	4b03      	ldr	r3, [pc, #12]	@ (8007c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c66:	681b      	ldr	r3, [r3, #0]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	20000038 	.word	0x20000038

08007c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c7c:	f7ff fff0 	bl	8007c60 <HAL_RCC_GetHCLKFreq>
 8007c80:	4602      	mov	r2, r0
 8007c82:	4b05      	ldr	r3, [pc, #20]	@ (8007c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	0a9b      	lsrs	r3, r3, #10
 8007c88:	f003 0307 	and.w	r3, r3, #7
 8007c8c:	4903      	ldr	r1, [pc, #12]	@ (8007c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c8e:	5ccb      	ldrb	r3, [r1, r3]
 8007c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	40023800 	.word	0x40023800
 8007c9c:	08019a58 	.word	0x08019a58

08007ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ca4:	f7ff ffdc 	bl	8007c60 <HAL_RCC_GetHCLKFreq>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	4b05      	ldr	r3, [pc, #20]	@ (8007cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	0b5b      	lsrs	r3, r3, #13
 8007cb0:	f003 0307 	and.w	r3, r3, #7
 8007cb4:	4903      	ldr	r1, [pc, #12]	@ (8007cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cb6:	5ccb      	ldrb	r3, [r1, r3]
 8007cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	40023800 	.word	0x40023800
 8007cc4:	08019a58 	.word	0x08019a58

08007cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e041      	b.n	8007d5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d106      	bne.n	8007cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7fb fce8 	bl	80036c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3304      	adds	r3, #4
 8007d04:	4619      	mov	r1, r3
 8007d06:	4610      	mov	r0, r2
 8007d08:	f000 fcc4 	bl	8008694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d001      	beq.n	8007d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e04e      	b.n	8007e1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f042 0201 	orr.w	r2, r2, #1
 8007d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a23      	ldr	r2, [pc, #140]	@ (8007e2c <HAL_TIM_Base_Start_IT+0xc4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d022      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x80>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007daa:	d01d      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x80>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a1f      	ldr	r2, [pc, #124]	@ (8007e30 <HAL_TIM_Base_Start_IT+0xc8>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d018      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x80>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a1e      	ldr	r2, [pc, #120]	@ (8007e34 <HAL_TIM_Base_Start_IT+0xcc>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d013      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x80>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8007e38 <HAL_TIM_Base_Start_IT+0xd0>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00e      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x80>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a1b      	ldr	r2, [pc, #108]	@ (8007e3c <HAL_TIM_Base_Start_IT+0xd4>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d009      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x80>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a19      	ldr	r2, [pc, #100]	@ (8007e40 <HAL_TIM_Base_Start_IT+0xd8>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d004      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x80>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a18      	ldr	r2, [pc, #96]	@ (8007e44 <HAL_TIM_Base_Start_IT+0xdc>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d111      	bne.n	8007e0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f003 0307 	and.w	r3, r3, #7
 8007df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b06      	cmp	r3, #6
 8007df8:	d010      	beq.n	8007e1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f042 0201 	orr.w	r2, r2, #1
 8007e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e0a:	e007      	b.n	8007e1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0201 	orr.w	r2, r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	40010000 	.word	0x40010000
 8007e30:	40000400 	.word	0x40000400
 8007e34:	40000800 	.word	0x40000800
 8007e38:	40000c00 	.word	0x40000c00
 8007e3c:	40010400 	.word	0x40010400
 8007e40:	40014000 	.word	0x40014000
 8007e44:	40001800 	.word	0x40001800

08007e48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e041      	b.n	8007ede <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d106      	bne.n	8007e74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7fb fbc4 	bl	80035fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3304      	adds	r3, #4
 8007e84:	4619      	mov	r1, r3
 8007e86:	4610      	mov	r0, r2
 8007e88:	f000 fc04 	bl	8008694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d109      	bne.n	8007f0c <HAL_TIM_PWM_Start+0x24>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	bf14      	ite	ne
 8007f04:	2301      	movne	r3, #1
 8007f06:	2300      	moveq	r3, #0
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	e022      	b.n	8007f52 <HAL_TIM_PWM_Start+0x6a>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d109      	bne.n	8007f26 <HAL_TIM_PWM_Start+0x3e>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	bf14      	ite	ne
 8007f1e:	2301      	movne	r3, #1
 8007f20:	2300      	moveq	r3, #0
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	e015      	b.n	8007f52 <HAL_TIM_PWM_Start+0x6a>
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b08      	cmp	r3, #8
 8007f2a:	d109      	bne.n	8007f40 <HAL_TIM_PWM_Start+0x58>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	bf14      	ite	ne
 8007f38:	2301      	movne	r3, #1
 8007f3a:	2300      	moveq	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	e008      	b.n	8007f52 <HAL_TIM_PWM_Start+0x6a>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	bf14      	ite	ne
 8007f4c:	2301      	movne	r3, #1
 8007f4e:	2300      	moveq	r3, #0
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e07c      	b.n	8008054 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d104      	bne.n	8007f6a <HAL_TIM_PWM_Start+0x82>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f68:	e013      	b.n	8007f92 <HAL_TIM_PWM_Start+0xaa>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	d104      	bne.n	8007f7a <HAL_TIM_PWM_Start+0x92>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f78:	e00b      	b.n	8007f92 <HAL_TIM_PWM_Start+0xaa>
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d104      	bne.n	8007f8a <HAL_TIM_PWM_Start+0xa2>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2202      	movs	r2, #2
 8007f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f88:	e003      	b.n	8007f92 <HAL_TIM_PWM_Start+0xaa>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2201      	movs	r2, #1
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fdd0 	bl	8008b40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800805c <HAL_TIM_PWM_Start+0x174>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d004      	beq.n	8007fb4 <HAL_TIM_PWM_Start+0xcc>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a2c      	ldr	r2, [pc, #176]	@ (8008060 <HAL_TIM_PWM_Start+0x178>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d101      	bne.n	8007fb8 <HAL_TIM_PWM_Start+0xd0>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e000      	b.n	8007fba <HAL_TIM_PWM_Start+0xd2>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d007      	beq.n	8007fce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007fcc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a22      	ldr	r2, [pc, #136]	@ (800805c <HAL_TIM_PWM_Start+0x174>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d022      	beq.n	800801e <HAL_TIM_PWM_Start+0x136>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe0:	d01d      	beq.n	800801e <HAL_TIM_PWM_Start+0x136>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8008064 <HAL_TIM_PWM_Start+0x17c>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d018      	beq.n	800801e <HAL_TIM_PWM_Start+0x136>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8008068 <HAL_TIM_PWM_Start+0x180>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d013      	beq.n	800801e <HAL_TIM_PWM_Start+0x136>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800806c <HAL_TIM_PWM_Start+0x184>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d00e      	beq.n	800801e <HAL_TIM_PWM_Start+0x136>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a16      	ldr	r2, [pc, #88]	@ (8008060 <HAL_TIM_PWM_Start+0x178>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d009      	beq.n	800801e <HAL_TIM_PWM_Start+0x136>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a18      	ldr	r2, [pc, #96]	@ (8008070 <HAL_TIM_PWM_Start+0x188>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d004      	beq.n	800801e <HAL_TIM_PWM_Start+0x136>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a16      	ldr	r2, [pc, #88]	@ (8008074 <HAL_TIM_PWM_Start+0x18c>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d111      	bne.n	8008042 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f003 0307 	and.w	r3, r3, #7
 8008028:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2b06      	cmp	r3, #6
 800802e:	d010      	beq.n	8008052 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0201 	orr.w	r2, r2, #1
 800803e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008040:	e007      	b.n	8008052 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f042 0201 	orr.w	r2, r2, #1
 8008050:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	40010000 	.word	0x40010000
 8008060:	40010400 	.word	0x40010400
 8008064:	40000400 	.word	0x40000400
 8008068:	40000800 	.word	0x40000800
 800806c:	40000c00 	.word	0x40000c00
 8008070:	40014000 	.word	0x40014000
 8008074:	40001800 	.word	0x40001800

08008078 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d101      	bne.n	800808c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e097      	b.n	80081bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b00      	cmp	r3, #0
 8008096:	d106      	bne.n	80080a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7fb f9a3 	bl	80033ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2202      	movs	r2, #2
 80080aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	6812      	ldr	r2, [r2, #0]
 80080b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080bc:	f023 0307 	bic.w	r3, r3, #7
 80080c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	3304      	adds	r3, #4
 80080ca:	4619      	mov	r1, r3
 80080cc:	4610      	mov	r0, r2
 80080ce:	f000 fae1 	bl	8008694 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080fa:	f023 0303 	bic.w	r3, r3, #3
 80080fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	021b      	lsls	r3, r3, #8
 800810a:	4313      	orrs	r3, r2
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	4313      	orrs	r3, r2
 8008110:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008118:	f023 030c 	bic.w	r3, r3, #12
 800811c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008124:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008128:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	4313      	orrs	r3, r2
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	4313      	orrs	r3, r2
 800813a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	011a      	lsls	r2, r3, #4
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	031b      	lsls	r3, r3, #12
 8008148:	4313      	orrs	r3, r2
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	4313      	orrs	r3, r2
 800814e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008156:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800815e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	011b      	lsls	r3, r3, #4
 800816a:	4313      	orrs	r3, r2
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80081dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80081ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d110      	bne.n	8008216 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d102      	bne.n	8008200 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80081fa:	7b7b      	ldrb	r3, [r7, #13]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d001      	beq.n	8008204 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e069      	b.n	80082d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008214:	e031      	b.n	800827a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	2b04      	cmp	r3, #4
 800821a:	d110      	bne.n	800823e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800821c:	7bbb      	ldrb	r3, [r7, #14]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d102      	bne.n	8008228 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008222:	7b3b      	ldrb	r3, [r7, #12]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d001      	beq.n	800822c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e055      	b.n	80082d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2202      	movs	r2, #2
 8008230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800823c:	e01d      	b.n	800827a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d108      	bne.n	8008256 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d105      	bne.n	8008256 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800824a:	7b7b      	ldrb	r3, [r7, #13]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d102      	bne.n	8008256 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008250:	7b3b      	ldrb	r3, [r7, #12]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d001      	beq.n	800825a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e03e      	b.n	80082d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2202      	movs	r2, #2
 800825e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2202      	movs	r2, #2
 8008266:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2202      	movs	r2, #2
 800826e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2202      	movs	r2, #2
 8008276:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d003      	beq.n	8008288 <HAL_TIM_Encoder_Start+0xc4>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b04      	cmp	r3, #4
 8008284:	d008      	beq.n	8008298 <HAL_TIM_Encoder_Start+0xd4>
 8008286:	e00f      	b.n	80082a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2201      	movs	r2, #1
 800828e:	2100      	movs	r1, #0
 8008290:	4618      	mov	r0, r3
 8008292:	f000 fc55 	bl	8008b40 <TIM_CCxChannelCmd>
      break;
 8008296:	e016      	b.n	80082c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2201      	movs	r2, #1
 800829e:	2104      	movs	r1, #4
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fc4d 	bl	8008b40 <TIM_CCxChannelCmd>
      break;
 80082a6:	e00e      	b.n	80082c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2201      	movs	r2, #1
 80082ae:	2100      	movs	r1, #0
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 fc45 	bl	8008b40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2201      	movs	r2, #1
 80082bc:	2104      	movs	r1, #4
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fc3e 	bl	8008b40 <TIM_CCxChannelCmd>
      break;
 80082c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f042 0201 	orr.w	r2, r2, #1
 80082d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d020      	beq.n	8008344 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f003 0302 	and.w	r3, r3, #2
 8008308:	2b00      	cmp	r3, #0
 800830a:	d01b      	beq.n	8008344 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f06f 0202 	mvn.w	r2, #2
 8008314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f994 	bl	8008658 <HAL_TIM_IC_CaptureCallback>
 8008330:	e005      	b.n	800833e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f986 	bl	8008644 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f997 	bl	800866c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f003 0304 	and.w	r3, r3, #4
 800834a:	2b00      	cmp	r3, #0
 800834c:	d020      	beq.n	8008390 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	2b00      	cmp	r3, #0
 8008356:	d01b      	beq.n	8008390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f06f 0204 	mvn.w	r2, #4
 8008360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2202      	movs	r2, #2
 8008366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008372:	2b00      	cmp	r3, #0
 8008374:	d003      	beq.n	800837e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f96e 	bl	8008658 <HAL_TIM_IC_CaptureCallback>
 800837c:	e005      	b.n	800838a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f960 	bl	8008644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f971 	bl	800866c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f003 0308 	and.w	r3, r3, #8
 8008396:	2b00      	cmp	r3, #0
 8008398:	d020      	beq.n	80083dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f003 0308 	and.w	r3, r3, #8
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d01b      	beq.n	80083dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f06f 0208 	mvn.w	r2, #8
 80083ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2204      	movs	r2, #4
 80083b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f948 	bl	8008658 <HAL_TIM_IC_CaptureCallback>
 80083c8:	e005      	b.n	80083d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f93a 	bl	8008644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f94b 	bl	800866c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	f003 0310 	and.w	r3, r3, #16
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d020      	beq.n	8008428 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f003 0310 	and.w	r3, r3, #16
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d01b      	beq.n	8008428 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f06f 0210 	mvn.w	r2, #16
 80083f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2208      	movs	r2, #8
 80083fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f922 	bl	8008658 <HAL_TIM_IC_CaptureCallback>
 8008414:	e005      	b.n	8008422 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f914 	bl	8008644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f925 	bl	800866c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00c      	beq.n	800844c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b00      	cmp	r3, #0
 800843a:	d007      	beq.n	800844c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f06f 0201 	mvn.w	r2, #1
 8008444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7f9 fb92 	bl	8001b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00c      	beq.n	8008470 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800845c:	2b00      	cmp	r3, #0
 800845e:	d007      	beq.n	8008470 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fc66 	bl	8008d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00c      	beq.n	8008494 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800848c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f8f6 	bl	8008680 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f003 0320 	and.w	r3, r3, #32
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00c      	beq.n	80084b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f003 0320 	and.w	r3, r3, #32
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d007      	beq.n	80084b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f06f 0220 	mvn.w	r2, #32
 80084b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fc38 	bl	8008d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084b8:	bf00      	nop
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d101      	bne.n	80084de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084da:	2302      	movs	r3, #2
 80084dc:	e0ae      	b.n	800863c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2b0c      	cmp	r3, #12
 80084ea:	f200 809f 	bhi.w	800862c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80084ee:	a201      	add	r2, pc, #4	@ (adr r2, 80084f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008529 	.word	0x08008529
 80084f8:	0800862d 	.word	0x0800862d
 80084fc:	0800862d 	.word	0x0800862d
 8008500:	0800862d 	.word	0x0800862d
 8008504:	08008569 	.word	0x08008569
 8008508:	0800862d 	.word	0x0800862d
 800850c:	0800862d 	.word	0x0800862d
 8008510:	0800862d 	.word	0x0800862d
 8008514:	080085ab 	.word	0x080085ab
 8008518:	0800862d 	.word	0x0800862d
 800851c:	0800862d 	.word	0x0800862d
 8008520:	0800862d 	.word	0x0800862d
 8008524:	080085eb 	.word	0x080085eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68b9      	ldr	r1, [r7, #8]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 f956 	bl	80087e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	699a      	ldr	r2, [r3, #24]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f042 0208 	orr.w	r2, r2, #8
 8008542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	699a      	ldr	r2, [r3, #24]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0204 	bic.w	r2, r2, #4
 8008552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6999      	ldr	r1, [r3, #24]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	691a      	ldr	r2, [r3, #16]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	619a      	str	r2, [r3, #24]
      break;
 8008566:	e064      	b.n	8008632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	4618      	mov	r0, r3
 8008570:	f000 f9a6 	bl	80088c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	699a      	ldr	r2, [r3, #24]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699a      	ldr	r2, [r3, #24]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6999      	ldr	r1, [r3, #24]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	021a      	lsls	r2, r3, #8
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	430a      	orrs	r2, r1
 80085a6:	619a      	str	r2, [r3, #24]
      break;
 80085a8:	e043      	b.n	8008632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68b9      	ldr	r1, [r7, #8]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 f9fb 	bl	80089ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	69da      	ldr	r2, [r3, #28]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f042 0208 	orr.w	r2, r2, #8
 80085c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	69da      	ldr	r2, [r3, #28]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f022 0204 	bic.w	r2, r2, #4
 80085d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69d9      	ldr	r1, [r3, #28]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	691a      	ldr	r2, [r3, #16]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	430a      	orrs	r2, r1
 80085e6:	61da      	str	r2, [r3, #28]
      break;
 80085e8:	e023      	b.n	8008632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68b9      	ldr	r1, [r7, #8]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 fa4f 	bl	8008a94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	69da      	ldr	r2, [r3, #28]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	69da      	ldr	r2, [r3, #28]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	69d9      	ldr	r1, [r3, #28]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	021a      	lsls	r2, r3, #8
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	430a      	orrs	r2, r1
 8008628:	61da      	str	r2, [r3, #28]
      break;
 800862a:	e002      	b.n	8008632 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	75fb      	strb	r3, [r7, #23]
      break;
 8008630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800863a:	7dfb      	ldrb	r3, [r7, #23]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a43      	ldr	r2, [pc, #268]	@ (80087b4 <TIM_Base_SetConfig+0x120>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d013      	beq.n	80086d4 <TIM_Base_SetConfig+0x40>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086b2:	d00f      	beq.n	80086d4 <TIM_Base_SetConfig+0x40>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a40      	ldr	r2, [pc, #256]	@ (80087b8 <TIM_Base_SetConfig+0x124>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d00b      	beq.n	80086d4 <TIM_Base_SetConfig+0x40>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a3f      	ldr	r2, [pc, #252]	@ (80087bc <TIM_Base_SetConfig+0x128>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d007      	beq.n	80086d4 <TIM_Base_SetConfig+0x40>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a3e      	ldr	r2, [pc, #248]	@ (80087c0 <TIM_Base_SetConfig+0x12c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d003      	beq.n	80086d4 <TIM_Base_SetConfig+0x40>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a3d      	ldr	r2, [pc, #244]	@ (80087c4 <TIM_Base_SetConfig+0x130>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d108      	bne.n	80086e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a32      	ldr	r2, [pc, #200]	@ (80087b4 <TIM_Base_SetConfig+0x120>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d02b      	beq.n	8008746 <TIM_Base_SetConfig+0xb2>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086f4:	d027      	beq.n	8008746 <TIM_Base_SetConfig+0xb2>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a2f      	ldr	r2, [pc, #188]	@ (80087b8 <TIM_Base_SetConfig+0x124>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d023      	beq.n	8008746 <TIM_Base_SetConfig+0xb2>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a2e      	ldr	r2, [pc, #184]	@ (80087bc <TIM_Base_SetConfig+0x128>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d01f      	beq.n	8008746 <TIM_Base_SetConfig+0xb2>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a2d      	ldr	r2, [pc, #180]	@ (80087c0 <TIM_Base_SetConfig+0x12c>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d01b      	beq.n	8008746 <TIM_Base_SetConfig+0xb2>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a2c      	ldr	r2, [pc, #176]	@ (80087c4 <TIM_Base_SetConfig+0x130>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d017      	beq.n	8008746 <TIM_Base_SetConfig+0xb2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a2b      	ldr	r2, [pc, #172]	@ (80087c8 <TIM_Base_SetConfig+0x134>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d013      	beq.n	8008746 <TIM_Base_SetConfig+0xb2>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a2a      	ldr	r2, [pc, #168]	@ (80087cc <TIM_Base_SetConfig+0x138>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d00f      	beq.n	8008746 <TIM_Base_SetConfig+0xb2>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a29      	ldr	r2, [pc, #164]	@ (80087d0 <TIM_Base_SetConfig+0x13c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d00b      	beq.n	8008746 <TIM_Base_SetConfig+0xb2>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a28      	ldr	r2, [pc, #160]	@ (80087d4 <TIM_Base_SetConfig+0x140>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d007      	beq.n	8008746 <TIM_Base_SetConfig+0xb2>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a27      	ldr	r2, [pc, #156]	@ (80087d8 <TIM_Base_SetConfig+0x144>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d003      	beq.n	8008746 <TIM_Base_SetConfig+0xb2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a26      	ldr	r2, [pc, #152]	@ (80087dc <TIM_Base_SetConfig+0x148>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d108      	bne.n	8008758 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800874c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	4313      	orrs	r3, r2
 8008756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	4313      	orrs	r3, r2
 8008764:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	689a      	ldr	r2, [r3, #8]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a0e      	ldr	r2, [pc, #56]	@ (80087b4 <TIM_Base_SetConfig+0x120>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d003      	beq.n	8008786 <TIM_Base_SetConfig+0xf2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a10      	ldr	r2, [pc, #64]	@ (80087c4 <TIM_Base_SetConfig+0x130>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d103      	bne.n	800878e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	691a      	ldr	r2, [r3, #16]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f043 0204 	orr.w	r2, r3, #4
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	601a      	str	r2, [r3, #0]
}
 80087a6:	bf00      	nop
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	40010000 	.word	0x40010000
 80087b8:	40000400 	.word	0x40000400
 80087bc:	40000800 	.word	0x40000800
 80087c0:	40000c00 	.word	0x40000c00
 80087c4:	40010400 	.word	0x40010400
 80087c8:	40014000 	.word	0x40014000
 80087cc:	40014400 	.word	0x40014400
 80087d0:	40014800 	.word	0x40014800
 80087d4:	40001800 	.word	0x40001800
 80087d8:	40001c00 	.word	0x40001c00
 80087dc:	40002000 	.word	0x40002000

080087e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	f023 0201 	bic.w	r2, r3, #1
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800880e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f023 0303 	bic.w	r3, r3, #3
 8008816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f023 0302 	bic.w	r3, r3, #2
 8008828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	4313      	orrs	r3, r2
 8008832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a20      	ldr	r2, [pc, #128]	@ (80088b8 <TIM_OC1_SetConfig+0xd8>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_OC1_SetConfig+0x64>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a1f      	ldr	r2, [pc, #124]	@ (80088bc <TIM_OC1_SetConfig+0xdc>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d10c      	bne.n	800885e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f023 0308 	bic.w	r3, r3, #8
 800884a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	4313      	orrs	r3, r2
 8008854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f023 0304 	bic.w	r3, r3, #4
 800885c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a15      	ldr	r2, [pc, #84]	@ (80088b8 <TIM_OC1_SetConfig+0xd8>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d003      	beq.n	800886e <TIM_OC1_SetConfig+0x8e>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a14      	ldr	r2, [pc, #80]	@ (80088bc <TIM_OC1_SetConfig+0xdc>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d111      	bne.n	8008892 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800887c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	4313      	orrs	r3, r2
 8008886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	4313      	orrs	r3, r2
 8008890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	621a      	str	r2, [r3, #32]
}
 80088ac:	bf00      	nop
 80088ae:	371c      	adds	r7, #28
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr
 80088b8:	40010000 	.word	0x40010000
 80088bc:	40010400 	.word	0x40010400

080088c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	f023 0210 	bic.w	r2, r3, #16
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	021b      	lsls	r3, r3, #8
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	4313      	orrs	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f023 0320 	bic.w	r3, r3, #32
 800890a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	011b      	lsls	r3, r3, #4
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	4313      	orrs	r3, r2
 8008916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a22      	ldr	r2, [pc, #136]	@ (80089a4 <TIM_OC2_SetConfig+0xe4>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d003      	beq.n	8008928 <TIM_OC2_SetConfig+0x68>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a21      	ldr	r2, [pc, #132]	@ (80089a8 <TIM_OC2_SetConfig+0xe8>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d10d      	bne.n	8008944 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800892e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	4313      	orrs	r3, r2
 800893a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008942:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a17      	ldr	r2, [pc, #92]	@ (80089a4 <TIM_OC2_SetConfig+0xe4>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d003      	beq.n	8008954 <TIM_OC2_SetConfig+0x94>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a16      	ldr	r2, [pc, #88]	@ (80089a8 <TIM_OC2_SetConfig+0xe8>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d113      	bne.n	800897c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800895a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	4313      	orrs	r3, r2
 800896e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	4313      	orrs	r3, r2
 800897a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	621a      	str	r2, [r3, #32]
}
 8008996:	bf00      	nop
 8008998:	371c      	adds	r7, #28
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	40010000 	.word	0x40010000
 80089a8:	40010400 	.word	0x40010400

080089ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a1b      	ldr	r3, [r3, #32]
 80089c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f023 0303 	bic.w	r3, r3, #3
 80089e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	021b      	lsls	r3, r3, #8
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a21      	ldr	r2, [pc, #132]	@ (8008a8c <TIM_OC3_SetConfig+0xe0>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d003      	beq.n	8008a12 <TIM_OC3_SetConfig+0x66>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a20      	ldr	r2, [pc, #128]	@ (8008a90 <TIM_OC3_SetConfig+0xe4>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d10d      	bne.n	8008a2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	021b      	lsls	r3, r3, #8
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a16      	ldr	r2, [pc, #88]	@ (8008a8c <TIM_OC3_SetConfig+0xe0>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d003      	beq.n	8008a3e <TIM_OC3_SetConfig+0x92>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a15      	ldr	r2, [pc, #84]	@ (8008a90 <TIM_OC3_SetConfig+0xe4>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d113      	bne.n	8008a66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	011b      	lsls	r3, r3, #4
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	011b      	lsls	r3, r3, #4
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	621a      	str	r2, [r3, #32]
}
 8008a80:	bf00      	nop
 8008a82:	371c      	adds	r7, #28
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	40010000 	.word	0x40010000
 8008a90:	40010400 	.word	0x40010400

08008a94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	021b      	lsls	r3, r3, #8
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	031b      	lsls	r3, r3, #12
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a12      	ldr	r2, [pc, #72]	@ (8008b38 <TIM_OC4_SetConfig+0xa4>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d003      	beq.n	8008afc <TIM_OC4_SetConfig+0x68>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a11      	ldr	r2, [pc, #68]	@ (8008b3c <TIM_OC4_SetConfig+0xa8>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d109      	bne.n	8008b10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	019b      	lsls	r3, r3, #6
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	621a      	str	r2, [r3, #32]
}
 8008b2a:	bf00      	nop
 8008b2c:	371c      	adds	r7, #28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	40010000 	.word	0x40010000
 8008b3c:	40010400 	.word	0x40010400

08008b40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	f003 031f 	and.w	r3, r3, #31
 8008b52:	2201      	movs	r2, #1
 8008b54:	fa02 f303 	lsl.w	r3, r2, r3
 8008b58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6a1a      	ldr	r2, [r3, #32]
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	43db      	mvns	r3, r3
 8008b62:	401a      	ands	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6a1a      	ldr	r2, [r3, #32]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	f003 031f 	and.w	r3, r3, #31
 8008b72:	6879      	ldr	r1, [r7, #4]
 8008b74:	fa01 f303 	lsl.w	r3, r1, r3
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	621a      	str	r2, [r3, #32]
}
 8008b7e:	bf00      	nop
 8008b80:	371c      	adds	r7, #28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
	...

08008b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d101      	bne.n	8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	e05a      	b.n	8008c5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a21      	ldr	r2, [pc, #132]	@ (8008c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d022      	beq.n	8008c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bf0:	d01d      	beq.n	8008c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8008c6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d018      	beq.n	8008c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a1b      	ldr	r2, [pc, #108]	@ (8008c70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d013      	beq.n	8008c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8008c74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d00e      	beq.n	8008c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a18      	ldr	r2, [pc, #96]	@ (8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d009      	beq.n	8008c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a17      	ldr	r2, [pc, #92]	@ (8008c7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d004      	beq.n	8008c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a15      	ldr	r2, [pc, #84]	@ (8008c80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d10c      	bne.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	40010000 	.word	0x40010000
 8008c6c:	40000400 	.word	0x40000400
 8008c70:	40000800 	.word	0x40000800
 8008c74:	40000c00 	.word	0x40000c00
 8008c78:	40010400 	.word	0x40010400
 8008c7c:	40014000 	.word	0x40014000
 8008c80:	40001800 	.word	0x40001800

08008c84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d101      	bne.n	8008ca0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	e03d      	b.n	8008d1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e042      	b.n	8008de8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d106      	bne.n	8008d7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7fb f870 	bl	8003e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2224      	movs	r2, #36	@ 0x24
 8008d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68da      	ldr	r2, [r3, #12]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fffb 	bl	8009d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	691a      	ldr	r2, [r3, #16]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008da8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	695a      	ldr	r2, [r3, #20]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008db8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68da      	ldr	r2, [r3, #12]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008dc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2220      	movs	r2, #32
 8008ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08c      	sub	sp, #48	@ 0x30
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	d162      	bne.n	8008ed0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <HAL_UART_Transmit_DMA+0x26>
 8008e10:	88fb      	ldrh	r3, [r7, #6]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e05b      	b.n	8008ed2 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	88fa      	ldrh	r2, [r7, #6]
 8008e24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	88fa      	ldrh	r2, [r7, #6]
 8008e2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2221      	movs	r2, #33	@ 0x21
 8008e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e3e:	4a27      	ldr	r2, [pc, #156]	@ (8008edc <HAL_UART_Transmit_DMA+0xec>)
 8008e40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e46:	4a26      	ldr	r2, [pc, #152]	@ (8008ee0 <HAL_UART_Transmit_DMA+0xf0>)
 8008e48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4e:	4a25      	ldr	r2, [pc, #148]	@ (8008ee4 <HAL_UART_Transmit_DMA+0xf4>)
 8008e50:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e56:	2200      	movs	r2, #0
 8008e58:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008e5a:	f107 0308 	add.w	r3, r7, #8
 8008e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e66:	6819      	ldr	r1, [r3, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	461a      	mov	r2, r3
 8008e70:	88fb      	ldrh	r3, [r7, #6]
 8008e72:	f7fc fb03 	bl	800547c <HAL_DMA_Start_IT>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d008      	beq.n	8008e8e <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2210      	movs	r2, #16
 8008e80:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2220      	movs	r2, #32
 8008e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e021      	b.n	8008ed2 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008e96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3314      	adds	r3, #20
 8008e9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	e853 3f00 	ldrex	r3, [r3]
 8008ea6:	617b      	str	r3, [r7, #20]
   return(result);
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3314      	adds	r3, #20
 8008eb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008eb8:	627a      	str	r2, [r7, #36]	@ 0x24
 8008eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebc:	6a39      	ldr	r1, [r7, #32]
 8008ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ec0:	e841 2300 	strex	r3, r2, [r1]
 8008ec4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1e5      	bne.n	8008e98 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	e000      	b.n	8008ed2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8008ed0:	2302      	movs	r3, #2
  }
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3730      	adds	r7, #48	@ 0x30
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	0800960d 	.word	0x0800960d
 8008ee0:	080096a7 	.word	0x080096a7
 8008ee4:	0800982b 	.word	0x0800982b

08008ee8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b20      	cmp	r3, #32
 8008f00:	d112      	bne.n	8008f28 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <HAL_UART_Receive_DMA+0x26>
 8008f08:	88fb      	ldrh	r3, [r7, #6]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e00b      	b.n	8008f2a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008f18:	88fb      	ldrh	r3, [r7, #6]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	68b9      	ldr	r1, [r7, #8]
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 fcce 	bl	80098c0 <UART_Start_Receive_DMA>
 8008f24:	4603      	mov	r3, r0
 8008f26:	e000      	b.n	8008f2a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008f28:	2302      	movs	r3, #2
  }
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b09a      	sub	sp, #104	@ 0x68
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	330c      	adds	r3, #12
 8008f40:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f44:	e853 3f00 	ldrex	r3, [r3]
 8008f48:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f50:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	330c      	adds	r3, #12
 8008f58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008f5a:	657a      	str	r2, [r7, #84]	@ 0x54
 8008f5c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1e5      	bne.n	8008f3a <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3314      	adds	r3, #20
 8008f74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f78:	e853 3f00 	ldrex	r3, [r3]
 8008f7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f80:	f023 0301 	bic.w	r3, r3, #1
 8008f84:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3314      	adds	r3, #20
 8008f8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008f8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f96:	e841 2300 	strex	r3, r2, [r1]
 8008f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1e5      	bne.n	8008f6e <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d119      	bne.n	8008fde <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	330c      	adds	r3, #12
 8008fb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	e853 3f00 	ldrex	r3, [r3]
 8008fb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	f023 0310 	bic.w	r3, r3, #16
 8008fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	330c      	adds	r3, #12
 8008fc8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008fca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fd2:	e841 2300 	strex	r3, r2, [r1]
 8008fd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1e5      	bne.n	8008faa <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fe8:	2b40      	cmp	r3, #64	@ 0x40
 8008fea:	d136      	bne.n	800905a <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3314      	adds	r3, #20
 8008ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	e853 3f00 	ldrex	r3, [r3]
 8008ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009002:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3314      	adds	r3, #20
 800900a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800900c:	61ba      	str	r2, [r7, #24]
 800900e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009010:	6979      	ldr	r1, [r7, #20]
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	e841 2300 	strex	r3, r2, [r1]
 8009018:	613b      	str	r3, [r7, #16]
   return(result);
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1e5      	bne.n	8008fec <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009024:	2b00      	cmp	r3, #0
 8009026:	d018      	beq.n	800905a <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800902c:	2200      	movs	r2, #0
 800902e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009034:	4618      	mov	r0, r3
 8009036:	f7fc fa79 	bl	800552c <HAL_DMA_Abort>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00c      	beq.n	800905a <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009044:	4618      	mov	r0, r3
 8009046:	f7fc fc8d 	bl	8005964 <HAL_DMA_GetError>
 800904a:	4603      	mov	r3, r0
 800904c:	2b20      	cmp	r3, #32
 800904e:	d104      	bne.n	800905a <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2210      	movs	r2, #16
 8009054:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e00a      	b.n	8009070 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2220      	movs	r2, #32
 8009064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3768      	adds	r7, #104	@ 0x68
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b0ba      	sub	sp, #232	@ 0xe8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800909e:	2300      	movs	r3, #0
 80090a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80090a4:	2300      	movs	r3, #0
 80090a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80090aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80090b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10f      	bne.n	80090de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d009      	beq.n	80090de <HAL_UART_IRQHandler+0x66>
 80090ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090ce:	f003 0320 	and.w	r3, r3, #32
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fd9c 	bl	8009c14 <UART_Receive_IT>
      return;
 80090dc:	e273      	b.n	80095c6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80090de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 80de 	beq.w	80092a4 <HAL_UART_IRQHandler+0x22c>
 80090e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d106      	bne.n	8009102 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80090f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 80d1 	beq.w	80092a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00b      	beq.n	8009126 <HAL_UART_IRQHandler+0xae>
 800910e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009116:	2b00      	cmp	r3, #0
 8009118:	d005      	beq.n	8009126 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800911e:	f043 0201 	orr.w	r2, r3, #1
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800912a:	f003 0304 	and.w	r3, r3, #4
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00b      	beq.n	800914a <HAL_UART_IRQHandler+0xd2>
 8009132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	2b00      	cmp	r3, #0
 800913c:	d005      	beq.n	800914a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009142:	f043 0202 	orr.w	r2, r3, #2
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800914a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800914e:	f003 0302 	and.w	r3, r3, #2
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00b      	beq.n	800916e <HAL_UART_IRQHandler+0xf6>
 8009156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d005      	beq.n	800916e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009166:	f043 0204 	orr.w	r2, r3, #4
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800916e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009172:	f003 0308 	and.w	r3, r3, #8
 8009176:	2b00      	cmp	r3, #0
 8009178:	d011      	beq.n	800919e <HAL_UART_IRQHandler+0x126>
 800917a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800917e:	f003 0320 	and.w	r3, r3, #32
 8009182:	2b00      	cmp	r3, #0
 8009184:	d105      	bne.n	8009192 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	d005      	beq.n	800919e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009196:	f043 0208 	orr.w	r2, r3, #8
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 820a 	beq.w	80095bc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ac:	f003 0320 	and.w	r3, r3, #32
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d008      	beq.n	80091c6 <HAL_UART_IRQHandler+0x14e>
 80091b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091b8:	f003 0320 	and.w	r3, r3, #32
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d002      	beq.n	80091c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fd27 	bl	8009c14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091d0:	2b40      	cmp	r3, #64	@ 0x40
 80091d2:	bf0c      	ite	eq
 80091d4:	2301      	moveq	r3, #1
 80091d6:	2300      	movne	r3, #0
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091e2:	f003 0308 	and.w	r3, r3, #8
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d103      	bne.n	80091f2 <HAL_UART_IRQHandler+0x17a>
 80091ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d04f      	beq.n	8009292 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fc32 	bl	8009a5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009202:	2b40      	cmp	r3, #64	@ 0x40
 8009204:	d141      	bne.n	800928a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3314      	adds	r3, #20
 800920c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009210:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800921c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3314      	adds	r3, #20
 800922e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009232:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800923e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009242:	e841 2300 	strex	r3, r2, [r1]
 8009246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800924a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1d9      	bne.n	8009206 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009256:	2b00      	cmp	r3, #0
 8009258:	d013      	beq.n	8009282 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925e:	4a8a      	ldr	r2, [pc, #552]	@ (8009488 <HAL_UART_IRQHandler+0x410>)
 8009260:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009266:	4618      	mov	r0, r3
 8009268:	f7fc f9d0 	bl	800560c <HAL_DMA_Abort_IT>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d016      	beq.n	80092a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800927c:	4610      	mov	r0, r2
 800927e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009280:	e00e      	b.n	80092a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7f8 ff4a 	bl	800211c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009288:	e00a      	b.n	80092a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7f8 ff46 	bl	800211c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009290:	e006      	b.n	80092a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7f8 ff42 	bl	800211c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800929e:	e18d      	b.n	80095bc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092a0:	bf00      	nop
    return;
 80092a2:	e18b      	b.n	80095bc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	f040 8167 	bne.w	800957c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80092ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b2:	f003 0310 	and.w	r3, r3, #16
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 8160 	beq.w	800957c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80092bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092c0:	f003 0310 	and.w	r3, r3, #16
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f000 8159 	beq.w	800957c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092ca:	2300      	movs	r3, #0
 80092cc:	60bb      	str	r3, [r7, #8]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	60bb      	str	r3, [r7, #8]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	60bb      	str	r3, [r7, #8]
 80092de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ea:	2b40      	cmp	r3, #64	@ 0x40
 80092ec:	f040 80ce 	bne.w	800948c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 80a9 	beq.w	8009458 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800930a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800930e:	429a      	cmp	r2, r3
 8009310:	f080 80a2 	bcs.w	8009458 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800931a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009326:	f000 8088 	beq.w	800943a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	330c      	adds	r3, #12
 8009330:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009340:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	330c      	adds	r3, #12
 8009352:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009356:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800935a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009362:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009366:	e841 2300 	strex	r3, r2, [r1]
 800936a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800936e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1d9      	bne.n	800932a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3314      	adds	r3, #20
 800937c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009380:	e853 3f00 	ldrex	r3, [r3]
 8009384:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009386:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009388:	f023 0301 	bic.w	r3, r3, #1
 800938c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3314      	adds	r3, #20
 8009396:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800939a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800939e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80093a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80093ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1e1      	bne.n	8009376 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3314      	adds	r3, #20
 80093b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093bc:	e853 3f00 	ldrex	r3, [r3]
 80093c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80093c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3314      	adds	r3, #20
 80093d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80093d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80093d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80093dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80093e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e3      	bne.n	80093b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2220      	movs	r2, #32
 80093ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	330c      	adds	r3, #12
 80093fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009402:	e853 3f00 	ldrex	r3, [r3]
 8009406:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009408:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800940a:	f023 0310 	bic.w	r3, r3, #16
 800940e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	330c      	adds	r3, #12
 8009418:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800941c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800941e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009420:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009422:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009424:	e841 2300 	strex	r3, r2, [r1]
 8009428:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800942a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1e3      	bne.n	80093f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009434:	4618      	mov	r0, r3
 8009436:	f7fc f879 	bl	800552c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2202      	movs	r2, #2
 800943e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009448:	b29b      	uxth	r3, r3
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	b29b      	uxth	r3, r3
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f8cf 	bl	80095f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009456:	e0b3      	b.n	80095c0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800945c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009460:	429a      	cmp	r2, r3
 8009462:	f040 80ad 	bne.w	80095c0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800946a:	69db      	ldr	r3, [r3, #28]
 800946c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009470:	f040 80a6 	bne.w	80095c0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2202      	movs	r2, #2
 8009478:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f8b7 	bl	80095f4 <HAL_UARTEx_RxEventCallback>
      return;
 8009486:	e09b      	b.n	80095c0 <HAL_UART_IRQHandler+0x548>
 8009488:	08009b23 	.word	0x08009b23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009494:	b29b      	uxth	r3, r3
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 808e 	beq.w	80095c4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80094a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 8089 	beq.w	80095c4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	330c      	adds	r3, #12
 80094b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094bc:	e853 3f00 	ldrex	r3, [r3]
 80094c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	330c      	adds	r3, #12
 80094d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80094d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80094d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e3      	bne.n	80094b2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3314      	adds	r3, #20
 80094f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	623b      	str	r3, [r7, #32]
   return(result);
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	f023 0301 	bic.w	r3, r3, #1
 8009500:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3314      	adds	r3, #20
 800950a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800950e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009510:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009512:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009516:	e841 2300 	strex	r3, r2, [r1]
 800951a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800951c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1e3      	bne.n	80094ea <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2220      	movs	r2, #32
 8009526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	330c      	adds	r3, #12
 8009536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	e853 3f00 	ldrex	r3, [r3]
 800953e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f023 0310 	bic.w	r3, r3, #16
 8009546:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	330c      	adds	r3, #12
 8009550:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009554:	61fa      	str	r2, [r7, #28]
 8009556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009558:	69b9      	ldr	r1, [r7, #24]
 800955a:	69fa      	ldr	r2, [r7, #28]
 800955c:	e841 2300 	strex	r3, r2, [r1]
 8009560:	617b      	str	r3, [r7, #20]
   return(result);
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1e3      	bne.n	8009530 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2202      	movs	r2, #2
 800956c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800956e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f83d 	bl	80095f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800957a:	e023      	b.n	80095c4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800957c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009584:	2b00      	cmp	r3, #0
 8009586:	d009      	beq.n	800959c <HAL_UART_IRQHandler+0x524>
 8009588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800958c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009590:	2b00      	cmp	r3, #0
 8009592:	d003      	beq.n	800959c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fad5 	bl	8009b44 <UART_Transmit_IT>
    return;
 800959a:	e014      	b.n	80095c6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800959c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00e      	beq.n	80095c6 <HAL_UART_IRQHandler+0x54e>
 80095a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d008      	beq.n	80095c6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fb15 	bl	8009be4 <UART_EndTransmit_IT>
    return;
 80095ba:	e004      	b.n	80095c6 <HAL_UART_IRQHandler+0x54e>
    return;
 80095bc:	bf00      	nop
 80095be:	e002      	b.n	80095c6 <HAL_UART_IRQHandler+0x54e>
      return;
 80095c0:	bf00      	nop
 80095c2:	e000      	b.n	80095c6 <HAL_UART_IRQHandler+0x54e>
      return;
 80095c4:	bf00      	nop
  }
}
 80095c6:	37e8      	adds	r7, #232	@ 0xe8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	460b      	mov	r3, r1
 80095fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b090      	sub	sp, #64	@ 0x40
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009618:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009624:	2b00      	cmp	r3, #0
 8009626:	d137      	bne.n	8009698 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800962a:	2200      	movs	r2, #0
 800962c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800962e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3314      	adds	r3, #20
 8009634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	623b      	str	r3, [r7, #32]
   return(result);
 800963e:	6a3b      	ldr	r3, [r7, #32]
 8009640:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009644:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3314      	adds	r3, #20
 800964c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800964e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009650:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800965c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e5      	bne.n	800962e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	330c      	adds	r3, #12
 8009668:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	e853 3f00 	ldrex	r3, [r3]
 8009670:	60fb      	str	r3, [r7, #12]
   return(result);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009678:	637b      	str	r3, [r7, #52]	@ 0x34
 800967a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	330c      	adds	r3, #12
 8009680:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009682:	61fa      	str	r2, [r7, #28]
 8009684:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009686:	69b9      	ldr	r1, [r7, #24]
 8009688:	69fa      	ldr	r2, [r7, #28]
 800968a:	e841 2300 	strex	r3, r2, [r1]
 800968e:	617b      	str	r3, [r7, #20]
   return(result);
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1e5      	bne.n	8009662 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009696:	e002      	b.n	800969e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009698:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800969a:	f7ff ff97 	bl	80095cc <HAL_UART_TxCpltCallback>
}
 800969e:	bf00      	nop
 80096a0:	3740      	adds	r7, #64	@ 0x40
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f7ff ff93 	bl	80095e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096ba:	bf00      	nop
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b09c      	sub	sp, #112	@ 0x70
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ce:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d172      	bne.n	80097c4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80096de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096e0:	2200      	movs	r2, #0
 80096e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	330c      	adds	r3, #12
 80096ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096ee:	e853 3f00 	ldrex	r3, [r3]
 80096f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	330c      	adds	r3, #12
 8009702:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009704:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009706:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009708:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800970a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800970c:	e841 2300 	strex	r3, r2, [r1]
 8009710:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1e5      	bne.n	80096e4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3314      	adds	r3, #20
 800971e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800972a:	f023 0301 	bic.w	r3, r3, #1
 800972e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3314      	adds	r3, #20
 8009736:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009738:	647a      	str	r2, [r7, #68]	@ 0x44
 800973a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800973e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009740:	e841 2300 	strex	r3, r2, [r1]
 8009744:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e5      	bne.n	8009718 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800974c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	3314      	adds	r3, #20
 8009752:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009756:	e853 3f00 	ldrex	r3, [r3]
 800975a:	623b      	str	r3, [r7, #32]
   return(result);
 800975c:	6a3b      	ldr	r3, [r7, #32]
 800975e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009762:	663b      	str	r3, [r7, #96]	@ 0x60
 8009764:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3314      	adds	r3, #20
 800976a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800976c:	633a      	str	r2, [r7, #48]	@ 0x30
 800976e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009770:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009774:	e841 2300 	strex	r3, r2, [r1]
 8009778:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800977a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1e5      	bne.n	800974c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009782:	2220      	movs	r2, #32
 8009784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800978a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800978c:	2b01      	cmp	r3, #1
 800978e:	d119      	bne.n	80097c4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009790:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	330c      	adds	r3, #12
 8009796:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	e853 3f00 	ldrex	r3, [r3]
 800979e:	60fb      	str	r3, [r7, #12]
   return(result);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 0310 	bic.w	r3, r3, #16
 80097a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	330c      	adds	r3, #12
 80097ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80097b0:	61fa      	str	r2, [r7, #28]
 80097b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b4:	69b9      	ldr	r1, [r7, #24]
 80097b6:	69fa      	ldr	r2, [r7, #28]
 80097b8:	e841 2300 	strex	r3, r2, [r1]
 80097bc:	617b      	str	r3, [r7, #20]
   return(result);
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1e5      	bne.n	8009790 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097c6:	2200      	movs	r2, #0
 80097c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d106      	bne.n	80097e0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80097d6:	4619      	mov	r1, r3
 80097d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80097da:	f7ff ff0b 	bl	80095f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097de:	e002      	b.n	80097e6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80097e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80097e2:	f7f8 f9dd 	bl	8001ba0 <HAL_UART_RxCpltCallback>
}
 80097e6:	bf00      	nop
 80097e8:	3770      	adds	r7, #112	@ 0x70
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2201      	movs	r2, #1
 8009800:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009806:	2b01      	cmp	r3, #1
 8009808:	d108      	bne.n	800981c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800980e:	085b      	lsrs	r3, r3, #1
 8009810:	b29b      	uxth	r3, r3
 8009812:	4619      	mov	r1, r3
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f7ff feed 	bl	80095f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800981a:	e002      	b.n	8009822 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f7f8 fbcd 	bl	8001fbc <HAL_UART_RxHalfCpltCallback>
}
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009832:	2300      	movs	r3, #0
 8009834:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800983a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009846:	2b80      	cmp	r3, #128	@ 0x80
 8009848:	bf0c      	ite	eq
 800984a:	2301      	moveq	r3, #1
 800984c:	2300      	movne	r3, #0
 800984e:	b2db      	uxtb	r3, r3
 8009850:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b21      	cmp	r3, #33	@ 0x21
 800985c:	d108      	bne.n	8009870 <UART_DMAError+0x46>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d005      	beq.n	8009870 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	2200      	movs	r2, #0
 8009868:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800986a:	68b8      	ldr	r0, [r7, #8]
 800986c:	f000 f8ce 	bl	8009a0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800987a:	2b40      	cmp	r3, #64	@ 0x40
 800987c:	bf0c      	ite	eq
 800987e:	2301      	moveq	r3, #1
 8009880:	2300      	movne	r3, #0
 8009882:	b2db      	uxtb	r3, r3
 8009884:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b22      	cmp	r3, #34	@ 0x22
 8009890:	d108      	bne.n	80098a4 <UART_DMAError+0x7a>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d005      	beq.n	80098a4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	2200      	movs	r2, #0
 800989c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800989e:	68b8      	ldr	r0, [r7, #8]
 80098a0:	f000 f8dc 	bl	8009a5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098a8:	f043 0210 	orr.w	r2, r3, #16
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098b0:	68b8      	ldr	r0, [r7, #8]
 80098b2:	f7f8 fc33 	bl	800211c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
	...

080098c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b098      	sub	sp, #96	@ 0x60
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	4613      	mov	r3, r2
 80098cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	88fa      	ldrh	r2, [r7, #6]
 80098d8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2222      	movs	r2, #34	@ 0x22
 80098e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ec:	4a44      	ldr	r2, [pc, #272]	@ (8009a00 <UART_Start_Receive_DMA+0x140>)
 80098ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098f4:	4a43      	ldr	r2, [pc, #268]	@ (8009a04 <UART_Start_Receive_DMA+0x144>)
 80098f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098fc:	4a42      	ldr	r2, [pc, #264]	@ (8009a08 <UART_Start_Receive_DMA+0x148>)
 80098fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009904:	2200      	movs	r2, #0
 8009906:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009908:	f107 0308 	add.w	r3, r7, #8
 800990c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3304      	adds	r3, #4
 8009918:	4619      	mov	r1, r3
 800991a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	88fb      	ldrh	r3, [r7, #6]
 8009920:	f7fb fdac 	bl	800547c <HAL_DMA_Start_IT>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d008      	beq.n	800993c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2210      	movs	r2, #16
 800992e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2220      	movs	r2, #32
 8009934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	e05d      	b.n	80099f8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800993c:	2300      	movs	r3, #0
 800993e:	613b      	str	r3, [r7, #16]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	613b      	str	r3, [r7, #16]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	613b      	str	r3, [r7, #16]
 8009950:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d019      	beq.n	800998e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	330c      	adds	r3, #12
 8009960:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009964:	e853 3f00 	ldrex	r3, [r3]
 8009968:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800996a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800996c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009970:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	330c      	adds	r3, #12
 8009978:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800997a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800997c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009980:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009982:	e841 2300 	strex	r3, r2, [r1]
 8009986:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1e5      	bne.n	800995a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3314      	adds	r3, #20
 8009994:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009998:	e853 3f00 	ldrex	r3, [r3]
 800999c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800999e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a0:	f043 0301 	orr.w	r3, r3, #1
 80099a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3314      	adds	r3, #20
 80099ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80099ae:	63ba      	str	r2, [r7, #56]	@ 0x38
 80099b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80099b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1e5      	bne.n	800998e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3314      	adds	r3, #20
 80099c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	e853 3f00 	ldrex	r3, [r3]
 80099d0:	617b      	str	r3, [r7, #20]
   return(result);
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3314      	adds	r3, #20
 80099e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80099e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e6:	6a39      	ldr	r1, [r7, #32]
 80099e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099ea:	e841 2300 	strex	r3, r2, [r1]
 80099ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1e5      	bne.n	80099c2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3760      	adds	r7, #96	@ 0x60
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	080096c3 	.word	0x080096c3
 8009a04:	080097ef 	.word	0x080097ef
 8009a08:	0800982b 	.word	0x0800982b

08009a0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b089      	sub	sp, #36	@ 0x24
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	330c      	adds	r3, #12
 8009a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	e853 3f00 	ldrex	r3, [r3]
 8009a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009a2a:	61fb      	str	r3, [r7, #28]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	330c      	adds	r3, #12
 8009a32:	69fa      	ldr	r2, [r7, #28]
 8009a34:	61ba      	str	r2, [r7, #24]
 8009a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a38:	6979      	ldr	r1, [r7, #20]
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	e841 2300 	strex	r3, r2, [r1]
 8009a40:	613b      	str	r3, [r7, #16]
   return(result);
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1e5      	bne.n	8009a14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2220      	movs	r2, #32
 8009a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009a50:	bf00      	nop
 8009a52:	3724      	adds	r7, #36	@ 0x24
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b095      	sub	sp, #84	@ 0x54
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	330c      	adds	r3, #12
 8009a6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a6e:	e853 3f00 	ldrex	r3, [r3]
 8009a72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	330c      	adds	r3, #12
 8009a82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a84:	643a      	str	r2, [r7, #64]	@ 0x40
 8009a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a8c:	e841 2300 	strex	r3, r2, [r1]
 8009a90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1e5      	bne.n	8009a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3314      	adds	r3, #20
 8009a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa0:	6a3b      	ldr	r3, [r7, #32]
 8009aa2:	e853 3f00 	ldrex	r3, [r3]
 8009aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	f023 0301 	bic.w	r3, r3, #1
 8009aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3314      	adds	r3, #20
 8009ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ab8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009abe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ac0:	e841 2300 	strex	r3, r2, [r1]
 8009ac4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1e5      	bne.n	8009a98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d119      	bne.n	8009b08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	330c      	adds	r3, #12
 8009ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	e853 3f00 	ldrex	r3, [r3]
 8009ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	f023 0310 	bic.w	r3, r3, #16
 8009aea:	647b      	str	r3, [r7, #68]	@ 0x44
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	330c      	adds	r3, #12
 8009af2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009af4:	61ba      	str	r2, [r7, #24]
 8009af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af8:	6979      	ldr	r1, [r7, #20]
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	e841 2300 	strex	r3, r2, [r1]
 8009b00:	613b      	str	r3, [r7, #16]
   return(result);
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e5      	bne.n	8009ad4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009b16:	bf00      	nop
 8009b18:	3754      	adds	r7, #84	@ 0x54
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr

08009b22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b084      	sub	sp, #16
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f7f8 faf0 	bl	800211c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b3c:	bf00      	nop
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	2b21      	cmp	r3, #33	@ 0x21
 8009b56:	d13e      	bne.n	8009bd6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b60:	d114      	bne.n	8009b8c <UART_Transmit_IT+0x48>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d110      	bne.n	8009b8c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	881b      	ldrh	r3, [r3, #0]
 8009b74:	461a      	mov	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a1b      	ldr	r3, [r3, #32]
 8009b84:	1c9a      	adds	r2, r3, #2
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	621a      	str	r2, [r3, #32]
 8009b8a:	e008      	b.n	8009b9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a1b      	ldr	r3, [r3, #32]
 8009b90:	1c59      	adds	r1, r3, #1
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	6211      	str	r1, [r2, #32]
 8009b96:	781a      	ldrb	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	4619      	mov	r1, r3
 8009bac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10f      	bne.n	8009bd2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68da      	ldr	r2, [r3, #12]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009bc0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68da      	ldr	r2, [r3, #12]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bd0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	e000      	b.n	8009bd8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009bd6:	2302      	movs	r3, #2
  }
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68da      	ldr	r2, [r3, #12]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bfa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2220      	movs	r2, #32
 8009c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff fce1 	bl	80095cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08c      	sub	sp, #48	@ 0x30
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009c20:	2300      	movs	r3, #0
 8009c22:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b22      	cmp	r3, #34	@ 0x22
 8009c2e:	f040 80aa 	bne.w	8009d86 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c3a:	d115      	bne.n	8009c68 <UART_Receive_IT+0x54>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d111      	bne.n	8009c68 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c48:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c60:	1c9a      	adds	r2, r3, #2
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	629a      	str	r2, [r3, #40]	@ 0x28
 8009c66:	e024      	b.n	8009cb2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c76:	d007      	beq.n	8009c88 <UART_Receive_IT+0x74>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10a      	bne.n	8009c96 <UART_Receive_IT+0x82>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d106      	bne.n	8009c96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c92:	701a      	strb	r2, [r3, #0]
 8009c94:	e008      	b.n	8009ca8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cac:	1c5a      	adds	r2, r3, #1
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d15d      	bne.n	8009d82 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68da      	ldr	r2, [r3, #12]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f022 0220 	bic.w	r2, r2, #32
 8009cd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68da      	ldr	r2, [r3, #12]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009ce4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	695a      	ldr	r2, [r3, #20]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f022 0201 	bic.w	r2, r2, #1
 8009cf4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2220      	movs	r2, #32
 8009cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d135      	bne.n	8009d78 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	330c      	adds	r3, #12
 8009d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	e853 3f00 	ldrex	r3, [r3]
 8009d20:	613b      	str	r3, [r7, #16]
   return(result);
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	f023 0310 	bic.w	r3, r3, #16
 8009d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	330c      	adds	r3, #12
 8009d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d32:	623a      	str	r2, [r7, #32]
 8009d34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d36:	69f9      	ldr	r1, [r7, #28]
 8009d38:	6a3a      	ldr	r2, [r7, #32]
 8009d3a:	e841 2300 	strex	r3, r2, [r1]
 8009d3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1e5      	bne.n	8009d12 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0310 	and.w	r3, r3, #16
 8009d50:	2b10      	cmp	r3, #16
 8009d52:	d10a      	bne.n	8009d6a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d54:	2300      	movs	r3, #0
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7ff fc3f 	bl	80095f4 <HAL_UARTEx_RxEventCallback>
 8009d76:	e002      	b.n	8009d7e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7f7 ff11 	bl	8001ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e002      	b.n	8009d88 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	e000      	b.n	8009d88 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009d86:	2302      	movs	r3, #2
  }
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3730      	adds	r7, #48	@ 0x30
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d94:	b0c0      	sub	sp, #256	@ 0x100
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dac:	68d9      	ldr	r1, [r3, #12]
 8009dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	ea40 0301 	orr.w	r3, r0, r1
 8009db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dbe:	689a      	ldr	r2, [r3, #8]
 8009dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dcc:	695b      	ldr	r3, [r3, #20]
 8009dce:	431a      	orrs	r2, r3
 8009dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dd4:	69db      	ldr	r3, [r3, #28]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009de8:	f021 010c 	bic.w	r1, r1, #12
 8009dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009df6:	430b      	orrs	r3, r1
 8009df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e0a:	6999      	ldr	r1, [r3, #24]
 8009e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	ea40 0301 	orr.w	r3, r0, r1
 8009e16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	4b8f      	ldr	r3, [pc, #572]	@ (800a05c <UART_SetConfig+0x2cc>)
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d005      	beq.n	8009e30 <UART_SetConfig+0xa0>
 8009e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	4b8d      	ldr	r3, [pc, #564]	@ (800a060 <UART_SetConfig+0x2d0>)
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d104      	bne.n	8009e3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e30:	f7fd ff36 	bl	8007ca0 <HAL_RCC_GetPCLK2Freq>
 8009e34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009e38:	e003      	b.n	8009e42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e3a:	f7fd ff1d 	bl	8007c78 <HAL_RCC_GetPCLK1Freq>
 8009e3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e46:	69db      	ldr	r3, [r3, #28]
 8009e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e4c:	f040 810c 	bne.w	800a068 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e54:	2200      	movs	r2, #0
 8009e56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009e5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009e62:	4622      	mov	r2, r4
 8009e64:	462b      	mov	r3, r5
 8009e66:	1891      	adds	r1, r2, r2
 8009e68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009e6a:	415b      	adcs	r3, r3
 8009e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009e72:	4621      	mov	r1, r4
 8009e74:	eb12 0801 	adds.w	r8, r2, r1
 8009e78:	4629      	mov	r1, r5
 8009e7a:	eb43 0901 	adc.w	r9, r3, r1
 8009e7e:	f04f 0200 	mov.w	r2, #0
 8009e82:	f04f 0300 	mov.w	r3, #0
 8009e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e92:	4690      	mov	r8, r2
 8009e94:	4699      	mov	r9, r3
 8009e96:	4623      	mov	r3, r4
 8009e98:	eb18 0303 	adds.w	r3, r8, r3
 8009e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ea0:	462b      	mov	r3, r5
 8009ea2:	eb49 0303 	adc.w	r3, r9, r3
 8009ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	18db      	adds	r3, r3, r3
 8009ec2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	eb42 0303 	adc.w	r3, r2, r3
 8009eca:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009ed4:	f7f6 fe9a 	bl	8000c0c <__aeabi_uldivmod>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4b61      	ldr	r3, [pc, #388]	@ (800a064 <UART_SetConfig+0x2d4>)
 8009ede:	fba3 2302 	umull	r2, r3, r3, r2
 8009ee2:	095b      	lsrs	r3, r3, #5
 8009ee4:	011c      	lsls	r4, r3, #4
 8009ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009eea:	2200      	movs	r2, #0
 8009eec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ef0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009ef4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009ef8:	4642      	mov	r2, r8
 8009efa:	464b      	mov	r3, r9
 8009efc:	1891      	adds	r1, r2, r2
 8009efe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009f00:	415b      	adcs	r3, r3
 8009f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009f08:	4641      	mov	r1, r8
 8009f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8009f0e:	4649      	mov	r1, r9
 8009f10:	eb43 0b01 	adc.w	fp, r3, r1
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	f04f 0300 	mov.w	r3, #0
 8009f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f28:	4692      	mov	sl, r2
 8009f2a:	469b      	mov	fp, r3
 8009f2c:	4643      	mov	r3, r8
 8009f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8009f32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f36:	464b      	mov	r3, r9
 8009f38:	eb4b 0303 	adc.w	r3, fp, r3
 8009f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009f50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009f54:	460b      	mov	r3, r1
 8009f56:	18db      	adds	r3, r3, r3
 8009f58:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	eb42 0303 	adc.w	r3, r2, r3
 8009f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009f66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009f6a:	f7f6 fe4f 	bl	8000c0c <__aeabi_uldivmod>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	4611      	mov	r1, r2
 8009f74:	4b3b      	ldr	r3, [pc, #236]	@ (800a064 <UART_SetConfig+0x2d4>)
 8009f76:	fba3 2301 	umull	r2, r3, r3, r1
 8009f7a:	095b      	lsrs	r3, r3, #5
 8009f7c:	2264      	movs	r2, #100	@ 0x64
 8009f7e:	fb02 f303 	mul.w	r3, r2, r3
 8009f82:	1acb      	subs	r3, r1, r3
 8009f84:	00db      	lsls	r3, r3, #3
 8009f86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009f8a:	4b36      	ldr	r3, [pc, #216]	@ (800a064 <UART_SetConfig+0x2d4>)
 8009f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8009f90:	095b      	lsrs	r3, r3, #5
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009f98:	441c      	add	r4, r3
 8009f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009fa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009fac:	4642      	mov	r2, r8
 8009fae:	464b      	mov	r3, r9
 8009fb0:	1891      	adds	r1, r2, r2
 8009fb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009fb4:	415b      	adcs	r3, r3
 8009fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009fbc:	4641      	mov	r1, r8
 8009fbe:	1851      	adds	r1, r2, r1
 8009fc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	414b      	adcs	r3, r1
 8009fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fc8:	f04f 0200 	mov.w	r2, #0
 8009fcc:	f04f 0300 	mov.w	r3, #0
 8009fd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009fd4:	4659      	mov	r1, fp
 8009fd6:	00cb      	lsls	r3, r1, #3
 8009fd8:	4651      	mov	r1, sl
 8009fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fde:	4651      	mov	r1, sl
 8009fe0:	00ca      	lsls	r2, r1, #3
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	4642      	mov	r2, r8
 8009fea:	189b      	adds	r3, r3, r2
 8009fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ff0:	464b      	mov	r3, r9
 8009ff2:	460a      	mov	r2, r1
 8009ff4:	eb42 0303 	adc.w	r3, r2, r3
 8009ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a008:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a00c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a010:	460b      	mov	r3, r1
 800a012:	18db      	adds	r3, r3, r3
 800a014:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a016:	4613      	mov	r3, r2
 800a018:	eb42 0303 	adc.w	r3, r2, r3
 800a01c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a01e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a022:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a026:	f7f6 fdf1 	bl	8000c0c <__aeabi_uldivmod>
 800a02a:	4602      	mov	r2, r0
 800a02c:	460b      	mov	r3, r1
 800a02e:	4b0d      	ldr	r3, [pc, #52]	@ (800a064 <UART_SetConfig+0x2d4>)
 800a030:	fba3 1302 	umull	r1, r3, r3, r2
 800a034:	095b      	lsrs	r3, r3, #5
 800a036:	2164      	movs	r1, #100	@ 0x64
 800a038:	fb01 f303 	mul.w	r3, r1, r3
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	00db      	lsls	r3, r3, #3
 800a040:	3332      	adds	r3, #50	@ 0x32
 800a042:	4a08      	ldr	r2, [pc, #32]	@ (800a064 <UART_SetConfig+0x2d4>)
 800a044:	fba2 2303 	umull	r2, r3, r2, r3
 800a048:	095b      	lsrs	r3, r3, #5
 800a04a:	f003 0207 	and.w	r2, r3, #7
 800a04e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4422      	add	r2, r4
 800a056:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a058:	e106      	b.n	800a268 <UART_SetConfig+0x4d8>
 800a05a:	bf00      	nop
 800a05c:	40011000 	.word	0x40011000
 800a060:	40011400 	.word	0x40011400
 800a064:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a06c:	2200      	movs	r2, #0
 800a06e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a072:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a076:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a07a:	4642      	mov	r2, r8
 800a07c:	464b      	mov	r3, r9
 800a07e:	1891      	adds	r1, r2, r2
 800a080:	6239      	str	r1, [r7, #32]
 800a082:	415b      	adcs	r3, r3
 800a084:	627b      	str	r3, [r7, #36]	@ 0x24
 800a086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a08a:	4641      	mov	r1, r8
 800a08c:	1854      	adds	r4, r2, r1
 800a08e:	4649      	mov	r1, r9
 800a090:	eb43 0501 	adc.w	r5, r3, r1
 800a094:	f04f 0200 	mov.w	r2, #0
 800a098:	f04f 0300 	mov.w	r3, #0
 800a09c:	00eb      	lsls	r3, r5, #3
 800a09e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a0a2:	00e2      	lsls	r2, r4, #3
 800a0a4:	4614      	mov	r4, r2
 800a0a6:	461d      	mov	r5, r3
 800a0a8:	4643      	mov	r3, r8
 800a0aa:	18e3      	adds	r3, r4, r3
 800a0ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a0b0:	464b      	mov	r3, r9
 800a0b2:	eb45 0303 	adc.w	r3, r5, r3
 800a0b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a0ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a0ca:	f04f 0200 	mov.w	r2, #0
 800a0ce:	f04f 0300 	mov.w	r3, #0
 800a0d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	008b      	lsls	r3, r1, #2
 800a0da:	4621      	mov	r1, r4
 800a0dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	008a      	lsls	r2, r1, #2
 800a0e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a0e8:	f7f6 fd90 	bl	8000c0c <__aeabi_uldivmod>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	4b60      	ldr	r3, [pc, #384]	@ (800a274 <UART_SetConfig+0x4e4>)
 800a0f2:	fba3 2302 	umull	r2, r3, r3, r2
 800a0f6:	095b      	lsrs	r3, r3, #5
 800a0f8:	011c      	lsls	r4, r3, #4
 800a0fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0fe:	2200      	movs	r2, #0
 800a100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a104:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a108:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a10c:	4642      	mov	r2, r8
 800a10e:	464b      	mov	r3, r9
 800a110:	1891      	adds	r1, r2, r2
 800a112:	61b9      	str	r1, [r7, #24]
 800a114:	415b      	adcs	r3, r3
 800a116:	61fb      	str	r3, [r7, #28]
 800a118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a11c:	4641      	mov	r1, r8
 800a11e:	1851      	adds	r1, r2, r1
 800a120:	6139      	str	r1, [r7, #16]
 800a122:	4649      	mov	r1, r9
 800a124:	414b      	adcs	r3, r1
 800a126:	617b      	str	r3, [r7, #20]
 800a128:	f04f 0200 	mov.w	r2, #0
 800a12c:	f04f 0300 	mov.w	r3, #0
 800a130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a134:	4659      	mov	r1, fp
 800a136:	00cb      	lsls	r3, r1, #3
 800a138:	4651      	mov	r1, sl
 800a13a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a13e:	4651      	mov	r1, sl
 800a140:	00ca      	lsls	r2, r1, #3
 800a142:	4610      	mov	r0, r2
 800a144:	4619      	mov	r1, r3
 800a146:	4603      	mov	r3, r0
 800a148:	4642      	mov	r2, r8
 800a14a:	189b      	adds	r3, r3, r2
 800a14c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a150:	464b      	mov	r3, r9
 800a152:	460a      	mov	r2, r1
 800a154:	eb42 0303 	adc.w	r3, r2, r3
 800a158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a15c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a166:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a168:	f04f 0200 	mov.w	r2, #0
 800a16c:	f04f 0300 	mov.w	r3, #0
 800a170:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a174:	4649      	mov	r1, r9
 800a176:	008b      	lsls	r3, r1, #2
 800a178:	4641      	mov	r1, r8
 800a17a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a17e:	4641      	mov	r1, r8
 800a180:	008a      	lsls	r2, r1, #2
 800a182:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a186:	f7f6 fd41 	bl	8000c0c <__aeabi_uldivmod>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	4611      	mov	r1, r2
 800a190:	4b38      	ldr	r3, [pc, #224]	@ (800a274 <UART_SetConfig+0x4e4>)
 800a192:	fba3 2301 	umull	r2, r3, r3, r1
 800a196:	095b      	lsrs	r3, r3, #5
 800a198:	2264      	movs	r2, #100	@ 0x64
 800a19a:	fb02 f303 	mul.w	r3, r2, r3
 800a19e:	1acb      	subs	r3, r1, r3
 800a1a0:	011b      	lsls	r3, r3, #4
 800a1a2:	3332      	adds	r3, #50	@ 0x32
 800a1a4:	4a33      	ldr	r2, [pc, #204]	@ (800a274 <UART_SetConfig+0x4e4>)
 800a1a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1aa:	095b      	lsrs	r3, r3, #5
 800a1ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1b0:	441c      	add	r4, r3
 800a1b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1ba:	677a      	str	r2, [r7, #116]	@ 0x74
 800a1bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a1c0:	4642      	mov	r2, r8
 800a1c2:	464b      	mov	r3, r9
 800a1c4:	1891      	adds	r1, r2, r2
 800a1c6:	60b9      	str	r1, [r7, #8]
 800a1c8:	415b      	adcs	r3, r3
 800a1ca:	60fb      	str	r3, [r7, #12]
 800a1cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1d0:	4641      	mov	r1, r8
 800a1d2:	1851      	adds	r1, r2, r1
 800a1d4:	6039      	str	r1, [r7, #0]
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	414b      	adcs	r3, r1
 800a1da:	607b      	str	r3, [r7, #4]
 800a1dc:	f04f 0200 	mov.w	r2, #0
 800a1e0:	f04f 0300 	mov.w	r3, #0
 800a1e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a1e8:	4659      	mov	r1, fp
 800a1ea:	00cb      	lsls	r3, r1, #3
 800a1ec:	4651      	mov	r1, sl
 800a1ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1f2:	4651      	mov	r1, sl
 800a1f4:	00ca      	lsls	r2, r1, #3
 800a1f6:	4610      	mov	r0, r2
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	4642      	mov	r2, r8
 800a1fe:	189b      	adds	r3, r3, r2
 800a200:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a202:	464b      	mov	r3, r9
 800a204:	460a      	mov	r2, r1
 800a206:	eb42 0303 	adc.w	r3, r2, r3
 800a20a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a20c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	663b      	str	r3, [r7, #96]	@ 0x60
 800a216:	667a      	str	r2, [r7, #100]	@ 0x64
 800a218:	f04f 0200 	mov.w	r2, #0
 800a21c:	f04f 0300 	mov.w	r3, #0
 800a220:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a224:	4649      	mov	r1, r9
 800a226:	008b      	lsls	r3, r1, #2
 800a228:	4641      	mov	r1, r8
 800a22a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a22e:	4641      	mov	r1, r8
 800a230:	008a      	lsls	r2, r1, #2
 800a232:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a236:	f7f6 fce9 	bl	8000c0c <__aeabi_uldivmod>
 800a23a:	4602      	mov	r2, r0
 800a23c:	460b      	mov	r3, r1
 800a23e:	4b0d      	ldr	r3, [pc, #52]	@ (800a274 <UART_SetConfig+0x4e4>)
 800a240:	fba3 1302 	umull	r1, r3, r3, r2
 800a244:	095b      	lsrs	r3, r3, #5
 800a246:	2164      	movs	r1, #100	@ 0x64
 800a248:	fb01 f303 	mul.w	r3, r1, r3
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	3332      	adds	r3, #50	@ 0x32
 800a252:	4a08      	ldr	r2, [pc, #32]	@ (800a274 <UART_SetConfig+0x4e4>)
 800a254:	fba2 2303 	umull	r2, r3, r2, r3
 800a258:	095b      	lsrs	r3, r3, #5
 800a25a:	f003 020f 	and.w	r2, r3, #15
 800a25e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4422      	add	r2, r4
 800a266:	609a      	str	r2, [r3, #8]
}
 800a268:	bf00      	nop
 800a26a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a26e:	46bd      	mov	sp, r7
 800a270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a274:	51eb851f 	.word	0x51eb851f

0800a278 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a27e:	4b87      	ldr	r3, [pc, #540]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a280:	22c0      	movs	r2, #192	@ 0xc0
 800a282:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a284:	4b85      	ldr	r3, [pc, #532]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a286:	22a8      	movs	r2, #168	@ 0xa8
 800a288:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 13;
 800a28a:	4b84      	ldr	r3, [pc, #528]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a28c:	220d      	movs	r2, #13
 800a28e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 800a290:	4b82      	ldr	r3, [pc, #520]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a292:	226f      	movs	r2, #111	@ 0x6f
 800a294:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a296:	4b82      	ldr	r3, [pc, #520]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a298:	22ff      	movs	r2, #255	@ 0xff
 800a29a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a29c:	4b80      	ldr	r3, [pc, #512]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a29e:	22ff      	movs	r2, #255	@ 0xff
 800a2a0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a2a2:	4b7f      	ldr	r3, [pc, #508]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a2a4:	22ff      	movs	r2, #255	@ 0xff
 800a2a6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a2a8:	4b7d      	ldr	r3, [pc, #500]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a2ae:	4b7d      	ldr	r3, [pc, #500]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a2b0:	22c0      	movs	r2, #192	@ 0xc0
 800a2b2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a2b4:	4b7b      	ldr	r3, [pc, #492]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a2b6:	22a8      	movs	r2, #168	@ 0xa8
 800a2b8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 13;
 800a2ba:	4b7a      	ldr	r3, [pc, #488]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a2bc:	220d      	movs	r2, #13
 800a2be:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 800a2c0:	4b78      	ldr	r3, [pc, #480]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a2c2:	2264      	movs	r2, #100	@ 0x64
 800a2c4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800a2c6:	f000 fcfa 	bl	800acbe <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a2ca:	4b74      	ldr	r3, [pc, #464]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	061a      	lsls	r2, r3, #24
 800a2d0:	4b72      	ldr	r3, [pc, #456]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a2d2:	785b      	ldrb	r3, [r3, #1]
 800a2d4:	041b      	lsls	r3, r3, #16
 800a2d6:	431a      	orrs	r2, r3
 800a2d8:	4b70      	ldr	r3, [pc, #448]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a2da:	789b      	ldrb	r3, [r3, #2]
 800a2dc:	021b      	lsls	r3, r3, #8
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	4a6e      	ldr	r2, [pc, #440]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a2e2:	78d2      	ldrb	r2, [r2, #3]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	061a      	lsls	r2, r3, #24
 800a2e8:	4b6c      	ldr	r3, [pc, #432]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	0619      	lsls	r1, r3, #24
 800a2ee:	4b6b      	ldr	r3, [pc, #428]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a2f0:	785b      	ldrb	r3, [r3, #1]
 800a2f2:	041b      	lsls	r3, r3, #16
 800a2f4:	4319      	orrs	r1, r3
 800a2f6:	4b69      	ldr	r3, [pc, #420]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a2f8:	789b      	ldrb	r3, [r3, #2]
 800a2fa:	021b      	lsls	r3, r3, #8
 800a2fc:	430b      	orrs	r3, r1
 800a2fe:	4967      	ldr	r1, [pc, #412]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a300:	78c9      	ldrb	r1, [r1, #3]
 800a302:	430b      	orrs	r3, r1
 800a304:	021b      	lsls	r3, r3, #8
 800a306:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a30a:	431a      	orrs	r2, r3
 800a30c:	4b63      	ldr	r3, [pc, #396]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	0619      	lsls	r1, r3, #24
 800a312:	4b62      	ldr	r3, [pc, #392]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a314:	785b      	ldrb	r3, [r3, #1]
 800a316:	041b      	lsls	r3, r3, #16
 800a318:	4319      	orrs	r1, r3
 800a31a:	4b60      	ldr	r3, [pc, #384]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a31c:	789b      	ldrb	r3, [r3, #2]
 800a31e:	021b      	lsls	r3, r3, #8
 800a320:	430b      	orrs	r3, r1
 800a322:	495e      	ldr	r1, [pc, #376]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a324:	78c9      	ldrb	r1, [r1, #3]
 800a326:	430b      	orrs	r3, r1
 800a328:	0a1b      	lsrs	r3, r3, #8
 800a32a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a32e:	431a      	orrs	r2, r3
 800a330:	4b5a      	ldr	r3, [pc, #360]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	0619      	lsls	r1, r3, #24
 800a336:	4b59      	ldr	r3, [pc, #356]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a338:	785b      	ldrb	r3, [r3, #1]
 800a33a:	041b      	lsls	r3, r3, #16
 800a33c:	4319      	orrs	r1, r3
 800a33e:	4b57      	ldr	r3, [pc, #348]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a340:	789b      	ldrb	r3, [r3, #2]
 800a342:	021b      	lsls	r3, r3, #8
 800a344:	430b      	orrs	r3, r1
 800a346:	4955      	ldr	r1, [pc, #340]	@ (800a49c <MX_LWIP_Init+0x224>)
 800a348:	78c9      	ldrb	r1, [r1, #3]
 800a34a:	430b      	orrs	r3, r1
 800a34c:	0e1b      	lsrs	r3, r3, #24
 800a34e:	4313      	orrs	r3, r2
 800a350:	4a55      	ldr	r2, [pc, #340]	@ (800a4a8 <MX_LWIP_Init+0x230>)
 800a352:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a354:	4b52      	ldr	r3, [pc, #328]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	061a      	lsls	r2, r3, #24
 800a35a:	4b51      	ldr	r3, [pc, #324]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a35c:	785b      	ldrb	r3, [r3, #1]
 800a35e:	041b      	lsls	r3, r3, #16
 800a360:	431a      	orrs	r2, r3
 800a362:	4b4f      	ldr	r3, [pc, #316]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a364:	789b      	ldrb	r3, [r3, #2]
 800a366:	021b      	lsls	r3, r3, #8
 800a368:	4313      	orrs	r3, r2
 800a36a:	4a4d      	ldr	r2, [pc, #308]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a36c:	78d2      	ldrb	r2, [r2, #3]
 800a36e:	4313      	orrs	r3, r2
 800a370:	061a      	lsls	r2, r3, #24
 800a372:	4b4b      	ldr	r3, [pc, #300]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	0619      	lsls	r1, r3, #24
 800a378:	4b49      	ldr	r3, [pc, #292]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a37a:	785b      	ldrb	r3, [r3, #1]
 800a37c:	041b      	lsls	r3, r3, #16
 800a37e:	4319      	orrs	r1, r3
 800a380:	4b47      	ldr	r3, [pc, #284]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a382:	789b      	ldrb	r3, [r3, #2]
 800a384:	021b      	lsls	r3, r3, #8
 800a386:	430b      	orrs	r3, r1
 800a388:	4945      	ldr	r1, [pc, #276]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a38a:	78c9      	ldrb	r1, [r1, #3]
 800a38c:	430b      	orrs	r3, r1
 800a38e:	021b      	lsls	r3, r3, #8
 800a390:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a394:	431a      	orrs	r2, r3
 800a396:	4b42      	ldr	r3, [pc, #264]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	0619      	lsls	r1, r3, #24
 800a39c:	4b40      	ldr	r3, [pc, #256]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a39e:	785b      	ldrb	r3, [r3, #1]
 800a3a0:	041b      	lsls	r3, r3, #16
 800a3a2:	4319      	orrs	r1, r3
 800a3a4:	4b3e      	ldr	r3, [pc, #248]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a3a6:	789b      	ldrb	r3, [r3, #2]
 800a3a8:	021b      	lsls	r3, r3, #8
 800a3aa:	430b      	orrs	r3, r1
 800a3ac:	493c      	ldr	r1, [pc, #240]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a3ae:	78c9      	ldrb	r1, [r1, #3]
 800a3b0:	430b      	orrs	r3, r1
 800a3b2:	0a1b      	lsrs	r3, r3, #8
 800a3b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a3b8:	431a      	orrs	r2, r3
 800a3ba:	4b39      	ldr	r3, [pc, #228]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	0619      	lsls	r1, r3, #24
 800a3c0:	4b37      	ldr	r3, [pc, #220]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a3c2:	785b      	ldrb	r3, [r3, #1]
 800a3c4:	041b      	lsls	r3, r3, #16
 800a3c6:	4319      	orrs	r1, r3
 800a3c8:	4b35      	ldr	r3, [pc, #212]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a3ca:	789b      	ldrb	r3, [r3, #2]
 800a3cc:	021b      	lsls	r3, r3, #8
 800a3ce:	430b      	orrs	r3, r1
 800a3d0:	4933      	ldr	r1, [pc, #204]	@ (800a4a0 <MX_LWIP_Init+0x228>)
 800a3d2:	78c9      	ldrb	r1, [r1, #3]
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	0e1b      	lsrs	r3, r3, #24
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	4a34      	ldr	r2, [pc, #208]	@ (800a4ac <MX_LWIP_Init+0x234>)
 800a3dc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a3de:	4b31      	ldr	r3, [pc, #196]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	061a      	lsls	r2, r3, #24
 800a3e4:	4b2f      	ldr	r3, [pc, #188]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a3e6:	785b      	ldrb	r3, [r3, #1]
 800a3e8:	041b      	lsls	r3, r3, #16
 800a3ea:	431a      	orrs	r2, r3
 800a3ec:	4b2d      	ldr	r3, [pc, #180]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a3ee:	789b      	ldrb	r3, [r3, #2]
 800a3f0:	021b      	lsls	r3, r3, #8
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	4a2b      	ldr	r2, [pc, #172]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a3f6:	78d2      	ldrb	r2, [r2, #3]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	061a      	lsls	r2, r3, #24
 800a3fc:	4b29      	ldr	r3, [pc, #164]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	0619      	lsls	r1, r3, #24
 800a402:	4b28      	ldr	r3, [pc, #160]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a404:	785b      	ldrb	r3, [r3, #1]
 800a406:	041b      	lsls	r3, r3, #16
 800a408:	4319      	orrs	r1, r3
 800a40a:	4b26      	ldr	r3, [pc, #152]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a40c:	789b      	ldrb	r3, [r3, #2]
 800a40e:	021b      	lsls	r3, r3, #8
 800a410:	430b      	orrs	r3, r1
 800a412:	4924      	ldr	r1, [pc, #144]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a414:	78c9      	ldrb	r1, [r1, #3]
 800a416:	430b      	orrs	r3, r1
 800a418:	021b      	lsls	r3, r3, #8
 800a41a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a41e:	431a      	orrs	r2, r3
 800a420:	4b20      	ldr	r3, [pc, #128]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	0619      	lsls	r1, r3, #24
 800a426:	4b1f      	ldr	r3, [pc, #124]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a428:	785b      	ldrb	r3, [r3, #1]
 800a42a:	041b      	lsls	r3, r3, #16
 800a42c:	4319      	orrs	r1, r3
 800a42e:	4b1d      	ldr	r3, [pc, #116]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a430:	789b      	ldrb	r3, [r3, #2]
 800a432:	021b      	lsls	r3, r3, #8
 800a434:	430b      	orrs	r3, r1
 800a436:	491b      	ldr	r1, [pc, #108]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a438:	78c9      	ldrb	r1, [r1, #3]
 800a43a:	430b      	orrs	r3, r1
 800a43c:	0a1b      	lsrs	r3, r3, #8
 800a43e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a442:	431a      	orrs	r2, r3
 800a444:	4b17      	ldr	r3, [pc, #92]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	0619      	lsls	r1, r3, #24
 800a44a:	4b16      	ldr	r3, [pc, #88]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a44c:	785b      	ldrb	r3, [r3, #1]
 800a44e:	041b      	lsls	r3, r3, #16
 800a450:	4319      	orrs	r1, r3
 800a452:	4b14      	ldr	r3, [pc, #80]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a454:	789b      	ldrb	r3, [r3, #2]
 800a456:	021b      	lsls	r3, r3, #8
 800a458:	430b      	orrs	r3, r1
 800a45a:	4912      	ldr	r1, [pc, #72]	@ (800a4a4 <MX_LWIP_Init+0x22c>)
 800a45c:	78c9      	ldrb	r1, [r1, #3]
 800a45e:	430b      	orrs	r3, r1
 800a460:	0e1b      	lsrs	r3, r3, #24
 800a462:	4313      	orrs	r3, r2
 800a464:	4a12      	ldr	r2, [pc, #72]	@ (800a4b0 <MX_LWIP_Init+0x238>)
 800a466:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a468:	4b12      	ldr	r3, [pc, #72]	@ (800a4b4 <MX_LWIP_Init+0x23c>)
 800a46a:	9302      	str	r3, [sp, #8]
 800a46c:	4b12      	ldr	r3, [pc, #72]	@ (800a4b8 <MX_LWIP_Init+0x240>)
 800a46e:	9301      	str	r3, [sp, #4]
 800a470:	2300      	movs	r3, #0
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	4b0e      	ldr	r3, [pc, #56]	@ (800a4b0 <MX_LWIP_Init+0x238>)
 800a476:	4a0d      	ldr	r2, [pc, #52]	@ (800a4ac <MX_LWIP_Init+0x234>)
 800a478:	490b      	ldr	r1, [pc, #44]	@ (800a4a8 <MX_LWIP_Init+0x230>)
 800a47a:	4810      	ldr	r0, [pc, #64]	@ (800a4bc <MX_LWIP_Init+0x244>)
 800a47c:	f001 f90a 	bl	800b694 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a480:	480e      	ldr	r0, [pc, #56]	@ (800a4bc <MX_LWIP_Init+0x244>)
 800a482:	f001 fab9 	bl	800b9f8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800a486:	480d      	ldr	r0, [pc, #52]	@ (800a4bc <MX_LWIP_Init+0x244>)
 800a488:	f001 fac6 	bl	800ba18 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a48c:	490c      	ldr	r1, [pc, #48]	@ (800a4c0 <MX_LWIP_Init+0x248>)
 800a48e:	480b      	ldr	r0, [pc, #44]	@ (800a4bc <MX_LWIP_Init+0x244>)
 800a490:	f001 fbc4 	bl	800bc1c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a494:	bf00      	nop
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	20000f5c 	.word	0x20000f5c
 800a4a0:	20000f60 	.word	0x20000f60
 800a4a4:	20000f64 	.word	0x20000f64
 800a4a8:	20000f50 	.word	0x20000f50
 800a4ac:	20000f54 	.word	0x20000f54
 800a4b0:	20000f58 	.word	0x20000f58
 800a4b4:	08014c4d 	.word	0x08014c4d
 800a4b8:	0800a7e1 	.word	0x0800a7e1
 800a4bc:	20000f1c 	.word	0x20000f1c
 800a4c0:	0800a515 	.word	0x0800a515

0800a4c4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800a4cc:	f7fa fa88 	bl	80049e0 <HAL_GetTick>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	4b08      	ldr	r3, [pc, #32]	@ (800a4f4 <Ethernet_Link_Periodic_Handle+0x30>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	2b63      	cmp	r3, #99	@ 0x63
 800a4da:	d907      	bls.n	800a4ec <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800a4dc:	f7fa fa80 	bl	80049e0 <HAL_GetTick>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	4a04      	ldr	r2, [pc, #16]	@ (800a4f4 <Ethernet_Link_Periodic_Handle+0x30>)
 800a4e4:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fabe 	bl	800aa68 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800a4ec:	bf00      	nop
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	20000f18 	.word	0x20000f18

0800a4f8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800a4fc:	4804      	ldr	r0, [pc, #16]	@ (800a510 <MX_LWIP_Process+0x18>)
 800a4fe:	f000 f94f 	bl	800a7a0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800a502:	f007 fc9b 	bl	8011e3c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800a506:	4802      	ldr	r0, [pc, #8]	@ (800a510 <MX_LWIP_Process+0x18>)
 800a508:	f7ff ffdc 	bl	800a4c4 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800a50c:	bf00      	nop
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	20000f1c 	.word	0x20000f1c

0800a514 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a51c:	bf00      	nop
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a534:	4b44      	ldr	r3, [pc, #272]	@ (800a648 <low_level_init+0x120>)
 800a536:	4a45      	ldr	r2, [pc, #276]	@ (800a64c <low_level_init+0x124>)
 800a538:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x12;
 800a53a:	2312      	movs	r3, #18
 800a53c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x34;
 800a53e:	2334      	movs	r3, #52	@ 0x34
 800a540:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x56;
 800a542:	2356      	movs	r3, #86	@ 0x56
 800a544:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x12;
 800a546:	2312      	movs	r3, #18
 800a548:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x34;
 800a54a:	2334      	movs	r3, #52	@ 0x34
 800a54c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x56;
 800a54e:	2356      	movs	r3, #86	@ 0x56
 800a550:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a552:	4a3d      	ldr	r2, [pc, #244]	@ (800a648 <low_level_init+0x120>)
 800a554:	f107 0308 	add.w	r3, r7, #8
 800a558:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a55a:	4b3b      	ldr	r3, [pc, #236]	@ (800a648 <low_level_init+0x120>)
 800a55c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800a560:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a562:	4b39      	ldr	r3, [pc, #228]	@ (800a648 <low_level_init+0x120>)
 800a564:	4a3a      	ldr	r2, [pc, #232]	@ (800a650 <low_level_init+0x128>)
 800a566:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a568:	4b37      	ldr	r3, [pc, #220]	@ (800a648 <low_level_init+0x120>)
 800a56a:	4a3a      	ldr	r2, [pc, #232]	@ (800a654 <low_level_init+0x12c>)
 800a56c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a56e:	4b36      	ldr	r3, [pc, #216]	@ (800a648 <low_level_init+0x120>)
 800a570:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a574:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a576:	4834      	ldr	r0, [pc, #208]	@ (800a648 <low_level_init+0x120>)
 800a578:	f7fb fae0 	bl	8005b3c <HAL_ETH_Init>
 800a57c:	4603      	mov	r3, r0
 800a57e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a580:	2238      	movs	r2, #56	@ 0x38
 800a582:	2100      	movs	r1, #0
 800a584:	4834      	ldr	r0, [pc, #208]	@ (800a658 <low_level_init+0x130>)
 800a586:	f00a fd9c 	bl	80150c2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a58a:	4b33      	ldr	r3, [pc, #204]	@ (800a658 <low_level_init+0x130>)
 800a58c:	2221      	movs	r2, #33	@ 0x21
 800a58e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a590:	4b31      	ldr	r3, [pc, #196]	@ (800a658 <low_level_init+0x130>)
 800a592:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800a596:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a598:	4b2f      	ldr	r3, [pc, #188]	@ (800a658 <low_level_init+0x130>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a59e:	482f      	ldr	r0, [pc, #188]	@ (800a65c <low_level_init+0x134>)
 800a5a0:	f000 ff40 	bl	800b424 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2206      	movs	r2, #6
 800a5a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a5ac:	4b26      	ldr	r3, [pc, #152]	@ (800a648 <low_level_init+0x120>)
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	781a      	ldrb	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a5b8:	4b23      	ldr	r3, [pc, #140]	@ (800a648 <low_level_init+0x120>)
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	785a      	ldrb	r2, [r3, #1]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a5c4:	4b20      	ldr	r3, [pc, #128]	@ (800a648 <low_level_init+0x120>)
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	789a      	ldrb	r2, [r3, #2]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a5d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a648 <low_level_init+0x120>)
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	78da      	ldrb	r2, [r3, #3]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a5dc:	4b1a      	ldr	r3, [pc, #104]	@ (800a648 <low_level_init+0x120>)
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	791a      	ldrb	r2, [r3, #4]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a5e8:	4b17      	ldr	r3, [pc, #92]	@ (800a648 <low_level_init+0x120>)
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	795a      	ldrb	r2, [r3, #5]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a5fa:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a602:	f043 030a 	orr.w	r3, r3, #10
 800a606:	b2da      	uxtb	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a60e:	4914      	ldr	r1, [pc, #80]	@ (800a660 <low_level_init+0x138>)
 800a610:	4814      	ldr	r0, [pc, #80]	@ (800a664 <low_level_init+0x13c>)
 800a612:	f7fa f878 	bl	8004706 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800a616:	4813      	ldr	r0, [pc, #76]	@ (800a664 <low_level_init+0x13c>)
 800a618:	f7fa f8a7 	bl	800476a <LAN8742_Init>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d006      	beq.n	800a630 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f001 faca 	bl	800bbbc <netif_set_link_down>
    netif_set_down(netif);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f001 fa61 	bl	800baf0 <netif_set_down>
 800a62e:	e008      	b.n	800a642 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800a630:	7bfb      	ldrb	r3, [r7, #15]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d103      	bne.n	800a63e <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 fa16 	bl	800aa68 <ethernet_link_check_state>
 800a63c:	e001      	b.n	800a642 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800a63e:	f7f7 fe87 	bl	8002350 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	20005a34 	.word	0x20005a34
 800a64c:	40028000 	.word	0x40028000
 800a650:	20005994 	.word	0x20005994
 800a654:	200058f4 	.word	0x200058f4
 800a658:	20005ae4 	.word	0x20005ae4
 800a65c:	08019a68 	.word	0x08019a68
 800a660:	200000ac 	.word	0x200000ac
 800a664:	20005b1c 	.word	0x20005b1c

0800a668 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b092      	sub	sp, #72	@ 0x48
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a672:	2300      	movs	r3, #0
 800a674:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800a676:	2300      	movs	r3, #0
 800a678:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a680:	f107 030c 	add.w	r3, r7, #12
 800a684:	2230      	movs	r2, #48	@ 0x30
 800a686:	2100      	movs	r1, #0
 800a688:	4618      	mov	r0, r3
 800a68a:	f00a fd1a 	bl	80150c2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a68e:	f107 030c 	add.w	r3, r7, #12
 800a692:	2230      	movs	r2, #48	@ 0x30
 800a694:	2100      	movs	r1, #0
 800a696:	4618      	mov	r0, r3
 800a698:	f00a fd13 	bl	80150c2 <memset>

  for(q = p; q != NULL; q = q->next)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6a0:	e045      	b.n	800a72e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a6a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d902      	bls.n	800a6ae <low_level_output+0x46>
      return ERR_IF;
 800a6a8:	f06f 030b 	mvn.w	r3, #11
 800a6ac:	e055      	b.n	800a75a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800a6ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6b0:	6859      	ldr	r1, [r3, #4]
 800a6b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	005b      	lsls	r3, r3, #1
 800a6b8:	4413      	add	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	3348      	adds	r3, #72	@ 0x48
 800a6be:	443b      	add	r3, r7
 800a6c0:	3b3c      	subs	r3, #60	@ 0x3c
 800a6c2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a6c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6c6:	895b      	ldrh	r3, [r3, #10]
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	005b      	lsls	r3, r3, #1
 800a6d0:	4413      	add	r3, r2
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	3348      	adds	r3, #72	@ 0x48
 800a6d6:	443b      	add	r3, r7
 800a6d8:	3b38      	subs	r3, #56	@ 0x38
 800a6da:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a6dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d011      	beq.n	800a706 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a6e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6e4:	1e5a      	subs	r2, r3, #1
 800a6e6:	f107 000c 	add.w	r0, r7, #12
 800a6ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	005b      	lsls	r3, r3, #1
 800a6f0:	440b      	add	r3, r1
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	18c1      	adds	r1, r0, r3
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	4413      	add	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	3348      	adds	r3, #72	@ 0x48
 800a700:	443b      	add	r3, r7
 800a702:	3b34      	subs	r3, #52	@ 0x34
 800a704:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d109      	bne.n	800a722 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a70e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a710:	4613      	mov	r3, r2
 800a712:	005b      	lsls	r3, r3, #1
 800a714:	4413      	add	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	3348      	adds	r3, #72	@ 0x48
 800a71a:	443b      	add	r3, r7
 800a71c:	3b34      	subs	r3, #52	@ 0x34
 800a71e:	2200      	movs	r2, #0
 800a720:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a724:	3301      	adds	r3, #1
 800a726:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800a728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a72e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1b6      	bne.n	800a6a2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	891b      	ldrh	r3, [r3, #8]
 800a738:	461a      	mov	r2, r3
 800a73a:	4b0a      	ldr	r3, [pc, #40]	@ (800a764 <low_level_output+0xfc>)
 800a73c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a73e:	4a09      	ldr	r2, [pc, #36]	@ (800a764 <low_level_output+0xfc>)
 800a740:	f107 030c 	add.w	r3, r7, #12
 800a744:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a746:	4a07      	ldr	r2, [pc, #28]	@ (800a764 <low_level_output+0xfc>)
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a74c:	2214      	movs	r2, #20
 800a74e:	4905      	ldr	r1, [pc, #20]	@ (800a764 <low_level_output+0xfc>)
 800a750:	4805      	ldr	r0, [pc, #20]	@ (800a768 <low_level_output+0x100>)
 800a752:	f7fb fb47 	bl	8005de4 <HAL_ETH_Transmit>

  return errval;
 800a756:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3748      	adds	r7, #72	@ 0x48
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	20005ae4 	.word	0x20005ae4
 800a768:	20005a34 	.word	0x20005a34

0800a76c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a774:	2300      	movs	r3, #0
 800a776:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a778:	4b07      	ldr	r3, [pc, #28]	@ (800a798 <low_level_input+0x2c>)
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d105      	bne.n	800a78c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a780:	f107 030c 	add.w	r3, r7, #12
 800a784:	4619      	mov	r1, r3
 800a786:	4805      	ldr	r0, [pc, #20]	@ (800a79c <low_level_input+0x30>)
 800a788:	f7fb fbc0 	bl	8005f0c <HAL_ETH_ReadData>
  }

  return p;
 800a78c:	68fb      	ldr	r3, [r7, #12]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	200058f0 	.word	0x200058f0
 800a79c:	20005a34 	.word	0x20005a34

0800a7a0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7ff ffdd 	bl	800a76c <low_level_input>
 800a7b2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00a      	beq.n	800a7d0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	6879      	ldr	r1, [r7, #4]
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	4798      	blx	r3
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d002      	beq.n	800a7d0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f001 fda6 	bl	800c31c <pbuf_free>
      }
    }
  } while(p!=NULL);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1ea      	bne.n	800a7ac <ethernetif_input+0xc>
}
 800a7d6:	bf00      	nop
 800a7d8:	bf00      	nop
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d106      	bne.n	800a7fc <ethernetif_init+0x1c>
 800a7ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a828 <ethernetif_init+0x48>)
 800a7f0:	f240 126f 	movw	r2, #367	@ 0x16f
 800a7f4:	490d      	ldr	r1, [pc, #52]	@ (800a82c <ethernetif_init+0x4c>)
 800a7f6:	480e      	ldr	r0, [pc, #56]	@ (800a830 <ethernetif_init+0x50>)
 800a7f8:	f00a fbfe 	bl	8014ff8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2273      	movs	r2, #115	@ 0x73
 800a800:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2274      	movs	r2, #116	@ 0x74
 800a808:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a09      	ldr	r2, [pc, #36]	@ (800a834 <ethernetif_init+0x54>)
 800a810:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a08      	ldr	r2, [pc, #32]	@ (800a838 <ethernetif_init+0x58>)
 800a816:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7ff fe85 	bl	800a528 <low_level_init>

  return ERR_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	08017068 	.word	0x08017068
 800a82c:	08017084 	.word	0x08017084
 800a830:	08017094 	.word	0x08017094
 800a834:	08013105 	.word	0x08013105
 800a838:	0800a669 	.word	0x0800a669

0800a83c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a848:	68f9      	ldr	r1, [r7, #12]
 800a84a:	4807      	ldr	r0, [pc, #28]	@ (800a868 <pbuf_free_custom+0x2c>)
 800a84c:	f000 fecc 	bl	800b5e8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a850:	4b06      	ldr	r3, [pc, #24]	@ (800a86c <pbuf_free_custom+0x30>)
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d102      	bne.n	800a85e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a858:	4b04      	ldr	r3, [pc, #16]	@ (800a86c <pbuf_free_custom+0x30>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	701a      	strb	r2, [r3, #0]
  }
}
 800a85e:	bf00      	nop
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	08019a68 	.word	0x08019a68
 800a86c:	200058f0 	.word	0x200058f0

0800a870 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a874:	f7fa f8b4 	bl	80049e0 <HAL_GetTick>
 800a878:	4603      	mov	r3, r0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	bd80      	pop	{r7, pc}
	...

0800a880 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b08e      	sub	sp, #56	@ 0x38
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a888:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a88c:	2200      	movs	r2, #0
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	605a      	str	r2, [r3, #4]
 800a892:	609a      	str	r2, [r3, #8]
 800a894:	60da      	str	r2, [r3, #12]
 800a896:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a46      	ldr	r2, [pc, #280]	@ (800a9b8 <HAL_ETH_MspInit+0x138>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	f040 8085 	bne.w	800a9ae <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	623b      	str	r3, [r7, #32]
 800a8a8:	4b44      	ldr	r3, [pc, #272]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a8aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8ac:	4a43      	ldr	r2, [pc, #268]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a8ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a8b2:	6313      	str	r3, [r2, #48]	@ 0x30
 800a8b4:	4b41      	ldr	r3, [pc, #260]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a8b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8bc:	623b      	str	r3, [r7, #32]
 800a8be:	6a3b      	ldr	r3, [r7, #32]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	61fb      	str	r3, [r7, #28]
 800a8c4:	4b3d      	ldr	r3, [pc, #244]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a8c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8c8:	4a3c      	ldr	r2, [pc, #240]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a8ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a8ce:	6313      	str	r3, [r2, #48]	@ 0x30
 800a8d0:	4b3a      	ldr	r3, [pc, #232]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a8d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a8d8:	61fb      	str	r3, [r7, #28]
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	2300      	movs	r3, #0
 800a8de:	61bb      	str	r3, [r7, #24]
 800a8e0:	4b36      	ldr	r3, [pc, #216]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a8e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8e4:	4a35      	ldr	r2, [pc, #212]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a8e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a8ea:	6313      	str	r3, [r2, #48]	@ 0x30
 800a8ec:	4b33      	ldr	r3, [pc, #204]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a8ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8f4:	61bb      	str	r3, [r7, #24]
 800a8f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	617b      	str	r3, [r7, #20]
 800a8fc:	4b2f      	ldr	r3, [pc, #188]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a8fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a900:	4a2e      	ldr	r2, [pc, #184]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a902:	f043 0304 	orr.w	r3, r3, #4
 800a906:	6313      	str	r3, [r2, #48]	@ 0x30
 800a908:	4b2c      	ldr	r3, [pc, #176]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a90a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a90c:	f003 0304 	and.w	r3, r3, #4
 800a910:	617b      	str	r3, [r7, #20]
 800a912:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a914:	2300      	movs	r3, #0
 800a916:	613b      	str	r3, [r7, #16]
 800a918:	4b28      	ldr	r3, [pc, #160]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a91a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a91c:	4a27      	ldr	r2, [pc, #156]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a91e:	f043 0301 	orr.w	r3, r3, #1
 800a922:	6313      	str	r3, [r2, #48]	@ 0x30
 800a924:	4b25      	ldr	r3, [pc, #148]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a928:	f003 0301 	and.w	r3, r3, #1
 800a92c:	613b      	str	r3, [r7, #16]
 800a92e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a930:	2300      	movs	r3, #0
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	4b21      	ldr	r3, [pc, #132]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a938:	4a20      	ldr	r2, [pc, #128]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a93a:	f043 0302 	orr.w	r3, r3, #2
 800a93e:	6313      	str	r3, [r2, #48]	@ 0x30
 800a940:	4b1e      	ldr	r3, [pc, #120]	@ (800a9bc <HAL_ETH_MspInit+0x13c>)
 800a942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a944:	f003 0302 	and.w	r3, r3, #2
 800a948:	60fb      	str	r3, [r7, #12]
 800a94a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a94c:	2332      	movs	r3, #50	@ 0x32
 800a94e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a950:	2302      	movs	r3, #2
 800a952:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a954:	2300      	movs	r3, #0
 800a956:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a958:	2303      	movs	r3, #3
 800a95a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a95c:	230b      	movs	r3, #11
 800a95e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a964:	4619      	mov	r1, r3
 800a966:	4816      	ldr	r0, [pc, #88]	@ (800a9c0 <HAL_ETH_MspInit+0x140>)
 800a968:	f7fc fa1c 	bl	8006da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a96c:	2386      	movs	r3, #134	@ 0x86
 800a96e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a970:	2302      	movs	r3, #2
 800a972:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a974:	2300      	movs	r3, #0
 800a976:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a978:	2303      	movs	r3, #3
 800a97a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a97c:	230b      	movs	r3, #11
 800a97e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a984:	4619      	mov	r1, r3
 800a986:	480f      	ldr	r0, [pc, #60]	@ (800a9c4 <HAL_ETH_MspInit+0x144>)
 800a988:	f7fc fa0c 	bl	8006da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800a98c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800a990:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a992:	2302      	movs	r3, #2
 800a994:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a996:	2300      	movs	r3, #0
 800a998:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a99a:	2303      	movs	r3, #3
 800a99c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a99e:	230b      	movs	r3, #11
 800a9a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a9a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	4807      	ldr	r0, [pc, #28]	@ (800a9c8 <HAL_ETH_MspInit+0x148>)
 800a9aa:	f7fc f9fb 	bl	8006da4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a9ae:	bf00      	nop
 800a9b0:	3738      	adds	r7, #56	@ 0x38
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	40028000 	.word	0x40028000
 800a9bc:	40023800 	.word	0x40023800
 800a9c0:	40020800 	.word	0x40020800
 800a9c4:	40020000 	.word	0x40020000
 800a9c8:	40020400 	.word	0x40020400

0800a9cc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a9d0:	4802      	ldr	r0, [pc, #8]	@ (800a9dc <ETH_PHY_IO_Init+0x10>)
 800a9d2:	f7fb fd83 	bl	80064dc <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	20005a34 	.word	0x20005a34

0800a9e0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	af00      	add	r7, sp, #0
  return 0;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	68f9      	ldr	r1, [r7, #12]
 800aa02:	4807      	ldr	r0, [pc, #28]	@ (800aa20 <ETH_PHY_IO_ReadReg+0x30>)
 800aa04:	f7fb fbc5 	bl	8006192 <HAL_ETH_ReadPHYRegister>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d002      	beq.n	800aa14 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800aa0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa12:	e000      	b.n	800aa16 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20005a34 	.word	0x20005a34

0800aa24 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	68f9      	ldr	r1, [r7, #12]
 800aa36:	4807      	ldr	r0, [pc, #28]	@ (800aa54 <ETH_PHY_IO_WriteReg+0x30>)
 800aa38:	f7fb fbf6 	bl	8006228 <HAL_ETH_WritePHYRegister>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d002      	beq.n	800aa48 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800aa42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa46:	e000      	b.n	800aa4a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	20005a34 	.word	0x20005a34

0800aa58 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800aa5c:	f7f9 ffc0 	bl	80049e0 <HAL_GetTick>
 800aa60:	4603      	mov	r3, r0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	bd80      	pop	{r7, pc}
	...

0800aa68 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b0a0      	sub	sp, #128	@ 0x80
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800aa70:	f107 030c 	add.w	r3, r7, #12
 800aa74:	2264      	movs	r2, #100	@ 0x64
 800aa76:	2100      	movs	r1, #0
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f00a fb22 	bl	80150c2 <memset>
  int32_t PHYLinkState = 0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800aa82:	2300      	movs	r3, #0
 800aa84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aa86:	2300      	movs	r3, #0
 800aa88:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800aa8e:	483a      	ldr	r0, [pc, #232]	@ (800ab78 <ethernet_link_check_state+0x110>)
 800aa90:	f7f9 feb8 	bl	8004804 <LAN8742_GetLinkState>
 800aa94:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aa9c:	089b      	lsrs	r3, r3, #2
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00c      	beq.n	800aac2 <ethernet_link_check_state+0x5a>
 800aaa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	dc09      	bgt.n	800aac2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800aaae:	4833      	ldr	r0, [pc, #204]	@ (800ab7c <ethernet_link_check_state+0x114>)
 800aab0:	f7fb f93f 	bl	8005d32 <HAL_ETH_Stop>
    netif_set_down(netif);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 f81b 	bl	800baf0 <netif_set_down>
    netif_set_link_down(netif);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f001 f87e 	bl	800bbbc <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800aac0:	e055      	b.n	800ab6e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aac8:	f003 0304 	and.w	r3, r3, #4
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d14e      	bne.n	800ab6e <ethernet_link_check_state+0x106>
 800aad0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	dd4b      	ble.n	800ab6e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800aad6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aad8:	3b02      	subs	r3, #2
 800aada:	2b03      	cmp	r3, #3
 800aadc:	d82a      	bhi.n	800ab34 <ethernet_link_check_state+0xcc>
 800aade:	a201      	add	r2, pc, #4	@ (adr r2, 800aae4 <ethernet_link_check_state+0x7c>)
 800aae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae4:	0800aaf5 	.word	0x0800aaf5
 800aae8:	0800ab07 	.word	0x0800ab07
 800aaec:	0800ab17 	.word	0x0800ab17
 800aaf0:	0800ab27 	.word	0x0800ab27
      duplex = ETH_FULLDUPLEX_MODE;
 800aaf4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aaf8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800aafa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800aafe:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ab00:	2301      	movs	r3, #1
 800ab02:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ab04:	e017      	b.n	800ab36 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800ab06:	2300      	movs	r3, #0
 800ab08:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800ab0a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ab0e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ab10:	2301      	movs	r3, #1
 800ab12:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ab14:	e00f      	b.n	800ab36 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800ab16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ab1a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ab20:	2301      	movs	r3, #1
 800ab22:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ab24:	e007      	b.n	800ab36 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800ab26:	2300      	movs	r3, #0
 800ab28:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ab32:	e000      	b.n	800ab36 <ethernet_link_check_state+0xce>
      break;
 800ab34:	bf00      	nop
    if(linkchanged)
 800ab36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d018      	beq.n	800ab6e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ab3c:	f107 030c 	add.w	r3, r7, #12
 800ab40:	4619      	mov	r1, r3
 800ab42:	480e      	ldr	r0, [pc, #56]	@ (800ab7c <ethernet_link_check_state+0x114>)
 800ab44:	f7fb fbb9 	bl	80062ba <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800ab48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab4a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800ab4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab4e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800ab50:	f107 030c 	add.w	r3, r7, #12
 800ab54:	4619      	mov	r1, r3
 800ab56:	4809      	ldr	r0, [pc, #36]	@ (800ab7c <ethernet_link_check_state+0x114>)
 800ab58:	f7fb fca6 	bl	80064a8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800ab5c:	4807      	ldr	r0, [pc, #28]	@ (800ab7c <ethernet_link_check_state+0x114>)
 800ab5e:	f7fb f889 	bl	8005c74 <HAL_ETH_Start>
      netif_set_up(netif);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 ff58 	bl	800ba18 <netif_set_up>
      netif_set_link_up(netif);
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fff3 	bl	800bb54 <netif_set_link_up>
}
 800ab6e:	bf00      	nop
 800ab70:	3780      	adds	r7, #128	@ 0x80
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	20005b1c 	.word	0x20005b1c
 800ab7c:	20005a34 	.word	0x20005a34

0800ab80 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af02      	add	r7, sp, #8
 800ab86:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800ab88:	4812      	ldr	r0, [pc, #72]	@ (800abd4 <HAL_ETH_RxAllocateCallback+0x54>)
 800ab8a:	f000 fcbf 	bl	800b50c <memp_malloc_pool>
 800ab8e:	60f8      	str	r0, [r7, #12]
  if (p)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d014      	beq.n	800abc0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f103 0220 	add.w	r2, r3, #32
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4a0d      	ldr	r2, [pc, #52]	@ (800abd8 <HAL_ETH_RxAllocateCallback+0x58>)
 800aba4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800abae:	9201      	str	r2, [sp, #4]
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2241      	movs	r2, #65	@ 0x41
 800abb6:	2100      	movs	r1, #0
 800abb8:	2000      	movs	r0, #0
 800abba:	f001 f9f5 	bl	800bfa8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800abbe:	e005      	b.n	800abcc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800abc0:	4b06      	ldr	r3, [pc, #24]	@ (800abdc <HAL_ETH_RxAllocateCallback+0x5c>)
 800abc2:	2201      	movs	r2, #1
 800abc4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	601a      	str	r2, [r3, #0]
}
 800abcc:	bf00      	nop
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	08019a68 	.word	0x08019a68
 800abd8:	0800a83d 	.word	0x0800a83d
 800abdc:	200058f0 	.word	0x200058f0

0800abe0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b089      	sub	sp, #36	@ 0x24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
 800abec:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800abf6:	2300      	movs	r3, #0
 800abf8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	3b20      	subs	r3, #32
 800abfe:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	2200      	movs	r2, #0
 800ac04:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	887a      	ldrh	r2, [r7, #2]
 800ac10:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d103      	bne.n	800ac22 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	69fa      	ldr	r2, [r7, #28]
 800ac1e:	601a      	str	r2, [r3, #0]
 800ac20:	e003      	b.n	800ac2a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	69fa      	ldr	r2, [r7, #28]
 800ac28:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	69fa      	ldr	r2, [r7, #28]
 800ac2e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	61fb      	str	r3, [r7, #28]
 800ac36:	e009      	b.n	800ac4c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	891a      	ldrh	r2, [r3, #8]
 800ac3c:	887b      	ldrh	r3, [r7, #2]
 800ac3e:	4413      	add	r3, r2
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	61fb      	str	r3, [r7, #28]
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1f2      	bne.n	800ac38 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800ac52:	bf00      	nop
 800ac54:	bf00      	nop
 800ac56:	3724      	adds	r7, #36	@ 0x24
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	4603      	mov	r3, r0
 800ac68:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ac6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ac6e:	021b      	lsls	r3, r3, #8
 800ac70:	b21a      	sxth	r2, r3
 800ac72:	88fb      	ldrh	r3, [r7, #6]
 800ac74:	0a1b      	lsrs	r3, r3, #8
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	b21b      	sxth	r3, r3
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	b21b      	sxth	r3, r3
 800ac7e:	b29b      	uxth	r3, r3
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	061a      	lsls	r2, r3, #24
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	021b      	lsls	r3, r3, #8
 800ac9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800aca0:	431a      	orrs	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	0a1b      	lsrs	r3, r3, #8
 800aca6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800acaa:	431a      	orrs	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	0e1b      	lsrs	r3, r3, #24
 800acb0:	4313      	orrs	r3, r2
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	370c      	adds	r7, #12
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b082      	sub	sp, #8
 800acc2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800acc8:	f000 f8d4 	bl	800ae74 <mem_init>
  memp_init();
 800accc:	f000 fbda 	bl	800b484 <memp_init>
  pbuf_init();
  netif_init();
 800acd0:	f000 fcd8 	bl	800b684 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800acd4:	f007 f8f4 	bl	8011ec0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800acd8:	f001 fe50 	bl	800c97c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800acdc:	f007 f866 	bl	8011dac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ace0:	bf00      	nop
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	4603      	mov	r3, r0
 800acf0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800acf2:	4b05      	ldr	r3, [pc, #20]	@ (800ad08 <ptr_to_mem+0x20>)
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	88fb      	ldrh	r3, [r7, #6]
 800acf8:	4413      	add	r3, r2
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	370c      	adds	r7, #12
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop
 800ad08:	20008368 	.word	0x20008368

0800ad0c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ad14:	4b05      	ldr	r3, [pc, #20]	@ (800ad2c <mem_to_ptr+0x20>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	b29b      	uxth	r3, r3
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	370c      	adds	r7, #12
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	20008368 	.word	0x20008368

0800ad30 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ad30:	b590      	push	{r4, r7, lr}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ad38:	4b45      	ldr	r3, [pc, #276]	@ (800ae50 <plug_holes+0x120>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d206      	bcs.n	800ad50 <plug_holes+0x20>
 800ad42:	4b44      	ldr	r3, [pc, #272]	@ (800ae54 <plug_holes+0x124>)
 800ad44:	f240 12df 	movw	r2, #479	@ 0x1df
 800ad48:	4943      	ldr	r1, [pc, #268]	@ (800ae58 <plug_holes+0x128>)
 800ad4a:	4844      	ldr	r0, [pc, #272]	@ (800ae5c <plug_holes+0x12c>)
 800ad4c:	f00a f954 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ad50:	4b43      	ldr	r3, [pc, #268]	@ (800ae60 <plug_holes+0x130>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d306      	bcc.n	800ad68 <plug_holes+0x38>
 800ad5a:	4b3e      	ldr	r3, [pc, #248]	@ (800ae54 <plug_holes+0x124>)
 800ad5c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ad60:	4940      	ldr	r1, [pc, #256]	@ (800ae64 <plug_holes+0x134>)
 800ad62:	483e      	ldr	r0, [pc, #248]	@ (800ae5c <plug_holes+0x12c>)
 800ad64:	f00a f948 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	791b      	ldrb	r3, [r3, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d006      	beq.n	800ad7e <plug_holes+0x4e>
 800ad70:	4b38      	ldr	r3, [pc, #224]	@ (800ae54 <plug_holes+0x124>)
 800ad72:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800ad76:	493c      	ldr	r1, [pc, #240]	@ (800ae68 <plug_holes+0x138>)
 800ad78:	4838      	ldr	r0, [pc, #224]	@ (800ae5c <plug_holes+0x12c>)
 800ad7a:	f00a f93d 	bl	8014ff8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	881b      	ldrh	r3, [r3, #0]
 800ad82:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ad86:	d906      	bls.n	800ad96 <plug_holes+0x66>
 800ad88:	4b32      	ldr	r3, [pc, #200]	@ (800ae54 <plug_holes+0x124>)
 800ad8a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800ad8e:	4937      	ldr	r1, [pc, #220]	@ (800ae6c <plug_holes+0x13c>)
 800ad90:	4832      	ldr	r0, [pc, #200]	@ (800ae5c <plug_holes+0x12c>)
 800ad92:	f00a f931 	bl	8014ff8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	881b      	ldrh	r3, [r3, #0]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7ff ffa4 	bl	800ace8 <ptr_to_mem>
 800ada0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d024      	beq.n	800adf4 <plug_holes+0xc4>
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	791b      	ldrb	r3, [r3, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d120      	bne.n	800adf4 <plug_holes+0xc4>
 800adb2:	4b2b      	ldr	r3, [pc, #172]	@ (800ae60 <plug_holes+0x130>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d01b      	beq.n	800adf4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800adbc:	4b2c      	ldr	r3, [pc, #176]	@ (800ae70 <plug_holes+0x140>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d102      	bne.n	800adcc <plug_holes+0x9c>
      lfree = mem;
 800adc6:	4a2a      	ldr	r2, [pc, #168]	@ (800ae70 <plug_holes+0x140>)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	881a      	ldrh	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	881b      	ldrh	r3, [r3, #0]
 800add8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800addc:	d00a      	beq.n	800adf4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7ff ff80 	bl	800ace8 <ptr_to_mem>
 800ade8:	4604      	mov	r4, r0
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7ff ff8e 	bl	800ad0c <mem_to_ptr>
 800adf0:	4603      	mov	r3, r0
 800adf2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	885b      	ldrh	r3, [r3, #2]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7ff ff75 	bl	800ace8 <ptr_to_mem>
 800adfe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d01f      	beq.n	800ae48 <plug_holes+0x118>
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	791b      	ldrb	r3, [r3, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d11b      	bne.n	800ae48 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ae10:	4b17      	ldr	r3, [pc, #92]	@ (800ae70 <plug_holes+0x140>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d102      	bne.n	800ae20 <plug_holes+0xf0>
      lfree = pmem;
 800ae1a:	4a15      	ldr	r2, [pc, #84]	@ (800ae70 <plug_holes+0x140>)
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	881a      	ldrh	r2, [r3, #0]
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	881b      	ldrh	r3, [r3, #0]
 800ae2c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ae30:	d00a      	beq.n	800ae48 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	881b      	ldrh	r3, [r3, #0]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7ff ff56 	bl	800ace8 <ptr_to_mem>
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	68b8      	ldr	r0, [r7, #8]
 800ae40:	f7ff ff64 	bl	800ad0c <mem_to_ptr>
 800ae44:	4603      	mov	r3, r0
 800ae46:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ae48:	bf00      	nop
 800ae4a:	3714      	adds	r7, #20
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd90      	pop	{r4, r7, pc}
 800ae50:	20008368 	.word	0x20008368
 800ae54:	080170bc 	.word	0x080170bc
 800ae58:	080170ec 	.word	0x080170ec
 800ae5c:	08017104 	.word	0x08017104
 800ae60:	2000836c 	.word	0x2000836c
 800ae64:	0801712c 	.word	0x0801712c
 800ae68:	08017148 	.word	0x08017148
 800ae6c:	08017164 	.word	0x08017164
 800ae70:	20008370 	.word	0x20008370

0800ae74 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ae7a:	4b18      	ldr	r3, [pc, #96]	@ (800aedc <mem_init+0x68>)
 800ae7c:	3303      	adds	r3, #3
 800ae7e:	f023 0303 	bic.w	r3, r3, #3
 800ae82:	461a      	mov	r2, r3
 800ae84:	4b16      	ldr	r3, [pc, #88]	@ (800aee0 <mem_init+0x6c>)
 800ae86:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ae88:	4b15      	ldr	r3, [pc, #84]	@ (800aee0 <mem_init+0x6c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800ae94:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800aea2:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800aea6:	f7ff ff1f 	bl	800ace8 <ptr_to_mem>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	4a0d      	ldr	r2, [pc, #52]	@ (800aee4 <mem_init+0x70>)
 800aeae:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800aeb0:	4b0c      	ldr	r3, [pc, #48]	@ (800aee4 <mem_init+0x70>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800aeb8:	4b0a      	ldr	r3, [pc, #40]	@ (800aee4 <mem_init+0x70>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800aec0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800aec2:	4b08      	ldr	r3, [pc, #32]	@ (800aee4 <mem_init+0x70>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800aeca:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800aecc:	4b04      	ldr	r3, [pc, #16]	@ (800aee0 <mem_init+0x6c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a05      	ldr	r2, [pc, #20]	@ (800aee8 <mem_init+0x74>)
 800aed2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800aed4:	bf00      	nop
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	20005b54 	.word	0x20005b54
 800aee0:	20008368 	.word	0x20008368
 800aee4:	2000836c 	.word	0x2000836c
 800aee8:	20008370 	.word	0x20008370

0800aeec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b086      	sub	sp, #24
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f7ff ff09 	bl	800ad0c <mem_to_ptr>
 800aefa:	4603      	mov	r3, r0
 800aefc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	881b      	ldrh	r3, [r3, #0]
 800af02:	4618      	mov	r0, r3
 800af04:	f7ff fef0 	bl	800ace8 <ptr_to_mem>
 800af08:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	885b      	ldrh	r3, [r3, #2]
 800af0e:	4618      	mov	r0, r3
 800af10:	f7ff feea 	bl	800ace8 <ptr_to_mem>
 800af14:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	881b      	ldrh	r3, [r3, #0]
 800af1a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800af1e:	d818      	bhi.n	800af52 <mem_link_valid+0x66>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	885b      	ldrh	r3, [r3, #2]
 800af24:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800af28:	d813      	bhi.n	800af52 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af2e:	8afa      	ldrh	r2, [r7, #22]
 800af30:	429a      	cmp	r2, r3
 800af32:	d004      	beq.n	800af3e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	881b      	ldrh	r3, [r3, #0]
 800af38:	8afa      	ldrh	r2, [r7, #22]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d109      	bne.n	800af52 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800af3e:	4b08      	ldr	r3, [pc, #32]	@ (800af60 <mem_link_valid+0x74>)
 800af40:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af42:	693a      	ldr	r2, [r7, #16]
 800af44:	429a      	cmp	r2, r3
 800af46:	d006      	beq.n	800af56 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	885b      	ldrh	r3, [r3, #2]
 800af4c:	8afa      	ldrh	r2, [r7, #22]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d001      	beq.n	800af56 <mem_link_valid+0x6a>
    return 0;
 800af52:	2300      	movs	r3, #0
 800af54:	e000      	b.n	800af58 <mem_link_valid+0x6c>
  }
  return 1;
 800af56:	2301      	movs	r3, #1
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3718      	adds	r7, #24
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	2000836c 	.word	0x2000836c

0800af64 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d04c      	beq.n	800b00c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f003 0303 	and.w	r3, r3, #3
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d007      	beq.n	800af8c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800af7c:	4b25      	ldr	r3, [pc, #148]	@ (800b014 <mem_free+0xb0>)
 800af7e:	f240 2273 	movw	r2, #627	@ 0x273
 800af82:	4925      	ldr	r1, [pc, #148]	@ (800b018 <mem_free+0xb4>)
 800af84:	4825      	ldr	r0, [pc, #148]	@ (800b01c <mem_free+0xb8>)
 800af86:	f00a f837 	bl	8014ff8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800af8a:	e040      	b.n	800b00e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3b08      	subs	r3, #8
 800af90:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800af92:	4b23      	ldr	r3, [pc, #140]	@ (800b020 <mem_free+0xbc>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d306      	bcc.n	800afaa <mem_free+0x46>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f103 020c 	add.w	r2, r3, #12
 800afa2:	4b20      	ldr	r3, [pc, #128]	@ (800b024 <mem_free+0xc0>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d907      	bls.n	800afba <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800afaa:	4b1a      	ldr	r3, [pc, #104]	@ (800b014 <mem_free+0xb0>)
 800afac:	f240 227f 	movw	r2, #639	@ 0x27f
 800afb0:	491d      	ldr	r1, [pc, #116]	@ (800b028 <mem_free+0xc4>)
 800afb2:	481a      	ldr	r0, [pc, #104]	@ (800b01c <mem_free+0xb8>)
 800afb4:	f00a f820 	bl	8014ff8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800afb8:	e029      	b.n	800b00e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	791b      	ldrb	r3, [r3, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d107      	bne.n	800afd2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800afc2:	4b14      	ldr	r3, [pc, #80]	@ (800b014 <mem_free+0xb0>)
 800afc4:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800afc8:	4918      	ldr	r1, [pc, #96]	@ (800b02c <mem_free+0xc8>)
 800afca:	4814      	ldr	r0, [pc, #80]	@ (800b01c <mem_free+0xb8>)
 800afcc:	f00a f814 	bl	8014ff8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800afd0:	e01d      	b.n	800b00e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f7ff ff8a 	bl	800aeec <mem_link_valid>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d107      	bne.n	800afee <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800afde:	4b0d      	ldr	r3, [pc, #52]	@ (800b014 <mem_free+0xb0>)
 800afe0:	f240 2295 	movw	r2, #661	@ 0x295
 800afe4:	4912      	ldr	r1, [pc, #72]	@ (800b030 <mem_free+0xcc>)
 800afe6:	480d      	ldr	r0, [pc, #52]	@ (800b01c <mem_free+0xb8>)
 800afe8:	f00a f806 	bl	8014ff8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800afec:	e00f      	b.n	800b00e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2200      	movs	r2, #0
 800aff2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800aff4:	4b0f      	ldr	r3, [pc, #60]	@ (800b034 <mem_free+0xd0>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	429a      	cmp	r2, r3
 800affc:	d202      	bcs.n	800b004 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800affe:	4a0d      	ldr	r2, [pc, #52]	@ (800b034 <mem_free+0xd0>)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	f7ff fe93 	bl	800ad30 <plug_holes>
 800b00a:	e000      	b.n	800b00e <mem_free+0xaa>
    return;
 800b00c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	080170bc 	.word	0x080170bc
 800b018:	08017190 	.word	0x08017190
 800b01c:	08017104 	.word	0x08017104
 800b020:	20008368 	.word	0x20008368
 800b024:	2000836c 	.word	0x2000836c
 800b028:	080171b4 	.word	0x080171b4
 800b02c:	080171d0 	.word	0x080171d0
 800b030:	080171f8 	.word	0x080171f8
 800b034:	20008370 	.word	0x20008370

0800b038 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b088      	sub	sp, #32
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	460b      	mov	r3, r1
 800b042:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b044:	887b      	ldrh	r3, [r7, #2]
 800b046:	3303      	adds	r3, #3
 800b048:	b29b      	uxth	r3, r3
 800b04a:	f023 0303 	bic.w	r3, r3, #3
 800b04e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b050:	8bfb      	ldrh	r3, [r7, #30]
 800b052:	2b0b      	cmp	r3, #11
 800b054:	d801      	bhi.n	800b05a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b056:	230c      	movs	r3, #12
 800b058:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b05a:	8bfb      	ldrh	r3, [r7, #30]
 800b05c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b060:	d803      	bhi.n	800b06a <mem_trim+0x32>
 800b062:	8bfa      	ldrh	r2, [r7, #30]
 800b064:	887b      	ldrh	r3, [r7, #2]
 800b066:	429a      	cmp	r2, r3
 800b068:	d201      	bcs.n	800b06e <mem_trim+0x36>
    return NULL;
 800b06a:	2300      	movs	r3, #0
 800b06c:	e0cc      	b.n	800b208 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b06e:	4b68      	ldr	r3, [pc, #416]	@ (800b210 <mem_trim+0x1d8>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	429a      	cmp	r2, r3
 800b076:	d304      	bcc.n	800b082 <mem_trim+0x4a>
 800b078:	4b66      	ldr	r3, [pc, #408]	@ (800b214 <mem_trim+0x1dc>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d306      	bcc.n	800b090 <mem_trim+0x58>
 800b082:	4b65      	ldr	r3, [pc, #404]	@ (800b218 <mem_trim+0x1e0>)
 800b084:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b088:	4964      	ldr	r1, [pc, #400]	@ (800b21c <mem_trim+0x1e4>)
 800b08a:	4865      	ldr	r0, [pc, #404]	@ (800b220 <mem_trim+0x1e8>)
 800b08c:	f009 ffb4 	bl	8014ff8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b090:	4b5f      	ldr	r3, [pc, #380]	@ (800b210 <mem_trim+0x1d8>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	429a      	cmp	r2, r3
 800b098:	d304      	bcc.n	800b0a4 <mem_trim+0x6c>
 800b09a:	4b5e      	ldr	r3, [pc, #376]	@ (800b214 <mem_trim+0x1dc>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d301      	bcc.n	800b0a8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	e0af      	b.n	800b208 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	3b08      	subs	r3, #8
 800b0ac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b0ae:	69b8      	ldr	r0, [r7, #24]
 800b0b0:	f7ff fe2c 	bl	800ad0c <mem_to_ptr>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	881a      	ldrh	r2, [r3, #0]
 800b0bc:	8afb      	ldrh	r3, [r7, #22]
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	3b08      	subs	r3, #8
 800b0c4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b0c6:	8bfa      	ldrh	r2, [r7, #30]
 800b0c8:	8abb      	ldrh	r3, [r7, #20]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d906      	bls.n	800b0dc <mem_trim+0xa4>
 800b0ce:	4b52      	ldr	r3, [pc, #328]	@ (800b218 <mem_trim+0x1e0>)
 800b0d0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800b0d4:	4953      	ldr	r1, [pc, #332]	@ (800b224 <mem_trim+0x1ec>)
 800b0d6:	4852      	ldr	r0, [pc, #328]	@ (800b220 <mem_trim+0x1e8>)
 800b0d8:	f009 ff8e 	bl	8014ff8 <iprintf>
  if (newsize > size) {
 800b0dc:	8bfa      	ldrh	r2, [r7, #30]
 800b0de:	8abb      	ldrh	r3, [r7, #20]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d901      	bls.n	800b0e8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	e08f      	b.n	800b208 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800b0e8:	8bfa      	ldrh	r2, [r7, #30]
 800b0ea:	8abb      	ldrh	r3, [r7, #20]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d101      	bne.n	800b0f4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	e089      	b.n	800b208 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	881b      	ldrh	r3, [r3, #0]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7ff fdf5 	bl	800ace8 <ptr_to_mem>
 800b0fe:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	791b      	ldrb	r3, [r3, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d13f      	bne.n	800b188 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	881b      	ldrh	r3, [r3, #0]
 800b10c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b110:	d106      	bne.n	800b120 <mem_trim+0xe8>
 800b112:	4b41      	ldr	r3, [pc, #260]	@ (800b218 <mem_trim+0x1e0>)
 800b114:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800b118:	4943      	ldr	r1, [pc, #268]	@ (800b228 <mem_trim+0x1f0>)
 800b11a:	4841      	ldr	r0, [pc, #260]	@ (800b220 <mem_trim+0x1e8>)
 800b11c:	f009 ff6c 	bl	8014ff8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b126:	8afa      	ldrh	r2, [r7, #22]
 800b128:	8bfb      	ldrh	r3, [r7, #30]
 800b12a:	4413      	add	r3, r2
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	3308      	adds	r3, #8
 800b130:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b132:	4b3e      	ldr	r3, [pc, #248]	@ (800b22c <mem_trim+0x1f4>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	693a      	ldr	r2, [r7, #16]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d106      	bne.n	800b14a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800b13c:	89fb      	ldrh	r3, [r7, #14]
 800b13e:	4618      	mov	r0, r3
 800b140:	f7ff fdd2 	bl	800ace8 <ptr_to_mem>
 800b144:	4603      	mov	r3, r0
 800b146:	4a39      	ldr	r2, [pc, #228]	@ (800b22c <mem_trim+0x1f4>)
 800b148:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b14a:	89fb      	ldrh	r3, [r7, #14]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7ff fdcb 	bl	800ace8 <ptr_to_mem>
 800b152:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	2200      	movs	r2, #0
 800b158:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	89ba      	ldrh	r2, [r7, #12]
 800b15e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	8afa      	ldrh	r2, [r7, #22]
 800b164:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	89fa      	ldrh	r2, [r7, #14]
 800b16a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	881b      	ldrh	r3, [r3, #0]
 800b170:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b174:	d047      	beq.n	800b206 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	881b      	ldrh	r3, [r3, #0]
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7ff fdb4 	bl	800ace8 <ptr_to_mem>
 800b180:	4602      	mov	r2, r0
 800b182:	89fb      	ldrh	r3, [r7, #14]
 800b184:	8053      	strh	r3, [r2, #2]
 800b186:	e03e      	b.n	800b206 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b188:	8bfb      	ldrh	r3, [r7, #30]
 800b18a:	f103 0214 	add.w	r2, r3, #20
 800b18e:	8abb      	ldrh	r3, [r7, #20]
 800b190:	429a      	cmp	r2, r3
 800b192:	d838      	bhi.n	800b206 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b194:	8afa      	ldrh	r2, [r7, #22]
 800b196:	8bfb      	ldrh	r3, [r7, #30]
 800b198:	4413      	add	r3, r2
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	3308      	adds	r3, #8
 800b19e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	881b      	ldrh	r3, [r3, #0]
 800b1a4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b1a8:	d106      	bne.n	800b1b8 <mem_trim+0x180>
 800b1aa:	4b1b      	ldr	r3, [pc, #108]	@ (800b218 <mem_trim+0x1e0>)
 800b1ac:	f240 3216 	movw	r2, #790	@ 0x316
 800b1b0:	491d      	ldr	r1, [pc, #116]	@ (800b228 <mem_trim+0x1f0>)
 800b1b2:	481b      	ldr	r0, [pc, #108]	@ (800b220 <mem_trim+0x1e8>)
 800b1b4:	f009 ff20 	bl	8014ff8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b1b8:	89fb      	ldrh	r3, [r7, #14]
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7ff fd94 	bl	800ace8 <ptr_to_mem>
 800b1c0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b1c2:	4b1a      	ldr	r3, [pc, #104]	@ (800b22c <mem_trim+0x1f4>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d202      	bcs.n	800b1d2 <mem_trim+0x19a>
      lfree = mem2;
 800b1cc:	4a17      	ldr	r2, [pc, #92]	@ (800b22c <mem_trim+0x1f4>)
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	881a      	ldrh	r2, [r3, #0]
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	8afa      	ldrh	r2, [r7, #22]
 800b1e4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	89fa      	ldrh	r2, [r7, #14]
 800b1ea:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b1f4:	d007      	beq.n	800b206 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	881b      	ldrh	r3, [r3, #0]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7ff fd74 	bl	800ace8 <ptr_to_mem>
 800b200:	4602      	mov	r2, r0
 800b202:	89fb      	ldrh	r3, [r7, #14]
 800b204:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800b206:	687b      	ldr	r3, [r7, #4]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3720      	adds	r7, #32
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	20008368 	.word	0x20008368
 800b214:	2000836c 	.word	0x2000836c
 800b218:	080170bc 	.word	0x080170bc
 800b21c:	0801722c 	.word	0x0801722c
 800b220:	08017104 	.word	0x08017104
 800b224:	08017244 	.word	0x08017244
 800b228:	08017264 	.word	0x08017264
 800b22c:	20008370 	.word	0x20008370

0800b230 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b088      	sub	sp, #32
 800b234:	af00      	add	r7, sp, #0
 800b236:	4603      	mov	r3, r0
 800b238:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b23a:	88fb      	ldrh	r3, [r7, #6]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d101      	bne.n	800b244 <mem_malloc+0x14>
    return NULL;
 800b240:	2300      	movs	r3, #0
 800b242:	e0d9      	b.n	800b3f8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b244:	88fb      	ldrh	r3, [r7, #6]
 800b246:	3303      	adds	r3, #3
 800b248:	b29b      	uxth	r3, r3
 800b24a:	f023 0303 	bic.w	r3, r3, #3
 800b24e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b250:	8bbb      	ldrh	r3, [r7, #28]
 800b252:	2b0b      	cmp	r3, #11
 800b254:	d801      	bhi.n	800b25a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b256:	230c      	movs	r3, #12
 800b258:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b25a:	8bbb      	ldrh	r3, [r7, #28]
 800b25c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b260:	d803      	bhi.n	800b26a <mem_malloc+0x3a>
 800b262:	8bba      	ldrh	r2, [r7, #28]
 800b264:	88fb      	ldrh	r3, [r7, #6]
 800b266:	429a      	cmp	r2, r3
 800b268:	d201      	bcs.n	800b26e <mem_malloc+0x3e>
    return NULL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	e0c4      	b.n	800b3f8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b26e:	4b64      	ldr	r3, [pc, #400]	@ (800b400 <mem_malloc+0x1d0>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff fd4a 	bl	800ad0c <mem_to_ptr>
 800b278:	4603      	mov	r3, r0
 800b27a:	83fb      	strh	r3, [r7, #30]
 800b27c:	e0b4      	b.n	800b3e8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b27e:	8bfb      	ldrh	r3, [r7, #30]
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff fd31 	bl	800ace8 <ptr_to_mem>
 800b286:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	791b      	ldrb	r3, [r3, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f040 80a4 	bne.w	800b3da <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	8bfb      	ldrh	r3, [r7, #30]
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	f1a3 0208 	sub.w	r2, r3, #8
 800b2a0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	f0c0 8099 	bcc.w	800b3da <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	8bfb      	ldrh	r3, [r7, #30]
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	f1a3 0208 	sub.w	r2, r3, #8
 800b2b6:	8bbb      	ldrh	r3, [r7, #28]
 800b2b8:	3314      	adds	r3, #20
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d333      	bcc.n	800b326 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b2be:	8bfa      	ldrh	r2, [r7, #30]
 800b2c0:	8bbb      	ldrh	r3, [r7, #28]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	3308      	adds	r3, #8
 800b2c8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b2ca:	8a7b      	ldrh	r3, [r7, #18]
 800b2cc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b2d0:	d106      	bne.n	800b2e0 <mem_malloc+0xb0>
 800b2d2:	4b4c      	ldr	r3, [pc, #304]	@ (800b404 <mem_malloc+0x1d4>)
 800b2d4:	f240 3287 	movw	r2, #903	@ 0x387
 800b2d8:	494b      	ldr	r1, [pc, #300]	@ (800b408 <mem_malloc+0x1d8>)
 800b2da:	484c      	ldr	r0, [pc, #304]	@ (800b40c <mem_malloc+0x1dc>)
 800b2dc:	f009 fe8c 	bl	8014ff8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b2e0:	8a7b      	ldrh	r3, [r7, #18]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7ff fd00 	bl	800ace8 <ptr_to_mem>
 800b2e8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	881a      	ldrh	r2, [r3, #0]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	8bfa      	ldrh	r2, [r7, #30]
 800b2fc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	8a7a      	ldrh	r2, [r7, #18]
 800b302:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	2201      	movs	r2, #1
 800b308:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	881b      	ldrh	r3, [r3, #0]
 800b30e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b312:	d00b      	beq.n	800b32c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	881b      	ldrh	r3, [r3, #0]
 800b318:	4618      	mov	r0, r3
 800b31a:	f7ff fce5 	bl	800ace8 <ptr_to_mem>
 800b31e:	4602      	mov	r2, r0
 800b320:	8a7b      	ldrh	r3, [r7, #18]
 800b322:	8053      	strh	r3, [r2, #2]
 800b324:	e002      	b.n	800b32c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	2201      	movs	r2, #1
 800b32a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b32c:	4b34      	ldr	r3, [pc, #208]	@ (800b400 <mem_malloc+0x1d0>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	697a      	ldr	r2, [r7, #20]
 800b332:	429a      	cmp	r2, r3
 800b334:	d127      	bne.n	800b386 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b336:	4b32      	ldr	r3, [pc, #200]	@ (800b400 <mem_malloc+0x1d0>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b33c:	e005      	b.n	800b34a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	4618      	mov	r0, r3
 800b344:	f7ff fcd0 	bl	800ace8 <ptr_to_mem>
 800b348:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	791b      	ldrb	r3, [r3, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d004      	beq.n	800b35c <mem_malloc+0x12c>
 800b352:	4b2f      	ldr	r3, [pc, #188]	@ (800b410 <mem_malloc+0x1e0>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	69ba      	ldr	r2, [r7, #24]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d1f0      	bne.n	800b33e <mem_malloc+0x10e>
          }
          lfree = cur;
 800b35c:	4a28      	ldr	r2, [pc, #160]	@ (800b400 <mem_malloc+0x1d0>)
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b362:	4b27      	ldr	r3, [pc, #156]	@ (800b400 <mem_malloc+0x1d0>)
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	4b2a      	ldr	r3, [pc, #168]	@ (800b410 <mem_malloc+0x1e0>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d00b      	beq.n	800b386 <mem_malloc+0x156>
 800b36e:	4b24      	ldr	r3, [pc, #144]	@ (800b400 <mem_malloc+0x1d0>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	791b      	ldrb	r3, [r3, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d006      	beq.n	800b386 <mem_malloc+0x156>
 800b378:	4b22      	ldr	r3, [pc, #136]	@ (800b404 <mem_malloc+0x1d4>)
 800b37a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800b37e:	4925      	ldr	r1, [pc, #148]	@ (800b414 <mem_malloc+0x1e4>)
 800b380:	4822      	ldr	r0, [pc, #136]	@ (800b40c <mem_malloc+0x1dc>)
 800b382:	f009 fe39 	bl	8014ff8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b386:	8bba      	ldrh	r2, [r7, #28]
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	4413      	add	r3, r2
 800b38c:	3308      	adds	r3, #8
 800b38e:	4a20      	ldr	r2, [pc, #128]	@ (800b410 <mem_malloc+0x1e0>)
 800b390:	6812      	ldr	r2, [r2, #0]
 800b392:	4293      	cmp	r3, r2
 800b394:	d906      	bls.n	800b3a4 <mem_malloc+0x174>
 800b396:	4b1b      	ldr	r3, [pc, #108]	@ (800b404 <mem_malloc+0x1d4>)
 800b398:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800b39c:	491e      	ldr	r1, [pc, #120]	@ (800b418 <mem_malloc+0x1e8>)
 800b39e:	481b      	ldr	r0, [pc, #108]	@ (800b40c <mem_malloc+0x1dc>)
 800b3a0:	f009 fe2a 	bl	8014ff8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	f003 0303 	and.w	r3, r3, #3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d006      	beq.n	800b3bc <mem_malloc+0x18c>
 800b3ae:	4b15      	ldr	r3, [pc, #84]	@ (800b404 <mem_malloc+0x1d4>)
 800b3b0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800b3b4:	4919      	ldr	r1, [pc, #100]	@ (800b41c <mem_malloc+0x1ec>)
 800b3b6:	4815      	ldr	r0, [pc, #84]	@ (800b40c <mem_malloc+0x1dc>)
 800b3b8:	f009 fe1e 	bl	8014ff8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	f003 0303 	and.w	r3, r3, #3
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d006      	beq.n	800b3d4 <mem_malloc+0x1a4>
 800b3c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b404 <mem_malloc+0x1d4>)
 800b3c8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800b3cc:	4914      	ldr	r1, [pc, #80]	@ (800b420 <mem_malloc+0x1f0>)
 800b3ce:	480f      	ldr	r0, [pc, #60]	@ (800b40c <mem_malloc+0x1dc>)
 800b3d0:	f009 fe12 	bl	8014ff8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	3308      	adds	r3, #8
 800b3d8:	e00e      	b.n	800b3f8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b3da:	8bfb      	ldrh	r3, [r7, #30]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7ff fc83 	bl	800ace8 <ptr_to_mem>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	881b      	ldrh	r3, [r3, #0]
 800b3e6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b3e8:	8bfa      	ldrh	r2, [r7, #30]
 800b3ea:	8bbb      	ldrh	r3, [r7, #28]
 800b3ec:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	f4ff af44 	bcc.w	800b27e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3720      	adds	r7, #32
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	20008370 	.word	0x20008370
 800b404:	080170bc 	.word	0x080170bc
 800b408:	08017264 	.word	0x08017264
 800b40c:	08017104 	.word	0x08017104
 800b410:	2000836c 	.word	0x2000836c
 800b414:	08017278 	.word	0x08017278
 800b418:	08017294 	.word	0x08017294
 800b41c:	080172c4 	.word	0x080172c4
 800b420:	080172f4 	.word	0x080172f4

0800b424 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	2200      	movs	r2, #0
 800b432:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	3303      	adds	r3, #3
 800b43a:	f023 0303 	bic.w	r3, r3, #3
 800b43e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b440:	2300      	movs	r3, #0
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	e011      	b.n	800b46a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	68ba      	ldr	r2, [r7, #8]
 800b456:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	881b      	ldrh	r3, [r3, #0]
 800b45c:	461a      	mov	r2, r3
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	4413      	add	r3, r2
 800b462:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	3301      	adds	r3, #1
 800b468:	60fb      	str	r3, [r7, #12]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	885b      	ldrh	r3, [r3, #2]
 800b46e:	461a      	mov	r2, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	4293      	cmp	r3, r2
 800b474:	dbe7      	blt.n	800b446 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b476:	bf00      	nop
 800b478:	bf00      	nop
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b48a:	2300      	movs	r3, #0
 800b48c:	80fb      	strh	r3, [r7, #6]
 800b48e:	e009      	b.n	800b4a4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b490:	88fb      	ldrh	r3, [r7, #6]
 800b492:	4a08      	ldr	r2, [pc, #32]	@ (800b4b4 <memp_init+0x30>)
 800b494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b498:	4618      	mov	r0, r3
 800b49a:	f7ff ffc3 	bl	800b424 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b49e:	88fb      	ldrh	r3, [r7, #6]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	80fb      	strh	r3, [r7, #6]
 800b4a4:	88fb      	ldrh	r3, [r7, #6]
 800b4a6:	2b08      	cmp	r3, #8
 800b4a8:	d9f2      	bls.n	800b490 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b4aa:	bf00      	nop
 800b4ac:	bf00      	nop
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	08019ae0 	.word	0x08019ae0

0800b4b8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d012      	beq.n	800b4f4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	6812      	ldr	r2, [r2, #0]
 800b4d6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f003 0303 	and.w	r3, r3, #3
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d006      	beq.n	800b4f0 <do_memp_malloc_pool+0x38>
 800b4e2:	4b07      	ldr	r3, [pc, #28]	@ (800b500 <do_memp_malloc_pool+0x48>)
 800b4e4:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800b4e8:	4906      	ldr	r1, [pc, #24]	@ (800b504 <do_memp_malloc_pool+0x4c>)
 800b4ea:	4807      	ldr	r0, [pc, #28]	@ (800b508 <do_memp_malloc_pool+0x50>)
 800b4ec:	f009 fd84 	bl	8014ff8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	e000      	b.n	800b4f6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	08017318 	.word	0x08017318
 800b504:	08017348 	.word	0x08017348
 800b508:	0801736c 	.word	0x0801736c

0800b50c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d106      	bne.n	800b528 <memp_malloc_pool+0x1c>
 800b51a:	4b0a      	ldr	r3, [pc, #40]	@ (800b544 <memp_malloc_pool+0x38>)
 800b51c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800b520:	4909      	ldr	r1, [pc, #36]	@ (800b548 <memp_malloc_pool+0x3c>)
 800b522:	480a      	ldr	r0, [pc, #40]	@ (800b54c <memp_malloc_pool+0x40>)
 800b524:	f009 fd68 	bl	8014ff8 <iprintf>
  if (desc == NULL) {
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <memp_malloc_pool+0x26>
    return NULL;
 800b52e:	2300      	movs	r3, #0
 800b530:	e003      	b.n	800b53a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7ff ffc0 	bl	800b4b8 <do_memp_malloc_pool>
 800b538:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	08017318 	.word	0x08017318
 800b548:	08017394 	.word	0x08017394
 800b54c:	0801736c 	.word	0x0801736c

0800b550 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	4603      	mov	r3, r0
 800b558:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b55a:	79fb      	ldrb	r3, [r7, #7]
 800b55c:	2b08      	cmp	r3, #8
 800b55e:	d908      	bls.n	800b572 <memp_malloc+0x22>
 800b560:	4b0a      	ldr	r3, [pc, #40]	@ (800b58c <memp_malloc+0x3c>)
 800b562:	f240 1257 	movw	r2, #343	@ 0x157
 800b566:	490a      	ldr	r1, [pc, #40]	@ (800b590 <memp_malloc+0x40>)
 800b568:	480a      	ldr	r0, [pc, #40]	@ (800b594 <memp_malloc+0x44>)
 800b56a:	f009 fd45 	bl	8014ff8 <iprintf>
 800b56e:	2300      	movs	r3, #0
 800b570:	e008      	b.n	800b584 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b572:	79fb      	ldrb	r3, [r7, #7]
 800b574:	4a08      	ldr	r2, [pc, #32]	@ (800b598 <memp_malloc+0x48>)
 800b576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7ff ff9c 	bl	800b4b8 <do_memp_malloc_pool>
 800b580:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b582:	68fb      	ldr	r3, [r7, #12]
}
 800b584:	4618      	mov	r0, r3
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	08017318 	.word	0x08017318
 800b590:	080173a8 	.word	0x080173a8
 800b594:	0801736c 	.word	0x0801736c
 800b598:	08019ae0 	.word	0x08019ae0

0800b59c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	f003 0303 	and.w	r3, r3, #3
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d006      	beq.n	800b5be <do_memp_free_pool+0x22>
 800b5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b5dc <do_memp_free_pool+0x40>)
 800b5b2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800b5b6:	490a      	ldr	r1, [pc, #40]	@ (800b5e0 <do_memp_free_pool+0x44>)
 800b5b8:	480a      	ldr	r0, [pc, #40]	@ (800b5e4 <do_memp_free_pool+0x48>)
 800b5ba:	f009 fd1d 	bl	8014ff8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	68fa      	ldr	r2, [r7, #12]
 800b5d2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b5d4:	bf00      	nop
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	08017318 	.word	0x08017318
 800b5e0:	080173c8 	.word	0x080173c8
 800b5e4:	0801736c 	.word	0x0801736c

0800b5e8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d106      	bne.n	800b606 <memp_free_pool+0x1e>
 800b5f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b624 <memp_free_pool+0x3c>)
 800b5fa:	f240 1295 	movw	r2, #405	@ 0x195
 800b5fe:	490a      	ldr	r1, [pc, #40]	@ (800b628 <memp_free_pool+0x40>)
 800b600:	480a      	ldr	r0, [pc, #40]	@ (800b62c <memp_free_pool+0x44>)
 800b602:	f009 fcf9 	bl	8014ff8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d007      	beq.n	800b61c <memp_free_pool+0x34>
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d004      	beq.n	800b61c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7ff ffc1 	bl	800b59c <do_memp_free_pool>
 800b61a:	e000      	b.n	800b61e <memp_free_pool+0x36>
    return;
 800b61c:	bf00      	nop
}
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	08017318 	.word	0x08017318
 800b628:	08017394 	.word	0x08017394
 800b62c:	0801736c 	.word	0x0801736c

0800b630 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	4603      	mov	r3, r0
 800b638:	6039      	str	r1, [r7, #0]
 800b63a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b63c:	79fb      	ldrb	r3, [r7, #7]
 800b63e:	2b08      	cmp	r3, #8
 800b640:	d907      	bls.n	800b652 <memp_free+0x22>
 800b642:	4b0c      	ldr	r3, [pc, #48]	@ (800b674 <memp_free+0x44>)
 800b644:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800b648:	490b      	ldr	r1, [pc, #44]	@ (800b678 <memp_free+0x48>)
 800b64a:	480c      	ldr	r0, [pc, #48]	@ (800b67c <memp_free+0x4c>)
 800b64c:	f009 fcd4 	bl	8014ff8 <iprintf>
 800b650:	e00c      	b.n	800b66c <memp_free+0x3c>

  if (mem == NULL) {
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d008      	beq.n	800b66a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b658:	79fb      	ldrb	r3, [r7, #7]
 800b65a:	4a09      	ldr	r2, [pc, #36]	@ (800b680 <memp_free+0x50>)
 800b65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	4618      	mov	r0, r3
 800b664:	f7ff ff9a 	bl	800b59c <do_memp_free_pool>
 800b668:	e000      	b.n	800b66c <memp_free+0x3c>
    return;
 800b66a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	08017318 	.word	0x08017318
 800b678:	080173e8 	.word	0x080173e8
 800b67c:	0801736c 	.word	0x0801736c
 800b680:	08019ae0 	.word	0x08019ae0

0800b684 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b684:	b480      	push	{r7}
 800b686:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b688:	bf00      	nop
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
	...

0800b694 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
 800b6a0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d108      	bne.n	800b6ba <netif_add+0x26>
 800b6a8:	4b57      	ldr	r3, [pc, #348]	@ (800b808 <netif_add+0x174>)
 800b6aa:	f240 1227 	movw	r2, #295	@ 0x127
 800b6ae:	4957      	ldr	r1, [pc, #348]	@ (800b80c <netif_add+0x178>)
 800b6b0:	4857      	ldr	r0, [pc, #348]	@ (800b810 <netif_add+0x17c>)
 800b6b2:	f009 fca1 	bl	8014ff8 <iprintf>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	e0a2      	b.n	800b800 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d108      	bne.n	800b6d2 <netif_add+0x3e>
 800b6c0:	4b51      	ldr	r3, [pc, #324]	@ (800b808 <netif_add+0x174>)
 800b6c2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800b6c6:	4953      	ldr	r1, [pc, #332]	@ (800b814 <netif_add+0x180>)
 800b6c8:	4851      	ldr	r0, [pc, #324]	@ (800b810 <netif_add+0x17c>)
 800b6ca:	f009 fc95 	bl	8014ff8 <iprintf>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	e096      	b.n	800b800 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d101      	bne.n	800b6dc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b6d8:	4b4f      	ldr	r3, [pc, #316]	@ (800b818 <netif_add+0x184>)
 800b6da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d101      	bne.n	800b6e6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b6e2:	4b4d      	ldr	r3, [pc, #308]	@ (800b818 <netif_add+0x184>)
 800b6e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d101      	bne.n	800b6f0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b6ec:	4b4a      	ldr	r3, [pc, #296]	@ (800b818 <netif_add+0x184>)
 800b6ee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	4a45      	ldr	r2, [pc, #276]	@ (800b81c <netif_add+0x188>)
 800b706:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2200      	movs	r2, #0
 800b70c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2200      	movs	r2, #0
 800b712:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6a3a      	ldr	r2, [r7, #32]
 800b720:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b722:	4b3f      	ldr	r3, [pc, #252]	@ (800b820 <netif_add+0x18c>)
 800b724:	781a      	ldrb	r2, [r3, #0]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b730:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	68b9      	ldr	r1, [r7, #8]
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f000 f913 	bl	800b964 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	4798      	blx	r3
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <netif_add+0xba>
    return NULL;
 800b74a:	2300      	movs	r3, #0
 800b74c:	e058      	b.n	800b800 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b754:	2bff      	cmp	r3, #255	@ 0xff
 800b756:	d103      	bne.n	800b760 <netif_add+0xcc>
        netif->num = 0;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800b760:	2300      	movs	r3, #0
 800b762:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b764:	4b2f      	ldr	r3, [pc, #188]	@ (800b824 <netif_add+0x190>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	617b      	str	r3, [r7, #20]
 800b76a:	e02b      	b.n	800b7c4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b76c:	697a      	ldr	r2, [r7, #20]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	429a      	cmp	r2, r3
 800b772:	d106      	bne.n	800b782 <netif_add+0xee>
 800b774:	4b24      	ldr	r3, [pc, #144]	@ (800b808 <netif_add+0x174>)
 800b776:	f240 128b 	movw	r2, #395	@ 0x18b
 800b77a:	492b      	ldr	r1, [pc, #172]	@ (800b828 <netif_add+0x194>)
 800b77c:	4824      	ldr	r0, [pc, #144]	@ (800b810 <netif_add+0x17c>)
 800b77e:	f009 fc3b 	bl	8014ff8 <iprintf>
        num_netifs++;
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	3301      	adds	r3, #1
 800b786:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	2bff      	cmp	r3, #255	@ 0xff
 800b78c:	dd06      	ble.n	800b79c <netif_add+0x108>
 800b78e:	4b1e      	ldr	r3, [pc, #120]	@ (800b808 <netif_add+0x174>)
 800b790:	f240 128d 	movw	r2, #397	@ 0x18d
 800b794:	4925      	ldr	r1, [pc, #148]	@ (800b82c <netif_add+0x198>)
 800b796:	481e      	ldr	r0, [pc, #120]	@ (800b810 <netif_add+0x17c>)
 800b798:	f009 fc2e 	bl	8014ff8 <iprintf>
        if (netif2->num == netif->num) {
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d108      	bne.n	800b7be <netif_add+0x12a>
          netif->num++;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	b2da      	uxtb	r2, r3
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800b7bc:	e005      	b.n	800b7ca <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	617b      	str	r3, [r7, #20]
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1d0      	bne.n	800b76c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1be      	bne.n	800b74e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b7d6:	2bfe      	cmp	r3, #254	@ 0xfe
 800b7d8:	d103      	bne.n	800b7e2 <netif_add+0x14e>
    netif_num = 0;
 800b7da:	4b11      	ldr	r3, [pc, #68]	@ (800b820 <netif_add+0x18c>)
 800b7dc:	2200      	movs	r2, #0
 800b7de:	701a      	strb	r2, [r3, #0]
 800b7e0:	e006      	b.n	800b7f0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	4b0c      	ldr	r3, [pc, #48]	@ (800b820 <netif_add+0x18c>)
 800b7ee:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b7f0:	4b0c      	ldr	r3, [pc, #48]	@ (800b824 <netif_add+0x190>)
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b7f8:	4a0a      	ldr	r2, [pc, #40]	@ (800b824 <netif_add+0x190>)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3718      	adds	r7, #24
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	08017404 	.word	0x08017404
 800b80c:	08017498 	.word	0x08017498
 800b810:	08017454 	.word	0x08017454
 800b814:	080174b4 	.word	0x080174b4
 800b818:	08019b44 	.word	0x08019b44
 800b81c:	0800bc3f 	.word	0x0800bc3f
 800b820:	2000b268 	.word	0x2000b268
 800b824:	2000b260 	.word	0x2000b260
 800b828:	080174d8 	.word	0x080174d8
 800b82c:	080174ec 	.word	0x080174ec

0800b830 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b83a:	6839      	ldr	r1, [r7, #0]
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f002 fbe7 	bl	800e010 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b842:	6839      	ldr	r1, [r7, #0]
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f006 ffe1 	bl	801280c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b84a:	bf00      	nop
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
	...

0800b854 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d106      	bne.n	800b874 <netif_do_set_ipaddr+0x20>
 800b866:	4b1d      	ldr	r3, [pc, #116]	@ (800b8dc <netif_do_set_ipaddr+0x88>)
 800b868:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800b86c:	491c      	ldr	r1, [pc, #112]	@ (800b8e0 <netif_do_set_ipaddr+0x8c>)
 800b86e:	481d      	ldr	r0, [pc, #116]	@ (800b8e4 <netif_do_set_ipaddr+0x90>)
 800b870:	f009 fbc2 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d106      	bne.n	800b888 <netif_do_set_ipaddr+0x34>
 800b87a:	4b18      	ldr	r3, [pc, #96]	@ (800b8dc <netif_do_set_ipaddr+0x88>)
 800b87c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800b880:	4917      	ldr	r1, [pc, #92]	@ (800b8e0 <netif_do_set_ipaddr+0x8c>)
 800b882:	4818      	ldr	r0, [pc, #96]	@ (800b8e4 <netif_do_set_ipaddr+0x90>)
 800b884:	f009 fbb8 	bl	8014ff8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	3304      	adds	r3, #4
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	429a      	cmp	r2, r3
 800b894:	d01c      	beq.n	800b8d0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b8a6:	f107 0314 	add.w	r3, r7, #20
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f7ff ffbf 	bl	800b830 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d002      	beq.n	800b8be <netif_do_set_ipaddr+0x6a>
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	e000      	b.n	800b8c0 <netif_do_set_ipaddr+0x6c>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b8c4:	2101      	movs	r1, #1
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f000 f8d2 	bl	800ba70 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	e000      	b.n	800b8d2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3718      	adds	r7, #24
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	08017404 	.word	0x08017404
 800b8e0:	0801751c 	.word	0x0801751c
 800b8e4:	08017454 	.word	0x08017454

0800b8e8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	3308      	adds	r3, #8
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d00a      	beq.n	800b918 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <netif_do_set_netmask+0x26>
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	e000      	b.n	800b910 <netif_do_set_netmask+0x28>
 800b90e:	2300      	movs	r3, #0
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b914:	2301      	movs	r3, #1
 800b916:	e000      	b.n	800b91a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3714      	adds	r7, #20
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b926:	b480      	push	{r7}
 800b928:	b085      	sub	sp, #20
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	60f8      	str	r0, [r7, #12]
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	330c      	adds	r3, #12
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d00a      	beq.n	800b956 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d002      	beq.n	800b94c <netif_do_set_gw+0x26>
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	e000      	b.n	800b94e <netif_do_set_gw+0x28>
 800b94c:	2300      	movs	r3, #0
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b952:	2301      	movs	r3, #1
 800b954:	e000      	b.n	800b958 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3714      	adds	r7, #20
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b088      	sub	sp, #32
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
 800b970:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b972:	2300      	movs	r3, #0
 800b974:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b976:	2300      	movs	r3, #0
 800b978:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d101      	bne.n	800b984 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b980:	4b1c      	ldr	r3, [pc, #112]	@ (800b9f4 <netif_set_addr+0x90>)
 800b982:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d101      	bne.n	800b98e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b98a:	4b1a      	ldr	r3, [pc, #104]	@ (800b9f4 <netif_set_addr+0x90>)
 800b98c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d101      	bne.n	800b998 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b994:	4b17      	ldr	r3, [pc, #92]	@ (800b9f4 <netif_set_addr+0x90>)
 800b996:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d003      	beq.n	800b9a6 <netif_set_addr+0x42>
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d101      	bne.n	800b9aa <netif_set_addr+0x46>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e000      	b.n	800b9ac <netif_set_addr+0x48>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d006      	beq.n	800b9c2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b9b4:	f107 0310 	add.w	r3, r7, #16
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	68b9      	ldr	r1, [r7, #8]
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f7ff ff49 	bl	800b854 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b9c2:	69fa      	ldr	r2, [r7, #28]
 800b9c4:	6879      	ldr	r1, [r7, #4]
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f7ff ff8e 	bl	800b8e8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b9cc:	69ba      	ldr	r2, [r7, #24]
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f7ff ffa8 	bl	800b926 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d106      	bne.n	800b9ea <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b9dc:	f107 0310 	add.w	r3, r7, #16
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	68b9      	ldr	r1, [r7, #8]
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f7ff ff35 	bl	800b854 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b9ea:	bf00      	nop
 800b9ec:	3720      	adds	r7, #32
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	08019b44 	.word	0x08019b44

0800b9f8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ba00:	4a04      	ldr	r2, [pc, #16]	@ (800ba14 <netif_set_default+0x1c>)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ba06:	bf00      	nop
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	2000b264 	.word	0x2000b264

0800ba18 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d107      	bne.n	800ba36 <netif_set_up+0x1e>
 800ba26:	4b0f      	ldr	r3, [pc, #60]	@ (800ba64 <netif_set_up+0x4c>)
 800ba28:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800ba2c:	490e      	ldr	r1, [pc, #56]	@ (800ba68 <netif_set_up+0x50>)
 800ba2e:	480f      	ldr	r0, [pc, #60]	@ (800ba6c <netif_set_up+0x54>)
 800ba30:	f009 fae2 	bl	8014ff8 <iprintf>
 800ba34:	e013      	b.n	800ba5e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ba3c:	f003 0301 	and.w	r3, r3, #1
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10c      	bne.n	800ba5e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ba4a:	f043 0301 	orr.w	r3, r3, #1
 800ba4e:	b2da      	uxtb	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ba56:	2103      	movs	r1, #3
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 f809 	bl	800ba70 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	08017404 	.word	0x08017404
 800ba68:	0801758c 	.word	0x0801758c
 800ba6c:	08017454 	.word	0x08017454

0800ba70 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d106      	bne.n	800ba90 <netif_issue_reports+0x20>
 800ba82:	4b18      	ldr	r3, [pc, #96]	@ (800bae4 <netif_issue_reports+0x74>)
 800ba84:	f240 326d 	movw	r2, #877	@ 0x36d
 800ba88:	4917      	ldr	r1, [pc, #92]	@ (800bae8 <netif_issue_reports+0x78>)
 800ba8a:	4818      	ldr	r0, [pc, #96]	@ (800baec <netif_issue_reports+0x7c>)
 800ba8c:	f009 fab4 	bl	8014ff8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ba96:	f003 0304 	and.w	r3, r3, #4
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d01e      	beq.n	800badc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800baa4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d017      	beq.n	800badc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800baac:	78fb      	ldrb	r3, [r7, #3]
 800baae:	f003 0301 	and.w	r3, r3, #1
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d013      	beq.n	800bade <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	3304      	adds	r3, #4
 800baba:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00e      	beq.n	800bade <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bac6:	f003 0308 	and.w	r3, r3, #8
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d007      	beq.n	800bade <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	3304      	adds	r3, #4
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f007 fe03 	bl	80136e0 <etharp_request>
 800bada:	e000      	b.n	800bade <netif_issue_reports+0x6e>
    return;
 800badc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	08017404 	.word	0x08017404
 800bae8:	080175a8 	.word	0x080175a8
 800baec:	08017454 	.word	0x08017454

0800baf0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d107      	bne.n	800bb0e <netif_set_down+0x1e>
 800bafe:	4b12      	ldr	r3, [pc, #72]	@ (800bb48 <netif_set_down+0x58>)
 800bb00:	f240 329b 	movw	r2, #923	@ 0x39b
 800bb04:	4911      	ldr	r1, [pc, #68]	@ (800bb4c <netif_set_down+0x5c>)
 800bb06:	4812      	ldr	r0, [pc, #72]	@ (800bb50 <netif_set_down+0x60>)
 800bb08:	f009 fa76 	bl	8014ff8 <iprintf>
 800bb0c:	e019      	b.n	800bb42 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb14:	f003 0301 	and.w	r3, r3, #1
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d012      	beq.n	800bb42 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb22:	f023 0301 	bic.w	r3, r3, #1
 800bb26:	b2da      	uxtb	r2, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb34:	f003 0308 	and.w	r3, r3, #8
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f007 f98d 	bl	8012e5c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	08017404 	.word	0x08017404
 800bb4c:	080175cc 	.word	0x080175cc
 800bb50:	08017454 	.word	0x08017454

0800bb54 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d107      	bne.n	800bb72 <netif_set_link_up+0x1e>
 800bb62:	4b13      	ldr	r3, [pc, #76]	@ (800bbb0 <netif_set_link_up+0x5c>)
 800bb64:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800bb68:	4912      	ldr	r1, [pc, #72]	@ (800bbb4 <netif_set_link_up+0x60>)
 800bb6a:	4813      	ldr	r0, [pc, #76]	@ (800bbb8 <netif_set_link_up+0x64>)
 800bb6c:	f009 fa44 	bl	8014ff8 <iprintf>
 800bb70:	e01b      	b.n	800bbaa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb78:	f003 0304 	and.w	r3, r3, #4
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d114      	bne.n	800bbaa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb86:	f043 0304 	orr.w	r3, r3, #4
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bb92:	2103      	movs	r1, #3
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7ff ff6b 	bl	800ba70 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	69db      	ldr	r3, [r3, #28]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d003      	beq.n	800bbaa <netif_set_link_up+0x56>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	69db      	ldr	r3, [r3, #28]
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	08017404 	.word	0x08017404
 800bbb4:	080175ec 	.word	0x080175ec
 800bbb8:	08017454 	.word	0x08017454

0800bbbc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d107      	bne.n	800bbda <netif_set_link_down+0x1e>
 800bbca:	4b11      	ldr	r3, [pc, #68]	@ (800bc10 <netif_set_link_down+0x54>)
 800bbcc:	f240 4206 	movw	r2, #1030	@ 0x406
 800bbd0:	4910      	ldr	r1, [pc, #64]	@ (800bc14 <netif_set_link_down+0x58>)
 800bbd2:	4811      	ldr	r0, [pc, #68]	@ (800bc18 <netif_set_link_down+0x5c>)
 800bbd4:	f009 fa10 	bl	8014ff8 <iprintf>
 800bbd8:	e017      	b.n	800bc0a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bbe0:	f003 0304 	and.w	r3, r3, #4
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d010      	beq.n	800bc0a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bbee:	f023 0304 	bic.w	r3, r3, #4
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	69db      	ldr	r3, [r3, #28]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d003      	beq.n	800bc0a <netif_set_link_down+0x4e>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	69db      	ldr	r3, [r3, #28]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bc0a:	3708      	adds	r7, #8
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	08017404 	.word	0x08017404
 800bc14:	08017610 	.word	0x08017610
 800bc18:	08017454 	.word	0x08017454

0800bc1c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d002      	beq.n	800bc32 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	683a      	ldr	r2, [r7, #0]
 800bc30:	61da      	str	r2, [r3, #28]
  }
}
 800bc32:	bf00      	nop
 800bc34:	370c      	adds	r7, #12
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b085      	sub	sp, #20
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	60f8      	str	r0, [r7, #12]
 800bc46:	60b9      	str	r1, [r7, #8]
 800bc48:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bc4a:	f06f 030b 	mvn.w	r3, #11
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
	...

0800bc5c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4603      	mov	r3, r0
 800bc64:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bc66:	79fb      	ldrb	r3, [r7, #7]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d013      	beq.n	800bc94 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bc6c:	4b0d      	ldr	r3, [pc, #52]	@ (800bca4 <netif_get_by_index+0x48>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	60fb      	str	r3, [r7, #12]
 800bc72:	e00c      	b.n	800bc8e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	79fa      	ldrb	r2, [r7, #7]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d101      	bne.n	800bc88 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	e006      	b.n	800bc96 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	60fb      	str	r3, [r7, #12]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1ef      	bne.n	800bc74 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3714      	adds	r7, #20
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	2000b260 	.word	0x2000b260

0800bca8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bcae:	4b0c      	ldr	r3, [pc, #48]	@ (800bce0 <pbuf_free_ooseq+0x38>)
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bcb4:	4b0b      	ldr	r3, [pc, #44]	@ (800bce4 <pbuf_free_ooseq+0x3c>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	607b      	str	r3, [r7, #4]
 800bcba:	e00a      	b.n	800bcd2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d003      	beq.n	800bccc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f002 f9e1 	bl	800e08c <tcp_free_ooseq>
      return;
 800bcca:	e005      	b.n	800bcd8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	607b      	str	r3, [r7, #4]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d1f1      	bne.n	800bcbc <pbuf_free_ooseq+0x14>
    }
  }
}
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	2000b269 	.word	0x2000b269
 800bce4:	2000b278 	.word	0x2000b278

0800bce8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bce8:	b480      	push	{r7}
 800bcea:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800bcec:	4b03      	ldr	r3, [pc, #12]	@ (800bcfc <pbuf_pool_is_empty+0x14>)
 800bcee:	2201      	movs	r2, #1
 800bcf0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bcf2:	bf00      	nop
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr
 800bcfc:	2000b269 	.word	0x2000b269

0800bd00 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	4611      	mov	r1, r2
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	460b      	mov	r3, r1
 800bd10:	80fb      	strh	r3, [r7, #6]
 800bd12:	4613      	mov	r3, r2
 800bd14:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	68ba      	ldr	r2, [r7, #8]
 800bd20:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	88fa      	ldrh	r2, [r7, #6]
 800bd26:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	88ba      	ldrh	r2, [r7, #4]
 800bd2c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bd2e:	8b3b      	ldrh	r3, [r7, #24]
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	7f3a      	ldrb	r2, [r7, #28]
 800bd3a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	73da      	strb	r2, [r3, #15]
}
 800bd48:	bf00      	nop
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b08c      	sub	sp, #48	@ 0x30
 800bd58:	af02      	add	r7, sp, #8
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	71fb      	strb	r3, [r7, #7]
 800bd5e:	460b      	mov	r3, r1
 800bd60:	80bb      	strh	r3, [r7, #4]
 800bd62:	4613      	mov	r3, r2
 800bd64:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bd66:	79fb      	ldrb	r3, [r7, #7]
 800bd68:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bd6a:	887b      	ldrh	r3, [r7, #2]
 800bd6c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800bd70:	d07f      	beq.n	800be72 <pbuf_alloc+0x11e>
 800bd72:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800bd76:	f300 80c8 	bgt.w	800bf0a <pbuf_alloc+0x1b6>
 800bd7a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800bd7e:	d010      	beq.n	800bda2 <pbuf_alloc+0x4e>
 800bd80:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800bd84:	f300 80c1 	bgt.w	800bf0a <pbuf_alloc+0x1b6>
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d002      	beq.n	800bd92 <pbuf_alloc+0x3e>
 800bd8c:	2b41      	cmp	r3, #65	@ 0x41
 800bd8e:	f040 80bc 	bne.w	800bf0a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bd92:	887a      	ldrh	r2, [r7, #2]
 800bd94:	88bb      	ldrh	r3, [r7, #4]
 800bd96:	4619      	mov	r1, r3
 800bd98:	2000      	movs	r0, #0
 800bd9a:	f000 f8d1 	bl	800bf40 <pbuf_alloc_reference>
 800bd9e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800bda0:	e0bd      	b.n	800bf1e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bda2:	2300      	movs	r3, #0
 800bda4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800bda6:	2300      	movs	r3, #0
 800bda8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bdaa:	88bb      	ldrh	r3, [r7, #4]
 800bdac:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bdae:	2008      	movs	r0, #8
 800bdb0:	f7ff fbce 	bl	800b550 <memp_malloc>
 800bdb4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d109      	bne.n	800bdd0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bdbc:	f7ff ff94 	bl	800bce8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d002      	beq.n	800bdcc <pbuf_alloc+0x78>
            pbuf_free(p);
 800bdc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bdc8:	f000 faa8 	bl	800c31c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	e0a7      	b.n	800bf20 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bdd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bdd2:	3303      	adds	r3, #3
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	f023 0303 	bic.w	r3, r3, #3
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	8b7a      	ldrh	r2, [r7, #26]
 800bde4:	4293      	cmp	r3, r2
 800bde6:	bf28      	it	cs
 800bde8:	4613      	movcs	r3, r2
 800bdea:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bdec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bdee:	3310      	adds	r3, #16
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	3303      	adds	r3, #3
 800bdf6:	f023 0303 	bic.w	r3, r3, #3
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	89f9      	ldrh	r1, [r7, #14]
 800bdfe:	8b7a      	ldrh	r2, [r7, #26]
 800be00:	2300      	movs	r3, #0
 800be02:	9301      	str	r3, [sp, #4]
 800be04:	887b      	ldrh	r3, [r7, #2]
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	460b      	mov	r3, r1
 800be0a:	4601      	mov	r1, r0
 800be0c:	6938      	ldr	r0, [r7, #16]
 800be0e:	f7ff ff77 	bl	800bd00 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	f003 0303 	and.w	r3, r3, #3
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d006      	beq.n	800be2c <pbuf_alloc+0xd8>
 800be1e:	4b42      	ldr	r3, [pc, #264]	@ (800bf28 <pbuf_alloc+0x1d4>)
 800be20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be24:	4941      	ldr	r1, [pc, #260]	@ (800bf2c <pbuf_alloc+0x1d8>)
 800be26:	4842      	ldr	r0, [pc, #264]	@ (800bf30 <pbuf_alloc+0x1dc>)
 800be28:	f009 f8e6 	bl	8014ff8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800be2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800be2e:	3303      	adds	r3, #3
 800be30:	f023 0303 	bic.w	r3, r3, #3
 800be34:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800be38:	d106      	bne.n	800be48 <pbuf_alloc+0xf4>
 800be3a:	4b3b      	ldr	r3, [pc, #236]	@ (800bf28 <pbuf_alloc+0x1d4>)
 800be3c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800be40:	493c      	ldr	r1, [pc, #240]	@ (800bf34 <pbuf_alloc+0x1e0>)
 800be42:	483b      	ldr	r0, [pc, #236]	@ (800bf30 <pbuf_alloc+0x1dc>)
 800be44:	f009 f8d8 	bl	8014ff8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800be48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d102      	bne.n	800be54 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	627b      	str	r3, [r7, #36]	@ 0x24
 800be52:	e002      	b.n	800be5a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800be5e:	8b7a      	ldrh	r2, [r7, #26]
 800be60:	89fb      	ldrh	r3, [r7, #14]
 800be62:	1ad3      	subs	r3, r2, r3
 800be64:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800be66:	2300      	movs	r3, #0
 800be68:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800be6a:	8b7b      	ldrh	r3, [r7, #26]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d19e      	bne.n	800bdae <pbuf_alloc+0x5a>
      break;
 800be70:	e055      	b.n	800bf1e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800be72:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800be74:	3303      	adds	r3, #3
 800be76:	b29b      	uxth	r3, r3
 800be78:	f023 0303 	bic.w	r3, r3, #3
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	88bb      	ldrh	r3, [r7, #4]
 800be80:	3303      	adds	r3, #3
 800be82:	b29b      	uxth	r3, r3
 800be84:	f023 0303 	bic.w	r3, r3, #3
 800be88:	b29b      	uxth	r3, r3
 800be8a:	4413      	add	r3, r2
 800be8c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800be8e:	8b3b      	ldrh	r3, [r7, #24]
 800be90:	3310      	adds	r3, #16
 800be92:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800be94:	8b3a      	ldrh	r2, [r7, #24]
 800be96:	88bb      	ldrh	r3, [r7, #4]
 800be98:	3303      	adds	r3, #3
 800be9a:	f023 0303 	bic.w	r3, r3, #3
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d306      	bcc.n	800beb0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bea2:	8afa      	ldrh	r2, [r7, #22]
 800bea4:	88bb      	ldrh	r3, [r7, #4]
 800bea6:	3303      	adds	r3, #3
 800bea8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800beac:	429a      	cmp	r2, r3
 800beae:	d201      	bcs.n	800beb4 <pbuf_alloc+0x160>
        return NULL;
 800beb0:	2300      	movs	r3, #0
 800beb2:	e035      	b.n	800bf20 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800beb4:	8afb      	ldrh	r3, [r7, #22]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7ff f9ba 	bl	800b230 <mem_malloc>
 800bebc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800bebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d101      	bne.n	800bec8 <pbuf_alloc+0x174>
        return NULL;
 800bec4:	2300      	movs	r3, #0
 800bec6:	e02b      	b.n	800bf20 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bec8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800beca:	3310      	adds	r3, #16
 800becc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bece:	4413      	add	r3, r2
 800bed0:	3303      	adds	r3, #3
 800bed2:	f023 0303 	bic.w	r3, r3, #3
 800bed6:	4618      	mov	r0, r3
 800bed8:	88b9      	ldrh	r1, [r7, #4]
 800beda:	88ba      	ldrh	r2, [r7, #4]
 800bedc:	2300      	movs	r3, #0
 800bede:	9301      	str	r3, [sp, #4]
 800bee0:	887b      	ldrh	r3, [r7, #2]
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	460b      	mov	r3, r1
 800bee6:	4601      	mov	r1, r0
 800bee8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800beea:	f7ff ff09 	bl	800bd00 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800beee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	f003 0303 	and.w	r3, r3, #3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d010      	beq.n	800bf1c <pbuf_alloc+0x1c8>
 800befa:	4b0b      	ldr	r3, [pc, #44]	@ (800bf28 <pbuf_alloc+0x1d4>)
 800befc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800bf00:	490d      	ldr	r1, [pc, #52]	@ (800bf38 <pbuf_alloc+0x1e4>)
 800bf02:	480b      	ldr	r0, [pc, #44]	@ (800bf30 <pbuf_alloc+0x1dc>)
 800bf04:	f009 f878 	bl	8014ff8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bf08:	e008      	b.n	800bf1c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bf0a:	4b07      	ldr	r3, [pc, #28]	@ (800bf28 <pbuf_alloc+0x1d4>)
 800bf0c:	f240 1227 	movw	r2, #295	@ 0x127
 800bf10:	490a      	ldr	r1, [pc, #40]	@ (800bf3c <pbuf_alloc+0x1e8>)
 800bf12:	4807      	ldr	r0, [pc, #28]	@ (800bf30 <pbuf_alloc+0x1dc>)
 800bf14:	f009 f870 	bl	8014ff8 <iprintf>
      return NULL;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	e001      	b.n	800bf20 <pbuf_alloc+0x1cc>
      break;
 800bf1c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3728      	adds	r7, #40	@ 0x28
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	08017634 	.word	0x08017634
 800bf2c:	08017664 	.word	0x08017664
 800bf30:	08017694 	.word	0x08017694
 800bf34:	080176bc 	.word	0x080176bc
 800bf38:	080176f0 	.word	0x080176f0
 800bf3c:	0801771c 	.word	0x0801771c

0800bf40 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af02      	add	r7, sp, #8
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	807b      	strh	r3, [r7, #2]
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bf50:	883b      	ldrh	r3, [r7, #0]
 800bf52:	2b41      	cmp	r3, #65	@ 0x41
 800bf54:	d009      	beq.n	800bf6a <pbuf_alloc_reference+0x2a>
 800bf56:	883b      	ldrh	r3, [r7, #0]
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d006      	beq.n	800bf6a <pbuf_alloc_reference+0x2a>
 800bf5c:	4b0f      	ldr	r3, [pc, #60]	@ (800bf9c <pbuf_alloc_reference+0x5c>)
 800bf5e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800bf62:	490f      	ldr	r1, [pc, #60]	@ (800bfa0 <pbuf_alloc_reference+0x60>)
 800bf64:	480f      	ldr	r0, [pc, #60]	@ (800bfa4 <pbuf_alloc_reference+0x64>)
 800bf66:	f009 f847 	bl	8014ff8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bf6a:	2007      	movs	r0, #7
 800bf6c:	f7ff faf0 	bl	800b550 <memp_malloc>
 800bf70:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d101      	bne.n	800bf7c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	e00b      	b.n	800bf94 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bf7c:	8879      	ldrh	r1, [r7, #2]
 800bf7e:	887a      	ldrh	r2, [r7, #2]
 800bf80:	2300      	movs	r3, #0
 800bf82:	9301      	str	r3, [sp, #4]
 800bf84:	883b      	ldrh	r3, [r7, #0]
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	460b      	mov	r3, r1
 800bf8a:	6879      	ldr	r1, [r7, #4]
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f7ff feb7 	bl	800bd00 <pbuf_init_alloced_pbuf>
  return p;
 800bf92:	68fb      	ldr	r3, [r7, #12]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3710      	adds	r7, #16
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	08017634 	.word	0x08017634
 800bfa0:	08017738 	.word	0x08017738
 800bfa4:	08017694 	.word	0x08017694

0800bfa8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b088      	sub	sp, #32
 800bfac:	af02      	add	r7, sp, #8
 800bfae:	607b      	str	r3, [r7, #4]
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	73fb      	strb	r3, [r7, #15]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	81bb      	strh	r3, [r7, #12]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bfbc:	7bfb      	ldrb	r3, [r7, #15]
 800bfbe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bfc0:	8a7b      	ldrh	r3, [r7, #18]
 800bfc2:	3303      	adds	r3, #3
 800bfc4:	f023 0203 	bic.w	r2, r3, #3
 800bfc8:	89bb      	ldrh	r3, [r7, #12]
 800bfca:	441a      	add	r2, r3
 800bfcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d901      	bls.n	800bfd6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	e018      	b.n	800c008 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d007      	beq.n	800bfec <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bfdc:	8a7b      	ldrh	r3, [r7, #18]
 800bfde:	3303      	adds	r3, #3
 800bfe0:	f023 0303 	bic.w	r3, r3, #3
 800bfe4:	6a3a      	ldr	r2, [r7, #32]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	617b      	str	r3, [r7, #20]
 800bfea:	e001      	b.n	800bff0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bfec:	2300      	movs	r3, #0
 800bfee:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	89b9      	ldrh	r1, [r7, #12]
 800bff4:	89ba      	ldrh	r2, [r7, #12]
 800bff6:	2302      	movs	r3, #2
 800bff8:	9301      	str	r3, [sp, #4]
 800bffa:	897b      	ldrh	r3, [r7, #10]
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	460b      	mov	r3, r1
 800c000:	6979      	ldr	r1, [r7, #20]
 800c002:	f7ff fe7d 	bl	800bd00 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c006:	687b      	ldr	r3, [r7, #4]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3718      	adds	r7, #24
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	460b      	mov	r3, r1
 800c01a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d106      	bne.n	800c030 <pbuf_realloc+0x20>
 800c022:	4b3a      	ldr	r3, [pc, #232]	@ (800c10c <pbuf_realloc+0xfc>)
 800c024:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800c028:	4939      	ldr	r1, [pc, #228]	@ (800c110 <pbuf_realloc+0x100>)
 800c02a:	483a      	ldr	r0, [pc, #232]	@ (800c114 <pbuf_realloc+0x104>)
 800c02c:	f008 ffe4 	bl	8014ff8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	891b      	ldrh	r3, [r3, #8]
 800c034:	887a      	ldrh	r2, [r7, #2]
 800c036:	429a      	cmp	r2, r3
 800c038:	d263      	bcs.n	800c102 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	891a      	ldrh	r2, [r3, #8]
 800c03e:	887b      	ldrh	r3, [r7, #2]
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c044:	887b      	ldrh	r3, [r7, #2]
 800c046:	817b      	strh	r3, [r7, #10]
  q = p;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c04c:	e018      	b.n	800c080 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	895b      	ldrh	r3, [r3, #10]
 800c052:	897a      	ldrh	r2, [r7, #10]
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	891a      	ldrh	r2, [r3, #8]
 800c05c:	893b      	ldrh	r3, [r7, #8]
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	b29a      	uxth	r2, r3
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d106      	bne.n	800c080 <pbuf_realloc+0x70>
 800c072:	4b26      	ldr	r3, [pc, #152]	@ (800c10c <pbuf_realloc+0xfc>)
 800c074:	f240 12af 	movw	r2, #431	@ 0x1af
 800c078:	4927      	ldr	r1, [pc, #156]	@ (800c118 <pbuf_realloc+0x108>)
 800c07a:	4826      	ldr	r0, [pc, #152]	@ (800c114 <pbuf_realloc+0x104>)
 800c07c:	f008 ffbc 	bl	8014ff8 <iprintf>
  while (rem_len > q->len) {
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	895b      	ldrh	r3, [r3, #10]
 800c084:	897a      	ldrh	r2, [r7, #10]
 800c086:	429a      	cmp	r2, r3
 800c088:	d8e1      	bhi.n	800c04e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	7b1b      	ldrb	r3, [r3, #12]
 800c08e:	f003 030f 	and.w	r3, r3, #15
 800c092:	2b00      	cmp	r3, #0
 800c094:	d121      	bne.n	800c0da <pbuf_realloc+0xca>
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	895b      	ldrh	r3, [r3, #10]
 800c09a:	897a      	ldrh	r2, [r7, #10]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d01c      	beq.n	800c0da <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	7b5b      	ldrb	r3, [r3, #13]
 800c0a4:	f003 0302 	and.w	r3, r3, #2
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d116      	bne.n	800c0da <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	685a      	ldr	r2, [r3, #4]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	897b      	ldrh	r3, [r7, #10]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	4619      	mov	r1, r3
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f7fe ffba 	bl	800b038 <mem_trim>
 800c0c4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d106      	bne.n	800c0da <pbuf_realloc+0xca>
 800c0cc:	4b0f      	ldr	r3, [pc, #60]	@ (800c10c <pbuf_realloc+0xfc>)
 800c0ce:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c0d2:	4912      	ldr	r1, [pc, #72]	@ (800c11c <pbuf_realloc+0x10c>)
 800c0d4:	480f      	ldr	r0, [pc, #60]	@ (800c114 <pbuf_realloc+0x104>)
 800c0d6:	f008 ff8f 	bl	8014ff8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	897a      	ldrh	r2, [r7, #10]
 800c0de:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	895a      	ldrh	r2, [r3, #10]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d004      	beq.n	800c0fa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f000 f911 	bl	800c31c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	601a      	str	r2, [r3, #0]
 800c100:	e000      	b.n	800c104 <pbuf_realloc+0xf4>
    return;
 800c102:	bf00      	nop

}
 800c104:	3710      	adds	r7, #16
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	08017634 	.word	0x08017634
 800c110:	0801774c 	.word	0x0801774c
 800c114:	08017694 	.word	0x08017694
 800c118:	08017764 	.word	0x08017764
 800c11c:	0801777c 	.word	0x0801777c

0800c120 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	4613      	mov	r3, r2
 800c12c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d106      	bne.n	800c142 <pbuf_add_header_impl+0x22>
 800c134:	4b2b      	ldr	r3, [pc, #172]	@ (800c1e4 <pbuf_add_header_impl+0xc4>)
 800c136:	f240 12df 	movw	r2, #479	@ 0x1df
 800c13a:	492b      	ldr	r1, [pc, #172]	@ (800c1e8 <pbuf_add_header_impl+0xc8>)
 800c13c:	482b      	ldr	r0, [pc, #172]	@ (800c1ec <pbuf_add_header_impl+0xcc>)
 800c13e:	f008 ff5b 	bl	8014ff8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d003      	beq.n	800c150 <pbuf_add_header_impl+0x30>
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c14e:	d301      	bcc.n	800c154 <pbuf_add_header_impl+0x34>
    return 1;
 800c150:	2301      	movs	r3, #1
 800c152:	e043      	b.n	800c1dc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d101      	bne.n	800c15e <pbuf_add_header_impl+0x3e>
    return 0;
 800c15a:	2300      	movs	r3, #0
 800c15c:	e03e      	b.n	800c1dc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	891a      	ldrh	r2, [r3, #8]
 800c166:	8a7b      	ldrh	r3, [r7, #18]
 800c168:	4413      	add	r3, r2
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	8a7a      	ldrh	r2, [r7, #18]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d901      	bls.n	800c176 <pbuf_add_header_impl+0x56>
    return 1;
 800c172:	2301      	movs	r3, #1
 800c174:	e032      	b.n	800c1dc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	7b1b      	ldrb	r3, [r3, #12]
 800c17a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c17c:	8a3b      	ldrh	r3, [r7, #16]
 800c17e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00c      	beq.n	800c1a0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	685a      	ldr	r2, [r3, #4]
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	425b      	negs	r3, r3
 800c18e:	4413      	add	r3, r2
 800c190:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	3310      	adds	r3, #16
 800c196:	697a      	ldr	r2, [r7, #20]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d20d      	bcs.n	800c1b8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c19c:	2301      	movs	r3, #1
 800c19e:	e01d      	b.n	800c1dc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c1a0:	79fb      	ldrb	r3, [r7, #7]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d006      	beq.n	800c1b4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	685a      	ldr	r2, [r3, #4]
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	425b      	negs	r3, r3
 800c1ae:	4413      	add	r3, r2
 800c1b0:	617b      	str	r3, [r7, #20]
 800c1b2:	e001      	b.n	800c1b8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e011      	b.n	800c1dc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	697a      	ldr	r2, [r7, #20]
 800c1bc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	895a      	ldrh	r2, [r3, #10]
 800c1c2:	8a7b      	ldrh	r3, [r7, #18]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	891a      	ldrh	r2, [r3, #8]
 800c1d0:	8a7b      	ldrh	r3, [r7, #18]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	811a      	strh	r2, [r3, #8]


  return 0;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3718      	adds	r7, #24
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	08017634 	.word	0x08017634
 800c1e8:	08017798 	.word	0x08017798
 800c1ec:	08017694 	.word	0x08017694

0800c1f0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	6839      	ldr	r1, [r7, #0]
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7ff ff8e 	bl	800c120 <pbuf_add_header_impl>
 800c204:	4603      	mov	r3, r0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
	...

0800c210 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d106      	bne.n	800c22e <pbuf_remove_header+0x1e>
 800c220:	4b20      	ldr	r3, [pc, #128]	@ (800c2a4 <pbuf_remove_header+0x94>)
 800c222:	f240 224b 	movw	r2, #587	@ 0x24b
 800c226:	4920      	ldr	r1, [pc, #128]	@ (800c2a8 <pbuf_remove_header+0x98>)
 800c228:	4820      	ldr	r0, [pc, #128]	@ (800c2ac <pbuf_remove_header+0x9c>)
 800c22a:	f008 fee5 	bl	8014ff8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d003      	beq.n	800c23c <pbuf_remove_header+0x2c>
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c23a:	d301      	bcc.n	800c240 <pbuf_remove_header+0x30>
    return 1;
 800c23c:	2301      	movs	r3, #1
 800c23e:	e02c      	b.n	800c29a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d101      	bne.n	800c24a <pbuf_remove_header+0x3a>
    return 0;
 800c246:	2300      	movs	r3, #0
 800c248:	e027      	b.n	800c29a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	895b      	ldrh	r3, [r3, #10]
 800c252:	89fa      	ldrh	r2, [r7, #14]
 800c254:	429a      	cmp	r2, r3
 800c256:	d908      	bls.n	800c26a <pbuf_remove_header+0x5a>
 800c258:	4b12      	ldr	r3, [pc, #72]	@ (800c2a4 <pbuf_remove_header+0x94>)
 800c25a:	f240 2255 	movw	r2, #597	@ 0x255
 800c25e:	4914      	ldr	r1, [pc, #80]	@ (800c2b0 <pbuf_remove_header+0xa0>)
 800c260:	4812      	ldr	r0, [pc, #72]	@ (800c2ac <pbuf_remove_header+0x9c>)
 800c262:	f008 fec9 	bl	8014ff8 <iprintf>
 800c266:	2301      	movs	r3, #1
 800c268:	e017      	b.n	800c29a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685a      	ldr	r2, [r3, #4]
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	441a      	add	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	895a      	ldrh	r2, [r3, #10]
 800c280:	89fb      	ldrh	r3, [r7, #14]
 800c282:	1ad3      	subs	r3, r2, r3
 800c284:	b29a      	uxth	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	891a      	ldrh	r2, [r3, #8]
 800c28e:	89fb      	ldrh	r3, [r7, #14]
 800c290:	1ad3      	subs	r3, r2, r3
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c298:	2300      	movs	r3, #0
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3710      	adds	r7, #16
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	08017634 	.word	0x08017634
 800c2a8:	08017798 	.word	0x08017798
 800c2ac:	08017694 	.word	0x08017694
 800c2b0:	080177a4 	.word	0x080177a4

0800c2b4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	807b      	strh	r3, [r7, #2]
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c2c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	da08      	bge.n	800c2de <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c2cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c2d0:	425b      	negs	r3, r3
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f7ff ff9b 	bl	800c210 <pbuf_remove_header>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	e007      	b.n	800c2ee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c2de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c2e2:	787a      	ldrb	r2, [r7, #1]
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f7ff ff1a 	bl	800c120 <pbuf_add_header_impl>
 800c2ec:	4603      	mov	r3, r0
  }
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3708      	adds	r7, #8
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b082      	sub	sp, #8
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
 800c2fe:	460b      	mov	r3, r1
 800c300:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c302:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c306:	2201      	movs	r2, #1
 800c308:	4619      	mov	r1, r3
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f7ff ffd2 	bl	800c2b4 <pbuf_header_impl>
 800c310:	4603      	mov	r3, r0
}
 800c312:	4618      	mov	r0, r3
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
	...

0800c31c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10b      	bne.n	800c342 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d106      	bne.n	800c33e <pbuf_free+0x22>
 800c330:	4b38      	ldr	r3, [pc, #224]	@ (800c414 <pbuf_free+0xf8>)
 800c332:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c336:	4938      	ldr	r1, [pc, #224]	@ (800c418 <pbuf_free+0xfc>)
 800c338:	4838      	ldr	r0, [pc, #224]	@ (800c41c <pbuf_free+0x100>)
 800c33a:	f008 fe5d 	bl	8014ff8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c33e:	2300      	movs	r3, #0
 800c340:	e063      	b.n	800c40a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c342:	2300      	movs	r3, #0
 800c344:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c346:	e05c      	b.n	800c402 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	7b9b      	ldrb	r3, [r3, #14]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d106      	bne.n	800c35e <pbuf_free+0x42>
 800c350:	4b30      	ldr	r3, [pc, #192]	@ (800c414 <pbuf_free+0xf8>)
 800c352:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800c356:	4932      	ldr	r1, [pc, #200]	@ (800c420 <pbuf_free+0x104>)
 800c358:	4830      	ldr	r0, [pc, #192]	@ (800c41c <pbuf_free+0x100>)
 800c35a:	f008 fe4d 	bl	8014ff8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	7b9b      	ldrb	r3, [r3, #14]
 800c362:	3b01      	subs	r3, #1
 800c364:	b2da      	uxtb	r2, r3
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	739a      	strb	r2, [r3, #14]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	7b9b      	ldrb	r3, [r3, #14]
 800c36e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c370:	7dbb      	ldrb	r3, [r7, #22]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d143      	bne.n	800c3fe <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	7b1b      	ldrb	r3, [r3, #12]
 800c380:	f003 030f 	and.w	r3, r3, #15
 800c384:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	7b5b      	ldrb	r3, [r3, #13]
 800c38a:	f003 0302 	and.w	r3, r3, #2
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d011      	beq.n	800c3b6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d106      	bne.n	800c3ac <pbuf_free+0x90>
 800c39e:	4b1d      	ldr	r3, [pc, #116]	@ (800c414 <pbuf_free+0xf8>)
 800c3a0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c3a4:	491f      	ldr	r1, [pc, #124]	@ (800c424 <pbuf_free+0x108>)
 800c3a6:	481d      	ldr	r0, [pc, #116]	@ (800c41c <pbuf_free+0x100>)
 800c3a8:	f008 fe26 	bl	8014ff8 <iprintf>
        pc->custom_free_function(p);
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	691b      	ldr	r3, [r3, #16]
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	4798      	blx	r3
 800c3b4:	e01d      	b.n	800c3f2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c3b6:	7bfb      	ldrb	r3, [r7, #15]
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d104      	bne.n	800c3c6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c3bc:	6879      	ldr	r1, [r7, #4]
 800c3be:	2008      	movs	r0, #8
 800c3c0:	f7ff f936 	bl	800b630 <memp_free>
 800c3c4:	e015      	b.n	800c3f2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c3c6:	7bfb      	ldrb	r3, [r7, #15]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d104      	bne.n	800c3d6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c3cc:	6879      	ldr	r1, [r7, #4]
 800c3ce:	2007      	movs	r0, #7
 800c3d0:	f7ff f92e 	bl	800b630 <memp_free>
 800c3d4:	e00d      	b.n	800c3f2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d103      	bne.n	800c3e4 <pbuf_free+0xc8>
          mem_free(p);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f7fe fdc1 	bl	800af64 <mem_free>
 800c3e2:	e006      	b.n	800c3f2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c3e4:	4b0b      	ldr	r3, [pc, #44]	@ (800c414 <pbuf_free+0xf8>)
 800c3e6:	f240 320f 	movw	r2, #783	@ 0x30f
 800c3ea:	490f      	ldr	r1, [pc, #60]	@ (800c428 <pbuf_free+0x10c>)
 800c3ec:	480b      	ldr	r0, [pc, #44]	@ (800c41c <pbuf_free+0x100>)
 800c3ee:	f008 fe03 	bl	8014ff8 <iprintf>
        }
      }
      count++;
 800c3f2:	7dfb      	ldrb	r3, [r7, #23]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	607b      	str	r3, [r7, #4]
 800c3fc:	e001      	b.n	800c402 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c3fe:	2300      	movs	r3, #0
 800c400:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d19f      	bne.n	800c348 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c408:	7dfb      	ldrb	r3, [r7, #23]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3718      	adds	r7, #24
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	08017634 	.word	0x08017634
 800c418:	08017798 	.word	0x08017798
 800c41c:	08017694 	.word	0x08017694
 800c420:	080177c4 	.word	0x080177c4
 800c424:	080177dc 	.word	0x080177dc
 800c428:	08017800 	.word	0x08017800

0800c42c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b085      	sub	sp, #20
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c434:	2300      	movs	r3, #0
 800c436:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c438:	e005      	b.n	800c446 <pbuf_clen+0x1a>
    ++len;
 800c43a:	89fb      	ldrh	r3, [r7, #14]
 800c43c:	3301      	adds	r3, #1
 800c43e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1f6      	bne.n	800c43a <pbuf_clen+0xe>
  }
  return len;
 800c44c:	89fb      	ldrh	r3, [r7, #14]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3714      	adds	r7, #20
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr
	...

0800c45c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d010      	beq.n	800c48c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	7b9b      	ldrb	r3, [r3, #14]
 800c46e:	3301      	adds	r3, #1
 800c470:	b2da      	uxtb	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	7b9b      	ldrb	r3, [r3, #14]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d106      	bne.n	800c48c <pbuf_ref+0x30>
 800c47e:	4b05      	ldr	r3, [pc, #20]	@ (800c494 <pbuf_ref+0x38>)
 800c480:	f240 3242 	movw	r2, #834	@ 0x342
 800c484:	4904      	ldr	r1, [pc, #16]	@ (800c498 <pbuf_ref+0x3c>)
 800c486:	4805      	ldr	r0, [pc, #20]	@ (800c49c <pbuf_ref+0x40>)
 800c488:	f008 fdb6 	bl	8014ff8 <iprintf>
  }
}
 800c48c:	bf00      	nop
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	08017634 	.word	0x08017634
 800c498:	08017814 	.word	0x08017814
 800c49c:	08017694 	.word	0x08017694

0800c4a0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d002      	beq.n	800c4b6 <pbuf_cat+0x16>
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d107      	bne.n	800c4c6 <pbuf_cat+0x26>
 800c4b6:	4b20      	ldr	r3, [pc, #128]	@ (800c538 <pbuf_cat+0x98>)
 800c4b8:	f240 3259 	movw	r2, #857	@ 0x359
 800c4bc:	491f      	ldr	r1, [pc, #124]	@ (800c53c <pbuf_cat+0x9c>)
 800c4be:	4820      	ldr	r0, [pc, #128]	@ (800c540 <pbuf_cat+0xa0>)
 800c4c0:	f008 fd9a 	bl	8014ff8 <iprintf>
 800c4c4:	e034      	b.n	800c530 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	60fb      	str	r3, [r7, #12]
 800c4ca:	e00a      	b.n	800c4e2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	891a      	ldrh	r2, [r3, #8]
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	891b      	ldrh	r3, [r3, #8]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	60fb      	str	r3, [r7, #12]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d1f0      	bne.n	800c4cc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	891a      	ldrh	r2, [r3, #8]
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	895b      	ldrh	r3, [r3, #10]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d006      	beq.n	800c504 <pbuf_cat+0x64>
 800c4f6:	4b10      	ldr	r3, [pc, #64]	@ (800c538 <pbuf_cat+0x98>)
 800c4f8:	f240 3262 	movw	r2, #866	@ 0x362
 800c4fc:	4911      	ldr	r1, [pc, #68]	@ (800c544 <pbuf_cat+0xa4>)
 800c4fe:	4810      	ldr	r0, [pc, #64]	@ (800c540 <pbuf_cat+0xa0>)
 800c500:	f008 fd7a 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d006      	beq.n	800c51a <pbuf_cat+0x7a>
 800c50c:	4b0a      	ldr	r3, [pc, #40]	@ (800c538 <pbuf_cat+0x98>)
 800c50e:	f240 3263 	movw	r2, #867	@ 0x363
 800c512:	490d      	ldr	r1, [pc, #52]	@ (800c548 <pbuf_cat+0xa8>)
 800c514:	480a      	ldr	r0, [pc, #40]	@ (800c540 <pbuf_cat+0xa0>)
 800c516:	f008 fd6f 	bl	8014ff8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	891a      	ldrh	r2, [r3, #8]
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	891b      	ldrh	r3, [r3, #8]
 800c522:	4413      	add	r3, r2
 800c524:	b29a      	uxth	r2, r3
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	683a      	ldr	r2, [r7, #0]
 800c52e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	08017634 	.word	0x08017634
 800c53c:	08017828 	.word	0x08017828
 800c540:	08017694 	.word	0x08017694
 800c544:	08017860 	.word	0x08017860
 800c548:	08017890 	.word	0x08017890

0800c54c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c556:	6839      	ldr	r1, [r7, #0]
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f7ff ffa1 	bl	800c4a0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c55e:	6838      	ldr	r0, [r7, #0]
 800c560:	f7ff ff7c 	bl	800c45c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c564:	bf00      	nop
 800c566:	3708      	adds	r7, #8
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b086      	sub	sp, #24
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c576:	2300      	movs	r3, #0
 800c578:	617b      	str	r3, [r7, #20]
 800c57a:	2300      	movs	r3, #0
 800c57c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d008      	beq.n	800c596 <pbuf_copy+0x2a>
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d005      	beq.n	800c596 <pbuf_copy+0x2a>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	891a      	ldrh	r2, [r3, #8]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	891b      	ldrh	r3, [r3, #8]
 800c592:	429a      	cmp	r2, r3
 800c594:	d209      	bcs.n	800c5aa <pbuf_copy+0x3e>
 800c596:	4b57      	ldr	r3, [pc, #348]	@ (800c6f4 <pbuf_copy+0x188>)
 800c598:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800c59c:	4956      	ldr	r1, [pc, #344]	@ (800c6f8 <pbuf_copy+0x18c>)
 800c59e:	4857      	ldr	r0, [pc, #348]	@ (800c6fc <pbuf_copy+0x190>)
 800c5a0:	f008 fd2a 	bl	8014ff8 <iprintf>
 800c5a4:	f06f 030f 	mvn.w	r3, #15
 800c5a8:	e09f      	b.n	800c6ea <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	895b      	ldrh	r3, [r3, #10]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	1ad2      	subs	r2, r2, r3
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	895b      	ldrh	r3, [r3, #10]
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	1acb      	subs	r3, r1, r3
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d306      	bcc.n	800c5d0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	895b      	ldrh	r3, [r3, #10]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	60fb      	str	r3, [r7, #12]
 800c5ce:	e005      	b.n	800c5dc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	895b      	ldrh	r3, [r3, #10]
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685a      	ldr	r2, [r3, #4]
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	18d0      	adds	r0, r2, r3
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	685a      	ldr	r2, [r3, #4]
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	68fa      	ldr	r2, [r7, #12]
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	f008 fde3 	bl	80151ba <memcpy>
    offset_to += len;
 800c5f4:	697a      	ldr	r2, [r7, #20]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	4413      	add	r3, r2
 800c602:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	895b      	ldrh	r3, [r3, #10]
 800c608:	461a      	mov	r2, r3
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d906      	bls.n	800c61e <pbuf_copy+0xb2>
 800c610:	4b38      	ldr	r3, [pc, #224]	@ (800c6f4 <pbuf_copy+0x188>)
 800c612:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800c616:	493a      	ldr	r1, [pc, #232]	@ (800c700 <pbuf_copy+0x194>)
 800c618:	4838      	ldr	r0, [pc, #224]	@ (800c6fc <pbuf_copy+0x190>)
 800c61a:	f008 fced 	bl	8014ff8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	895b      	ldrh	r3, [r3, #10]
 800c622:	461a      	mov	r2, r3
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	4293      	cmp	r3, r2
 800c628:	d906      	bls.n	800c638 <pbuf_copy+0xcc>
 800c62a:	4b32      	ldr	r3, [pc, #200]	@ (800c6f4 <pbuf_copy+0x188>)
 800c62c:	f240 32da 	movw	r2, #986	@ 0x3da
 800c630:	4934      	ldr	r1, [pc, #208]	@ (800c704 <pbuf_copy+0x198>)
 800c632:	4832      	ldr	r0, [pc, #200]	@ (800c6fc <pbuf_copy+0x190>)
 800c634:	f008 fce0 	bl	8014ff8 <iprintf>
    if (offset_from >= p_from->len) {
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	895b      	ldrh	r3, [r3, #10]
 800c63c:	461a      	mov	r2, r3
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	4293      	cmp	r3, r2
 800c642:	d304      	bcc.n	800c64e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c644:	2300      	movs	r3, #0
 800c646:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	895b      	ldrh	r3, [r3, #10]
 800c652:	461a      	mov	r2, r3
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	4293      	cmp	r3, r2
 800c658:	d114      	bne.n	800c684 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d10c      	bne.n	800c684 <pbuf_copy+0x118>
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d009      	beq.n	800c684 <pbuf_copy+0x118>
 800c670:	4b20      	ldr	r3, [pc, #128]	@ (800c6f4 <pbuf_copy+0x188>)
 800c672:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800c676:	4924      	ldr	r1, [pc, #144]	@ (800c708 <pbuf_copy+0x19c>)
 800c678:	4820      	ldr	r0, [pc, #128]	@ (800c6fc <pbuf_copy+0x190>)
 800c67a:	f008 fcbd 	bl	8014ff8 <iprintf>
 800c67e:	f06f 030f 	mvn.w	r3, #15
 800c682:	e032      	b.n	800c6ea <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d013      	beq.n	800c6b2 <pbuf_copy+0x146>
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	895a      	ldrh	r2, [r3, #10]
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	891b      	ldrh	r3, [r3, #8]
 800c692:	429a      	cmp	r2, r3
 800c694:	d10d      	bne.n	800c6b2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d009      	beq.n	800c6b2 <pbuf_copy+0x146>
 800c69e:	4b15      	ldr	r3, [pc, #84]	@ (800c6f4 <pbuf_copy+0x188>)
 800c6a0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800c6a4:	4919      	ldr	r1, [pc, #100]	@ (800c70c <pbuf_copy+0x1a0>)
 800c6a6:	4815      	ldr	r0, [pc, #84]	@ (800c6fc <pbuf_copy+0x190>)
 800c6a8:	f008 fca6 	bl	8014ff8 <iprintf>
 800c6ac:	f06f 0305 	mvn.w	r3, #5
 800c6b0:	e01b      	b.n	800c6ea <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d013      	beq.n	800c6e0 <pbuf_copy+0x174>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	895a      	ldrh	r2, [r3, #10]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	891b      	ldrh	r3, [r3, #8]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d10d      	bne.n	800c6e0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d009      	beq.n	800c6e0 <pbuf_copy+0x174>
 800c6cc:	4b09      	ldr	r3, [pc, #36]	@ (800c6f4 <pbuf_copy+0x188>)
 800c6ce:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c6d2:	490e      	ldr	r1, [pc, #56]	@ (800c70c <pbuf_copy+0x1a0>)
 800c6d4:	4809      	ldr	r0, [pc, #36]	@ (800c6fc <pbuf_copy+0x190>)
 800c6d6:	f008 fc8f 	bl	8014ff8 <iprintf>
 800c6da:	f06f 0305 	mvn.w	r3, #5
 800c6de:	e004      	b.n	800c6ea <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f47f af61 	bne.w	800c5aa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c6e8:	2300      	movs	r3, #0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3718      	adds	r7, #24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	08017634 	.word	0x08017634
 800c6f8:	080178dc 	.word	0x080178dc
 800c6fc:	08017694 	.word	0x08017694
 800c700:	0801790c 	.word	0x0801790c
 800c704:	08017924 	.word	0x08017924
 800c708:	08017940 	.word	0x08017940
 800c70c:	08017950 	.word	0x08017950

0800c710 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b088      	sub	sp, #32
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	4611      	mov	r1, r2
 800c71c:	461a      	mov	r2, r3
 800c71e:	460b      	mov	r3, r1
 800c720:	80fb      	strh	r3, [r7, #6]
 800c722:	4613      	mov	r3, r2
 800c724:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c726:	2300      	movs	r3, #0
 800c728:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d108      	bne.n	800c746 <pbuf_copy_partial+0x36>
 800c734:	4b2b      	ldr	r3, [pc, #172]	@ (800c7e4 <pbuf_copy_partial+0xd4>)
 800c736:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c73a:	492b      	ldr	r1, [pc, #172]	@ (800c7e8 <pbuf_copy_partial+0xd8>)
 800c73c:	482b      	ldr	r0, [pc, #172]	@ (800c7ec <pbuf_copy_partial+0xdc>)
 800c73e:	f008 fc5b 	bl	8014ff8 <iprintf>
 800c742:	2300      	movs	r3, #0
 800c744:	e04a      	b.n	800c7dc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d108      	bne.n	800c75e <pbuf_copy_partial+0x4e>
 800c74c:	4b25      	ldr	r3, [pc, #148]	@ (800c7e4 <pbuf_copy_partial+0xd4>)
 800c74e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800c752:	4927      	ldr	r1, [pc, #156]	@ (800c7f0 <pbuf_copy_partial+0xe0>)
 800c754:	4825      	ldr	r0, [pc, #148]	@ (800c7ec <pbuf_copy_partial+0xdc>)
 800c756:	f008 fc4f 	bl	8014ff8 <iprintf>
 800c75a:	2300      	movs	r3, #0
 800c75c:	e03e      	b.n	800c7dc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	61fb      	str	r3, [r7, #28]
 800c762:	e034      	b.n	800c7ce <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c764:	88bb      	ldrh	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00a      	beq.n	800c780 <pbuf_copy_partial+0x70>
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	895b      	ldrh	r3, [r3, #10]
 800c76e:	88ba      	ldrh	r2, [r7, #4]
 800c770:	429a      	cmp	r2, r3
 800c772:	d305      	bcc.n	800c780 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	895b      	ldrh	r3, [r3, #10]
 800c778:	88ba      	ldrh	r2, [r7, #4]
 800c77a:	1ad3      	subs	r3, r2, r3
 800c77c:	80bb      	strh	r3, [r7, #4]
 800c77e:	e023      	b.n	800c7c8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	895a      	ldrh	r2, [r3, #10]
 800c784:	88bb      	ldrh	r3, [r7, #4]
 800c786:	1ad3      	subs	r3, r2, r3
 800c788:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c78a:	8b3a      	ldrh	r2, [r7, #24]
 800c78c:	88fb      	ldrh	r3, [r7, #6]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d901      	bls.n	800c796 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c792:	88fb      	ldrh	r3, [r7, #6]
 800c794:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c796:	8b7b      	ldrh	r3, [r7, #26]
 800c798:	68ba      	ldr	r2, [r7, #8]
 800c79a:	18d0      	adds	r0, r2, r3
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	685a      	ldr	r2, [r3, #4]
 800c7a0:	88bb      	ldrh	r3, [r7, #4]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	8b3a      	ldrh	r2, [r7, #24]
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	f008 fd07 	bl	80151ba <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c7ac:	8afa      	ldrh	r2, [r7, #22]
 800c7ae:	8b3b      	ldrh	r3, [r7, #24]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c7b4:	8b7a      	ldrh	r2, [r7, #26]
 800c7b6:	8b3b      	ldrh	r3, [r7, #24]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c7bc:	88fa      	ldrh	r2, [r7, #6]
 800c7be:	8b3b      	ldrh	r3, [r7, #24]
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	61fb      	str	r3, [r7, #28]
 800c7ce:	88fb      	ldrh	r3, [r7, #6]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d002      	beq.n	800c7da <pbuf_copy_partial+0xca>
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1c4      	bne.n	800c764 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c7da:	8afb      	ldrh	r3, [r7, #22]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3720      	adds	r7, #32
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	08017634 	.word	0x08017634
 800c7e8:	0801797c 	.word	0x0801797c
 800c7ec:	08017694 	.word	0x08017694
 800c7f0:	0801799c 	.word	0x0801799c

0800c7f4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b088      	sub	sp, #32
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	4613      	mov	r3, r2
 800c800:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800c802:	88fb      	ldrh	r3, [r7, #6]
 800c804:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800c806:	2300      	movs	r3, #0
 800c808:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d109      	bne.n	800c824 <pbuf_take+0x30>
 800c810:	4b3a      	ldr	r3, [pc, #232]	@ (800c8fc <pbuf_take+0x108>)
 800c812:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800c816:	493a      	ldr	r1, [pc, #232]	@ (800c900 <pbuf_take+0x10c>)
 800c818:	483a      	ldr	r0, [pc, #232]	@ (800c904 <pbuf_take+0x110>)
 800c81a:	f008 fbed 	bl	8014ff8 <iprintf>
 800c81e:	f06f 030f 	mvn.w	r3, #15
 800c822:	e067      	b.n	800c8f4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d109      	bne.n	800c83e <pbuf_take+0x4a>
 800c82a:	4b34      	ldr	r3, [pc, #208]	@ (800c8fc <pbuf_take+0x108>)
 800c82c:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800c830:	4935      	ldr	r1, [pc, #212]	@ (800c908 <pbuf_take+0x114>)
 800c832:	4834      	ldr	r0, [pc, #208]	@ (800c904 <pbuf_take+0x110>)
 800c834:	f008 fbe0 	bl	8014ff8 <iprintf>
 800c838:	f06f 030f 	mvn.w	r3, #15
 800c83c:	e05a      	b.n	800c8f4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	891b      	ldrh	r3, [r3, #8]
 800c842:	88fa      	ldrh	r2, [r7, #6]
 800c844:	429a      	cmp	r2, r3
 800c846:	d909      	bls.n	800c85c <pbuf_take+0x68>
 800c848:	4b2c      	ldr	r3, [pc, #176]	@ (800c8fc <pbuf_take+0x108>)
 800c84a:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800c84e:	492f      	ldr	r1, [pc, #188]	@ (800c90c <pbuf_take+0x118>)
 800c850:	482c      	ldr	r0, [pc, #176]	@ (800c904 <pbuf_take+0x110>)
 800c852:	f008 fbd1 	bl	8014ff8 <iprintf>
 800c856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c85a:	e04b      	b.n	800c8f4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d007      	beq.n	800c872 <pbuf_take+0x7e>
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d004      	beq.n	800c872 <pbuf_take+0x7e>
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	891b      	ldrh	r3, [r3, #8]
 800c86c:	88fa      	ldrh	r2, [r7, #6]
 800c86e:	429a      	cmp	r2, r3
 800c870:	d902      	bls.n	800c878 <pbuf_take+0x84>
    return ERR_ARG;
 800c872:	f06f 030f 	mvn.w	r3, #15
 800c876:	e03d      	b.n	800c8f4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	61fb      	str	r3, [r7, #28]
 800c87c:	e028      	b.n	800c8d0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800c87e:	69fb      	ldr	r3, [r7, #28]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d106      	bne.n	800c892 <pbuf_take+0x9e>
 800c884:	4b1d      	ldr	r3, [pc, #116]	@ (800c8fc <pbuf_take+0x108>)
 800c886:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800c88a:	4921      	ldr	r1, [pc, #132]	@ (800c910 <pbuf_take+0x11c>)
 800c88c:	481d      	ldr	r0, [pc, #116]	@ (800c904 <pbuf_take+0x110>)
 800c88e:	f008 fbb3 	bl	8014ff8 <iprintf>
    buf_copy_len = total_copy_len;
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	895b      	ldrh	r3, [r3, #10]
 800c89a:	461a      	mov	r2, r3
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d902      	bls.n	800c8a8 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	895b      	ldrh	r3, [r3, #10]
 800c8a6:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	6858      	ldr	r0, [r3, #4]
 800c8ac:	68ba      	ldr	r2, [r7, #8]
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	69ba      	ldr	r2, [r7, #24]
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	f008 fc80 	bl	80151ba <memcpy>
    total_copy_len -= buf_copy_len;
 800c8ba:	697a      	ldr	r2, [r7, #20]
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800c8c2:	693a      	ldr	r2, [r7, #16]
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	61fb      	str	r3, [r7, #28]
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d1d3      	bne.n	800c87e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d103      	bne.n	800c8e4 <pbuf_take+0xf0>
 800c8dc:	88fb      	ldrh	r3, [r7, #6]
 800c8de:	693a      	ldr	r2, [r7, #16]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d006      	beq.n	800c8f2 <pbuf_take+0xfe>
 800c8e4:	4b05      	ldr	r3, [pc, #20]	@ (800c8fc <pbuf_take+0x108>)
 800c8e6:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800c8ea:	490a      	ldr	r1, [pc, #40]	@ (800c914 <pbuf_take+0x120>)
 800c8ec:	4805      	ldr	r0, [pc, #20]	@ (800c904 <pbuf_take+0x110>)
 800c8ee:	f008 fb83 	bl	8014ff8 <iprintf>
  return ERR_OK;
 800c8f2:	2300      	movs	r3, #0
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3720      	adds	r7, #32
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	08017634 	.word	0x08017634
 800c900:	08017a0c 	.word	0x08017a0c
 800c904:	08017694 	.word	0x08017694
 800c908:	08017a24 	.word	0x08017a24
 800c90c:	08017a40 	.word	0x08017a40
 800c910:	08017a60 	.word	0x08017a60
 800c914:	08017a78 	.word	0x08017a78

0800c918 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	4603      	mov	r3, r0
 800c920:	603a      	str	r2, [r7, #0]
 800c922:	71fb      	strb	r3, [r7, #7]
 800c924:	460b      	mov	r3, r1
 800c926:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	8919      	ldrh	r1, [r3, #8]
 800c92c:	88ba      	ldrh	r2, [r7, #4]
 800c92e:	79fb      	ldrb	r3, [r7, #7]
 800c930:	4618      	mov	r0, r3
 800c932:	f7ff fa0f 	bl	800bd54 <pbuf_alloc>
 800c936:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d101      	bne.n	800c942 <pbuf_clone+0x2a>
    return NULL;
 800c93e:	2300      	movs	r3, #0
 800c940:	e011      	b.n	800c966 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c942:	6839      	ldr	r1, [r7, #0]
 800c944:	68f8      	ldr	r0, [r7, #12]
 800c946:	f7ff fe11 	bl	800c56c <pbuf_copy>
 800c94a:	4603      	mov	r3, r0
 800c94c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c94e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d006      	beq.n	800c964 <pbuf_clone+0x4c>
 800c956:	4b06      	ldr	r3, [pc, #24]	@ (800c970 <pbuf_clone+0x58>)
 800c958:	f240 5224 	movw	r2, #1316	@ 0x524
 800c95c:	4905      	ldr	r1, [pc, #20]	@ (800c974 <pbuf_clone+0x5c>)
 800c95e:	4806      	ldr	r0, [pc, #24]	@ (800c978 <pbuf_clone+0x60>)
 800c960:	f008 fb4a 	bl	8014ff8 <iprintf>
  return q;
 800c964:	68fb      	ldr	r3, [r7, #12]
}
 800c966:	4618      	mov	r0, r3
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	08017634 	.word	0x08017634
 800c974:	08017aa8 	.word	0x08017aa8
 800c978:	08017694 	.word	0x08017694

0800c97c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c980:	f008 fa3a 	bl	8014df8 <rand>
 800c984:	4603      	mov	r3, r0
 800c986:	b29b      	uxth	r3, r3
 800c988:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c992:	b29a      	uxth	r2, r3
 800c994:	4b01      	ldr	r3, [pc, #4]	@ (800c99c <tcp_init+0x20>)
 800c996:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c998:	bf00      	nop
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	200000c0 	.word	0x200000c0

0800c9a0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	7d1b      	ldrb	r3, [r3, #20]
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d105      	bne.n	800c9bc <tcp_free+0x1c>
 800c9b0:	4b06      	ldr	r3, [pc, #24]	@ (800c9cc <tcp_free+0x2c>)
 800c9b2:	22d4      	movs	r2, #212	@ 0xd4
 800c9b4:	4906      	ldr	r1, [pc, #24]	@ (800c9d0 <tcp_free+0x30>)
 800c9b6:	4807      	ldr	r0, [pc, #28]	@ (800c9d4 <tcp_free+0x34>)
 800c9b8:	f008 fb1e 	bl	8014ff8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c9bc:	6879      	ldr	r1, [r7, #4]
 800c9be:	2001      	movs	r0, #1
 800c9c0:	f7fe fe36 	bl	800b630 <memp_free>
}
 800c9c4:	bf00      	nop
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	08017b34 	.word	0x08017b34
 800c9d0:	08017b64 	.word	0x08017b64
 800c9d4:	08017b78 	.word	0x08017b78

0800c9d8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	7d1b      	ldrb	r3, [r3, #20]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d105      	bne.n	800c9f4 <tcp_free_listen+0x1c>
 800c9e8:	4b06      	ldr	r3, [pc, #24]	@ (800ca04 <tcp_free_listen+0x2c>)
 800c9ea:	22df      	movs	r2, #223	@ 0xdf
 800c9ec:	4906      	ldr	r1, [pc, #24]	@ (800ca08 <tcp_free_listen+0x30>)
 800c9ee:	4807      	ldr	r0, [pc, #28]	@ (800ca0c <tcp_free_listen+0x34>)
 800c9f0:	f008 fb02 	bl	8014ff8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c9f4:	6879      	ldr	r1, [r7, #4]
 800c9f6:	2002      	movs	r0, #2
 800c9f8:	f7fe fe1a 	bl	800b630 <memp_free>
}
 800c9fc:	bf00      	nop
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	08017b34 	.word	0x08017b34
 800ca08:	08017ba0 	.word	0x08017ba0
 800ca0c:	08017b78 	.word	0x08017b78

0800ca10 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ca14:	f000 fea4 	bl	800d760 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ca18:	4b07      	ldr	r3, [pc, #28]	@ (800ca38 <tcp_tmr+0x28>)
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	4b05      	ldr	r3, [pc, #20]	@ (800ca38 <tcp_tmr+0x28>)
 800ca22:	701a      	strb	r2, [r3, #0]
 800ca24:	4b04      	ldr	r3, [pc, #16]	@ (800ca38 <tcp_tmr+0x28>)
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	f003 0301 	and.w	r3, r3, #1
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d001      	beq.n	800ca34 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ca30:	f000 fb54 	bl	800d0dc <tcp_slowtmr>
  }
}
 800ca34:	bf00      	nop
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	2000b281 	.word	0x2000b281

0800ca3c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d105      	bne.n	800ca58 <tcp_remove_listener+0x1c>
 800ca4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ca84 <tcp_remove_listener+0x48>)
 800ca4e:	22ff      	movs	r2, #255	@ 0xff
 800ca50:	490d      	ldr	r1, [pc, #52]	@ (800ca88 <tcp_remove_listener+0x4c>)
 800ca52:	480e      	ldr	r0, [pc, #56]	@ (800ca8c <tcp_remove_listener+0x50>)
 800ca54:	f008 fad0 	bl	8014ff8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	60fb      	str	r3, [r7, #12]
 800ca5c:	e00a      	b.n	800ca74 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca62:	683a      	ldr	r2, [r7, #0]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d102      	bne.n	800ca6e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	60fb      	str	r3, [r7, #12]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1f1      	bne.n	800ca5e <tcp_remove_listener+0x22>
    }
  }
}
 800ca7a:	bf00      	nop
 800ca7c:	bf00      	nop
 800ca7e:	3710      	adds	r7, #16
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	08017b34 	.word	0x08017b34
 800ca88:	08017bbc 	.word	0x08017bbc
 800ca8c:	08017b78 	.word	0x08017b78

0800ca90 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d106      	bne.n	800caac <tcp_listen_closed+0x1c>
 800ca9e:	4b14      	ldr	r3, [pc, #80]	@ (800caf0 <tcp_listen_closed+0x60>)
 800caa0:	f240 1211 	movw	r2, #273	@ 0x111
 800caa4:	4913      	ldr	r1, [pc, #76]	@ (800caf4 <tcp_listen_closed+0x64>)
 800caa6:	4814      	ldr	r0, [pc, #80]	@ (800caf8 <tcp_listen_closed+0x68>)
 800caa8:	f008 faa6 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	7d1b      	ldrb	r3, [r3, #20]
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d006      	beq.n	800cac2 <tcp_listen_closed+0x32>
 800cab4:	4b0e      	ldr	r3, [pc, #56]	@ (800caf0 <tcp_listen_closed+0x60>)
 800cab6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800caba:	4910      	ldr	r1, [pc, #64]	@ (800cafc <tcp_listen_closed+0x6c>)
 800cabc:	480e      	ldr	r0, [pc, #56]	@ (800caf8 <tcp_listen_closed+0x68>)
 800cabe:	f008 fa9b 	bl	8014ff8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cac2:	2301      	movs	r3, #1
 800cac4:	60fb      	str	r3, [r7, #12]
 800cac6:	e00b      	b.n	800cae0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cac8:	4a0d      	ldr	r2, [pc, #52]	@ (800cb00 <tcp_listen_closed+0x70>)
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	6879      	ldr	r1, [r7, #4]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7ff ffb1 	bl	800ca3c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	3301      	adds	r3, #1
 800cade:	60fb      	str	r3, [r7, #12]
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2b03      	cmp	r3, #3
 800cae4:	d9f0      	bls.n	800cac8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cae6:	bf00      	nop
 800cae8:	bf00      	nop
 800caea:	3710      	adds	r7, #16
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	08017b34 	.word	0x08017b34
 800caf4:	08017be4 	.word	0x08017be4
 800caf8:	08017b78 	.word	0x08017b78
 800cafc:	08017bf0 	.word	0x08017bf0
 800cb00:	08019b1c 	.word	0x08019b1c

0800cb04 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cb04:	b5b0      	push	{r4, r5, r7, lr}
 800cb06:	b088      	sub	sp, #32
 800cb08:	af04      	add	r7, sp, #16
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d106      	bne.n	800cb24 <tcp_close_shutdown+0x20>
 800cb16:	4b63      	ldr	r3, [pc, #396]	@ (800cca4 <tcp_close_shutdown+0x1a0>)
 800cb18:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800cb1c:	4962      	ldr	r1, [pc, #392]	@ (800cca8 <tcp_close_shutdown+0x1a4>)
 800cb1e:	4863      	ldr	r0, [pc, #396]	@ (800ccac <tcp_close_shutdown+0x1a8>)
 800cb20:	f008 fa6a 	bl	8014ff8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cb24:	78fb      	ldrb	r3, [r7, #3]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d066      	beq.n	800cbf8 <tcp_close_shutdown+0xf4>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	7d1b      	ldrb	r3, [r3, #20]
 800cb2e:	2b04      	cmp	r3, #4
 800cb30:	d003      	beq.n	800cb3a <tcp_close_shutdown+0x36>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	7d1b      	ldrb	r3, [r3, #20]
 800cb36:	2b07      	cmp	r3, #7
 800cb38:	d15e      	bne.n	800cbf8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d104      	bne.n	800cb4c <tcp_close_shutdown+0x48>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb46:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cb4a:	d055      	beq.n	800cbf8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	8b5b      	ldrh	r3, [r3, #26]
 800cb50:	f003 0310 	and.w	r3, r3, #16
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d106      	bne.n	800cb66 <tcp_close_shutdown+0x62>
 800cb58:	4b52      	ldr	r3, [pc, #328]	@ (800cca4 <tcp_close_shutdown+0x1a0>)
 800cb5a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800cb5e:	4954      	ldr	r1, [pc, #336]	@ (800ccb0 <tcp_close_shutdown+0x1ac>)
 800cb60:	4852      	ldr	r0, [pc, #328]	@ (800ccac <tcp_close_shutdown+0x1a8>)
 800cb62:	f008 fa49 	bl	8014ff8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800cb6e:	687d      	ldr	r5, [r7, #4]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	3304      	adds	r3, #4
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	8ad2      	ldrh	r2, [r2, #22]
 800cb78:	6879      	ldr	r1, [r7, #4]
 800cb7a:	8b09      	ldrh	r1, [r1, #24]
 800cb7c:	9102      	str	r1, [sp, #8]
 800cb7e:	9201      	str	r2, [sp, #4]
 800cb80:	9300      	str	r3, [sp, #0]
 800cb82:	462b      	mov	r3, r5
 800cb84:	4622      	mov	r2, r4
 800cb86:	4601      	mov	r1, r0
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f004 fe8d 	bl	80118a8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f001 f8c8 	bl	800dd24 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cb94:	4b47      	ldr	r3, [pc, #284]	@ (800ccb4 <tcp_close_shutdown+0x1b0>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d105      	bne.n	800cbaa <tcp_close_shutdown+0xa6>
 800cb9e:	4b45      	ldr	r3, [pc, #276]	@ (800ccb4 <tcp_close_shutdown+0x1b0>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	4a43      	ldr	r2, [pc, #268]	@ (800ccb4 <tcp_close_shutdown+0x1b0>)
 800cba6:	6013      	str	r3, [r2, #0]
 800cba8:	e013      	b.n	800cbd2 <tcp_close_shutdown+0xce>
 800cbaa:	4b42      	ldr	r3, [pc, #264]	@ (800ccb4 <tcp_close_shutdown+0x1b0>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	60fb      	str	r3, [r7, #12]
 800cbb0:	e00c      	b.n	800cbcc <tcp_close_shutdown+0xc8>
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d104      	bne.n	800cbc6 <tcp_close_shutdown+0xc2>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	68da      	ldr	r2, [r3, #12]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	60da      	str	r2, [r3, #12]
 800cbc4:	e005      	b.n	800cbd2 <tcp_close_shutdown+0xce>
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	60fb      	str	r3, [r7, #12]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d1ef      	bne.n	800cbb2 <tcp_close_shutdown+0xae>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	60da      	str	r2, [r3, #12]
 800cbd8:	4b37      	ldr	r3, [pc, #220]	@ (800ccb8 <tcp_close_shutdown+0x1b4>)
 800cbda:	2201      	movs	r2, #1
 800cbdc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cbde:	4b37      	ldr	r3, [pc, #220]	@ (800ccbc <tcp_close_shutdown+0x1b8>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d102      	bne.n	800cbee <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cbe8:	f003 fd5c 	bl	80106a4 <tcp_trigger_input_pcb_close>
 800cbec:	e002      	b.n	800cbf4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7ff fed6 	bl	800c9a0 <tcp_free>
      }
      return ERR_OK;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	e050      	b.n	800cc9a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	7d1b      	ldrb	r3, [r3, #20]
 800cbfc:	2b02      	cmp	r3, #2
 800cbfe:	d03b      	beq.n	800cc78 <tcp_close_shutdown+0x174>
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	dc44      	bgt.n	800cc8e <tcp_close_shutdown+0x18a>
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d002      	beq.n	800cc0e <tcp_close_shutdown+0x10a>
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d02a      	beq.n	800cc62 <tcp_close_shutdown+0x15e>
 800cc0c:	e03f      	b.n	800cc8e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	8adb      	ldrh	r3, [r3, #22]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d021      	beq.n	800cc5a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cc16:	4b2a      	ldr	r3, [pc, #168]	@ (800ccc0 <tcp_close_shutdown+0x1bc>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d105      	bne.n	800cc2c <tcp_close_shutdown+0x128>
 800cc20:	4b27      	ldr	r3, [pc, #156]	@ (800ccc0 <tcp_close_shutdown+0x1bc>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	4a26      	ldr	r2, [pc, #152]	@ (800ccc0 <tcp_close_shutdown+0x1bc>)
 800cc28:	6013      	str	r3, [r2, #0]
 800cc2a:	e013      	b.n	800cc54 <tcp_close_shutdown+0x150>
 800cc2c:	4b24      	ldr	r3, [pc, #144]	@ (800ccc0 <tcp_close_shutdown+0x1bc>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	60bb      	str	r3, [r7, #8]
 800cc32:	e00c      	b.n	800cc4e <tcp_close_shutdown+0x14a>
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d104      	bne.n	800cc48 <tcp_close_shutdown+0x144>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	68da      	ldr	r2, [r3, #12]
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	60da      	str	r2, [r3, #12]
 800cc46:	e005      	b.n	800cc54 <tcp_close_shutdown+0x150>
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	60bb      	str	r3, [r7, #8]
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d1ef      	bne.n	800cc34 <tcp_close_shutdown+0x130>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f7ff fea0 	bl	800c9a0 <tcp_free>
      break;
 800cc60:	e01a      	b.n	800cc98 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f7ff ff14 	bl	800ca90 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cc68:	6879      	ldr	r1, [r7, #4]
 800cc6a:	4816      	ldr	r0, [pc, #88]	@ (800ccc4 <tcp_close_shutdown+0x1c0>)
 800cc6c:	f001 f8aa 	bl	800ddc4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7ff feb1 	bl	800c9d8 <tcp_free_listen>
      break;
 800cc76:	e00f      	b.n	800cc98 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cc78:	6879      	ldr	r1, [r7, #4]
 800cc7a:	480e      	ldr	r0, [pc, #56]	@ (800ccb4 <tcp_close_shutdown+0x1b0>)
 800cc7c:	f001 f8a2 	bl	800ddc4 <tcp_pcb_remove>
 800cc80:	4b0d      	ldr	r3, [pc, #52]	@ (800ccb8 <tcp_close_shutdown+0x1b4>)
 800cc82:	2201      	movs	r2, #1
 800cc84:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f7ff fe8a 	bl	800c9a0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cc8c:	e004      	b.n	800cc98 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 f81a 	bl	800ccc8 <tcp_close_shutdown_fin>
 800cc94:	4603      	mov	r3, r0
 800cc96:	e000      	b.n	800cc9a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800cc98:	2300      	movs	r3, #0
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bdb0      	pop	{r4, r5, r7, pc}
 800cca2:	bf00      	nop
 800cca4:	08017b34 	.word	0x08017b34
 800cca8:	08017c08 	.word	0x08017c08
 800ccac:	08017b78 	.word	0x08017b78
 800ccb0:	08017c28 	.word	0x08017c28
 800ccb4:	2000b278 	.word	0x2000b278
 800ccb8:	2000b280 	.word	0x2000b280
 800ccbc:	2000b2b8 	.word	0x2000b2b8
 800ccc0:	2000b270 	.word	0x2000b270
 800ccc4:	2000b274 	.word	0x2000b274

0800ccc8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d106      	bne.n	800cce4 <tcp_close_shutdown_fin+0x1c>
 800ccd6:	4b2e      	ldr	r3, [pc, #184]	@ (800cd90 <tcp_close_shutdown_fin+0xc8>)
 800ccd8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800ccdc:	492d      	ldr	r1, [pc, #180]	@ (800cd94 <tcp_close_shutdown_fin+0xcc>)
 800ccde:	482e      	ldr	r0, [pc, #184]	@ (800cd98 <tcp_close_shutdown_fin+0xd0>)
 800cce0:	f008 f98a 	bl	8014ff8 <iprintf>

  switch (pcb->state) {
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	7d1b      	ldrb	r3, [r3, #20]
 800cce8:	2b07      	cmp	r3, #7
 800ccea:	d020      	beq.n	800cd2e <tcp_close_shutdown_fin+0x66>
 800ccec:	2b07      	cmp	r3, #7
 800ccee:	dc2b      	bgt.n	800cd48 <tcp_close_shutdown_fin+0x80>
 800ccf0:	2b03      	cmp	r3, #3
 800ccf2:	d002      	beq.n	800ccfa <tcp_close_shutdown_fin+0x32>
 800ccf4:	2b04      	cmp	r3, #4
 800ccf6:	d00d      	beq.n	800cd14 <tcp_close_shutdown_fin+0x4c>
 800ccf8:	e026      	b.n	800cd48 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f003 fee2 	bl	8010ac4 <tcp_send_fin>
 800cd00:	4603      	mov	r3, r0
 800cd02:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cd04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d11f      	bne.n	800cd4c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2205      	movs	r2, #5
 800cd10:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cd12:	e01b      	b.n	800cd4c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f003 fed5 	bl	8010ac4 <tcp_send_fin>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cd1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d114      	bne.n	800cd50 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2205      	movs	r2, #5
 800cd2a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cd2c:	e010      	b.n	800cd50 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f003 fec8 	bl	8010ac4 <tcp_send_fin>
 800cd34:	4603      	mov	r3, r0
 800cd36:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cd38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d109      	bne.n	800cd54 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2209      	movs	r2, #9
 800cd44:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cd46:	e005      	b.n	800cd54 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	e01c      	b.n	800cd86 <tcp_close_shutdown_fin+0xbe>
      break;
 800cd4c:	bf00      	nop
 800cd4e:	e002      	b.n	800cd56 <tcp_close_shutdown_fin+0x8e>
      break;
 800cd50:	bf00      	nop
 800cd52:	e000      	b.n	800cd56 <tcp_close_shutdown_fin+0x8e>
      break;
 800cd54:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cd56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d103      	bne.n	800cd66 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f003 ffee 	bl	8010d40 <tcp_output>
 800cd64:	e00d      	b.n	800cd82 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cd66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd6e:	d108      	bne.n	800cd82 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	8b5b      	ldrh	r3, [r3, #26]
 800cd74:	f043 0308 	orr.w	r3, r3, #8
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	e001      	b.n	800cd86 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cd82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	08017b34 	.word	0x08017b34
 800cd94:	08017be4 	.word	0x08017be4
 800cd98:	08017b78 	.word	0x08017b78

0800cd9c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d109      	bne.n	800cdbe <tcp_close+0x22>
 800cdaa:	4b0f      	ldr	r3, [pc, #60]	@ (800cde8 <tcp_close+0x4c>)
 800cdac:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800cdb0:	490e      	ldr	r1, [pc, #56]	@ (800cdec <tcp_close+0x50>)
 800cdb2:	480f      	ldr	r0, [pc, #60]	@ (800cdf0 <tcp_close+0x54>)
 800cdb4:	f008 f920 	bl	8014ff8 <iprintf>
 800cdb8:	f06f 030f 	mvn.w	r3, #15
 800cdbc:	e00f      	b.n	800cdde <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	7d1b      	ldrb	r3, [r3, #20]
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d006      	beq.n	800cdd4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	8b5b      	ldrh	r3, [r3, #26]
 800cdca:	f043 0310 	orr.w	r3, r3, #16
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cdd4:	2101      	movs	r1, #1
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7ff fe94 	bl	800cb04 <tcp_close_shutdown>
 800cddc:	4603      	mov	r3, r0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	08017b34 	.word	0x08017b34
 800cdec:	08017c44 	.word	0x08017c44
 800cdf0:	08017b78 	.word	0x08017b78

0800cdf4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b08e      	sub	sp, #56	@ 0x38
 800cdf8:	af04      	add	r7, sp, #16
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d107      	bne.n	800ce14 <tcp_abandon+0x20>
 800ce04:	4b52      	ldr	r3, [pc, #328]	@ (800cf50 <tcp_abandon+0x15c>)
 800ce06:	f240 223d 	movw	r2, #573	@ 0x23d
 800ce0a:	4952      	ldr	r1, [pc, #328]	@ (800cf54 <tcp_abandon+0x160>)
 800ce0c:	4852      	ldr	r0, [pc, #328]	@ (800cf58 <tcp_abandon+0x164>)
 800ce0e:	f008 f8f3 	bl	8014ff8 <iprintf>
 800ce12:	e099      	b.n	800cf48 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	7d1b      	ldrb	r3, [r3, #20]
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d106      	bne.n	800ce2a <tcp_abandon+0x36>
 800ce1c:	4b4c      	ldr	r3, [pc, #304]	@ (800cf50 <tcp_abandon+0x15c>)
 800ce1e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800ce22:	494e      	ldr	r1, [pc, #312]	@ (800cf5c <tcp_abandon+0x168>)
 800ce24:	484c      	ldr	r0, [pc, #304]	@ (800cf58 <tcp_abandon+0x164>)
 800ce26:	f008 f8e7 	bl	8014ff8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	7d1b      	ldrb	r3, [r3, #20]
 800ce2e:	2b0a      	cmp	r3, #10
 800ce30:	d107      	bne.n	800ce42 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ce32:	6879      	ldr	r1, [r7, #4]
 800ce34:	484a      	ldr	r0, [pc, #296]	@ (800cf60 <tcp_abandon+0x16c>)
 800ce36:	f000 ffc5 	bl	800ddc4 <tcp_pcb_remove>
    tcp_free(pcb);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f7ff fdb0 	bl	800c9a0 <tcp_free>
 800ce40:	e082      	b.n	800cf48 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ce42:	2300      	movs	r3, #0
 800ce44:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800ce46:	2300      	movs	r3, #0
 800ce48:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce4e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce54:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce5c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	7d1b      	ldrb	r3, [r3, #20]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d126      	bne.n	800ceba <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	8adb      	ldrh	r3, [r3, #22]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d02e      	beq.n	800ced2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ce74:	4b3b      	ldr	r3, [pc, #236]	@ (800cf64 <tcp_abandon+0x170>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d105      	bne.n	800ce8a <tcp_abandon+0x96>
 800ce7e:	4b39      	ldr	r3, [pc, #228]	@ (800cf64 <tcp_abandon+0x170>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	4a37      	ldr	r2, [pc, #220]	@ (800cf64 <tcp_abandon+0x170>)
 800ce86:	6013      	str	r3, [r2, #0]
 800ce88:	e013      	b.n	800ceb2 <tcp_abandon+0xbe>
 800ce8a:	4b36      	ldr	r3, [pc, #216]	@ (800cf64 <tcp_abandon+0x170>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	61fb      	str	r3, [r7, #28]
 800ce90:	e00c      	b.n	800ceac <tcp_abandon+0xb8>
 800ce92:	69fb      	ldr	r3, [r7, #28]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d104      	bne.n	800cea6 <tcp_abandon+0xb2>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	68da      	ldr	r2, [r3, #12]
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	60da      	str	r2, [r3, #12]
 800cea4:	e005      	b.n	800ceb2 <tcp_abandon+0xbe>
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	61fb      	str	r3, [r7, #28]
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d1ef      	bne.n	800ce92 <tcp_abandon+0x9e>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	60da      	str	r2, [r3, #12]
 800ceb8:	e00b      	b.n	800ced2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	8adb      	ldrh	r3, [r3, #22]
 800cec2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cec4:	6879      	ldr	r1, [r7, #4]
 800cec6:	4828      	ldr	r0, [pc, #160]	@ (800cf68 <tcp_abandon+0x174>)
 800cec8:	f000 ff7c 	bl	800ddc4 <tcp_pcb_remove>
 800cecc:	4b27      	ldr	r3, [pc, #156]	@ (800cf6c <tcp_abandon+0x178>)
 800cece:	2201      	movs	r2, #1
 800ced0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d004      	beq.n	800cee4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cede:	4618      	mov	r0, r3
 800cee0:	f000 fd1e 	bl	800d920 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d004      	beq.n	800cef6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cef0:	4618      	mov	r0, r3
 800cef2:	f000 fd15 	bl	800d920 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d004      	beq.n	800cf08 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf02:	4618      	mov	r0, r3
 800cf04:	f000 fd0c 	bl	800d920 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cf08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00e      	beq.n	800cf2c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cf0e:	6879      	ldr	r1, [r7, #4]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	3304      	adds	r3, #4
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	8b12      	ldrh	r2, [r2, #24]
 800cf18:	9202      	str	r2, [sp, #8]
 800cf1a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cf1c:	9201      	str	r2, [sp, #4]
 800cf1e:	9300      	str	r3, [sp, #0]
 800cf20:	460b      	mov	r3, r1
 800cf22:	697a      	ldr	r2, [r7, #20]
 800cf24:	69b9      	ldr	r1, [r7, #24]
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f004 fcbe 	bl	80118a8 <tcp_rst>
    }
    last_state = pcb->state;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	7d1b      	ldrb	r3, [r3, #20]
 800cf30:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f7ff fd34 	bl	800c9a0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d004      	beq.n	800cf48 <tcp_abandon+0x154>
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	f06f 010c 	mvn.w	r1, #12
 800cf44:	68f8      	ldr	r0, [r7, #12]
 800cf46:	4798      	blx	r3
  }
}
 800cf48:	3728      	adds	r7, #40	@ 0x28
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	08017b34 	.word	0x08017b34
 800cf54:	08017c78 	.word	0x08017c78
 800cf58:	08017b78 	.word	0x08017b78
 800cf5c:	08017c94 	.word	0x08017c94
 800cf60:	2000b27c 	.word	0x2000b27c
 800cf64:	2000b270 	.word	0x2000b270
 800cf68:	2000b278 	.word	0x2000b278
 800cf6c:	2000b280 	.word	0x2000b280

0800cf70 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cf78:	2101      	movs	r1, #1
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f7ff ff3a 	bl	800cdf4 <tcp_abandon>
}
 800cf80:	bf00      	nop
 800cf82:	3708      	adds	r7, #8
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d106      	bne.n	800cfa4 <tcp_update_rcv_ann_wnd+0x1c>
 800cf96:	4b25      	ldr	r3, [pc, #148]	@ (800d02c <tcp_update_rcv_ann_wnd+0xa4>)
 800cf98:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800cf9c:	4924      	ldr	r1, [pc, #144]	@ (800d030 <tcp_update_rcv_ann_wnd+0xa8>)
 800cf9e:	4825      	ldr	r0, [pc, #148]	@ (800d034 <tcp_update_rcv_ann_wnd+0xac>)
 800cfa0:	f008 f82a 	bl	8014ff8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800cfac:	4413      	add	r3, r2
 800cfae:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800cfb8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800cfbc:	bf28      	it	cs
 800cfbe:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800cfc2:	b292      	uxth	r2, r2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	68fa      	ldr	r2, [r7, #12]
 800cfc8:	1ad3      	subs	r3, r2, r3
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	db08      	blt.n	800cfe0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	1ad3      	subs	r3, r2, r3
 800cfde:	e020      	b.n	800d022 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfe8:	1ad3      	subs	r3, r2, r3
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	dd03      	ble.n	800cff6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2200      	movs	r2, #0
 800cff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cff4:	e014      	b.n	800d020 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d008:	d306      	bcc.n	800d018 <tcp_update_rcv_ann_wnd+0x90>
 800d00a:	4b08      	ldr	r3, [pc, #32]	@ (800d02c <tcp_update_rcv_ann_wnd+0xa4>)
 800d00c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800d010:	4909      	ldr	r1, [pc, #36]	@ (800d038 <tcp_update_rcv_ann_wnd+0xb0>)
 800d012:	4808      	ldr	r0, [pc, #32]	@ (800d034 <tcp_update_rcv_ann_wnd+0xac>)
 800d014:	f007 fff0 	bl	8014ff8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800d020:	2300      	movs	r3, #0
  }
}
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	08017b34 	.word	0x08017b34
 800d030:	08017d90 	.word	0x08017d90
 800d034:	08017b78 	.word	0x08017b78
 800d038:	08017db4 	.word	0x08017db4

0800d03c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	460b      	mov	r3, r1
 800d046:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d107      	bne.n	800d05e <tcp_recved+0x22>
 800d04e:	4b1f      	ldr	r3, [pc, #124]	@ (800d0cc <tcp_recved+0x90>)
 800d050:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800d054:	491e      	ldr	r1, [pc, #120]	@ (800d0d0 <tcp_recved+0x94>)
 800d056:	481f      	ldr	r0, [pc, #124]	@ (800d0d4 <tcp_recved+0x98>)
 800d058:	f007 ffce 	bl	8014ff8 <iprintf>
 800d05c:	e032      	b.n	800d0c4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	7d1b      	ldrb	r3, [r3, #20]
 800d062:	2b01      	cmp	r3, #1
 800d064:	d106      	bne.n	800d074 <tcp_recved+0x38>
 800d066:	4b19      	ldr	r3, [pc, #100]	@ (800d0cc <tcp_recved+0x90>)
 800d068:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800d06c:	491a      	ldr	r1, [pc, #104]	@ (800d0d8 <tcp_recved+0x9c>)
 800d06e:	4819      	ldr	r0, [pc, #100]	@ (800d0d4 <tcp_recved+0x98>)
 800d070:	f007 ffc2 	bl	8014ff8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d078:	887b      	ldrh	r3, [r7, #2]
 800d07a:	4413      	add	r3, r2
 800d07c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d07e:	89fb      	ldrh	r3, [r7, #14]
 800d080:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d084:	d804      	bhi.n	800d090 <tcp_recved+0x54>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d08a:	89fa      	ldrh	r2, [r7, #14]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d204      	bcs.n	800d09a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d096:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d098:	e002      	b.n	800d0a0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	89fa      	ldrh	r2, [r7, #14]
 800d09e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f7ff ff71 	bl	800cf88 <tcp_update_rcv_ann_wnd>
 800d0a6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800d0ae:	d309      	bcc.n	800d0c4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	8b5b      	ldrh	r3, [r3, #26]
 800d0b4:	f043 0302 	orr.w	r3, r3, #2
 800d0b8:	b29a      	uxth	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f003 fe3e 	bl	8010d40 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	08017b34 	.word	0x08017b34
 800d0d0:	08017dd0 	.word	0x08017dd0
 800d0d4:	08017b78 	.word	0x08017b78
 800d0d8:	08017de8 	.word	0x08017de8

0800d0dc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d0dc:	b5b0      	push	{r4, r5, r7, lr}
 800d0de:	b090      	sub	sp, #64	@ 0x40
 800d0e0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800d0e8:	4b95      	ldr	r3, [pc, #596]	@ (800d340 <tcp_slowtmr+0x264>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	4a94      	ldr	r2, [pc, #592]	@ (800d340 <tcp_slowtmr+0x264>)
 800d0f0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d0f2:	4b94      	ldr	r3, [pc, #592]	@ (800d344 <tcp_slowtmr+0x268>)
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	b2da      	uxtb	r2, r3
 800d0fa:	4b92      	ldr	r3, [pc, #584]	@ (800d344 <tcp_slowtmr+0x268>)
 800d0fc:	701a      	strb	r2, [r3, #0]
 800d0fe:	e000      	b.n	800d102 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800d100:	bf00      	nop
  prev = NULL;
 800d102:	2300      	movs	r3, #0
 800d104:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800d106:	4b90      	ldr	r3, [pc, #576]	@ (800d348 <tcp_slowtmr+0x26c>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d10c:	e29f      	b.n	800d64e <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d110:	7d1b      	ldrb	r3, [r3, #20]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d106      	bne.n	800d124 <tcp_slowtmr+0x48>
 800d116:	4b8d      	ldr	r3, [pc, #564]	@ (800d34c <tcp_slowtmr+0x270>)
 800d118:	f240 42be 	movw	r2, #1214	@ 0x4be
 800d11c:	498c      	ldr	r1, [pc, #560]	@ (800d350 <tcp_slowtmr+0x274>)
 800d11e:	488d      	ldr	r0, [pc, #564]	@ (800d354 <tcp_slowtmr+0x278>)
 800d120:	f007 ff6a 	bl	8014ff8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d126:	7d1b      	ldrb	r3, [r3, #20]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d106      	bne.n	800d13a <tcp_slowtmr+0x5e>
 800d12c:	4b87      	ldr	r3, [pc, #540]	@ (800d34c <tcp_slowtmr+0x270>)
 800d12e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800d132:	4989      	ldr	r1, [pc, #548]	@ (800d358 <tcp_slowtmr+0x27c>)
 800d134:	4887      	ldr	r0, [pc, #540]	@ (800d354 <tcp_slowtmr+0x278>)
 800d136:	f007 ff5f 	bl	8014ff8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d13a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d13c:	7d1b      	ldrb	r3, [r3, #20]
 800d13e:	2b0a      	cmp	r3, #10
 800d140:	d106      	bne.n	800d150 <tcp_slowtmr+0x74>
 800d142:	4b82      	ldr	r3, [pc, #520]	@ (800d34c <tcp_slowtmr+0x270>)
 800d144:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800d148:	4984      	ldr	r1, [pc, #528]	@ (800d35c <tcp_slowtmr+0x280>)
 800d14a:	4882      	ldr	r0, [pc, #520]	@ (800d354 <tcp_slowtmr+0x278>)
 800d14c:	f007 ff54 	bl	8014ff8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d152:	7f9a      	ldrb	r2, [r3, #30]
 800d154:	4b7b      	ldr	r3, [pc, #492]	@ (800d344 <tcp_slowtmr+0x268>)
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d105      	bne.n	800d168 <tcp_slowtmr+0x8c>
      prev = pcb;
 800d15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800d166:	e272      	b.n	800d64e <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800d168:	4b76      	ldr	r3, [pc, #472]	@ (800d344 <tcp_slowtmr+0x268>)
 800d16a:	781a      	ldrb	r2, [r3, #0]
 800d16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800d170:	2300      	movs	r3, #0
 800d172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800d176:	2300      	movs	r3, #0
 800d178:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17e:	7d1b      	ldrb	r3, [r3, #20]
 800d180:	2b02      	cmp	r3, #2
 800d182:	d10a      	bne.n	800d19a <tcp_slowtmr+0xbe>
 800d184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d186:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d18a:	2b05      	cmp	r3, #5
 800d18c:	d905      	bls.n	800d19a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d18e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d192:	3301      	adds	r3, #1
 800d194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d198:	e11e      	b.n	800d3d8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d1a0:	2b0b      	cmp	r3, #11
 800d1a2:	d905      	bls.n	800d1b0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800d1a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d1ae:	e113      	b.n	800d3d8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800d1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d075      	beq.n	800d2a6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d006      	beq.n	800d1d0 <tcp_slowtmr+0xf4>
 800d1c2:	4b62      	ldr	r3, [pc, #392]	@ (800d34c <tcp_slowtmr+0x270>)
 800d1c4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800d1c8:	4965      	ldr	r1, [pc, #404]	@ (800d360 <tcp_slowtmr+0x284>)
 800d1ca:	4862      	ldr	r0, [pc, #392]	@ (800d354 <tcp_slowtmr+0x278>)
 800d1cc:	f007 ff14 	bl	8014ff8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d106      	bne.n	800d1e6 <tcp_slowtmr+0x10a>
 800d1d8:	4b5c      	ldr	r3, [pc, #368]	@ (800d34c <tcp_slowtmr+0x270>)
 800d1da:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800d1de:	4961      	ldr	r1, [pc, #388]	@ (800d364 <tcp_slowtmr+0x288>)
 800d1e0:	485c      	ldr	r0, [pc, #368]	@ (800d354 <tcp_slowtmr+0x278>)
 800d1e2:	f007 ff09 	bl	8014ff8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d1ec:	2b0b      	cmp	r3, #11
 800d1ee:	d905      	bls.n	800d1fc <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800d1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d1fa:	e0ed      	b.n	800d3d8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d202:	3b01      	subs	r3, #1
 800d204:	4a58      	ldr	r2, [pc, #352]	@ (800d368 <tcp_slowtmr+0x28c>)
 800d206:	5cd3      	ldrb	r3, [r2, r3]
 800d208:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d20c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d210:	7c7a      	ldrb	r2, [r7, #17]
 800d212:	429a      	cmp	r2, r3
 800d214:	d907      	bls.n	800d226 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800d216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d218:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d21c:	3301      	adds	r3, #1
 800d21e:	b2da      	uxtb	r2, r3
 800d220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d222:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800d226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d228:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d22c:	7c7a      	ldrb	r2, [r7, #17]
 800d22e:	429a      	cmp	r2, r3
 800d230:	f200 80d2 	bhi.w	800d3d8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800d234:	2301      	movs	r3, #1
 800d236:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800d238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d108      	bne.n	800d254 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d242:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d244:	f004 fc24 	bl	8011a90 <tcp_zero_window_probe>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d014      	beq.n	800d278 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800d24e:	2300      	movs	r3, #0
 800d250:	623b      	str	r3, [r7, #32]
 800d252:	e011      	b.n	800d278 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d25a:	4619      	mov	r1, r3
 800d25c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d25e:	f003 fae9 	bl	8010834 <tcp_split_unsent_seg>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d107      	bne.n	800d278 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800d268:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d26a:	f003 fd69 	bl	8010d40 <tcp_output>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d101      	bne.n	800d278 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800d274:	2300      	movs	r3, #0
 800d276:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800d278:	6a3b      	ldr	r3, [r7, #32]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	f000 80ac 	beq.w	800d3d8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800d280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d282:	2200      	movs	r2, #0
 800d284:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d28a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d28e:	2b06      	cmp	r3, #6
 800d290:	f200 80a2 	bhi.w	800d3d8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800d294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d296:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d29a:	3301      	adds	r3, #1
 800d29c:	b2da      	uxtb	r2, r3
 800d29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800d2a4:	e098      	b.n	800d3d8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d2a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	db0f      	blt.n	800d2d0 <tcp_slowtmr+0x1f4>
 800d2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d2b6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d008      	beq.n	800d2d0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800d2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	b21a      	sxth	r2, r3
 800d2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ce:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800d2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	db7b      	blt.n	800d3d8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d2e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2e2:	f004 f821 	bl	8011328 <tcp_rexmit_rto_prepare>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d007      	beq.n	800d2fc <tcp_slowtmr+0x220>
 800d2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d171      	bne.n	800d3d8 <tcp_slowtmr+0x2fc>
 800d2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d06d      	beq.n	800d3d8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800d2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2fe:	7d1b      	ldrb	r3, [r3, #20]
 800d300:	2b02      	cmp	r3, #2
 800d302:	d03a      	beq.n	800d37a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d306:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d30a:	2b0c      	cmp	r3, #12
 800d30c:	bf28      	it	cs
 800d30e:	230c      	movcs	r3, #12
 800d310:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d314:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d318:	10db      	asrs	r3, r3, #3
 800d31a:	b21b      	sxth	r3, r3
 800d31c:	461a      	mov	r2, r3
 800d31e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d320:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d324:	4413      	add	r3, r2
 800d326:	7efa      	ldrb	r2, [r7, #27]
 800d328:	4910      	ldr	r1, [pc, #64]	@ (800d36c <tcp_slowtmr+0x290>)
 800d32a:	5c8a      	ldrb	r2, [r1, r2]
 800d32c:	4093      	lsls	r3, r2
 800d32e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800d336:	4293      	cmp	r3, r2
 800d338:	dc1a      	bgt.n	800d370 <tcp_slowtmr+0x294>
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	b21a      	sxth	r2, r3
 800d33e:	e019      	b.n	800d374 <tcp_slowtmr+0x298>
 800d340:	2000b26c 	.word	0x2000b26c
 800d344:	2000b282 	.word	0x2000b282
 800d348:	2000b278 	.word	0x2000b278
 800d34c:	08017b34 	.word	0x08017b34
 800d350:	08017e78 	.word	0x08017e78
 800d354:	08017b78 	.word	0x08017b78
 800d358:	08017ea4 	.word	0x08017ea4
 800d35c:	08017ed0 	.word	0x08017ed0
 800d360:	08017f00 	.word	0x08017f00
 800d364:	08017f34 	.word	0x08017f34
 800d368:	08019b14 	.word	0x08019b14
 800d36c:	08019b04 	.word	0x08019b04
 800d370:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d376:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800d37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d37c:	2200      	movs	r2, #0
 800d37e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d382:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d388:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d38c:	4293      	cmp	r3, r2
 800d38e:	bf28      	it	cs
 800d390:	4613      	movcs	r3, r2
 800d392:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d394:	8a7b      	ldrh	r3, [r7, #18]
 800d396:	085b      	lsrs	r3, r3, #1
 800d398:	b29a      	uxth	r2, r3
 800d39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d39c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d3aa:	005b      	lsls	r3, r3, #1
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d206      	bcs.n	800d3c0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d3b6:	005b      	lsls	r3, r3, #1
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3bc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800d3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800d3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800d3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d3d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d3d4:	f004 f818 	bl	8011408 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800d3d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3da:	7d1b      	ldrb	r3, [r3, #20]
 800d3dc:	2b06      	cmp	r3, #6
 800d3de:	d111      	bne.n	800d404 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800d3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e2:	8b5b      	ldrh	r3, [r3, #26]
 800d3e4:	f003 0310 	and.w	r3, r3, #16
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00b      	beq.n	800d404 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d3ec:	4b9d      	ldr	r3, [pc, #628]	@ (800d664 <tcp_slowtmr+0x588>)
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f2:	6a1b      	ldr	r3, [r3, #32]
 800d3f4:	1ad3      	subs	r3, r2, r3
 800d3f6:	2b28      	cmp	r3, #40	@ 0x28
 800d3f8:	d904      	bls.n	800d404 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800d3fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3fe:	3301      	adds	r3, #1
 800d400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d406:	7a5b      	ldrb	r3, [r3, #9]
 800d408:	f003 0308 	and.w	r3, r3, #8
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d04c      	beq.n	800d4aa <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800d410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d412:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d414:	2b04      	cmp	r3, #4
 800d416:	d003      	beq.n	800d420 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800d418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d41a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d41c:	2b07      	cmp	r3, #7
 800d41e:	d144      	bne.n	800d4aa <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d420:	4b90      	ldr	r3, [pc, #576]	@ (800d664 <tcp_slowtmr+0x588>)
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d426:	6a1b      	ldr	r3, [r3, #32]
 800d428:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d42c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d430:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800d434:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800d438:	498b      	ldr	r1, [pc, #556]	@ (800d668 <tcp_slowtmr+0x58c>)
 800d43a:	fba1 1303 	umull	r1, r3, r1, r3
 800d43e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d440:	429a      	cmp	r2, r3
 800d442:	d90a      	bls.n	800d45a <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800d444:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d448:	3301      	adds	r3, #1
 800d44a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800d44e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d452:	3301      	adds	r3, #1
 800d454:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d458:	e027      	b.n	800d4aa <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d45a:	4b82      	ldr	r3, [pc, #520]	@ (800d664 <tcp_slowtmr+0x588>)
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d460:	6a1b      	ldr	r3, [r3, #32]
 800d462:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d466:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d46c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d470:	4618      	mov	r0, r3
 800d472:	4b7e      	ldr	r3, [pc, #504]	@ (800d66c <tcp_slowtmr+0x590>)
 800d474:	fb00 f303 	mul.w	r3, r0, r3
 800d478:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d47a:	497b      	ldr	r1, [pc, #492]	@ (800d668 <tcp_slowtmr+0x58c>)
 800d47c:	fba1 1303 	umull	r1, r3, r1, r3
 800d480:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d482:	429a      	cmp	r2, r3
 800d484:	d911      	bls.n	800d4aa <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800d486:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d488:	f004 fac2 	bl	8011a10 <tcp_keepalive>
 800d48c:	4603      	mov	r3, r0
 800d48e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800d492:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d496:	2b00      	cmp	r3, #0
 800d498:	d107      	bne.n	800d4aa <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800d49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d49c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	b2da      	uxtb	r2, r3
 800d4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800d4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d011      	beq.n	800d4d6 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d4b2:	4b6c      	ldr	r3, [pc, #432]	@ (800d664 <tcp_slowtmr+0x588>)
 800d4b4:	681a      	ldr	r2, [r3, #0]
 800d4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4b8:	6a1b      	ldr	r3, [r3, #32]
 800d4ba:	1ad2      	subs	r2, r2, r3
 800d4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	005b      	lsls	r3, r3, #1
 800d4c8:	440b      	add	r3, r1
 800d4ca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d302      	bcc.n	800d4d6 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800d4d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4d2:	f000 fddb 	bl	800e08c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800d4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d8:	7d1b      	ldrb	r3, [r3, #20]
 800d4da:	2b03      	cmp	r3, #3
 800d4dc:	d10b      	bne.n	800d4f6 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d4de:	4b61      	ldr	r3, [pc, #388]	@ (800d664 <tcp_slowtmr+0x588>)
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e4:	6a1b      	ldr	r3, [r3, #32]
 800d4e6:	1ad3      	subs	r3, r2, r3
 800d4e8:	2b28      	cmp	r3, #40	@ 0x28
 800d4ea:	d904      	bls.n	800d4f6 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800d4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800d4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f8:	7d1b      	ldrb	r3, [r3, #20]
 800d4fa:	2b09      	cmp	r3, #9
 800d4fc:	d10b      	bne.n	800d516 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d4fe:	4b59      	ldr	r3, [pc, #356]	@ (800d664 <tcp_slowtmr+0x588>)
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	1ad3      	subs	r3, r2, r3
 800d508:	2bf0      	cmp	r3, #240	@ 0xf0
 800d50a:	d904      	bls.n	800d516 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800d50c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d510:	3301      	adds	r3, #1
 800d512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800d516:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d060      	beq.n	800d5e0 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800d51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d524:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800d526:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d528:	f000 fbfc 	bl	800dd24 <tcp_pcb_purge>
      if (prev != NULL) {
 800d52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d010      	beq.n	800d554 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d532:	4b4f      	ldr	r3, [pc, #316]	@ (800d670 <tcp_slowtmr+0x594>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d538:	429a      	cmp	r2, r3
 800d53a:	d106      	bne.n	800d54a <tcp_slowtmr+0x46e>
 800d53c:	4b4d      	ldr	r3, [pc, #308]	@ (800d674 <tcp_slowtmr+0x598>)
 800d53e:	f240 526d 	movw	r2, #1389	@ 0x56d
 800d542:	494d      	ldr	r1, [pc, #308]	@ (800d678 <tcp_slowtmr+0x59c>)
 800d544:	484d      	ldr	r0, [pc, #308]	@ (800d67c <tcp_slowtmr+0x5a0>)
 800d546:	f007 fd57 	bl	8014ff8 <iprintf>
        prev->next = pcb->next;
 800d54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d54c:	68da      	ldr	r2, [r3, #12]
 800d54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d550:	60da      	str	r2, [r3, #12]
 800d552:	e00f      	b.n	800d574 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d554:	4b46      	ldr	r3, [pc, #280]	@ (800d670 <tcp_slowtmr+0x594>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d006      	beq.n	800d56c <tcp_slowtmr+0x490>
 800d55e:	4b45      	ldr	r3, [pc, #276]	@ (800d674 <tcp_slowtmr+0x598>)
 800d560:	f240 5271 	movw	r2, #1393	@ 0x571
 800d564:	4946      	ldr	r1, [pc, #280]	@ (800d680 <tcp_slowtmr+0x5a4>)
 800d566:	4845      	ldr	r0, [pc, #276]	@ (800d67c <tcp_slowtmr+0x5a0>)
 800d568:	f007 fd46 	bl	8014ff8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	4a3f      	ldr	r2, [pc, #252]	@ (800d670 <tcp_slowtmr+0x594>)
 800d572:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800d574:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d013      	beq.n	800d5a4 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d57e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d582:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d584:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800d586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d588:	3304      	adds	r3, #4
 800d58a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d58c:	8ad2      	ldrh	r2, [r2, #22]
 800d58e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d590:	8b09      	ldrh	r1, [r1, #24]
 800d592:	9102      	str	r1, [sp, #8]
 800d594:	9201      	str	r2, [sp, #4]
 800d596:	9300      	str	r3, [sp, #0]
 800d598:	462b      	mov	r3, r5
 800d59a:	4622      	mov	r2, r4
 800d59c:	4601      	mov	r1, r0
 800d59e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d5a0:	f004 f982 	bl	80118a8 <tcp_rst>
      err_arg = pcb->callback_arg;
 800d5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5a6:	691b      	ldr	r3, [r3, #16]
 800d5a8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d5aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ac:	7d1b      	ldrb	r3, [r3, #20]
 800d5ae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d5ba:	6838      	ldr	r0, [r7, #0]
 800d5bc:	f7ff f9f0 	bl	800c9a0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d5c0:	4b30      	ldr	r3, [pc, #192]	@ (800d684 <tcp_slowtmr+0x5a8>)
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d004      	beq.n	800d5d6 <tcp_slowtmr+0x4fa>
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f06f 010c 	mvn.w	r1, #12
 800d5d2:	68b8      	ldr	r0, [r7, #8]
 800d5d4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d5d6:	4b2b      	ldr	r3, [pc, #172]	@ (800d684 <tcp_slowtmr+0x5a8>)
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d037      	beq.n	800d64e <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800d5de:	e590      	b.n	800d102 <tcp_slowtmr+0x26>
      prev = pcb;
 800d5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800d5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ec:	7f1b      	ldrb	r3, [r3, #28]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	b2da      	uxtb	r2, r3
 800d5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f8:	7f1a      	ldrb	r2, [r3, #28]
 800d5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5fc:	7f5b      	ldrb	r3, [r3, #29]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d325      	bcc.n	800d64e <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800d602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d604:	2200      	movs	r2, #0
 800d606:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800d608:	4b1e      	ldr	r3, [pc, #120]	@ (800d684 <tcp_slowtmr+0x5a8>)
 800d60a:	2200      	movs	r2, #0
 800d60c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d610:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d614:	2b00      	cmp	r3, #0
 800d616:	d00b      	beq.n	800d630 <tcp_slowtmr+0x554>
 800d618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d61a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d61e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d620:	6912      	ldr	r2, [r2, #16]
 800d622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d624:	4610      	mov	r0, r2
 800d626:	4798      	blx	r3
 800d628:	4603      	mov	r3, r0
 800d62a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d62e:	e002      	b.n	800d636 <tcp_slowtmr+0x55a>
 800d630:	2300      	movs	r3, #0
 800d632:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800d636:	4b13      	ldr	r3, [pc, #76]	@ (800d684 <tcp_slowtmr+0x5a8>)
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f47f ad60 	bne.w	800d100 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d640:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d644:	2b00      	cmp	r3, #0
 800d646:	d102      	bne.n	800d64e <tcp_slowtmr+0x572>
          tcp_output(prev);
 800d648:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d64a:	f003 fb79 	bl	8010d40 <tcp_output>
  while (pcb != NULL) {
 800d64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d650:	2b00      	cmp	r3, #0
 800d652:	f47f ad5c 	bne.w	800d10e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d656:	2300      	movs	r3, #0
 800d658:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800d65a:	4b0b      	ldr	r3, [pc, #44]	@ (800d688 <tcp_slowtmr+0x5ac>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d660:	e067      	b.n	800d732 <tcp_slowtmr+0x656>
 800d662:	bf00      	nop
 800d664:	2000b26c 	.word	0x2000b26c
 800d668:	10624dd3 	.word	0x10624dd3
 800d66c:	000124f8 	.word	0x000124f8
 800d670:	2000b278 	.word	0x2000b278
 800d674:	08017b34 	.word	0x08017b34
 800d678:	08017f6c 	.word	0x08017f6c
 800d67c:	08017b78 	.word	0x08017b78
 800d680:	08017f98 	.word	0x08017f98
 800d684:	2000b280 	.word	0x2000b280
 800d688:	2000b27c 	.word	0x2000b27c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d68e:	7d1b      	ldrb	r3, [r3, #20]
 800d690:	2b0a      	cmp	r3, #10
 800d692:	d006      	beq.n	800d6a2 <tcp_slowtmr+0x5c6>
 800d694:	4b2b      	ldr	r3, [pc, #172]	@ (800d744 <tcp_slowtmr+0x668>)
 800d696:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800d69a:	492b      	ldr	r1, [pc, #172]	@ (800d748 <tcp_slowtmr+0x66c>)
 800d69c:	482b      	ldr	r0, [pc, #172]	@ (800d74c <tcp_slowtmr+0x670>)
 800d69e:	f007 fcab 	bl	8014ff8 <iprintf>
    pcb_remove = 0;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d6a8:	4b29      	ldr	r3, [pc, #164]	@ (800d750 <tcp_slowtmr+0x674>)
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ae:	6a1b      	ldr	r3, [r3, #32]
 800d6b0:	1ad3      	subs	r3, r2, r3
 800d6b2:	2bf0      	cmp	r3, #240	@ 0xf0
 800d6b4:	d904      	bls.n	800d6c0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800d6b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d6c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d02f      	beq.n	800d728 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d6c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d6ca:	f000 fb2b 	bl	800dd24 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d010      	beq.n	800d6f6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d6d4:	4b1f      	ldr	r3, [pc, #124]	@ (800d754 <tcp_slowtmr+0x678>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d106      	bne.n	800d6ec <tcp_slowtmr+0x610>
 800d6de:	4b19      	ldr	r3, [pc, #100]	@ (800d744 <tcp_slowtmr+0x668>)
 800d6e0:	f240 52af 	movw	r2, #1455	@ 0x5af
 800d6e4:	491c      	ldr	r1, [pc, #112]	@ (800d758 <tcp_slowtmr+0x67c>)
 800d6e6:	4819      	ldr	r0, [pc, #100]	@ (800d74c <tcp_slowtmr+0x670>)
 800d6e8:	f007 fc86 	bl	8014ff8 <iprintf>
        prev->next = pcb->next;
 800d6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ee:	68da      	ldr	r2, [r3, #12]
 800d6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f2:	60da      	str	r2, [r3, #12]
 800d6f4:	e00f      	b.n	800d716 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d6f6:	4b17      	ldr	r3, [pc, #92]	@ (800d754 <tcp_slowtmr+0x678>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d006      	beq.n	800d70e <tcp_slowtmr+0x632>
 800d700:	4b10      	ldr	r3, [pc, #64]	@ (800d744 <tcp_slowtmr+0x668>)
 800d702:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d706:	4915      	ldr	r1, [pc, #84]	@ (800d75c <tcp_slowtmr+0x680>)
 800d708:	4810      	ldr	r0, [pc, #64]	@ (800d74c <tcp_slowtmr+0x670>)
 800d70a:	f007 fc75 	bl	8014ff8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d710:	68db      	ldr	r3, [r3, #12]
 800d712:	4a10      	ldr	r2, [pc, #64]	@ (800d754 <tcp_slowtmr+0x678>)
 800d714:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d718:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d720:	69f8      	ldr	r0, [r7, #28]
 800d722:	f7ff f93d 	bl	800c9a0 <tcp_free>
 800d726:	e004      	b.n	800d732 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800d728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d734:	2b00      	cmp	r3, #0
 800d736:	d1a9      	bne.n	800d68c <tcp_slowtmr+0x5b0>
    }
  }
}
 800d738:	bf00      	nop
 800d73a:	bf00      	nop
 800d73c:	3730      	adds	r7, #48	@ 0x30
 800d73e:	46bd      	mov	sp, r7
 800d740:	bdb0      	pop	{r4, r5, r7, pc}
 800d742:	bf00      	nop
 800d744:	08017b34 	.word	0x08017b34
 800d748:	08017fc4 	.word	0x08017fc4
 800d74c:	08017b78 	.word	0x08017b78
 800d750:	2000b26c 	.word	0x2000b26c
 800d754:	2000b27c 	.word	0x2000b27c
 800d758:	08017ff4 	.word	0x08017ff4
 800d75c:	0801801c 	.word	0x0801801c

0800d760 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d766:	4b2d      	ldr	r3, [pc, #180]	@ (800d81c <tcp_fasttmr+0xbc>)
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	3301      	adds	r3, #1
 800d76c:	b2da      	uxtb	r2, r3
 800d76e:	4b2b      	ldr	r3, [pc, #172]	@ (800d81c <tcp_fasttmr+0xbc>)
 800d770:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d772:	4b2b      	ldr	r3, [pc, #172]	@ (800d820 <tcp_fasttmr+0xc0>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d778:	e048      	b.n	800d80c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	7f9a      	ldrb	r2, [r3, #30]
 800d77e:	4b27      	ldr	r3, [pc, #156]	@ (800d81c <tcp_fasttmr+0xbc>)
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	429a      	cmp	r2, r3
 800d784:	d03f      	beq.n	800d806 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d786:	4b25      	ldr	r3, [pc, #148]	@ (800d81c <tcp_fasttmr+0xbc>)
 800d788:	781a      	ldrb	r2, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	8b5b      	ldrh	r3, [r3, #26]
 800d792:	f003 0301 	and.w	r3, r3, #1
 800d796:	2b00      	cmp	r3, #0
 800d798:	d010      	beq.n	800d7bc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	8b5b      	ldrh	r3, [r3, #26]
 800d79e:	f043 0302 	orr.w	r3, r3, #2
 800d7a2:	b29a      	uxth	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f003 fac9 	bl	8010d40 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	8b5b      	ldrh	r3, [r3, #26]
 800d7b2:	f023 0303 	bic.w	r3, r3, #3
 800d7b6:	b29a      	uxth	r2, r3
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	8b5b      	ldrh	r3, [r3, #26]
 800d7c0:	f003 0308 	and.w	r3, r3, #8
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d009      	beq.n	800d7dc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	8b5b      	ldrh	r3, [r3, #26]
 800d7cc:	f023 0308 	bic.w	r3, r3, #8
 800d7d0:	b29a      	uxth	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7ff fa76 	bl	800ccc8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	68db      	ldr	r3, [r3, #12]
 800d7e0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00a      	beq.n	800d800 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d7ea:	4b0e      	ldr	r3, [pc, #56]	@ (800d824 <tcp_fasttmr+0xc4>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 f819 	bl	800d828 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d7f6:	4b0b      	ldr	r3, [pc, #44]	@ (800d824 <tcp_fasttmr+0xc4>)
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d000      	beq.n	800d800 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d7fe:	e7b8      	b.n	800d772 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	607b      	str	r3, [r7, #4]
 800d804:	e002      	b.n	800d80c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d1b3      	bne.n	800d77a <tcp_fasttmr+0x1a>
    }
  }
}
 800d812:	bf00      	nop
 800d814:	bf00      	nop
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	2000b282 	.word	0x2000b282
 800d820:	2000b278 	.word	0x2000b278
 800d824:	2000b280 	.word	0x2000b280

0800d828 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d828:	b590      	push	{r4, r7, lr}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d109      	bne.n	800d84a <tcp_process_refused_data+0x22>
 800d836:	4b37      	ldr	r3, [pc, #220]	@ (800d914 <tcp_process_refused_data+0xec>)
 800d838:	f240 6209 	movw	r2, #1545	@ 0x609
 800d83c:	4936      	ldr	r1, [pc, #216]	@ (800d918 <tcp_process_refused_data+0xf0>)
 800d83e:	4837      	ldr	r0, [pc, #220]	@ (800d91c <tcp_process_refused_data+0xf4>)
 800d840:	f007 fbda 	bl	8014ff8 <iprintf>
 800d844:	f06f 030f 	mvn.w	r3, #15
 800d848:	e060      	b.n	800d90c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d84e:	7b5b      	ldrb	r3, [r3, #13]
 800d850:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d856:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2200      	movs	r2, #0
 800d85c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00b      	beq.n	800d880 <tcp_process_refused_data+0x58>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6918      	ldr	r0, [r3, #16]
 800d872:	2300      	movs	r3, #0
 800d874:	68ba      	ldr	r2, [r7, #8]
 800d876:	6879      	ldr	r1, [r7, #4]
 800d878:	47a0      	blx	r4
 800d87a:	4603      	mov	r3, r0
 800d87c:	73fb      	strb	r3, [r7, #15]
 800d87e:	e007      	b.n	800d890 <tcp_process_refused_data+0x68>
 800d880:	2300      	movs	r3, #0
 800d882:	68ba      	ldr	r2, [r7, #8]
 800d884:	6879      	ldr	r1, [r7, #4]
 800d886:	2000      	movs	r0, #0
 800d888:	f000 f8a4 	bl	800d9d4 <tcp_recv_null>
 800d88c:	4603      	mov	r3, r0
 800d88e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d12a      	bne.n	800d8ee <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d898:	7bbb      	ldrb	r3, [r7, #14]
 800d89a:	f003 0320 	and.w	r3, r3, #32
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d033      	beq.n	800d90a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8a6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d8aa:	d005      	beq.n	800d8b8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	b29a      	uxth	r2, r3
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00b      	beq.n	800d8da <tcp_process_refused_data+0xb2>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6918      	ldr	r0, [r3, #16]
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	6879      	ldr	r1, [r7, #4]
 800d8d2:	47a0      	blx	r4
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	73fb      	strb	r3, [r7, #15]
 800d8d8:	e001      	b.n	800d8de <tcp_process_refused_data+0xb6>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d8de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8e2:	f113 0f0d 	cmn.w	r3, #13
 800d8e6:	d110      	bne.n	800d90a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d8e8:	f06f 030c 	mvn.w	r3, #12
 800d8ec:	e00e      	b.n	800d90c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d8ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8f2:	f113 0f0d 	cmn.w	r3, #13
 800d8f6:	d102      	bne.n	800d8fe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d8f8:	f06f 030c 	mvn.w	r3, #12
 800d8fc:	e006      	b.n	800d90c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	68ba      	ldr	r2, [r7, #8]
 800d902:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800d904:	f06f 0304 	mvn.w	r3, #4
 800d908:	e000      	b.n	800d90c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d90a:	2300      	movs	r3, #0
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3714      	adds	r7, #20
 800d910:	46bd      	mov	sp, r7
 800d912:	bd90      	pop	{r4, r7, pc}
 800d914:	08017b34 	.word	0x08017b34
 800d918:	08018044 	.word	0x08018044
 800d91c:	08017b78 	.word	0x08017b78

0800d920 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b084      	sub	sp, #16
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d928:	e007      	b.n	800d93a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 f80a 	bl	800d94a <tcp_seg_free>
    seg = next;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d1f4      	bne.n	800d92a <tcp_segs_free+0xa>
  }
}
 800d940:	bf00      	nop
 800d942:	bf00      	nop
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}

0800d94a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d94a:	b580      	push	{r7, lr}
 800d94c:	b082      	sub	sp, #8
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00c      	beq.n	800d972 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d004      	beq.n	800d96a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	4618      	mov	r0, r3
 800d966:	f7fe fcd9 	bl	800c31c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d96a:	6879      	ldr	r1, [r7, #4]
 800d96c:	2003      	movs	r0, #3
 800d96e:	f7fd fe5f 	bl	800b630 <memp_free>
  }
}
 800d972:	bf00      	nop
 800d974:	3708      	adds	r7, #8
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
	...

0800d97c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d106      	bne.n	800d998 <tcp_seg_copy+0x1c>
 800d98a:	4b0f      	ldr	r3, [pc, #60]	@ (800d9c8 <tcp_seg_copy+0x4c>)
 800d98c:	f240 6282 	movw	r2, #1666	@ 0x682
 800d990:	490e      	ldr	r1, [pc, #56]	@ (800d9cc <tcp_seg_copy+0x50>)
 800d992:	480f      	ldr	r0, [pc, #60]	@ (800d9d0 <tcp_seg_copy+0x54>)
 800d994:	f007 fb30 	bl	8014ff8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d998:	2003      	movs	r0, #3
 800d99a:	f7fd fdd9 	bl	800b550 <memp_malloc>
 800d99e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d101      	bne.n	800d9aa <tcp_seg_copy+0x2e>
    return NULL;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	e00a      	b.n	800d9c0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d9aa:	2210      	movs	r2, #16
 800d9ac:	6879      	ldr	r1, [r7, #4]
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	f007 fc03 	bl	80151ba <memcpy>
  pbuf_ref(cseg->p);
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7fe fd4f 	bl	800c45c <pbuf_ref>
  return cseg;
 800d9be:	68fb      	ldr	r3, [r7, #12]
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3710      	adds	r7, #16
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	08017b34 	.word	0x08017b34
 800d9cc:	08018088 	.word	0x08018088
 800d9d0:	08017b78 	.word	0x08017b78

0800d9d4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	607a      	str	r2, [r7, #4]
 800d9e0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d109      	bne.n	800d9fc <tcp_recv_null+0x28>
 800d9e8:	4b12      	ldr	r3, [pc, #72]	@ (800da34 <tcp_recv_null+0x60>)
 800d9ea:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d9ee:	4912      	ldr	r1, [pc, #72]	@ (800da38 <tcp_recv_null+0x64>)
 800d9f0:	4812      	ldr	r0, [pc, #72]	@ (800da3c <tcp_recv_null+0x68>)
 800d9f2:	f007 fb01 	bl	8014ff8 <iprintf>
 800d9f6:	f06f 030f 	mvn.w	r3, #15
 800d9fa:	e016      	b.n	800da2a <tcp_recv_null+0x56>

  if (p != NULL) {
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d009      	beq.n	800da16 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	891b      	ldrh	r3, [r3, #8]
 800da06:	4619      	mov	r1, r3
 800da08:	68b8      	ldr	r0, [r7, #8]
 800da0a:	f7ff fb17 	bl	800d03c <tcp_recved>
    pbuf_free(p);
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f7fe fc84 	bl	800c31c <pbuf_free>
 800da14:	e008      	b.n	800da28 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800da16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d104      	bne.n	800da28 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800da1e:	68b8      	ldr	r0, [r7, #8]
 800da20:	f7ff f9bc 	bl	800cd9c <tcp_close>
 800da24:	4603      	mov	r3, r0
 800da26:	e000      	b.n	800da2a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800da28:	2300      	movs	r3, #0
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3710      	adds	r7, #16
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	08017b34 	.word	0x08017b34
 800da38:	080180a4 	.word	0x080180a4
 800da3c:	08017b78 	.word	0x08017b78

0800da40 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b086      	sub	sp, #24
 800da44:	af00      	add	r7, sp, #0
 800da46:	4603      	mov	r3, r0
 800da48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800da4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	db01      	blt.n	800da56 <tcp_kill_prio+0x16>
 800da52:	79fb      	ldrb	r3, [r7, #7]
 800da54:	e000      	b.n	800da58 <tcp_kill_prio+0x18>
 800da56:	237f      	movs	r3, #127	@ 0x7f
 800da58:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800da5a:	7afb      	ldrb	r3, [r7, #11]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d034      	beq.n	800daca <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800da60:	7afb      	ldrb	r3, [r7, #11]
 800da62:	3b01      	subs	r3, #1
 800da64:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800da66:	2300      	movs	r3, #0
 800da68:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800da6a:	2300      	movs	r3, #0
 800da6c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800da6e:	4b19      	ldr	r3, [pc, #100]	@ (800dad4 <tcp_kill_prio+0x94>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	617b      	str	r3, [r7, #20]
 800da74:	e01f      	b.n	800dab6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	7d5b      	ldrb	r3, [r3, #21]
 800da7a:	7afa      	ldrb	r2, [r7, #11]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d80c      	bhi.n	800da9a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800da84:	7afa      	ldrb	r2, [r7, #11]
 800da86:	429a      	cmp	r2, r3
 800da88:	d112      	bne.n	800dab0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800da8a:	4b13      	ldr	r3, [pc, #76]	@ (800dad8 <tcp_kill_prio+0x98>)
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	6a1b      	ldr	r3, [r3, #32]
 800da92:	1ad3      	subs	r3, r2, r3
 800da94:	68fa      	ldr	r2, [r7, #12]
 800da96:	429a      	cmp	r2, r3
 800da98:	d80a      	bhi.n	800dab0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800da9a:	4b0f      	ldr	r3, [pc, #60]	@ (800dad8 <tcp_kill_prio+0x98>)
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	6a1b      	ldr	r3, [r3, #32]
 800daa2:	1ad3      	subs	r3, r2, r3
 800daa4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	7d5b      	ldrb	r3, [r3, #21]
 800daae:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	68db      	ldr	r3, [r3, #12]
 800dab4:	617b      	str	r3, [r7, #20]
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d1dc      	bne.n	800da76 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d004      	beq.n	800dacc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dac2:	6938      	ldr	r0, [r7, #16]
 800dac4:	f7ff fa54 	bl	800cf70 <tcp_abort>
 800dac8:	e000      	b.n	800dacc <tcp_kill_prio+0x8c>
    return;
 800daca:	bf00      	nop
  }
}
 800dacc:	3718      	adds	r7, #24
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	2000b278 	.word	0x2000b278
 800dad8:	2000b26c 	.word	0x2000b26c

0800dadc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b086      	sub	sp, #24
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	4603      	mov	r3, r0
 800dae4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dae6:	79fb      	ldrb	r3, [r7, #7]
 800dae8:	2b08      	cmp	r3, #8
 800daea:	d009      	beq.n	800db00 <tcp_kill_state+0x24>
 800daec:	79fb      	ldrb	r3, [r7, #7]
 800daee:	2b09      	cmp	r3, #9
 800daf0:	d006      	beq.n	800db00 <tcp_kill_state+0x24>
 800daf2:	4b1a      	ldr	r3, [pc, #104]	@ (800db5c <tcp_kill_state+0x80>)
 800daf4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800daf8:	4919      	ldr	r1, [pc, #100]	@ (800db60 <tcp_kill_state+0x84>)
 800dafa:	481a      	ldr	r0, [pc, #104]	@ (800db64 <tcp_kill_state+0x88>)
 800dafc:	f007 fa7c 	bl	8014ff8 <iprintf>

  inactivity = 0;
 800db00:	2300      	movs	r3, #0
 800db02:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800db04:	2300      	movs	r3, #0
 800db06:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db08:	4b17      	ldr	r3, [pc, #92]	@ (800db68 <tcp_kill_state+0x8c>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	617b      	str	r3, [r7, #20]
 800db0e:	e017      	b.n	800db40 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	7d1b      	ldrb	r3, [r3, #20]
 800db14:	79fa      	ldrb	r2, [r7, #7]
 800db16:	429a      	cmp	r2, r3
 800db18:	d10f      	bne.n	800db3a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800db1a:	4b14      	ldr	r3, [pc, #80]	@ (800db6c <tcp_kill_state+0x90>)
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	6a1b      	ldr	r3, [r3, #32]
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	68fa      	ldr	r2, [r7, #12]
 800db26:	429a      	cmp	r2, r3
 800db28:	d807      	bhi.n	800db3a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800db2a:	4b10      	ldr	r3, [pc, #64]	@ (800db6c <tcp_kill_state+0x90>)
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	6a1b      	ldr	r3, [r3, #32]
 800db32:	1ad3      	subs	r3, r2, r3
 800db34:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	617b      	str	r3, [r7, #20]
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d1e4      	bne.n	800db10 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d003      	beq.n	800db54 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800db4c:	2100      	movs	r1, #0
 800db4e:	6938      	ldr	r0, [r7, #16]
 800db50:	f7ff f950 	bl	800cdf4 <tcp_abandon>
  }
}
 800db54:	bf00      	nop
 800db56:	3718      	adds	r7, #24
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	08017b34 	.word	0x08017b34
 800db60:	080180c0 	.word	0x080180c0
 800db64:	08017b78 	.word	0x08017b78
 800db68:	2000b278 	.word	0x2000b278
 800db6c:	2000b26c 	.word	0x2000b26c

0800db70 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800db76:	2300      	movs	r3, #0
 800db78:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800db7a:	2300      	movs	r3, #0
 800db7c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db7e:	4b12      	ldr	r3, [pc, #72]	@ (800dbc8 <tcp_kill_timewait+0x58>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	60fb      	str	r3, [r7, #12]
 800db84:	e012      	b.n	800dbac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800db86:	4b11      	ldr	r3, [pc, #68]	@ (800dbcc <tcp_kill_timewait+0x5c>)
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	6a1b      	ldr	r3, [r3, #32]
 800db8e:	1ad3      	subs	r3, r2, r3
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	429a      	cmp	r2, r3
 800db94:	d807      	bhi.n	800dba6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800db96:	4b0d      	ldr	r3, [pc, #52]	@ (800dbcc <tcp_kill_timewait+0x5c>)
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6a1b      	ldr	r3, [r3, #32]
 800db9e:	1ad3      	subs	r3, r2, r3
 800dba0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	60fb      	str	r3, [r7, #12]
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d1e9      	bne.n	800db86 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d002      	beq.n	800dbbe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dbb8:	68b8      	ldr	r0, [r7, #8]
 800dbba:	f7ff f9d9 	bl	800cf70 <tcp_abort>
  }
}
 800dbbe:	bf00      	nop
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	2000b27c 	.word	0x2000b27c
 800dbcc:	2000b26c 	.word	0x2000b26c

0800dbd0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dbd6:	4b10      	ldr	r3, [pc, #64]	@ (800dc18 <tcp_handle_closepend+0x48>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dbdc:	e014      	b.n	800dc08 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	8b5b      	ldrh	r3, [r3, #26]
 800dbe8:	f003 0308 	and.w	r3, r3, #8
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d009      	beq.n	800dc04 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	8b5b      	ldrh	r3, [r3, #26]
 800dbf4:	f023 0308 	bic.w	r3, r3, #8
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f7ff f862 	bl	800ccc8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d1e7      	bne.n	800dbde <tcp_handle_closepend+0xe>
  }
}
 800dc0e:	bf00      	nop
 800dc10:	bf00      	nop
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	2000b278 	.word	0x2000b278

0800dc1c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	4603      	mov	r3, r0
 800dc24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc26:	2001      	movs	r0, #1
 800dc28:	f7fd fc92 	bl	800b550 <memp_malloc>
 800dc2c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d126      	bne.n	800dc82 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800dc34:	f7ff ffcc 	bl	800dbd0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800dc38:	f7ff ff9a 	bl	800db70 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc3c:	2001      	movs	r0, #1
 800dc3e:	f7fd fc87 	bl	800b550 <memp_malloc>
 800dc42:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d11b      	bne.n	800dc82 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800dc4a:	2009      	movs	r0, #9
 800dc4c:	f7ff ff46 	bl	800dadc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc50:	2001      	movs	r0, #1
 800dc52:	f7fd fc7d 	bl	800b550 <memp_malloc>
 800dc56:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d111      	bne.n	800dc82 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800dc5e:	2008      	movs	r0, #8
 800dc60:	f7ff ff3c 	bl	800dadc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc64:	2001      	movs	r0, #1
 800dc66:	f7fd fc73 	bl	800b550 <memp_malloc>
 800dc6a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d107      	bne.n	800dc82 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800dc72:	79fb      	ldrb	r3, [r7, #7]
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7ff fee3 	bl	800da40 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc7a:	2001      	movs	r0, #1
 800dc7c:	f7fd fc68 	bl	800b550 <memp_malloc>
 800dc80:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d03f      	beq.n	800dd08 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dc88:	229c      	movs	r2, #156	@ 0x9c
 800dc8a:	2100      	movs	r1, #0
 800dc8c:	68f8      	ldr	r0, [r7, #12]
 800dc8e:	f007 fa18 	bl	80150c2 <memset>
    pcb->prio = prio;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	79fa      	ldrb	r2, [r7, #7]
 800dc96:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800dc9e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800dca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	22ff      	movs	r2, #255	@ 0xff
 800dcb6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800dcbe:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2206      	movs	r2, #6
 800dcc4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2206      	movs	r2, #6
 800dccc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dcd4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2201      	movs	r2, #1
 800dcda:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800dcde:	4b0d      	ldr	r3, [pc, #52]	@ (800dd14 <tcp_alloc+0xf8>)
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dce6:	4b0c      	ldr	r3, [pc, #48]	@ (800dd18 <tcp_alloc+0xfc>)
 800dce8:	781a      	ldrb	r2, [r3, #0]
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800dcf4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	4a08      	ldr	r2, [pc, #32]	@ (800dd1c <tcp_alloc+0x100>)
 800dcfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	4a07      	ldr	r2, [pc, #28]	@ (800dd20 <tcp_alloc+0x104>)
 800dd04:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dd08:	68fb      	ldr	r3, [r7, #12]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	2000b26c 	.word	0x2000b26c
 800dd18:	2000b282 	.word	0x2000b282
 800dd1c:	0800d9d5 	.word	0x0800d9d5
 800dd20:	006ddd00 	.word	0x006ddd00

0800dd24 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d107      	bne.n	800dd42 <tcp_pcb_purge+0x1e>
 800dd32:	4b21      	ldr	r3, [pc, #132]	@ (800ddb8 <tcp_pcb_purge+0x94>)
 800dd34:	f640 0251 	movw	r2, #2129	@ 0x851
 800dd38:	4920      	ldr	r1, [pc, #128]	@ (800ddbc <tcp_pcb_purge+0x98>)
 800dd3a:	4821      	ldr	r0, [pc, #132]	@ (800ddc0 <tcp_pcb_purge+0x9c>)
 800dd3c:	f007 f95c 	bl	8014ff8 <iprintf>
 800dd40:	e037      	b.n	800ddb2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	7d1b      	ldrb	r3, [r3, #20]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d033      	beq.n	800ddb2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800dd4e:	2b0a      	cmp	r3, #10
 800dd50:	d02f      	beq.n	800ddb2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d02b      	beq.n	800ddb2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d007      	beq.n	800dd72 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fe fad8 	bl	800c31c <pbuf_free>
      pcb->refused_data = NULL;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d002      	beq.n	800dd80 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 f986 	bl	800e08c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dd86:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7ff fdc7 	bl	800d920 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7ff fdc2 	bl	800d920 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2200      	movs	r2, #0
 800ddae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ddb2:	3708      	adds	r7, #8
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	08017b34 	.word	0x08017b34
 800ddbc:	08018180 	.word	0x08018180
 800ddc0:	08017b78 	.word	0x08017b78

0800ddc4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d106      	bne.n	800dde2 <tcp_pcb_remove+0x1e>
 800ddd4:	4b3e      	ldr	r3, [pc, #248]	@ (800ded0 <tcp_pcb_remove+0x10c>)
 800ddd6:	f640 0283 	movw	r2, #2179	@ 0x883
 800ddda:	493e      	ldr	r1, [pc, #248]	@ (800ded4 <tcp_pcb_remove+0x110>)
 800dddc:	483e      	ldr	r0, [pc, #248]	@ (800ded8 <tcp_pcb_remove+0x114>)
 800ddde:	f007 f90b 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d106      	bne.n	800ddf6 <tcp_pcb_remove+0x32>
 800dde8:	4b39      	ldr	r3, [pc, #228]	@ (800ded0 <tcp_pcb_remove+0x10c>)
 800ddea:	f640 0284 	movw	r2, #2180	@ 0x884
 800ddee:	493b      	ldr	r1, [pc, #236]	@ (800dedc <tcp_pcb_remove+0x118>)
 800ddf0:	4839      	ldr	r0, [pc, #228]	@ (800ded8 <tcp_pcb_remove+0x114>)
 800ddf2:	f007 f901 	bl	8014ff8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	683a      	ldr	r2, [r7, #0]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d105      	bne.n	800de0c <tcp_pcb_remove+0x48>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	68da      	ldr	r2, [r3, #12]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	601a      	str	r2, [r3, #0]
 800de0a:	e013      	b.n	800de34 <tcp_pcb_remove+0x70>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	60fb      	str	r3, [r7, #12]
 800de12:	e00c      	b.n	800de2e <tcp_pcb_remove+0x6a>
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	683a      	ldr	r2, [r7, #0]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d104      	bne.n	800de28 <tcp_pcb_remove+0x64>
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	68da      	ldr	r2, [r3, #12]
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	60da      	str	r2, [r3, #12]
 800de26:	e005      	b.n	800de34 <tcp_pcb_remove+0x70>
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	60fb      	str	r3, [r7, #12]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d1ef      	bne.n	800de14 <tcp_pcb_remove+0x50>
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	2200      	movs	r2, #0
 800de38:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800de3a:	6838      	ldr	r0, [r7, #0]
 800de3c:	f7ff ff72 	bl	800dd24 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	7d1b      	ldrb	r3, [r3, #20]
 800de44:	2b0a      	cmp	r3, #10
 800de46:	d013      	beq.n	800de70 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d00f      	beq.n	800de70 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	8b5b      	ldrh	r3, [r3, #26]
 800de54:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d009      	beq.n	800de70 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	8b5b      	ldrh	r3, [r3, #26]
 800de60:	f043 0302 	orr.w	r3, r3, #2
 800de64:	b29a      	uxth	r2, r3
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800de6a:	6838      	ldr	r0, [r7, #0]
 800de6c:	f002 ff68 	bl	8010d40 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	7d1b      	ldrb	r3, [r3, #20]
 800de74:	2b01      	cmp	r3, #1
 800de76:	d020      	beq.n	800deba <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d006      	beq.n	800de8e <tcp_pcb_remove+0xca>
 800de80:	4b13      	ldr	r3, [pc, #76]	@ (800ded0 <tcp_pcb_remove+0x10c>)
 800de82:	f640 0293 	movw	r2, #2195	@ 0x893
 800de86:	4916      	ldr	r1, [pc, #88]	@ (800dee0 <tcp_pcb_remove+0x11c>)
 800de88:	4813      	ldr	r0, [pc, #76]	@ (800ded8 <tcp_pcb_remove+0x114>)
 800de8a:	f007 f8b5 	bl	8014ff8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de92:	2b00      	cmp	r3, #0
 800de94:	d006      	beq.n	800dea4 <tcp_pcb_remove+0xe0>
 800de96:	4b0e      	ldr	r3, [pc, #56]	@ (800ded0 <tcp_pcb_remove+0x10c>)
 800de98:	f640 0294 	movw	r2, #2196	@ 0x894
 800de9c:	4911      	ldr	r1, [pc, #68]	@ (800dee4 <tcp_pcb_remove+0x120>)
 800de9e:	480e      	ldr	r0, [pc, #56]	@ (800ded8 <tcp_pcb_remove+0x114>)
 800dea0:	f007 f8aa 	bl	8014ff8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d006      	beq.n	800deba <tcp_pcb_remove+0xf6>
 800deac:	4b08      	ldr	r3, [pc, #32]	@ (800ded0 <tcp_pcb_remove+0x10c>)
 800deae:	f640 0296 	movw	r2, #2198	@ 0x896
 800deb2:	490d      	ldr	r1, [pc, #52]	@ (800dee8 <tcp_pcb_remove+0x124>)
 800deb4:	4808      	ldr	r0, [pc, #32]	@ (800ded8 <tcp_pcb_remove+0x114>)
 800deb6:	f007 f89f 	bl	8014ff8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	2200      	movs	r2, #0
 800debe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	2200      	movs	r2, #0
 800dec4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dec6:	bf00      	nop
 800dec8:	3710      	adds	r7, #16
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	08017b34 	.word	0x08017b34
 800ded4:	0801819c 	.word	0x0801819c
 800ded8:	08017b78 	.word	0x08017b78
 800dedc:	080181b8 	.word	0x080181b8
 800dee0:	080181d8 	.word	0x080181d8
 800dee4:	080181f0 	.word	0x080181f0
 800dee8:	0801820c 	.word	0x0801820c

0800deec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d106      	bne.n	800df08 <tcp_next_iss+0x1c>
 800defa:	4b0a      	ldr	r3, [pc, #40]	@ (800df24 <tcp_next_iss+0x38>)
 800defc:	f640 02af 	movw	r2, #2223	@ 0x8af
 800df00:	4909      	ldr	r1, [pc, #36]	@ (800df28 <tcp_next_iss+0x3c>)
 800df02:	480a      	ldr	r0, [pc, #40]	@ (800df2c <tcp_next_iss+0x40>)
 800df04:	f007 f878 	bl	8014ff8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800df08:	4b09      	ldr	r3, [pc, #36]	@ (800df30 <tcp_next_iss+0x44>)
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	4b09      	ldr	r3, [pc, #36]	@ (800df34 <tcp_next_iss+0x48>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4413      	add	r3, r2
 800df12:	4a07      	ldr	r2, [pc, #28]	@ (800df30 <tcp_next_iss+0x44>)
 800df14:	6013      	str	r3, [r2, #0]
  return iss;
 800df16:	4b06      	ldr	r3, [pc, #24]	@ (800df30 <tcp_next_iss+0x44>)
 800df18:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3708      	adds	r7, #8
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	08017b34 	.word	0x08017b34
 800df28:	08018224 	.word	0x08018224
 800df2c:	08017b78 	.word	0x08017b78
 800df30:	200000c4 	.word	0x200000c4
 800df34:	2000b26c 	.word	0x2000b26c

0800df38 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	4603      	mov	r3, r0
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
 800df44:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d106      	bne.n	800df5a <tcp_eff_send_mss_netif+0x22>
 800df4c:	4b14      	ldr	r3, [pc, #80]	@ (800dfa0 <tcp_eff_send_mss_netif+0x68>)
 800df4e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800df52:	4914      	ldr	r1, [pc, #80]	@ (800dfa4 <tcp_eff_send_mss_netif+0x6c>)
 800df54:	4814      	ldr	r0, [pc, #80]	@ (800dfa8 <tcp_eff_send_mss_netif+0x70>)
 800df56:	f007 f84f 	bl	8014ff8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d101      	bne.n	800df64 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800df60:	89fb      	ldrh	r3, [r7, #14]
 800df62:	e019      	b.n	800df98 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800df68:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800df6a:	8afb      	ldrh	r3, [r7, #22]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d012      	beq.n	800df96 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800df70:	2328      	movs	r3, #40	@ 0x28
 800df72:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800df74:	8afa      	ldrh	r2, [r7, #22]
 800df76:	8abb      	ldrh	r3, [r7, #20]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d904      	bls.n	800df86 <tcp_eff_send_mss_netif+0x4e>
 800df7c:	8afa      	ldrh	r2, [r7, #22]
 800df7e:	8abb      	ldrh	r3, [r7, #20]
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	b29b      	uxth	r3, r3
 800df84:	e000      	b.n	800df88 <tcp_eff_send_mss_netif+0x50>
 800df86:	2300      	movs	r3, #0
 800df88:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800df8a:	8a7a      	ldrh	r2, [r7, #18]
 800df8c:	89fb      	ldrh	r3, [r7, #14]
 800df8e:	4293      	cmp	r3, r2
 800df90:	bf28      	it	cs
 800df92:	4613      	movcs	r3, r2
 800df94:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800df96:	89fb      	ldrh	r3, [r7, #14]
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3718      	adds	r7, #24
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	08017b34 	.word	0x08017b34
 800dfa4:	08018240 	.word	0x08018240
 800dfa8:	08017b78 	.word	0x08017b78

0800dfac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d119      	bne.n	800dff4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dfc0:	4b10      	ldr	r3, [pc, #64]	@ (800e004 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dfc2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800dfc6:	4910      	ldr	r1, [pc, #64]	@ (800e008 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dfc8:	4810      	ldr	r0, [pc, #64]	@ (800e00c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dfca:	f007 f815 	bl	8014ff8 <iprintf>

  while (pcb != NULL) {
 800dfce:	e011      	b.n	800dff4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d108      	bne.n	800dfee <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f7fe ffc4 	bl	800cf70 <tcp_abort>
      pcb = next;
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	60fb      	str	r3, [r7, #12]
 800dfec:	e002      	b.n	800dff4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d1ea      	bne.n	800dfd0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dffa:	bf00      	nop
 800dffc:	bf00      	nop
 800dffe:	3710      	adds	r7, #16
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	08017b34 	.word	0x08017b34
 800e008:	08018268 	.word	0x08018268
 800e00c:	08017b78 	.word	0x08017b78

0800e010 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d02a      	beq.n	800e076 <tcp_netif_ip_addr_changed+0x66>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d026      	beq.n	800e076 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e028:	4b15      	ldr	r3, [pc, #84]	@ (800e080 <tcp_netif_ip_addr_changed+0x70>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4619      	mov	r1, r3
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f7ff ffbc 	bl	800dfac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e034:	4b13      	ldr	r3, [pc, #76]	@ (800e084 <tcp_netif_ip_addr_changed+0x74>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4619      	mov	r1, r3
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f7ff ffb6 	bl	800dfac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d017      	beq.n	800e076 <tcp_netif_ip_addr_changed+0x66>
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d013      	beq.n	800e076 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e04e:	4b0e      	ldr	r3, [pc, #56]	@ (800e088 <tcp_netif_ip_addr_changed+0x78>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	60fb      	str	r3, [r7, #12]
 800e054:	e00c      	b.n	800e070 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d103      	bne.n	800e06a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	60fb      	str	r3, [r7, #12]
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d1ef      	bne.n	800e056 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e076:	bf00      	nop
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	2000b278 	.word	0x2000b278
 800e084:	2000b270 	.word	0x2000b270
 800e088:	2000b274 	.word	0x2000b274

0800e08c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d007      	beq.n	800e0ac <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7ff fc3d 	bl	800d920 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e0ac:	bf00      	nop
 800e0ae:	3708      	adds	r7, #8
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e0b4:	b590      	push	{r4, r7, lr}
 800e0b6:	b08d      	sub	sp, #52	@ 0x34
 800e0b8:	af04      	add	r7, sp, #16
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d105      	bne.n	800e0d0 <tcp_input+0x1c>
 800e0c4:	4b9b      	ldr	r3, [pc, #620]	@ (800e334 <tcp_input+0x280>)
 800e0c6:	2283      	movs	r2, #131	@ 0x83
 800e0c8:	499b      	ldr	r1, [pc, #620]	@ (800e338 <tcp_input+0x284>)
 800e0ca:	489c      	ldr	r0, [pc, #624]	@ (800e33c <tcp_input+0x288>)
 800e0cc:	f006 ff94 	bl	8014ff8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	4a9a      	ldr	r2, [pc, #616]	@ (800e340 <tcp_input+0x28c>)
 800e0d6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	895b      	ldrh	r3, [r3, #10]
 800e0dc:	2b13      	cmp	r3, #19
 800e0de:	f240 83d1 	bls.w	800e884 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e0e2:	4b98      	ldr	r3, [pc, #608]	@ (800e344 <tcp_input+0x290>)
 800e0e4:	695b      	ldr	r3, [r3, #20]
 800e0e6:	4a97      	ldr	r2, [pc, #604]	@ (800e344 <tcp_input+0x290>)
 800e0e8:	6812      	ldr	r2, [r2, #0]
 800e0ea:	4611      	mov	r1, r2
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f005 ff2d 	bl	8013f4c <ip4_addr_isbroadcast_u32>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f040 83c7 	bne.w	800e888 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e0fa:	4b92      	ldr	r3, [pc, #584]	@ (800e344 <tcp_input+0x290>)
 800e0fc:	695b      	ldr	r3, [r3, #20]
 800e0fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e102:	2be0      	cmp	r3, #224	@ 0xe0
 800e104:	f000 83c0 	beq.w	800e888 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e108:	4b8d      	ldr	r3, [pc, #564]	@ (800e340 <tcp_input+0x28c>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	899b      	ldrh	r3, [r3, #12]
 800e10e:	b29b      	uxth	r3, r3
 800e110:	4618      	mov	r0, r3
 800e112:	f7fc fda5 	bl	800ac60 <lwip_htons>
 800e116:	4603      	mov	r3, r0
 800e118:	0b1b      	lsrs	r3, r3, #12
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e122:	7cbb      	ldrb	r3, [r7, #18]
 800e124:	2b13      	cmp	r3, #19
 800e126:	f240 83b1 	bls.w	800e88c <tcp_input+0x7d8>
 800e12a:	7cbb      	ldrb	r3, [r7, #18]
 800e12c:	b29a      	uxth	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	891b      	ldrh	r3, [r3, #8]
 800e132:	429a      	cmp	r2, r3
 800e134:	f200 83aa 	bhi.w	800e88c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e138:	7cbb      	ldrb	r3, [r7, #18]
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	3b14      	subs	r3, #20
 800e13e:	b29a      	uxth	r2, r3
 800e140:	4b81      	ldr	r3, [pc, #516]	@ (800e348 <tcp_input+0x294>)
 800e142:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e144:	4b81      	ldr	r3, [pc, #516]	@ (800e34c <tcp_input+0x298>)
 800e146:	2200      	movs	r2, #0
 800e148:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	895a      	ldrh	r2, [r3, #10]
 800e14e:	7cbb      	ldrb	r3, [r7, #18]
 800e150:	b29b      	uxth	r3, r3
 800e152:	429a      	cmp	r2, r3
 800e154:	d309      	bcc.n	800e16a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e156:	4b7c      	ldr	r3, [pc, #496]	@ (800e348 <tcp_input+0x294>)
 800e158:	881a      	ldrh	r2, [r3, #0]
 800e15a:	4b7d      	ldr	r3, [pc, #500]	@ (800e350 <tcp_input+0x29c>)
 800e15c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e15e:	7cbb      	ldrb	r3, [r7, #18]
 800e160:	4619      	mov	r1, r3
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7fe f854 	bl	800c210 <pbuf_remove_header>
 800e168:	e04e      	b.n	800e208 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d105      	bne.n	800e17e <tcp_input+0xca>
 800e172:	4b70      	ldr	r3, [pc, #448]	@ (800e334 <tcp_input+0x280>)
 800e174:	22c2      	movs	r2, #194	@ 0xc2
 800e176:	4977      	ldr	r1, [pc, #476]	@ (800e354 <tcp_input+0x2a0>)
 800e178:	4870      	ldr	r0, [pc, #448]	@ (800e33c <tcp_input+0x288>)
 800e17a:	f006 ff3d 	bl	8014ff8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e17e:	2114      	movs	r1, #20
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7fe f845 	bl	800c210 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	895a      	ldrh	r2, [r3, #10]
 800e18a:	4b71      	ldr	r3, [pc, #452]	@ (800e350 <tcp_input+0x29c>)
 800e18c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e18e:	4b6e      	ldr	r3, [pc, #440]	@ (800e348 <tcp_input+0x294>)
 800e190:	881a      	ldrh	r2, [r3, #0]
 800e192:	4b6f      	ldr	r3, [pc, #444]	@ (800e350 <tcp_input+0x29c>)
 800e194:	881b      	ldrh	r3, [r3, #0]
 800e196:	1ad3      	subs	r3, r2, r3
 800e198:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e19a:	4b6d      	ldr	r3, [pc, #436]	@ (800e350 <tcp_input+0x29c>)
 800e19c:	881b      	ldrh	r3, [r3, #0]
 800e19e:	4619      	mov	r1, r3
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f7fe f835 	bl	800c210 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	895b      	ldrh	r3, [r3, #10]
 800e1ac:	8a3a      	ldrh	r2, [r7, #16]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	f200 836e 	bhi.w	800e890 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	4a64      	ldr	r2, [pc, #400]	@ (800e34c <tcp_input+0x298>)
 800e1bc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	8a3a      	ldrh	r2, [r7, #16]
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fe f822 	bl	800c210 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	891a      	ldrh	r2, [r3, #8]
 800e1d0:	8a3b      	ldrh	r3, [r7, #16]
 800e1d2:	1ad3      	subs	r3, r2, r3
 800e1d4:	b29a      	uxth	r2, r3
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	895b      	ldrh	r3, [r3, #10]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d005      	beq.n	800e1ee <tcp_input+0x13a>
 800e1e2:	4b54      	ldr	r3, [pc, #336]	@ (800e334 <tcp_input+0x280>)
 800e1e4:	22df      	movs	r2, #223	@ 0xdf
 800e1e6:	495c      	ldr	r1, [pc, #368]	@ (800e358 <tcp_input+0x2a4>)
 800e1e8:	4854      	ldr	r0, [pc, #336]	@ (800e33c <tcp_input+0x288>)
 800e1ea:	f006 ff05 	bl	8014ff8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	891a      	ldrh	r2, [r3, #8]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	891b      	ldrh	r3, [r3, #8]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d005      	beq.n	800e208 <tcp_input+0x154>
 800e1fc:	4b4d      	ldr	r3, [pc, #308]	@ (800e334 <tcp_input+0x280>)
 800e1fe:	22e0      	movs	r2, #224	@ 0xe0
 800e200:	4956      	ldr	r1, [pc, #344]	@ (800e35c <tcp_input+0x2a8>)
 800e202:	484e      	ldr	r0, [pc, #312]	@ (800e33c <tcp_input+0x288>)
 800e204:	f006 fef8 	bl	8014ff8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e208:	4b4d      	ldr	r3, [pc, #308]	@ (800e340 <tcp_input+0x28c>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	881b      	ldrh	r3, [r3, #0]
 800e20e:	b29b      	uxth	r3, r3
 800e210:	4a4b      	ldr	r2, [pc, #300]	@ (800e340 <tcp_input+0x28c>)
 800e212:	6814      	ldr	r4, [r2, #0]
 800e214:	4618      	mov	r0, r3
 800e216:	f7fc fd23 	bl	800ac60 <lwip_htons>
 800e21a:	4603      	mov	r3, r0
 800e21c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e21e:	4b48      	ldr	r3, [pc, #288]	@ (800e340 <tcp_input+0x28c>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	885b      	ldrh	r3, [r3, #2]
 800e224:	b29b      	uxth	r3, r3
 800e226:	4a46      	ldr	r2, [pc, #280]	@ (800e340 <tcp_input+0x28c>)
 800e228:	6814      	ldr	r4, [r2, #0]
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fc fd18 	bl	800ac60 <lwip_htons>
 800e230:	4603      	mov	r3, r0
 800e232:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e234:	4b42      	ldr	r3, [pc, #264]	@ (800e340 <tcp_input+0x28c>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	4a41      	ldr	r2, [pc, #260]	@ (800e340 <tcp_input+0x28c>)
 800e23c:	6814      	ldr	r4, [r2, #0]
 800e23e:	4618      	mov	r0, r3
 800e240:	f7fc fd24 	bl	800ac8c <lwip_htonl>
 800e244:	4603      	mov	r3, r0
 800e246:	6063      	str	r3, [r4, #4]
 800e248:	6863      	ldr	r3, [r4, #4]
 800e24a:	4a45      	ldr	r2, [pc, #276]	@ (800e360 <tcp_input+0x2ac>)
 800e24c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e24e:	4b3c      	ldr	r3, [pc, #240]	@ (800e340 <tcp_input+0x28c>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	4a3a      	ldr	r2, [pc, #232]	@ (800e340 <tcp_input+0x28c>)
 800e256:	6814      	ldr	r4, [r2, #0]
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fc fd17 	bl	800ac8c <lwip_htonl>
 800e25e:	4603      	mov	r3, r0
 800e260:	60a3      	str	r3, [r4, #8]
 800e262:	68a3      	ldr	r3, [r4, #8]
 800e264:	4a3f      	ldr	r2, [pc, #252]	@ (800e364 <tcp_input+0x2b0>)
 800e266:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e268:	4b35      	ldr	r3, [pc, #212]	@ (800e340 <tcp_input+0x28c>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	89db      	ldrh	r3, [r3, #14]
 800e26e:	b29b      	uxth	r3, r3
 800e270:	4a33      	ldr	r2, [pc, #204]	@ (800e340 <tcp_input+0x28c>)
 800e272:	6814      	ldr	r4, [r2, #0]
 800e274:	4618      	mov	r0, r3
 800e276:	f7fc fcf3 	bl	800ac60 <lwip_htons>
 800e27a:	4603      	mov	r3, r0
 800e27c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e27e:	4b30      	ldr	r3, [pc, #192]	@ (800e340 <tcp_input+0x28c>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	899b      	ldrh	r3, [r3, #12]
 800e284:	b29b      	uxth	r3, r3
 800e286:	4618      	mov	r0, r3
 800e288:	f7fc fcea 	bl	800ac60 <lwip_htons>
 800e28c:	4603      	mov	r3, r0
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e294:	b2da      	uxtb	r2, r3
 800e296:	4b34      	ldr	r3, [pc, #208]	@ (800e368 <tcp_input+0x2b4>)
 800e298:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	891a      	ldrh	r2, [r3, #8]
 800e29e:	4b33      	ldr	r3, [pc, #204]	@ (800e36c <tcp_input+0x2b8>)
 800e2a0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e2a2:	4b31      	ldr	r3, [pc, #196]	@ (800e368 <tcp_input+0x2b4>)
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	f003 0303 	and.w	r3, r3, #3
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00c      	beq.n	800e2c8 <tcp_input+0x214>
    tcplen++;
 800e2ae:	4b2f      	ldr	r3, [pc, #188]	@ (800e36c <tcp_input+0x2b8>)
 800e2b0:	881b      	ldrh	r3, [r3, #0]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	b29a      	uxth	r2, r3
 800e2b6:	4b2d      	ldr	r3, [pc, #180]	@ (800e36c <tcp_input+0x2b8>)
 800e2b8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	891a      	ldrh	r2, [r3, #8]
 800e2be:	4b2b      	ldr	r3, [pc, #172]	@ (800e36c <tcp_input+0x2b8>)
 800e2c0:	881b      	ldrh	r3, [r3, #0]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	f200 82e6 	bhi.w	800e894 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2cc:	4b28      	ldr	r3, [pc, #160]	@ (800e370 <tcp_input+0x2bc>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	61fb      	str	r3, [r7, #28]
 800e2d2:	e09d      	b.n	800e410 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	7d1b      	ldrb	r3, [r3, #20]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d105      	bne.n	800e2e8 <tcp_input+0x234>
 800e2dc:	4b15      	ldr	r3, [pc, #84]	@ (800e334 <tcp_input+0x280>)
 800e2de:	22fb      	movs	r2, #251	@ 0xfb
 800e2e0:	4924      	ldr	r1, [pc, #144]	@ (800e374 <tcp_input+0x2c0>)
 800e2e2:	4816      	ldr	r0, [pc, #88]	@ (800e33c <tcp_input+0x288>)
 800e2e4:	f006 fe88 	bl	8014ff8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	7d1b      	ldrb	r3, [r3, #20]
 800e2ec:	2b0a      	cmp	r3, #10
 800e2ee:	d105      	bne.n	800e2fc <tcp_input+0x248>
 800e2f0:	4b10      	ldr	r3, [pc, #64]	@ (800e334 <tcp_input+0x280>)
 800e2f2:	22fc      	movs	r2, #252	@ 0xfc
 800e2f4:	4920      	ldr	r1, [pc, #128]	@ (800e378 <tcp_input+0x2c4>)
 800e2f6:	4811      	ldr	r0, [pc, #68]	@ (800e33c <tcp_input+0x288>)
 800e2f8:	f006 fe7e 	bl	8014ff8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	7d1b      	ldrb	r3, [r3, #20]
 800e300:	2b01      	cmp	r3, #1
 800e302:	d105      	bne.n	800e310 <tcp_input+0x25c>
 800e304:	4b0b      	ldr	r3, [pc, #44]	@ (800e334 <tcp_input+0x280>)
 800e306:	22fd      	movs	r2, #253	@ 0xfd
 800e308:	491c      	ldr	r1, [pc, #112]	@ (800e37c <tcp_input+0x2c8>)
 800e30a:	480c      	ldr	r0, [pc, #48]	@ (800e33c <tcp_input+0x288>)
 800e30c:	f006 fe74 	bl	8014ff8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	7a1b      	ldrb	r3, [r3, #8]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d033      	beq.n	800e380 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	7a1a      	ldrb	r2, [r3, #8]
 800e31c:	4b09      	ldr	r3, [pc, #36]	@ (800e344 <tcp_input+0x290>)
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e324:	3301      	adds	r3, #1
 800e326:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e328:	429a      	cmp	r2, r3
 800e32a:	d029      	beq.n	800e380 <tcp_input+0x2cc>
      prev = pcb;
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	61bb      	str	r3, [r7, #24]
      continue;
 800e330:	e06b      	b.n	800e40a <tcp_input+0x356>
 800e332:	bf00      	nop
 800e334:	0801829c 	.word	0x0801829c
 800e338:	080182d0 	.word	0x080182d0
 800e33c:	080182e8 	.word	0x080182e8
 800e340:	2000b294 	.word	0x2000b294
 800e344:	20005b3c 	.word	0x20005b3c
 800e348:	2000b298 	.word	0x2000b298
 800e34c:	2000b29c 	.word	0x2000b29c
 800e350:	2000b29a 	.word	0x2000b29a
 800e354:	08018310 	.word	0x08018310
 800e358:	08018320 	.word	0x08018320
 800e35c:	0801832c 	.word	0x0801832c
 800e360:	2000b2a4 	.word	0x2000b2a4
 800e364:	2000b2a8 	.word	0x2000b2a8
 800e368:	2000b2b0 	.word	0x2000b2b0
 800e36c:	2000b2ae 	.word	0x2000b2ae
 800e370:	2000b278 	.word	0x2000b278
 800e374:	0801834c 	.word	0x0801834c
 800e378:	08018374 	.word	0x08018374
 800e37c:	080183a0 	.word	0x080183a0
    }

    if (pcb->remote_port == tcphdr->src &&
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	8b1a      	ldrh	r2, [r3, #24]
 800e384:	4b72      	ldr	r3, [pc, #456]	@ (800e550 <tcp_input+0x49c>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	881b      	ldrh	r3, [r3, #0]
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d13a      	bne.n	800e406 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	8ada      	ldrh	r2, [r3, #22]
 800e394:	4b6e      	ldr	r3, [pc, #440]	@ (800e550 <tcp_input+0x49c>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	885b      	ldrh	r3, [r3, #2]
 800e39a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d132      	bne.n	800e406 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	685a      	ldr	r2, [r3, #4]
 800e3a4:	4b6b      	ldr	r3, [pc, #428]	@ (800e554 <tcp_input+0x4a0>)
 800e3a6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d12c      	bne.n	800e406 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	681a      	ldr	r2, [r3, #0]
 800e3b0:	4b68      	ldr	r3, [pc, #416]	@ (800e554 <tcp_input+0x4a0>)
 800e3b2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d126      	bne.n	800e406 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	69fa      	ldr	r2, [r7, #28]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d106      	bne.n	800e3d0 <tcp_input+0x31c>
 800e3c2:	4b65      	ldr	r3, [pc, #404]	@ (800e558 <tcp_input+0x4a4>)
 800e3c4:	f240 120d 	movw	r2, #269	@ 0x10d
 800e3c8:	4964      	ldr	r1, [pc, #400]	@ (800e55c <tcp_input+0x4a8>)
 800e3ca:	4865      	ldr	r0, [pc, #404]	@ (800e560 <tcp_input+0x4ac>)
 800e3cc:	f006 fe14 	bl	8014ff8 <iprintf>
      if (prev != NULL) {
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d00a      	beq.n	800e3ec <tcp_input+0x338>
        prev->next = pcb->next;
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	68da      	ldr	r2, [r3, #12]
 800e3da:	69bb      	ldr	r3, [r7, #24]
 800e3dc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e3de:	4b61      	ldr	r3, [pc, #388]	@ (800e564 <tcp_input+0x4b0>)
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e3e6:	4a5f      	ldr	r2, [pc, #380]	@ (800e564 <tcp_input+0x4b0>)
 800e3e8:	69fb      	ldr	r3, [r7, #28]
 800e3ea:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	68db      	ldr	r3, [r3, #12]
 800e3f0:	69fa      	ldr	r2, [r7, #28]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d111      	bne.n	800e41a <tcp_input+0x366>
 800e3f6:	4b58      	ldr	r3, [pc, #352]	@ (800e558 <tcp_input+0x4a4>)
 800e3f8:	f240 1215 	movw	r2, #277	@ 0x115
 800e3fc:	495a      	ldr	r1, [pc, #360]	@ (800e568 <tcp_input+0x4b4>)
 800e3fe:	4858      	ldr	r0, [pc, #352]	@ (800e560 <tcp_input+0x4ac>)
 800e400:	f006 fdfa 	bl	8014ff8 <iprintf>
      break;
 800e404:	e009      	b.n	800e41a <tcp_input+0x366>
    }
    prev = pcb;
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	68db      	ldr	r3, [r3, #12]
 800e40e:	61fb      	str	r3, [r7, #28]
 800e410:	69fb      	ldr	r3, [r7, #28]
 800e412:	2b00      	cmp	r3, #0
 800e414:	f47f af5e 	bne.w	800e2d4 <tcp_input+0x220>
 800e418:	e000      	b.n	800e41c <tcp_input+0x368>
      break;
 800e41a:	bf00      	nop
  }

  if (pcb == NULL) {
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	f040 80aa 	bne.w	800e578 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e424:	4b51      	ldr	r3, [pc, #324]	@ (800e56c <tcp_input+0x4b8>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	61fb      	str	r3, [r7, #28]
 800e42a:	e03f      	b.n	800e4ac <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	7d1b      	ldrb	r3, [r3, #20]
 800e430:	2b0a      	cmp	r3, #10
 800e432:	d006      	beq.n	800e442 <tcp_input+0x38e>
 800e434:	4b48      	ldr	r3, [pc, #288]	@ (800e558 <tcp_input+0x4a4>)
 800e436:	f240 121f 	movw	r2, #287	@ 0x11f
 800e43a:	494d      	ldr	r1, [pc, #308]	@ (800e570 <tcp_input+0x4bc>)
 800e43c:	4848      	ldr	r0, [pc, #288]	@ (800e560 <tcp_input+0x4ac>)
 800e43e:	f006 fddb 	bl	8014ff8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e442:	69fb      	ldr	r3, [r7, #28]
 800e444:	7a1b      	ldrb	r3, [r3, #8]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d009      	beq.n	800e45e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	7a1a      	ldrb	r2, [r3, #8]
 800e44e:	4b41      	ldr	r3, [pc, #260]	@ (800e554 <tcp_input+0x4a0>)
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e456:	3301      	adds	r3, #1
 800e458:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d122      	bne.n	800e4a4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e45e:	69fb      	ldr	r3, [r7, #28]
 800e460:	8b1a      	ldrh	r2, [r3, #24]
 800e462:	4b3b      	ldr	r3, [pc, #236]	@ (800e550 <tcp_input+0x49c>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	881b      	ldrh	r3, [r3, #0]
 800e468:	b29b      	uxth	r3, r3
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d11b      	bne.n	800e4a6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	8ada      	ldrh	r2, [r3, #22]
 800e472:	4b37      	ldr	r3, [pc, #220]	@ (800e550 <tcp_input+0x49c>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	885b      	ldrh	r3, [r3, #2]
 800e478:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d113      	bne.n	800e4a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e47e:	69fb      	ldr	r3, [r7, #28]
 800e480:	685a      	ldr	r2, [r3, #4]
 800e482:	4b34      	ldr	r3, [pc, #208]	@ (800e554 <tcp_input+0x4a0>)
 800e484:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e486:	429a      	cmp	r2, r3
 800e488:	d10d      	bne.n	800e4a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	4b31      	ldr	r3, [pc, #196]	@ (800e554 <tcp_input+0x4a0>)
 800e490:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e492:	429a      	cmp	r2, r3
 800e494:	d107      	bne.n	800e4a6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e496:	69f8      	ldr	r0, [r7, #28]
 800e498:	f000 fb56 	bl	800eb48 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f7fd ff3d 	bl	800c31c <pbuf_free>
        return;
 800e4a2:	e1fd      	b.n	800e8a0 <tcp_input+0x7ec>
        continue;
 800e4a4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	68db      	ldr	r3, [r3, #12]
 800e4aa:	61fb      	str	r3, [r7, #28]
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d1bc      	bne.n	800e42c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e4b6:	4b2f      	ldr	r3, [pc, #188]	@ (800e574 <tcp_input+0x4c0>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	617b      	str	r3, [r7, #20]
 800e4bc:	e02a      	b.n	800e514 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	7a1b      	ldrb	r3, [r3, #8]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d00c      	beq.n	800e4e0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	7a1a      	ldrb	r2, [r3, #8]
 800e4ca:	4b22      	ldr	r3, [pc, #136]	@ (800e554 <tcp_input+0x4a0>)
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d002      	beq.n	800e4e0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	61bb      	str	r3, [r7, #24]
        continue;
 800e4de:	e016      	b.n	800e50e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	8ada      	ldrh	r2, [r3, #22]
 800e4e4:	4b1a      	ldr	r3, [pc, #104]	@ (800e550 <tcp_input+0x49c>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	885b      	ldrh	r3, [r3, #2]
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d10c      	bne.n	800e50a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	4b17      	ldr	r3, [pc, #92]	@ (800e554 <tcp_input+0x4a0>)
 800e4f6:	695b      	ldr	r3, [r3, #20]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d00f      	beq.n	800e51c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d00d      	beq.n	800e51e <tcp_input+0x46a>
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d009      	beq.n	800e51e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	617b      	str	r3, [r7, #20]
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d1d1      	bne.n	800e4be <tcp_input+0x40a>
 800e51a:	e000      	b.n	800e51e <tcp_input+0x46a>
            break;
 800e51c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d029      	beq.n	800e578 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e524:	69bb      	ldr	r3, [r7, #24]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d00a      	beq.n	800e540 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	68da      	ldr	r2, [r3, #12]
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e532:	4b10      	ldr	r3, [pc, #64]	@ (800e574 <tcp_input+0x4c0>)
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e53a:	4a0e      	ldr	r2, [pc, #56]	@ (800e574 <tcp_input+0x4c0>)
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e540:	6978      	ldr	r0, [r7, #20]
 800e542:	f000 fa03 	bl	800e94c <tcp_listen_input>
      }
      pbuf_free(p);
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f7fd fee8 	bl	800c31c <pbuf_free>
      return;
 800e54c:	e1a8      	b.n	800e8a0 <tcp_input+0x7ec>
 800e54e:	bf00      	nop
 800e550:	2000b294 	.word	0x2000b294
 800e554:	20005b3c 	.word	0x20005b3c
 800e558:	0801829c 	.word	0x0801829c
 800e55c:	080183c8 	.word	0x080183c8
 800e560:	080182e8 	.word	0x080182e8
 800e564:	2000b278 	.word	0x2000b278
 800e568:	080183f4 	.word	0x080183f4
 800e56c:	2000b27c 	.word	0x2000b27c
 800e570:	08018420 	.word	0x08018420
 800e574:	2000b274 	.word	0x2000b274
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	f000 8158 	beq.w	800e830 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e580:	4b95      	ldr	r3, [pc, #596]	@ (800e7d8 <tcp_input+0x724>)
 800e582:	2200      	movs	r2, #0
 800e584:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	891a      	ldrh	r2, [r3, #8]
 800e58a:	4b93      	ldr	r3, [pc, #588]	@ (800e7d8 <tcp_input+0x724>)
 800e58c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e58e:	4a92      	ldr	r2, [pc, #584]	@ (800e7d8 <tcp_input+0x724>)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e594:	4b91      	ldr	r3, [pc, #580]	@ (800e7dc <tcp_input+0x728>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4a8f      	ldr	r2, [pc, #572]	@ (800e7d8 <tcp_input+0x724>)
 800e59a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e59c:	4b90      	ldr	r3, [pc, #576]	@ (800e7e0 <tcp_input+0x72c>)
 800e59e:	2200      	movs	r2, #0
 800e5a0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e5a2:	4b90      	ldr	r3, [pc, #576]	@ (800e7e4 <tcp_input+0x730>)
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e5a8:	4b8f      	ldr	r3, [pc, #572]	@ (800e7e8 <tcp_input+0x734>)
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e5ae:	4b8f      	ldr	r3, [pc, #572]	@ (800e7ec <tcp_input+0x738>)
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	f003 0308 	and.w	r3, r3, #8
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d006      	beq.n	800e5c8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	7b5b      	ldrb	r3, [r3, #13]
 800e5be:	f043 0301 	orr.w	r3, r3, #1
 800e5c2:	b2da      	uxtb	r2, r3
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e5c8:	69fb      	ldr	r3, [r7, #28]
 800e5ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d017      	beq.n	800e600 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e5d0:	69f8      	ldr	r0, [r7, #28]
 800e5d2:	f7ff f929 	bl	800d828 <tcp_process_refused_data>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	f113 0f0d 	cmn.w	r3, #13
 800e5dc:	d007      	beq.n	800e5ee <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e5de:	69fb      	ldr	r3, [r7, #28]
 800e5e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d00c      	beq.n	800e600 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e5e6:	4b82      	ldr	r3, [pc, #520]	@ (800e7f0 <tcp_input+0x73c>)
 800e5e8:	881b      	ldrh	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d008      	beq.n	800e600 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e5ee:	69fb      	ldr	r3, [r7, #28]
 800e5f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	f040 80e3 	bne.w	800e7be <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e5f8:	69f8      	ldr	r0, [r7, #28]
 800e5fa:	f003 f9a7 	bl	801194c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e5fe:	e0de      	b.n	800e7be <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e600:	4a7c      	ldr	r2, [pc, #496]	@ (800e7f4 <tcp_input+0x740>)
 800e602:	69fb      	ldr	r3, [r7, #28]
 800e604:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e606:	69f8      	ldr	r0, [r7, #28]
 800e608:	f000 fb18 	bl	800ec3c <tcp_process>
 800e60c:	4603      	mov	r3, r0
 800e60e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e610:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e614:	f113 0f0d 	cmn.w	r3, #13
 800e618:	f000 80d3 	beq.w	800e7c2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e61c:	4b71      	ldr	r3, [pc, #452]	@ (800e7e4 <tcp_input+0x730>)
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	f003 0308 	and.w	r3, r3, #8
 800e624:	2b00      	cmp	r3, #0
 800e626:	d015      	beq.n	800e654 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d008      	beq.n	800e644 <tcp_input+0x590>
 800e632:	69fb      	ldr	r3, [r7, #28]
 800e634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e638:	69fa      	ldr	r2, [r7, #28]
 800e63a:	6912      	ldr	r2, [r2, #16]
 800e63c:	f06f 010d 	mvn.w	r1, #13
 800e640:	4610      	mov	r0, r2
 800e642:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e644:	69f9      	ldr	r1, [r7, #28]
 800e646:	486c      	ldr	r0, [pc, #432]	@ (800e7f8 <tcp_input+0x744>)
 800e648:	f7ff fbbc 	bl	800ddc4 <tcp_pcb_remove>
        tcp_free(pcb);
 800e64c:	69f8      	ldr	r0, [r7, #28]
 800e64e:	f7fe f9a7 	bl	800c9a0 <tcp_free>
 800e652:	e0da      	b.n	800e80a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e654:	2300      	movs	r3, #0
 800e656:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e658:	4b63      	ldr	r3, [pc, #396]	@ (800e7e8 <tcp_input+0x734>)
 800e65a:	881b      	ldrh	r3, [r3, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d01d      	beq.n	800e69c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e660:	4b61      	ldr	r3, [pc, #388]	@ (800e7e8 <tcp_input+0x734>)
 800e662:	881b      	ldrh	r3, [r3, #0]
 800e664:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e666:	69fb      	ldr	r3, [r7, #28]
 800e668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00a      	beq.n	800e686 <tcp_input+0x5d2>
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e676:	69fa      	ldr	r2, [r7, #28]
 800e678:	6910      	ldr	r0, [r2, #16]
 800e67a:	89fa      	ldrh	r2, [r7, #14]
 800e67c:	69f9      	ldr	r1, [r7, #28]
 800e67e:	4798      	blx	r3
 800e680:	4603      	mov	r3, r0
 800e682:	74fb      	strb	r3, [r7, #19]
 800e684:	e001      	b.n	800e68a <tcp_input+0x5d6>
 800e686:	2300      	movs	r3, #0
 800e688:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e68a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e68e:	f113 0f0d 	cmn.w	r3, #13
 800e692:	f000 8098 	beq.w	800e7c6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e696:	4b54      	ldr	r3, [pc, #336]	@ (800e7e8 <tcp_input+0x734>)
 800e698:	2200      	movs	r2, #0
 800e69a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e69c:	69f8      	ldr	r0, [r7, #28]
 800e69e:	f000 f915 	bl	800e8cc <tcp_input_delayed_close>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f040 8090 	bne.w	800e7ca <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e6aa:	4b4d      	ldr	r3, [pc, #308]	@ (800e7e0 <tcp_input+0x72c>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d041      	beq.n	800e736 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d006      	beq.n	800e6c8 <tcp_input+0x614>
 800e6ba:	4b50      	ldr	r3, [pc, #320]	@ (800e7fc <tcp_input+0x748>)
 800e6bc:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800e6c0:	494f      	ldr	r1, [pc, #316]	@ (800e800 <tcp_input+0x74c>)
 800e6c2:	4850      	ldr	r0, [pc, #320]	@ (800e804 <tcp_input+0x750>)
 800e6c4:	f006 fc98 	bl	8014ff8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	8b5b      	ldrh	r3, [r3, #26]
 800e6cc:	f003 0310 	and.w	r3, r3, #16
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d008      	beq.n	800e6e6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e6d4:	4b42      	ldr	r3, [pc, #264]	@ (800e7e0 <tcp_input+0x72c>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7fd fe1f 	bl	800c31c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e6de:	69f8      	ldr	r0, [r7, #28]
 800e6e0:	f7fe fc46 	bl	800cf70 <tcp_abort>
            goto aborted;
 800e6e4:	e091      	b.n	800e80a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d00c      	beq.n	800e70a <tcp_input+0x656>
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	6918      	ldr	r0, [r3, #16]
 800e6fa:	4b39      	ldr	r3, [pc, #228]	@ (800e7e0 <tcp_input+0x72c>)
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	2300      	movs	r3, #0
 800e700:	69f9      	ldr	r1, [r7, #28]
 800e702:	47a0      	blx	r4
 800e704:	4603      	mov	r3, r0
 800e706:	74fb      	strb	r3, [r7, #19]
 800e708:	e008      	b.n	800e71c <tcp_input+0x668>
 800e70a:	4b35      	ldr	r3, [pc, #212]	@ (800e7e0 <tcp_input+0x72c>)
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	2300      	movs	r3, #0
 800e710:	69f9      	ldr	r1, [r7, #28]
 800e712:	2000      	movs	r0, #0
 800e714:	f7ff f95e 	bl	800d9d4 <tcp_recv_null>
 800e718:	4603      	mov	r3, r0
 800e71a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e71c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e720:	f113 0f0d 	cmn.w	r3, #13
 800e724:	d053      	beq.n	800e7ce <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e726:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d003      	beq.n	800e736 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e72e:	4b2c      	ldr	r3, [pc, #176]	@ (800e7e0 <tcp_input+0x72c>)
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e736:	4b2b      	ldr	r3, [pc, #172]	@ (800e7e4 <tcp_input+0x730>)
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	f003 0320 	and.w	r3, r3, #32
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d030      	beq.n	800e7a4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e746:	2b00      	cmp	r3, #0
 800e748:	d009      	beq.n	800e75e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e74a:	69fb      	ldr	r3, [r7, #28]
 800e74c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e74e:	7b5a      	ldrb	r2, [r3, #13]
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e754:	f042 0220 	orr.w	r2, r2, #32
 800e758:	b2d2      	uxtb	r2, r2
 800e75a:	735a      	strb	r2, [r3, #13]
 800e75c:	e022      	b.n	800e7a4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e762:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e766:	d005      	beq.n	800e774 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e76c:	3301      	adds	r3, #1
 800e76e:	b29a      	uxth	r2, r3
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e774:	69fb      	ldr	r3, [r7, #28]
 800e776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d00b      	beq.n	800e796 <tcp_input+0x6e2>
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	6918      	ldr	r0, [r3, #16]
 800e788:	2300      	movs	r3, #0
 800e78a:	2200      	movs	r2, #0
 800e78c:	69f9      	ldr	r1, [r7, #28]
 800e78e:	47a0      	blx	r4
 800e790:	4603      	mov	r3, r0
 800e792:	74fb      	strb	r3, [r7, #19]
 800e794:	e001      	b.n	800e79a <tcp_input+0x6e6>
 800e796:	2300      	movs	r3, #0
 800e798:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e79a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e79e:	f113 0f0d 	cmn.w	r3, #13
 800e7a2:	d016      	beq.n	800e7d2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e7a4:	4b13      	ldr	r3, [pc, #76]	@ (800e7f4 <tcp_input+0x740>)
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e7aa:	69f8      	ldr	r0, [r7, #28]
 800e7ac:	f000 f88e 	bl	800e8cc <tcp_input_delayed_close>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d128      	bne.n	800e808 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e7b6:	69f8      	ldr	r0, [r7, #28]
 800e7b8:	f002 fac2 	bl	8010d40 <tcp_output>
 800e7bc:	e025      	b.n	800e80a <tcp_input+0x756>
        goto aborted;
 800e7be:	bf00      	nop
 800e7c0:	e023      	b.n	800e80a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e7c2:	bf00      	nop
 800e7c4:	e021      	b.n	800e80a <tcp_input+0x756>
              goto aborted;
 800e7c6:	bf00      	nop
 800e7c8:	e01f      	b.n	800e80a <tcp_input+0x756>
          goto aborted;
 800e7ca:	bf00      	nop
 800e7cc:	e01d      	b.n	800e80a <tcp_input+0x756>
            goto aborted;
 800e7ce:	bf00      	nop
 800e7d0:	e01b      	b.n	800e80a <tcp_input+0x756>
              goto aborted;
 800e7d2:	bf00      	nop
 800e7d4:	e019      	b.n	800e80a <tcp_input+0x756>
 800e7d6:	bf00      	nop
 800e7d8:	2000b284 	.word	0x2000b284
 800e7dc:	2000b294 	.word	0x2000b294
 800e7e0:	2000b2b4 	.word	0x2000b2b4
 800e7e4:	2000b2b1 	.word	0x2000b2b1
 800e7e8:	2000b2ac 	.word	0x2000b2ac
 800e7ec:	2000b2b0 	.word	0x2000b2b0
 800e7f0:	2000b2ae 	.word	0x2000b2ae
 800e7f4:	2000b2b8 	.word	0x2000b2b8
 800e7f8:	2000b278 	.word	0x2000b278
 800e7fc:	0801829c 	.word	0x0801829c
 800e800:	08018450 	.word	0x08018450
 800e804:	080182e8 	.word	0x080182e8
          goto aborted;
 800e808:	bf00      	nop
    tcp_input_pcb = NULL;
 800e80a:	4b27      	ldr	r3, [pc, #156]	@ (800e8a8 <tcp_input+0x7f4>)
 800e80c:	2200      	movs	r2, #0
 800e80e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e810:	4b26      	ldr	r3, [pc, #152]	@ (800e8ac <tcp_input+0x7f8>)
 800e812:	2200      	movs	r2, #0
 800e814:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e816:	4b26      	ldr	r3, [pc, #152]	@ (800e8b0 <tcp_input+0x7fc>)
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d03f      	beq.n	800e89e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e81e:	4b24      	ldr	r3, [pc, #144]	@ (800e8b0 <tcp_input+0x7fc>)
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	4618      	mov	r0, r3
 800e824:	f7fd fd7a 	bl	800c31c <pbuf_free>
      inseg.p = NULL;
 800e828:	4b21      	ldr	r3, [pc, #132]	@ (800e8b0 <tcp_input+0x7fc>)
 800e82a:	2200      	movs	r2, #0
 800e82c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e82e:	e036      	b.n	800e89e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e830:	4b20      	ldr	r3, [pc, #128]	@ (800e8b4 <tcp_input+0x800>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	899b      	ldrh	r3, [r3, #12]
 800e836:	b29b      	uxth	r3, r3
 800e838:	4618      	mov	r0, r3
 800e83a:	f7fc fa11 	bl	800ac60 <lwip_htons>
 800e83e:	4603      	mov	r3, r0
 800e840:	b2db      	uxtb	r3, r3
 800e842:	f003 0304 	and.w	r3, r3, #4
 800e846:	2b00      	cmp	r3, #0
 800e848:	d118      	bne.n	800e87c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e84a:	4b1b      	ldr	r3, [pc, #108]	@ (800e8b8 <tcp_input+0x804>)
 800e84c:	6819      	ldr	r1, [r3, #0]
 800e84e:	4b1b      	ldr	r3, [pc, #108]	@ (800e8bc <tcp_input+0x808>)
 800e850:	881b      	ldrh	r3, [r3, #0]
 800e852:	461a      	mov	r2, r3
 800e854:	4b1a      	ldr	r3, [pc, #104]	@ (800e8c0 <tcp_input+0x80c>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e85a:	4b16      	ldr	r3, [pc, #88]	@ (800e8b4 <tcp_input+0x800>)
 800e85c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e85e:	885b      	ldrh	r3, [r3, #2]
 800e860:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e862:	4a14      	ldr	r2, [pc, #80]	@ (800e8b4 <tcp_input+0x800>)
 800e864:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e866:	8812      	ldrh	r2, [r2, #0]
 800e868:	b292      	uxth	r2, r2
 800e86a:	9202      	str	r2, [sp, #8]
 800e86c:	9301      	str	r3, [sp, #4]
 800e86e:	4b15      	ldr	r3, [pc, #84]	@ (800e8c4 <tcp_input+0x810>)
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	4b15      	ldr	r3, [pc, #84]	@ (800e8c8 <tcp_input+0x814>)
 800e874:	4602      	mov	r2, r0
 800e876:	2000      	movs	r0, #0
 800e878:	f003 f816 	bl	80118a8 <tcp_rst>
    pbuf_free(p);
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f7fd fd4d 	bl	800c31c <pbuf_free>
  return;
 800e882:	e00c      	b.n	800e89e <tcp_input+0x7ea>
    goto dropped;
 800e884:	bf00      	nop
 800e886:	e006      	b.n	800e896 <tcp_input+0x7e2>
    goto dropped;
 800e888:	bf00      	nop
 800e88a:	e004      	b.n	800e896 <tcp_input+0x7e2>
    goto dropped;
 800e88c:	bf00      	nop
 800e88e:	e002      	b.n	800e896 <tcp_input+0x7e2>
      goto dropped;
 800e890:	bf00      	nop
 800e892:	e000      	b.n	800e896 <tcp_input+0x7e2>
      goto dropped;
 800e894:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7fd fd40 	bl	800c31c <pbuf_free>
 800e89c:	e000      	b.n	800e8a0 <tcp_input+0x7ec>
  return;
 800e89e:	bf00      	nop
}
 800e8a0:	3724      	adds	r7, #36	@ 0x24
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd90      	pop	{r4, r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	2000b2b8 	.word	0x2000b2b8
 800e8ac:	2000b2b4 	.word	0x2000b2b4
 800e8b0:	2000b284 	.word	0x2000b284
 800e8b4:	2000b294 	.word	0x2000b294
 800e8b8:	2000b2a8 	.word	0x2000b2a8
 800e8bc:	2000b2ae 	.word	0x2000b2ae
 800e8c0:	2000b2a4 	.word	0x2000b2a4
 800e8c4:	20005b4c 	.word	0x20005b4c
 800e8c8:	20005b50 	.word	0x20005b50

0800e8cc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d106      	bne.n	800e8e8 <tcp_input_delayed_close+0x1c>
 800e8da:	4b17      	ldr	r3, [pc, #92]	@ (800e938 <tcp_input_delayed_close+0x6c>)
 800e8dc:	f240 225a 	movw	r2, #602	@ 0x25a
 800e8e0:	4916      	ldr	r1, [pc, #88]	@ (800e93c <tcp_input_delayed_close+0x70>)
 800e8e2:	4817      	ldr	r0, [pc, #92]	@ (800e940 <tcp_input_delayed_close+0x74>)
 800e8e4:	f006 fb88 	bl	8014ff8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e8e8:	4b16      	ldr	r3, [pc, #88]	@ (800e944 <tcp_input_delayed_close+0x78>)
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	f003 0310 	and.w	r3, r3, #16
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d01c      	beq.n	800e92e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	8b5b      	ldrh	r3, [r3, #26]
 800e8f8:	f003 0310 	and.w	r3, r3, #16
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d10d      	bne.n	800e91c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e906:	2b00      	cmp	r3, #0
 800e908:	d008      	beq.n	800e91c <tcp_input_delayed_close+0x50>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	6912      	ldr	r2, [r2, #16]
 800e914:	f06f 010e 	mvn.w	r1, #14
 800e918:	4610      	mov	r0, r2
 800e91a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e91c:	6879      	ldr	r1, [r7, #4]
 800e91e:	480a      	ldr	r0, [pc, #40]	@ (800e948 <tcp_input_delayed_close+0x7c>)
 800e920:	f7ff fa50 	bl	800ddc4 <tcp_pcb_remove>
    tcp_free(pcb);
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f7fe f83b 	bl	800c9a0 <tcp_free>
    return 1;
 800e92a:	2301      	movs	r3, #1
 800e92c:	e000      	b.n	800e930 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e92e:	2300      	movs	r3, #0
}
 800e930:	4618      	mov	r0, r3
 800e932:	3708      	adds	r7, #8
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}
 800e938:	0801829c 	.word	0x0801829c
 800e93c:	0801846c 	.word	0x0801846c
 800e940:	080182e8 	.word	0x080182e8
 800e944:	2000b2b1 	.word	0x2000b2b1
 800e948:	2000b278 	.word	0x2000b278

0800e94c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e94c:	b590      	push	{r4, r7, lr}
 800e94e:	b08b      	sub	sp, #44	@ 0x2c
 800e950:	af04      	add	r7, sp, #16
 800e952:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e954:	4b6f      	ldr	r3, [pc, #444]	@ (800eb14 <tcp_listen_input+0x1c8>)
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	f003 0304 	and.w	r3, r3, #4
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f040 80d2 	bne.w	800eb06 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d106      	bne.n	800e976 <tcp_listen_input+0x2a>
 800e968:	4b6b      	ldr	r3, [pc, #428]	@ (800eb18 <tcp_listen_input+0x1cc>)
 800e96a:	f240 2281 	movw	r2, #641	@ 0x281
 800e96e:	496b      	ldr	r1, [pc, #428]	@ (800eb1c <tcp_listen_input+0x1d0>)
 800e970:	486b      	ldr	r0, [pc, #428]	@ (800eb20 <tcp_listen_input+0x1d4>)
 800e972:	f006 fb41 	bl	8014ff8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e976:	4b67      	ldr	r3, [pc, #412]	@ (800eb14 <tcp_listen_input+0x1c8>)
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	f003 0310 	and.w	r3, r3, #16
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d019      	beq.n	800e9b6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e982:	4b68      	ldr	r3, [pc, #416]	@ (800eb24 <tcp_listen_input+0x1d8>)
 800e984:	6819      	ldr	r1, [r3, #0]
 800e986:	4b68      	ldr	r3, [pc, #416]	@ (800eb28 <tcp_listen_input+0x1dc>)
 800e988:	881b      	ldrh	r3, [r3, #0]
 800e98a:	461a      	mov	r2, r3
 800e98c:	4b67      	ldr	r3, [pc, #412]	@ (800eb2c <tcp_listen_input+0x1e0>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e992:	4b67      	ldr	r3, [pc, #412]	@ (800eb30 <tcp_listen_input+0x1e4>)
 800e994:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e996:	885b      	ldrh	r3, [r3, #2]
 800e998:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e99a:	4a65      	ldr	r2, [pc, #404]	@ (800eb30 <tcp_listen_input+0x1e4>)
 800e99c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e99e:	8812      	ldrh	r2, [r2, #0]
 800e9a0:	b292      	uxth	r2, r2
 800e9a2:	9202      	str	r2, [sp, #8]
 800e9a4:	9301      	str	r3, [sp, #4]
 800e9a6:	4b63      	ldr	r3, [pc, #396]	@ (800eb34 <tcp_listen_input+0x1e8>)
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	4b63      	ldr	r3, [pc, #396]	@ (800eb38 <tcp_listen_input+0x1ec>)
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f002 ff7a 	bl	80118a8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e9b4:	e0a9      	b.n	800eb0a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e9b6:	4b57      	ldr	r3, [pc, #348]	@ (800eb14 <tcp_listen_input+0x1c8>)
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	f003 0302 	and.w	r3, r3, #2
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f000 80a3 	beq.w	800eb0a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	7d5b      	ldrb	r3, [r3, #21]
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7ff f927 	bl	800dc1c <tcp_alloc>
 800e9ce:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d111      	bne.n	800e9fa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	699b      	ldr	r3, [r3, #24]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d00a      	beq.n	800e9f4 <tcp_listen_input+0xa8>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	699b      	ldr	r3, [r3, #24]
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	6910      	ldr	r0, [r2, #16]
 800e9e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	4798      	blx	r3
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	73bb      	strb	r3, [r7, #14]
      return;
 800e9f2:	e08b      	b.n	800eb0c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e9f4:	23f0      	movs	r3, #240	@ 0xf0
 800e9f6:	73bb      	strb	r3, [r7, #14]
      return;
 800e9f8:	e088      	b.n	800eb0c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e9fa:	4b50      	ldr	r3, [pc, #320]	@ (800eb3c <tcp_listen_input+0x1f0>)
 800e9fc:	695a      	ldr	r2, [r3, #20]
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ea02:	4b4e      	ldr	r3, [pc, #312]	@ (800eb3c <tcp_listen_input+0x1f0>)
 800ea04:	691a      	ldr	r2, [r3, #16]
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	8ada      	ldrh	r2, [r3, #22]
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ea12:	4b47      	ldr	r3, [pc, #284]	@ (800eb30 <tcp_listen_input+0x1e4>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	881b      	ldrh	r3, [r3, #0]
 800ea18:	b29a      	uxth	r2, r3
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	2203      	movs	r2, #3
 800ea22:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ea24:	4b41      	ldr	r3, [pc, #260]	@ (800eb2c <tcp_listen_input+0x1e0>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	1c5a      	adds	r2, r3, #1
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ea36:	6978      	ldr	r0, [r7, #20]
 800ea38:	f7ff fa58 	bl	800deec <tcp_next_iss>
 800ea3c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	693a      	ldr	r2, [r7, #16]
 800ea42:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	693a      	ldr	r2, [r7, #16]
 800ea48:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	693a      	ldr	r2, [r7, #16]
 800ea4e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	693a      	ldr	r2, [r7, #16]
 800ea54:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ea56:	4b35      	ldr	r3, [pc, #212]	@ (800eb2c <tcp_listen_input+0x1e0>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	1e5a      	subs	r2, r3, #1
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	691a      	ldr	r2, [r3, #16]
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	7a5b      	ldrb	r3, [r3, #9]
 800ea72:	f003 030c 	and.w	r3, r3, #12
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	7a1a      	ldrb	r2, [r3, #8]
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ea84:	4b2e      	ldr	r3, [pc, #184]	@ (800eb40 <tcp_listen_input+0x1f4>)
 800ea86:	681a      	ldr	r2, [r3, #0]
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	60da      	str	r2, [r3, #12]
 800ea8c:	4a2c      	ldr	r2, [pc, #176]	@ (800eb40 <tcp_listen_input+0x1f4>)
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	6013      	str	r3, [r2, #0]
 800ea92:	f003 f8cb 	bl	8011c2c <tcp_timer_needed>
 800ea96:	4b2b      	ldr	r3, [pc, #172]	@ (800eb44 <tcp_listen_input+0x1f8>)
 800ea98:	2201      	movs	r2, #1
 800ea9a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ea9c:	6978      	ldr	r0, [r7, #20]
 800ea9e:	f001 fd8b 	bl	80105b8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800eaa2:	4b23      	ldr	r3, [pc, #140]	@ (800eb30 <tcp_listen_input+0x1e4>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	89db      	ldrh	r3, [r3, #14]
 800eaa8:	b29a      	uxth	r2, r3
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	3304      	adds	r3, #4
 800eac4:	4618      	mov	r0, r3
 800eac6:	f004 ffab 	bl	8013a20 <ip4_route>
 800eaca:	4601      	mov	r1, r0
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	3304      	adds	r3, #4
 800ead0:	461a      	mov	r2, r3
 800ead2:	4620      	mov	r0, r4
 800ead4:	f7ff fa30 	bl	800df38 <tcp_eff_send_mss_netif>
 800ead8:	4603      	mov	r3, r0
 800eada:	461a      	mov	r2, r3
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800eae0:	2112      	movs	r1, #18
 800eae2:	6978      	ldr	r0, [r7, #20]
 800eae4:	f002 f83e 	bl	8010b64 <tcp_enqueue_flags>
 800eae8:	4603      	mov	r3, r0
 800eaea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800eaec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d004      	beq.n	800eafe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	6978      	ldr	r0, [r7, #20]
 800eaf8:	f7fe f97c 	bl	800cdf4 <tcp_abandon>
      return;
 800eafc:	e006      	b.n	800eb0c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800eafe:	6978      	ldr	r0, [r7, #20]
 800eb00:	f002 f91e 	bl	8010d40 <tcp_output>
  return;
 800eb04:	e001      	b.n	800eb0a <tcp_listen_input+0x1be>
    return;
 800eb06:	bf00      	nop
 800eb08:	e000      	b.n	800eb0c <tcp_listen_input+0x1c0>
  return;
 800eb0a:	bf00      	nop
}
 800eb0c:	371c      	adds	r7, #28
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd90      	pop	{r4, r7, pc}
 800eb12:	bf00      	nop
 800eb14:	2000b2b0 	.word	0x2000b2b0
 800eb18:	0801829c 	.word	0x0801829c
 800eb1c:	08018494 	.word	0x08018494
 800eb20:	080182e8 	.word	0x080182e8
 800eb24:	2000b2a8 	.word	0x2000b2a8
 800eb28:	2000b2ae 	.word	0x2000b2ae
 800eb2c:	2000b2a4 	.word	0x2000b2a4
 800eb30:	2000b294 	.word	0x2000b294
 800eb34:	20005b4c 	.word	0x20005b4c
 800eb38:	20005b50 	.word	0x20005b50
 800eb3c:	20005b3c 	.word	0x20005b3c
 800eb40:	2000b278 	.word	0x2000b278
 800eb44:	2000b280 	.word	0x2000b280

0800eb48 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b086      	sub	sp, #24
 800eb4c:	af04      	add	r7, sp, #16
 800eb4e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800eb50:	4b2f      	ldr	r3, [pc, #188]	@ (800ec10 <tcp_timewait_input+0xc8>)
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	f003 0304 	and.w	r3, r3, #4
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d153      	bne.n	800ec04 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d106      	bne.n	800eb70 <tcp_timewait_input+0x28>
 800eb62:	4b2c      	ldr	r3, [pc, #176]	@ (800ec14 <tcp_timewait_input+0xcc>)
 800eb64:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800eb68:	492b      	ldr	r1, [pc, #172]	@ (800ec18 <tcp_timewait_input+0xd0>)
 800eb6a:	482c      	ldr	r0, [pc, #176]	@ (800ec1c <tcp_timewait_input+0xd4>)
 800eb6c:	f006 fa44 	bl	8014ff8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800eb70:	4b27      	ldr	r3, [pc, #156]	@ (800ec10 <tcp_timewait_input+0xc8>)
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	f003 0302 	and.w	r3, r3, #2
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d02a      	beq.n	800ebd2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800eb7c:	4b28      	ldr	r3, [pc, #160]	@ (800ec20 <tcp_timewait_input+0xd8>)
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb84:	1ad3      	subs	r3, r2, r3
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	db2d      	blt.n	800ebe6 <tcp_timewait_input+0x9e>
 800eb8a:	4b25      	ldr	r3, [pc, #148]	@ (800ec20 <tcp_timewait_input+0xd8>)
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb92:	6879      	ldr	r1, [r7, #4]
 800eb94:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800eb96:	440b      	add	r3, r1
 800eb98:	1ad3      	subs	r3, r2, r3
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	dc23      	bgt.n	800ebe6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb9e:	4b21      	ldr	r3, [pc, #132]	@ (800ec24 <tcp_timewait_input+0xdc>)
 800eba0:	6819      	ldr	r1, [r3, #0]
 800eba2:	4b21      	ldr	r3, [pc, #132]	@ (800ec28 <tcp_timewait_input+0xe0>)
 800eba4:	881b      	ldrh	r3, [r3, #0]
 800eba6:	461a      	mov	r2, r3
 800eba8:	4b1d      	ldr	r3, [pc, #116]	@ (800ec20 <tcp_timewait_input+0xd8>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebae:	4b1f      	ldr	r3, [pc, #124]	@ (800ec2c <tcp_timewait_input+0xe4>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebb2:	885b      	ldrh	r3, [r3, #2]
 800ebb4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebb6:	4a1d      	ldr	r2, [pc, #116]	@ (800ec2c <tcp_timewait_input+0xe4>)
 800ebb8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebba:	8812      	ldrh	r2, [r2, #0]
 800ebbc:	b292      	uxth	r2, r2
 800ebbe:	9202      	str	r2, [sp, #8]
 800ebc0:	9301      	str	r3, [sp, #4]
 800ebc2:	4b1b      	ldr	r3, [pc, #108]	@ (800ec30 <tcp_timewait_input+0xe8>)
 800ebc4:	9300      	str	r3, [sp, #0]
 800ebc6:	4b1b      	ldr	r3, [pc, #108]	@ (800ec34 <tcp_timewait_input+0xec>)
 800ebc8:	4602      	mov	r2, r0
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f002 fe6c 	bl	80118a8 <tcp_rst>
      return;
 800ebd0:	e01b      	b.n	800ec0a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ebd2:	4b0f      	ldr	r3, [pc, #60]	@ (800ec10 <tcp_timewait_input+0xc8>)
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	f003 0301 	and.w	r3, r3, #1
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d003      	beq.n	800ebe6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ebde:	4b16      	ldr	r3, [pc, #88]	@ (800ec38 <tcp_timewait_input+0xf0>)
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ebe6:	4b10      	ldr	r3, [pc, #64]	@ (800ec28 <tcp_timewait_input+0xe0>)
 800ebe8:	881b      	ldrh	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d00c      	beq.n	800ec08 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	8b5b      	ldrh	r3, [r3, #26]
 800ebf2:	f043 0302 	orr.w	r3, r3, #2
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f002 f89f 	bl	8010d40 <tcp_output>
  }
  return;
 800ec02:	e001      	b.n	800ec08 <tcp_timewait_input+0xc0>
    return;
 800ec04:	bf00      	nop
 800ec06:	e000      	b.n	800ec0a <tcp_timewait_input+0xc2>
  return;
 800ec08:	bf00      	nop
}
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	2000b2b0 	.word	0x2000b2b0
 800ec14:	0801829c 	.word	0x0801829c
 800ec18:	080184b4 	.word	0x080184b4
 800ec1c:	080182e8 	.word	0x080182e8
 800ec20:	2000b2a4 	.word	0x2000b2a4
 800ec24:	2000b2a8 	.word	0x2000b2a8
 800ec28:	2000b2ae 	.word	0x2000b2ae
 800ec2c:	2000b294 	.word	0x2000b294
 800ec30:	20005b4c 	.word	0x20005b4c
 800ec34:	20005b50 	.word	0x20005b50
 800ec38:	2000b26c 	.word	0x2000b26c

0800ec3c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ec3c:	b590      	push	{r4, r7, lr}
 800ec3e:	b08d      	sub	sp, #52	@ 0x34
 800ec40:	af04      	add	r7, sp, #16
 800ec42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ec44:	2300      	movs	r3, #0
 800ec46:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d106      	bne.n	800ec60 <tcp_process+0x24>
 800ec52:	4b9d      	ldr	r3, [pc, #628]	@ (800eec8 <tcp_process+0x28c>)
 800ec54:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ec58:	499c      	ldr	r1, [pc, #624]	@ (800eecc <tcp_process+0x290>)
 800ec5a:	489d      	ldr	r0, [pc, #628]	@ (800eed0 <tcp_process+0x294>)
 800ec5c:	f006 f9cc 	bl	8014ff8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ec60:	4b9c      	ldr	r3, [pc, #624]	@ (800eed4 <tcp_process+0x298>)
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	f003 0304 	and.w	r3, r3, #4
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d04e      	beq.n	800ed0a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	7d1b      	ldrb	r3, [r3, #20]
 800ec70:	2b02      	cmp	r3, #2
 800ec72:	d108      	bne.n	800ec86 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec78:	4b97      	ldr	r3, [pc, #604]	@ (800eed8 <tcp_process+0x29c>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d123      	bne.n	800ecc8 <tcp_process+0x8c>
        acceptable = 1;
 800ec80:	2301      	movs	r3, #1
 800ec82:	76fb      	strb	r3, [r7, #27]
 800ec84:	e020      	b.n	800ecc8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec8a:	4b94      	ldr	r3, [pc, #592]	@ (800eedc <tcp_process+0x2a0>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d102      	bne.n	800ec98 <tcp_process+0x5c>
        acceptable = 1;
 800ec92:	2301      	movs	r3, #1
 800ec94:	76fb      	strb	r3, [r7, #27]
 800ec96:	e017      	b.n	800ecc8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ec98:	4b90      	ldr	r3, [pc, #576]	@ (800eedc <tcp_process+0x2a0>)
 800ec9a:	681a      	ldr	r2, [r3, #0]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eca0:	1ad3      	subs	r3, r2, r3
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	db10      	blt.n	800ecc8 <tcp_process+0x8c>
 800eca6:	4b8d      	ldr	r3, [pc, #564]	@ (800eedc <tcp_process+0x2a0>)
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecae:	6879      	ldr	r1, [r7, #4]
 800ecb0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ecb2:	440b      	add	r3, r1
 800ecb4:	1ad3      	subs	r3, r2, r3
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	dc06      	bgt.n	800ecc8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	8b5b      	ldrh	r3, [r3, #26]
 800ecbe:	f043 0302 	orr.w	r3, r3, #2
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ecc8:	7efb      	ldrb	r3, [r7, #27]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d01b      	beq.n	800ed06 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	7d1b      	ldrb	r3, [r3, #20]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d106      	bne.n	800ece4 <tcp_process+0xa8>
 800ecd6:	4b7c      	ldr	r3, [pc, #496]	@ (800eec8 <tcp_process+0x28c>)
 800ecd8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800ecdc:	4980      	ldr	r1, [pc, #512]	@ (800eee0 <tcp_process+0x2a4>)
 800ecde:	487c      	ldr	r0, [pc, #496]	@ (800eed0 <tcp_process+0x294>)
 800ece0:	f006 f98a 	bl	8014ff8 <iprintf>
      recv_flags |= TF_RESET;
 800ece4:	4b7f      	ldr	r3, [pc, #508]	@ (800eee4 <tcp_process+0x2a8>)
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	f043 0308 	orr.w	r3, r3, #8
 800ecec:	b2da      	uxtb	r2, r3
 800ecee:	4b7d      	ldr	r3, [pc, #500]	@ (800eee4 <tcp_process+0x2a8>)
 800ecf0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	8b5b      	ldrh	r3, [r3, #26]
 800ecf6:	f023 0301 	bic.w	r3, r3, #1
 800ecfa:	b29a      	uxth	r2, r3
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ed00:	f06f 030d 	mvn.w	r3, #13
 800ed04:	e37a      	b.n	800f3fc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ed06:	2300      	movs	r3, #0
 800ed08:	e378      	b.n	800f3fc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ed0a:	4b72      	ldr	r3, [pc, #456]	@ (800eed4 <tcp_process+0x298>)
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	f003 0302 	and.w	r3, r3, #2
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d010      	beq.n	800ed38 <tcp_process+0xfc>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	7d1b      	ldrb	r3, [r3, #20]
 800ed1a:	2b02      	cmp	r3, #2
 800ed1c:	d00c      	beq.n	800ed38 <tcp_process+0xfc>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	7d1b      	ldrb	r3, [r3, #20]
 800ed22:	2b03      	cmp	r3, #3
 800ed24:	d008      	beq.n	800ed38 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	8b5b      	ldrh	r3, [r3, #26]
 800ed2a:	f043 0302 	orr.w	r3, r3, #2
 800ed2e:	b29a      	uxth	r2, r3
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ed34:	2300      	movs	r3, #0
 800ed36:	e361      	b.n	800f3fc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	8b5b      	ldrh	r3, [r3, #26]
 800ed3c:	f003 0310 	and.w	r3, r3, #16
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d103      	bne.n	800ed4c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ed44:	4b68      	ldr	r3, [pc, #416]	@ (800eee8 <tcp_process+0x2ac>)
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2200      	movs	r2, #0
 800ed58:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f001 fc2b 	bl	80105b8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	7d1b      	ldrb	r3, [r3, #20]
 800ed66:	3b02      	subs	r3, #2
 800ed68:	2b07      	cmp	r3, #7
 800ed6a:	f200 8337 	bhi.w	800f3dc <tcp_process+0x7a0>
 800ed6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ed74 <tcp_process+0x138>)
 800ed70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed74:	0800ed95 	.word	0x0800ed95
 800ed78:	0800efc5 	.word	0x0800efc5
 800ed7c:	0800f13d 	.word	0x0800f13d
 800ed80:	0800f167 	.word	0x0800f167
 800ed84:	0800f28b 	.word	0x0800f28b
 800ed88:	0800f13d 	.word	0x0800f13d
 800ed8c:	0800f317 	.word	0x0800f317
 800ed90:	0800f3a7 	.word	0x0800f3a7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ed94:	4b4f      	ldr	r3, [pc, #316]	@ (800eed4 <tcp_process+0x298>)
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	f003 0310 	and.w	r3, r3, #16
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f000 80e4 	beq.w	800ef6a <tcp_process+0x32e>
 800eda2:	4b4c      	ldr	r3, [pc, #304]	@ (800eed4 <tcp_process+0x298>)
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	f003 0302 	and.w	r3, r3, #2
 800edaa:	2b00      	cmp	r3, #0
 800edac:	f000 80dd 	beq.w	800ef6a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edb4:	1c5a      	adds	r2, r3, #1
 800edb6:	4b48      	ldr	r3, [pc, #288]	@ (800eed8 <tcp_process+0x29c>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	429a      	cmp	r2, r3
 800edbc:	f040 80d5 	bne.w	800ef6a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800edc0:	4b46      	ldr	r3, [pc, #280]	@ (800eedc <tcp_process+0x2a0>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	1c5a      	adds	r2, r3, #1
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800edd2:	4b41      	ldr	r3, [pc, #260]	@ (800eed8 <tcp_process+0x29c>)
 800edd4:	681a      	ldr	r2, [r3, #0]
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800edda:	4b44      	ldr	r3, [pc, #272]	@ (800eeec <tcp_process+0x2b0>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	89db      	ldrh	r3, [r3, #14]
 800ede0:	b29a      	uxth	r2, r3
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800edf4:	4b39      	ldr	r3, [pc, #228]	@ (800eedc <tcp_process+0x2a0>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	1e5a      	subs	r2, r3, #1
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2204      	movs	r2, #4
 800ee02:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	3304      	adds	r3, #4
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f004 fe07 	bl	8013a20 <ip4_route>
 800ee12:	4601      	mov	r1, r0
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	3304      	adds	r3, #4
 800ee18:	461a      	mov	r2, r3
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	f7ff f88c 	bl	800df38 <tcp_eff_send_mss_netif>
 800ee20:	4603      	mov	r3, r0
 800ee22:	461a      	mov	r2, r3
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee2c:	009a      	lsls	r2, r3, #2
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee32:	005b      	lsls	r3, r3, #1
 800ee34:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ee38:	428b      	cmp	r3, r1
 800ee3a:	bf38      	it	cc
 800ee3c:	460b      	movcc	r3, r1
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d204      	bcs.n	800ee4c <tcp_process+0x210>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	e00d      	b.n	800ee68 <tcp_process+0x22c>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d904      	bls.n	800ee64 <tcp_process+0x228>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee5e:	005b      	lsls	r3, r3, #1
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	e001      	b.n	800ee68 <tcp_process+0x22c>
 800ee64:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d106      	bne.n	800ee86 <tcp_process+0x24a>
 800ee78:	4b13      	ldr	r3, [pc, #76]	@ (800eec8 <tcp_process+0x28c>)
 800ee7a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800ee7e:	491c      	ldr	r1, [pc, #112]	@ (800eef0 <tcp_process+0x2b4>)
 800ee80:	4813      	ldr	r0, [pc, #76]	@ (800eed0 <tcp_process+0x294>)
 800ee82:	f006 f8b9 	bl	8014ff8 <iprintf>
        --pcb->snd_queuelen;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ee8c:	3b01      	subs	r3, #1
 800ee8e:	b29a      	uxth	r2, r3
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee9a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ee9c:	69fb      	ldr	r3, [r7, #28]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d12a      	bne.n	800eef8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eea6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800eea8:	69fb      	ldr	r3, [r7, #28]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d106      	bne.n	800eebc <tcp_process+0x280>
 800eeae:	4b06      	ldr	r3, [pc, #24]	@ (800eec8 <tcp_process+0x28c>)
 800eeb0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800eeb4:	490f      	ldr	r1, [pc, #60]	@ (800eef4 <tcp_process+0x2b8>)
 800eeb6:	4806      	ldr	r0, [pc, #24]	@ (800eed0 <tcp_process+0x294>)
 800eeb8:	f006 f89e 	bl	8014ff8 <iprintf>
          pcb->unsent = rseg->next;
 800eebc:	69fb      	ldr	r3, [r7, #28]
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	66da      	str	r2, [r3, #108]	@ 0x6c
 800eec4:	e01c      	b.n	800ef00 <tcp_process+0x2c4>
 800eec6:	bf00      	nop
 800eec8:	0801829c 	.word	0x0801829c
 800eecc:	080184d4 	.word	0x080184d4
 800eed0:	080182e8 	.word	0x080182e8
 800eed4:	2000b2b0 	.word	0x2000b2b0
 800eed8:	2000b2a8 	.word	0x2000b2a8
 800eedc:	2000b2a4 	.word	0x2000b2a4
 800eee0:	080184f0 	.word	0x080184f0
 800eee4:	2000b2b1 	.word	0x2000b2b1
 800eee8:	2000b26c 	.word	0x2000b26c
 800eeec:	2000b294 	.word	0x2000b294
 800eef0:	08018510 	.word	0x08018510
 800eef4:	08018528 	.word	0x08018528
        } else {
          pcb->unacked = rseg->next;
 800eef8:	69fb      	ldr	r3, [r7, #28]
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800ef00:	69f8      	ldr	r0, [r7, #28]
 800ef02:	f7fe fd22 	bl	800d94a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d104      	bne.n	800ef18 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef14:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ef16:	e006      	b.n	800ef26 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2200      	movs	r2, #0
 800ef22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d00a      	beq.n	800ef46 <tcp_process+0x30a>
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef36:	687a      	ldr	r2, [r7, #4]
 800ef38:	6910      	ldr	r0, [r2, #16]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	6879      	ldr	r1, [r7, #4]
 800ef3e:	4798      	blx	r3
 800ef40:	4603      	mov	r3, r0
 800ef42:	76bb      	strb	r3, [r7, #26]
 800ef44:	e001      	b.n	800ef4a <tcp_process+0x30e>
 800ef46:	2300      	movs	r3, #0
 800ef48:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ef4a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ef4e:	f113 0f0d 	cmn.w	r3, #13
 800ef52:	d102      	bne.n	800ef5a <tcp_process+0x31e>
          return ERR_ABRT;
 800ef54:	f06f 030c 	mvn.w	r3, #12
 800ef58:	e250      	b.n	800f3fc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	8b5b      	ldrh	r3, [r3, #26]
 800ef5e:	f043 0302 	orr.w	r3, r3, #2
 800ef62:	b29a      	uxth	r2, r3
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ef68:	e23a      	b.n	800f3e0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ef6a:	4b98      	ldr	r3, [pc, #608]	@ (800f1cc <tcp_process+0x590>)
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	f003 0310 	and.w	r3, r3, #16
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	f000 8234 	beq.w	800f3e0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef78:	4b95      	ldr	r3, [pc, #596]	@ (800f1d0 <tcp_process+0x594>)
 800ef7a:	6819      	ldr	r1, [r3, #0]
 800ef7c:	4b95      	ldr	r3, [pc, #596]	@ (800f1d4 <tcp_process+0x598>)
 800ef7e:	881b      	ldrh	r3, [r3, #0]
 800ef80:	461a      	mov	r2, r3
 800ef82:	4b95      	ldr	r3, [pc, #596]	@ (800f1d8 <tcp_process+0x59c>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef88:	4b94      	ldr	r3, [pc, #592]	@ (800f1dc <tcp_process+0x5a0>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef8c:	885b      	ldrh	r3, [r3, #2]
 800ef8e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef90:	4a92      	ldr	r2, [pc, #584]	@ (800f1dc <tcp_process+0x5a0>)
 800ef92:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef94:	8812      	ldrh	r2, [r2, #0]
 800ef96:	b292      	uxth	r2, r2
 800ef98:	9202      	str	r2, [sp, #8]
 800ef9a:	9301      	str	r3, [sp, #4]
 800ef9c:	4b90      	ldr	r3, [pc, #576]	@ (800f1e0 <tcp_process+0x5a4>)
 800ef9e:	9300      	str	r3, [sp, #0]
 800efa0:	4b90      	ldr	r3, [pc, #576]	@ (800f1e4 <tcp_process+0x5a8>)
 800efa2:	4602      	mov	r2, r0
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f002 fc7f 	bl	80118a8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800efb0:	2b05      	cmp	r3, #5
 800efb2:	f200 8215 	bhi.w	800f3e0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2200      	movs	r2, #0
 800efba:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f002 fa4b 	bl	8011458 <tcp_rexmit_rto>
      break;
 800efc2:	e20d      	b.n	800f3e0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800efc4:	4b81      	ldr	r3, [pc, #516]	@ (800f1cc <tcp_process+0x590>)
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	f003 0310 	and.w	r3, r3, #16
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f000 80a1 	beq.w	800f114 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800efd2:	4b7f      	ldr	r3, [pc, #508]	@ (800f1d0 <tcp_process+0x594>)
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efda:	1ad3      	subs	r3, r2, r3
 800efdc:	3b01      	subs	r3, #1
 800efde:	2b00      	cmp	r3, #0
 800efe0:	db7e      	blt.n	800f0e0 <tcp_process+0x4a4>
 800efe2:	4b7b      	ldr	r3, [pc, #492]	@ (800f1d0 <tcp_process+0x594>)
 800efe4:	681a      	ldr	r2, [r3, #0]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efea:	1ad3      	subs	r3, r2, r3
 800efec:	2b00      	cmp	r3, #0
 800efee:	dc77      	bgt.n	800f0e0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2204      	movs	r2, #4
 800eff4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800effa:	2b00      	cmp	r3, #0
 800effc:	d102      	bne.n	800f004 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800effe:	23fa      	movs	r3, #250	@ 0xfa
 800f000:	76bb      	strb	r3, [r7, #26]
 800f002:	e01d      	b.n	800f040 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f008:	699b      	ldr	r3, [r3, #24]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d106      	bne.n	800f01c <tcp_process+0x3e0>
 800f00e:	4b76      	ldr	r3, [pc, #472]	@ (800f1e8 <tcp_process+0x5ac>)
 800f010:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800f014:	4975      	ldr	r1, [pc, #468]	@ (800f1ec <tcp_process+0x5b0>)
 800f016:	4876      	ldr	r0, [pc, #472]	@ (800f1f0 <tcp_process+0x5b4>)
 800f018:	f005 ffee 	bl	8014ff8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f020:	699b      	ldr	r3, [r3, #24]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00a      	beq.n	800f03c <tcp_process+0x400>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f02a:	699b      	ldr	r3, [r3, #24]
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	6910      	ldr	r0, [r2, #16]
 800f030:	2200      	movs	r2, #0
 800f032:	6879      	ldr	r1, [r7, #4]
 800f034:	4798      	blx	r3
 800f036:	4603      	mov	r3, r0
 800f038:	76bb      	strb	r3, [r7, #26]
 800f03a:	e001      	b.n	800f040 <tcp_process+0x404>
 800f03c:	23f0      	movs	r3, #240	@ 0xf0
 800f03e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f040:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00a      	beq.n	800f05e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f048:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f04c:	f113 0f0d 	cmn.w	r3, #13
 800f050:	d002      	beq.n	800f058 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f7fd ff8c 	bl	800cf70 <tcp_abort>
            }
            return ERR_ABRT;
 800f058:	f06f 030c 	mvn.w	r3, #12
 800f05c:	e1ce      	b.n	800f3fc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 fae0 	bl	800f624 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f064:	4b63      	ldr	r3, [pc, #396]	@ (800f1f4 <tcp_process+0x5b8>)
 800f066:	881b      	ldrh	r3, [r3, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d005      	beq.n	800f078 <tcp_process+0x43c>
            recv_acked--;
 800f06c:	4b61      	ldr	r3, [pc, #388]	@ (800f1f4 <tcp_process+0x5b8>)
 800f06e:	881b      	ldrh	r3, [r3, #0]
 800f070:	3b01      	subs	r3, #1
 800f072:	b29a      	uxth	r2, r3
 800f074:	4b5f      	ldr	r3, [pc, #380]	@ (800f1f4 <tcp_process+0x5b8>)
 800f076:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f07c:	009a      	lsls	r2, r3, #2
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f082:	005b      	lsls	r3, r3, #1
 800f084:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f088:	428b      	cmp	r3, r1
 800f08a:	bf38      	it	cc
 800f08c:	460b      	movcc	r3, r1
 800f08e:	429a      	cmp	r2, r3
 800f090:	d204      	bcs.n	800f09c <tcp_process+0x460>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f096:	009b      	lsls	r3, r3, #2
 800f098:	b29b      	uxth	r3, r3
 800f09a:	e00d      	b.n	800f0b8 <tcp_process+0x47c>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f0a0:	005b      	lsls	r3, r3, #1
 800f0a2:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d904      	bls.n	800f0b4 <tcp_process+0x478>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f0ae:	005b      	lsls	r3, r3, #1
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	e001      	b.n	800f0b8 <tcp_process+0x47c>
 800f0b4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f0b8:	687a      	ldr	r2, [r7, #4]
 800f0ba:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f0be:	4b4e      	ldr	r3, [pc, #312]	@ (800f1f8 <tcp_process+0x5bc>)
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	f003 0320 	and.w	r3, r3, #32
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d037      	beq.n	800f13a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	8b5b      	ldrh	r3, [r3, #26]
 800f0ce:	f043 0302 	orr.w	r3, r3, #2
 800f0d2:	b29a      	uxth	r2, r3
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2207      	movs	r2, #7
 800f0dc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f0de:	e02c      	b.n	800f13a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0e0:	4b3b      	ldr	r3, [pc, #236]	@ (800f1d0 <tcp_process+0x594>)
 800f0e2:	6819      	ldr	r1, [r3, #0]
 800f0e4:	4b3b      	ldr	r3, [pc, #236]	@ (800f1d4 <tcp_process+0x598>)
 800f0e6:	881b      	ldrh	r3, [r3, #0]
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	4b3b      	ldr	r3, [pc, #236]	@ (800f1d8 <tcp_process+0x59c>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0f0:	4b3a      	ldr	r3, [pc, #232]	@ (800f1dc <tcp_process+0x5a0>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0f4:	885b      	ldrh	r3, [r3, #2]
 800f0f6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0f8:	4a38      	ldr	r2, [pc, #224]	@ (800f1dc <tcp_process+0x5a0>)
 800f0fa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0fc:	8812      	ldrh	r2, [r2, #0]
 800f0fe:	b292      	uxth	r2, r2
 800f100:	9202      	str	r2, [sp, #8]
 800f102:	9301      	str	r3, [sp, #4]
 800f104:	4b36      	ldr	r3, [pc, #216]	@ (800f1e0 <tcp_process+0x5a4>)
 800f106:	9300      	str	r3, [sp, #0]
 800f108:	4b36      	ldr	r3, [pc, #216]	@ (800f1e4 <tcp_process+0x5a8>)
 800f10a:	4602      	mov	r2, r0
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f002 fbcb 	bl	80118a8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f112:	e167      	b.n	800f3e4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f114:	4b2d      	ldr	r3, [pc, #180]	@ (800f1cc <tcp_process+0x590>)
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	f003 0302 	and.w	r3, r3, #2
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f000 8161 	beq.w	800f3e4 <tcp_process+0x7a8>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f126:	1e5a      	subs	r2, r3, #1
 800f128:	4b2b      	ldr	r3, [pc, #172]	@ (800f1d8 <tcp_process+0x59c>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	429a      	cmp	r2, r3
 800f12e:	f040 8159 	bne.w	800f3e4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f002 f9b2 	bl	801149c <tcp_rexmit>
      break;
 800f138:	e154      	b.n	800f3e4 <tcp_process+0x7a8>
 800f13a:	e153      	b.n	800f3e4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f000 fa71 	bl	800f624 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f142:	4b2d      	ldr	r3, [pc, #180]	@ (800f1f8 <tcp_process+0x5bc>)
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	f003 0320 	and.w	r3, r3, #32
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f000 814c 	beq.w	800f3e8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	8b5b      	ldrh	r3, [r3, #26]
 800f154:	f043 0302 	orr.w	r3, r3, #2
 800f158:	b29a      	uxth	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2207      	movs	r2, #7
 800f162:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f164:	e140      	b.n	800f3e8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f000 fa5c 	bl	800f624 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f16c:	4b22      	ldr	r3, [pc, #136]	@ (800f1f8 <tcp_process+0x5bc>)
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	f003 0320 	and.w	r3, r3, #32
 800f174:	2b00      	cmp	r3, #0
 800f176:	d071      	beq.n	800f25c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f178:	4b14      	ldr	r3, [pc, #80]	@ (800f1cc <tcp_process+0x590>)
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	f003 0310 	and.w	r3, r3, #16
 800f180:	2b00      	cmp	r3, #0
 800f182:	d060      	beq.n	800f246 <tcp_process+0x60a>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f188:	4b11      	ldr	r3, [pc, #68]	@ (800f1d0 <tcp_process+0x594>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d15a      	bne.n	800f246 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f194:	2b00      	cmp	r3, #0
 800f196:	d156      	bne.n	800f246 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	8b5b      	ldrh	r3, [r3, #26]
 800f19c:	f043 0302 	orr.w	r3, r3, #2
 800f1a0:	b29a      	uxth	r2, r3
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f7fe fdbc 	bl	800dd24 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f1ac:	4b13      	ldr	r3, [pc, #76]	@ (800f1fc <tcp_process+0x5c0>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	687a      	ldr	r2, [r7, #4]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d105      	bne.n	800f1c2 <tcp_process+0x586>
 800f1b6:	4b11      	ldr	r3, [pc, #68]	@ (800f1fc <tcp_process+0x5c0>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	4a0f      	ldr	r2, [pc, #60]	@ (800f1fc <tcp_process+0x5c0>)
 800f1be:	6013      	str	r3, [r2, #0]
 800f1c0:	e02e      	b.n	800f220 <tcp_process+0x5e4>
 800f1c2:	4b0e      	ldr	r3, [pc, #56]	@ (800f1fc <tcp_process+0x5c0>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	617b      	str	r3, [r7, #20]
 800f1c8:	e027      	b.n	800f21a <tcp_process+0x5de>
 800f1ca:	bf00      	nop
 800f1cc:	2000b2b0 	.word	0x2000b2b0
 800f1d0:	2000b2a8 	.word	0x2000b2a8
 800f1d4:	2000b2ae 	.word	0x2000b2ae
 800f1d8:	2000b2a4 	.word	0x2000b2a4
 800f1dc:	2000b294 	.word	0x2000b294
 800f1e0:	20005b4c 	.word	0x20005b4c
 800f1e4:	20005b50 	.word	0x20005b50
 800f1e8:	0801829c 	.word	0x0801829c
 800f1ec:	0801853c 	.word	0x0801853c
 800f1f0:	080182e8 	.word	0x080182e8
 800f1f4:	2000b2ac 	.word	0x2000b2ac
 800f1f8:	2000b2b1 	.word	0x2000b2b1
 800f1fc:	2000b278 	.word	0x2000b278
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	68db      	ldr	r3, [r3, #12]
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	429a      	cmp	r2, r3
 800f208:	d104      	bne.n	800f214 <tcp_process+0x5d8>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	68da      	ldr	r2, [r3, #12]
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	60da      	str	r2, [r3, #12]
 800f212:	e005      	b.n	800f220 <tcp_process+0x5e4>
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	617b      	str	r3, [r7, #20]
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d1ef      	bne.n	800f200 <tcp_process+0x5c4>
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2200      	movs	r2, #0
 800f224:	60da      	str	r2, [r3, #12]
 800f226:	4b77      	ldr	r3, [pc, #476]	@ (800f404 <tcp_process+0x7c8>)
 800f228:	2201      	movs	r2, #1
 800f22a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	220a      	movs	r2, #10
 800f230:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f232:	4b75      	ldr	r3, [pc, #468]	@ (800f408 <tcp_process+0x7cc>)
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	60da      	str	r2, [r3, #12]
 800f23a:	4a73      	ldr	r2, [pc, #460]	@ (800f408 <tcp_process+0x7cc>)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6013      	str	r3, [r2, #0]
 800f240:	f002 fcf4 	bl	8011c2c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f244:	e0d2      	b.n	800f3ec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	8b5b      	ldrh	r3, [r3, #26]
 800f24a:	f043 0302 	orr.w	r3, r3, #2
 800f24e:	b29a      	uxth	r2, r3
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2208      	movs	r2, #8
 800f258:	751a      	strb	r2, [r3, #20]
      break;
 800f25a:	e0c7      	b.n	800f3ec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f25c:	4b6b      	ldr	r3, [pc, #428]	@ (800f40c <tcp_process+0x7d0>)
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	f003 0310 	and.w	r3, r3, #16
 800f264:	2b00      	cmp	r3, #0
 800f266:	f000 80c1 	beq.w	800f3ec <tcp_process+0x7b0>
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f26e:	4b68      	ldr	r3, [pc, #416]	@ (800f410 <tcp_process+0x7d4>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	429a      	cmp	r2, r3
 800f274:	f040 80ba 	bne.w	800f3ec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	f040 80b5 	bne.w	800f3ec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2206      	movs	r2, #6
 800f286:	751a      	strb	r2, [r3, #20]
      break;
 800f288:	e0b0      	b.n	800f3ec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f000 f9ca 	bl	800f624 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f290:	4b60      	ldr	r3, [pc, #384]	@ (800f414 <tcp_process+0x7d8>)
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	f003 0320 	and.w	r3, r3, #32
 800f298:	2b00      	cmp	r3, #0
 800f29a:	f000 80a9 	beq.w	800f3f0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	8b5b      	ldrh	r3, [r3, #26]
 800f2a2:	f043 0302 	orr.w	r3, r3, #2
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7fe fd39 	bl	800dd24 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f2b2:	4b59      	ldr	r3, [pc, #356]	@ (800f418 <tcp_process+0x7dc>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d105      	bne.n	800f2c8 <tcp_process+0x68c>
 800f2bc:	4b56      	ldr	r3, [pc, #344]	@ (800f418 <tcp_process+0x7dc>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	68db      	ldr	r3, [r3, #12]
 800f2c2:	4a55      	ldr	r2, [pc, #340]	@ (800f418 <tcp_process+0x7dc>)
 800f2c4:	6013      	str	r3, [r2, #0]
 800f2c6:	e013      	b.n	800f2f0 <tcp_process+0x6b4>
 800f2c8:	4b53      	ldr	r3, [pc, #332]	@ (800f418 <tcp_process+0x7dc>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	613b      	str	r3, [r7, #16]
 800f2ce:	e00c      	b.n	800f2ea <tcp_process+0x6ae>
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	687a      	ldr	r2, [r7, #4]
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d104      	bne.n	800f2e4 <tcp_process+0x6a8>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	68da      	ldr	r2, [r3, #12]
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	60da      	str	r2, [r3, #12]
 800f2e2:	e005      	b.n	800f2f0 <tcp_process+0x6b4>
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	68db      	ldr	r3, [r3, #12]
 800f2e8:	613b      	str	r3, [r7, #16]
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d1ef      	bne.n	800f2d0 <tcp_process+0x694>
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	60da      	str	r2, [r3, #12]
 800f2f6:	4b43      	ldr	r3, [pc, #268]	@ (800f404 <tcp_process+0x7c8>)
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	220a      	movs	r2, #10
 800f300:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f302:	4b41      	ldr	r3, [pc, #260]	@ (800f408 <tcp_process+0x7cc>)
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	60da      	str	r2, [r3, #12]
 800f30a:	4a3f      	ldr	r2, [pc, #252]	@ (800f408 <tcp_process+0x7cc>)
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6013      	str	r3, [r2, #0]
 800f310:	f002 fc8c 	bl	8011c2c <tcp_timer_needed>
      }
      break;
 800f314:	e06c      	b.n	800f3f0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f000 f984 	bl	800f624 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f31c:	4b3b      	ldr	r3, [pc, #236]	@ (800f40c <tcp_process+0x7d0>)
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	f003 0310 	and.w	r3, r3, #16
 800f324:	2b00      	cmp	r3, #0
 800f326:	d065      	beq.n	800f3f4 <tcp_process+0x7b8>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f32c:	4b38      	ldr	r3, [pc, #224]	@ (800f410 <tcp_process+0x7d4>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	429a      	cmp	r2, r3
 800f332:	d15f      	bne.n	800f3f4 <tcp_process+0x7b8>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d15b      	bne.n	800f3f4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f7fe fcf1 	bl	800dd24 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f342:	4b35      	ldr	r3, [pc, #212]	@ (800f418 <tcp_process+0x7dc>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	687a      	ldr	r2, [r7, #4]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d105      	bne.n	800f358 <tcp_process+0x71c>
 800f34c:	4b32      	ldr	r3, [pc, #200]	@ (800f418 <tcp_process+0x7dc>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	4a31      	ldr	r2, [pc, #196]	@ (800f418 <tcp_process+0x7dc>)
 800f354:	6013      	str	r3, [r2, #0]
 800f356:	e013      	b.n	800f380 <tcp_process+0x744>
 800f358:	4b2f      	ldr	r3, [pc, #188]	@ (800f418 <tcp_process+0x7dc>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	60fb      	str	r3, [r7, #12]
 800f35e:	e00c      	b.n	800f37a <tcp_process+0x73e>
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	687a      	ldr	r2, [r7, #4]
 800f366:	429a      	cmp	r2, r3
 800f368:	d104      	bne.n	800f374 <tcp_process+0x738>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	68da      	ldr	r2, [r3, #12]
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	60da      	str	r2, [r3, #12]
 800f372:	e005      	b.n	800f380 <tcp_process+0x744>
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	60fb      	str	r3, [r7, #12]
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d1ef      	bne.n	800f360 <tcp_process+0x724>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	60da      	str	r2, [r3, #12]
 800f386:	4b1f      	ldr	r3, [pc, #124]	@ (800f404 <tcp_process+0x7c8>)
 800f388:	2201      	movs	r2, #1
 800f38a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	220a      	movs	r2, #10
 800f390:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f392:	4b1d      	ldr	r3, [pc, #116]	@ (800f408 <tcp_process+0x7cc>)
 800f394:	681a      	ldr	r2, [r3, #0]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	60da      	str	r2, [r3, #12]
 800f39a:	4a1b      	ldr	r2, [pc, #108]	@ (800f408 <tcp_process+0x7cc>)
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6013      	str	r3, [r2, #0]
 800f3a0:	f002 fc44 	bl	8011c2c <tcp_timer_needed>
      }
      break;
 800f3a4:	e026      	b.n	800f3f4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f000 f93c 	bl	800f624 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f3ac:	4b17      	ldr	r3, [pc, #92]	@ (800f40c <tcp_process+0x7d0>)
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	f003 0310 	and.w	r3, r3, #16
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d01f      	beq.n	800f3f8 <tcp_process+0x7bc>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3bc:	4b14      	ldr	r3, [pc, #80]	@ (800f410 <tcp_process+0x7d4>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d119      	bne.n	800f3f8 <tcp_process+0x7bc>
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d115      	bne.n	800f3f8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f3cc:	4b11      	ldr	r3, [pc, #68]	@ (800f414 <tcp_process+0x7d8>)
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	f043 0310 	orr.w	r3, r3, #16
 800f3d4:	b2da      	uxtb	r2, r3
 800f3d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f414 <tcp_process+0x7d8>)
 800f3d8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f3da:	e00d      	b.n	800f3f8 <tcp_process+0x7bc>
    default:
      break;
 800f3dc:	bf00      	nop
 800f3de:	e00c      	b.n	800f3fa <tcp_process+0x7be>
      break;
 800f3e0:	bf00      	nop
 800f3e2:	e00a      	b.n	800f3fa <tcp_process+0x7be>
      break;
 800f3e4:	bf00      	nop
 800f3e6:	e008      	b.n	800f3fa <tcp_process+0x7be>
      break;
 800f3e8:	bf00      	nop
 800f3ea:	e006      	b.n	800f3fa <tcp_process+0x7be>
      break;
 800f3ec:	bf00      	nop
 800f3ee:	e004      	b.n	800f3fa <tcp_process+0x7be>
      break;
 800f3f0:	bf00      	nop
 800f3f2:	e002      	b.n	800f3fa <tcp_process+0x7be>
      break;
 800f3f4:	bf00      	nop
 800f3f6:	e000      	b.n	800f3fa <tcp_process+0x7be>
      break;
 800f3f8:	bf00      	nop
  }
  return ERR_OK;
 800f3fa:	2300      	movs	r3, #0
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3724      	adds	r7, #36	@ 0x24
 800f400:	46bd      	mov	sp, r7
 800f402:	bd90      	pop	{r4, r7, pc}
 800f404:	2000b280 	.word	0x2000b280
 800f408:	2000b27c 	.word	0x2000b27c
 800f40c:	2000b2b0 	.word	0x2000b2b0
 800f410:	2000b2a8 	.word	0x2000b2a8
 800f414:	2000b2b1 	.word	0x2000b2b1
 800f418:	2000b278 	.word	0x2000b278

0800f41c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f41c:	b590      	push	{r4, r7, lr}
 800f41e:	b085      	sub	sp, #20
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d106      	bne.n	800f43a <tcp_oos_insert_segment+0x1e>
 800f42c:	4b3b      	ldr	r3, [pc, #236]	@ (800f51c <tcp_oos_insert_segment+0x100>)
 800f42e:	f240 421f 	movw	r2, #1055	@ 0x41f
 800f432:	493b      	ldr	r1, [pc, #236]	@ (800f520 <tcp_oos_insert_segment+0x104>)
 800f434:	483b      	ldr	r0, [pc, #236]	@ (800f524 <tcp_oos_insert_segment+0x108>)
 800f436:	f005 fddf 	bl	8014ff8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	899b      	ldrh	r3, [r3, #12]
 800f440:	b29b      	uxth	r3, r3
 800f442:	4618      	mov	r0, r3
 800f444:	f7fb fc0c 	bl	800ac60 <lwip_htons>
 800f448:	4603      	mov	r3, r0
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	f003 0301 	and.w	r3, r3, #1
 800f450:	2b00      	cmp	r3, #0
 800f452:	d028      	beq.n	800f4a6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f454:	6838      	ldr	r0, [r7, #0]
 800f456:	f7fe fa63 	bl	800d920 <tcp_segs_free>
    next = NULL;
 800f45a:	2300      	movs	r3, #0
 800f45c:	603b      	str	r3, [r7, #0]
 800f45e:	e056      	b.n	800f50e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	68db      	ldr	r3, [r3, #12]
 800f464:	899b      	ldrh	r3, [r3, #12]
 800f466:	b29b      	uxth	r3, r3
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fb fbf9 	bl	800ac60 <lwip_htons>
 800f46e:	4603      	mov	r3, r0
 800f470:	b2db      	uxtb	r3, r3
 800f472:	f003 0301 	and.w	r3, r3, #1
 800f476:	2b00      	cmp	r3, #0
 800f478:	d00d      	beq.n	800f496 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	899b      	ldrh	r3, [r3, #12]
 800f480:	b29c      	uxth	r4, r3
 800f482:	2001      	movs	r0, #1
 800f484:	f7fb fbec 	bl	800ac60 <lwip_htons>
 800f488:	4603      	mov	r3, r0
 800f48a:	461a      	mov	r2, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	68db      	ldr	r3, [r3, #12]
 800f490:	4322      	orrs	r2, r4
 800f492:	b292      	uxth	r2, r2
 800f494:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f4a0:	68f8      	ldr	r0, [r7, #12]
 800f4a2:	f7fe fa52 	bl	800d94a <tcp_seg_free>
    while (next &&
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d00e      	beq.n	800f4ca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	891b      	ldrh	r3, [r3, #8]
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	4b1d      	ldr	r3, [pc, #116]	@ (800f528 <tcp_oos_insert_segment+0x10c>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	441a      	add	r2, r3
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	68db      	ldr	r3, [r3, #12]
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	6839      	ldr	r1, [r7, #0]
 800f4c0:	8909      	ldrh	r1, [r1, #8]
 800f4c2:	440b      	add	r3, r1
 800f4c4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	daca      	bge.n	800f460 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d01e      	beq.n	800f50e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	891b      	ldrh	r3, [r3, #8]
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	4b14      	ldr	r3, [pc, #80]	@ (800f528 <tcp_oos_insert_segment+0x10c>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	441a      	add	r2, r3
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	dd12      	ble.n	800f50e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	68db      	ldr	r3, [r3, #12]
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	b29a      	uxth	r2, r3
 800f4f0:	4b0d      	ldr	r3, [pc, #52]	@ (800f528 <tcp_oos_insert_segment+0x10c>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	1ad3      	subs	r3, r2, r3
 800f4f8:	b29a      	uxth	r2, r3
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	685a      	ldr	r2, [r3, #4]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	891b      	ldrh	r3, [r3, #8]
 800f506:	4619      	mov	r1, r3
 800f508:	4610      	mov	r0, r2
 800f50a:	f7fc fd81 	bl	800c010 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	683a      	ldr	r2, [r7, #0]
 800f512:	601a      	str	r2, [r3, #0]
}
 800f514:	bf00      	nop
 800f516:	3714      	adds	r7, #20
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd90      	pop	{r4, r7, pc}
 800f51c:	0801829c 	.word	0x0801829c
 800f520:	0801855c 	.word	0x0801855c
 800f524:	080182e8 	.word	0x080182e8
 800f528:	2000b2a4 	.word	0x2000b2a4

0800f52c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f52c:	b5b0      	push	{r4, r5, r7, lr}
 800f52e:	b086      	sub	sp, #24
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	607a      	str	r2, [r7, #4]
 800f538:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f53a:	e03e      	b.n	800f5ba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7fc ff6e 	bl	800c42c <pbuf_clen>
 800f550:	4603      	mov	r3, r0
 800f552:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f55a:	8a7a      	ldrh	r2, [r7, #18]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d906      	bls.n	800f56e <tcp_free_acked_segments+0x42>
 800f560:	4b2a      	ldr	r3, [pc, #168]	@ (800f60c <tcp_free_acked_segments+0xe0>)
 800f562:	f240 4257 	movw	r2, #1111	@ 0x457
 800f566:	492a      	ldr	r1, [pc, #168]	@ (800f610 <tcp_free_acked_segments+0xe4>)
 800f568:	482a      	ldr	r0, [pc, #168]	@ (800f614 <tcp_free_acked_segments+0xe8>)
 800f56a:	f005 fd45 	bl	8014ff8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800f574:	8a7b      	ldrh	r3, [r7, #18]
 800f576:	1ad3      	subs	r3, r2, r3
 800f578:	b29a      	uxth	r2, r3
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	891a      	ldrh	r2, [r3, #8]
 800f584:	4b24      	ldr	r3, [pc, #144]	@ (800f618 <tcp_free_acked_segments+0xec>)
 800f586:	881b      	ldrh	r3, [r3, #0]
 800f588:	4413      	add	r3, r2
 800f58a:	b29a      	uxth	r2, r3
 800f58c:	4b22      	ldr	r3, [pc, #136]	@ (800f618 <tcp_free_acked_segments+0xec>)
 800f58e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f590:	6978      	ldr	r0, [r7, #20]
 800f592:	f7fe f9da 	bl	800d94a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d00c      	beq.n	800f5ba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d109      	bne.n	800f5ba <tcp_free_acked_segments+0x8e>
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d106      	bne.n	800f5ba <tcp_free_acked_segments+0x8e>
 800f5ac:	4b17      	ldr	r3, [pc, #92]	@ (800f60c <tcp_free_acked_segments+0xe0>)
 800f5ae:	f240 4261 	movw	r2, #1121	@ 0x461
 800f5b2:	491a      	ldr	r1, [pc, #104]	@ (800f61c <tcp_free_acked_segments+0xf0>)
 800f5b4:	4817      	ldr	r0, [pc, #92]	@ (800f614 <tcp_free_acked_segments+0xe8>)
 800f5b6:	f005 fd1f 	bl	8014ff8 <iprintf>
  while (seg_list != NULL &&
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d020      	beq.n	800f602 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7fb fb60 	bl	800ac8c <lwip_htonl>
 800f5cc:	4604      	mov	r4, r0
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	891b      	ldrh	r3, [r3, #8]
 800f5d2:	461d      	mov	r5, r3
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	899b      	ldrh	r3, [r3, #12]
 800f5da:	b29b      	uxth	r3, r3
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7fb fb3f 	bl	800ac60 <lwip_htons>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	f003 0303 	and.w	r3, r3, #3
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d001      	beq.n	800f5f2 <tcp_free_acked_segments+0xc6>
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	e000      	b.n	800f5f4 <tcp_free_acked_segments+0xc8>
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	442b      	add	r3, r5
 800f5f6:	18e2      	adds	r2, r4, r3
 800f5f8:	4b09      	ldr	r3, [pc, #36]	@ (800f620 <tcp_free_acked_segments+0xf4>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	dd9c      	ble.n	800f53c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f602:	68bb      	ldr	r3, [r7, #8]
}
 800f604:	4618      	mov	r0, r3
 800f606:	3718      	adds	r7, #24
 800f608:	46bd      	mov	sp, r7
 800f60a:	bdb0      	pop	{r4, r5, r7, pc}
 800f60c:	0801829c 	.word	0x0801829c
 800f610:	08018584 	.word	0x08018584
 800f614:	080182e8 	.word	0x080182e8
 800f618:	2000b2ac 	.word	0x2000b2ac
 800f61c:	080185ac 	.word	0x080185ac
 800f620:	2000b2a8 	.word	0x2000b2a8

0800f624 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f624:	b5b0      	push	{r4, r5, r7, lr}
 800f626:	b094      	sub	sp, #80	@ 0x50
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f62c:	2300      	movs	r3, #0
 800f62e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d106      	bne.n	800f644 <tcp_receive+0x20>
 800f636:	4b91      	ldr	r3, [pc, #580]	@ (800f87c <tcp_receive+0x258>)
 800f638:	f240 427b 	movw	r2, #1147	@ 0x47b
 800f63c:	4990      	ldr	r1, [pc, #576]	@ (800f880 <tcp_receive+0x25c>)
 800f63e:	4891      	ldr	r0, [pc, #580]	@ (800f884 <tcp_receive+0x260>)
 800f640:	f005 fcda 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	7d1b      	ldrb	r3, [r3, #20]
 800f648:	2b03      	cmp	r3, #3
 800f64a:	d806      	bhi.n	800f65a <tcp_receive+0x36>
 800f64c:	4b8b      	ldr	r3, [pc, #556]	@ (800f87c <tcp_receive+0x258>)
 800f64e:	f240 427c 	movw	r2, #1148	@ 0x47c
 800f652:	498d      	ldr	r1, [pc, #564]	@ (800f888 <tcp_receive+0x264>)
 800f654:	488b      	ldr	r0, [pc, #556]	@ (800f884 <tcp_receive+0x260>)
 800f656:	f005 fccf 	bl	8014ff8 <iprintf>

  if (flags & TCP_ACK) {
 800f65a:	4b8c      	ldr	r3, [pc, #560]	@ (800f88c <tcp_receive+0x268>)
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	f003 0310 	and.w	r3, r3, #16
 800f662:	2b00      	cmp	r3, #0
 800f664:	f000 8264 	beq.w	800fb30 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f66e:	461a      	mov	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f674:	4413      	add	r3, r2
 800f676:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f67c:	4b84      	ldr	r3, [pc, #528]	@ (800f890 <tcp_receive+0x26c>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	1ad3      	subs	r3, r2, r3
 800f682:	2b00      	cmp	r3, #0
 800f684:	db1b      	blt.n	800f6be <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f68a:	4b81      	ldr	r3, [pc, #516]	@ (800f890 <tcp_receive+0x26c>)
 800f68c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f68e:	429a      	cmp	r2, r3
 800f690:	d106      	bne.n	800f6a0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f696:	4b7f      	ldr	r3, [pc, #508]	@ (800f894 <tcp_receive+0x270>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	1ad3      	subs	r3, r2, r3
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	db0e      	blt.n	800f6be <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f6a4:	4b7b      	ldr	r3, [pc, #492]	@ (800f894 <tcp_receive+0x270>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d125      	bne.n	800f6f8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f6ac:	4b7a      	ldr	r3, [pc, #488]	@ (800f898 <tcp_receive+0x274>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	89db      	ldrh	r3, [r3, #14]
 800f6b2:	b29a      	uxth	r2, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d91c      	bls.n	800f6f8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f6be:	4b76      	ldr	r3, [pc, #472]	@ (800f898 <tcp_receive+0x274>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	89db      	ldrh	r3, [r3, #14]
 800f6c4:	b29a      	uxth	r2, r3
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d205      	bcs.n	800f6e8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800f6e8:	4b69      	ldr	r3, [pc, #420]	@ (800f890 <tcp_receive+0x26c>)
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800f6f0:	4b68      	ldr	r3, [pc, #416]	@ (800f894 <tcp_receive+0x270>)
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f6f8:	4b66      	ldr	r3, [pc, #408]	@ (800f894 <tcp_receive+0x270>)
 800f6fa:	681a      	ldr	r2, [r3, #0]
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f700:	1ad3      	subs	r3, r2, r3
 800f702:	2b00      	cmp	r3, #0
 800f704:	dc58      	bgt.n	800f7b8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f706:	4b65      	ldr	r3, [pc, #404]	@ (800f89c <tcp_receive+0x278>)
 800f708:	881b      	ldrh	r3, [r3, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d14b      	bne.n	800f7a6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f712:	687a      	ldr	r2, [r7, #4]
 800f714:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800f718:	4413      	add	r3, r2
 800f71a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d142      	bne.n	800f7a6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f726:	2b00      	cmp	r3, #0
 800f728:	db3d      	blt.n	800f7a6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f72e:	4b59      	ldr	r3, [pc, #356]	@ (800f894 <tcp_receive+0x270>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	429a      	cmp	r2, r3
 800f734:	d137      	bne.n	800f7a6 <tcp_receive+0x182>
              found_dupack = 1;
 800f736:	2301      	movs	r3, #1
 800f738:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f740:	2bff      	cmp	r3, #255	@ 0xff
 800f742:	d007      	beq.n	800f754 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f74a:	3301      	adds	r3, #1
 800f74c:	b2da      	uxtb	r2, r3
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f75a:	2b03      	cmp	r3, #3
 800f75c:	d91b      	bls.n	800f796 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f768:	4413      	add	r3, r2
 800f76a:	b29a      	uxth	r2, r3
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f772:	429a      	cmp	r2, r3
 800f774:	d30a      	bcc.n	800f78c <tcp_receive+0x168>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f780:	4413      	add	r3, r2
 800f782:	b29a      	uxth	r2, r3
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f78a:	e004      	b.n	800f796 <tcp_receive+0x172>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f792:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f79c:	2b02      	cmp	r3, #2
 800f79e:	d902      	bls.n	800f7a6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f001 fee7 	bl	8011574 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f7a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	f040 8161 	bne.w	800fa70 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f7b6:	e15b      	b.n	800fa70 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f7b8:	4b36      	ldr	r3, [pc, #216]	@ (800f894 <tcp_receive+0x270>)
 800f7ba:	681a      	ldr	r2, [r3, #0]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7c0:	1ad3      	subs	r3, r2, r3
 800f7c2:	3b01      	subs	r3, #1
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	f2c0 814e 	blt.w	800fa66 <tcp_receive+0x442>
 800f7ca:	4b32      	ldr	r3, [pc, #200]	@ (800f894 <tcp_receive+0x270>)
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7d2:	1ad3      	subs	r3, r2, r3
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	f300 8146 	bgt.w	800fa66 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	8b5b      	ldrh	r3, [r3, #26]
 800f7de:	f003 0304 	and.w	r3, r3, #4
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d010      	beq.n	800f808 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	8b5b      	ldrh	r3, [r3, #26]
 800f7ea:	f023 0304 	bic.w	r3, r3, #4
 800f7ee:	b29a      	uxth	r2, r3
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2200      	movs	r2, #0
 800f804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2200      	movs	r2, #0
 800f80c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f816:	10db      	asrs	r3, r3, #3
 800f818:	b21b      	sxth	r3, r3
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f822:	b29b      	uxth	r3, r3
 800f824:	4413      	add	r3, r2
 800f826:	b29b      	uxth	r3, r3
 800f828:	b21a      	sxth	r2, r3
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f830:	4b18      	ldr	r3, [pc, #96]	@ (800f894 <tcp_receive+0x270>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	b29a      	uxth	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f83a:	b29b      	uxth	r3, r3
 800f83c:	1ad3      	subs	r3, r2, r3
 800f83e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2200      	movs	r2, #0
 800f844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800f848:	4b12      	ldr	r3, [pc, #72]	@ (800f894 <tcp_receive+0x270>)
 800f84a:	681a      	ldr	r2, [r3, #0]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	7d1b      	ldrb	r3, [r3, #20]
 800f854:	2b03      	cmp	r3, #3
 800f856:	f240 8097 	bls.w	800f988 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f866:	429a      	cmp	r2, r3
 800f868:	d245      	bcs.n	800f8f6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	8b5b      	ldrh	r3, [r3, #26]
 800f86e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f872:	2b00      	cmp	r3, #0
 800f874:	d014      	beq.n	800f8a0 <tcp_receive+0x27c>
 800f876:	2301      	movs	r3, #1
 800f878:	e013      	b.n	800f8a2 <tcp_receive+0x27e>
 800f87a:	bf00      	nop
 800f87c:	0801829c 	.word	0x0801829c
 800f880:	080185cc 	.word	0x080185cc
 800f884:	080182e8 	.word	0x080182e8
 800f888:	080185e8 	.word	0x080185e8
 800f88c:	2000b2b0 	.word	0x2000b2b0
 800f890:	2000b2a4 	.word	0x2000b2a4
 800f894:	2000b2a8 	.word	0x2000b2a8
 800f898:	2000b294 	.word	0x2000b294
 800f89c:	2000b2ae 	.word	0x2000b2ae
 800f8a0:	2302      	movs	r3, #2
 800f8a2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f8a6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f8aa:	b29a      	uxth	r2, r3
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f8b0:	fb12 f303 	smulbb	r3, r2, r3
 800f8b4:	b29b      	uxth	r3, r3
 800f8b6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	bf28      	it	cs
 800f8bc:	4613      	movcs	r3, r2
 800f8be:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f8c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f8c8:	4413      	add	r3, r2
 800f8ca:	b29a      	uxth	r2, r3
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d309      	bcc.n	800f8ea <tcp_receive+0x2c6>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f8dc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f8de:	4413      	add	r3, r2
 800f8e0:	b29a      	uxth	r2, r3
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f8e8:	e04e      	b.n	800f988 <tcp_receive+0x364>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f8f0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f8f4:	e048      	b.n	800f988 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f8fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f8fe:	4413      	add	r3, r2
 800f900:	b29a      	uxth	r2, r3
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f908:	429a      	cmp	r2, r3
 800f90a:	d309      	bcc.n	800f920 <tcp_receive+0x2fc>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f912:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f914:	4413      	add	r3, r2
 800f916:	b29a      	uxth	r2, r3
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f91e:	e004      	b.n	800f92a <tcp_receive+0x306>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f926:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f936:	429a      	cmp	r2, r3
 800f938:	d326      	bcc.n	800f988 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f946:	1ad3      	subs	r3, r2, r3
 800f948:	b29a      	uxth	r2, r3
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f95a:	4413      	add	r3, r2
 800f95c:	b29a      	uxth	r2, r3
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f964:	429a      	cmp	r2, r3
 800f966:	d30a      	bcc.n	800f97e <tcp_receive+0x35a>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f972:	4413      	add	r3, r2
 800f974:	b29a      	uxth	r2, r3
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f97c:	e004      	b.n	800f988 <tcp_receive+0x364>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f984:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f990:	4a98      	ldr	r2, [pc, #608]	@ (800fbf4 <tcp_receive+0x5d0>)
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f7ff fdca 	bl	800f52c <tcp_free_acked_segments>
 800f998:	4602      	mov	r2, r0
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9a6:	4a94      	ldr	r2, [pc, #592]	@ (800fbf8 <tcp_receive+0x5d4>)
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f7ff fdbf 	bl	800f52c <tcp_free_acked_segments>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d104      	bne.n	800f9c6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f9c2:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f9c4:	e002      	b.n	800f9cc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d103      	bne.n	800f9e2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f9e8:	4b84      	ldr	r3, [pc, #528]	@ (800fbfc <tcp_receive+0x5d8>)
 800f9ea:	881b      	ldrh	r3, [r3, #0]
 800f9ec:	4413      	add	r3, r2
 800f9ee:	b29a      	uxth	r2, r3
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	8b5b      	ldrh	r3, [r3, #26]
 800f9fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d035      	beq.n	800fa6e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d118      	bne.n	800fa3c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d00c      	beq.n	800fa2c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa1a:	68db      	ldr	r3, [r3, #12]
 800fa1c:	685b      	ldr	r3, [r3, #4]
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7fb f934 	bl	800ac8c <lwip_htonl>
 800fa24:	4603      	mov	r3, r0
 800fa26:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	dc20      	bgt.n	800fa6e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	8b5b      	ldrh	r3, [r3, #26]
 800fa30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fa34:	b29a      	uxth	r2, r3
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa3a:	e018      	b.n	800fa6e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa44:	68db      	ldr	r3, [r3, #12]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7fb f91f 	bl	800ac8c <lwip_htonl>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	1ae3      	subs	r3, r4, r3
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	dc0b      	bgt.n	800fa6e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	8b5b      	ldrh	r3, [r3, #26]
 800fa5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fa5e:	b29a      	uxth	r2, r3
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa64:	e003      	b.n	800fa6e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f001 ff70 	bl	801194c <tcp_send_empty_ack>
 800fa6c:	e000      	b.n	800fa70 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa6e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d05b      	beq.n	800fb30 <tcp_receive+0x50c>
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa7c:	4b60      	ldr	r3, [pc, #384]	@ (800fc00 <tcp_receive+0x5dc>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	1ad3      	subs	r3, r2, r3
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	da54      	bge.n	800fb30 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fa86:	4b5f      	ldr	r3, [pc, #380]	@ (800fc04 <tcp_receive+0x5e0>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	b29a      	uxth	r2, r3
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	1ad3      	subs	r3, r2, r3
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fa9a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800faa4:	10db      	asrs	r3, r3, #3
 800faa6:	b21b      	sxth	r3, r3
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	1ad3      	subs	r3, r2, r3
 800faac:	b29b      	uxth	r3, r3
 800faae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fab8:	b29a      	uxth	r2, r3
 800faba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fabe:	4413      	add	r3, r2
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	b21a      	sxth	r2, r3
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800fac8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800facc:	2b00      	cmp	r3, #0
 800face:	da05      	bge.n	800fadc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800fad0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fad4:	425b      	negs	r3, r3
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fadc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fae6:	109b      	asrs	r3, r3, #2
 800fae8:	b21b      	sxth	r3, r3
 800faea:	b29b      	uxth	r3, r3
 800faec:	1ad3      	subs	r3, r2, r3
 800faee:	b29b      	uxth	r3, r3
 800faf0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fafa:	b29a      	uxth	r2, r3
 800fafc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fb00:	4413      	add	r3, r2
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	b21a      	sxth	r2, r3
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fb10:	10db      	asrs	r3, r3, #3
 800fb12:	b21b      	sxth	r3, r3
 800fb14:	b29a      	uxth	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fb1c:	b29b      	uxth	r3, r3
 800fb1e:	4413      	add	r3, r2
 800fb20:	b29b      	uxth	r3, r3
 800fb22:	b21a      	sxth	r2, r3
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fb30:	4b35      	ldr	r3, [pc, #212]	@ (800fc08 <tcp_receive+0x5e4>)
 800fb32:	881b      	ldrh	r3, [r3, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f000 84df 	beq.w	80104f8 <tcp_receive+0xed4>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	7d1b      	ldrb	r3, [r3, #20]
 800fb3e:	2b06      	cmp	r3, #6
 800fb40:	f200 84da 	bhi.w	80104f8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb48:	4b30      	ldr	r3, [pc, #192]	@ (800fc0c <tcp_receive+0x5e8>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	1ad3      	subs	r3, r2, r3
 800fb4e:	3b01      	subs	r3, #1
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f2c0 808f 	blt.w	800fc74 <tcp_receive+0x650>
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb5a:	4b2b      	ldr	r3, [pc, #172]	@ (800fc08 <tcp_receive+0x5e4>)
 800fb5c:	881b      	ldrh	r3, [r3, #0]
 800fb5e:	4619      	mov	r1, r3
 800fb60:	4b2a      	ldr	r3, [pc, #168]	@ (800fc0c <tcp_receive+0x5e8>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	440b      	add	r3, r1
 800fb66:	1ad3      	subs	r3, r2, r3
 800fb68:	3301      	adds	r3, #1
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	f300 8082 	bgt.w	800fc74 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fb70:	4b27      	ldr	r3, [pc, #156]	@ (800fc10 <tcp_receive+0x5ec>)
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb7a:	4b24      	ldr	r3, [pc, #144]	@ (800fc0c <tcp_receive+0x5e8>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	1ad3      	subs	r3, r2, r3
 800fb80:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fb82:	4b23      	ldr	r3, [pc, #140]	@ (800fc10 <tcp_receive+0x5ec>)
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d106      	bne.n	800fb98 <tcp_receive+0x574>
 800fb8a:	4b22      	ldr	r3, [pc, #136]	@ (800fc14 <tcp_receive+0x5f0>)
 800fb8c:	f240 5294 	movw	r2, #1428	@ 0x594
 800fb90:	4921      	ldr	r1, [pc, #132]	@ (800fc18 <tcp_receive+0x5f4>)
 800fb92:	4822      	ldr	r0, [pc, #136]	@ (800fc1c <tcp_receive+0x5f8>)
 800fb94:	f005 fa30 	bl	8014ff8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb9a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d906      	bls.n	800fbb0 <tcp_receive+0x58c>
 800fba2:	4b1c      	ldr	r3, [pc, #112]	@ (800fc14 <tcp_receive+0x5f0>)
 800fba4:	f240 5295 	movw	r2, #1429	@ 0x595
 800fba8:	491d      	ldr	r1, [pc, #116]	@ (800fc20 <tcp_receive+0x5fc>)
 800fbaa:	481c      	ldr	r0, [pc, #112]	@ (800fc1c <tcp_receive+0x5f8>)
 800fbac:	f005 fa24 	bl	8014ff8 <iprintf>
      off = (u16_t)off32;
 800fbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbb2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fbb6:	4b16      	ldr	r3, [pc, #88]	@ (800fc10 <tcp_receive+0x5ec>)
 800fbb8:	685b      	ldr	r3, [r3, #4]
 800fbba:	891b      	ldrh	r3, [r3, #8]
 800fbbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d906      	bls.n	800fbd2 <tcp_receive+0x5ae>
 800fbc4:	4b13      	ldr	r3, [pc, #76]	@ (800fc14 <tcp_receive+0x5f0>)
 800fbc6:	f240 5297 	movw	r2, #1431	@ 0x597
 800fbca:	4916      	ldr	r1, [pc, #88]	@ (800fc24 <tcp_receive+0x600>)
 800fbcc:	4813      	ldr	r0, [pc, #76]	@ (800fc1c <tcp_receive+0x5f8>)
 800fbce:	f005 fa13 	bl	8014ff8 <iprintf>
      inseg.len -= off;
 800fbd2:	4b0f      	ldr	r3, [pc, #60]	@ (800fc10 <tcp_receive+0x5ec>)
 800fbd4:	891a      	ldrh	r2, [r3, #8]
 800fbd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fbda:	1ad3      	subs	r3, r2, r3
 800fbdc:	b29a      	uxth	r2, r3
 800fbde:	4b0c      	ldr	r3, [pc, #48]	@ (800fc10 <tcp_receive+0x5ec>)
 800fbe0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fbe2:	4b0b      	ldr	r3, [pc, #44]	@ (800fc10 <tcp_receive+0x5ec>)
 800fbe4:	685b      	ldr	r3, [r3, #4]
 800fbe6:	891a      	ldrh	r2, [r3, #8]
 800fbe8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fbec:	1ad3      	subs	r3, r2, r3
 800fbee:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800fbf0:	e02a      	b.n	800fc48 <tcp_receive+0x624>
 800fbf2:	bf00      	nop
 800fbf4:	08018604 	.word	0x08018604
 800fbf8:	0801860c 	.word	0x0801860c
 800fbfc:	2000b2ac 	.word	0x2000b2ac
 800fc00:	2000b2a8 	.word	0x2000b2a8
 800fc04:	2000b26c 	.word	0x2000b26c
 800fc08:	2000b2ae 	.word	0x2000b2ae
 800fc0c:	2000b2a4 	.word	0x2000b2a4
 800fc10:	2000b284 	.word	0x2000b284
 800fc14:	0801829c 	.word	0x0801829c
 800fc18:	08018614 	.word	0x08018614
 800fc1c:	080182e8 	.word	0x080182e8
 800fc20:	08018624 	.word	0x08018624
 800fc24:	08018634 	.word	0x08018634
        off -= p->len;
 800fc28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc2a:	895b      	ldrh	r3, [r3, #10]
 800fc2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fc30:	1ad3      	subs	r3, r2, r3
 800fc32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fc36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc38:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fc3a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fc3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc3e:	2200      	movs	r2, #0
 800fc40:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fc42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800fc48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc4a:	895b      	ldrh	r3, [r3, #10]
 800fc4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d8e9      	bhi.n	800fc28 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fc54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fc58:	4619      	mov	r1, r3
 800fc5a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fc5c:	f7fc fad8 	bl	800c210 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc64:	4a90      	ldr	r2, [pc, #576]	@ (800fea8 <tcp_receive+0x884>)
 800fc66:	6013      	str	r3, [r2, #0]
 800fc68:	4b90      	ldr	r3, [pc, #576]	@ (800feac <tcp_receive+0x888>)
 800fc6a:	68db      	ldr	r3, [r3, #12]
 800fc6c:	4a8e      	ldr	r2, [pc, #568]	@ (800fea8 <tcp_receive+0x884>)
 800fc6e:	6812      	ldr	r2, [r2, #0]
 800fc70:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fc72:	e00d      	b.n	800fc90 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fc74:	4b8c      	ldr	r3, [pc, #560]	@ (800fea8 <tcp_receive+0x884>)
 800fc76:	681a      	ldr	r2, [r3, #0]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc7c:	1ad3      	subs	r3, r2, r3
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	da06      	bge.n	800fc90 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	8b5b      	ldrh	r3, [r3, #26]
 800fc86:	f043 0302 	orr.w	r3, r3, #2
 800fc8a:	b29a      	uxth	r2, r3
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fc90:	4b85      	ldr	r3, [pc, #532]	@ (800fea8 <tcp_receive+0x884>)
 800fc92:	681a      	ldr	r2, [r3, #0]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc98:	1ad3      	subs	r3, r2, r3
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	f2c0 8427 	blt.w	80104ee <tcp_receive+0xeca>
 800fca0:	4b81      	ldr	r3, [pc, #516]	@ (800fea8 <tcp_receive+0x884>)
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fca8:	6879      	ldr	r1, [r7, #4]
 800fcaa:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fcac:	440b      	add	r3, r1
 800fcae:	1ad3      	subs	r3, r2, r3
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	f300 841b 	bgt.w	80104ee <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fcbc:	4b7a      	ldr	r3, [pc, #488]	@ (800fea8 <tcp_receive+0x884>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	f040 8298 	bne.w	80101f6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fcc6:	4b79      	ldr	r3, [pc, #484]	@ (800feac <tcp_receive+0x888>)
 800fcc8:	891c      	ldrh	r4, [r3, #8]
 800fcca:	4b78      	ldr	r3, [pc, #480]	@ (800feac <tcp_receive+0x888>)
 800fccc:	68db      	ldr	r3, [r3, #12]
 800fcce:	899b      	ldrh	r3, [r3, #12]
 800fcd0:	b29b      	uxth	r3, r3
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7fa ffc4 	bl	800ac60 <lwip_htons>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	b2db      	uxtb	r3, r3
 800fcdc:	f003 0303 	and.w	r3, r3, #3
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d001      	beq.n	800fce8 <tcp_receive+0x6c4>
 800fce4:	2301      	movs	r3, #1
 800fce6:	e000      	b.n	800fcea <tcp_receive+0x6c6>
 800fce8:	2300      	movs	r3, #0
 800fcea:	4423      	add	r3, r4
 800fcec:	b29a      	uxth	r2, r3
 800fcee:	4b70      	ldr	r3, [pc, #448]	@ (800feb0 <tcp_receive+0x88c>)
 800fcf0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fcf6:	4b6e      	ldr	r3, [pc, #440]	@ (800feb0 <tcp_receive+0x88c>)
 800fcf8:	881b      	ldrh	r3, [r3, #0]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d274      	bcs.n	800fde8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fcfe:	4b6b      	ldr	r3, [pc, #428]	@ (800feac <tcp_receive+0x888>)
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	899b      	ldrh	r3, [r3, #12]
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fa ffaa 	bl	800ac60 <lwip_htons>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	b2db      	uxtb	r3, r3
 800fd10:	f003 0301 	and.w	r3, r3, #1
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d01e      	beq.n	800fd56 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fd18:	4b64      	ldr	r3, [pc, #400]	@ (800feac <tcp_receive+0x888>)
 800fd1a:	68db      	ldr	r3, [r3, #12]
 800fd1c:	899b      	ldrh	r3, [r3, #12]
 800fd1e:	b29b      	uxth	r3, r3
 800fd20:	b21b      	sxth	r3, r3
 800fd22:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fd26:	b21c      	sxth	r4, r3
 800fd28:	4b60      	ldr	r3, [pc, #384]	@ (800feac <tcp_receive+0x888>)
 800fd2a:	68db      	ldr	r3, [r3, #12]
 800fd2c:	899b      	ldrh	r3, [r3, #12]
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7fa ff95 	bl	800ac60 <lwip_htons>
 800fd36:	4603      	mov	r3, r0
 800fd38:	b2db      	uxtb	r3, r3
 800fd3a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	4618      	mov	r0, r3
 800fd42:	f7fa ff8d 	bl	800ac60 <lwip_htons>
 800fd46:	4603      	mov	r3, r0
 800fd48:	b21b      	sxth	r3, r3
 800fd4a:	4323      	orrs	r3, r4
 800fd4c:	b21a      	sxth	r2, r3
 800fd4e:	4b57      	ldr	r3, [pc, #348]	@ (800feac <tcp_receive+0x888>)
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	b292      	uxth	r2, r2
 800fd54:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fd5a:	4b54      	ldr	r3, [pc, #336]	@ (800feac <tcp_receive+0x888>)
 800fd5c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fd5e:	4b53      	ldr	r3, [pc, #332]	@ (800feac <tcp_receive+0x888>)
 800fd60:	68db      	ldr	r3, [r3, #12]
 800fd62:	899b      	ldrh	r3, [r3, #12]
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fa ff7a 	bl	800ac60 <lwip_htons>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	f003 0302 	and.w	r3, r3, #2
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d005      	beq.n	800fd84 <tcp_receive+0x760>
            inseg.len -= 1;
 800fd78:	4b4c      	ldr	r3, [pc, #304]	@ (800feac <tcp_receive+0x888>)
 800fd7a:	891b      	ldrh	r3, [r3, #8]
 800fd7c:	3b01      	subs	r3, #1
 800fd7e:	b29a      	uxth	r2, r3
 800fd80:	4b4a      	ldr	r3, [pc, #296]	@ (800feac <tcp_receive+0x888>)
 800fd82:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fd84:	4b49      	ldr	r3, [pc, #292]	@ (800feac <tcp_receive+0x888>)
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	4a48      	ldr	r2, [pc, #288]	@ (800feac <tcp_receive+0x888>)
 800fd8a:	8912      	ldrh	r2, [r2, #8]
 800fd8c:	4611      	mov	r1, r2
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7fc f93e 	bl	800c010 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fd94:	4b45      	ldr	r3, [pc, #276]	@ (800feac <tcp_receive+0x888>)
 800fd96:	891c      	ldrh	r4, [r3, #8]
 800fd98:	4b44      	ldr	r3, [pc, #272]	@ (800feac <tcp_receive+0x888>)
 800fd9a:	68db      	ldr	r3, [r3, #12]
 800fd9c:	899b      	ldrh	r3, [r3, #12]
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	4618      	mov	r0, r3
 800fda2:	f7fa ff5d 	bl	800ac60 <lwip_htons>
 800fda6:	4603      	mov	r3, r0
 800fda8:	b2db      	uxtb	r3, r3
 800fdaa:	f003 0303 	and.w	r3, r3, #3
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d001      	beq.n	800fdb6 <tcp_receive+0x792>
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	e000      	b.n	800fdb8 <tcp_receive+0x794>
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	4423      	add	r3, r4
 800fdba:	b29a      	uxth	r2, r3
 800fdbc:	4b3c      	ldr	r3, [pc, #240]	@ (800feb0 <tcp_receive+0x88c>)
 800fdbe:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fdc0:	4b3b      	ldr	r3, [pc, #236]	@ (800feb0 <tcp_receive+0x88c>)
 800fdc2:	881b      	ldrh	r3, [r3, #0]
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	4b38      	ldr	r3, [pc, #224]	@ (800fea8 <tcp_receive+0x884>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	441a      	add	r2, r3
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdd0:	6879      	ldr	r1, [r7, #4]
 800fdd2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fdd4:	440b      	add	r3, r1
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d006      	beq.n	800fde8 <tcp_receive+0x7c4>
 800fdda:	4b36      	ldr	r3, [pc, #216]	@ (800feb4 <tcp_receive+0x890>)
 800fddc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800fde0:	4935      	ldr	r1, [pc, #212]	@ (800feb8 <tcp_receive+0x894>)
 800fde2:	4836      	ldr	r0, [pc, #216]	@ (800febc <tcp_receive+0x898>)
 800fde4:	f005 f908 	bl	8014ff8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	f000 80e6 	beq.w	800ffbe <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fdf2:	4b2e      	ldr	r3, [pc, #184]	@ (800feac <tcp_receive+0x888>)
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	899b      	ldrh	r3, [r3, #12]
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7fa ff30 	bl	800ac60 <lwip_htons>
 800fe00:	4603      	mov	r3, r0
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	f003 0301 	and.w	r3, r3, #1
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d010      	beq.n	800fe2e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fe0c:	e00a      	b.n	800fe24 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe12:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe18:	681a      	ldr	r2, [r3, #0]
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800fe1e:	68f8      	ldr	r0, [r7, #12]
 800fe20:	f7fd fd93 	bl	800d94a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d1f0      	bne.n	800fe0e <tcp_receive+0x7ea>
 800fe2c:	e0c7      	b.n	800ffbe <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe32:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fe34:	e051      	b.n	800feda <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fe36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe38:	68db      	ldr	r3, [r3, #12]
 800fe3a:	899b      	ldrh	r3, [r3, #12]
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7fa ff0e 	bl	800ac60 <lwip_htons>
 800fe44:	4603      	mov	r3, r0
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	f003 0301 	and.w	r3, r3, #1
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d03c      	beq.n	800feca <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fe50:	4b16      	ldr	r3, [pc, #88]	@ (800feac <tcp_receive+0x888>)
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	899b      	ldrh	r3, [r3, #12]
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7fa ff01 	bl	800ac60 <lwip_htons>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d12f      	bne.n	800feca <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fe6a:	4b10      	ldr	r3, [pc, #64]	@ (800feac <tcp_receive+0x888>)
 800fe6c:	68db      	ldr	r3, [r3, #12]
 800fe6e:	899b      	ldrh	r3, [r3, #12]
 800fe70:	b29c      	uxth	r4, r3
 800fe72:	2001      	movs	r0, #1
 800fe74:	f7fa fef4 	bl	800ac60 <lwip_htons>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	4b0b      	ldr	r3, [pc, #44]	@ (800feac <tcp_receive+0x888>)
 800fe7e:	68db      	ldr	r3, [r3, #12]
 800fe80:	4322      	orrs	r2, r4
 800fe82:	b292      	uxth	r2, r2
 800fe84:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fe86:	4b09      	ldr	r3, [pc, #36]	@ (800feac <tcp_receive+0x888>)
 800fe88:	891c      	ldrh	r4, [r3, #8]
 800fe8a:	4b08      	ldr	r3, [pc, #32]	@ (800feac <tcp_receive+0x888>)
 800fe8c:	68db      	ldr	r3, [r3, #12]
 800fe8e:	899b      	ldrh	r3, [r3, #12]
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7fa fee4 	bl	800ac60 <lwip_htons>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	f003 0303 	and.w	r3, r3, #3
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d00d      	beq.n	800fec0 <tcp_receive+0x89c>
 800fea4:	2301      	movs	r3, #1
 800fea6:	e00c      	b.n	800fec2 <tcp_receive+0x89e>
 800fea8:	2000b2a4 	.word	0x2000b2a4
 800feac:	2000b284 	.word	0x2000b284
 800feb0:	2000b2ae 	.word	0x2000b2ae
 800feb4:	0801829c 	.word	0x0801829c
 800feb8:	08018644 	.word	0x08018644
 800febc:	080182e8 	.word	0x080182e8
 800fec0:	2300      	movs	r3, #0
 800fec2:	4423      	add	r3, r4
 800fec4:	b29a      	uxth	r2, r3
 800fec6:	4b98      	ldr	r3, [pc, #608]	@ (8010128 <tcp_receive+0xb04>)
 800fec8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800feca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fecc:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800fed4:	6938      	ldr	r0, [r7, #16]
 800fed6:	f7fd fd38 	bl	800d94a <tcp_seg_free>
            while (next &&
 800feda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d00e      	beq.n	800fefe <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fee0:	4b91      	ldr	r3, [pc, #580]	@ (8010128 <tcp_receive+0xb04>)
 800fee2:	881b      	ldrh	r3, [r3, #0]
 800fee4:	461a      	mov	r2, r3
 800fee6:	4b91      	ldr	r3, [pc, #580]	@ (801012c <tcp_receive+0xb08>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	441a      	add	r2, r3
 800feec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fef4:	8909      	ldrh	r1, [r1, #8]
 800fef6:	440b      	add	r3, r1
 800fef8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	da9b      	bge.n	800fe36 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fefe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d059      	beq.n	800ffb8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ff04:	4b88      	ldr	r3, [pc, #544]	@ (8010128 <tcp_receive+0xb04>)
 800ff06:	881b      	ldrh	r3, [r3, #0]
 800ff08:	461a      	mov	r2, r3
 800ff0a:	4b88      	ldr	r3, [pc, #544]	@ (801012c <tcp_receive+0xb08>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	441a      	add	r2, r3
 800ff10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	dd4d      	ble.n	800ffb8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ff1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	b29a      	uxth	r2, r3
 800ff24:	4b81      	ldr	r3, [pc, #516]	@ (801012c <tcp_receive+0xb08>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	1ad3      	subs	r3, r2, r3
 800ff2c:	b29a      	uxth	r2, r3
 800ff2e:	4b80      	ldr	r3, [pc, #512]	@ (8010130 <tcp_receive+0xb0c>)
 800ff30:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ff32:	4b7f      	ldr	r3, [pc, #508]	@ (8010130 <tcp_receive+0xb0c>)
 800ff34:	68db      	ldr	r3, [r3, #12]
 800ff36:	899b      	ldrh	r3, [r3, #12]
 800ff38:	b29b      	uxth	r3, r3
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7fa fe90 	bl	800ac60 <lwip_htons>
 800ff40:	4603      	mov	r3, r0
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	f003 0302 	and.w	r3, r3, #2
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d005      	beq.n	800ff58 <tcp_receive+0x934>
                inseg.len -= 1;
 800ff4c:	4b78      	ldr	r3, [pc, #480]	@ (8010130 <tcp_receive+0xb0c>)
 800ff4e:	891b      	ldrh	r3, [r3, #8]
 800ff50:	3b01      	subs	r3, #1
 800ff52:	b29a      	uxth	r2, r3
 800ff54:	4b76      	ldr	r3, [pc, #472]	@ (8010130 <tcp_receive+0xb0c>)
 800ff56:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ff58:	4b75      	ldr	r3, [pc, #468]	@ (8010130 <tcp_receive+0xb0c>)
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	4a74      	ldr	r2, [pc, #464]	@ (8010130 <tcp_receive+0xb0c>)
 800ff5e:	8912      	ldrh	r2, [r2, #8]
 800ff60:	4611      	mov	r1, r2
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7fc f854 	bl	800c010 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ff68:	4b71      	ldr	r3, [pc, #452]	@ (8010130 <tcp_receive+0xb0c>)
 800ff6a:	891c      	ldrh	r4, [r3, #8]
 800ff6c:	4b70      	ldr	r3, [pc, #448]	@ (8010130 <tcp_receive+0xb0c>)
 800ff6e:	68db      	ldr	r3, [r3, #12]
 800ff70:	899b      	ldrh	r3, [r3, #12]
 800ff72:	b29b      	uxth	r3, r3
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7fa fe73 	bl	800ac60 <lwip_htons>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	b2db      	uxtb	r3, r3
 800ff7e:	f003 0303 	and.w	r3, r3, #3
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d001      	beq.n	800ff8a <tcp_receive+0x966>
 800ff86:	2301      	movs	r3, #1
 800ff88:	e000      	b.n	800ff8c <tcp_receive+0x968>
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	4423      	add	r3, r4
 800ff8e:	b29a      	uxth	r2, r3
 800ff90:	4b65      	ldr	r3, [pc, #404]	@ (8010128 <tcp_receive+0xb04>)
 800ff92:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ff94:	4b64      	ldr	r3, [pc, #400]	@ (8010128 <tcp_receive+0xb04>)
 800ff96:	881b      	ldrh	r3, [r3, #0]
 800ff98:	461a      	mov	r2, r3
 800ff9a:	4b64      	ldr	r3, [pc, #400]	@ (801012c <tcp_receive+0xb08>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	441a      	add	r2, r3
 800ffa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d006      	beq.n	800ffb8 <tcp_receive+0x994>
 800ffaa:	4b62      	ldr	r3, [pc, #392]	@ (8010134 <tcp_receive+0xb10>)
 800ffac:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800ffb0:	4961      	ldr	r1, [pc, #388]	@ (8010138 <tcp_receive+0xb14>)
 800ffb2:	4862      	ldr	r0, [pc, #392]	@ (801013c <tcp_receive+0xb18>)
 800ffb4:	f005 f820 	bl	8014ff8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ffbc:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ffbe:	4b5a      	ldr	r3, [pc, #360]	@ (8010128 <tcp_receive+0xb04>)
 800ffc0:	881b      	ldrh	r3, [r3, #0]
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	4b59      	ldr	r3, [pc, #356]	@ (801012c <tcp_receive+0xb08>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	441a      	add	r2, r3
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ffd2:	4b55      	ldr	r3, [pc, #340]	@ (8010128 <tcp_receive+0xb04>)
 800ffd4:	881b      	ldrh	r3, [r3, #0]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d206      	bcs.n	800ffe8 <tcp_receive+0x9c4>
 800ffda:	4b56      	ldr	r3, [pc, #344]	@ (8010134 <tcp_receive+0xb10>)
 800ffdc:	f240 6207 	movw	r2, #1543	@ 0x607
 800ffe0:	4957      	ldr	r1, [pc, #348]	@ (8010140 <tcp_receive+0xb1c>)
 800ffe2:	4856      	ldr	r0, [pc, #344]	@ (801013c <tcp_receive+0xb18>)
 800ffe4:	f005 f808 	bl	8014ff8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ffec:	4b4e      	ldr	r3, [pc, #312]	@ (8010128 <tcp_receive+0xb04>)
 800ffee:	881b      	ldrh	r3, [r3, #0]
 800fff0:	1ad3      	subs	r3, r2, r3
 800fff2:	b29a      	uxth	r2, r3
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f7fc ffc5 	bl	800cf88 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fffe:	4b4c      	ldr	r3, [pc, #304]	@ (8010130 <tcp_receive+0xb0c>)
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	891b      	ldrh	r3, [r3, #8]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d006      	beq.n	8010016 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010008:	4b49      	ldr	r3, [pc, #292]	@ (8010130 <tcp_receive+0xb0c>)
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	4a4d      	ldr	r2, [pc, #308]	@ (8010144 <tcp_receive+0xb20>)
 801000e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010010:	4b47      	ldr	r3, [pc, #284]	@ (8010130 <tcp_receive+0xb0c>)
 8010012:	2200      	movs	r2, #0
 8010014:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010016:	4b46      	ldr	r3, [pc, #280]	@ (8010130 <tcp_receive+0xb0c>)
 8010018:	68db      	ldr	r3, [r3, #12]
 801001a:	899b      	ldrh	r3, [r3, #12]
 801001c:	b29b      	uxth	r3, r3
 801001e:	4618      	mov	r0, r3
 8010020:	f7fa fe1e 	bl	800ac60 <lwip_htons>
 8010024:	4603      	mov	r3, r0
 8010026:	b2db      	uxtb	r3, r3
 8010028:	f003 0301 	and.w	r3, r3, #1
 801002c:	2b00      	cmp	r3, #0
 801002e:	f000 80b8 	beq.w	80101a2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010032:	4b45      	ldr	r3, [pc, #276]	@ (8010148 <tcp_receive+0xb24>)
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	f043 0320 	orr.w	r3, r3, #32
 801003a:	b2da      	uxtb	r2, r3
 801003c:	4b42      	ldr	r3, [pc, #264]	@ (8010148 <tcp_receive+0xb24>)
 801003e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010040:	e0af      	b.n	80101a2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010046:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	685b      	ldr	r3, [r3, #4]
 8010050:	4a36      	ldr	r2, [pc, #216]	@ (801012c <tcp_receive+0xb08>)
 8010052:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	891b      	ldrh	r3, [r3, #8]
 8010058:	461c      	mov	r4, r3
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	899b      	ldrh	r3, [r3, #12]
 8010060:	b29b      	uxth	r3, r3
 8010062:	4618      	mov	r0, r3
 8010064:	f7fa fdfc 	bl	800ac60 <lwip_htons>
 8010068:	4603      	mov	r3, r0
 801006a:	b2db      	uxtb	r3, r3
 801006c:	f003 0303 	and.w	r3, r3, #3
 8010070:	2b00      	cmp	r3, #0
 8010072:	d001      	beq.n	8010078 <tcp_receive+0xa54>
 8010074:	2301      	movs	r3, #1
 8010076:	e000      	b.n	801007a <tcp_receive+0xa56>
 8010078:	2300      	movs	r3, #0
 801007a:	191a      	adds	r2, r3, r4
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010080:	441a      	add	r2, r3
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801008a:	461c      	mov	r4, r3
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	891b      	ldrh	r3, [r3, #8]
 8010090:	461d      	mov	r5, r3
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	68db      	ldr	r3, [r3, #12]
 8010096:	899b      	ldrh	r3, [r3, #12]
 8010098:	b29b      	uxth	r3, r3
 801009a:	4618      	mov	r0, r3
 801009c:	f7fa fde0 	bl	800ac60 <lwip_htons>
 80100a0:	4603      	mov	r3, r0
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	f003 0303 	and.w	r3, r3, #3
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d001      	beq.n	80100b0 <tcp_receive+0xa8c>
 80100ac:	2301      	movs	r3, #1
 80100ae:	e000      	b.n	80100b2 <tcp_receive+0xa8e>
 80100b0:	2300      	movs	r3, #0
 80100b2:	442b      	add	r3, r5
 80100b4:	429c      	cmp	r4, r3
 80100b6:	d206      	bcs.n	80100c6 <tcp_receive+0xaa2>
 80100b8:	4b1e      	ldr	r3, [pc, #120]	@ (8010134 <tcp_receive+0xb10>)
 80100ba:	f240 622b 	movw	r2, #1579	@ 0x62b
 80100be:	4923      	ldr	r1, [pc, #140]	@ (801014c <tcp_receive+0xb28>)
 80100c0:	481e      	ldr	r0, [pc, #120]	@ (801013c <tcp_receive+0xb18>)
 80100c2:	f004 ff99 	bl	8014ff8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	891b      	ldrh	r3, [r3, #8]
 80100ca:	461c      	mov	r4, r3
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	68db      	ldr	r3, [r3, #12]
 80100d0:	899b      	ldrh	r3, [r3, #12]
 80100d2:	b29b      	uxth	r3, r3
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7fa fdc3 	bl	800ac60 <lwip_htons>
 80100da:	4603      	mov	r3, r0
 80100dc:	b2db      	uxtb	r3, r3
 80100de:	f003 0303 	and.w	r3, r3, #3
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d001      	beq.n	80100ea <tcp_receive+0xac6>
 80100e6:	2301      	movs	r3, #1
 80100e8:	e000      	b.n	80100ec <tcp_receive+0xac8>
 80100ea:	2300      	movs	r3, #0
 80100ec:	1919      	adds	r1, r3, r4
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80100f2:	b28b      	uxth	r3, r1
 80100f4:	1ad3      	subs	r3, r2, r3
 80100f6:	b29a      	uxth	r2, r3
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f7fc ff43 	bl	800cf88 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	891b      	ldrh	r3, [r3, #8]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d028      	beq.n	801015e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801010c:	4b0d      	ldr	r3, [pc, #52]	@ (8010144 <tcp_receive+0xb20>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d01d      	beq.n	8010150 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010114:	4b0b      	ldr	r3, [pc, #44]	@ (8010144 <tcp_receive+0xb20>)
 8010116:	681a      	ldr	r2, [r3, #0]
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	4619      	mov	r1, r3
 801011e:	4610      	mov	r0, r2
 8010120:	f7fc f9be 	bl	800c4a0 <pbuf_cat>
 8010124:	e018      	b.n	8010158 <tcp_receive+0xb34>
 8010126:	bf00      	nop
 8010128:	2000b2ae 	.word	0x2000b2ae
 801012c:	2000b2a4 	.word	0x2000b2a4
 8010130:	2000b284 	.word	0x2000b284
 8010134:	0801829c 	.word	0x0801829c
 8010138:	0801867c 	.word	0x0801867c
 801013c:	080182e8 	.word	0x080182e8
 8010140:	080186b8 	.word	0x080186b8
 8010144:	2000b2b4 	.word	0x2000b2b4
 8010148:	2000b2b1 	.word	0x2000b2b1
 801014c:	080186d8 	.word	0x080186d8
            } else {
              recv_data = cseg->p;
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	4a70      	ldr	r2, [pc, #448]	@ (8010318 <tcp_receive+0xcf4>)
 8010156:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	2200      	movs	r2, #0
 801015c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	68db      	ldr	r3, [r3, #12]
 8010162:	899b      	ldrh	r3, [r3, #12]
 8010164:	b29b      	uxth	r3, r3
 8010166:	4618      	mov	r0, r3
 8010168:	f7fa fd7a 	bl	800ac60 <lwip_htons>
 801016c:	4603      	mov	r3, r0
 801016e:	b2db      	uxtb	r3, r3
 8010170:	f003 0301 	and.w	r3, r3, #1
 8010174:	2b00      	cmp	r3, #0
 8010176:	d00d      	beq.n	8010194 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010178:	4b68      	ldr	r3, [pc, #416]	@ (801031c <tcp_receive+0xcf8>)
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	f043 0320 	orr.w	r3, r3, #32
 8010180:	b2da      	uxtb	r2, r3
 8010182:	4b66      	ldr	r3, [pc, #408]	@ (801031c <tcp_receive+0xcf8>)
 8010184:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	7d1b      	ldrb	r3, [r3, #20]
 801018a:	2b04      	cmp	r3, #4
 801018c:	d102      	bne.n	8010194 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2207      	movs	r2, #7
 8010192:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	681a      	ldr	r2, [r3, #0]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801019c:	68b8      	ldr	r0, [r7, #8]
 801019e:	f7fd fbd4 	bl	800d94a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d008      	beq.n	80101bc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101ae:	68db      	ldr	r3, [r3, #12]
 80101b0:	685a      	ldr	r2, [r3, #4]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80101b6:	429a      	cmp	r2, r3
 80101b8:	f43f af43 	beq.w	8010042 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	8b5b      	ldrh	r3, [r3, #26]
 80101c0:	f003 0301 	and.w	r3, r3, #1
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d00e      	beq.n	80101e6 <tcp_receive+0xbc2>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	8b5b      	ldrh	r3, [r3, #26]
 80101cc:	f023 0301 	bic.w	r3, r3, #1
 80101d0:	b29a      	uxth	r2, r3
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	835a      	strh	r2, [r3, #26]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	8b5b      	ldrh	r3, [r3, #26]
 80101da:	f043 0302 	orr.w	r3, r3, #2
 80101de:	b29a      	uxth	r2, r3
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80101e4:	e187      	b.n	80104f6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	8b5b      	ldrh	r3, [r3, #26]
 80101ea:	f043 0301 	orr.w	r3, r3, #1
 80101ee:	b29a      	uxth	r2, r3
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80101f4:	e17f      	b.n	80104f6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d106      	bne.n	801020c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80101fe:	4848      	ldr	r0, [pc, #288]	@ (8010320 <tcp_receive+0xcfc>)
 8010200:	f7fd fbbc 	bl	800d97c <tcp_seg_copy>
 8010204:	4602      	mov	r2, r0
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	675a      	str	r2, [r3, #116]	@ 0x74
 801020a:	e16c      	b.n	80104e6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801020c:	2300      	movs	r3, #0
 801020e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010214:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010216:	e156      	b.n	80104c6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8010218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801021a:	68db      	ldr	r3, [r3, #12]
 801021c:	685a      	ldr	r2, [r3, #4]
 801021e:	4b41      	ldr	r3, [pc, #260]	@ (8010324 <tcp_receive+0xd00>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	429a      	cmp	r2, r3
 8010224:	d11d      	bne.n	8010262 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010226:	4b3e      	ldr	r3, [pc, #248]	@ (8010320 <tcp_receive+0xcfc>)
 8010228:	891a      	ldrh	r2, [r3, #8]
 801022a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801022c:	891b      	ldrh	r3, [r3, #8]
 801022e:	429a      	cmp	r2, r3
 8010230:	f240 814e 	bls.w	80104d0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010234:	483a      	ldr	r0, [pc, #232]	@ (8010320 <tcp_receive+0xcfc>)
 8010236:	f7fd fba1 	bl	800d97c <tcp_seg_copy>
 801023a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	2b00      	cmp	r3, #0
 8010240:	f000 8148 	beq.w	80104d4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8010244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010246:	2b00      	cmp	r3, #0
 8010248:	d003      	beq.n	8010252 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801024a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801024c:	697a      	ldr	r2, [r7, #20]
 801024e:	601a      	str	r2, [r3, #0]
 8010250:	e002      	b.n	8010258 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	697a      	ldr	r2, [r7, #20]
 8010256:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010258:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801025a:	6978      	ldr	r0, [r7, #20]
 801025c:	f7ff f8de 	bl	800f41c <tcp_oos_insert_segment>
                }
                break;
 8010260:	e138      	b.n	80104d4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010264:	2b00      	cmp	r3, #0
 8010266:	d117      	bne.n	8010298 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010268:	4b2e      	ldr	r3, [pc, #184]	@ (8010324 <tcp_receive+0xd00>)
 801026a:	681a      	ldr	r2, [r3, #0]
 801026c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	1ad3      	subs	r3, r2, r3
 8010274:	2b00      	cmp	r3, #0
 8010276:	da57      	bge.n	8010328 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010278:	4829      	ldr	r0, [pc, #164]	@ (8010320 <tcp_receive+0xcfc>)
 801027a:	f7fd fb7f 	bl	800d97c <tcp_seg_copy>
 801027e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010280:	69bb      	ldr	r3, [r7, #24]
 8010282:	2b00      	cmp	r3, #0
 8010284:	f000 8128 	beq.w	80104d8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	69ba      	ldr	r2, [r7, #24]
 801028c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801028e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010290:	69b8      	ldr	r0, [r7, #24]
 8010292:	f7ff f8c3 	bl	800f41c <tcp_oos_insert_segment>
                  }
                  break;
 8010296:	e11f      	b.n	80104d8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010298:	4b22      	ldr	r3, [pc, #136]	@ (8010324 <tcp_receive+0xd00>)
 801029a:	681a      	ldr	r2, [r3, #0]
 801029c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801029e:	68db      	ldr	r3, [r3, #12]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	1ad3      	subs	r3, r2, r3
 80102a4:	3b01      	subs	r3, #1
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	db3e      	blt.n	8010328 <tcp_receive+0xd04>
 80102aa:	4b1e      	ldr	r3, [pc, #120]	@ (8010324 <tcp_receive+0xd00>)
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102b0:	68db      	ldr	r3, [r3, #12]
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	1ad3      	subs	r3, r2, r3
 80102b6:	3301      	adds	r3, #1
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	dc35      	bgt.n	8010328 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80102bc:	4818      	ldr	r0, [pc, #96]	@ (8010320 <tcp_receive+0xcfc>)
 80102be:	f7fd fb5d 	bl	800d97c <tcp_seg_copy>
 80102c2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80102c4:	69fb      	ldr	r3, [r7, #28]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	f000 8108 	beq.w	80104dc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80102cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102ce:	68db      	ldr	r3, [r3, #12]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80102d4:	8912      	ldrh	r2, [r2, #8]
 80102d6:	441a      	add	r2, r3
 80102d8:	4b12      	ldr	r3, [pc, #72]	@ (8010324 <tcp_receive+0xd00>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	1ad3      	subs	r3, r2, r3
 80102de:	2b00      	cmp	r3, #0
 80102e0:	dd12      	ble.n	8010308 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80102e2:	4b10      	ldr	r3, [pc, #64]	@ (8010324 <tcp_receive+0xd00>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	b29a      	uxth	r2, r3
 80102e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102ea:	68db      	ldr	r3, [r3, #12]
 80102ec:	685b      	ldr	r3, [r3, #4]
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	1ad3      	subs	r3, r2, r3
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102f6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80102f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102fa:	685a      	ldr	r2, [r3, #4]
 80102fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102fe:	891b      	ldrh	r3, [r3, #8]
 8010300:	4619      	mov	r1, r3
 8010302:	4610      	mov	r0, r2
 8010304:	f7fb fe84 	bl	800c010 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801030a:	69fa      	ldr	r2, [r7, #28]
 801030c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801030e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010310:	69f8      	ldr	r0, [r7, #28]
 8010312:	f7ff f883 	bl	800f41c <tcp_oos_insert_segment>
                  }
                  break;
 8010316:	e0e1      	b.n	80104dc <tcp_receive+0xeb8>
 8010318:	2000b2b4 	.word	0x2000b2b4
 801031c:	2000b2b1 	.word	0x2000b2b1
 8010320:	2000b284 	.word	0x2000b284
 8010324:	2000b2a4 	.word	0x2000b2a4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801032a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801032c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	2b00      	cmp	r3, #0
 8010332:	f040 80c5 	bne.w	80104c0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010336:	4b7f      	ldr	r3, [pc, #508]	@ (8010534 <tcp_receive+0xf10>)
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801033c:	68db      	ldr	r3, [r3, #12]
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010342:	2b00      	cmp	r3, #0
 8010344:	f340 80bc 	ble.w	80104c0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801034a:	68db      	ldr	r3, [r3, #12]
 801034c:	899b      	ldrh	r3, [r3, #12]
 801034e:	b29b      	uxth	r3, r3
 8010350:	4618      	mov	r0, r3
 8010352:	f7fa fc85 	bl	800ac60 <lwip_htons>
 8010356:	4603      	mov	r3, r0
 8010358:	b2db      	uxtb	r3, r3
 801035a:	f003 0301 	and.w	r3, r3, #1
 801035e:	2b00      	cmp	r3, #0
 8010360:	f040 80be 	bne.w	80104e0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010364:	4874      	ldr	r0, [pc, #464]	@ (8010538 <tcp_receive+0xf14>)
 8010366:	f7fd fb09 	bl	800d97c <tcp_seg_copy>
 801036a:	4602      	mov	r2, r0
 801036c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801036e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	2b00      	cmp	r3, #0
 8010376:	f000 80b5 	beq.w	80104e4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801037a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801037c:	68db      	ldr	r3, [r3, #12]
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010382:	8912      	ldrh	r2, [r2, #8]
 8010384:	441a      	add	r2, r3
 8010386:	4b6b      	ldr	r3, [pc, #428]	@ (8010534 <tcp_receive+0xf10>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	1ad3      	subs	r3, r2, r3
 801038c:	2b00      	cmp	r3, #0
 801038e:	dd12      	ble.n	80103b6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010390:	4b68      	ldr	r3, [pc, #416]	@ (8010534 <tcp_receive+0xf10>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	b29a      	uxth	r2, r3
 8010396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010398:	68db      	ldr	r3, [r3, #12]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	b29b      	uxth	r3, r3
 801039e:	1ad3      	subs	r3, r2, r3
 80103a0:	b29a      	uxth	r2, r3
 80103a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103a4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80103a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103a8:	685a      	ldr	r2, [r3, #4]
 80103aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ac:	891b      	ldrh	r3, [r3, #8]
 80103ae:	4619      	mov	r1, r3
 80103b0:	4610      	mov	r0, r2
 80103b2:	f7fb fe2d 	bl	800c010 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80103b6:	4b61      	ldr	r3, [pc, #388]	@ (801053c <tcp_receive+0xf18>)
 80103b8:	881b      	ldrh	r3, [r3, #0]
 80103ba:	461a      	mov	r2, r3
 80103bc:	4b5d      	ldr	r3, [pc, #372]	@ (8010534 <tcp_receive+0xf10>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	441a      	add	r2, r3
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103c6:	6879      	ldr	r1, [r7, #4]
 80103c8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80103ca:	440b      	add	r3, r1
 80103cc:	1ad3      	subs	r3, r2, r3
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	f340 8088 	ble.w	80104e4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80103d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	68db      	ldr	r3, [r3, #12]
 80103da:	899b      	ldrh	r3, [r3, #12]
 80103dc:	b29b      	uxth	r3, r3
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fa fc3e 	bl	800ac60 <lwip_htons>
 80103e4:	4603      	mov	r3, r0
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	f003 0301 	and.w	r3, r3, #1
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d021      	beq.n	8010434 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80103f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	68db      	ldr	r3, [r3, #12]
 80103f6:	899b      	ldrh	r3, [r3, #12]
 80103f8:	b29b      	uxth	r3, r3
 80103fa:	b21b      	sxth	r3, r3
 80103fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010400:	b21c      	sxth	r4, r3
 8010402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	899b      	ldrh	r3, [r3, #12]
 801040a:	b29b      	uxth	r3, r3
 801040c:	4618      	mov	r0, r3
 801040e:	f7fa fc27 	bl	800ac60 <lwip_htons>
 8010412:	4603      	mov	r3, r0
 8010414:	b2db      	uxtb	r3, r3
 8010416:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801041a:	b29b      	uxth	r3, r3
 801041c:	4618      	mov	r0, r3
 801041e:	f7fa fc1f 	bl	800ac60 <lwip_htons>
 8010422:	4603      	mov	r3, r0
 8010424:	b21b      	sxth	r3, r3
 8010426:	4323      	orrs	r3, r4
 8010428:	b21a      	sxth	r2, r3
 801042a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	68db      	ldr	r3, [r3, #12]
 8010430:	b292      	uxth	r2, r2
 8010432:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010438:	b29a      	uxth	r2, r3
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801043e:	4413      	add	r3, r2
 8010440:	b299      	uxth	r1, r3
 8010442:	4b3c      	ldr	r3, [pc, #240]	@ (8010534 <tcp_receive+0xf10>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	b29a      	uxth	r2, r3
 8010448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	1a8a      	subs	r2, r1, r2
 801044e:	b292      	uxth	r2, r2
 8010450:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	685a      	ldr	r2, [r3, #4]
 8010458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	891b      	ldrh	r3, [r3, #8]
 801045e:	4619      	mov	r1, r3
 8010460:	4610      	mov	r0, r2
 8010462:	f7fb fdd5 	bl	800c010 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	891c      	ldrh	r4, [r3, #8]
 801046c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	68db      	ldr	r3, [r3, #12]
 8010472:	899b      	ldrh	r3, [r3, #12]
 8010474:	b29b      	uxth	r3, r3
 8010476:	4618      	mov	r0, r3
 8010478:	f7fa fbf2 	bl	800ac60 <lwip_htons>
 801047c:	4603      	mov	r3, r0
 801047e:	b2db      	uxtb	r3, r3
 8010480:	f003 0303 	and.w	r3, r3, #3
 8010484:	2b00      	cmp	r3, #0
 8010486:	d001      	beq.n	801048c <tcp_receive+0xe68>
 8010488:	2301      	movs	r3, #1
 801048a:	e000      	b.n	801048e <tcp_receive+0xe6a>
 801048c:	2300      	movs	r3, #0
 801048e:	4423      	add	r3, r4
 8010490:	b29a      	uxth	r2, r3
 8010492:	4b2a      	ldr	r3, [pc, #168]	@ (801053c <tcp_receive+0xf18>)
 8010494:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010496:	4b29      	ldr	r3, [pc, #164]	@ (801053c <tcp_receive+0xf18>)
 8010498:	881b      	ldrh	r3, [r3, #0]
 801049a:	461a      	mov	r2, r3
 801049c:	4b25      	ldr	r3, [pc, #148]	@ (8010534 <tcp_receive+0xf10>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	441a      	add	r2, r3
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104a6:	6879      	ldr	r1, [r7, #4]
 80104a8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80104aa:	440b      	add	r3, r1
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d019      	beq.n	80104e4 <tcp_receive+0xec0>
 80104b0:	4b23      	ldr	r3, [pc, #140]	@ (8010540 <tcp_receive+0xf1c>)
 80104b2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80104b6:	4923      	ldr	r1, [pc, #140]	@ (8010544 <tcp_receive+0xf20>)
 80104b8:	4823      	ldr	r0, [pc, #140]	@ (8010548 <tcp_receive+0xf24>)
 80104ba:	f004 fd9d 	bl	8014ff8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80104be:	e011      	b.n	80104e4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80104c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80104c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	f47f aea5 	bne.w	8010218 <tcp_receive+0xbf4>
 80104ce:	e00a      	b.n	80104e6 <tcp_receive+0xec2>
                break;
 80104d0:	bf00      	nop
 80104d2:	e008      	b.n	80104e6 <tcp_receive+0xec2>
                break;
 80104d4:	bf00      	nop
 80104d6:	e006      	b.n	80104e6 <tcp_receive+0xec2>
                  break;
 80104d8:	bf00      	nop
 80104da:	e004      	b.n	80104e6 <tcp_receive+0xec2>
                  break;
 80104dc:	bf00      	nop
 80104de:	e002      	b.n	80104e6 <tcp_receive+0xec2>
                  break;
 80104e0:	bf00      	nop
 80104e2:	e000      	b.n	80104e6 <tcp_receive+0xec2>
                break;
 80104e4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f001 fa30 	bl	801194c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80104ec:	e003      	b.n	80104f6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f001 fa2c 	bl	801194c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80104f4:	e01a      	b.n	801052c <tcp_receive+0xf08>
 80104f6:	e019      	b.n	801052c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80104f8:	4b0e      	ldr	r3, [pc, #56]	@ (8010534 <tcp_receive+0xf10>)
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010500:	1ad3      	subs	r3, r2, r3
 8010502:	2b00      	cmp	r3, #0
 8010504:	db0a      	blt.n	801051c <tcp_receive+0xef8>
 8010506:	4b0b      	ldr	r3, [pc, #44]	@ (8010534 <tcp_receive+0xf10>)
 8010508:	681a      	ldr	r2, [r3, #0]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801050e:	6879      	ldr	r1, [r7, #4]
 8010510:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010512:	440b      	add	r3, r1
 8010514:	1ad3      	subs	r3, r2, r3
 8010516:	3301      	adds	r3, #1
 8010518:	2b00      	cmp	r3, #0
 801051a:	dd07      	ble.n	801052c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	8b5b      	ldrh	r3, [r3, #26]
 8010520:	f043 0302 	orr.w	r3, r3, #2
 8010524:	b29a      	uxth	r2, r3
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801052a:	e7ff      	b.n	801052c <tcp_receive+0xf08>
 801052c:	bf00      	nop
 801052e:	3750      	adds	r7, #80	@ 0x50
 8010530:	46bd      	mov	sp, r7
 8010532:	bdb0      	pop	{r4, r5, r7, pc}
 8010534:	2000b2a4 	.word	0x2000b2a4
 8010538:	2000b284 	.word	0x2000b284
 801053c:	2000b2ae 	.word	0x2000b2ae
 8010540:	0801829c 	.word	0x0801829c
 8010544:	08018644 	.word	0x08018644
 8010548:	080182e8 	.word	0x080182e8

0801054c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801054c:	b480      	push	{r7}
 801054e:	b083      	sub	sp, #12
 8010550:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010552:	4b15      	ldr	r3, [pc, #84]	@ (80105a8 <tcp_get_next_optbyte+0x5c>)
 8010554:	881b      	ldrh	r3, [r3, #0]
 8010556:	1c5a      	adds	r2, r3, #1
 8010558:	b291      	uxth	r1, r2
 801055a:	4a13      	ldr	r2, [pc, #76]	@ (80105a8 <tcp_get_next_optbyte+0x5c>)
 801055c:	8011      	strh	r1, [r2, #0]
 801055e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010560:	4b12      	ldr	r3, [pc, #72]	@ (80105ac <tcp_get_next_optbyte+0x60>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d004      	beq.n	8010572 <tcp_get_next_optbyte+0x26>
 8010568:	4b11      	ldr	r3, [pc, #68]	@ (80105b0 <tcp_get_next_optbyte+0x64>)
 801056a:	881b      	ldrh	r3, [r3, #0]
 801056c:	88fa      	ldrh	r2, [r7, #6]
 801056e:	429a      	cmp	r2, r3
 8010570:	d208      	bcs.n	8010584 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010572:	4b10      	ldr	r3, [pc, #64]	@ (80105b4 <tcp_get_next_optbyte+0x68>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	3314      	adds	r3, #20
 8010578:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801057a:	88fb      	ldrh	r3, [r7, #6]
 801057c:	683a      	ldr	r2, [r7, #0]
 801057e:	4413      	add	r3, r2
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	e00b      	b.n	801059c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010584:	88fb      	ldrh	r3, [r7, #6]
 8010586:	b2da      	uxtb	r2, r3
 8010588:	4b09      	ldr	r3, [pc, #36]	@ (80105b0 <tcp_get_next_optbyte+0x64>)
 801058a:	881b      	ldrh	r3, [r3, #0]
 801058c:	b2db      	uxtb	r3, r3
 801058e:	1ad3      	subs	r3, r2, r3
 8010590:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010592:	4b06      	ldr	r3, [pc, #24]	@ (80105ac <tcp_get_next_optbyte+0x60>)
 8010594:	681a      	ldr	r2, [r3, #0]
 8010596:	797b      	ldrb	r3, [r7, #5]
 8010598:	4413      	add	r3, r2
 801059a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801059c:	4618      	mov	r0, r3
 801059e:	370c      	adds	r7, #12
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr
 80105a8:	2000b2a0 	.word	0x2000b2a0
 80105ac:	2000b29c 	.word	0x2000b29c
 80105b0:	2000b29a 	.word	0x2000b29a
 80105b4:	2000b294 	.word	0x2000b294

080105b8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b084      	sub	sp, #16
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d106      	bne.n	80105d4 <tcp_parseopt+0x1c>
 80105c6:	4b32      	ldr	r3, [pc, #200]	@ (8010690 <tcp_parseopt+0xd8>)
 80105c8:	f240 727d 	movw	r2, #1917	@ 0x77d
 80105cc:	4931      	ldr	r1, [pc, #196]	@ (8010694 <tcp_parseopt+0xdc>)
 80105ce:	4832      	ldr	r0, [pc, #200]	@ (8010698 <tcp_parseopt+0xe0>)
 80105d0:	f004 fd12 	bl	8014ff8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80105d4:	4b31      	ldr	r3, [pc, #196]	@ (801069c <tcp_parseopt+0xe4>)
 80105d6:	881b      	ldrh	r3, [r3, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d056      	beq.n	801068a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80105dc:	4b30      	ldr	r3, [pc, #192]	@ (80106a0 <tcp_parseopt+0xe8>)
 80105de:	2200      	movs	r2, #0
 80105e0:	801a      	strh	r2, [r3, #0]
 80105e2:	e046      	b.n	8010672 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80105e4:	f7ff ffb2 	bl	801054c <tcp_get_next_optbyte>
 80105e8:	4603      	mov	r3, r0
 80105ea:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80105ec:	7bfb      	ldrb	r3, [r7, #15]
 80105ee:	2b02      	cmp	r3, #2
 80105f0:	d006      	beq.n	8010600 <tcp_parseopt+0x48>
 80105f2:	2b02      	cmp	r3, #2
 80105f4:	dc2a      	bgt.n	801064c <tcp_parseopt+0x94>
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d042      	beq.n	8010680 <tcp_parseopt+0xc8>
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d038      	beq.n	8010670 <tcp_parseopt+0xb8>
 80105fe:	e025      	b.n	801064c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010600:	f7ff ffa4 	bl	801054c <tcp_get_next_optbyte>
 8010604:	4603      	mov	r3, r0
 8010606:	2b04      	cmp	r3, #4
 8010608:	d13c      	bne.n	8010684 <tcp_parseopt+0xcc>
 801060a:	4b25      	ldr	r3, [pc, #148]	@ (80106a0 <tcp_parseopt+0xe8>)
 801060c:	881b      	ldrh	r3, [r3, #0]
 801060e:	3301      	adds	r3, #1
 8010610:	4a22      	ldr	r2, [pc, #136]	@ (801069c <tcp_parseopt+0xe4>)
 8010612:	8812      	ldrh	r2, [r2, #0]
 8010614:	4293      	cmp	r3, r2
 8010616:	da35      	bge.n	8010684 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010618:	f7ff ff98 	bl	801054c <tcp_get_next_optbyte>
 801061c:	4603      	mov	r3, r0
 801061e:	021b      	lsls	r3, r3, #8
 8010620:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010622:	f7ff ff93 	bl	801054c <tcp_get_next_optbyte>
 8010626:	4603      	mov	r3, r0
 8010628:	461a      	mov	r2, r3
 801062a:	89bb      	ldrh	r3, [r7, #12]
 801062c:	4313      	orrs	r3, r2
 801062e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010630:	89bb      	ldrh	r3, [r7, #12]
 8010632:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010636:	d804      	bhi.n	8010642 <tcp_parseopt+0x8a>
 8010638:	89bb      	ldrh	r3, [r7, #12]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d001      	beq.n	8010642 <tcp_parseopt+0x8a>
 801063e:	89ba      	ldrh	r2, [r7, #12]
 8010640:	e001      	b.n	8010646 <tcp_parseopt+0x8e>
 8010642:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801064a:	e012      	b.n	8010672 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801064c:	f7ff ff7e 	bl	801054c <tcp_get_next_optbyte>
 8010650:	4603      	mov	r3, r0
 8010652:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010654:	7afb      	ldrb	r3, [r7, #11]
 8010656:	2b01      	cmp	r3, #1
 8010658:	d916      	bls.n	8010688 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801065a:	7afb      	ldrb	r3, [r7, #11]
 801065c:	b29a      	uxth	r2, r3
 801065e:	4b10      	ldr	r3, [pc, #64]	@ (80106a0 <tcp_parseopt+0xe8>)
 8010660:	881b      	ldrh	r3, [r3, #0]
 8010662:	4413      	add	r3, r2
 8010664:	b29b      	uxth	r3, r3
 8010666:	3b02      	subs	r3, #2
 8010668:	b29a      	uxth	r2, r3
 801066a:	4b0d      	ldr	r3, [pc, #52]	@ (80106a0 <tcp_parseopt+0xe8>)
 801066c:	801a      	strh	r2, [r3, #0]
 801066e:	e000      	b.n	8010672 <tcp_parseopt+0xba>
          break;
 8010670:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010672:	4b0b      	ldr	r3, [pc, #44]	@ (80106a0 <tcp_parseopt+0xe8>)
 8010674:	881a      	ldrh	r2, [r3, #0]
 8010676:	4b09      	ldr	r3, [pc, #36]	@ (801069c <tcp_parseopt+0xe4>)
 8010678:	881b      	ldrh	r3, [r3, #0]
 801067a:	429a      	cmp	r2, r3
 801067c:	d3b2      	bcc.n	80105e4 <tcp_parseopt+0x2c>
 801067e:	e004      	b.n	801068a <tcp_parseopt+0xd2>
          return;
 8010680:	bf00      	nop
 8010682:	e002      	b.n	801068a <tcp_parseopt+0xd2>
            return;
 8010684:	bf00      	nop
 8010686:	e000      	b.n	801068a <tcp_parseopt+0xd2>
            return;
 8010688:	bf00      	nop
      }
    }
  }
}
 801068a:	3710      	adds	r7, #16
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}
 8010690:	0801829c 	.word	0x0801829c
 8010694:	08018700 	.word	0x08018700
 8010698:	080182e8 	.word	0x080182e8
 801069c:	2000b298 	.word	0x2000b298
 80106a0:	2000b2a0 	.word	0x2000b2a0

080106a4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80106a4:	b480      	push	{r7}
 80106a6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80106a8:	4b05      	ldr	r3, [pc, #20]	@ (80106c0 <tcp_trigger_input_pcb_close+0x1c>)
 80106aa:	781b      	ldrb	r3, [r3, #0]
 80106ac:	f043 0310 	orr.w	r3, r3, #16
 80106b0:	b2da      	uxtb	r2, r3
 80106b2:	4b03      	ldr	r3, [pc, #12]	@ (80106c0 <tcp_trigger_input_pcb_close+0x1c>)
 80106b4:	701a      	strb	r2, [r3, #0]
}
 80106b6:	bf00      	nop
 80106b8:	46bd      	mov	sp, r7
 80106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106be:	4770      	bx	lr
 80106c0:	2000b2b1 	.word	0x2000b2b1

080106c4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b084      	sub	sp, #16
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	60f8      	str	r0, [r7, #12]
 80106cc:	60b9      	str	r1, [r7, #8]
 80106ce:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d00a      	beq.n	80106ec <tcp_route+0x28>
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	7a1b      	ldrb	r3, [r3, #8]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d006      	beq.n	80106ec <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	7a1b      	ldrb	r3, [r3, #8]
 80106e2:	4618      	mov	r0, r3
 80106e4:	f7fb faba 	bl	800bc5c <netif_get_by_index>
 80106e8:	4603      	mov	r3, r0
 80106ea:	e003      	b.n	80106f4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f003 f997 	bl	8013a20 <ip4_route>
 80106f2:	4603      	mov	r3, r0
  }
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3710      	adds	r7, #16
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}

080106fc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80106fc:	b590      	push	{r4, r7, lr}
 80106fe:	b087      	sub	sp, #28
 8010700:	af00      	add	r7, sp, #0
 8010702:	60f8      	str	r0, [r7, #12]
 8010704:	60b9      	str	r1, [r7, #8]
 8010706:	603b      	str	r3, [r7, #0]
 8010708:	4613      	mov	r3, r2
 801070a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d105      	bne.n	801071e <tcp_create_segment+0x22>
 8010712:	4b43      	ldr	r3, [pc, #268]	@ (8010820 <tcp_create_segment+0x124>)
 8010714:	22a3      	movs	r2, #163	@ 0xa3
 8010716:	4943      	ldr	r1, [pc, #268]	@ (8010824 <tcp_create_segment+0x128>)
 8010718:	4843      	ldr	r0, [pc, #268]	@ (8010828 <tcp_create_segment+0x12c>)
 801071a:	f004 fc6d 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d105      	bne.n	8010730 <tcp_create_segment+0x34>
 8010724:	4b3e      	ldr	r3, [pc, #248]	@ (8010820 <tcp_create_segment+0x124>)
 8010726:	22a4      	movs	r2, #164	@ 0xa4
 8010728:	4940      	ldr	r1, [pc, #256]	@ (801082c <tcp_create_segment+0x130>)
 801072a:	483f      	ldr	r0, [pc, #252]	@ (8010828 <tcp_create_segment+0x12c>)
 801072c:	f004 fc64 	bl	8014ff8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010730:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010734:	009b      	lsls	r3, r3, #2
 8010736:	b2db      	uxtb	r3, r3
 8010738:	f003 0304 	and.w	r3, r3, #4
 801073c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801073e:	2003      	movs	r0, #3
 8010740:	f7fa ff06 	bl	800b550 <memp_malloc>
 8010744:	6138      	str	r0, [r7, #16]
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d104      	bne.n	8010756 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801074c:	68b8      	ldr	r0, [r7, #8]
 801074e:	f7fb fde5 	bl	800c31c <pbuf_free>
    return NULL;
 8010752:	2300      	movs	r3, #0
 8010754:	e060      	b.n	8010818 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801075c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801075e:	693b      	ldr	r3, [r7, #16]
 8010760:	2200      	movs	r2, #0
 8010762:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	68ba      	ldr	r2, [r7, #8]
 8010768:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	891a      	ldrh	r2, [r3, #8]
 801076e:	7dfb      	ldrb	r3, [r7, #23]
 8010770:	b29b      	uxth	r3, r3
 8010772:	429a      	cmp	r2, r3
 8010774:	d205      	bcs.n	8010782 <tcp_create_segment+0x86>
 8010776:	4b2a      	ldr	r3, [pc, #168]	@ (8010820 <tcp_create_segment+0x124>)
 8010778:	22b0      	movs	r2, #176	@ 0xb0
 801077a:	492d      	ldr	r1, [pc, #180]	@ (8010830 <tcp_create_segment+0x134>)
 801077c:	482a      	ldr	r0, [pc, #168]	@ (8010828 <tcp_create_segment+0x12c>)
 801077e:	f004 fc3b 	bl	8014ff8 <iprintf>
  seg->len = p->tot_len - optlen;
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	891a      	ldrh	r2, [r3, #8]
 8010786:	7dfb      	ldrb	r3, [r7, #23]
 8010788:	b29b      	uxth	r3, r3
 801078a:	1ad3      	subs	r3, r2, r3
 801078c:	b29a      	uxth	r2, r3
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010792:	2114      	movs	r1, #20
 8010794:	68b8      	ldr	r0, [r7, #8]
 8010796:	f7fb fd2b 	bl	800c1f0 <pbuf_add_header>
 801079a:	4603      	mov	r3, r0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d004      	beq.n	80107aa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80107a0:	6938      	ldr	r0, [r7, #16]
 80107a2:	f7fd f8d2 	bl	800d94a <tcp_seg_free>
    return NULL;
 80107a6:	2300      	movs	r3, #0
 80107a8:	e036      	b.n	8010818 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	685a      	ldr	r2, [r3, #4]
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	8ada      	ldrh	r2, [r3, #22]
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	68dc      	ldr	r4, [r3, #12]
 80107bc:	4610      	mov	r0, r2
 80107be:	f7fa fa4f 	bl	800ac60 <lwip_htons>
 80107c2:	4603      	mov	r3, r0
 80107c4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	8b1a      	ldrh	r2, [r3, #24]
 80107ca:	693b      	ldr	r3, [r7, #16]
 80107cc:	68dc      	ldr	r4, [r3, #12]
 80107ce:	4610      	mov	r0, r2
 80107d0:	f7fa fa46 	bl	800ac60 <lwip_htons>
 80107d4:	4603      	mov	r3, r0
 80107d6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	68dc      	ldr	r4, [r3, #12]
 80107dc:	6838      	ldr	r0, [r7, #0]
 80107de:	f7fa fa55 	bl	800ac8c <lwip_htonl>
 80107e2:	4603      	mov	r3, r0
 80107e4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80107e6:	7dfb      	ldrb	r3, [r7, #23]
 80107e8:	089b      	lsrs	r3, r3, #2
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	3305      	adds	r3, #5
 80107ee:	b29b      	uxth	r3, r3
 80107f0:	031b      	lsls	r3, r3, #12
 80107f2:	b29a      	uxth	r2, r3
 80107f4:	79fb      	ldrb	r3, [r7, #7]
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	4313      	orrs	r3, r2
 80107fa:	b29a      	uxth	r2, r3
 80107fc:	693b      	ldr	r3, [r7, #16]
 80107fe:	68dc      	ldr	r4, [r3, #12]
 8010800:	4610      	mov	r0, r2
 8010802:	f7fa fa2d 	bl	800ac60 <lwip_htons>
 8010806:	4603      	mov	r3, r0
 8010808:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	2200      	movs	r2, #0
 8010810:	749a      	strb	r2, [r3, #18]
 8010812:	2200      	movs	r2, #0
 8010814:	74da      	strb	r2, [r3, #19]
  return seg;
 8010816:	693b      	ldr	r3, [r7, #16]
}
 8010818:	4618      	mov	r0, r3
 801081a:	371c      	adds	r7, #28
 801081c:	46bd      	mov	sp, r7
 801081e:	bd90      	pop	{r4, r7, pc}
 8010820:	0801871c 	.word	0x0801871c
 8010824:	08018750 	.word	0x08018750
 8010828:	08018770 	.word	0x08018770
 801082c:	08018798 	.word	0x08018798
 8010830:	080187bc 	.word	0x080187bc

08010834 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010834:	b590      	push	{r4, r7, lr}
 8010836:	b08b      	sub	sp, #44	@ 0x2c
 8010838:	af02      	add	r7, sp, #8
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	460b      	mov	r3, r1
 801083e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010840:	2300      	movs	r3, #0
 8010842:	61fb      	str	r3, [r7, #28]
 8010844:	2300      	movs	r3, #0
 8010846:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010848:	2300      	movs	r3, #0
 801084a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d106      	bne.n	8010860 <tcp_split_unsent_seg+0x2c>
 8010852:	4b95      	ldr	r3, [pc, #596]	@ (8010aa8 <tcp_split_unsent_seg+0x274>)
 8010854:	f240 324b 	movw	r2, #843	@ 0x34b
 8010858:	4994      	ldr	r1, [pc, #592]	@ (8010aac <tcp_split_unsent_seg+0x278>)
 801085a:	4895      	ldr	r0, [pc, #596]	@ (8010ab0 <tcp_split_unsent_seg+0x27c>)
 801085c:	f004 fbcc 	bl	8014ff8 <iprintf>

  useg = pcb->unsent;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010864:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d102      	bne.n	8010872 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801086c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010870:	e116      	b.n	8010aa0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010872:	887b      	ldrh	r3, [r7, #2]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d109      	bne.n	801088c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010878:	4b8b      	ldr	r3, [pc, #556]	@ (8010aa8 <tcp_split_unsent_seg+0x274>)
 801087a:	f240 3253 	movw	r2, #851	@ 0x353
 801087e:	498d      	ldr	r1, [pc, #564]	@ (8010ab4 <tcp_split_unsent_seg+0x280>)
 8010880:	488b      	ldr	r0, [pc, #556]	@ (8010ab0 <tcp_split_unsent_seg+0x27c>)
 8010882:	f004 fbb9 	bl	8014ff8 <iprintf>
    return ERR_VAL;
 8010886:	f06f 0305 	mvn.w	r3, #5
 801088a:	e109      	b.n	8010aa0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	891b      	ldrh	r3, [r3, #8]
 8010890:	887a      	ldrh	r2, [r7, #2]
 8010892:	429a      	cmp	r2, r3
 8010894:	d301      	bcc.n	801089a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010896:	2300      	movs	r3, #0
 8010898:	e102      	b.n	8010aa0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801089e:	887a      	ldrh	r2, [r7, #2]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d906      	bls.n	80108b2 <tcp_split_unsent_seg+0x7e>
 80108a4:	4b80      	ldr	r3, [pc, #512]	@ (8010aa8 <tcp_split_unsent_seg+0x274>)
 80108a6:	f240 325b 	movw	r2, #859	@ 0x35b
 80108aa:	4983      	ldr	r1, [pc, #524]	@ (8010ab8 <tcp_split_unsent_seg+0x284>)
 80108ac:	4880      	ldr	r0, [pc, #512]	@ (8010ab0 <tcp_split_unsent_seg+0x27c>)
 80108ae:	f004 fba3 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	891b      	ldrh	r3, [r3, #8]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d106      	bne.n	80108c8 <tcp_split_unsent_seg+0x94>
 80108ba:	4b7b      	ldr	r3, [pc, #492]	@ (8010aa8 <tcp_split_unsent_seg+0x274>)
 80108bc:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80108c0:	497e      	ldr	r1, [pc, #504]	@ (8010abc <tcp_split_unsent_seg+0x288>)
 80108c2:	487b      	ldr	r0, [pc, #492]	@ (8010ab0 <tcp_split_unsent_seg+0x27c>)
 80108c4:	f004 fb98 	bl	8014ff8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	7a9b      	ldrb	r3, [r3, #10]
 80108cc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80108ce:	7bfb      	ldrb	r3, [r7, #15]
 80108d0:	009b      	lsls	r3, r3, #2
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	f003 0304 	and.w	r3, r3, #4
 80108d8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	891a      	ldrh	r2, [r3, #8]
 80108de:	887b      	ldrh	r3, [r7, #2]
 80108e0:	1ad3      	subs	r3, r2, r3
 80108e2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80108e4:	7bbb      	ldrb	r3, [r7, #14]
 80108e6:	b29a      	uxth	r2, r3
 80108e8:	89bb      	ldrh	r3, [r7, #12]
 80108ea:	4413      	add	r3, r2
 80108ec:	b29b      	uxth	r3, r3
 80108ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80108f2:	4619      	mov	r1, r3
 80108f4:	2036      	movs	r0, #54	@ 0x36
 80108f6:	f7fb fa2d 	bl	800bd54 <pbuf_alloc>
 80108fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80108fc:	693b      	ldr	r3, [r7, #16]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	f000 80b7 	beq.w	8010a72 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	891a      	ldrh	r2, [r3, #8]
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	891b      	ldrh	r3, [r3, #8]
 801090e:	1ad3      	subs	r3, r2, r3
 8010910:	b29a      	uxth	r2, r3
 8010912:	887b      	ldrh	r3, [r7, #2]
 8010914:	4413      	add	r3, r2
 8010916:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	6858      	ldr	r0, [r3, #4]
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	685a      	ldr	r2, [r3, #4]
 8010920:	7bbb      	ldrb	r3, [r7, #14]
 8010922:	18d1      	adds	r1, r2, r3
 8010924:	897b      	ldrh	r3, [r7, #10]
 8010926:	89ba      	ldrh	r2, [r7, #12]
 8010928:	f7fb fef2 	bl	800c710 <pbuf_copy_partial>
 801092c:	4603      	mov	r3, r0
 801092e:	461a      	mov	r2, r3
 8010930:	89bb      	ldrh	r3, [r7, #12]
 8010932:	4293      	cmp	r3, r2
 8010934:	f040 809f 	bne.w	8010a76 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	899b      	ldrh	r3, [r3, #12]
 801093e:	b29b      	uxth	r3, r3
 8010940:	4618      	mov	r0, r3
 8010942:	f7fa f98d 	bl	800ac60 <lwip_htons>
 8010946:	4603      	mov	r3, r0
 8010948:	b2db      	uxtb	r3, r3
 801094a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801094e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010950:	2300      	movs	r3, #0
 8010952:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010954:	7efb      	ldrb	r3, [r7, #27]
 8010956:	f003 0308 	and.w	r3, r3, #8
 801095a:	2b00      	cmp	r3, #0
 801095c:	d007      	beq.n	801096e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801095e:	7efb      	ldrb	r3, [r7, #27]
 8010960:	f023 0308 	bic.w	r3, r3, #8
 8010964:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010966:	7ebb      	ldrb	r3, [r7, #26]
 8010968:	f043 0308 	orr.w	r3, r3, #8
 801096c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801096e:	7efb      	ldrb	r3, [r7, #27]
 8010970:	f003 0301 	and.w	r3, r3, #1
 8010974:	2b00      	cmp	r3, #0
 8010976:	d007      	beq.n	8010988 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010978:	7efb      	ldrb	r3, [r7, #27]
 801097a:	f023 0301 	bic.w	r3, r3, #1
 801097e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010980:	7ebb      	ldrb	r3, [r7, #26]
 8010982:	f043 0301 	orr.w	r3, r3, #1
 8010986:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	685b      	ldr	r3, [r3, #4]
 801098e:	4618      	mov	r0, r3
 8010990:	f7fa f97c 	bl	800ac8c <lwip_htonl>
 8010994:	4602      	mov	r2, r0
 8010996:	887b      	ldrh	r3, [r7, #2]
 8010998:	18d1      	adds	r1, r2, r3
 801099a:	7eba      	ldrb	r2, [r7, #26]
 801099c:	7bfb      	ldrb	r3, [r7, #15]
 801099e:	9300      	str	r3, [sp, #0]
 80109a0:	460b      	mov	r3, r1
 80109a2:	6939      	ldr	r1, [r7, #16]
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f7ff fea9 	bl	80106fc <tcp_create_segment>
 80109aa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80109ac:	69fb      	ldr	r3, [r7, #28]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d063      	beq.n	8010a7a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7fb fd38 	bl	800c42c <pbuf_clen>
 80109bc:	4603      	mov	r3, r0
 80109be:	461a      	mov	r2, r3
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80109c6:	1a9b      	subs	r3, r3, r2
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	6858      	ldr	r0, [r3, #4]
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	685b      	ldr	r3, [r3, #4]
 80109d8:	891a      	ldrh	r2, [r3, #8]
 80109da:	89bb      	ldrh	r3, [r7, #12]
 80109dc:	1ad3      	subs	r3, r2, r3
 80109de:	b29b      	uxth	r3, r3
 80109e0:	4619      	mov	r1, r3
 80109e2:	f7fb fb15 	bl	800c010 <pbuf_realloc>
  useg->len -= remainder;
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	891a      	ldrh	r2, [r3, #8]
 80109ea:	89bb      	ldrh	r3, [r7, #12]
 80109ec:	1ad3      	subs	r3, r2, r3
 80109ee:	b29a      	uxth	r2, r3
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	68db      	ldr	r3, [r3, #12]
 80109f8:	899b      	ldrh	r3, [r3, #12]
 80109fa:	b29c      	uxth	r4, r3
 80109fc:	7efb      	ldrb	r3, [r7, #27]
 80109fe:	b29b      	uxth	r3, r3
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7fa f92d 	bl	800ac60 <lwip_htons>
 8010a06:	4603      	mov	r3, r0
 8010a08:	461a      	mov	r2, r3
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	68db      	ldr	r3, [r3, #12]
 8010a0e:	4322      	orrs	r2, r4
 8010a10:	b292      	uxth	r2, r2
 8010a12:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	685b      	ldr	r3, [r3, #4]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7fb fd07 	bl	800c42c <pbuf_clen>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	461a      	mov	r2, r3
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010a28:	4413      	add	r3, r2
 8010a2a:	b29a      	uxth	r2, r3
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010a32:	69fb      	ldr	r3, [r7, #28]
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7fb fcf8 	bl	800c42c <pbuf_clen>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	461a      	mov	r2, r3
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010a46:	4413      	add	r3, r2
 8010a48:	b29a      	uxth	r2, r3
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	69fb      	ldr	r3, [r7, #28]
 8010a56:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	69fa      	ldr	r2, [r7, #28]
 8010a5c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010a5e:	69fb      	ldr	r3, [r7, #28]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d103      	bne.n	8010a6e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	e016      	b.n	8010aa0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010a72:	bf00      	nop
 8010a74:	e002      	b.n	8010a7c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010a76:	bf00      	nop
 8010a78:	e000      	b.n	8010a7c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010a7a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010a7c:	69fb      	ldr	r3, [r7, #28]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d006      	beq.n	8010a90 <tcp_split_unsent_seg+0x25c>
 8010a82:	4b09      	ldr	r3, [pc, #36]	@ (8010aa8 <tcp_split_unsent_seg+0x274>)
 8010a84:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8010a88:	490d      	ldr	r1, [pc, #52]	@ (8010ac0 <tcp_split_unsent_seg+0x28c>)
 8010a8a:	4809      	ldr	r0, [pc, #36]	@ (8010ab0 <tcp_split_unsent_seg+0x27c>)
 8010a8c:	f004 fab4 	bl	8014ff8 <iprintf>
  if (p != NULL) {
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d002      	beq.n	8010a9c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010a96:	6938      	ldr	r0, [r7, #16]
 8010a98:	f7fb fc40 	bl	800c31c <pbuf_free>
  }

  return ERR_MEM;
 8010a9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3724      	adds	r7, #36	@ 0x24
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd90      	pop	{r4, r7, pc}
 8010aa8:	0801871c 	.word	0x0801871c
 8010aac:	08018ab0 	.word	0x08018ab0
 8010ab0:	08018770 	.word	0x08018770
 8010ab4:	08018ad4 	.word	0x08018ad4
 8010ab8:	08018af8 	.word	0x08018af8
 8010abc:	08018b08 	.word	0x08018b08
 8010ac0:	08018b18 	.word	0x08018b18

08010ac4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010ac4:	b590      	push	{r4, r7, lr}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d106      	bne.n	8010ae0 <tcp_send_fin+0x1c>
 8010ad2:	4b21      	ldr	r3, [pc, #132]	@ (8010b58 <tcp_send_fin+0x94>)
 8010ad4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010ad8:	4920      	ldr	r1, [pc, #128]	@ (8010b5c <tcp_send_fin+0x98>)
 8010ada:	4821      	ldr	r0, [pc, #132]	@ (8010b60 <tcp_send_fin+0x9c>)
 8010adc:	f004 fa8c 	bl	8014ff8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d02e      	beq.n	8010b46 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010aec:	60fb      	str	r3, [r7, #12]
 8010aee:	e002      	b.n	8010af6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d1f8      	bne.n	8010af0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	68db      	ldr	r3, [r3, #12]
 8010b02:	899b      	ldrh	r3, [r3, #12]
 8010b04:	b29b      	uxth	r3, r3
 8010b06:	4618      	mov	r0, r3
 8010b08:	f7fa f8aa 	bl	800ac60 <lwip_htons>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	b2db      	uxtb	r3, r3
 8010b10:	f003 0307 	and.w	r3, r3, #7
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d116      	bne.n	8010b46 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	68db      	ldr	r3, [r3, #12]
 8010b1c:	899b      	ldrh	r3, [r3, #12]
 8010b1e:	b29c      	uxth	r4, r3
 8010b20:	2001      	movs	r0, #1
 8010b22:	f7fa f89d 	bl	800ac60 <lwip_htons>
 8010b26:	4603      	mov	r3, r0
 8010b28:	461a      	mov	r2, r3
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	68db      	ldr	r3, [r3, #12]
 8010b2e:	4322      	orrs	r2, r4
 8010b30:	b292      	uxth	r2, r2
 8010b32:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	8b5b      	ldrh	r3, [r3, #26]
 8010b38:	f043 0320 	orr.w	r3, r3, #32
 8010b3c:	b29a      	uxth	r2, r3
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010b42:	2300      	movs	r3, #0
 8010b44:	e004      	b.n	8010b50 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010b46:	2101      	movs	r1, #1
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f000 f80b 	bl	8010b64 <tcp_enqueue_flags>
 8010b4e:	4603      	mov	r3, r0
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3714      	adds	r7, #20
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd90      	pop	{r4, r7, pc}
 8010b58:	0801871c 	.word	0x0801871c
 8010b5c:	08018b24 	.word	0x08018b24
 8010b60:	08018770 	.word	0x08018770

08010b64 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b08a      	sub	sp, #40	@ 0x28
 8010b68:	af02      	add	r7, sp, #8
 8010b6a:	6078      	str	r0, [r7, #4]
 8010b6c:	460b      	mov	r3, r1
 8010b6e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010b70:	2300      	movs	r3, #0
 8010b72:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010b74:	2300      	movs	r3, #0
 8010b76:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010b78:	78fb      	ldrb	r3, [r7, #3]
 8010b7a:	f003 0303 	and.w	r3, r3, #3
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d106      	bne.n	8010b90 <tcp_enqueue_flags+0x2c>
 8010b82:	4b67      	ldr	r3, [pc, #412]	@ (8010d20 <tcp_enqueue_flags+0x1bc>)
 8010b84:	f240 4211 	movw	r2, #1041	@ 0x411
 8010b88:	4966      	ldr	r1, [pc, #408]	@ (8010d24 <tcp_enqueue_flags+0x1c0>)
 8010b8a:	4867      	ldr	r0, [pc, #412]	@ (8010d28 <tcp_enqueue_flags+0x1c4>)
 8010b8c:	f004 fa34 	bl	8014ff8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d106      	bne.n	8010ba4 <tcp_enqueue_flags+0x40>
 8010b96:	4b62      	ldr	r3, [pc, #392]	@ (8010d20 <tcp_enqueue_flags+0x1bc>)
 8010b98:	f240 4213 	movw	r2, #1043	@ 0x413
 8010b9c:	4963      	ldr	r1, [pc, #396]	@ (8010d2c <tcp_enqueue_flags+0x1c8>)
 8010b9e:	4862      	ldr	r0, [pc, #392]	@ (8010d28 <tcp_enqueue_flags+0x1c4>)
 8010ba0:	f004 fa2a 	bl	8014ff8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010ba4:	78fb      	ldrb	r3, [r7, #3]
 8010ba6:	f003 0302 	and.w	r3, r3, #2
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d001      	beq.n	8010bb2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010bb2:	7ffb      	ldrb	r3, [r7, #31]
 8010bb4:	009b      	lsls	r3, r3, #2
 8010bb6:	b2db      	uxtb	r3, r3
 8010bb8:	f003 0304 	and.w	r3, r3, #4
 8010bbc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010bbe:	7dfb      	ldrb	r3, [r7, #23]
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	2036      	movs	r0, #54	@ 0x36
 8010bca:	f7fb f8c3 	bl	800bd54 <pbuf_alloc>
 8010bce:	6138      	str	r0, [r7, #16]
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d109      	bne.n	8010bea <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	8b5b      	ldrh	r3, [r3, #26]
 8010bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bde:	b29a      	uxth	r2, r3
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010be4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010be8:	e095      	b.n	8010d16 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010bea:	693b      	ldr	r3, [r7, #16]
 8010bec:	895a      	ldrh	r2, [r3, #10]
 8010bee:	7dfb      	ldrb	r3, [r7, #23]
 8010bf0:	b29b      	uxth	r3, r3
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d206      	bcs.n	8010c04 <tcp_enqueue_flags+0xa0>
 8010bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8010d20 <tcp_enqueue_flags+0x1bc>)
 8010bf8:	f240 4239 	movw	r2, #1081	@ 0x439
 8010bfc:	494c      	ldr	r1, [pc, #304]	@ (8010d30 <tcp_enqueue_flags+0x1cc>)
 8010bfe:	484a      	ldr	r0, [pc, #296]	@ (8010d28 <tcp_enqueue_flags+0x1c4>)
 8010c00:	f004 f9fa 	bl	8014ff8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010c08:	78fa      	ldrb	r2, [r7, #3]
 8010c0a:	7ffb      	ldrb	r3, [r7, #31]
 8010c0c:	9300      	str	r3, [sp, #0]
 8010c0e:	460b      	mov	r3, r1
 8010c10:	6939      	ldr	r1, [r7, #16]
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f7ff fd72 	bl	80106fc <tcp_create_segment>
 8010c18:	60f8      	str	r0, [r7, #12]
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d109      	bne.n	8010c34 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	8b5b      	ldrh	r3, [r3, #26]
 8010c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c28:	b29a      	uxth	r2, r3
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010c2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010c32:	e070      	b.n	8010d16 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	f003 0303 	and.w	r3, r3, #3
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d006      	beq.n	8010c4e <tcp_enqueue_flags+0xea>
 8010c40:	4b37      	ldr	r3, [pc, #220]	@ (8010d20 <tcp_enqueue_flags+0x1bc>)
 8010c42:	f240 4242 	movw	r2, #1090	@ 0x442
 8010c46:	493b      	ldr	r1, [pc, #236]	@ (8010d34 <tcp_enqueue_flags+0x1d0>)
 8010c48:	4837      	ldr	r0, [pc, #220]	@ (8010d28 <tcp_enqueue_flags+0x1c4>)
 8010c4a:	f004 f9d5 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	891b      	ldrh	r3, [r3, #8]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d006      	beq.n	8010c64 <tcp_enqueue_flags+0x100>
 8010c56:	4b32      	ldr	r3, [pc, #200]	@ (8010d20 <tcp_enqueue_flags+0x1bc>)
 8010c58:	f240 4243 	movw	r2, #1091	@ 0x443
 8010c5c:	4936      	ldr	r1, [pc, #216]	@ (8010d38 <tcp_enqueue_flags+0x1d4>)
 8010c5e:	4832      	ldr	r0, [pc, #200]	@ (8010d28 <tcp_enqueue_flags+0x1c4>)
 8010c60:	f004 f9ca 	bl	8014ff8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d103      	bne.n	8010c74 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	68fa      	ldr	r2, [r7, #12]
 8010c70:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010c72:	e00d      	b.n	8010c90 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c78:	61bb      	str	r3, [r7, #24]
 8010c7a:	e002      	b.n	8010c82 <tcp_enqueue_flags+0x11e>
 8010c7c:	69bb      	ldr	r3, [r7, #24]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	61bb      	str	r3, [r7, #24]
 8010c82:	69bb      	ldr	r3, [r7, #24]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d1f8      	bne.n	8010c7c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010c8a:	69bb      	ldr	r3, [r7, #24]
 8010c8c:	68fa      	ldr	r2, [r7, #12]
 8010c8e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2200      	movs	r2, #0
 8010c94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010c98:	78fb      	ldrb	r3, [r7, #3]
 8010c9a:	f003 0302 	and.w	r3, r3, #2
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d104      	bne.n	8010cac <tcp_enqueue_flags+0x148>
 8010ca2:	78fb      	ldrb	r3, [r7, #3]
 8010ca4:	f003 0301 	and.w	r3, r3, #1
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d004      	beq.n	8010cb6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010cb0:	1c5a      	adds	r2, r3, #1
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010cb6:	78fb      	ldrb	r3, [r7, #3]
 8010cb8:	f003 0301 	and.w	r3, r3, #1
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d006      	beq.n	8010cce <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	8b5b      	ldrh	r3, [r3, #26]
 8010cc4:	f043 0320 	orr.w	r3, r3, #32
 8010cc8:	b29a      	uxth	r2, r3
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fb fbaa 	bl	800c42c <pbuf_clen>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	461a      	mov	r2, r3
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010ce2:	4413      	add	r3, r2
 8010ce4:	b29a      	uxth	r2, r3
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d00e      	beq.n	8010d14 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d10a      	bne.n	8010d14 <tcp_enqueue_flags+0x1b0>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d106      	bne.n	8010d14 <tcp_enqueue_flags+0x1b0>
 8010d06:	4b06      	ldr	r3, [pc, #24]	@ (8010d20 <tcp_enqueue_flags+0x1bc>)
 8010d08:	f240 4265 	movw	r2, #1125	@ 0x465
 8010d0c:	490b      	ldr	r1, [pc, #44]	@ (8010d3c <tcp_enqueue_flags+0x1d8>)
 8010d0e:	4806      	ldr	r0, [pc, #24]	@ (8010d28 <tcp_enqueue_flags+0x1c4>)
 8010d10:	f004 f972 	bl	8014ff8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010d14:	2300      	movs	r3, #0
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3720      	adds	r7, #32
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	0801871c 	.word	0x0801871c
 8010d24:	08018b40 	.word	0x08018b40
 8010d28:	08018770 	.word	0x08018770
 8010d2c:	08018b98 	.word	0x08018b98
 8010d30:	08018bb8 	.word	0x08018bb8
 8010d34:	08018bf4 	.word	0x08018bf4
 8010d38:	08018c0c 	.word	0x08018c0c
 8010d3c:	08018c38 	.word	0x08018c38

08010d40 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010d40:	b5b0      	push	{r4, r5, r7, lr}
 8010d42:	b08a      	sub	sp, #40	@ 0x28
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d106      	bne.n	8010d5c <tcp_output+0x1c>
 8010d4e:	4b8a      	ldr	r3, [pc, #552]	@ (8010f78 <tcp_output+0x238>)
 8010d50:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010d54:	4989      	ldr	r1, [pc, #548]	@ (8010f7c <tcp_output+0x23c>)
 8010d56:	488a      	ldr	r0, [pc, #552]	@ (8010f80 <tcp_output+0x240>)
 8010d58:	f004 f94e 	bl	8014ff8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	7d1b      	ldrb	r3, [r3, #20]
 8010d60:	2b01      	cmp	r3, #1
 8010d62:	d106      	bne.n	8010d72 <tcp_output+0x32>
 8010d64:	4b84      	ldr	r3, [pc, #528]	@ (8010f78 <tcp_output+0x238>)
 8010d66:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010d6a:	4986      	ldr	r1, [pc, #536]	@ (8010f84 <tcp_output+0x244>)
 8010d6c:	4884      	ldr	r0, [pc, #528]	@ (8010f80 <tcp_output+0x240>)
 8010d6e:	f004 f943 	bl	8014ff8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010d72:	4b85      	ldr	r3, [pc, #532]	@ (8010f88 <tcp_output+0x248>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	687a      	ldr	r2, [r7, #4]
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d101      	bne.n	8010d80 <tcp_output+0x40>
    return ERR_OK;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	e1ce      	b.n	801111e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	bf28      	it	cs
 8010d90:	4613      	movcs	r3, r2
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d9a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d10b      	bne.n	8010dba <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	8b5b      	ldrh	r3, [r3, #26]
 8010da6:	f003 0302 	and.w	r3, r3, #2
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	f000 81aa 	beq.w	8011104 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f000 fdcb 	bl	801194c <tcp_send_empty_ack>
 8010db6:	4603      	mov	r3, r0
 8010db8:	e1b1      	b.n	801111e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010dba:	6879      	ldr	r1, [r7, #4]
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	3304      	adds	r3, #4
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f7ff fc7e 	bl	80106c4 <tcp_route>
 8010dc8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010dca:	697b      	ldr	r3, [r7, #20]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d102      	bne.n	8010dd6 <tcp_output+0x96>
    return ERR_RTE;
 8010dd0:	f06f 0303 	mvn.w	r3, #3
 8010dd4:	e1a3      	b.n	801111e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d003      	beq.n	8010de4 <tcp_output+0xa4>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d111      	bne.n	8010e08 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d002      	beq.n	8010df0 <tcp_output+0xb0>
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	3304      	adds	r3, #4
 8010dee:	e000      	b.n	8010df2 <tcp_output+0xb2>
 8010df0:	2300      	movs	r3, #0
 8010df2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d102      	bne.n	8010e00 <tcp_output+0xc0>
      return ERR_RTE;
 8010dfa:	f06f 0303 	mvn.w	r3, #3
 8010dfe:	e18e      	b.n	801111e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	681a      	ldr	r2, [r3, #0]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e0a:	68db      	ldr	r3, [r3, #12]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7f9 ff3c 	bl	800ac8c <lwip_htonl>
 8010e14:	4602      	mov	r2, r0
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e1a:	1ad3      	subs	r3, r2, r3
 8010e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e1e:	8912      	ldrh	r2, [r2, #8]
 8010e20:	4413      	add	r3, r2
 8010e22:	69ba      	ldr	r2, [r7, #24]
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d227      	bcs.n	8010e78 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010e2e:	461a      	mov	r2, r3
 8010e30:	69bb      	ldr	r3, [r7, #24]
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d114      	bne.n	8010e60 <tcp_output+0x120>
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d110      	bne.n	8010e60 <tcp_output+0x120>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d10b      	bne.n	8010e60 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2201      	movs	r2, #1
 8010e54:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	8b5b      	ldrh	r3, [r3, #26]
 8010e64:	f003 0302 	and.w	r3, r3, #2
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	f000 814d 	beq.w	8011108 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f000 fd6c 	bl	801194c <tcp_send_empty_ack>
 8010e74:	4603      	mov	r3, r0
 8010e76:	e152      	b.n	801111e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e84:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010e86:	6a3b      	ldr	r3, [r7, #32]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	f000 811c 	beq.w	80110c6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010e8e:	e002      	b.n	8010e96 <tcp_output+0x156>
 8010e90:	6a3b      	ldr	r3, [r7, #32]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	623b      	str	r3, [r7, #32]
 8010e96:	6a3b      	ldr	r3, [r7, #32]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d1f8      	bne.n	8010e90 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010e9e:	e112      	b.n	80110c6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	899b      	ldrh	r3, [r3, #12]
 8010ea6:	b29b      	uxth	r3, r3
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7f9 fed9 	bl	800ac60 <lwip_htons>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	f003 0304 	and.w	r3, r3, #4
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d006      	beq.n	8010ec8 <tcp_output+0x188>
 8010eba:	4b2f      	ldr	r3, [pc, #188]	@ (8010f78 <tcp_output+0x238>)
 8010ebc:	f240 5236 	movw	r2, #1334	@ 0x536
 8010ec0:	4932      	ldr	r1, [pc, #200]	@ (8010f8c <tcp_output+0x24c>)
 8010ec2:	482f      	ldr	r0, [pc, #188]	@ (8010f80 <tcp_output+0x240>)
 8010ec4:	f004 f898 	bl	8014ff8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d01f      	beq.n	8010f10 <tcp_output+0x1d0>
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	8b5b      	ldrh	r3, [r3, #26]
 8010ed4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d119      	bne.n	8010f10 <tcp_output+0x1d0>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d00b      	beq.n	8010efc <tcp_output+0x1bc>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d110      	bne.n	8010f10 <tcp_output+0x1d0>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ef2:	891a      	ldrh	r2, [r3, #8]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d209      	bcs.n	8010f10 <tcp_output+0x1d0>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d004      	beq.n	8010f10 <tcp_output+0x1d0>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f0c:	2b08      	cmp	r3, #8
 8010f0e:	d901      	bls.n	8010f14 <tcp_output+0x1d4>
 8010f10:	2301      	movs	r3, #1
 8010f12:	e000      	b.n	8010f16 <tcp_output+0x1d6>
 8010f14:	2300      	movs	r3, #0
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d106      	bne.n	8010f28 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	8b5b      	ldrh	r3, [r3, #26]
 8010f1e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	f000 80e4 	beq.w	80110f0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	7d1b      	ldrb	r3, [r3, #20]
 8010f2c:	2b02      	cmp	r3, #2
 8010f2e:	d00d      	beq.n	8010f4c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f32:	68db      	ldr	r3, [r3, #12]
 8010f34:	899b      	ldrh	r3, [r3, #12]
 8010f36:	b29c      	uxth	r4, r3
 8010f38:	2010      	movs	r0, #16
 8010f3a:	f7f9 fe91 	bl	800ac60 <lwip_htons>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	461a      	mov	r2, r3
 8010f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f44:	68db      	ldr	r3, [r3, #12]
 8010f46:	4322      	orrs	r2, r4
 8010f48:	b292      	uxth	r2, r2
 8010f4a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010f4c:	697a      	ldr	r2, [r7, #20]
 8010f4e:	6879      	ldr	r1, [r7, #4]
 8010f50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010f52:	f000 f909 	bl	8011168 <tcp_output_segment>
 8010f56:	4603      	mov	r3, r0
 8010f58:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d016      	beq.n	8010f90 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	8b5b      	ldrh	r3, [r3, #26]
 8010f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f6a:	b29a      	uxth	r2, r3
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	835a      	strh	r2, [r3, #26]
      return err;
 8010f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f74:	e0d3      	b.n	801111e <tcp_output+0x3de>
 8010f76:	bf00      	nop
 8010f78:	0801871c 	.word	0x0801871c
 8010f7c:	08018c60 	.word	0x08018c60
 8010f80:	08018770 	.word	0x08018770
 8010f84:	08018c78 	.word	0x08018c78
 8010f88:	2000b2b8 	.word	0x2000b2b8
 8010f8c:	08018ca0 	.word	0x08018ca0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f92:	681a      	ldr	r2, [r3, #0]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	7d1b      	ldrb	r3, [r3, #20]
 8010f9c:	2b02      	cmp	r3, #2
 8010f9e:	d006      	beq.n	8010fae <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	8b5b      	ldrh	r3, [r3, #26]
 8010fa4:	f023 0303 	bic.w	r3, r3, #3
 8010fa8:	b29a      	uxth	r2, r3
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fb0:	68db      	ldr	r3, [r3, #12]
 8010fb2:	685b      	ldr	r3, [r3, #4]
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7f9 fe69 	bl	800ac8c <lwip_htonl>
 8010fba:	4604      	mov	r4, r0
 8010fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fbe:	891b      	ldrh	r3, [r3, #8]
 8010fc0:	461d      	mov	r5, r3
 8010fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc4:	68db      	ldr	r3, [r3, #12]
 8010fc6:	899b      	ldrh	r3, [r3, #12]
 8010fc8:	b29b      	uxth	r3, r3
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7f9 fe48 	bl	800ac60 <lwip_htons>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	b2db      	uxtb	r3, r3
 8010fd4:	f003 0303 	and.w	r3, r3, #3
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d001      	beq.n	8010fe0 <tcp_output+0x2a0>
 8010fdc:	2301      	movs	r3, #1
 8010fde:	e000      	b.n	8010fe2 <tcp_output+0x2a2>
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	442b      	add	r3, r5
 8010fe4:	4423      	add	r3, r4
 8010fe6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	1ad3      	subs	r3, r2, r3
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	da02      	bge.n	8010ffa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	68ba      	ldr	r2, [r7, #8]
 8010ff8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ffc:	891b      	ldrh	r3, [r3, #8]
 8010ffe:	461c      	mov	r4, r3
 8011000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011002:	68db      	ldr	r3, [r3, #12]
 8011004:	899b      	ldrh	r3, [r3, #12]
 8011006:	b29b      	uxth	r3, r3
 8011008:	4618      	mov	r0, r3
 801100a:	f7f9 fe29 	bl	800ac60 <lwip_htons>
 801100e:	4603      	mov	r3, r0
 8011010:	b2db      	uxtb	r3, r3
 8011012:	f003 0303 	and.w	r3, r3, #3
 8011016:	2b00      	cmp	r3, #0
 8011018:	d001      	beq.n	801101e <tcp_output+0x2de>
 801101a:	2301      	movs	r3, #1
 801101c:	e000      	b.n	8011020 <tcp_output+0x2e0>
 801101e:	2300      	movs	r3, #0
 8011020:	4423      	add	r3, r4
 8011022:	2b00      	cmp	r3, #0
 8011024:	d049      	beq.n	80110ba <tcp_output+0x37a>
      seg->next = NULL;
 8011026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011028:	2200      	movs	r2, #0
 801102a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011030:	2b00      	cmp	r3, #0
 8011032:	d105      	bne.n	8011040 <tcp_output+0x300>
        pcb->unacked = seg;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011038:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801103c:	623b      	str	r3, [r7, #32]
 801103e:	e03f      	b.n	80110c0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011042:	68db      	ldr	r3, [r3, #12]
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	4618      	mov	r0, r3
 8011048:	f7f9 fe20 	bl	800ac8c <lwip_htonl>
 801104c:	4604      	mov	r4, r0
 801104e:	6a3b      	ldr	r3, [r7, #32]
 8011050:	68db      	ldr	r3, [r3, #12]
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	4618      	mov	r0, r3
 8011056:	f7f9 fe19 	bl	800ac8c <lwip_htonl>
 801105a:	4603      	mov	r3, r0
 801105c:	1ae3      	subs	r3, r4, r3
 801105e:	2b00      	cmp	r3, #0
 8011060:	da24      	bge.n	80110ac <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	3370      	adds	r3, #112	@ 0x70
 8011066:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011068:	e002      	b.n	8011070 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801106a:	69fb      	ldr	r3, [r7, #28]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011070:	69fb      	ldr	r3, [r7, #28]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d011      	beq.n	801109c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011078:	69fb      	ldr	r3, [r7, #28]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	68db      	ldr	r3, [r3, #12]
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	4618      	mov	r0, r3
 8011082:	f7f9 fe03 	bl	800ac8c <lwip_htonl>
 8011086:	4604      	mov	r4, r0
 8011088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801108a:	68db      	ldr	r3, [r3, #12]
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	4618      	mov	r0, r3
 8011090:	f7f9 fdfc 	bl	800ac8c <lwip_htonl>
 8011094:	4603      	mov	r3, r0
 8011096:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011098:	2b00      	cmp	r3, #0
 801109a:	dbe6      	blt.n	801106a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801109c:	69fb      	ldr	r3, [r7, #28]
 801109e:	681a      	ldr	r2, [r3, #0]
 80110a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110a2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80110a4:	69fb      	ldr	r3, [r7, #28]
 80110a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110a8:	601a      	str	r2, [r3, #0]
 80110aa:	e009      	b.n	80110c0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80110ac:	6a3b      	ldr	r3, [r7, #32]
 80110ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110b0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80110b2:	6a3b      	ldr	r3, [r7, #32]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	623b      	str	r3, [r7, #32]
 80110b8:	e002      	b.n	80110c0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80110ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80110bc:	f7fc fc45 	bl	800d94a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110c4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80110c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d012      	beq.n	80110f2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80110cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7f9 fdda 	bl	800ac8c <lwip_htonl>
 80110d8:	4602      	mov	r2, r0
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110de:	1ad3      	subs	r3, r2, r3
 80110e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110e2:	8912      	ldrh	r2, [r2, #8]
 80110e4:	4413      	add	r3, r2
  while (seg != NULL &&
 80110e6:	69ba      	ldr	r2, [r7, #24]
 80110e8:	429a      	cmp	r2, r3
 80110ea:	f4bf aed9 	bcs.w	8010ea0 <tcp_output+0x160>
 80110ee:	e000      	b.n	80110f2 <tcp_output+0x3b2>
      break;
 80110f0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d108      	bne.n	801110c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2200      	movs	r2, #0
 80110fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8011102:	e004      	b.n	801110e <tcp_output+0x3ce>
    goto output_done;
 8011104:	bf00      	nop
 8011106:	e002      	b.n	801110e <tcp_output+0x3ce>
    goto output_done;
 8011108:	bf00      	nop
 801110a:	e000      	b.n	801110e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801110c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	8b5b      	ldrh	r3, [r3, #26]
 8011112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011116:	b29a      	uxth	r2, r3
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801111c:	2300      	movs	r3, #0
}
 801111e:	4618      	mov	r0, r3
 8011120:	3728      	adds	r7, #40	@ 0x28
 8011122:	46bd      	mov	sp, r7
 8011124:	bdb0      	pop	{r4, r5, r7, pc}
 8011126:	bf00      	nop

08011128 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b082      	sub	sp, #8
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d106      	bne.n	8011144 <tcp_output_segment_busy+0x1c>
 8011136:	4b09      	ldr	r3, [pc, #36]	@ (801115c <tcp_output_segment_busy+0x34>)
 8011138:	f240 529a 	movw	r2, #1434	@ 0x59a
 801113c:	4908      	ldr	r1, [pc, #32]	@ (8011160 <tcp_output_segment_busy+0x38>)
 801113e:	4809      	ldr	r0, [pc, #36]	@ (8011164 <tcp_output_segment_busy+0x3c>)
 8011140:	f003 ff5a 	bl	8014ff8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	7b9b      	ldrb	r3, [r3, #14]
 801114a:	2b01      	cmp	r3, #1
 801114c:	d001      	beq.n	8011152 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801114e:	2301      	movs	r3, #1
 8011150:	e000      	b.n	8011154 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011152:	2300      	movs	r3, #0
}
 8011154:	4618      	mov	r0, r3
 8011156:	3708      	adds	r7, #8
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}
 801115c:	0801871c 	.word	0x0801871c
 8011160:	08018cb8 	.word	0x08018cb8
 8011164:	08018770 	.word	0x08018770

08011168 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011168:	b5b0      	push	{r4, r5, r7, lr}
 801116a:	b08c      	sub	sp, #48	@ 0x30
 801116c:	af04      	add	r7, sp, #16
 801116e:	60f8      	str	r0, [r7, #12]
 8011170:	60b9      	str	r1, [r7, #8]
 8011172:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d106      	bne.n	8011188 <tcp_output_segment+0x20>
 801117a:	4b64      	ldr	r3, [pc, #400]	@ (801130c <tcp_output_segment+0x1a4>)
 801117c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8011180:	4963      	ldr	r1, [pc, #396]	@ (8011310 <tcp_output_segment+0x1a8>)
 8011182:	4864      	ldr	r0, [pc, #400]	@ (8011314 <tcp_output_segment+0x1ac>)
 8011184:	f003 ff38 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d106      	bne.n	801119c <tcp_output_segment+0x34>
 801118e:	4b5f      	ldr	r3, [pc, #380]	@ (801130c <tcp_output_segment+0x1a4>)
 8011190:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8011194:	4960      	ldr	r1, [pc, #384]	@ (8011318 <tcp_output_segment+0x1b0>)
 8011196:	485f      	ldr	r0, [pc, #380]	@ (8011314 <tcp_output_segment+0x1ac>)
 8011198:	f003 ff2e 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d106      	bne.n	80111b0 <tcp_output_segment+0x48>
 80111a2:	4b5a      	ldr	r3, [pc, #360]	@ (801130c <tcp_output_segment+0x1a4>)
 80111a4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80111a8:	495c      	ldr	r1, [pc, #368]	@ (801131c <tcp_output_segment+0x1b4>)
 80111aa:	485a      	ldr	r0, [pc, #360]	@ (8011314 <tcp_output_segment+0x1ac>)
 80111ac:	f003 ff24 	bl	8014ff8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80111b0:	68f8      	ldr	r0, [r7, #12]
 80111b2:	f7ff ffb9 	bl	8011128 <tcp_output_segment_busy>
 80111b6:	4603      	mov	r3, r0
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d001      	beq.n	80111c0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80111bc:	2300      	movs	r3, #0
 80111be:	e0a1      	b.n	8011304 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	68dc      	ldr	r4, [r3, #12]
 80111c8:	4610      	mov	r0, r2
 80111ca:	f7f9 fd5f 	bl	800ac8c <lwip_htonl>
 80111ce:	4603      	mov	r3, r0
 80111d0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	68dc      	ldr	r4, [r3, #12]
 80111da:	4610      	mov	r0, r2
 80111dc:	f7f9 fd40 	bl	800ac60 <lwip_htons>
 80111e0:	4603      	mov	r3, r0
 80111e2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111e8:	68ba      	ldr	r2, [r7, #8]
 80111ea:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80111ec:	441a      	add	r2, r3
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	68db      	ldr	r3, [r3, #12]
 80111f6:	3314      	adds	r3, #20
 80111f8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	7a9b      	ldrb	r3, [r3, #10]
 80111fe:	f003 0301 	and.w	r3, r3, #1
 8011202:	2b00      	cmp	r3, #0
 8011204:	d015      	beq.n	8011232 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	3304      	adds	r3, #4
 801120a:	461a      	mov	r2, r3
 801120c:	6879      	ldr	r1, [r7, #4]
 801120e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8011212:	f7fc fe91 	bl	800df38 <tcp_eff_send_mss_netif>
 8011216:	4603      	mov	r3, r0
 8011218:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801121a:	8b7b      	ldrh	r3, [r7, #26]
 801121c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8011220:	4618      	mov	r0, r3
 8011222:	f7f9 fd33 	bl	800ac8c <lwip_htonl>
 8011226:	4602      	mov	r2, r0
 8011228:	69fb      	ldr	r3, [r7, #28]
 801122a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	3304      	adds	r3, #4
 8011230:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011238:	2b00      	cmp	r3, #0
 801123a:	da02      	bge.n	8011242 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	2200      	movs	r2, #0
 8011240:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8011242:	68bb      	ldr	r3, [r7, #8]
 8011244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011246:	2b00      	cmp	r3, #0
 8011248:	d10c      	bne.n	8011264 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801124a:	4b35      	ldr	r3, [pc, #212]	@ (8011320 <tcp_output_segment+0x1b8>)
 801124c:	681a      	ldr	r2, [r3, #0]
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	68db      	ldr	r3, [r3, #12]
 8011256:	685b      	ldr	r3, [r3, #4]
 8011258:	4618      	mov	r0, r3
 801125a:	f7f9 fd17 	bl	800ac8c <lwip_htonl>
 801125e:	4602      	mov	r2, r0
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	68da      	ldr	r2, [r3, #12]
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	685b      	ldr	r3, [r3, #4]
 801126c:	685b      	ldr	r3, [r3, #4]
 801126e:	1ad3      	subs	r3, r2, r3
 8011270:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	685b      	ldr	r3, [r3, #4]
 8011276:	8959      	ldrh	r1, [r3, #10]
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	8b3a      	ldrh	r2, [r7, #24]
 801127e:	1a8a      	subs	r2, r1, r2
 8011280:	b292      	uxth	r2, r2
 8011282:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	8919      	ldrh	r1, [r3, #8]
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	8b3a      	ldrh	r2, [r7, #24]
 8011290:	1a8a      	subs	r2, r1, r2
 8011292:	b292      	uxth	r2, r2
 8011294:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	68fa      	ldr	r2, [r7, #12]
 801129c:	68d2      	ldr	r2, [r2, #12]
 801129e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	2200      	movs	r2, #0
 80112a6:	741a      	strb	r2, [r3, #16]
 80112a8:	2200      	movs	r2, #0
 80112aa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	68da      	ldr	r2, [r3, #12]
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	7a9b      	ldrb	r3, [r3, #10]
 80112b4:	f003 0301 	and.w	r3, r3, #1
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d001      	beq.n	80112c0 <tcp_output_segment+0x158>
 80112bc:	2318      	movs	r3, #24
 80112be:	e000      	b.n	80112c2 <tcp_output_segment+0x15a>
 80112c0:	2314      	movs	r3, #20
 80112c2:	4413      	add	r3, r2
 80112c4:	69fa      	ldr	r2, [r7, #28]
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d006      	beq.n	80112d8 <tcp_output_segment+0x170>
 80112ca:	4b10      	ldr	r3, [pc, #64]	@ (801130c <tcp_output_segment+0x1a4>)
 80112cc:	f240 621c 	movw	r2, #1564	@ 0x61c
 80112d0:	4914      	ldr	r1, [pc, #80]	@ (8011324 <tcp_output_segment+0x1bc>)
 80112d2:	4810      	ldr	r0, [pc, #64]	@ (8011314 <tcp_output_segment+0x1ac>)
 80112d4:	f003 fe90 	bl	8014ff8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	6858      	ldr	r0, [r3, #4]
 80112dc:	68b9      	ldr	r1, [r7, #8]
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	1d1c      	adds	r4, r3, #4
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	7add      	ldrb	r5, [r3, #11]
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	7a9b      	ldrb	r3, [r3, #10]
 80112ea:	687a      	ldr	r2, [r7, #4]
 80112ec:	9202      	str	r2, [sp, #8]
 80112ee:	2206      	movs	r2, #6
 80112f0:	9201      	str	r2, [sp, #4]
 80112f2:	9300      	str	r3, [sp, #0]
 80112f4:	462b      	mov	r3, r5
 80112f6:	4622      	mov	r2, r4
 80112f8:	f002 fd50 	bl	8013d9c <ip4_output_if>
 80112fc:	4603      	mov	r3, r0
 80112fe:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011300:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011304:	4618      	mov	r0, r3
 8011306:	3720      	adds	r7, #32
 8011308:	46bd      	mov	sp, r7
 801130a:	bdb0      	pop	{r4, r5, r7, pc}
 801130c:	0801871c 	.word	0x0801871c
 8011310:	08018ce0 	.word	0x08018ce0
 8011314:	08018770 	.word	0x08018770
 8011318:	08018d00 	.word	0x08018d00
 801131c:	08018d20 	.word	0x08018d20
 8011320:	2000b26c 	.word	0x2000b26c
 8011324:	08018d44 	.word	0x08018d44

08011328 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011328:	b5b0      	push	{r4, r5, r7, lr}
 801132a:	b084      	sub	sp, #16
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d106      	bne.n	8011344 <tcp_rexmit_rto_prepare+0x1c>
 8011336:	4b31      	ldr	r3, [pc, #196]	@ (80113fc <tcp_rexmit_rto_prepare+0xd4>)
 8011338:	f240 6263 	movw	r2, #1635	@ 0x663
 801133c:	4930      	ldr	r1, [pc, #192]	@ (8011400 <tcp_rexmit_rto_prepare+0xd8>)
 801133e:	4831      	ldr	r0, [pc, #196]	@ (8011404 <tcp_rexmit_rto_prepare+0xdc>)
 8011340:	f003 fe5a 	bl	8014ff8 <iprintf>

  if (pcb->unacked == NULL) {
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011348:	2b00      	cmp	r3, #0
 801134a:	d102      	bne.n	8011352 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801134c:	f06f 0305 	mvn.w	r3, #5
 8011350:	e050      	b.n	80113f4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011356:	60fb      	str	r3, [r7, #12]
 8011358:	e00b      	b.n	8011372 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801135a:	68f8      	ldr	r0, [r7, #12]
 801135c:	f7ff fee4 	bl	8011128 <tcp_output_segment_busy>
 8011360:	4603      	mov	r3, r0
 8011362:	2b00      	cmp	r3, #0
 8011364:	d002      	beq.n	801136c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011366:	f06f 0305 	mvn.w	r3, #5
 801136a:	e043      	b.n	80113f4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	60fb      	str	r3, [r7, #12]
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d1ef      	bne.n	801135a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801137a:	68f8      	ldr	r0, [r7, #12]
 801137c:	f7ff fed4 	bl	8011128 <tcp_output_segment_busy>
 8011380:	4603      	mov	r3, r0
 8011382:	2b00      	cmp	r3, #0
 8011384:	d002      	beq.n	801138c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011386:	f06f 0305 	mvn.w	r3, #5
 801138a:	e033      	b.n	80113f4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2200      	movs	r2, #0
 80113a0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	8b5b      	ldrh	r3, [r3, #26]
 80113a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80113aa:	b29a      	uxth	r2, r3
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7f9 fc68 	bl	800ac8c <lwip_htonl>
 80113bc:	4604      	mov	r4, r0
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	891b      	ldrh	r3, [r3, #8]
 80113c2:	461d      	mov	r5, r3
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	68db      	ldr	r3, [r3, #12]
 80113c8:	899b      	ldrh	r3, [r3, #12]
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7f9 fc47 	bl	800ac60 <lwip_htons>
 80113d2:	4603      	mov	r3, r0
 80113d4:	b2db      	uxtb	r3, r3
 80113d6:	f003 0303 	and.w	r3, r3, #3
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d001      	beq.n	80113e2 <tcp_rexmit_rto_prepare+0xba>
 80113de:	2301      	movs	r3, #1
 80113e0:	e000      	b.n	80113e4 <tcp_rexmit_rto_prepare+0xbc>
 80113e2:	2300      	movs	r3, #0
 80113e4:	442b      	add	r3, r5
 80113e6:	18e2      	adds	r2, r4, r3
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2200      	movs	r2, #0
 80113f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80113f2:	2300      	movs	r3, #0
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	3710      	adds	r7, #16
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bdb0      	pop	{r4, r5, r7, pc}
 80113fc:	0801871c 	.word	0x0801871c
 8011400:	08018d58 	.word	0x08018d58
 8011404:	08018770 	.word	0x08018770

08011408 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d106      	bne.n	8011424 <tcp_rexmit_rto_commit+0x1c>
 8011416:	4b0d      	ldr	r3, [pc, #52]	@ (801144c <tcp_rexmit_rto_commit+0x44>)
 8011418:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801141c:	490c      	ldr	r1, [pc, #48]	@ (8011450 <tcp_rexmit_rto_commit+0x48>)
 801141e:	480d      	ldr	r0, [pc, #52]	@ (8011454 <tcp_rexmit_rto_commit+0x4c>)
 8011420:	f003 fdea 	bl	8014ff8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801142a:	2bff      	cmp	r3, #255	@ 0xff
 801142c:	d007      	beq.n	801143e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011434:	3301      	adds	r3, #1
 8011436:	b2da      	uxtb	r2, r3
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f7ff fc7e 	bl	8010d40 <tcp_output>
}
 8011444:	bf00      	nop
 8011446:	3708      	adds	r7, #8
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}
 801144c:	0801871c 	.word	0x0801871c
 8011450:	08018d7c 	.word	0x08018d7c
 8011454:	08018770 	.word	0x08018770

08011458 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d106      	bne.n	8011474 <tcp_rexmit_rto+0x1c>
 8011466:	4b0a      	ldr	r3, [pc, #40]	@ (8011490 <tcp_rexmit_rto+0x38>)
 8011468:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801146c:	4909      	ldr	r1, [pc, #36]	@ (8011494 <tcp_rexmit_rto+0x3c>)
 801146e:	480a      	ldr	r0, [pc, #40]	@ (8011498 <tcp_rexmit_rto+0x40>)
 8011470:	f003 fdc2 	bl	8014ff8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f7ff ff57 	bl	8011328 <tcp_rexmit_rto_prepare>
 801147a:	4603      	mov	r3, r0
 801147c:	2b00      	cmp	r3, #0
 801147e:	d102      	bne.n	8011486 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f7ff ffc1 	bl	8011408 <tcp_rexmit_rto_commit>
  }
}
 8011486:	bf00      	nop
 8011488:	3708      	adds	r7, #8
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}
 801148e:	bf00      	nop
 8011490:	0801871c 	.word	0x0801871c
 8011494:	08018da0 	.word	0x08018da0
 8011498:	08018770 	.word	0x08018770

0801149c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801149c:	b590      	push	{r4, r7, lr}
 801149e:	b085      	sub	sp, #20
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d106      	bne.n	80114b8 <tcp_rexmit+0x1c>
 80114aa:	4b2f      	ldr	r3, [pc, #188]	@ (8011568 <tcp_rexmit+0xcc>)
 80114ac:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80114b0:	492e      	ldr	r1, [pc, #184]	@ (801156c <tcp_rexmit+0xd0>)
 80114b2:	482f      	ldr	r0, [pc, #188]	@ (8011570 <tcp_rexmit+0xd4>)
 80114b4:	f003 fda0 	bl	8014ff8 <iprintf>

  if (pcb->unacked == NULL) {
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d102      	bne.n	80114c6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80114c0:	f06f 0305 	mvn.w	r3, #5
 80114c4:	e04c      	b.n	8011560 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80114ca:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80114cc:	68b8      	ldr	r0, [r7, #8]
 80114ce:	f7ff fe2b 	bl	8011128 <tcp_output_segment_busy>
 80114d2:	4603      	mov	r3, r0
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d002      	beq.n	80114de <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80114d8:	f06f 0305 	mvn.w	r3, #5
 80114dc:	e040      	b.n	8011560 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	681a      	ldr	r2, [r3, #0]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	336c      	adds	r3, #108	@ 0x6c
 80114ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80114ec:	e002      	b.n	80114f4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d011      	beq.n	8011520 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	68db      	ldr	r3, [r3, #12]
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	4618      	mov	r0, r3
 8011506:	f7f9 fbc1 	bl	800ac8c <lwip_htonl>
 801150a:	4604      	mov	r4, r0
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	685b      	ldr	r3, [r3, #4]
 8011512:	4618      	mov	r0, r3
 8011514:	f7f9 fbba 	bl	800ac8c <lwip_htonl>
 8011518:	4603      	mov	r3, r0
 801151a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801151c:	2b00      	cmp	r3, #0
 801151e:	dbe6      	blt.n	80114ee <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	681a      	ldr	r2, [r3, #0]
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	68ba      	ldr	r2, [r7, #8]
 801152c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d103      	bne.n	801153e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2200      	movs	r2, #0
 801153a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011544:	2bff      	cmp	r3, #255	@ 0xff
 8011546:	d007      	beq.n	8011558 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801154e:	3301      	adds	r3, #1
 8011550:	b2da      	uxtb	r2, r3
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2200      	movs	r2, #0
 801155c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801155e:	2300      	movs	r3, #0
}
 8011560:	4618      	mov	r0, r3
 8011562:	3714      	adds	r7, #20
 8011564:	46bd      	mov	sp, r7
 8011566:	bd90      	pop	{r4, r7, pc}
 8011568:	0801871c 	.word	0x0801871c
 801156c:	08018dbc 	.word	0x08018dbc
 8011570:	08018770 	.word	0x08018770

08011574 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b082      	sub	sp, #8
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d106      	bne.n	8011590 <tcp_rexmit_fast+0x1c>
 8011582:	4b2a      	ldr	r3, [pc, #168]	@ (801162c <tcp_rexmit_fast+0xb8>)
 8011584:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8011588:	4929      	ldr	r1, [pc, #164]	@ (8011630 <tcp_rexmit_fast+0xbc>)
 801158a:	482a      	ldr	r0, [pc, #168]	@ (8011634 <tcp_rexmit_fast+0xc0>)
 801158c:	f003 fd34 	bl	8014ff8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011594:	2b00      	cmp	r3, #0
 8011596:	d044      	beq.n	8011622 <tcp_rexmit_fast+0xae>
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	8b5b      	ldrh	r3, [r3, #26]
 801159c:	f003 0304 	and.w	r3, r3, #4
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d13e      	bne.n	8011622 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f7ff ff79 	bl	801149c <tcp_rexmit>
 80115aa:	4603      	mov	r3, r0
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d138      	bne.n	8011622 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80115bc:	4293      	cmp	r3, r2
 80115be:	bf28      	it	cs
 80115c0:	4613      	movcs	r3, r2
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	0fda      	lsrs	r2, r3, #31
 80115c6:	4413      	add	r3, r2
 80115c8:	105b      	asrs	r3, r3, #1
 80115ca:	b29a      	uxth	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80115d8:	461a      	mov	r2, r3
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80115de:	005b      	lsls	r3, r3, #1
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d206      	bcs.n	80115f2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80115e8:	005b      	lsls	r3, r3, #1
 80115ea:	b29a      	uxth	r2, r3
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80115fc:	4619      	mov	r1, r3
 80115fe:	0049      	lsls	r1, r1, #1
 8011600:	440b      	add	r3, r1
 8011602:	b29b      	uxth	r3, r3
 8011604:	4413      	add	r3, r2
 8011606:	b29a      	uxth	r2, r3
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	8b5b      	ldrh	r3, [r3, #26]
 8011612:	f043 0304 	orr.w	r3, r3, #4
 8011616:	b29a      	uxth	r2, r3
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2200      	movs	r2, #0
 8011620:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8011622:	bf00      	nop
 8011624:	3708      	adds	r7, #8
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	0801871c 	.word	0x0801871c
 8011630:	08018dd4 	.word	0x08018dd4
 8011634:	08018770 	.word	0x08018770

08011638 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b086      	sub	sp, #24
 801163c:	af00      	add	r7, sp, #0
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	607b      	str	r3, [r7, #4]
 8011642:	460b      	mov	r3, r1
 8011644:	817b      	strh	r3, [r7, #10]
 8011646:	4613      	mov	r3, r2
 8011648:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801164a:	897a      	ldrh	r2, [r7, #10]
 801164c:	893b      	ldrh	r3, [r7, #8]
 801164e:	4413      	add	r3, r2
 8011650:	b29b      	uxth	r3, r3
 8011652:	3314      	adds	r3, #20
 8011654:	b29b      	uxth	r3, r3
 8011656:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801165a:	4619      	mov	r1, r3
 801165c:	2022      	movs	r0, #34	@ 0x22
 801165e:	f7fa fb79 	bl	800bd54 <pbuf_alloc>
 8011662:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d04d      	beq.n	8011706 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801166a:	897b      	ldrh	r3, [r7, #10]
 801166c:	3313      	adds	r3, #19
 801166e:	697a      	ldr	r2, [r7, #20]
 8011670:	8952      	ldrh	r2, [r2, #10]
 8011672:	4293      	cmp	r3, r2
 8011674:	db06      	blt.n	8011684 <tcp_output_alloc_header_common+0x4c>
 8011676:	4b26      	ldr	r3, [pc, #152]	@ (8011710 <tcp_output_alloc_header_common+0xd8>)
 8011678:	f240 7223 	movw	r2, #1827	@ 0x723
 801167c:	4925      	ldr	r1, [pc, #148]	@ (8011714 <tcp_output_alloc_header_common+0xdc>)
 801167e:	4826      	ldr	r0, [pc, #152]	@ (8011718 <tcp_output_alloc_header_common+0xe0>)
 8011680:	f003 fcba 	bl	8014ff8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801168a:	8c3b      	ldrh	r3, [r7, #32]
 801168c:	4618      	mov	r0, r3
 801168e:	f7f9 fae7 	bl	800ac60 <lwip_htons>
 8011692:	4603      	mov	r3, r0
 8011694:	461a      	mov	r2, r3
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801169a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801169c:	4618      	mov	r0, r3
 801169e:	f7f9 fadf 	bl	800ac60 <lwip_htons>
 80116a2:	4603      	mov	r3, r0
 80116a4:	461a      	mov	r2, r3
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	687a      	ldr	r2, [r7, #4]
 80116ae:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80116b0:	68f8      	ldr	r0, [r7, #12]
 80116b2:	f7f9 faeb 	bl	800ac8c <lwip_htonl>
 80116b6:	4602      	mov	r2, r0
 80116b8:	693b      	ldr	r3, [r7, #16]
 80116ba:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80116bc:	897b      	ldrh	r3, [r7, #10]
 80116be:	089b      	lsrs	r3, r3, #2
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	3305      	adds	r3, #5
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	031b      	lsls	r3, r3, #12
 80116c8:	b29a      	uxth	r2, r3
 80116ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80116ce:	b29b      	uxth	r3, r3
 80116d0:	4313      	orrs	r3, r2
 80116d2:	b29b      	uxth	r3, r3
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7f9 fac3 	bl	800ac60 <lwip_htons>
 80116da:	4603      	mov	r3, r0
 80116dc:	461a      	mov	r2, r3
 80116de:	693b      	ldr	r3, [r7, #16]
 80116e0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80116e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80116e4:	4618      	mov	r0, r3
 80116e6:	f7f9 fabb 	bl	800ac60 <lwip_htons>
 80116ea:	4603      	mov	r3, r0
 80116ec:	461a      	mov	r2, r3
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80116f2:	693b      	ldr	r3, [r7, #16]
 80116f4:	2200      	movs	r2, #0
 80116f6:	741a      	strb	r2, [r3, #16]
 80116f8:	2200      	movs	r2, #0
 80116fa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	2200      	movs	r2, #0
 8011700:	749a      	strb	r2, [r3, #18]
 8011702:	2200      	movs	r2, #0
 8011704:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011706:	697b      	ldr	r3, [r7, #20]
}
 8011708:	4618      	mov	r0, r3
 801170a:	3718      	adds	r7, #24
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}
 8011710:	0801871c 	.word	0x0801871c
 8011714:	08018df4 	.word	0x08018df4
 8011718:	08018770 	.word	0x08018770

0801171c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801171c:	b5b0      	push	{r4, r5, r7, lr}
 801171e:	b08a      	sub	sp, #40	@ 0x28
 8011720:	af04      	add	r7, sp, #16
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	607b      	str	r3, [r7, #4]
 8011726:	460b      	mov	r3, r1
 8011728:	817b      	strh	r3, [r7, #10]
 801172a:	4613      	mov	r3, r2
 801172c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d106      	bne.n	8011742 <tcp_output_alloc_header+0x26>
 8011734:	4b15      	ldr	r3, [pc, #84]	@ (801178c <tcp_output_alloc_header+0x70>)
 8011736:	f240 7242 	movw	r2, #1858	@ 0x742
 801173a:	4915      	ldr	r1, [pc, #84]	@ (8011790 <tcp_output_alloc_header+0x74>)
 801173c:	4815      	ldr	r0, [pc, #84]	@ (8011794 <tcp_output_alloc_header+0x78>)
 801173e:	f003 fc5b 	bl	8014ff8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	8adb      	ldrh	r3, [r3, #22]
 801174a:	68fa      	ldr	r2, [r7, #12]
 801174c:	8b12      	ldrh	r2, [r2, #24]
 801174e:	68f9      	ldr	r1, [r7, #12]
 8011750:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8011752:	893d      	ldrh	r5, [r7, #8]
 8011754:	897c      	ldrh	r4, [r7, #10]
 8011756:	9103      	str	r1, [sp, #12]
 8011758:	2110      	movs	r1, #16
 801175a:	9102      	str	r1, [sp, #8]
 801175c:	9201      	str	r2, [sp, #4]
 801175e:	9300      	str	r3, [sp, #0]
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	462a      	mov	r2, r5
 8011764:	4621      	mov	r1, r4
 8011766:	f7ff ff67 	bl	8011638 <tcp_output_alloc_header_common>
 801176a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d006      	beq.n	8011780 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011776:	68fa      	ldr	r2, [r7, #12]
 8011778:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801177a:	441a      	add	r2, r3
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8011780:	697b      	ldr	r3, [r7, #20]
}
 8011782:	4618      	mov	r0, r3
 8011784:	3718      	adds	r7, #24
 8011786:	46bd      	mov	sp, r7
 8011788:	bdb0      	pop	{r4, r5, r7, pc}
 801178a:	bf00      	nop
 801178c:	0801871c 	.word	0x0801871c
 8011790:	08018e24 	.word	0x08018e24
 8011794:	08018770 	.word	0x08018770

08011798 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b088      	sub	sp, #32
 801179c:	af00      	add	r7, sp, #0
 801179e:	60f8      	str	r0, [r7, #12]
 80117a0:	60b9      	str	r1, [r7, #8]
 80117a2:	4611      	mov	r1, r2
 80117a4:	461a      	mov	r2, r3
 80117a6:	460b      	mov	r3, r1
 80117a8:	71fb      	strb	r3, [r7, #7]
 80117aa:	4613      	mov	r3, r2
 80117ac:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80117ae:	2300      	movs	r3, #0
 80117b0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d106      	bne.n	80117c6 <tcp_output_fill_options+0x2e>
 80117b8:	4b12      	ldr	r3, [pc, #72]	@ (8011804 <tcp_output_fill_options+0x6c>)
 80117ba:	f240 7256 	movw	r2, #1878	@ 0x756
 80117be:	4912      	ldr	r1, [pc, #72]	@ (8011808 <tcp_output_fill_options+0x70>)
 80117c0:	4812      	ldr	r0, [pc, #72]	@ (801180c <tcp_output_fill_options+0x74>)
 80117c2:	f003 fc19 	bl	8014ff8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80117cc:	69bb      	ldr	r3, [r7, #24]
 80117ce:	3314      	adds	r3, #20
 80117d0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80117d2:	8bfb      	ldrh	r3, [r7, #30]
 80117d4:	009b      	lsls	r3, r3, #2
 80117d6:	461a      	mov	r2, r3
 80117d8:	79fb      	ldrb	r3, [r7, #7]
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	f003 0304 	and.w	r3, r3, #4
 80117e0:	4413      	add	r3, r2
 80117e2:	3314      	adds	r3, #20
 80117e4:	69ba      	ldr	r2, [r7, #24]
 80117e6:	4413      	add	r3, r2
 80117e8:	697a      	ldr	r2, [r7, #20]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d006      	beq.n	80117fc <tcp_output_fill_options+0x64>
 80117ee:	4b05      	ldr	r3, [pc, #20]	@ (8011804 <tcp_output_fill_options+0x6c>)
 80117f0:	f240 7275 	movw	r2, #1909	@ 0x775
 80117f4:	4906      	ldr	r1, [pc, #24]	@ (8011810 <tcp_output_fill_options+0x78>)
 80117f6:	4805      	ldr	r0, [pc, #20]	@ (801180c <tcp_output_fill_options+0x74>)
 80117f8:	f003 fbfe 	bl	8014ff8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80117fc:	bf00      	nop
 80117fe:	3720      	adds	r7, #32
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}
 8011804:	0801871c 	.word	0x0801871c
 8011808:	08018e4c 	.word	0x08018e4c
 801180c:	08018770 	.word	0x08018770
 8011810:	08018d44 	.word	0x08018d44

08011814 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b08a      	sub	sp, #40	@ 0x28
 8011818:	af04      	add	r7, sp, #16
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	60b9      	str	r1, [r7, #8]
 801181e:	607a      	str	r2, [r7, #4]
 8011820:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d106      	bne.n	8011836 <tcp_output_control_segment+0x22>
 8011828:	4b1c      	ldr	r3, [pc, #112]	@ (801189c <tcp_output_control_segment+0x88>)
 801182a:	f240 7287 	movw	r2, #1927	@ 0x787
 801182e:	491c      	ldr	r1, [pc, #112]	@ (80118a0 <tcp_output_control_segment+0x8c>)
 8011830:	481c      	ldr	r0, [pc, #112]	@ (80118a4 <tcp_output_control_segment+0x90>)
 8011832:	f003 fbe1 	bl	8014ff8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011836:	683a      	ldr	r2, [r7, #0]
 8011838:	6879      	ldr	r1, [r7, #4]
 801183a:	68f8      	ldr	r0, [r7, #12]
 801183c:	f7fe ff42 	bl	80106c4 <tcp_route>
 8011840:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d102      	bne.n	801184e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011848:	23fc      	movs	r3, #252	@ 0xfc
 801184a:	75fb      	strb	r3, [r7, #23]
 801184c:	e01c      	b.n	8011888 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d006      	beq.n	8011862 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	7adb      	ldrb	r3, [r3, #11]
 8011858:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	7a9b      	ldrb	r3, [r3, #10]
 801185e:	757b      	strb	r3, [r7, #21]
 8011860:	e003      	b.n	801186a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011862:	23ff      	movs	r3, #255	@ 0xff
 8011864:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011866:	2300      	movs	r3, #0
 8011868:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801186a:	7dba      	ldrb	r2, [r7, #22]
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	9302      	str	r3, [sp, #8]
 8011870:	2306      	movs	r3, #6
 8011872:	9301      	str	r3, [sp, #4]
 8011874:	7d7b      	ldrb	r3, [r7, #21]
 8011876:	9300      	str	r3, [sp, #0]
 8011878:	4613      	mov	r3, r2
 801187a:	683a      	ldr	r2, [r7, #0]
 801187c:	6879      	ldr	r1, [r7, #4]
 801187e:	68b8      	ldr	r0, [r7, #8]
 8011880:	f002 fa8c 	bl	8013d9c <ip4_output_if>
 8011884:	4603      	mov	r3, r0
 8011886:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011888:	68b8      	ldr	r0, [r7, #8]
 801188a:	f7fa fd47 	bl	800c31c <pbuf_free>
  return err;
 801188e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011892:	4618      	mov	r0, r3
 8011894:	3718      	adds	r7, #24
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
 801189a:	bf00      	nop
 801189c:	0801871c 	.word	0x0801871c
 80118a0:	08018e74 	.word	0x08018e74
 80118a4:	08018770 	.word	0x08018770

080118a8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80118a8:	b590      	push	{r4, r7, lr}
 80118aa:	b08b      	sub	sp, #44	@ 0x2c
 80118ac:	af04      	add	r7, sp, #16
 80118ae:	60f8      	str	r0, [r7, #12]
 80118b0:	60b9      	str	r1, [r7, #8]
 80118b2:	607a      	str	r2, [r7, #4]
 80118b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d106      	bne.n	80118ca <tcp_rst+0x22>
 80118bc:	4b1f      	ldr	r3, [pc, #124]	@ (801193c <tcp_rst+0x94>)
 80118be:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80118c2:	491f      	ldr	r1, [pc, #124]	@ (8011940 <tcp_rst+0x98>)
 80118c4:	481f      	ldr	r0, [pc, #124]	@ (8011944 <tcp_rst+0x9c>)
 80118c6:	f003 fb97 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80118ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d106      	bne.n	80118de <tcp_rst+0x36>
 80118d0:	4b1a      	ldr	r3, [pc, #104]	@ (801193c <tcp_rst+0x94>)
 80118d2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80118d6:	491c      	ldr	r1, [pc, #112]	@ (8011948 <tcp_rst+0xa0>)
 80118d8:	481a      	ldr	r0, [pc, #104]	@ (8011944 <tcp_rst+0x9c>)
 80118da:	f003 fb8d 	bl	8014ff8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80118de:	2300      	movs	r3, #0
 80118e0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80118e2:	f246 0308 	movw	r3, #24584	@ 0x6008
 80118e6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80118e8:	7dfb      	ldrb	r3, [r7, #23]
 80118ea:	b29c      	uxth	r4, r3
 80118ec:	68b8      	ldr	r0, [r7, #8]
 80118ee:	f7f9 f9cd 	bl	800ac8c <lwip_htonl>
 80118f2:	4602      	mov	r2, r0
 80118f4:	8abb      	ldrh	r3, [r7, #20]
 80118f6:	9303      	str	r3, [sp, #12]
 80118f8:	2314      	movs	r3, #20
 80118fa:	9302      	str	r3, [sp, #8]
 80118fc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80118fe:	9301      	str	r3, [sp, #4]
 8011900:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011902:	9300      	str	r3, [sp, #0]
 8011904:	4613      	mov	r3, r2
 8011906:	2200      	movs	r2, #0
 8011908:	4621      	mov	r1, r4
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f7ff fe94 	bl	8011638 <tcp_output_alloc_header_common>
 8011910:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d00c      	beq.n	8011932 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011918:	7dfb      	ldrb	r3, [r7, #23]
 801191a:	2200      	movs	r2, #0
 801191c:	6939      	ldr	r1, [r7, #16]
 801191e:	68f8      	ldr	r0, [r7, #12]
 8011920:	f7ff ff3a 	bl	8011798 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011926:	683a      	ldr	r2, [r7, #0]
 8011928:	6939      	ldr	r1, [r7, #16]
 801192a:	68f8      	ldr	r0, [r7, #12]
 801192c:	f7ff ff72 	bl	8011814 <tcp_output_control_segment>
 8011930:	e000      	b.n	8011934 <tcp_rst+0x8c>
    return;
 8011932:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011934:	371c      	adds	r7, #28
 8011936:	46bd      	mov	sp, r7
 8011938:	bd90      	pop	{r4, r7, pc}
 801193a:	bf00      	nop
 801193c:	0801871c 	.word	0x0801871c
 8011940:	08018ea0 	.word	0x08018ea0
 8011944:	08018770 	.word	0x08018770
 8011948:	08018ebc 	.word	0x08018ebc

0801194c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801194c:	b590      	push	{r4, r7, lr}
 801194e:	b087      	sub	sp, #28
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011954:	2300      	movs	r3, #0
 8011956:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011958:	2300      	movs	r3, #0
 801195a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d106      	bne.n	8011970 <tcp_send_empty_ack+0x24>
 8011962:	4b28      	ldr	r3, [pc, #160]	@ (8011a04 <tcp_send_empty_ack+0xb8>)
 8011964:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011968:	4927      	ldr	r1, [pc, #156]	@ (8011a08 <tcp_send_empty_ack+0xbc>)
 801196a:	4828      	ldr	r0, [pc, #160]	@ (8011a0c <tcp_send_empty_ack+0xc0>)
 801196c:	f003 fb44 	bl	8014ff8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011970:	7dfb      	ldrb	r3, [r7, #23]
 8011972:	009b      	lsls	r3, r3, #2
 8011974:	b2db      	uxtb	r3, r3
 8011976:	f003 0304 	and.w	r3, r3, #4
 801197a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801197c:	7d7b      	ldrb	r3, [r7, #21]
 801197e:	b29c      	uxth	r4, r3
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011984:	4618      	mov	r0, r3
 8011986:	f7f9 f981 	bl	800ac8c <lwip_htonl>
 801198a:	4603      	mov	r3, r0
 801198c:	2200      	movs	r2, #0
 801198e:	4621      	mov	r1, r4
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f7ff fec3 	bl	801171c <tcp_output_alloc_header>
 8011996:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d109      	bne.n	80119b2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	8b5b      	ldrh	r3, [r3, #26]
 80119a2:	f043 0303 	orr.w	r3, r3, #3
 80119a6:	b29a      	uxth	r2, r3
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80119ac:	f06f 0301 	mvn.w	r3, #1
 80119b0:	e023      	b.n	80119fa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80119b2:	7dbb      	ldrb	r3, [r7, #22]
 80119b4:	7dfa      	ldrb	r2, [r7, #23]
 80119b6:	6939      	ldr	r1, [r7, #16]
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	f7ff feed 	bl	8011798 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80119be:	687a      	ldr	r2, [r7, #4]
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	3304      	adds	r3, #4
 80119c4:	6939      	ldr	r1, [r7, #16]
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f7ff ff24 	bl	8011814 <tcp_output_control_segment>
 80119cc:	4603      	mov	r3, r0
 80119ce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80119d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d007      	beq.n	80119e8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	8b5b      	ldrh	r3, [r3, #26]
 80119dc:	f043 0303 	orr.w	r3, r3, #3
 80119e0:	b29a      	uxth	r2, r3
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	835a      	strh	r2, [r3, #26]
 80119e6:	e006      	b.n	80119f6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	8b5b      	ldrh	r3, [r3, #26]
 80119ec:	f023 0303 	bic.w	r3, r3, #3
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80119f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80119fa:	4618      	mov	r0, r3
 80119fc:	371c      	adds	r7, #28
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd90      	pop	{r4, r7, pc}
 8011a02:	bf00      	nop
 8011a04:	0801871c 	.word	0x0801871c
 8011a08:	08018ed8 	.word	0x08018ed8
 8011a0c:	08018770 	.word	0x08018770

08011a10 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011a10:	b590      	push	{r4, r7, lr}
 8011a12:	b087      	sub	sp, #28
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011a18:	2300      	movs	r3, #0
 8011a1a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d106      	bne.n	8011a30 <tcp_keepalive+0x20>
 8011a22:	4b18      	ldr	r3, [pc, #96]	@ (8011a84 <tcp_keepalive+0x74>)
 8011a24:	f640 0224 	movw	r2, #2084	@ 0x824
 8011a28:	4917      	ldr	r1, [pc, #92]	@ (8011a88 <tcp_keepalive+0x78>)
 8011a2a:	4818      	ldr	r0, [pc, #96]	@ (8011a8c <tcp_keepalive+0x7c>)
 8011a2c:	f003 fae4 	bl	8014ff8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011a30:	7dfb      	ldrb	r3, [r7, #23]
 8011a32:	b29c      	uxth	r4, r3
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a38:	3b01      	subs	r3, #1
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7f9 f926 	bl	800ac8c <lwip_htonl>
 8011a40:	4603      	mov	r3, r0
 8011a42:	2200      	movs	r2, #0
 8011a44:	4621      	mov	r1, r4
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f7ff fe68 	bl	801171c <tcp_output_alloc_header>
 8011a4c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d102      	bne.n	8011a5a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011a54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a58:	e010      	b.n	8011a7c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011a5a:	7dfb      	ldrb	r3, [r7, #23]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	6939      	ldr	r1, [r7, #16]
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f7ff fe99 	bl	8011798 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011a66:	687a      	ldr	r2, [r7, #4]
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	3304      	adds	r3, #4
 8011a6c:	6939      	ldr	r1, [r7, #16]
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f7ff fed0 	bl	8011814 <tcp_output_control_segment>
 8011a74:	4603      	mov	r3, r0
 8011a76:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	371c      	adds	r7, #28
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd90      	pop	{r4, r7, pc}
 8011a84:	0801871c 	.word	0x0801871c
 8011a88:	08018ef8 	.word	0x08018ef8
 8011a8c:	08018770 	.word	0x08018770

08011a90 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011a90:	b590      	push	{r4, r7, lr}
 8011a92:	b08b      	sub	sp, #44	@ 0x2c
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011a98:	2300      	movs	r3, #0
 8011a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d106      	bne.n	8011ab2 <tcp_zero_window_probe+0x22>
 8011aa4:	4b4c      	ldr	r3, [pc, #304]	@ (8011bd8 <tcp_zero_window_probe+0x148>)
 8011aa6:	f640 024f 	movw	r2, #2127	@ 0x84f
 8011aaa:	494c      	ldr	r1, [pc, #304]	@ (8011bdc <tcp_zero_window_probe+0x14c>)
 8011aac:	484c      	ldr	r0, [pc, #304]	@ (8011be0 <tcp_zero_window_probe+0x150>)
 8011aae:	f003 faa3 	bl	8014ff8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ab6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011ab8:	6a3b      	ldr	r3, [r7, #32]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d101      	bne.n	8011ac2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	e086      	b.n	8011bd0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011ac8:	2bff      	cmp	r3, #255	@ 0xff
 8011aca:	d007      	beq.n	8011adc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	b2da      	uxtb	r2, r3
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011adc:	6a3b      	ldr	r3, [r7, #32]
 8011ade:	68db      	ldr	r3, [r3, #12]
 8011ae0:	899b      	ldrh	r3, [r3, #12]
 8011ae2:	b29b      	uxth	r3, r3
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7f9 f8bb 	bl	800ac60 <lwip_htons>
 8011aea:	4603      	mov	r3, r0
 8011aec:	b2db      	uxtb	r3, r3
 8011aee:	f003 0301 	and.w	r3, r3, #1
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d005      	beq.n	8011b02 <tcp_zero_window_probe+0x72>
 8011af6:	6a3b      	ldr	r3, [r7, #32]
 8011af8:	891b      	ldrh	r3, [r3, #8]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d101      	bne.n	8011b02 <tcp_zero_window_probe+0x72>
 8011afe:	2301      	movs	r3, #1
 8011b00:	e000      	b.n	8011b04 <tcp_zero_window_probe+0x74>
 8011b02:	2300      	movs	r3, #0
 8011b04:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011b06:	7ffb      	ldrb	r3, [r7, #31]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	bf0c      	ite	eq
 8011b0c:	2301      	moveq	r3, #1
 8011b0e:	2300      	movne	r3, #0
 8011b10:	b2db      	uxtb	r3, r3
 8011b12:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011b18:	b299      	uxth	r1, r3
 8011b1a:	6a3b      	ldr	r3, [r7, #32]
 8011b1c:	68db      	ldr	r3, [r3, #12]
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	8bba      	ldrh	r2, [r7, #28]
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f7ff fdfa 	bl	801171c <tcp_output_alloc_header>
 8011b28:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011b2a:	69bb      	ldr	r3, [r7, #24]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d102      	bne.n	8011b36 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011b30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b34:	e04c      	b.n	8011bd0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011b36:	69bb      	ldr	r3, [r7, #24]
 8011b38:	685b      	ldr	r3, [r3, #4]
 8011b3a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011b3c:	7ffb      	ldrb	r3, [r7, #31]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d011      	beq.n	8011b66 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011b42:	697b      	ldr	r3, [r7, #20]
 8011b44:	899b      	ldrh	r3, [r3, #12]
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	b21b      	sxth	r3, r3
 8011b4a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011b4e:	b21c      	sxth	r4, r3
 8011b50:	2011      	movs	r0, #17
 8011b52:	f7f9 f885 	bl	800ac60 <lwip_htons>
 8011b56:	4603      	mov	r3, r0
 8011b58:	b21b      	sxth	r3, r3
 8011b5a:	4323      	orrs	r3, r4
 8011b5c:	b21b      	sxth	r3, r3
 8011b5e:	b29a      	uxth	r2, r3
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	819a      	strh	r2, [r3, #12]
 8011b64:	e010      	b.n	8011b88 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011b66:	69bb      	ldr	r3, [r7, #24]
 8011b68:	685b      	ldr	r3, [r3, #4]
 8011b6a:	3314      	adds	r3, #20
 8011b6c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011b6e:	6a3b      	ldr	r3, [r7, #32]
 8011b70:	6858      	ldr	r0, [r3, #4]
 8011b72:	6a3b      	ldr	r3, [r7, #32]
 8011b74:	685b      	ldr	r3, [r3, #4]
 8011b76:	891a      	ldrh	r2, [r3, #8]
 8011b78:	6a3b      	ldr	r3, [r7, #32]
 8011b7a:	891b      	ldrh	r3, [r3, #8]
 8011b7c:	1ad3      	subs	r3, r2, r3
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	2201      	movs	r2, #1
 8011b82:	6939      	ldr	r1, [r7, #16]
 8011b84:	f7fa fdc4 	bl	800c710 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011b88:	6a3b      	ldr	r3, [r7, #32]
 8011b8a:	68db      	ldr	r3, [r3, #12]
 8011b8c:	685b      	ldr	r3, [r3, #4]
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f7f9 f87c 	bl	800ac8c <lwip_htonl>
 8011b94:	4603      	mov	r3, r0
 8011b96:	3301      	adds	r3, #1
 8011b98:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	1ad3      	subs	r3, r2, r3
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	da02      	bge.n	8011bac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	68fa      	ldr	r2, [r7, #12]
 8011baa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011bac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	69b9      	ldr	r1, [r7, #24]
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f7ff fdef 	bl	8011798 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	3304      	adds	r3, #4
 8011bc0:	69b9      	ldr	r1, [r7, #24]
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f7ff fe26 	bl	8011814 <tcp_output_control_segment>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011bcc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	372c      	adds	r7, #44	@ 0x2c
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd90      	pop	{r4, r7, pc}
 8011bd8:	0801871c 	.word	0x0801871c
 8011bdc:	08018f14 	.word	0x08018f14
 8011be0:	08018770 	.word	0x08018770

08011be4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011bec:	f7fa ff10 	bl	800ca10 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8011c1c <tcpip_tcp_timer+0x38>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d103      	bne.n	8011c00 <tcpip_tcp_timer+0x1c>
 8011bf8:	4b09      	ldr	r3, [pc, #36]	@ (8011c20 <tcpip_tcp_timer+0x3c>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d005      	beq.n	8011c0c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011c00:	2200      	movs	r2, #0
 8011c02:	4908      	ldr	r1, [pc, #32]	@ (8011c24 <tcpip_tcp_timer+0x40>)
 8011c04:	20fa      	movs	r0, #250	@ 0xfa
 8011c06:	f000 f8f3 	bl	8011df0 <sys_timeout>
 8011c0a:	e003      	b.n	8011c14 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011c0c:	4b06      	ldr	r3, [pc, #24]	@ (8011c28 <tcpip_tcp_timer+0x44>)
 8011c0e:	2200      	movs	r2, #0
 8011c10:	601a      	str	r2, [r3, #0]
  }
}
 8011c12:	bf00      	nop
 8011c14:	bf00      	nop
 8011c16:	3708      	adds	r7, #8
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}
 8011c1c:	2000b278 	.word	0x2000b278
 8011c20:	2000b27c 	.word	0x2000b27c
 8011c24:	08011be5 	.word	0x08011be5
 8011c28:	2000b2c4 	.word	0x2000b2c4

08011c2c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011c30:	4b0a      	ldr	r3, [pc, #40]	@ (8011c5c <tcp_timer_needed+0x30>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d10f      	bne.n	8011c58 <tcp_timer_needed+0x2c>
 8011c38:	4b09      	ldr	r3, [pc, #36]	@ (8011c60 <tcp_timer_needed+0x34>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d103      	bne.n	8011c48 <tcp_timer_needed+0x1c>
 8011c40:	4b08      	ldr	r3, [pc, #32]	@ (8011c64 <tcp_timer_needed+0x38>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d007      	beq.n	8011c58 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011c48:	4b04      	ldr	r3, [pc, #16]	@ (8011c5c <tcp_timer_needed+0x30>)
 8011c4a:	2201      	movs	r2, #1
 8011c4c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011c4e:	2200      	movs	r2, #0
 8011c50:	4905      	ldr	r1, [pc, #20]	@ (8011c68 <tcp_timer_needed+0x3c>)
 8011c52:	20fa      	movs	r0, #250	@ 0xfa
 8011c54:	f000 f8cc 	bl	8011df0 <sys_timeout>
  }
}
 8011c58:	bf00      	nop
 8011c5a:	bd80      	pop	{r7, pc}
 8011c5c:	2000b2c4 	.word	0x2000b2c4
 8011c60:	2000b278 	.word	0x2000b278
 8011c64:	2000b27c 	.word	0x2000b27c
 8011c68:	08011be5 	.word	0x08011be5

08011c6c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b086      	sub	sp, #24
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	60b9      	str	r1, [r7, #8]
 8011c76:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011c78:	2006      	movs	r0, #6
 8011c7a:	f7f9 fc69 	bl	800b550 <memp_malloc>
 8011c7e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d109      	bne.n	8011c9a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d151      	bne.n	8011d30 <sys_timeout_abs+0xc4>
 8011c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8011d38 <sys_timeout_abs+0xcc>)
 8011c8e:	22be      	movs	r2, #190	@ 0xbe
 8011c90:	492a      	ldr	r1, [pc, #168]	@ (8011d3c <sys_timeout_abs+0xd0>)
 8011c92:	482b      	ldr	r0, [pc, #172]	@ (8011d40 <sys_timeout_abs+0xd4>)
 8011c94:	f003 f9b0 	bl	8014ff8 <iprintf>
    return;
 8011c98:	e04a      	b.n	8011d30 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011c9a:	693b      	ldr	r3, [r7, #16]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	68ba      	ldr	r2, [r7, #8]
 8011ca4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	687a      	ldr	r2, [r7, #4]
 8011caa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011cac:	693b      	ldr	r3, [r7, #16]
 8011cae:	68fa      	ldr	r2, [r7, #12]
 8011cb0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011cb2:	4b24      	ldr	r3, [pc, #144]	@ (8011d44 <sys_timeout_abs+0xd8>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d103      	bne.n	8011cc2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011cba:	4a22      	ldr	r2, [pc, #136]	@ (8011d44 <sys_timeout_abs+0xd8>)
 8011cbc:	693b      	ldr	r3, [r7, #16]
 8011cbe:	6013      	str	r3, [r2, #0]
    return;
 8011cc0:	e037      	b.n	8011d32 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011cc2:	693b      	ldr	r3, [r7, #16]
 8011cc4:	685a      	ldr	r2, [r3, #4]
 8011cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8011d44 <sys_timeout_abs+0xd8>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	1ad3      	subs	r3, r2, r3
 8011cce:	0fdb      	lsrs	r3, r3, #31
 8011cd0:	f003 0301 	and.w	r3, r3, #1
 8011cd4:	b2db      	uxtb	r3, r3
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d007      	beq.n	8011cea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011cda:	4b1a      	ldr	r3, [pc, #104]	@ (8011d44 <sys_timeout_abs+0xd8>)
 8011cdc:	681a      	ldr	r2, [r3, #0]
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011ce2:	4a18      	ldr	r2, [pc, #96]	@ (8011d44 <sys_timeout_abs+0xd8>)
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	6013      	str	r3, [r2, #0]
 8011ce8:	e023      	b.n	8011d32 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011cea:	4b16      	ldr	r3, [pc, #88]	@ (8011d44 <sys_timeout_abs+0xd8>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	617b      	str	r3, [r7, #20]
 8011cf0:	e01a      	b.n	8011d28 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d00b      	beq.n	8011d12 <sys_timeout_abs+0xa6>
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	685a      	ldr	r2, [r3, #4]
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	1ad3      	subs	r3, r2, r3
 8011d06:	0fdb      	lsrs	r3, r3, #31
 8011d08:	f003 0301 	and.w	r3, r3, #1
 8011d0c:	b2db      	uxtb	r3, r3
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d007      	beq.n	8011d22 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	681a      	ldr	r2, [r3, #0]
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	693a      	ldr	r2, [r7, #16]
 8011d1e:	601a      	str	r2, [r3, #0]
        break;
 8011d20:	e007      	b.n	8011d32 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011d22:	697b      	ldr	r3, [r7, #20]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	617b      	str	r3, [r7, #20]
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d1e1      	bne.n	8011cf2 <sys_timeout_abs+0x86>
 8011d2e:	e000      	b.n	8011d32 <sys_timeout_abs+0xc6>
    return;
 8011d30:	bf00      	nop
      }
    }
  }
}
 8011d32:	3718      	adds	r7, #24
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}
 8011d38:	08018f38 	.word	0x08018f38
 8011d3c:	08018f6c 	.word	0x08018f6c
 8011d40:	08018fac 	.word	0x08018fac
 8011d44:	2000b2bc 	.word	0x2000b2bc

08011d48 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b086      	sub	sp, #24
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	4798      	blx	r3

  now = sys_now();
 8011d5a:	f7f8 fd89 	bl	800a870 <sys_now>
 8011d5e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011d60:	697b      	ldr	r3, [r7, #20]
 8011d62:	681a      	ldr	r2, [r3, #0]
 8011d64:	4b0f      	ldr	r3, [pc, #60]	@ (8011da4 <lwip_cyclic_timer+0x5c>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	4413      	add	r3, r2
 8011d6a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011d6c:	68fa      	ldr	r2, [r7, #12]
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	1ad3      	subs	r3, r2, r3
 8011d72:	0fdb      	lsrs	r3, r3, #31
 8011d74:	f003 0301 	and.w	r3, r3, #1
 8011d78:	b2db      	uxtb	r3, r3
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d009      	beq.n	8011d92 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011d7e:	697b      	ldr	r3, [r7, #20]
 8011d80:	681a      	ldr	r2, [r3, #0]
 8011d82:	693b      	ldr	r3, [r7, #16]
 8011d84:	4413      	add	r3, r2
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	4907      	ldr	r1, [pc, #28]	@ (8011da8 <lwip_cyclic_timer+0x60>)
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f7ff ff6e 	bl	8011c6c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011d90:	e004      	b.n	8011d9c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011d92:	687a      	ldr	r2, [r7, #4]
 8011d94:	4904      	ldr	r1, [pc, #16]	@ (8011da8 <lwip_cyclic_timer+0x60>)
 8011d96:	68f8      	ldr	r0, [r7, #12]
 8011d98:	f7ff ff68 	bl	8011c6c <sys_timeout_abs>
}
 8011d9c:	bf00      	nop
 8011d9e:	3718      	adds	r7, #24
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}
 8011da4:	2000b2c0 	.word	0x2000b2c0
 8011da8:	08011d49 	.word	0x08011d49

08011dac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b082      	sub	sp, #8
 8011db0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011db2:	2301      	movs	r3, #1
 8011db4:	607b      	str	r3, [r7, #4]
 8011db6:	e00e      	b.n	8011dd6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011db8:	4a0b      	ldr	r2, [pc, #44]	@ (8011de8 <sys_timeouts_init+0x3c>)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	00db      	lsls	r3, r3, #3
 8011dc4:	4a08      	ldr	r2, [pc, #32]	@ (8011de8 <sys_timeouts_init+0x3c>)
 8011dc6:	4413      	add	r3, r2
 8011dc8:	461a      	mov	r2, r3
 8011dca:	4908      	ldr	r1, [pc, #32]	@ (8011dec <sys_timeouts_init+0x40>)
 8011dcc:	f000 f810 	bl	8011df0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	607b      	str	r3, [r7, #4]
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2b02      	cmp	r3, #2
 8011dda:	d9ed      	bls.n	8011db8 <sys_timeouts_init+0xc>
  }
}
 8011ddc:	bf00      	nop
 8011dde:	bf00      	nop
 8011de0:	3708      	adds	r7, #8
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
 8011de6:	bf00      	nop
 8011de8:	08019b2c 	.word	0x08019b2c
 8011dec:	08011d49 	.word	0x08011d49

08011df0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b086      	sub	sp, #24
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	60f8      	str	r0, [r7, #12]
 8011df8:	60b9      	str	r1, [r7, #8]
 8011dfa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011e02:	d306      	bcc.n	8011e12 <sys_timeout+0x22>
 8011e04:	4b0a      	ldr	r3, [pc, #40]	@ (8011e30 <sys_timeout+0x40>)
 8011e06:	f240 1229 	movw	r2, #297	@ 0x129
 8011e0a:	490a      	ldr	r1, [pc, #40]	@ (8011e34 <sys_timeout+0x44>)
 8011e0c:	480a      	ldr	r0, [pc, #40]	@ (8011e38 <sys_timeout+0x48>)
 8011e0e:	f003 f8f3 	bl	8014ff8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011e12:	f7f8 fd2d 	bl	800a870 <sys_now>
 8011e16:	4602      	mov	r2, r0
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	4413      	add	r3, r2
 8011e1c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011e1e:	687a      	ldr	r2, [r7, #4]
 8011e20:	68b9      	ldr	r1, [r7, #8]
 8011e22:	6978      	ldr	r0, [r7, #20]
 8011e24:	f7ff ff22 	bl	8011c6c <sys_timeout_abs>
#endif
}
 8011e28:	bf00      	nop
 8011e2a:	3718      	adds	r7, #24
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}
 8011e30:	08018f38 	.word	0x08018f38
 8011e34:	08018fd4 	.word	0x08018fd4
 8011e38:	08018fac 	.word	0x08018fac

08011e3c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b084      	sub	sp, #16
 8011e40:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011e42:	f7f8 fd15 	bl	800a870 <sys_now>
 8011e46:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8011e48:	4b1a      	ldr	r3, [pc, #104]	@ (8011eb4 <sys_check_timeouts+0x78>)
 8011e4a:	781b      	ldrb	r3, [r3, #0]
 8011e4c:	b2db      	uxtb	r3, r3
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d001      	beq.n	8011e56 <sys_check_timeouts+0x1a>
 8011e52:	f7f9 ff29 	bl	800bca8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8011e56:	4b18      	ldr	r3, [pc, #96]	@ (8011eb8 <sys_check_timeouts+0x7c>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d022      	beq.n	8011ea8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	68fa      	ldr	r2, [r7, #12]
 8011e68:	1ad3      	subs	r3, r2, r3
 8011e6a:	0fdb      	lsrs	r3, r3, #31
 8011e6c:	f003 0301 	and.w	r3, r3, #1
 8011e70:	b2db      	uxtb	r3, r3
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d11a      	bne.n	8011eac <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	4a0f      	ldr	r2, [pc, #60]	@ (8011eb8 <sys_check_timeouts+0x7c>)
 8011e7c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	689b      	ldr	r3, [r3, #8]
 8011e82:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	68db      	ldr	r3, [r3, #12]
 8011e88:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8011ebc <sys_check_timeouts+0x80>)
 8011e90:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011e92:	68b9      	ldr	r1, [r7, #8]
 8011e94:	2006      	movs	r0, #6
 8011e96:	f7f9 fbcb 	bl	800b630 <memp_free>
    if (handler != NULL) {
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d0d3      	beq.n	8011e48 <sys_check_timeouts+0xc>
      handler(arg);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	6838      	ldr	r0, [r7, #0]
 8011ea4:	4798      	blx	r3
  do {
 8011ea6:	e7cf      	b.n	8011e48 <sys_check_timeouts+0xc>
      return;
 8011ea8:	bf00      	nop
 8011eaa:	e000      	b.n	8011eae <sys_check_timeouts+0x72>
      return;
 8011eac:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011eae:	3710      	adds	r7, #16
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}
 8011eb4:	2000b269 	.word	0x2000b269
 8011eb8:	2000b2bc 	.word	0x2000b2bc
 8011ebc:	2000b2c0 	.word	0x2000b2c0

08011ec0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011ec4:	f002 ff98 	bl	8014df8 <rand>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	b29b      	uxth	r3, r3
 8011ecc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011ed0:	b29b      	uxth	r3, r3
 8011ed2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011ed6:	b29a      	uxth	r2, r3
 8011ed8:	4b01      	ldr	r3, [pc, #4]	@ (8011ee0 <udp_init+0x20>)
 8011eda:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011edc:	bf00      	nop
 8011ede:	bd80      	pop	{r7, pc}
 8011ee0:	200000c8 	.word	0x200000c8

08011ee4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011ee4:	b480      	push	{r7}
 8011ee6:	b083      	sub	sp, #12
 8011ee8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011eea:	2300      	movs	r3, #0
 8011eec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011eee:	4b17      	ldr	r3, [pc, #92]	@ (8011f4c <udp_new_port+0x68>)
 8011ef0:	881b      	ldrh	r3, [r3, #0]
 8011ef2:	1c5a      	adds	r2, r3, #1
 8011ef4:	b291      	uxth	r1, r2
 8011ef6:	4a15      	ldr	r2, [pc, #84]	@ (8011f4c <udp_new_port+0x68>)
 8011ef8:	8011      	strh	r1, [r2, #0]
 8011efa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011efe:	4293      	cmp	r3, r2
 8011f00:	d103      	bne.n	8011f0a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011f02:	4b12      	ldr	r3, [pc, #72]	@ (8011f4c <udp_new_port+0x68>)
 8011f04:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8011f08:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f0a:	4b11      	ldr	r3, [pc, #68]	@ (8011f50 <udp_new_port+0x6c>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	603b      	str	r3, [r7, #0]
 8011f10:	e011      	b.n	8011f36 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	8a5a      	ldrh	r2, [r3, #18]
 8011f16:	4b0d      	ldr	r3, [pc, #52]	@ (8011f4c <udp_new_port+0x68>)
 8011f18:	881b      	ldrh	r3, [r3, #0]
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	d108      	bne.n	8011f30 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011f1e:	88fb      	ldrh	r3, [r7, #6]
 8011f20:	3301      	adds	r3, #1
 8011f22:	80fb      	strh	r3, [r7, #6]
 8011f24:	88fb      	ldrh	r3, [r7, #6]
 8011f26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011f2a:	d3e0      	bcc.n	8011eee <udp_new_port+0xa>
        return 0;
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	e007      	b.n	8011f40 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	68db      	ldr	r3, [r3, #12]
 8011f34:	603b      	str	r3, [r7, #0]
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d1ea      	bne.n	8011f12 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011f3c:	4b03      	ldr	r3, [pc, #12]	@ (8011f4c <udp_new_port+0x68>)
 8011f3e:	881b      	ldrh	r3, [r3, #0]
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	370c      	adds	r7, #12
 8011f44:	46bd      	mov	sp, r7
 8011f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4a:	4770      	bx	lr
 8011f4c:	200000c8 	.word	0x200000c8
 8011f50:	2000b2c8 	.word	0x2000b2c8

08011f54 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b084      	sub	sp, #16
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	60f8      	str	r0, [r7, #12]
 8011f5c:	60b9      	str	r1, [r7, #8]
 8011f5e:	4613      	mov	r3, r2
 8011f60:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d105      	bne.n	8011f74 <udp_input_local_match+0x20>
 8011f68:	4b27      	ldr	r3, [pc, #156]	@ (8012008 <udp_input_local_match+0xb4>)
 8011f6a:	2287      	movs	r2, #135	@ 0x87
 8011f6c:	4927      	ldr	r1, [pc, #156]	@ (801200c <udp_input_local_match+0xb8>)
 8011f6e:	4828      	ldr	r0, [pc, #160]	@ (8012010 <udp_input_local_match+0xbc>)
 8011f70:	f003 f842 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d105      	bne.n	8011f86 <udp_input_local_match+0x32>
 8011f7a:	4b23      	ldr	r3, [pc, #140]	@ (8012008 <udp_input_local_match+0xb4>)
 8011f7c:	2288      	movs	r2, #136	@ 0x88
 8011f7e:	4925      	ldr	r1, [pc, #148]	@ (8012014 <udp_input_local_match+0xc0>)
 8011f80:	4823      	ldr	r0, [pc, #140]	@ (8012010 <udp_input_local_match+0xbc>)
 8011f82:	f003 f839 	bl	8014ff8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	7a1b      	ldrb	r3, [r3, #8]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d00b      	beq.n	8011fa6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	7a1a      	ldrb	r2, [r3, #8]
 8011f92:	4b21      	ldr	r3, [pc, #132]	@ (8012018 <udp_input_local_match+0xc4>)
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011f9a:	3301      	adds	r3, #1
 8011f9c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d001      	beq.n	8011fa6 <udp_input_local_match+0x52>
    return 0;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	e02b      	b.n	8011ffe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011fa6:	79fb      	ldrb	r3, [r7, #7]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d018      	beq.n	8011fde <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d013      	beq.n	8011fda <udp_input_local_match+0x86>
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d00f      	beq.n	8011fda <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011fba:	4b17      	ldr	r3, [pc, #92]	@ (8012018 <udp_input_local_match+0xc4>)
 8011fbc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011fc2:	d00a      	beq.n	8011fda <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	681a      	ldr	r2, [r3, #0]
 8011fc8:	4b13      	ldr	r3, [pc, #76]	@ (8012018 <udp_input_local_match+0xc4>)
 8011fca:	695b      	ldr	r3, [r3, #20]
 8011fcc:	405a      	eors	r2, r3
 8011fce:	68bb      	ldr	r3, [r7, #8]
 8011fd0:	3308      	adds	r3, #8
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d110      	bne.n	8011ffc <udp_input_local_match+0xa8>
          return 1;
 8011fda:	2301      	movs	r3, #1
 8011fdc:	e00f      	b.n	8011ffe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d009      	beq.n	8011ff8 <udp_input_local_match+0xa4>
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d005      	beq.n	8011ff8 <udp_input_local_match+0xa4>
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	4b09      	ldr	r3, [pc, #36]	@ (8012018 <udp_input_local_match+0xc4>)
 8011ff2:	695b      	ldr	r3, [r3, #20]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d101      	bne.n	8011ffc <udp_input_local_match+0xa8>
        return 1;
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	e000      	b.n	8011ffe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011ffc:	2300      	movs	r3, #0
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3710      	adds	r7, #16
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
 8012006:	bf00      	nop
 8012008:	08019020 	.word	0x08019020
 801200c:	08019050 	.word	0x08019050
 8012010:	08019074 	.word	0x08019074
 8012014:	0801909c 	.word	0x0801909c
 8012018:	20005b3c 	.word	0x20005b3c

0801201c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801201c:	b590      	push	{r4, r7, lr}
 801201e:	b08d      	sub	sp, #52	@ 0x34
 8012020:	af02      	add	r7, sp, #8
 8012022:	6078      	str	r0, [r7, #4]
 8012024:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012026:	2300      	movs	r3, #0
 8012028:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d105      	bne.n	801203c <udp_input+0x20>
 8012030:	4b7c      	ldr	r3, [pc, #496]	@ (8012224 <udp_input+0x208>)
 8012032:	22cf      	movs	r2, #207	@ 0xcf
 8012034:	497c      	ldr	r1, [pc, #496]	@ (8012228 <udp_input+0x20c>)
 8012036:	487d      	ldr	r0, [pc, #500]	@ (801222c <udp_input+0x210>)
 8012038:	f002 ffde 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d105      	bne.n	801204e <udp_input+0x32>
 8012042:	4b78      	ldr	r3, [pc, #480]	@ (8012224 <udp_input+0x208>)
 8012044:	22d0      	movs	r2, #208	@ 0xd0
 8012046:	497a      	ldr	r1, [pc, #488]	@ (8012230 <udp_input+0x214>)
 8012048:	4878      	ldr	r0, [pc, #480]	@ (801222c <udp_input+0x210>)
 801204a:	f002 ffd5 	bl	8014ff8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	895b      	ldrh	r3, [r3, #10]
 8012052:	2b07      	cmp	r3, #7
 8012054:	d803      	bhi.n	801205e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f7fa f960 	bl	800c31c <pbuf_free>
    goto end;
 801205c:	e0de      	b.n	801221c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	685b      	ldr	r3, [r3, #4]
 8012062:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012064:	4b73      	ldr	r3, [pc, #460]	@ (8012234 <udp_input+0x218>)
 8012066:	695b      	ldr	r3, [r3, #20]
 8012068:	4a72      	ldr	r2, [pc, #456]	@ (8012234 <udp_input+0x218>)
 801206a:	6812      	ldr	r2, [r2, #0]
 801206c:	4611      	mov	r1, r2
 801206e:	4618      	mov	r0, r3
 8012070:	f001 ff6c 	bl	8013f4c <ip4_addr_isbroadcast_u32>
 8012074:	4603      	mov	r3, r0
 8012076:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	881b      	ldrh	r3, [r3, #0]
 801207c:	b29b      	uxth	r3, r3
 801207e:	4618      	mov	r0, r3
 8012080:	f7f8 fdee 	bl	800ac60 <lwip_htons>
 8012084:	4603      	mov	r3, r0
 8012086:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	885b      	ldrh	r3, [r3, #2]
 801208c:	b29b      	uxth	r3, r3
 801208e:	4618      	mov	r0, r3
 8012090:	f7f8 fde6 	bl	800ac60 <lwip_htons>
 8012094:	4603      	mov	r3, r0
 8012096:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012098:	2300      	movs	r3, #0
 801209a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801209c:	2300      	movs	r3, #0
 801209e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80120a0:	2300      	movs	r3, #0
 80120a2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80120a4:	4b64      	ldr	r3, [pc, #400]	@ (8012238 <udp_input+0x21c>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80120aa:	e054      	b.n	8012156 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80120ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ae:	8a5b      	ldrh	r3, [r3, #18]
 80120b0:	89fa      	ldrh	r2, [r7, #14]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d14a      	bne.n	801214c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80120b6:	7cfb      	ldrb	r3, [r7, #19]
 80120b8:	461a      	mov	r2, r3
 80120ba:	6839      	ldr	r1, [r7, #0]
 80120bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80120be:	f7ff ff49 	bl	8011f54 <udp_input_local_match>
 80120c2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d041      	beq.n	801214c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80120c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ca:	7c1b      	ldrb	r3, [r3, #16]
 80120cc:	f003 0304 	and.w	r3, r3, #4
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d11d      	bne.n	8012110 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80120d4:	69fb      	ldr	r3, [r7, #28]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d102      	bne.n	80120e0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80120da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120dc:	61fb      	str	r3, [r7, #28]
 80120de:	e017      	b.n	8012110 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80120e0:	7cfb      	ldrb	r3, [r7, #19]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d014      	beq.n	8012110 <udp_input+0xf4>
 80120e6:	4b53      	ldr	r3, [pc, #332]	@ (8012234 <udp_input+0x218>)
 80120e8:	695b      	ldr	r3, [r3, #20]
 80120ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80120ee:	d10f      	bne.n	8012110 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80120f0:	69fb      	ldr	r3, [r7, #28]
 80120f2:	681a      	ldr	r2, [r3, #0]
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	3304      	adds	r3, #4
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d008      	beq.n	8012110 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80120fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012100:	681a      	ldr	r2, [r3, #0]
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	3304      	adds	r3, #4
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	429a      	cmp	r2, r3
 801210a:	d101      	bne.n	8012110 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801210e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012112:	8a9b      	ldrh	r3, [r3, #20]
 8012114:	8a3a      	ldrh	r2, [r7, #16]
 8012116:	429a      	cmp	r2, r3
 8012118:	d118      	bne.n	801214c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801211c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801211e:	2b00      	cmp	r3, #0
 8012120:	d005      	beq.n	801212e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012124:	685a      	ldr	r2, [r3, #4]
 8012126:	4b43      	ldr	r3, [pc, #268]	@ (8012234 <udp_input+0x218>)
 8012128:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801212a:	429a      	cmp	r2, r3
 801212c:	d10e      	bne.n	801214c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801212e:	6a3b      	ldr	r3, [r7, #32]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d014      	beq.n	801215e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012136:	68da      	ldr	r2, [r3, #12]
 8012138:	6a3b      	ldr	r3, [r7, #32]
 801213a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801213c:	4b3e      	ldr	r3, [pc, #248]	@ (8012238 <udp_input+0x21c>)
 801213e:	681a      	ldr	r2, [r3, #0]
 8012140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012142:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012144:	4a3c      	ldr	r2, [pc, #240]	@ (8012238 <udp_input+0x21c>)
 8012146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012148:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801214a:	e008      	b.n	801215e <udp_input+0x142>
      }
    }

    prev = pcb;
 801214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801214e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012152:	68db      	ldr	r3, [r3, #12]
 8012154:	627b      	str	r3, [r7, #36]	@ 0x24
 8012156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012158:	2b00      	cmp	r3, #0
 801215a:	d1a7      	bne.n	80120ac <udp_input+0x90>
 801215c:	e000      	b.n	8012160 <udp_input+0x144>
        break;
 801215e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012162:	2b00      	cmp	r3, #0
 8012164:	d101      	bne.n	801216a <udp_input+0x14e>
    pcb = uncon_pcb;
 8012166:	69fb      	ldr	r3, [r7, #28]
 8012168:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801216a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801216c:	2b00      	cmp	r3, #0
 801216e:	d002      	beq.n	8012176 <udp_input+0x15a>
    for_us = 1;
 8012170:	2301      	movs	r3, #1
 8012172:	76fb      	strb	r3, [r7, #27]
 8012174:	e00a      	b.n	801218c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	3304      	adds	r3, #4
 801217a:	681a      	ldr	r2, [r3, #0]
 801217c:	4b2d      	ldr	r3, [pc, #180]	@ (8012234 <udp_input+0x218>)
 801217e:	695b      	ldr	r3, [r3, #20]
 8012180:	429a      	cmp	r2, r3
 8012182:	bf0c      	ite	eq
 8012184:	2301      	moveq	r3, #1
 8012186:	2300      	movne	r3, #0
 8012188:	b2db      	uxtb	r3, r3
 801218a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801218c:	7efb      	ldrb	r3, [r7, #27]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d041      	beq.n	8012216 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012192:	2108      	movs	r1, #8
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f7fa f83b 	bl	800c210 <pbuf_remove_header>
 801219a:	4603      	mov	r3, r0
 801219c:	2b00      	cmp	r3, #0
 801219e:	d00a      	beq.n	80121b6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80121a0:	4b20      	ldr	r3, [pc, #128]	@ (8012224 <udp_input+0x208>)
 80121a2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80121a6:	4925      	ldr	r1, [pc, #148]	@ (801223c <udp_input+0x220>)
 80121a8:	4820      	ldr	r0, [pc, #128]	@ (801222c <udp_input+0x210>)
 80121aa:	f002 ff25 	bl	8014ff8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f7fa f8b4 	bl	800c31c <pbuf_free>
      goto end;
 80121b4:	e032      	b.n	801221c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80121b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d012      	beq.n	80121e2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80121bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121be:	699b      	ldr	r3, [r3, #24]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d00a      	beq.n	80121da <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80121c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c6:	699c      	ldr	r4, [r3, #24]
 80121c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ca:	69d8      	ldr	r0, [r3, #28]
 80121cc:	8a3b      	ldrh	r3, [r7, #16]
 80121ce:	9300      	str	r3, [sp, #0]
 80121d0:	4b1b      	ldr	r3, [pc, #108]	@ (8012240 <udp_input+0x224>)
 80121d2:	687a      	ldr	r2, [r7, #4]
 80121d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80121d6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80121d8:	e021      	b.n	801221e <udp_input+0x202>
        pbuf_free(p);
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f7fa f89e 	bl	800c31c <pbuf_free>
        goto end;
 80121e0:	e01c      	b.n	801221c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80121e2:	7cfb      	ldrb	r3, [r7, #19]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d112      	bne.n	801220e <udp_input+0x1f2>
 80121e8:	4b12      	ldr	r3, [pc, #72]	@ (8012234 <udp_input+0x218>)
 80121ea:	695b      	ldr	r3, [r3, #20]
 80121ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80121f0:	2be0      	cmp	r3, #224	@ 0xe0
 80121f2:	d00c      	beq.n	801220e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80121f4:	4b0f      	ldr	r3, [pc, #60]	@ (8012234 <udp_input+0x218>)
 80121f6:	899b      	ldrh	r3, [r3, #12]
 80121f8:	3308      	adds	r3, #8
 80121fa:	b29b      	uxth	r3, r3
 80121fc:	b21b      	sxth	r3, r3
 80121fe:	4619      	mov	r1, r3
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f7fa f878 	bl	800c2f6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012206:	2103      	movs	r1, #3
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f001 fb7f 	bl	801390c <icmp_dest_unreach>
      pbuf_free(p);
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f7fa f884 	bl	800c31c <pbuf_free>
  return;
 8012214:	e003      	b.n	801221e <udp_input+0x202>
    pbuf_free(p);
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f7fa f880 	bl	800c31c <pbuf_free>
  return;
 801221c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801221e:	372c      	adds	r7, #44	@ 0x2c
 8012220:	46bd      	mov	sp, r7
 8012222:	bd90      	pop	{r4, r7, pc}
 8012224:	08019020 	.word	0x08019020
 8012228:	080190c4 	.word	0x080190c4
 801222c:	08019074 	.word	0x08019074
 8012230:	080190dc 	.word	0x080190dc
 8012234:	20005b3c 	.word	0x20005b3c
 8012238:	2000b2c8 	.word	0x2000b2c8
 801223c:	080190f8 	.word	0x080190f8
 8012240:	20005b4c 	.word	0x20005b4c

08012244 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b088      	sub	sp, #32
 8012248:	af02      	add	r7, sp, #8
 801224a:	60f8      	str	r0, [r7, #12]
 801224c:	60b9      	str	r1, [r7, #8]
 801224e:	607a      	str	r2, [r7, #4]
 8012250:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d109      	bne.n	801226c <udp_sendto+0x28>
 8012258:	4b23      	ldr	r3, [pc, #140]	@ (80122e8 <udp_sendto+0xa4>)
 801225a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801225e:	4923      	ldr	r1, [pc, #140]	@ (80122ec <udp_sendto+0xa8>)
 8012260:	4823      	ldr	r0, [pc, #140]	@ (80122f0 <udp_sendto+0xac>)
 8012262:	f002 fec9 	bl	8014ff8 <iprintf>
 8012266:	f06f 030f 	mvn.w	r3, #15
 801226a:	e038      	b.n	80122de <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d109      	bne.n	8012286 <udp_sendto+0x42>
 8012272:	4b1d      	ldr	r3, [pc, #116]	@ (80122e8 <udp_sendto+0xa4>)
 8012274:	f240 2219 	movw	r2, #537	@ 0x219
 8012278:	491e      	ldr	r1, [pc, #120]	@ (80122f4 <udp_sendto+0xb0>)
 801227a:	481d      	ldr	r0, [pc, #116]	@ (80122f0 <udp_sendto+0xac>)
 801227c:	f002 febc 	bl	8014ff8 <iprintf>
 8012280:	f06f 030f 	mvn.w	r3, #15
 8012284:	e02b      	b.n	80122de <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d109      	bne.n	80122a0 <udp_sendto+0x5c>
 801228c:	4b16      	ldr	r3, [pc, #88]	@ (80122e8 <udp_sendto+0xa4>)
 801228e:	f240 221a 	movw	r2, #538	@ 0x21a
 8012292:	4919      	ldr	r1, [pc, #100]	@ (80122f8 <udp_sendto+0xb4>)
 8012294:	4816      	ldr	r0, [pc, #88]	@ (80122f0 <udp_sendto+0xac>)
 8012296:	f002 feaf 	bl	8014ff8 <iprintf>
 801229a:	f06f 030f 	mvn.w	r3, #15
 801229e:	e01e      	b.n	80122de <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	7a1b      	ldrb	r3, [r3, #8]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d006      	beq.n	80122b6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	7a1b      	ldrb	r3, [r3, #8]
 80122ac:	4618      	mov	r0, r3
 80122ae:	f7f9 fcd5 	bl	800bc5c <netif_get_by_index>
 80122b2:	6178      	str	r0, [r7, #20]
 80122b4:	e003      	b.n	80122be <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	f001 fbb2 	bl	8013a20 <ip4_route>
 80122bc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d102      	bne.n	80122ca <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80122c4:	f06f 0303 	mvn.w	r3, #3
 80122c8:	e009      	b.n	80122de <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80122ca:	887a      	ldrh	r2, [r7, #2]
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	9300      	str	r3, [sp, #0]
 80122d0:	4613      	mov	r3, r2
 80122d2:	687a      	ldr	r2, [r7, #4]
 80122d4:	68b9      	ldr	r1, [r7, #8]
 80122d6:	68f8      	ldr	r0, [r7, #12]
 80122d8:	f000 f810 	bl	80122fc <udp_sendto_if>
 80122dc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3718      	adds	r7, #24
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
 80122e6:	bf00      	nop
 80122e8:	08019020 	.word	0x08019020
 80122ec:	08019144 	.word	0x08019144
 80122f0:	08019074 	.word	0x08019074
 80122f4:	0801915c 	.word	0x0801915c
 80122f8:	08019178 	.word	0x08019178

080122fc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b088      	sub	sp, #32
 8012300:	af02      	add	r7, sp, #8
 8012302:	60f8      	str	r0, [r7, #12]
 8012304:	60b9      	str	r1, [r7, #8]
 8012306:	607a      	str	r2, [r7, #4]
 8012308:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d109      	bne.n	8012324 <udp_sendto_if+0x28>
 8012310:	4b2e      	ldr	r3, [pc, #184]	@ (80123cc <udp_sendto_if+0xd0>)
 8012312:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012316:	492e      	ldr	r1, [pc, #184]	@ (80123d0 <udp_sendto_if+0xd4>)
 8012318:	482e      	ldr	r0, [pc, #184]	@ (80123d4 <udp_sendto_if+0xd8>)
 801231a:	f002 fe6d 	bl	8014ff8 <iprintf>
 801231e:	f06f 030f 	mvn.w	r3, #15
 8012322:	e04f      	b.n	80123c4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d109      	bne.n	801233e <udp_sendto_if+0x42>
 801232a:	4b28      	ldr	r3, [pc, #160]	@ (80123cc <udp_sendto_if+0xd0>)
 801232c:	f240 2281 	movw	r2, #641	@ 0x281
 8012330:	4929      	ldr	r1, [pc, #164]	@ (80123d8 <udp_sendto_if+0xdc>)
 8012332:	4828      	ldr	r0, [pc, #160]	@ (80123d4 <udp_sendto_if+0xd8>)
 8012334:	f002 fe60 	bl	8014ff8 <iprintf>
 8012338:	f06f 030f 	mvn.w	r3, #15
 801233c:	e042      	b.n	80123c4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d109      	bne.n	8012358 <udp_sendto_if+0x5c>
 8012344:	4b21      	ldr	r3, [pc, #132]	@ (80123cc <udp_sendto_if+0xd0>)
 8012346:	f240 2282 	movw	r2, #642	@ 0x282
 801234a:	4924      	ldr	r1, [pc, #144]	@ (80123dc <udp_sendto_if+0xe0>)
 801234c:	4821      	ldr	r0, [pc, #132]	@ (80123d4 <udp_sendto_if+0xd8>)
 801234e:	f002 fe53 	bl	8014ff8 <iprintf>
 8012352:	f06f 030f 	mvn.w	r3, #15
 8012356:	e035      	b.n	80123c4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012358:	6a3b      	ldr	r3, [r7, #32]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d109      	bne.n	8012372 <udp_sendto_if+0x76>
 801235e:	4b1b      	ldr	r3, [pc, #108]	@ (80123cc <udp_sendto_if+0xd0>)
 8012360:	f240 2283 	movw	r2, #643	@ 0x283
 8012364:	491e      	ldr	r1, [pc, #120]	@ (80123e0 <udp_sendto_if+0xe4>)
 8012366:	481b      	ldr	r0, [pc, #108]	@ (80123d4 <udp_sendto_if+0xd8>)
 8012368:	f002 fe46 	bl	8014ff8 <iprintf>
 801236c:	f06f 030f 	mvn.w	r3, #15
 8012370:	e028      	b.n	80123c4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d009      	beq.n	801238c <udp_sendto_if+0x90>
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d005      	beq.n	801238c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012388:	2be0      	cmp	r3, #224	@ 0xe0
 801238a:	d103      	bne.n	8012394 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801238c:	6a3b      	ldr	r3, [r7, #32]
 801238e:	3304      	adds	r3, #4
 8012390:	617b      	str	r3, [r7, #20]
 8012392:	e00b      	b.n	80123ac <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	681a      	ldr	r2, [r3, #0]
 8012398:	6a3b      	ldr	r3, [r7, #32]
 801239a:	3304      	adds	r3, #4
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	429a      	cmp	r2, r3
 80123a0:	d002      	beq.n	80123a8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80123a2:	f06f 0303 	mvn.w	r3, #3
 80123a6:	e00d      	b.n	80123c4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80123ac:	887a      	ldrh	r2, [r7, #2]
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	9301      	str	r3, [sp, #4]
 80123b2:	6a3b      	ldr	r3, [r7, #32]
 80123b4:	9300      	str	r3, [sp, #0]
 80123b6:	4613      	mov	r3, r2
 80123b8:	687a      	ldr	r2, [r7, #4]
 80123ba:	68b9      	ldr	r1, [r7, #8]
 80123bc:	68f8      	ldr	r0, [r7, #12]
 80123be:	f000 f811 	bl	80123e4 <udp_sendto_if_src>
 80123c2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80123c4:	4618      	mov	r0, r3
 80123c6:	3718      	adds	r7, #24
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}
 80123cc:	08019020 	.word	0x08019020
 80123d0:	08019194 	.word	0x08019194
 80123d4:	08019074 	.word	0x08019074
 80123d8:	080191b0 	.word	0x080191b0
 80123dc:	080191cc 	.word	0x080191cc
 80123e0:	080191ec 	.word	0x080191ec

080123e4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b08c      	sub	sp, #48	@ 0x30
 80123e8:	af04      	add	r7, sp, #16
 80123ea:	60f8      	str	r0, [r7, #12]
 80123ec:	60b9      	str	r1, [r7, #8]
 80123ee:	607a      	str	r2, [r7, #4]
 80123f0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d109      	bne.n	801240c <udp_sendto_if_src+0x28>
 80123f8:	4b65      	ldr	r3, [pc, #404]	@ (8012590 <udp_sendto_if_src+0x1ac>)
 80123fa:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80123fe:	4965      	ldr	r1, [pc, #404]	@ (8012594 <udp_sendto_if_src+0x1b0>)
 8012400:	4865      	ldr	r0, [pc, #404]	@ (8012598 <udp_sendto_if_src+0x1b4>)
 8012402:	f002 fdf9 	bl	8014ff8 <iprintf>
 8012406:	f06f 030f 	mvn.w	r3, #15
 801240a:	e0bc      	b.n	8012586 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801240c:	68bb      	ldr	r3, [r7, #8]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d109      	bne.n	8012426 <udp_sendto_if_src+0x42>
 8012412:	4b5f      	ldr	r3, [pc, #380]	@ (8012590 <udp_sendto_if_src+0x1ac>)
 8012414:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8012418:	4960      	ldr	r1, [pc, #384]	@ (801259c <udp_sendto_if_src+0x1b8>)
 801241a:	485f      	ldr	r0, [pc, #380]	@ (8012598 <udp_sendto_if_src+0x1b4>)
 801241c:	f002 fdec 	bl	8014ff8 <iprintf>
 8012420:	f06f 030f 	mvn.w	r3, #15
 8012424:	e0af      	b.n	8012586 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d109      	bne.n	8012440 <udp_sendto_if_src+0x5c>
 801242c:	4b58      	ldr	r3, [pc, #352]	@ (8012590 <udp_sendto_if_src+0x1ac>)
 801242e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8012432:	495b      	ldr	r1, [pc, #364]	@ (80125a0 <udp_sendto_if_src+0x1bc>)
 8012434:	4858      	ldr	r0, [pc, #352]	@ (8012598 <udp_sendto_if_src+0x1b4>)
 8012436:	f002 fddf 	bl	8014ff8 <iprintf>
 801243a:	f06f 030f 	mvn.w	r3, #15
 801243e:	e0a2      	b.n	8012586 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012442:	2b00      	cmp	r3, #0
 8012444:	d109      	bne.n	801245a <udp_sendto_if_src+0x76>
 8012446:	4b52      	ldr	r3, [pc, #328]	@ (8012590 <udp_sendto_if_src+0x1ac>)
 8012448:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801244c:	4955      	ldr	r1, [pc, #340]	@ (80125a4 <udp_sendto_if_src+0x1c0>)
 801244e:	4852      	ldr	r0, [pc, #328]	@ (8012598 <udp_sendto_if_src+0x1b4>)
 8012450:	f002 fdd2 	bl	8014ff8 <iprintf>
 8012454:	f06f 030f 	mvn.w	r3, #15
 8012458:	e095      	b.n	8012586 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801245a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801245c:	2b00      	cmp	r3, #0
 801245e:	d109      	bne.n	8012474 <udp_sendto_if_src+0x90>
 8012460:	4b4b      	ldr	r3, [pc, #300]	@ (8012590 <udp_sendto_if_src+0x1ac>)
 8012462:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8012466:	4950      	ldr	r1, [pc, #320]	@ (80125a8 <udp_sendto_if_src+0x1c4>)
 8012468:	484b      	ldr	r0, [pc, #300]	@ (8012598 <udp_sendto_if_src+0x1b4>)
 801246a:	f002 fdc5 	bl	8014ff8 <iprintf>
 801246e:	f06f 030f 	mvn.w	r3, #15
 8012472:	e088      	b.n	8012586 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	8a5b      	ldrh	r3, [r3, #18]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d10f      	bne.n	801249c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801247c:	68f9      	ldr	r1, [r7, #12]
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	8a5b      	ldrh	r3, [r3, #18]
 8012482:	461a      	mov	r2, r3
 8012484:	68f8      	ldr	r0, [r7, #12]
 8012486:	f000 f893 	bl	80125b0 <udp_bind>
 801248a:	4603      	mov	r3, r0
 801248c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801248e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d002      	beq.n	801249c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012496:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801249a:	e074      	b.n	8012586 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	891b      	ldrh	r3, [r3, #8]
 80124a0:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80124a4:	4293      	cmp	r3, r2
 80124a6:	d902      	bls.n	80124ae <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80124a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80124ac:	e06b      	b.n	8012586 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80124ae:	2108      	movs	r1, #8
 80124b0:	68b8      	ldr	r0, [r7, #8]
 80124b2:	f7f9 fe9d 	bl	800c1f0 <pbuf_add_header>
 80124b6:	4603      	mov	r3, r0
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d015      	beq.n	80124e8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80124bc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80124c0:	2108      	movs	r1, #8
 80124c2:	2022      	movs	r0, #34	@ 0x22
 80124c4:	f7f9 fc46 	bl	800bd54 <pbuf_alloc>
 80124c8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80124ca:	69fb      	ldr	r3, [r7, #28]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d102      	bne.n	80124d6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80124d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80124d4:	e057      	b.n	8012586 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	891b      	ldrh	r3, [r3, #8]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d006      	beq.n	80124ec <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80124de:	68b9      	ldr	r1, [r7, #8]
 80124e0:	69f8      	ldr	r0, [r7, #28]
 80124e2:	f7fa f833 	bl	800c54c <pbuf_chain>
 80124e6:	e001      	b.n	80124ec <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80124ec:	69fb      	ldr	r3, [r7, #28]
 80124ee:	895b      	ldrh	r3, [r3, #10]
 80124f0:	2b07      	cmp	r3, #7
 80124f2:	d806      	bhi.n	8012502 <udp_sendto_if_src+0x11e>
 80124f4:	4b26      	ldr	r3, [pc, #152]	@ (8012590 <udp_sendto_if_src+0x1ac>)
 80124f6:	f240 320d 	movw	r2, #781	@ 0x30d
 80124fa:	492c      	ldr	r1, [pc, #176]	@ (80125ac <udp_sendto_if_src+0x1c8>)
 80124fc:	4826      	ldr	r0, [pc, #152]	@ (8012598 <udp_sendto_if_src+0x1b4>)
 80124fe:	f002 fd7b 	bl	8014ff8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012502:	69fb      	ldr	r3, [r7, #28]
 8012504:	685b      	ldr	r3, [r3, #4]
 8012506:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	8a5b      	ldrh	r3, [r3, #18]
 801250c:	4618      	mov	r0, r3
 801250e:	f7f8 fba7 	bl	800ac60 <lwip_htons>
 8012512:	4603      	mov	r3, r0
 8012514:	461a      	mov	r2, r3
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801251a:	887b      	ldrh	r3, [r7, #2]
 801251c:	4618      	mov	r0, r3
 801251e:	f7f8 fb9f 	bl	800ac60 <lwip_htons>
 8012522:	4603      	mov	r3, r0
 8012524:	461a      	mov	r2, r3
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801252a:	697b      	ldr	r3, [r7, #20]
 801252c:	2200      	movs	r2, #0
 801252e:	719a      	strb	r2, [r3, #6]
 8012530:	2200      	movs	r2, #0
 8012532:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012534:	69fb      	ldr	r3, [r7, #28]
 8012536:	891b      	ldrh	r3, [r3, #8]
 8012538:	4618      	mov	r0, r3
 801253a:	f7f8 fb91 	bl	800ac60 <lwip_htons>
 801253e:	4603      	mov	r3, r0
 8012540:	461a      	mov	r2, r3
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8012546:	2311      	movs	r3, #17
 8012548:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	7adb      	ldrb	r3, [r3, #11]
 801254e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	7a9b      	ldrb	r3, [r3, #10]
 8012554:	7cb9      	ldrb	r1, [r7, #18]
 8012556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012558:	9202      	str	r2, [sp, #8]
 801255a:	7cfa      	ldrb	r2, [r7, #19]
 801255c:	9201      	str	r2, [sp, #4]
 801255e:	9300      	str	r3, [sp, #0]
 8012560:	460b      	mov	r3, r1
 8012562:	687a      	ldr	r2, [r7, #4]
 8012564:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012566:	69f8      	ldr	r0, [r7, #28]
 8012568:	f001 fc42 	bl	8013df0 <ip4_output_if_src>
 801256c:	4603      	mov	r3, r0
 801256e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012570:	69fa      	ldr	r2, [r7, #28]
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	429a      	cmp	r2, r3
 8012576:	d004      	beq.n	8012582 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8012578:	69f8      	ldr	r0, [r7, #28]
 801257a:	f7f9 fecf 	bl	800c31c <pbuf_free>
    q = NULL;
 801257e:	2300      	movs	r3, #0
 8012580:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012582:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8012586:	4618      	mov	r0, r3
 8012588:	3720      	adds	r7, #32
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
 801258e:	bf00      	nop
 8012590:	08019020 	.word	0x08019020
 8012594:	0801920c 	.word	0x0801920c
 8012598:	08019074 	.word	0x08019074
 801259c:	0801922c 	.word	0x0801922c
 80125a0:	0801924c 	.word	0x0801924c
 80125a4:	08019270 	.word	0x08019270
 80125a8:	08019294 	.word	0x08019294
 80125ac:	080192b8 	.word	0x080192b8

080125b0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b086      	sub	sp, #24
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	60f8      	str	r0, [r7, #12]
 80125b8:	60b9      	str	r1, [r7, #8]
 80125ba:	4613      	mov	r3, r2
 80125bc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d101      	bne.n	80125c8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80125c4:	4b39      	ldr	r3, [pc, #228]	@ (80126ac <udp_bind+0xfc>)
 80125c6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d109      	bne.n	80125e2 <udp_bind+0x32>
 80125ce:	4b38      	ldr	r3, [pc, #224]	@ (80126b0 <udp_bind+0x100>)
 80125d0:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80125d4:	4937      	ldr	r1, [pc, #220]	@ (80126b4 <udp_bind+0x104>)
 80125d6:	4838      	ldr	r0, [pc, #224]	@ (80126b8 <udp_bind+0x108>)
 80125d8:	f002 fd0e 	bl	8014ff8 <iprintf>
 80125dc:	f06f 030f 	mvn.w	r3, #15
 80125e0:	e060      	b.n	80126a4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80125e2:	2300      	movs	r3, #0
 80125e4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80125e6:	4b35      	ldr	r3, [pc, #212]	@ (80126bc <udp_bind+0x10c>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	617b      	str	r3, [r7, #20]
 80125ec:	e009      	b.n	8012602 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80125ee:	68fa      	ldr	r2, [r7, #12]
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d102      	bne.n	80125fc <udp_bind+0x4c>
      rebind = 1;
 80125f6:	2301      	movs	r3, #1
 80125f8:	74fb      	strb	r3, [r7, #19]
      break;
 80125fa:	e005      	b.n	8012608 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	68db      	ldr	r3, [r3, #12]
 8012600:	617b      	str	r3, [r7, #20]
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d1f2      	bne.n	80125ee <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012608:	88fb      	ldrh	r3, [r7, #6]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d109      	bne.n	8012622 <udp_bind+0x72>
    port = udp_new_port();
 801260e:	f7ff fc69 	bl	8011ee4 <udp_new_port>
 8012612:	4603      	mov	r3, r0
 8012614:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012616:	88fb      	ldrh	r3, [r7, #6]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d12c      	bne.n	8012676 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801261c:	f06f 0307 	mvn.w	r3, #7
 8012620:	e040      	b.n	80126a4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012622:	4b26      	ldr	r3, [pc, #152]	@ (80126bc <udp_bind+0x10c>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	617b      	str	r3, [r7, #20]
 8012628:	e022      	b.n	8012670 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801262a:	68fa      	ldr	r2, [r7, #12]
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	429a      	cmp	r2, r3
 8012630:	d01b      	beq.n	801266a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	8a5b      	ldrh	r3, [r3, #18]
 8012636:	88fa      	ldrh	r2, [r7, #6]
 8012638:	429a      	cmp	r2, r3
 801263a:	d116      	bne.n	801266a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	681a      	ldr	r2, [r3, #0]
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012644:	429a      	cmp	r2, r3
 8012646:	d00d      	beq.n	8012664 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d00a      	beq.n	8012664 <udp_bind+0xb4>
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d006      	beq.n	8012664 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012656:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012658:	2b00      	cmp	r3, #0
 801265a:	d003      	beq.n	8012664 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d102      	bne.n	801266a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012664:	f06f 0307 	mvn.w	r3, #7
 8012668:	e01c      	b.n	80126a4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	68db      	ldr	r3, [r3, #12]
 801266e:	617b      	str	r3, [r7, #20]
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d1d9      	bne.n	801262a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d002      	beq.n	8012682 <udp_bind+0xd2>
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	e000      	b.n	8012684 <udp_bind+0xd4>
 8012682:	2300      	movs	r3, #0
 8012684:	68fa      	ldr	r2, [r7, #12]
 8012686:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	88fa      	ldrh	r2, [r7, #6]
 801268c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801268e:	7cfb      	ldrb	r3, [r7, #19]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d106      	bne.n	80126a2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012694:	4b09      	ldr	r3, [pc, #36]	@ (80126bc <udp_bind+0x10c>)
 8012696:	681a      	ldr	r2, [r3, #0]
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801269c:	4a07      	ldr	r2, [pc, #28]	@ (80126bc <udp_bind+0x10c>)
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80126a2:	2300      	movs	r3, #0
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	3718      	adds	r7, #24
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}
 80126ac:	08019b44 	.word	0x08019b44
 80126b0:	08019020 	.word	0x08019020
 80126b4:	080192e8 	.word	0x080192e8
 80126b8:	08019074 	.word	0x08019074
 80126bc:	2000b2c8 	.word	0x2000b2c8

080126c0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b086      	sub	sp, #24
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	60f8      	str	r0, [r7, #12]
 80126c8:	60b9      	str	r1, [r7, #8]
 80126ca:	4613      	mov	r3, r2
 80126cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d109      	bne.n	80126e8 <udp_connect+0x28>
 80126d4:	4b2c      	ldr	r3, [pc, #176]	@ (8012788 <udp_connect+0xc8>)
 80126d6:	f240 4235 	movw	r2, #1077	@ 0x435
 80126da:	492c      	ldr	r1, [pc, #176]	@ (801278c <udp_connect+0xcc>)
 80126dc:	482c      	ldr	r0, [pc, #176]	@ (8012790 <udp_connect+0xd0>)
 80126de:	f002 fc8b 	bl	8014ff8 <iprintf>
 80126e2:	f06f 030f 	mvn.w	r3, #15
 80126e6:	e04b      	b.n	8012780 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80126e8:	68bb      	ldr	r3, [r7, #8]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d109      	bne.n	8012702 <udp_connect+0x42>
 80126ee:	4b26      	ldr	r3, [pc, #152]	@ (8012788 <udp_connect+0xc8>)
 80126f0:	f240 4236 	movw	r2, #1078	@ 0x436
 80126f4:	4927      	ldr	r1, [pc, #156]	@ (8012794 <udp_connect+0xd4>)
 80126f6:	4826      	ldr	r0, [pc, #152]	@ (8012790 <udp_connect+0xd0>)
 80126f8:	f002 fc7e 	bl	8014ff8 <iprintf>
 80126fc:	f06f 030f 	mvn.w	r3, #15
 8012700:	e03e      	b.n	8012780 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	8a5b      	ldrh	r3, [r3, #18]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d10f      	bne.n	801272a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801270a:	68f9      	ldr	r1, [r7, #12]
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	8a5b      	ldrh	r3, [r3, #18]
 8012710:	461a      	mov	r2, r3
 8012712:	68f8      	ldr	r0, [r7, #12]
 8012714:	f7ff ff4c 	bl	80125b0 <udp_bind>
 8012718:	4603      	mov	r3, r0
 801271a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801271c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d002      	beq.n	801272a <udp_connect+0x6a>
      return err;
 8012724:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012728:	e02a      	b.n	8012780 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d002      	beq.n	8012736 <udp_connect+0x76>
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	e000      	b.n	8012738 <udp_connect+0x78>
 8012736:	2300      	movs	r3, #0
 8012738:	68fa      	ldr	r2, [r7, #12]
 801273a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	88fa      	ldrh	r2, [r7, #6]
 8012740:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	7c1b      	ldrb	r3, [r3, #16]
 8012746:	f043 0304 	orr.w	r3, r3, #4
 801274a:	b2da      	uxtb	r2, r3
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012750:	4b11      	ldr	r3, [pc, #68]	@ (8012798 <udp_connect+0xd8>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	617b      	str	r3, [r7, #20]
 8012756:	e008      	b.n	801276a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8012758:	68fa      	ldr	r2, [r7, #12]
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	429a      	cmp	r2, r3
 801275e:	d101      	bne.n	8012764 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012760:	2300      	movs	r3, #0
 8012762:	e00d      	b.n	8012780 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	68db      	ldr	r3, [r3, #12]
 8012768:	617b      	str	r3, [r7, #20]
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d1f3      	bne.n	8012758 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012770:	4b09      	ldr	r3, [pc, #36]	@ (8012798 <udp_connect+0xd8>)
 8012772:	681a      	ldr	r2, [r3, #0]
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012778:	4a07      	ldr	r2, [pc, #28]	@ (8012798 <udp_connect+0xd8>)
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801277e:	2300      	movs	r3, #0
}
 8012780:	4618      	mov	r0, r3
 8012782:	3718      	adds	r7, #24
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}
 8012788:	08019020 	.word	0x08019020
 801278c:	08019300 	.word	0x08019300
 8012790:	08019074 	.word	0x08019074
 8012794:	0801931c 	.word	0x0801931c
 8012798:	2000b2c8 	.word	0x2000b2c8

0801279c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b084      	sub	sp, #16
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	60f8      	str	r0, [r7, #12]
 80127a4:	60b9      	str	r1, [r7, #8]
 80127a6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d107      	bne.n	80127be <udp_recv+0x22>
 80127ae:	4b08      	ldr	r3, [pc, #32]	@ (80127d0 <udp_recv+0x34>)
 80127b0:	f240 428a 	movw	r2, #1162	@ 0x48a
 80127b4:	4907      	ldr	r1, [pc, #28]	@ (80127d4 <udp_recv+0x38>)
 80127b6:	4808      	ldr	r0, [pc, #32]	@ (80127d8 <udp_recv+0x3c>)
 80127b8:	f002 fc1e 	bl	8014ff8 <iprintf>
 80127bc:	e005      	b.n	80127ca <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	68ba      	ldr	r2, [r7, #8]
 80127c2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	687a      	ldr	r2, [r7, #4]
 80127c8:	61da      	str	r2, [r3, #28]
}
 80127ca:	3710      	adds	r7, #16
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}
 80127d0:	08019020 	.word	0x08019020
 80127d4:	08019354 	.word	0x08019354
 80127d8:	08019074 	.word	0x08019074

080127dc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b082      	sub	sp, #8
 80127e0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80127e2:	2000      	movs	r0, #0
 80127e4:	f7f8 feb4 	bl	800b550 <memp_malloc>
 80127e8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d007      	beq.n	8012800 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80127f0:	2220      	movs	r2, #32
 80127f2:	2100      	movs	r1, #0
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f002 fc64 	bl	80150c2 <memset>
    pcb->ttl = UDP_TTL;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	22ff      	movs	r2, #255	@ 0xff
 80127fe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012800:	687b      	ldr	r3, [r7, #4]
}
 8012802:	4618      	mov	r0, r3
 8012804:	3708      	adds	r7, #8
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}
	...

0801280c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801280c:	b480      	push	{r7}
 801280e:	b085      	sub	sp, #20
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d01e      	beq.n	801285a <udp_netif_ip_addr_changed+0x4e>
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d01a      	beq.n	801285a <udp_netif_ip_addr_changed+0x4e>
 8012824:	683b      	ldr	r3, [r7, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d017      	beq.n	801285a <udp_netif_ip_addr_changed+0x4e>
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d013      	beq.n	801285a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012832:	4b0d      	ldr	r3, [pc, #52]	@ (8012868 <udp_netif_ip_addr_changed+0x5c>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	60fb      	str	r3, [r7, #12]
 8012838:	e00c      	b.n	8012854 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	681a      	ldr	r2, [r3, #0]
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	429a      	cmp	r2, r3
 8012844:	d103      	bne.n	801284e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	681a      	ldr	r2, [r3, #0]
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	68db      	ldr	r3, [r3, #12]
 8012852:	60fb      	str	r3, [r7, #12]
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d1ef      	bne.n	801283a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801285a:	bf00      	nop
 801285c:	3714      	adds	r7, #20
 801285e:	46bd      	mov	sp, r7
 8012860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012864:	4770      	bx	lr
 8012866:	bf00      	nop
 8012868:	2000b2c8 	.word	0x2000b2c8

0801286c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012874:	4915      	ldr	r1, [pc, #84]	@ (80128cc <etharp_free_entry+0x60>)
 8012876:	687a      	ldr	r2, [r7, #4]
 8012878:	4613      	mov	r3, r2
 801287a:	005b      	lsls	r3, r3, #1
 801287c:	4413      	add	r3, r2
 801287e:	00db      	lsls	r3, r3, #3
 8012880:	440b      	add	r3, r1
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d013      	beq.n	80128b0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012888:	4910      	ldr	r1, [pc, #64]	@ (80128cc <etharp_free_entry+0x60>)
 801288a:	687a      	ldr	r2, [r7, #4]
 801288c:	4613      	mov	r3, r2
 801288e:	005b      	lsls	r3, r3, #1
 8012890:	4413      	add	r3, r2
 8012892:	00db      	lsls	r3, r3, #3
 8012894:	440b      	add	r3, r1
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	4618      	mov	r0, r3
 801289a:	f7f9 fd3f 	bl	800c31c <pbuf_free>
    arp_table[i].q = NULL;
 801289e:	490b      	ldr	r1, [pc, #44]	@ (80128cc <etharp_free_entry+0x60>)
 80128a0:	687a      	ldr	r2, [r7, #4]
 80128a2:	4613      	mov	r3, r2
 80128a4:	005b      	lsls	r3, r3, #1
 80128a6:	4413      	add	r3, r2
 80128a8:	00db      	lsls	r3, r3, #3
 80128aa:	440b      	add	r3, r1
 80128ac:	2200      	movs	r2, #0
 80128ae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80128b0:	4906      	ldr	r1, [pc, #24]	@ (80128cc <etharp_free_entry+0x60>)
 80128b2:	687a      	ldr	r2, [r7, #4]
 80128b4:	4613      	mov	r3, r2
 80128b6:	005b      	lsls	r3, r3, #1
 80128b8:	4413      	add	r3, r2
 80128ba:	00db      	lsls	r3, r3, #3
 80128bc:	440b      	add	r3, r1
 80128be:	3314      	adds	r3, #20
 80128c0:	2200      	movs	r2, #0
 80128c2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80128c4:	bf00      	nop
 80128c6:	3708      	adds	r7, #8
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}
 80128cc:	2000b2cc 	.word	0x2000b2cc

080128d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80128d6:	2300      	movs	r3, #0
 80128d8:	607b      	str	r3, [r7, #4]
 80128da:	e096      	b.n	8012a0a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80128dc:	494f      	ldr	r1, [pc, #316]	@ (8012a1c <etharp_tmr+0x14c>)
 80128de:	687a      	ldr	r2, [r7, #4]
 80128e0:	4613      	mov	r3, r2
 80128e2:	005b      	lsls	r3, r3, #1
 80128e4:	4413      	add	r3, r2
 80128e6:	00db      	lsls	r3, r3, #3
 80128e8:	440b      	add	r3, r1
 80128ea:	3314      	adds	r3, #20
 80128ec:	781b      	ldrb	r3, [r3, #0]
 80128ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80128f0:	78fb      	ldrb	r3, [r7, #3]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	f000 8086 	beq.w	8012a04 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80128f8:	4948      	ldr	r1, [pc, #288]	@ (8012a1c <etharp_tmr+0x14c>)
 80128fa:	687a      	ldr	r2, [r7, #4]
 80128fc:	4613      	mov	r3, r2
 80128fe:	005b      	lsls	r3, r3, #1
 8012900:	4413      	add	r3, r2
 8012902:	00db      	lsls	r3, r3, #3
 8012904:	440b      	add	r3, r1
 8012906:	3312      	adds	r3, #18
 8012908:	881b      	ldrh	r3, [r3, #0]
 801290a:	3301      	adds	r3, #1
 801290c:	b298      	uxth	r0, r3
 801290e:	4943      	ldr	r1, [pc, #268]	@ (8012a1c <etharp_tmr+0x14c>)
 8012910:	687a      	ldr	r2, [r7, #4]
 8012912:	4613      	mov	r3, r2
 8012914:	005b      	lsls	r3, r3, #1
 8012916:	4413      	add	r3, r2
 8012918:	00db      	lsls	r3, r3, #3
 801291a:	440b      	add	r3, r1
 801291c:	3312      	adds	r3, #18
 801291e:	4602      	mov	r2, r0
 8012920:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012922:	493e      	ldr	r1, [pc, #248]	@ (8012a1c <etharp_tmr+0x14c>)
 8012924:	687a      	ldr	r2, [r7, #4]
 8012926:	4613      	mov	r3, r2
 8012928:	005b      	lsls	r3, r3, #1
 801292a:	4413      	add	r3, r2
 801292c:	00db      	lsls	r3, r3, #3
 801292e:	440b      	add	r3, r1
 8012930:	3312      	adds	r3, #18
 8012932:	881b      	ldrh	r3, [r3, #0]
 8012934:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8012938:	d215      	bcs.n	8012966 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801293a:	4938      	ldr	r1, [pc, #224]	@ (8012a1c <etharp_tmr+0x14c>)
 801293c:	687a      	ldr	r2, [r7, #4]
 801293e:	4613      	mov	r3, r2
 8012940:	005b      	lsls	r3, r3, #1
 8012942:	4413      	add	r3, r2
 8012944:	00db      	lsls	r3, r3, #3
 8012946:	440b      	add	r3, r1
 8012948:	3314      	adds	r3, #20
 801294a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801294c:	2b01      	cmp	r3, #1
 801294e:	d10e      	bne.n	801296e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012950:	4932      	ldr	r1, [pc, #200]	@ (8012a1c <etharp_tmr+0x14c>)
 8012952:	687a      	ldr	r2, [r7, #4]
 8012954:	4613      	mov	r3, r2
 8012956:	005b      	lsls	r3, r3, #1
 8012958:	4413      	add	r3, r2
 801295a:	00db      	lsls	r3, r3, #3
 801295c:	440b      	add	r3, r1
 801295e:	3312      	adds	r3, #18
 8012960:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012962:	2b04      	cmp	r3, #4
 8012964:	d903      	bls.n	801296e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012966:	6878      	ldr	r0, [r7, #4]
 8012968:	f7ff ff80 	bl	801286c <etharp_free_entry>
 801296c:	e04a      	b.n	8012a04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801296e:	492b      	ldr	r1, [pc, #172]	@ (8012a1c <etharp_tmr+0x14c>)
 8012970:	687a      	ldr	r2, [r7, #4]
 8012972:	4613      	mov	r3, r2
 8012974:	005b      	lsls	r3, r3, #1
 8012976:	4413      	add	r3, r2
 8012978:	00db      	lsls	r3, r3, #3
 801297a:	440b      	add	r3, r1
 801297c:	3314      	adds	r3, #20
 801297e:	781b      	ldrb	r3, [r3, #0]
 8012980:	2b03      	cmp	r3, #3
 8012982:	d10a      	bne.n	801299a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012984:	4925      	ldr	r1, [pc, #148]	@ (8012a1c <etharp_tmr+0x14c>)
 8012986:	687a      	ldr	r2, [r7, #4]
 8012988:	4613      	mov	r3, r2
 801298a:	005b      	lsls	r3, r3, #1
 801298c:	4413      	add	r3, r2
 801298e:	00db      	lsls	r3, r3, #3
 8012990:	440b      	add	r3, r1
 8012992:	3314      	adds	r3, #20
 8012994:	2204      	movs	r2, #4
 8012996:	701a      	strb	r2, [r3, #0]
 8012998:	e034      	b.n	8012a04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801299a:	4920      	ldr	r1, [pc, #128]	@ (8012a1c <etharp_tmr+0x14c>)
 801299c:	687a      	ldr	r2, [r7, #4]
 801299e:	4613      	mov	r3, r2
 80129a0:	005b      	lsls	r3, r3, #1
 80129a2:	4413      	add	r3, r2
 80129a4:	00db      	lsls	r3, r3, #3
 80129a6:	440b      	add	r3, r1
 80129a8:	3314      	adds	r3, #20
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	2b04      	cmp	r3, #4
 80129ae:	d10a      	bne.n	80129c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80129b0:	491a      	ldr	r1, [pc, #104]	@ (8012a1c <etharp_tmr+0x14c>)
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	4613      	mov	r3, r2
 80129b6:	005b      	lsls	r3, r3, #1
 80129b8:	4413      	add	r3, r2
 80129ba:	00db      	lsls	r3, r3, #3
 80129bc:	440b      	add	r3, r1
 80129be:	3314      	adds	r3, #20
 80129c0:	2202      	movs	r2, #2
 80129c2:	701a      	strb	r2, [r3, #0]
 80129c4:	e01e      	b.n	8012a04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80129c6:	4915      	ldr	r1, [pc, #84]	@ (8012a1c <etharp_tmr+0x14c>)
 80129c8:	687a      	ldr	r2, [r7, #4]
 80129ca:	4613      	mov	r3, r2
 80129cc:	005b      	lsls	r3, r3, #1
 80129ce:	4413      	add	r3, r2
 80129d0:	00db      	lsls	r3, r3, #3
 80129d2:	440b      	add	r3, r1
 80129d4:	3314      	adds	r3, #20
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	2b01      	cmp	r3, #1
 80129da:	d113      	bne.n	8012a04 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80129dc:	490f      	ldr	r1, [pc, #60]	@ (8012a1c <etharp_tmr+0x14c>)
 80129de:	687a      	ldr	r2, [r7, #4]
 80129e0:	4613      	mov	r3, r2
 80129e2:	005b      	lsls	r3, r3, #1
 80129e4:	4413      	add	r3, r2
 80129e6:	00db      	lsls	r3, r3, #3
 80129e8:	440b      	add	r3, r1
 80129ea:	3308      	adds	r3, #8
 80129ec:	6818      	ldr	r0, [r3, #0]
 80129ee:	687a      	ldr	r2, [r7, #4]
 80129f0:	4613      	mov	r3, r2
 80129f2:	005b      	lsls	r3, r3, #1
 80129f4:	4413      	add	r3, r2
 80129f6:	00db      	lsls	r3, r3, #3
 80129f8:	4a08      	ldr	r2, [pc, #32]	@ (8012a1c <etharp_tmr+0x14c>)
 80129fa:	4413      	add	r3, r2
 80129fc:	3304      	adds	r3, #4
 80129fe:	4619      	mov	r1, r3
 8012a00:	f000 fe6e 	bl	80136e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	3301      	adds	r3, #1
 8012a08:	607b      	str	r3, [r7, #4]
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2b09      	cmp	r3, #9
 8012a0e:	f77f af65 	ble.w	80128dc <etharp_tmr+0xc>
      }
    }
  }
}
 8012a12:	bf00      	nop
 8012a14:	bf00      	nop
 8012a16:	3708      	adds	r7, #8
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}
 8012a1c:	2000b2cc 	.word	0x2000b2cc

08012a20 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b08a      	sub	sp, #40	@ 0x28
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	60f8      	str	r0, [r7, #12]
 8012a28:	460b      	mov	r3, r1
 8012a2a:	607a      	str	r2, [r7, #4]
 8012a2c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012a2e:	230a      	movs	r3, #10
 8012a30:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012a32:	230a      	movs	r3, #10
 8012a34:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012a36:	230a      	movs	r3, #10
 8012a38:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012a3e:	230a      	movs	r3, #10
 8012a40:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012a42:	2300      	movs	r3, #0
 8012a44:	83bb      	strh	r3, [r7, #28]
 8012a46:	2300      	movs	r3, #0
 8012a48:	837b      	strh	r3, [r7, #26]
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a4e:	2300      	movs	r3, #0
 8012a50:	843b      	strh	r3, [r7, #32]
 8012a52:	e0ae      	b.n	8012bb2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012a54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a58:	49a6      	ldr	r1, [pc, #664]	@ (8012cf4 <etharp_find_entry+0x2d4>)
 8012a5a:	4613      	mov	r3, r2
 8012a5c:	005b      	lsls	r3, r3, #1
 8012a5e:	4413      	add	r3, r2
 8012a60:	00db      	lsls	r3, r3, #3
 8012a62:	440b      	add	r3, r1
 8012a64:	3314      	adds	r3, #20
 8012a66:	781b      	ldrb	r3, [r3, #0]
 8012a68:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012a6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012a6e:	2b0a      	cmp	r3, #10
 8012a70:	d105      	bne.n	8012a7e <etharp_find_entry+0x5e>
 8012a72:	7dfb      	ldrb	r3, [r7, #23]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d102      	bne.n	8012a7e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012a78:	8c3b      	ldrh	r3, [r7, #32]
 8012a7a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012a7c:	e095      	b.n	8012baa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012a7e:	7dfb      	ldrb	r3, [r7, #23]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	f000 8092 	beq.w	8012baa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012a86:	7dfb      	ldrb	r3, [r7, #23]
 8012a88:	2b01      	cmp	r3, #1
 8012a8a:	d009      	beq.n	8012aa0 <etharp_find_entry+0x80>
 8012a8c:	7dfb      	ldrb	r3, [r7, #23]
 8012a8e:	2b01      	cmp	r3, #1
 8012a90:	d806      	bhi.n	8012aa0 <etharp_find_entry+0x80>
 8012a92:	4b99      	ldr	r3, [pc, #612]	@ (8012cf8 <etharp_find_entry+0x2d8>)
 8012a94:	f240 1223 	movw	r2, #291	@ 0x123
 8012a98:	4998      	ldr	r1, [pc, #608]	@ (8012cfc <etharp_find_entry+0x2dc>)
 8012a9a:	4899      	ldr	r0, [pc, #612]	@ (8012d00 <etharp_find_entry+0x2e0>)
 8012a9c:	f002 faac 	bl	8014ff8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d020      	beq.n	8012ae8 <etharp_find_entry+0xc8>
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	6819      	ldr	r1, [r3, #0]
 8012aaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012aae:	4891      	ldr	r0, [pc, #580]	@ (8012cf4 <etharp_find_entry+0x2d4>)
 8012ab0:	4613      	mov	r3, r2
 8012ab2:	005b      	lsls	r3, r3, #1
 8012ab4:	4413      	add	r3, r2
 8012ab6:	00db      	lsls	r3, r3, #3
 8012ab8:	4403      	add	r3, r0
 8012aba:	3304      	adds	r3, #4
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	4299      	cmp	r1, r3
 8012ac0:	d112      	bne.n	8012ae8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d00c      	beq.n	8012ae2 <etharp_find_entry+0xc2>
 8012ac8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012acc:	4989      	ldr	r1, [pc, #548]	@ (8012cf4 <etharp_find_entry+0x2d4>)
 8012ace:	4613      	mov	r3, r2
 8012ad0:	005b      	lsls	r3, r3, #1
 8012ad2:	4413      	add	r3, r2
 8012ad4:	00db      	lsls	r3, r3, #3
 8012ad6:	440b      	add	r3, r1
 8012ad8:	3308      	adds	r3, #8
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	687a      	ldr	r2, [r7, #4]
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d102      	bne.n	8012ae8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012ae2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012ae6:	e100      	b.n	8012cea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012ae8:	7dfb      	ldrb	r3, [r7, #23]
 8012aea:	2b01      	cmp	r3, #1
 8012aec:	d140      	bne.n	8012b70 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012aee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012af2:	4980      	ldr	r1, [pc, #512]	@ (8012cf4 <etharp_find_entry+0x2d4>)
 8012af4:	4613      	mov	r3, r2
 8012af6:	005b      	lsls	r3, r3, #1
 8012af8:	4413      	add	r3, r2
 8012afa:	00db      	lsls	r3, r3, #3
 8012afc:	440b      	add	r3, r1
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d01a      	beq.n	8012b3a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012b04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b08:	497a      	ldr	r1, [pc, #488]	@ (8012cf4 <etharp_find_entry+0x2d4>)
 8012b0a:	4613      	mov	r3, r2
 8012b0c:	005b      	lsls	r3, r3, #1
 8012b0e:	4413      	add	r3, r2
 8012b10:	00db      	lsls	r3, r3, #3
 8012b12:	440b      	add	r3, r1
 8012b14:	3312      	adds	r3, #18
 8012b16:	881b      	ldrh	r3, [r3, #0]
 8012b18:	8bba      	ldrh	r2, [r7, #28]
 8012b1a:	429a      	cmp	r2, r3
 8012b1c:	d845      	bhi.n	8012baa <etharp_find_entry+0x18a>
            old_queue = i;
 8012b1e:	8c3b      	ldrh	r3, [r7, #32]
 8012b20:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012b22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b26:	4973      	ldr	r1, [pc, #460]	@ (8012cf4 <etharp_find_entry+0x2d4>)
 8012b28:	4613      	mov	r3, r2
 8012b2a:	005b      	lsls	r3, r3, #1
 8012b2c:	4413      	add	r3, r2
 8012b2e:	00db      	lsls	r3, r3, #3
 8012b30:	440b      	add	r3, r1
 8012b32:	3312      	adds	r3, #18
 8012b34:	881b      	ldrh	r3, [r3, #0]
 8012b36:	83bb      	strh	r3, [r7, #28]
 8012b38:	e037      	b.n	8012baa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012b3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b3e:	496d      	ldr	r1, [pc, #436]	@ (8012cf4 <etharp_find_entry+0x2d4>)
 8012b40:	4613      	mov	r3, r2
 8012b42:	005b      	lsls	r3, r3, #1
 8012b44:	4413      	add	r3, r2
 8012b46:	00db      	lsls	r3, r3, #3
 8012b48:	440b      	add	r3, r1
 8012b4a:	3312      	adds	r3, #18
 8012b4c:	881b      	ldrh	r3, [r3, #0]
 8012b4e:	8b7a      	ldrh	r2, [r7, #26]
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d82a      	bhi.n	8012baa <etharp_find_entry+0x18a>
            old_pending = i;
 8012b54:	8c3b      	ldrh	r3, [r7, #32]
 8012b56:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8012b58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b5c:	4965      	ldr	r1, [pc, #404]	@ (8012cf4 <etharp_find_entry+0x2d4>)
 8012b5e:	4613      	mov	r3, r2
 8012b60:	005b      	lsls	r3, r3, #1
 8012b62:	4413      	add	r3, r2
 8012b64:	00db      	lsls	r3, r3, #3
 8012b66:	440b      	add	r3, r1
 8012b68:	3312      	adds	r3, #18
 8012b6a:	881b      	ldrh	r3, [r3, #0]
 8012b6c:	837b      	strh	r3, [r7, #26]
 8012b6e:	e01c      	b.n	8012baa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012b70:	7dfb      	ldrb	r3, [r7, #23]
 8012b72:	2b01      	cmp	r3, #1
 8012b74:	d919      	bls.n	8012baa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012b76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b7a:	495e      	ldr	r1, [pc, #376]	@ (8012cf4 <etharp_find_entry+0x2d4>)
 8012b7c:	4613      	mov	r3, r2
 8012b7e:	005b      	lsls	r3, r3, #1
 8012b80:	4413      	add	r3, r2
 8012b82:	00db      	lsls	r3, r3, #3
 8012b84:	440b      	add	r3, r1
 8012b86:	3312      	adds	r3, #18
 8012b88:	881b      	ldrh	r3, [r3, #0]
 8012b8a:	8b3a      	ldrh	r2, [r7, #24]
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d80c      	bhi.n	8012baa <etharp_find_entry+0x18a>
            old_stable = i;
 8012b90:	8c3b      	ldrh	r3, [r7, #32]
 8012b92:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8012b94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b98:	4956      	ldr	r1, [pc, #344]	@ (8012cf4 <etharp_find_entry+0x2d4>)
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	005b      	lsls	r3, r3, #1
 8012b9e:	4413      	add	r3, r2
 8012ba0:	00db      	lsls	r3, r3, #3
 8012ba2:	440b      	add	r3, r1
 8012ba4:	3312      	adds	r3, #18
 8012ba6:	881b      	ldrh	r3, [r3, #0]
 8012ba8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012baa:	8c3b      	ldrh	r3, [r7, #32]
 8012bac:	3301      	adds	r3, #1
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	843b      	strh	r3, [r7, #32]
 8012bb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012bb6:	2b09      	cmp	r3, #9
 8012bb8:	f77f af4c 	ble.w	8012a54 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012bbc:	7afb      	ldrb	r3, [r7, #11]
 8012bbe:	f003 0302 	and.w	r3, r3, #2
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d108      	bne.n	8012bd8 <etharp_find_entry+0x1b8>
 8012bc6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012bca:	2b0a      	cmp	r3, #10
 8012bcc:	d107      	bne.n	8012bde <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012bce:	7afb      	ldrb	r3, [r7, #11]
 8012bd0:	f003 0301 	and.w	r3, r3, #1
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d102      	bne.n	8012bde <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012bd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012bdc:	e085      	b.n	8012cea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012bde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012be2:	2b09      	cmp	r3, #9
 8012be4:	dc02      	bgt.n	8012bec <etharp_find_entry+0x1cc>
    i = empty;
 8012be6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012be8:	843b      	strh	r3, [r7, #32]
 8012bea:	e039      	b.n	8012c60 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012bec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8012bf0:	2b09      	cmp	r3, #9
 8012bf2:	dc14      	bgt.n	8012c1e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012bf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bf6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012bf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bfc:	493d      	ldr	r1, [pc, #244]	@ (8012cf4 <etharp_find_entry+0x2d4>)
 8012bfe:	4613      	mov	r3, r2
 8012c00:	005b      	lsls	r3, r3, #1
 8012c02:	4413      	add	r3, r2
 8012c04:	00db      	lsls	r3, r3, #3
 8012c06:	440b      	add	r3, r1
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d018      	beq.n	8012c40 <etharp_find_entry+0x220>
 8012c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8012cf8 <etharp_find_entry+0x2d8>)
 8012c10:	f240 126d 	movw	r2, #365	@ 0x16d
 8012c14:	493b      	ldr	r1, [pc, #236]	@ (8012d04 <etharp_find_entry+0x2e4>)
 8012c16:	483a      	ldr	r0, [pc, #232]	@ (8012d00 <etharp_find_entry+0x2e0>)
 8012c18:	f002 f9ee 	bl	8014ff8 <iprintf>
 8012c1c:	e010      	b.n	8012c40 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012c1e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012c22:	2b09      	cmp	r3, #9
 8012c24:	dc02      	bgt.n	8012c2c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012c26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012c28:	843b      	strh	r3, [r7, #32]
 8012c2a:	e009      	b.n	8012c40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012c2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012c30:	2b09      	cmp	r3, #9
 8012c32:	dc02      	bgt.n	8012c3a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012c34:	8bfb      	ldrh	r3, [r7, #30]
 8012c36:	843b      	strh	r3, [r7, #32]
 8012c38:	e002      	b.n	8012c40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012c3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012c3e:	e054      	b.n	8012cea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012c40:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c44:	2b09      	cmp	r3, #9
 8012c46:	dd06      	ble.n	8012c56 <etharp_find_entry+0x236>
 8012c48:	4b2b      	ldr	r3, [pc, #172]	@ (8012cf8 <etharp_find_entry+0x2d8>)
 8012c4a:	f240 127f 	movw	r2, #383	@ 0x17f
 8012c4e:	492e      	ldr	r1, [pc, #184]	@ (8012d08 <etharp_find_entry+0x2e8>)
 8012c50:	482b      	ldr	r0, [pc, #172]	@ (8012d00 <etharp_find_entry+0x2e0>)
 8012c52:	f002 f9d1 	bl	8014ff8 <iprintf>
    etharp_free_entry(i);
 8012c56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7ff fe06 	bl	801286c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012c60:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c64:	2b09      	cmp	r3, #9
 8012c66:	dd06      	ble.n	8012c76 <etharp_find_entry+0x256>
 8012c68:	4b23      	ldr	r3, [pc, #140]	@ (8012cf8 <etharp_find_entry+0x2d8>)
 8012c6a:	f240 1283 	movw	r2, #387	@ 0x183
 8012c6e:	4926      	ldr	r1, [pc, #152]	@ (8012d08 <etharp_find_entry+0x2e8>)
 8012c70:	4823      	ldr	r0, [pc, #140]	@ (8012d00 <etharp_find_entry+0x2e0>)
 8012c72:	f002 f9c1 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012c76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c7a:	491e      	ldr	r1, [pc, #120]	@ (8012cf4 <etharp_find_entry+0x2d4>)
 8012c7c:	4613      	mov	r3, r2
 8012c7e:	005b      	lsls	r3, r3, #1
 8012c80:	4413      	add	r3, r2
 8012c82:	00db      	lsls	r3, r3, #3
 8012c84:	440b      	add	r3, r1
 8012c86:	3314      	adds	r3, #20
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d006      	beq.n	8012c9c <etharp_find_entry+0x27c>
 8012c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8012cf8 <etharp_find_entry+0x2d8>)
 8012c90:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8012c94:	491d      	ldr	r1, [pc, #116]	@ (8012d0c <etharp_find_entry+0x2ec>)
 8012c96:	481a      	ldr	r0, [pc, #104]	@ (8012d00 <etharp_find_entry+0x2e0>)
 8012c98:	f002 f9ae 	bl	8014ff8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d00b      	beq.n	8012cba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012ca2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	6819      	ldr	r1, [r3, #0]
 8012caa:	4812      	ldr	r0, [pc, #72]	@ (8012cf4 <etharp_find_entry+0x2d4>)
 8012cac:	4613      	mov	r3, r2
 8012cae:	005b      	lsls	r3, r3, #1
 8012cb0:	4413      	add	r3, r2
 8012cb2:	00db      	lsls	r3, r3, #3
 8012cb4:	4403      	add	r3, r0
 8012cb6:	3304      	adds	r3, #4
 8012cb8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012cba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cbe:	490d      	ldr	r1, [pc, #52]	@ (8012cf4 <etharp_find_entry+0x2d4>)
 8012cc0:	4613      	mov	r3, r2
 8012cc2:	005b      	lsls	r3, r3, #1
 8012cc4:	4413      	add	r3, r2
 8012cc6:	00db      	lsls	r3, r3, #3
 8012cc8:	440b      	add	r3, r1
 8012cca:	3312      	adds	r3, #18
 8012ccc:	2200      	movs	r2, #0
 8012cce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012cd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cd4:	4907      	ldr	r1, [pc, #28]	@ (8012cf4 <etharp_find_entry+0x2d4>)
 8012cd6:	4613      	mov	r3, r2
 8012cd8:	005b      	lsls	r3, r3, #1
 8012cda:	4413      	add	r3, r2
 8012cdc:	00db      	lsls	r3, r3, #3
 8012cde:	440b      	add	r3, r1
 8012ce0:	3308      	adds	r3, #8
 8012ce2:	687a      	ldr	r2, [r7, #4]
 8012ce4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012ce6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3728      	adds	r7, #40	@ 0x28
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	2000b2cc 	.word	0x2000b2cc
 8012cf8:	08019384 	.word	0x08019384
 8012cfc:	080193bc 	.word	0x080193bc
 8012d00:	080193fc 	.word	0x080193fc
 8012d04:	08019424 	.word	0x08019424
 8012d08:	0801943c 	.word	0x0801943c
 8012d0c:	08019450 	.word	0x08019450

08012d10 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b088      	sub	sp, #32
 8012d14:	af02      	add	r7, sp, #8
 8012d16:	60f8      	str	r0, [r7, #12]
 8012d18:	60b9      	str	r1, [r7, #8]
 8012d1a:	607a      	str	r2, [r7, #4]
 8012d1c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012d24:	2b06      	cmp	r3, #6
 8012d26:	d006      	beq.n	8012d36 <etharp_update_arp_entry+0x26>
 8012d28:	4b48      	ldr	r3, [pc, #288]	@ (8012e4c <etharp_update_arp_entry+0x13c>)
 8012d2a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8012d2e:	4948      	ldr	r1, [pc, #288]	@ (8012e50 <etharp_update_arp_entry+0x140>)
 8012d30:	4848      	ldr	r0, [pc, #288]	@ (8012e54 <etharp_update_arp_entry+0x144>)
 8012d32:	f002 f961 	bl	8014ff8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d012      	beq.n	8012d62 <etharp_update_arp_entry+0x52>
 8012d3c:	68bb      	ldr	r3, [r7, #8]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d00e      	beq.n	8012d62 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	68f9      	ldr	r1, [r7, #12]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f001 f8fe 	bl	8013f4c <ip4_addr_isbroadcast_u32>
 8012d50:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d105      	bne.n	8012d62 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012d5e:	2be0      	cmp	r3, #224	@ 0xe0
 8012d60:	d102      	bne.n	8012d68 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012d62:	f06f 030f 	mvn.w	r3, #15
 8012d66:	e06c      	b.n	8012e42 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012d68:	78fb      	ldrb	r3, [r7, #3]
 8012d6a:	68fa      	ldr	r2, [r7, #12]
 8012d6c:	4619      	mov	r1, r3
 8012d6e:	68b8      	ldr	r0, [r7, #8]
 8012d70:	f7ff fe56 	bl	8012a20 <etharp_find_entry>
 8012d74:	4603      	mov	r3, r0
 8012d76:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012d78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	da02      	bge.n	8012d86 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012d80:	8afb      	ldrh	r3, [r7, #22]
 8012d82:	b25b      	sxtb	r3, r3
 8012d84:	e05d      	b.n	8012e42 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012d86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d8a:	4933      	ldr	r1, [pc, #204]	@ (8012e58 <etharp_update_arp_entry+0x148>)
 8012d8c:	4613      	mov	r3, r2
 8012d8e:	005b      	lsls	r3, r3, #1
 8012d90:	4413      	add	r3, r2
 8012d92:	00db      	lsls	r3, r3, #3
 8012d94:	440b      	add	r3, r1
 8012d96:	3314      	adds	r3, #20
 8012d98:	2202      	movs	r2, #2
 8012d9a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012d9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012da0:	492d      	ldr	r1, [pc, #180]	@ (8012e58 <etharp_update_arp_entry+0x148>)
 8012da2:	4613      	mov	r3, r2
 8012da4:	005b      	lsls	r3, r3, #1
 8012da6:	4413      	add	r3, r2
 8012da8:	00db      	lsls	r3, r3, #3
 8012daa:	440b      	add	r3, r1
 8012dac:	3308      	adds	r3, #8
 8012dae:	68fa      	ldr	r2, [r7, #12]
 8012db0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012db2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012db6:	4613      	mov	r3, r2
 8012db8:	005b      	lsls	r3, r3, #1
 8012dba:	4413      	add	r3, r2
 8012dbc:	00db      	lsls	r3, r3, #3
 8012dbe:	3308      	adds	r3, #8
 8012dc0:	4a25      	ldr	r2, [pc, #148]	@ (8012e58 <etharp_update_arp_entry+0x148>)
 8012dc2:	4413      	add	r3, r2
 8012dc4:	3304      	adds	r3, #4
 8012dc6:	2206      	movs	r2, #6
 8012dc8:	6879      	ldr	r1, [r7, #4]
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f002 f9f5 	bl	80151ba <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012dd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012dd4:	4920      	ldr	r1, [pc, #128]	@ (8012e58 <etharp_update_arp_entry+0x148>)
 8012dd6:	4613      	mov	r3, r2
 8012dd8:	005b      	lsls	r3, r3, #1
 8012dda:	4413      	add	r3, r2
 8012ddc:	00db      	lsls	r3, r3, #3
 8012dde:	440b      	add	r3, r1
 8012de0:	3312      	adds	r3, #18
 8012de2:	2200      	movs	r2, #0
 8012de4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012de6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012dea:	491b      	ldr	r1, [pc, #108]	@ (8012e58 <etharp_update_arp_entry+0x148>)
 8012dec:	4613      	mov	r3, r2
 8012dee:	005b      	lsls	r3, r3, #1
 8012df0:	4413      	add	r3, r2
 8012df2:	00db      	lsls	r3, r3, #3
 8012df4:	440b      	add	r3, r1
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d021      	beq.n	8012e40 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012dfc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012e00:	4915      	ldr	r1, [pc, #84]	@ (8012e58 <etharp_update_arp_entry+0x148>)
 8012e02:	4613      	mov	r3, r2
 8012e04:	005b      	lsls	r3, r3, #1
 8012e06:	4413      	add	r3, r2
 8012e08:	00db      	lsls	r3, r3, #3
 8012e0a:	440b      	add	r3, r1
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012e10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012e14:	4910      	ldr	r1, [pc, #64]	@ (8012e58 <etharp_update_arp_entry+0x148>)
 8012e16:	4613      	mov	r3, r2
 8012e18:	005b      	lsls	r3, r3, #1
 8012e1a:	4413      	add	r3, r2
 8012e1c:	00db      	lsls	r3, r3, #3
 8012e1e:	440b      	add	r3, r1
 8012e20:	2200      	movs	r2, #0
 8012e22:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8012e2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012e2e:	9300      	str	r3, [sp, #0]
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6939      	ldr	r1, [r7, #16]
 8012e34:	68f8      	ldr	r0, [r7, #12]
 8012e36:	f001 ff97 	bl	8014d68 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012e3a:	6938      	ldr	r0, [r7, #16]
 8012e3c:	f7f9 fa6e 	bl	800c31c <pbuf_free>
  }
  return ERR_OK;
 8012e40:	2300      	movs	r3, #0
}
 8012e42:	4618      	mov	r0, r3
 8012e44:	3718      	adds	r7, #24
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}
 8012e4a:	bf00      	nop
 8012e4c:	08019384 	.word	0x08019384
 8012e50:	0801947c 	.word	0x0801947c
 8012e54:	080193fc 	.word	0x080193fc
 8012e58:	2000b2cc 	.word	0x2000b2cc

08012e5c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b084      	sub	sp, #16
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012e64:	2300      	movs	r3, #0
 8012e66:	60fb      	str	r3, [r7, #12]
 8012e68:	e01e      	b.n	8012ea8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012e6a:	4913      	ldr	r1, [pc, #76]	@ (8012eb8 <etharp_cleanup_netif+0x5c>)
 8012e6c:	68fa      	ldr	r2, [r7, #12]
 8012e6e:	4613      	mov	r3, r2
 8012e70:	005b      	lsls	r3, r3, #1
 8012e72:	4413      	add	r3, r2
 8012e74:	00db      	lsls	r3, r3, #3
 8012e76:	440b      	add	r3, r1
 8012e78:	3314      	adds	r3, #20
 8012e7a:	781b      	ldrb	r3, [r3, #0]
 8012e7c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012e7e:	7afb      	ldrb	r3, [r7, #11]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d00e      	beq.n	8012ea2 <etharp_cleanup_netif+0x46>
 8012e84:	490c      	ldr	r1, [pc, #48]	@ (8012eb8 <etharp_cleanup_netif+0x5c>)
 8012e86:	68fa      	ldr	r2, [r7, #12]
 8012e88:	4613      	mov	r3, r2
 8012e8a:	005b      	lsls	r3, r3, #1
 8012e8c:	4413      	add	r3, r2
 8012e8e:	00db      	lsls	r3, r3, #3
 8012e90:	440b      	add	r3, r1
 8012e92:	3308      	adds	r3, #8
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	687a      	ldr	r2, [r7, #4]
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	d102      	bne.n	8012ea2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012e9c:	68f8      	ldr	r0, [r7, #12]
 8012e9e:	f7ff fce5 	bl	801286c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	3301      	adds	r3, #1
 8012ea6:	60fb      	str	r3, [r7, #12]
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	2b09      	cmp	r3, #9
 8012eac:	dddd      	ble.n	8012e6a <etharp_cleanup_netif+0xe>
    }
  }
}
 8012eae:	bf00      	nop
 8012eb0:	bf00      	nop
 8012eb2:	3710      	adds	r7, #16
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}
 8012eb8:	2000b2cc 	.word	0x2000b2cc

08012ebc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012ebc:	b5b0      	push	{r4, r5, r7, lr}
 8012ebe:	b08a      	sub	sp, #40	@ 0x28
 8012ec0:	af04      	add	r7, sp, #16
 8012ec2:	6078      	str	r0, [r7, #4]
 8012ec4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d107      	bne.n	8012edc <etharp_input+0x20>
 8012ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8012fc4 <etharp_input+0x108>)
 8012ece:	f240 228a 	movw	r2, #650	@ 0x28a
 8012ed2:	493d      	ldr	r1, [pc, #244]	@ (8012fc8 <etharp_input+0x10c>)
 8012ed4:	483d      	ldr	r0, [pc, #244]	@ (8012fcc <etharp_input+0x110>)
 8012ed6:	f002 f88f 	bl	8014ff8 <iprintf>
 8012eda:	e06f      	b.n	8012fbc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012ee2:	693b      	ldr	r3, [r7, #16]
 8012ee4:	881b      	ldrh	r3, [r3, #0]
 8012ee6:	b29b      	uxth	r3, r3
 8012ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012eec:	d10c      	bne.n	8012f08 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012ef2:	2b06      	cmp	r3, #6
 8012ef4:	d108      	bne.n	8012f08 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012efa:	2b04      	cmp	r3, #4
 8012efc:	d104      	bne.n	8012f08 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012efe:	693b      	ldr	r3, [r7, #16]
 8012f00:	885b      	ldrh	r3, [r3, #2]
 8012f02:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012f04:	2b08      	cmp	r3, #8
 8012f06:	d003      	beq.n	8012f10 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f7f9 fa07 	bl	800c31c <pbuf_free>
    return;
 8012f0e:	e055      	b.n	8012fbc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012f10:	693b      	ldr	r3, [r7, #16]
 8012f12:	330e      	adds	r3, #14
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	3318      	adds	r3, #24
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	3304      	adds	r3, #4
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d102      	bne.n	8012f30 <etharp_input+0x74>
    for_us = 0;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	75fb      	strb	r3, [r7, #23]
 8012f2e:	e009      	b.n	8012f44 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012f30:	68ba      	ldr	r2, [r7, #8]
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	3304      	adds	r3, #4
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	429a      	cmp	r2, r3
 8012f3a:	bf0c      	ite	eq
 8012f3c:	2301      	moveq	r3, #1
 8012f3e:	2300      	movne	r3, #0
 8012f40:	b2db      	uxtb	r3, r3
 8012f42:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	f103 0208 	add.w	r2, r3, #8
 8012f4a:	7dfb      	ldrb	r3, [r7, #23]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d001      	beq.n	8012f54 <etharp_input+0x98>
 8012f50:	2301      	movs	r3, #1
 8012f52:	e000      	b.n	8012f56 <etharp_input+0x9a>
 8012f54:	2302      	movs	r3, #2
 8012f56:	f107 010c 	add.w	r1, r7, #12
 8012f5a:	6838      	ldr	r0, [r7, #0]
 8012f5c:	f7ff fed8 	bl	8012d10 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012f60:	693b      	ldr	r3, [r7, #16]
 8012f62:	88db      	ldrh	r3, [r3, #6]
 8012f64:	b29b      	uxth	r3, r3
 8012f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012f6a:	d003      	beq.n	8012f74 <etharp_input+0xb8>
 8012f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f70:	d01e      	beq.n	8012fb0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012f72:	e020      	b.n	8012fb6 <etharp_input+0xfa>
      if (for_us) {
 8012f74:	7dfb      	ldrb	r3, [r7, #23]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d01c      	beq.n	8012fb4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012f80:	693b      	ldr	r3, [r7, #16]
 8012f82:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012f86:	683b      	ldr	r3, [r7, #0]
 8012f88:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012f90:	693a      	ldr	r2, [r7, #16]
 8012f92:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012f94:	2102      	movs	r1, #2
 8012f96:	9103      	str	r1, [sp, #12]
 8012f98:	f107 010c 	add.w	r1, r7, #12
 8012f9c:	9102      	str	r1, [sp, #8]
 8012f9e:	9201      	str	r2, [sp, #4]
 8012fa0:	9300      	str	r3, [sp, #0]
 8012fa2:	462b      	mov	r3, r5
 8012fa4:	4622      	mov	r2, r4
 8012fa6:	4601      	mov	r1, r0
 8012fa8:	6838      	ldr	r0, [r7, #0]
 8012faa:	f000 faeb 	bl	8013584 <etharp_raw>
      break;
 8012fae:	e001      	b.n	8012fb4 <etharp_input+0xf8>
      break;
 8012fb0:	bf00      	nop
 8012fb2:	e000      	b.n	8012fb6 <etharp_input+0xfa>
      break;
 8012fb4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f7f9 f9b0 	bl	800c31c <pbuf_free>
}
 8012fbc:	3718      	adds	r7, #24
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8012fc2:	bf00      	nop
 8012fc4:	08019384 	.word	0x08019384
 8012fc8:	080194d4 	.word	0x080194d4
 8012fcc:	080193fc 	.word	0x080193fc

08012fd0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b086      	sub	sp, #24
 8012fd4:	af02      	add	r7, sp, #8
 8012fd6:	60f8      	str	r0, [r7, #12]
 8012fd8:	60b9      	str	r1, [r7, #8]
 8012fda:	4613      	mov	r3, r2
 8012fdc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012fde:	79fa      	ldrb	r2, [r7, #7]
 8012fe0:	4944      	ldr	r1, [pc, #272]	@ (80130f4 <etharp_output_to_arp_index+0x124>)
 8012fe2:	4613      	mov	r3, r2
 8012fe4:	005b      	lsls	r3, r3, #1
 8012fe6:	4413      	add	r3, r2
 8012fe8:	00db      	lsls	r3, r3, #3
 8012fea:	440b      	add	r3, r1
 8012fec:	3314      	adds	r3, #20
 8012fee:	781b      	ldrb	r3, [r3, #0]
 8012ff0:	2b01      	cmp	r3, #1
 8012ff2:	d806      	bhi.n	8013002 <etharp_output_to_arp_index+0x32>
 8012ff4:	4b40      	ldr	r3, [pc, #256]	@ (80130f8 <etharp_output_to_arp_index+0x128>)
 8012ff6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012ffa:	4940      	ldr	r1, [pc, #256]	@ (80130fc <etharp_output_to_arp_index+0x12c>)
 8012ffc:	4840      	ldr	r0, [pc, #256]	@ (8013100 <etharp_output_to_arp_index+0x130>)
 8012ffe:	f001 fffb 	bl	8014ff8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013002:	79fa      	ldrb	r2, [r7, #7]
 8013004:	493b      	ldr	r1, [pc, #236]	@ (80130f4 <etharp_output_to_arp_index+0x124>)
 8013006:	4613      	mov	r3, r2
 8013008:	005b      	lsls	r3, r3, #1
 801300a:	4413      	add	r3, r2
 801300c:	00db      	lsls	r3, r3, #3
 801300e:	440b      	add	r3, r1
 8013010:	3314      	adds	r3, #20
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	2b02      	cmp	r3, #2
 8013016:	d153      	bne.n	80130c0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013018:	79fa      	ldrb	r2, [r7, #7]
 801301a:	4936      	ldr	r1, [pc, #216]	@ (80130f4 <etharp_output_to_arp_index+0x124>)
 801301c:	4613      	mov	r3, r2
 801301e:	005b      	lsls	r3, r3, #1
 8013020:	4413      	add	r3, r2
 8013022:	00db      	lsls	r3, r3, #3
 8013024:	440b      	add	r3, r1
 8013026:	3312      	adds	r3, #18
 8013028:	881b      	ldrh	r3, [r3, #0]
 801302a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801302e:	d919      	bls.n	8013064 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013030:	79fa      	ldrb	r2, [r7, #7]
 8013032:	4613      	mov	r3, r2
 8013034:	005b      	lsls	r3, r3, #1
 8013036:	4413      	add	r3, r2
 8013038:	00db      	lsls	r3, r3, #3
 801303a:	4a2e      	ldr	r2, [pc, #184]	@ (80130f4 <etharp_output_to_arp_index+0x124>)
 801303c:	4413      	add	r3, r2
 801303e:	3304      	adds	r3, #4
 8013040:	4619      	mov	r1, r3
 8013042:	68f8      	ldr	r0, [r7, #12]
 8013044:	f000 fb4c 	bl	80136e0 <etharp_request>
 8013048:	4603      	mov	r3, r0
 801304a:	2b00      	cmp	r3, #0
 801304c:	d138      	bne.n	80130c0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801304e:	79fa      	ldrb	r2, [r7, #7]
 8013050:	4928      	ldr	r1, [pc, #160]	@ (80130f4 <etharp_output_to_arp_index+0x124>)
 8013052:	4613      	mov	r3, r2
 8013054:	005b      	lsls	r3, r3, #1
 8013056:	4413      	add	r3, r2
 8013058:	00db      	lsls	r3, r3, #3
 801305a:	440b      	add	r3, r1
 801305c:	3314      	adds	r3, #20
 801305e:	2203      	movs	r2, #3
 8013060:	701a      	strb	r2, [r3, #0]
 8013062:	e02d      	b.n	80130c0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013064:	79fa      	ldrb	r2, [r7, #7]
 8013066:	4923      	ldr	r1, [pc, #140]	@ (80130f4 <etharp_output_to_arp_index+0x124>)
 8013068:	4613      	mov	r3, r2
 801306a:	005b      	lsls	r3, r3, #1
 801306c:	4413      	add	r3, r2
 801306e:	00db      	lsls	r3, r3, #3
 8013070:	440b      	add	r3, r1
 8013072:	3312      	adds	r3, #18
 8013074:	881b      	ldrh	r3, [r3, #0]
 8013076:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801307a:	d321      	bcc.n	80130c0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801307c:	79fa      	ldrb	r2, [r7, #7]
 801307e:	4613      	mov	r3, r2
 8013080:	005b      	lsls	r3, r3, #1
 8013082:	4413      	add	r3, r2
 8013084:	00db      	lsls	r3, r3, #3
 8013086:	4a1b      	ldr	r2, [pc, #108]	@ (80130f4 <etharp_output_to_arp_index+0x124>)
 8013088:	4413      	add	r3, r2
 801308a:	1d19      	adds	r1, r3, #4
 801308c:	79fa      	ldrb	r2, [r7, #7]
 801308e:	4613      	mov	r3, r2
 8013090:	005b      	lsls	r3, r3, #1
 8013092:	4413      	add	r3, r2
 8013094:	00db      	lsls	r3, r3, #3
 8013096:	3308      	adds	r3, #8
 8013098:	4a16      	ldr	r2, [pc, #88]	@ (80130f4 <etharp_output_to_arp_index+0x124>)
 801309a:	4413      	add	r3, r2
 801309c:	3304      	adds	r3, #4
 801309e:	461a      	mov	r2, r3
 80130a0:	68f8      	ldr	r0, [r7, #12]
 80130a2:	f000 fafb 	bl	801369c <etharp_request_dst>
 80130a6:	4603      	mov	r3, r0
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d109      	bne.n	80130c0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80130ac:	79fa      	ldrb	r2, [r7, #7]
 80130ae:	4911      	ldr	r1, [pc, #68]	@ (80130f4 <etharp_output_to_arp_index+0x124>)
 80130b0:	4613      	mov	r3, r2
 80130b2:	005b      	lsls	r3, r3, #1
 80130b4:	4413      	add	r3, r2
 80130b6:	00db      	lsls	r3, r3, #3
 80130b8:	440b      	add	r3, r1
 80130ba:	3314      	adds	r3, #20
 80130bc:	2203      	movs	r2, #3
 80130be:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80130c6:	79fa      	ldrb	r2, [r7, #7]
 80130c8:	4613      	mov	r3, r2
 80130ca:	005b      	lsls	r3, r3, #1
 80130cc:	4413      	add	r3, r2
 80130ce:	00db      	lsls	r3, r3, #3
 80130d0:	3308      	adds	r3, #8
 80130d2:	4a08      	ldr	r2, [pc, #32]	@ (80130f4 <etharp_output_to_arp_index+0x124>)
 80130d4:	4413      	add	r3, r2
 80130d6:	3304      	adds	r3, #4
 80130d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80130dc:	9200      	str	r2, [sp, #0]
 80130de:	460a      	mov	r2, r1
 80130e0:	68b9      	ldr	r1, [r7, #8]
 80130e2:	68f8      	ldr	r0, [r7, #12]
 80130e4:	f001 fe40 	bl	8014d68 <ethernet_output>
 80130e8:	4603      	mov	r3, r0
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3710      	adds	r7, #16
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}
 80130f2:	bf00      	nop
 80130f4:	2000b2cc 	.word	0x2000b2cc
 80130f8:	08019384 	.word	0x08019384
 80130fc:	080194f4 	.word	0x080194f4
 8013100:	080193fc 	.word	0x080193fc

08013104 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b08a      	sub	sp, #40	@ 0x28
 8013108:	af02      	add	r7, sp, #8
 801310a:	60f8      	str	r0, [r7, #12]
 801310c:	60b9      	str	r1, [r7, #8]
 801310e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d106      	bne.n	8013128 <etharp_output+0x24>
 801311a:	4b73      	ldr	r3, [pc, #460]	@ (80132e8 <etharp_output+0x1e4>)
 801311c:	f240 321e 	movw	r2, #798	@ 0x31e
 8013120:	4972      	ldr	r1, [pc, #456]	@ (80132ec <etharp_output+0x1e8>)
 8013122:	4873      	ldr	r0, [pc, #460]	@ (80132f0 <etharp_output+0x1ec>)
 8013124:	f001 ff68 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d106      	bne.n	801313c <etharp_output+0x38>
 801312e:	4b6e      	ldr	r3, [pc, #440]	@ (80132e8 <etharp_output+0x1e4>)
 8013130:	f240 321f 	movw	r2, #799	@ 0x31f
 8013134:	496f      	ldr	r1, [pc, #444]	@ (80132f4 <etharp_output+0x1f0>)
 8013136:	486e      	ldr	r0, [pc, #440]	@ (80132f0 <etharp_output+0x1ec>)
 8013138:	f001 ff5e 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d106      	bne.n	8013150 <etharp_output+0x4c>
 8013142:	4b69      	ldr	r3, [pc, #420]	@ (80132e8 <etharp_output+0x1e4>)
 8013144:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8013148:	496b      	ldr	r1, [pc, #428]	@ (80132f8 <etharp_output+0x1f4>)
 801314a:	4869      	ldr	r0, [pc, #420]	@ (80132f0 <etharp_output+0x1ec>)
 801314c:	f001 ff54 	bl	8014ff8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	68f9      	ldr	r1, [r7, #12]
 8013156:	4618      	mov	r0, r3
 8013158:	f000 fef8 	bl	8013f4c <ip4_addr_isbroadcast_u32>
 801315c:	4603      	mov	r3, r0
 801315e:	2b00      	cmp	r3, #0
 8013160:	d002      	beq.n	8013168 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013162:	4b66      	ldr	r3, [pc, #408]	@ (80132fc <etharp_output+0x1f8>)
 8013164:	61fb      	str	r3, [r7, #28]
 8013166:	e0af      	b.n	80132c8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013170:	2be0      	cmp	r3, #224	@ 0xe0
 8013172:	d118      	bne.n	80131a6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013174:	2301      	movs	r3, #1
 8013176:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013178:	2300      	movs	r3, #0
 801317a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801317c:	235e      	movs	r3, #94	@ 0x5e
 801317e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	3301      	adds	r3, #1
 8013184:	781b      	ldrb	r3, [r3, #0]
 8013186:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801318a:	b2db      	uxtb	r3, r3
 801318c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	3302      	adds	r3, #2
 8013192:	781b      	ldrb	r3, [r3, #0]
 8013194:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	3303      	adds	r3, #3
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801319e:	f107 0310 	add.w	r3, r7, #16
 80131a2:	61fb      	str	r3, [r7, #28]
 80131a4:	e090      	b.n	80132c8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681a      	ldr	r2, [r3, #0]
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	3304      	adds	r3, #4
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	405a      	eors	r2, r3
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	3308      	adds	r3, #8
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	4013      	ands	r3, r2
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d012      	beq.n	80131e4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80131c4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80131c8:	4293      	cmp	r3, r2
 80131ca:	d00b      	beq.n	80131e4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	330c      	adds	r3, #12
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d003      	beq.n	80131de <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	330c      	adds	r3, #12
 80131da:	61bb      	str	r3, [r7, #24]
 80131dc:	e002      	b.n	80131e4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80131de:	f06f 0303 	mvn.w	r3, #3
 80131e2:	e07d      	b.n	80132e0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80131e4:	4b46      	ldr	r3, [pc, #280]	@ (8013300 <etharp_output+0x1fc>)
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	4619      	mov	r1, r3
 80131ea:	4a46      	ldr	r2, [pc, #280]	@ (8013304 <etharp_output+0x200>)
 80131ec:	460b      	mov	r3, r1
 80131ee:	005b      	lsls	r3, r3, #1
 80131f0:	440b      	add	r3, r1
 80131f2:	00db      	lsls	r3, r3, #3
 80131f4:	4413      	add	r3, r2
 80131f6:	3314      	adds	r3, #20
 80131f8:	781b      	ldrb	r3, [r3, #0]
 80131fa:	2b01      	cmp	r3, #1
 80131fc:	d925      	bls.n	801324a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80131fe:	4b40      	ldr	r3, [pc, #256]	@ (8013300 <etharp_output+0x1fc>)
 8013200:	781b      	ldrb	r3, [r3, #0]
 8013202:	4619      	mov	r1, r3
 8013204:	4a3f      	ldr	r2, [pc, #252]	@ (8013304 <etharp_output+0x200>)
 8013206:	460b      	mov	r3, r1
 8013208:	005b      	lsls	r3, r3, #1
 801320a:	440b      	add	r3, r1
 801320c:	00db      	lsls	r3, r3, #3
 801320e:	4413      	add	r3, r2
 8013210:	3308      	adds	r3, #8
 8013212:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013214:	68fa      	ldr	r2, [r7, #12]
 8013216:	429a      	cmp	r2, r3
 8013218:	d117      	bne.n	801324a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801321a:	69bb      	ldr	r3, [r7, #24]
 801321c:	681a      	ldr	r2, [r3, #0]
 801321e:	4b38      	ldr	r3, [pc, #224]	@ (8013300 <etharp_output+0x1fc>)
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	4618      	mov	r0, r3
 8013224:	4937      	ldr	r1, [pc, #220]	@ (8013304 <etharp_output+0x200>)
 8013226:	4603      	mov	r3, r0
 8013228:	005b      	lsls	r3, r3, #1
 801322a:	4403      	add	r3, r0
 801322c:	00db      	lsls	r3, r3, #3
 801322e:	440b      	add	r3, r1
 8013230:	3304      	adds	r3, #4
 8013232:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013234:	429a      	cmp	r2, r3
 8013236:	d108      	bne.n	801324a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013238:	4b31      	ldr	r3, [pc, #196]	@ (8013300 <etharp_output+0x1fc>)
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	461a      	mov	r2, r3
 801323e:	68b9      	ldr	r1, [r7, #8]
 8013240:	68f8      	ldr	r0, [r7, #12]
 8013242:	f7ff fec5 	bl	8012fd0 <etharp_output_to_arp_index>
 8013246:	4603      	mov	r3, r0
 8013248:	e04a      	b.n	80132e0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801324a:	2300      	movs	r3, #0
 801324c:	75fb      	strb	r3, [r7, #23]
 801324e:	e031      	b.n	80132b4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013250:	7dfa      	ldrb	r2, [r7, #23]
 8013252:	492c      	ldr	r1, [pc, #176]	@ (8013304 <etharp_output+0x200>)
 8013254:	4613      	mov	r3, r2
 8013256:	005b      	lsls	r3, r3, #1
 8013258:	4413      	add	r3, r2
 801325a:	00db      	lsls	r3, r3, #3
 801325c:	440b      	add	r3, r1
 801325e:	3314      	adds	r3, #20
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	2b01      	cmp	r3, #1
 8013264:	d923      	bls.n	80132ae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013266:	7dfa      	ldrb	r2, [r7, #23]
 8013268:	4926      	ldr	r1, [pc, #152]	@ (8013304 <etharp_output+0x200>)
 801326a:	4613      	mov	r3, r2
 801326c:	005b      	lsls	r3, r3, #1
 801326e:	4413      	add	r3, r2
 8013270:	00db      	lsls	r3, r3, #3
 8013272:	440b      	add	r3, r1
 8013274:	3308      	adds	r3, #8
 8013276:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013278:	68fa      	ldr	r2, [r7, #12]
 801327a:	429a      	cmp	r2, r3
 801327c:	d117      	bne.n	80132ae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801327e:	69bb      	ldr	r3, [r7, #24]
 8013280:	6819      	ldr	r1, [r3, #0]
 8013282:	7dfa      	ldrb	r2, [r7, #23]
 8013284:	481f      	ldr	r0, [pc, #124]	@ (8013304 <etharp_output+0x200>)
 8013286:	4613      	mov	r3, r2
 8013288:	005b      	lsls	r3, r3, #1
 801328a:	4413      	add	r3, r2
 801328c:	00db      	lsls	r3, r3, #3
 801328e:	4403      	add	r3, r0
 8013290:	3304      	adds	r3, #4
 8013292:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013294:	4299      	cmp	r1, r3
 8013296:	d10a      	bne.n	80132ae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013298:	4a19      	ldr	r2, [pc, #100]	@ (8013300 <etharp_output+0x1fc>)
 801329a:	7dfb      	ldrb	r3, [r7, #23]
 801329c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801329e:	7dfb      	ldrb	r3, [r7, #23]
 80132a0:	461a      	mov	r2, r3
 80132a2:	68b9      	ldr	r1, [r7, #8]
 80132a4:	68f8      	ldr	r0, [r7, #12]
 80132a6:	f7ff fe93 	bl	8012fd0 <etharp_output_to_arp_index>
 80132aa:	4603      	mov	r3, r0
 80132ac:	e018      	b.n	80132e0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80132ae:	7dfb      	ldrb	r3, [r7, #23]
 80132b0:	3301      	adds	r3, #1
 80132b2:	75fb      	strb	r3, [r7, #23]
 80132b4:	7dfb      	ldrb	r3, [r7, #23]
 80132b6:	2b09      	cmp	r3, #9
 80132b8:	d9ca      	bls.n	8013250 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80132ba:	68ba      	ldr	r2, [r7, #8]
 80132bc:	69b9      	ldr	r1, [r7, #24]
 80132be:	68f8      	ldr	r0, [r7, #12]
 80132c0:	f000 f822 	bl	8013308 <etharp_query>
 80132c4:	4603      	mov	r3, r0
 80132c6:	e00b      	b.n	80132e0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80132ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80132d2:	9300      	str	r3, [sp, #0]
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	68b9      	ldr	r1, [r7, #8]
 80132d8:	68f8      	ldr	r0, [r7, #12]
 80132da:	f001 fd45 	bl	8014d68 <ethernet_output>
 80132de:	4603      	mov	r3, r0
}
 80132e0:	4618      	mov	r0, r3
 80132e2:	3720      	adds	r7, #32
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}
 80132e8:	08019384 	.word	0x08019384
 80132ec:	080194d4 	.word	0x080194d4
 80132f0:	080193fc 	.word	0x080193fc
 80132f4:	08019524 	.word	0x08019524
 80132f8:	080194c4 	.word	0x080194c4
 80132fc:	08019b48 	.word	0x08019b48
 8013300:	2000b3bc 	.word	0x2000b3bc
 8013304:	2000b2cc 	.word	0x2000b2cc

08013308 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b08c      	sub	sp, #48	@ 0x30
 801330c:	af02      	add	r7, sp, #8
 801330e:	60f8      	str	r0, [r7, #12]
 8013310:	60b9      	str	r1, [r7, #8]
 8013312:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	3326      	adds	r3, #38	@ 0x26
 8013318:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801331a:	23ff      	movs	r3, #255	@ 0xff
 801331c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8013320:	2300      	movs	r3, #0
 8013322:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	68f9      	ldr	r1, [r7, #12]
 801332a:	4618      	mov	r0, r3
 801332c:	f000 fe0e 	bl	8013f4c <ip4_addr_isbroadcast_u32>
 8013330:	4603      	mov	r3, r0
 8013332:	2b00      	cmp	r3, #0
 8013334:	d10c      	bne.n	8013350 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801333e:	2be0      	cmp	r3, #224	@ 0xe0
 8013340:	d006      	beq.n	8013350 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d003      	beq.n	8013350 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d102      	bne.n	8013356 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013350:	f06f 030f 	mvn.w	r3, #15
 8013354:	e101      	b.n	801355a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013356:	68fa      	ldr	r2, [r7, #12]
 8013358:	2101      	movs	r1, #1
 801335a:	68b8      	ldr	r0, [r7, #8]
 801335c:	f7ff fb60 	bl	8012a20 <etharp_find_entry>
 8013360:	4603      	mov	r3, r0
 8013362:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013364:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013368:	2b00      	cmp	r3, #0
 801336a:	da02      	bge.n	8013372 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801336c:	8a7b      	ldrh	r3, [r7, #18]
 801336e:	b25b      	sxtb	r3, r3
 8013370:	e0f3      	b.n	801355a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013372:	8a7b      	ldrh	r3, [r7, #18]
 8013374:	2b7e      	cmp	r3, #126	@ 0x7e
 8013376:	d906      	bls.n	8013386 <etharp_query+0x7e>
 8013378:	4b7a      	ldr	r3, [pc, #488]	@ (8013564 <etharp_query+0x25c>)
 801337a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801337e:	497a      	ldr	r1, [pc, #488]	@ (8013568 <etharp_query+0x260>)
 8013380:	487a      	ldr	r0, [pc, #488]	@ (801356c <etharp_query+0x264>)
 8013382:	f001 fe39 	bl	8014ff8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013386:	8a7b      	ldrh	r3, [r7, #18]
 8013388:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801338a:	7c7a      	ldrb	r2, [r7, #17]
 801338c:	4978      	ldr	r1, [pc, #480]	@ (8013570 <etharp_query+0x268>)
 801338e:	4613      	mov	r3, r2
 8013390:	005b      	lsls	r3, r3, #1
 8013392:	4413      	add	r3, r2
 8013394:	00db      	lsls	r3, r3, #3
 8013396:	440b      	add	r3, r1
 8013398:	3314      	adds	r3, #20
 801339a:	781b      	ldrb	r3, [r3, #0]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d115      	bne.n	80133cc <etharp_query+0xc4>
    is_new_entry = 1;
 80133a0:	2301      	movs	r3, #1
 80133a2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80133a4:	7c7a      	ldrb	r2, [r7, #17]
 80133a6:	4972      	ldr	r1, [pc, #456]	@ (8013570 <etharp_query+0x268>)
 80133a8:	4613      	mov	r3, r2
 80133aa:	005b      	lsls	r3, r3, #1
 80133ac:	4413      	add	r3, r2
 80133ae:	00db      	lsls	r3, r3, #3
 80133b0:	440b      	add	r3, r1
 80133b2:	3314      	adds	r3, #20
 80133b4:	2201      	movs	r2, #1
 80133b6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80133b8:	7c7a      	ldrb	r2, [r7, #17]
 80133ba:	496d      	ldr	r1, [pc, #436]	@ (8013570 <etharp_query+0x268>)
 80133bc:	4613      	mov	r3, r2
 80133be:	005b      	lsls	r3, r3, #1
 80133c0:	4413      	add	r3, r2
 80133c2:	00db      	lsls	r3, r3, #3
 80133c4:	440b      	add	r3, r1
 80133c6:	3308      	adds	r3, #8
 80133c8:	68fa      	ldr	r2, [r7, #12]
 80133ca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80133cc:	7c7a      	ldrb	r2, [r7, #17]
 80133ce:	4968      	ldr	r1, [pc, #416]	@ (8013570 <etharp_query+0x268>)
 80133d0:	4613      	mov	r3, r2
 80133d2:	005b      	lsls	r3, r3, #1
 80133d4:	4413      	add	r3, r2
 80133d6:	00db      	lsls	r3, r3, #3
 80133d8:	440b      	add	r3, r1
 80133da:	3314      	adds	r3, #20
 80133dc:	781b      	ldrb	r3, [r3, #0]
 80133de:	2b01      	cmp	r3, #1
 80133e0:	d011      	beq.n	8013406 <etharp_query+0xfe>
 80133e2:	7c7a      	ldrb	r2, [r7, #17]
 80133e4:	4962      	ldr	r1, [pc, #392]	@ (8013570 <etharp_query+0x268>)
 80133e6:	4613      	mov	r3, r2
 80133e8:	005b      	lsls	r3, r3, #1
 80133ea:	4413      	add	r3, r2
 80133ec:	00db      	lsls	r3, r3, #3
 80133ee:	440b      	add	r3, r1
 80133f0:	3314      	adds	r3, #20
 80133f2:	781b      	ldrb	r3, [r3, #0]
 80133f4:	2b01      	cmp	r3, #1
 80133f6:	d806      	bhi.n	8013406 <etharp_query+0xfe>
 80133f8:	4b5a      	ldr	r3, [pc, #360]	@ (8013564 <etharp_query+0x25c>)
 80133fa:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80133fe:	495d      	ldr	r1, [pc, #372]	@ (8013574 <etharp_query+0x26c>)
 8013400:	485a      	ldr	r0, [pc, #360]	@ (801356c <etharp_query+0x264>)
 8013402:	f001 fdf9 	bl	8014ff8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013406:	6a3b      	ldr	r3, [r7, #32]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d102      	bne.n	8013412 <etharp_query+0x10a>
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d10c      	bne.n	801342c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013412:	68b9      	ldr	r1, [r7, #8]
 8013414:	68f8      	ldr	r0, [r7, #12]
 8013416:	f000 f963 	bl	80136e0 <etharp_request>
 801341a:	4603      	mov	r3, r0
 801341c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d102      	bne.n	801342c <etharp_query+0x124>
      return result;
 8013426:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801342a:	e096      	b.n	801355a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d106      	bne.n	8013440 <etharp_query+0x138>
 8013432:	4b4c      	ldr	r3, [pc, #304]	@ (8013564 <etharp_query+0x25c>)
 8013434:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8013438:	494f      	ldr	r1, [pc, #316]	@ (8013578 <etharp_query+0x270>)
 801343a:	484c      	ldr	r0, [pc, #304]	@ (801356c <etharp_query+0x264>)
 801343c:	f001 fddc 	bl	8014ff8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013440:	7c7a      	ldrb	r2, [r7, #17]
 8013442:	494b      	ldr	r1, [pc, #300]	@ (8013570 <etharp_query+0x268>)
 8013444:	4613      	mov	r3, r2
 8013446:	005b      	lsls	r3, r3, #1
 8013448:	4413      	add	r3, r2
 801344a:	00db      	lsls	r3, r3, #3
 801344c:	440b      	add	r3, r1
 801344e:	3314      	adds	r3, #20
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	2b01      	cmp	r3, #1
 8013454:	d917      	bls.n	8013486 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013456:	4a49      	ldr	r2, [pc, #292]	@ (801357c <etharp_query+0x274>)
 8013458:	7c7b      	ldrb	r3, [r7, #17]
 801345a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801345c:	7c7a      	ldrb	r2, [r7, #17]
 801345e:	4613      	mov	r3, r2
 8013460:	005b      	lsls	r3, r3, #1
 8013462:	4413      	add	r3, r2
 8013464:	00db      	lsls	r3, r3, #3
 8013466:	3308      	adds	r3, #8
 8013468:	4a41      	ldr	r2, [pc, #260]	@ (8013570 <etharp_query+0x268>)
 801346a:	4413      	add	r3, r2
 801346c:	3304      	adds	r3, #4
 801346e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013472:	9200      	str	r2, [sp, #0]
 8013474:	697a      	ldr	r2, [r7, #20]
 8013476:	6879      	ldr	r1, [r7, #4]
 8013478:	68f8      	ldr	r0, [r7, #12]
 801347a:	f001 fc75 	bl	8014d68 <ethernet_output>
 801347e:	4603      	mov	r3, r0
 8013480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013484:	e067      	b.n	8013556 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013486:	7c7a      	ldrb	r2, [r7, #17]
 8013488:	4939      	ldr	r1, [pc, #228]	@ (8013570 <etharp_query+0x268>)
 801348a:	4613      	mov	r3, r2
 801348c:	005b      	lsls	r3, r3, #1
 801348e:	4413      	add	r3, r2
 8013490:	00db      	lsls	r3, r3, #3
 8013492:	440b      	add	r3, r1
 8013494:	3314      	adds	r3, #20
 8013496:	781b      	ldrb	r3, [r3, #0]
 8013498:	2b01      	cmp	r3, #1
 801349a:	d15c      	bne.n	8013556 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801349c:	2300      	movs	r3, #0
 801349e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80134a4:	e01c      	b.n	80134e0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80134a6:	69fb      	ldr	r3, [r7, #28]
 80134a8:	895a      	ldrh	r2, [r3, #10]
 80134aa:	69fb      	ldr	r3, [r7, #28]
 80134ac:	891b      	ldrh	r3, [r3, #8]
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d10a      	bne.n	80134c8 <etharp_query+0x1c0>
 80134b2:	69fb      	ldr	r3, [r7, #28]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d006      	beq.n	80134c8 <etharp_query+0x1c0>
 80134ba:	4b2a      	ldr	r3, [pc, #168]	@ (8013564 <etharp_query+0x25c>)
 80134bc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80134c0:	492f      	ldr	r1, [pc, #188]	@ (8013580 <etharp_query+0x278>)
 80134c2:	482a      	ldr	r0, [pc, #168]	@ (801356c <etharp_query+0x264>)
 80134c4:	f001 fd98 	bl	8014ff8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80134c8:	69fb      	ldr	r3, [r7, #28]
 80134ca:	7b1b      	ldrb	r3, [r3, #12]
 80134cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d002      	beq.n	80134da <etharp_query+0x1d2>
        copy_needed = 1;
 80134d4:	2301      	movs	r3, #1
 80134d6:	61bb      	str	r3, [r7, #24]
        break;
 80134d8:	e005      	b.n	80134e6 <etharp_query+0x1de>
      }
      p = p->next;
 80134da:	69fb      	ldr	r3, [r7, #28]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	61fb      	str	r3, [r7, #28]
    while (p) {
 80134e0:	69fb      	ldr	r3, [r7, #28]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d1df      	bne.n	80134a6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80134e6:	69bb      	ldr	r3, [r7, #24]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d007      	beq.n	80134fc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80134ec:	687a      	ldr	r2, [r7, #4]
 80134ee:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80134f2:	200e      	movs	r0, #14
 80134f4:	f7f9 fa10 	bl	800c918 <pbuf_clone>
 80134f8:	61f8      	str	r0, [r7, #28]
 80134fa:	e004      	b.n	8013506 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013500:	69f8      	ldr	r0, [r7, #28]
 8013502:	f7f8 ffab 	bl	800c45c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013506:	69fb      	ldr	r3, [r7, #28]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d021      	beq.n	8013550 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801350c:	7c7a      	ldrb	r2, [r7, #17]
 801350e:	4918      	ldr	r1, [pc, #96]	@ (8013570 <etharp_query+0x268>)
 8013510:	4613      	mov	r3, r2
 8013512:	005b      	lsls	r3, r3, #1
 8013514:	4413      	add	r3, r2
 8013516:	00db      	lsls	r3, r3, #3
 8013518:	440b      	add	r3, r1
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d00a      	beq.n	8013536 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013520:	7c7a      	ldrb	r2, [r7, #17]
 8013522:	4913      	ldr	r1, [pc, #76]	@ (8013570 <etharp_query+0x268>)
 8013524:	4613      	mov	r3, r2
 8013526:	005b      	lsls	r3, r3, #1
 8013528:	4413      	add	r3, r2
 801352a:	00db      	lsls	r3, r3, #3
 801352c:	440b      	add	r3, r1
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	4618      	mov	r0, r3
 8013532:	f7f8 fef3 	bl	800c31c <pbuf_free>
      }
      arp_table[i].q = p;
 8013536:	7c7a      	ldrb	r2, [r7, #17]
 8013538:	490d      	ldr	r1, [pc, #52]	@ (8013570 <etharp_query+0x268>)
 801353a:	4613      	mov	r3, r2
 801353c:	005b      	lsls	r3, r3, #1
 801353e:	4413      	add	r3, r2
 8013540:	00db      	lsls	r3, r3, #3
 8013542:	440b      	add	r3, r1
 8013544:	69fa      	ldr	r2, [r7, #28]
 8013546:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013548:	2300      	movs	r3, #0
 801354a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801354e:	e002      	b.n	8013556 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013550:	23ff      	movs	r3, #255	@ 0xff
 8013552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8013556:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801355a:	4618      	mov	r0, r3
 801355c:	3728      	adds	r7, #40	@ 0x28
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}
 8013562:	bf00      	nop
 8013564:	08019384 	.word	0x08019384
 8013568:	08019530 	.word	0x08019530
 801356c:	080193fc 	.word	0x080193fc
 8013570:	2000b2cc 	.word	0x2000b2cc
 8013574:	08019540 	.word	0x08019540
 8013578:	08019524 	.word	0x08019524
 801357c:	2000b3bc 	.word	0x2000b3bc
 8013580:	08019568 	.word	0x08019568

08013584 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b08a      	sub	sp, #40	@ 0x28
 8013588:	af02      	add	r7, sp, #8
 801358a:	60f8      	str	r0, [r7, #12]
 801358c:	60b9      	str	r1, [r7, #8]
 801358e:	607a      	str	r2, [r7, #4]
 8013590:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013592:	2300      	movs	r3, #0
 8013594:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d106      	bne.n	80135aa <etharp_raw+0x26>
 801359c:	4b3a      	ldr	r3, [pc, #232]	@ (8013688 <etharp_raw+0x104>)
 801359e:	f240 4257 	movw	r2, #1111	@ 0x457
 80135a2:	493a      	ldr	r1, [pc, #232]	@ (801368c <etharp_raw+0x108>)
 80135a4:	483a      	ldr	r0, [pc, #232]	@ (8013690 <etharp_raw+0x10c>)
 80135a6:	f001 fd27 	bl	8014ff8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80135aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80135ae:	211c      	movs	r1, #28
 80135b0:	200e      	movs	r0, #14
 80135b2:	f7f8 fbcf 	bl	800bd54 <pbuf_alloc>
 80135b6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80135b8:	69bb      	ldr	r3, [r7, #24]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d102      	bne.n	80135c4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80135be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80135c2:	e05d      	b.n	8013680 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80135c4:	69bb      	ldr	r3, [r7, #24]
 80135c6:	895b      	ldrh	r3, [r3, #10]
 80135c8:	2b1b      	cmp	r3, #27
 80135ca:	d806      	bhi.n	80135da <etharp_raw+0x56>
 80135cc:	4b2e      	ldr	r3, [pc, #184]	@ (8013688 <etharp_raw+0x104>)
 80135ce:	f240 4262 	movw	r2, #1122	@ 0x462
 80135d2:	4930      	ldr	r1, [pc, #192]	@ (8013694 <etharp_raw+0x110>)
 80135d4:	482e      	ldr	r0, [pc, #184]	@ (8013690 <etharp_raw+0x10c>)
 80135d6:	f001 fd0f 	bl	8014ff8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80135da:	69bb      	ldr	r3, [r7, #24]
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80135e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7f7 fb3c 	bl	800ac60 <lwip_htons>
 80135e8:	4603      	mov	r3, r0
 80135ea:	461a      	mov	r2, r3
 80135ec:	697b      	ldr	r3, [r7, #20]
 80135ee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80135f6:	2b06      	cmp	r3, #6
 80135f8:	d006      	beq.n	8013608 <etharp_raw+0x84>
 80135fa:	4b23      	ldr	r3, [pc, #140]	@ (8013688 <etharp_raw+0x104>)
 80135fc:	f240 4269 	movw	r2, #1129	@ 0x469
 8013600:	4925      	ldr	r1, [pc, #148]	@ (8013698 <etharp_raw+0x114>)
 8013602:	4823      	ldr	r0, [pc, #140]	@ (8013690 <etharp_raw+0x10c>)
 8013604:	f001 fcf8 	bl	8014ff8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	3308      	adds	r3, #8
 801360c:	2206      	movs	r2, #6
 801360e:	6839      	ldr	r1, [r7, #0]
 8013610:	4618      	mov	r0, r3
 8013612:	f001 fdd2 	bl	80151ba <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	3312      	adds	r3, #18
 801361a:	2206      	movs	r2, #6
 801361c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801361e:	4618      	mov	r0, r3
 8013620:	f001 fdcb 	bl	80151ba <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013624:	697b      	ldr	r3, [r7, #20]
 8013626:	330e      	adds	r3, #14
 8013628:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801362a:	6812      	ldr	r2, [r2, #0]
 801362c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	3318      	adds	r3, #24
 8013632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013634:	6812      	ldr	r2, [r2, #0]
 8013636:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013638:	697b      	ldr	r3, [r7, #20]
 801363a:	2200      	movs	r2, #0
 801363c:	701a      	strb	r2, [r3, #0]
 801363e:	2200      	movs	r2, #0
 8013640:	f042 0201 	orr.w	r2, r2, #1
 8013644:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	2200      	movs	r2, #0
 801364a:	f042 0208 	orr.w	r2, r2, #8
 801364e:	709a      	strb	r2, [r3, #2]
 8013650:	2200      	movs	r2, #0
 8013652:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013654:	697b      	ldr	r3, [r7, #20]
 8013656:	2206      	movs	r2, #6
 8013658:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801365a:	697b      	ldr	r3, [r7, #20]
 801365c:	2204      	movs	r2, #4
 801365e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013660:	f640 0306 	movw	r3, #2054	@ 0x806
 8013664:	9300      	str	r3, [sp, #0]
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	68ba      	ldr	r2, [r7, #8]
 801366a:	69b9      	ldr	r1, [r7, #24]
 801366c:	68f8      	ldr	r0, [r7, #12]
 801366e:	f001 fb7b 	bl	8014d68 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013672:	69b8      	ldr	r0, [r7, #24]
 8013674:	f7f8 fe52 	bl	800c31c <pbuf_free>
  p = NULL;
 8013678:	2300      	movs	r3, #0
 801367a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801367c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013680:	4618      	mov	r0, r3
 8013682:	3720      	adds	r7, #32
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}
 8013688:	08019384 	.word	0x08019384
 801368c:	080194d4 	.word	0x080194d4
 8013690:	080193fc 	.word	0x080193fc
 8013694:	08019584 	.word	0x08019584
 8013698:	080195b8 	.word	0x080195b8

0801369c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b088      	sub	sp, #32
 80136a0:	af04      	add	r7, sp, #16
 80136a2:	60f8      	str	r0, [r7, #12]
 80136a4:	60b9      	str	r1, [r7, #8]
 80136a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80136b8:	2201      	movs	r2, #1
 80136ba:	9203      	str	r2, [sp, #12]
 80136bc:	68ba      	ldr	r2, [r7, #8]
 80136be:	9202      	str	r2, [sp, #8]
 80136c0:	4a06      	ldr	r2, [pc, #24]	@ (80136dc <etharp_request_dst+0x40>)
 80136c2:	9201      	str	r2, [sp, #4]
 80136c4:	9300      	str	r3, [sp, #0]
 80136c6:	4603      	mov	r3, r0
 80136c8:	687a      	ldr	r2, [r7, #4]
 80136ca:	68f8      	ldr	r0, [r7, #12]
 80136cc:	f7ff ff5a 	bl	8013584 <etharp_raw>
 80136d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80136d2:	4618      	mov	r0, r3
 80136d4:	3710      	adds	r7, #16
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}
 80136da:	bf00      	nop
 80136dc:	08019b50 	.word	0x08019b50

080136e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b082      	sub	sp, #8
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
 80136e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80136ea:	4a05      	ldr	r2, [pc, #20]	@ (8013700 <etharp_request+0x20>)
 80136ec:	6839      	ldr	r1, [r7, #0]
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f7ff ffd4 	bl	801369c <etharp_request_dst>
 80136f4:	4603      	mov	r3, r0
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	3708      	adds	r7, #8
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}
 80136fe:	bf00      	nop
 8013700:	08019b48 	.word	0x08019b48

08013704 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b08e      	sub	sp, #56	@ 0x38
 8013708:	af04      	add	r7, sp, #16
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801370e:	4b79      	ldr	r3, [pc, #484]	@ (80138f4 <icmp_input+0x1f0>)
 8013710:	689b      	ldr	r3, [r3, #8]
 8013712:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013716:	781b      	ldrb	r3, [r3, #0]
 8013718:	f003 030f 	and.w	r3, r3, #15
 801371c:	b2db      	uxtb	r3, r3
 801371e:	009b      	lsls	r3, r3, #2
 8013720:	b2db      	uxtb	r3, r3
 8013722:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8013724:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013726:	2b13      	cmp	r3, #19
 8013728:	f240 80cd 	bls.w	80138c6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	895b      	ldrh	r3, [r3, #10]
 8013730:	2b03      	cmp	r3, #3
 8013732:	f240 80ca 	bls.w	80138ca <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	685b      	ldr	r3, [r3, #4]
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013740:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013744:	2b00      	cmp	r3, #0
 8013746:	f000 80b7 	beq.w	80138b8 <icmp_input+0x1b4>
 801374a:	2b08      	cmp	r3, #8
 801374c:	f040 80b7 	bne.w	80138be <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013750:	4b69      	ldr	r3, [pc, #420]	@ (80138f8 <icmp_input+0x1f4>)
 8013752:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013754:	4b67      	ldr	r3, [pc, #412]	@ (80138f4 <icmp_input+0x1f0>)
 8013756:	695b      	ldr	r3, [r3, #20]
 8013758:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801375c:	2be0      	cmp	r3, #224	@ 0xe0
 801375e:	f000 80bb 	beq.w	80138d8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013762:	4b64      	ldr	r3, [pc, #400]	@ (80138f4 <icmp_input+0x1f0>)
 8013764:	695b      	ldr	r3, [r3, #20]
 8013766:	4a63      	ldr	r2, [pc, #396]	@ (80138f4 <icmp_input+0x1f0>)
 8013768:	6812      	ldr	r2, [r2, #0]
 801376a:	4611      	mov	r1, r2
 801376c:	4618      	mov	r0, r3
 801376e:	f000 fbed 	bl	8013f4c <ip4_addr_isbroadcast_u32>
 8013772:	4603      	mov	r3, r0
 8013774:	2b00      	cmp	r3, #0
 8013776:	f040 80b1 	bne.w	80138dc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	891b      	ldrh	r3, [r3, #8]
 801377e:	2b07      	cmp	r3, #7
 8013780:	f240 80a5 	bls.w	80138ce <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013784:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013786:	330e      	adds	r3, #14
 8013788:	4619      	mov	r1, r3
 801378a:	6878      	ldr	r0, [r7, #4]
 801378c:	f7f8 fd30 	bl	800c1f0 <pbuf_add_header>
 8013790:	4603      	mov	r3, r0
 8013792:	2b00      	cmp	r3, #0
 8013794:	d04b      	beq.n	801382e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	891a      	ldrh	r2, [r3, #8]
 801379a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801379c:	4413      	add	r3, r2
 801379e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	891b      	ldrh	r3, [r3, #8]
 80137a4:	8b7a      	ldrh	r2, [r7, #26]
 80137a6:	429a      	cmp	r2, r3
 80137a8:	f0c0 809a 	bcc.w	80138e0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80137ac:	8b7b      	ldrh	r3, [r7, #26]
 80137ae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80137b2:	4619      	mov	r1, r3
 80137b4:	200e      	movs	r0, #14
 80137b6:	f7f8 facd 	bl	800bd54 <pbuf_alloc>
 80137ba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	f000 8090 	beq.w	80138e4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	895b      	ldrh	r3, [r3, #10]
 80137c8:	461a      	mov	r2, r3
 80137ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80137cc:	3308      	adds	r3, #8
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d203      	bcs.n	80137da <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80137d2:	6978      	ldr	r0, [r7, #20]
 80137d4:	f7f8 fda2 	bl	800c31c <pbuf_free>
          goto icmperr;
 80137d8:	e085      	b.n	80138e6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	685b      	ldr	r3, [r3, #4]
 80137de:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80137e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80137e2:	4618      	mov	r0, r3
 80137e4:	f001 fce9 	bl	80151ba <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80137e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80137ea:	4619      	mov	r1, r3
 80137ec:	6978      	ldr	r0, [r7, #20]
 80137ee:	f7f8 fd0f 	bl	800c210 <pbuf_remove_header>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d009      	beq.n	801380c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80137f8:	4b40      	ldr	r3, [pc, #256]	@ (80138fc <icmp_input+0x1f8>)
 80137fa:	22b6      	movs	r2, #182	@ 0xb6
 80137fc:	4940      	ldr	r1, [pc, #256]	@ (8013900 <icmp_input+0x1fc>)
 80137fe:	4841      	ldr	r0, [pc, #260]	@ (8013904 <icmp_input+0x200>)
 8013800:	f001 fbfa 	bl	8014ff8 <iprintf>
          pbuf_free(r);
 8013804:	6978      	ldr	r0, [r7, #20]
 8013806:	f7f8 fd89 	bl	800c31c <pbuf_free>
          goto icmperr;
 801380a:	e06c      	b.n	80138e6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801380c:	6879      	ldr	r1, [r7, #4]
 801380e:	6978      	ldr	r0, [r7, #20]
 8013810:	f7f8 feac 	bl	800c56c <pbuf_copy>
 8013814:	4603      	mov	r3, r0
 8013816:	2b00      	cmp	r3, #0
 8013818:	d003      	beq.n	8013822 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801381a:	6978      	ldr	r0, [r7, #20]
 801381c:	f7f8 fd7e 	bl	800c31c <pbuf_free>
          goto icmperr;
 8013820:	e061      	b.n	80138e6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f7f8 fd7a 	bl	800c31c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	607b      	str	r3, [r7, #4]
 801382c:	e00f      	b.n	801384e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801382e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013830:	330e      	adds	r3, #14
 8013832:	4619      	mov	r1, r3
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	f7f8 fceb 	bl	800c210 <pbuf_remove_header>
 801383a:	4603      	mov	r3, r0
 801383c:	2b00      	cmp	r3, #0
 801383e:	d006      	beq.n	801384e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013840:	4b2e      	ldr	r3, [pc, #184]	@ (80138fc <icmp_input+0x1f8>)
 8013842:	22c7      	movs	r2, #199	@ 0xc7
 8013844:	4930      	ldr	r1, [pc, #192]	@ (8013908 <icmp_input+0x204>)
 8013846:	482f      	ldr	r0, [pc, #188]	@ (8013904 <icmp_input+0x200>)
 8013848:	f001 fbd6 	bl	8014ff8 <iprintf>
          goto icmperr;
 801384c:	e04b      	b.n	80138e6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	685b      	ldr	r3, [r3, #4]
 8013852:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013854:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013856:	4619      	mov	r1, r3
 8013858:	6878      	ldr	r0, [r7, #4]
 801385a:	f7f8 fcc9 	bl	800c1f0 <pbuf_add_header>
 801385e:	4603      	mov	r3, r0
 8013860:	2b00      	cmp	r3, #0
 8013862:	d12b      	bne.n	80138bc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	685b      	ldr	r3, [r3, #4]
 8013868:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801386a:	69fb      	ldr	r3, [r7, #28]
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013872:	4b20      	ldr	r3, [pc, #128]	@ (80138f4 <icmp_input+0x1f0>)
 8013874:	691a      	ldr	r2, [r3, #16]
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	2200      	movs	r2, #0
 801387e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	2200      	movs	r2, #0
 8013884:	709a      	strb	r2, [r3, #2]
 8013886:	2200      	movs	r2, #0
 8013888:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	22ff      	movs	r2, #255	@ 0xff
 801388e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	2200      	movs	r2, #0
 8013894:	729a      	strb	r2, [r3, #10]
 8013896:	2200      	movs	r2, #0
 8013898:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	9302      	str	r3, [sp, #8]
 801389e:	2301      	movs	r3, #1
 80138a0:	9301      	str	r3, [sp, #4]
 80138a2:	2300      	movs	r3, #0
 80138a4:	9300      	str	r3, [sp, #0]
 80138a6:	23ff      	movs	r3, #255	@ 0xff
 80138a8:	2200      	movs	r2, #0
 80138aa:	69f9      	ldr	r1, [r7, #28]
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f000 fa75 	bl	8013d9c <ip4_output_if>
 80138b2:	4603      	mov	r3, r0
 80138b4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80138b6:	e001      	b.n	80138bc <icmp_input+0x1b8>
      break;
 80138b8:	bf00      	nop
 80138ba:	e000      	b.n	80138be <icmp_input+0x1ba>
      break;
 80138bc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f7f8 fd2c 	bl	800c31c <pbuf_free>
  return;
 80138c4:	e013      	b.n	80138ee <icmp_input+0x1ea>
    goto lenerr;
 80138c6:	bf00      	nop
 80138c8:	e002      	b.n	80138d0 <icmp_input+0x1cc>
    goto lenerr;
 80138ca:	bf00      	nop
 80138cc:	e000      	b.n	80138d0 <icmp_input+0x1cc>
        goto lenerr;
 80138ce:	bf00      	nop
lenerr:
  pbuf_free(p);
 80138d0:	6878      	ldr	r0, [r7, #4]
 80138d2:	f7f8 fd23 	bl	800c31c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80138d6:	e00a      	b.n	80138ee <icmp_input+0x1ea>
        goto icmperr;
 80138d8:	bf00      	nop
 80138da:	e004      	b.n	80138e6 <icmp_input+0x1e2>
        goto icmperr;
 80138dc:	bf00      	nop
 80138de:	e002      	b.n	80138e6 <icmp_input+0x1e2>
          goto icmperr;
 80138e0:	bf00      	nop
 80138e2:	e000      	b.n	80138e6 <icmp_input+0x1e2>
          goto icmperr;
 80138e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f7f8 fd18 	bl	800c31c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80138ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80138ee:	3728      	adds	r7, #40	@ 0x28
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}
 80138f4:	20005b3c 	.word	0x20005b3c
 80138f8:	20005b50 	.word	0x20005b50
 80138fc:	080195fc 	.word	0x080195fc
 8013900:	08019634 	.word	0x08019634
 8013904:	0801966c 	.word	0x0801966c
 8013908:	08019694 	.word	0x08019694

0801390c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b082      	sub	sp, #8
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
 8013914:	460b      	mov	r3, r1
 8013916:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013918:	78fb      	ldrb	r3, [r7, #3]
 801391a:	461a      	mov	r2, r3
 801391c:	2103      	movs	r1, #3
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	f000 f814 	bl	801394c <icmp_send_response>
}
 8013924:	bf00      	nop
 8013926:	3708      	adds	r7, #8
 8013928:	46bd      	mov	sp, r7
 801392a:	bd80      	pop	{r7, pc}

0801392c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
 8013934:	460b      	mov	r3, r1
 8013936:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013938:	78fb      	ldrb	r3, [r7, #3]
 801393a:	461a      	mov	r2, r3
 801393c:	210b      	movs	r1, #11
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	f000 f804 	bl	801394c <icmp_send_response>
}
 8013944:	bf00      	nop
 8013946:	3708      	adds	r7, #8
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}

0801394c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b08c      	sub	sp, #48	@ 0x30
 8013950:	af04      	add	r7, sp, #16
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	460b      	mov	r3, r1
 8013956:	70fb      	strb	r3, [r7, #3]
 8013958:	4613      	mov	r3, r2
 801395a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801395c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013960:	2124      	movs	r1, #36	@ 0x24
 8013962:	2022      	movs	r0, #34	@ 0x22
 8013964:	f7f8 f9f6 	bl	800bd54 <pbuf_alloc>
 8013968:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801396a:	69fb      	ldr	r3, [r7, #28]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d04c      	beq.n	8013a0a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013970:	69fb      	ldr	r3, [r7, #28]
 8013972:	895b      	ldrh	r3, [r3, #10]
 8013974:	2b23      	cmp	r3, #35	@ 0x23
 8013976:	d806      	bhi.n	8013986 <icmp_send_response+0x3a>
 8013978:	4b26      	ldr	r3, [pc, #152]	@ (8013a14 <icmp_send_response+0xc8>)
 801397a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801397e:	4926      	ldr	r1, [pc, #152]	@ (8013a18 <icmp_send_response+0xcc>)
 8013980:	4826      	ldr	r0, [pc, #152]	@ (8013a1c <icmp_send_response+0xd0>)
 8013982:	f001 fb39 	bl	8014ff8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	685b      	ldr	r3, [r3, #4]
 801398a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801398c:	69fb      	ldr	r3, [r7, #28]
 801398e:	685b      	ldr	r3, [r3, #4]
 8013990:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	78fa      	ldrb	r2, [r7, #3]
 8013996:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013998:	697b      	ldr	r3, [r7, #20]
 801399a:	78ba      	ldrb	r2, [r7, #2]
 801399c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801399e:	697b      	ldr	r3, [r7, #20]
 80139a0:	2200      	movs	r2, #0
 80139a2:	711a      	strb	r2, [r3, #4]
 80139a4:	2200      	movs	r2, #0
 80139a6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80139a8:	697b      	ldr	r3, [r7, #20]
 80139aa:	2200      	movs	r2, #0
 80139ac:	719a      	strb	r2, [r3, #6]
 80139ae:	2200      	movs	r2, #0
 80139b0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80139b2:	69fb      	ldr	r3, [r7, #28]
 80139b4:	685b      	ldr	r3, [r3, #4]
 80139b6:	f103 0008 	add.w	r0, r3, #8
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	685b      	ldr	r3, [r3, #4]
 80139be:	221c      	movs	r2, #28
 80139c0:	4619      	mov	r1, r3
 80139c2:	f001 fbfa 	bl	80151ba <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80139c6:	69bb      	ldr	r3, [r7, #24]
 80139c8:	68db      	ldr	r3, [r3, #12]
 80139ca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80139cc:	f107 030c 	add.w	r3, r7, #12
 80139d0:	4618      	mov	r0, r3
 80139d2:	f000 f825 	bl	8013a20 <ip4_route>
 80139d6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d011      	beq.n	8013a02 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	2200      	movs	r2, #0
 80139e2:	709a      	strb	r2, [r3, #2]
 80139e4:	2200      	movs	r2, #0
 80139e6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80139e8:	f107 020c 	add.w	r2, r7, #12
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	9302      	str	r3, [sp, #8]
 80139f0:	2301      	movs	r3, #1
 80139f2:	9301      	str	r3, [sp, #4]
 80139f4:	2300      	movs	r3, #0
 80139f6:	9300      	str	r3, [sp, #0]
 80139f8:	23ff      	movs	r3, #255	@ 0xff
 80139fa:	2100      	movs	r1, #0
 80139fc:	69f8      	ldr	r0, [r7, #28]
 80139fe:	f000 f9cd 	bl	8013d9c <ip4_output_if>
  }
  pbuf_free(q);
 8013a02:	69f8      	ldr	r0, [r7, #28]
 8013a04:	f7f8 fc8a 	bl	800c31c <pbuf_free>
 8013a08:	e000      	b.n	8013a0c <icmp_send_response+0xc0>
    return;
 8013a0a:	bf00      	nop
}
 8013a0c:	3720      	adds	r7, #32
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd80      	pop	{r7, pc}
 8013a12:	bf00      	nop
 8013a14:	080195fc 	.word	0x080195fc
 8013a18:	080196c8 	.word	0x080196c8
 8013a1c:	0801966c 	.word	0x0801966c

08013a20 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013a20:	b480      	push	{r7}
 8013a22:	b085      	sub	sp, #20
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013a28:	4b33      	ldr	r3, [pc, #204]	@ (8013af8 <ip4_route+0xd8>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	60fb      	str	r3, [r7, #12]
 8013a2e:	e036      	b.n	8013a9e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a36:	f003 0301 	and.w	r3, r3, #1
 8013a3a:	b2db      	uxtb	r3, r3
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d02b      	beq.n	8013a98 <ip4_route+0x78>
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a46:	089b      	lsrs	r3, r3, #2
 8013a48:	f003 0301 	and.w	r3, r3, #1
 8013a4c:	b2db      	uxtb	r3, r3
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d022      	beq.n	8013a98 <ip4_route+0x78>
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	3304      	adds	r3, #4
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d01d      	beq.n	8013a98 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681a      	ldr	r2, [r3, #0]
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	3304      	adds	r3, #4
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	405a      	eors	r2, r3
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	3308      	adds	r3, #8
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	4013      	ands	r3, r2
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d101      	bne.n	8013a78 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	e038      	b.n	8013aea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a7e:	f003 0302 	and.w	r3, r3, #2
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d108      	bne.n	8013a98 <ip4_route+0x78>
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	681a      	ldr	r2, [r3, #0]
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	330c      	adds	r3, #12
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d101      	bne.n	8013a98 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	e028      	b.n	8013aea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	60fb      	str	r3, [r7, #12]
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d1c5      	bne.n	8013a30 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013aa4:	4b15      	ldr	r3, [pc, #84]	@ (8013afc <ip4_route+0xdc>)
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d01a      	beq.n	8013ae2 <ip4_route+0xc2>
 8013aac:	4b13      	ldr	r3, [pc, #76]	@ (8013afc <ip4_route+0xdc>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013ab4:	f003 0301 	and.w	r3, r3, #1
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d012      	beq.n	8013ae2 <ip4_route+0xc2>
 8013abc:	4b0f      	ldr	r3, [pc, #60]	@ (8013afc <ip4_route+0xdc>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013ac4:	f003 0304 	and.w	r3, r3, #4
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d00a      	beq.n	8013ae2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013acc:	4b0b      	ldr	r3, [pc, #44]	@ (8013afc <ip4_route+0xdc>)
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	3304      	adds	r3, #4
 8013ad2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d004      	beq.n	8013ae2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	b2db      	uxtb	r3, r3
 8013ade:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ae0:	d101      	bne.n	8013ae6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	e001      	b.n	8013aea <ip4_route+0xca>
  }

  return netif_default;
 8013ae6:	4b05      	ldr	r3, [pc, #20]	@ (8013afc <ip4_route+0xdc>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
}
 8013aea:	4618      	mov	r0, r3
 8013aec:	3714      	adds	r7, #20
 8013aee:	46bd      	mov	sp, r7
 8013af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af4:	4770      	bx	lr
 8013af6:	bf00      	nop
 8013af8:	2000b260 	.word	0x2000b260
 8013afc:	2000b264 	.word	0x2000b264

08013b00 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b082      	sub	sp, #8
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013b0e:	f003 0301 	and.w	r3, r3, #1
 8013b12:	b2db      	uxtb	r3, r3
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d016      	beq.n	8013b46 <ip4_input_accept+0x46>
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	3304      	adds	r3, #4
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d011      	beq.n	8013b46 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013b22:	4b0b      	ldr	r3, [pc, #44]	@ (8013b50 <ip4_input_accept+0x50>)
 8013b24:	695a      	ldr	r2, [r3, #20]
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	3304      	adds	r3, #4
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d008      	beq.n	8013b42 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013b30:	4b07      	ldr	r3, [pc, #28]	@ (8013b50 <ip4_input_accept+0x50>)
 8013b32:	695b      	ldr	r3, [r3, #20]
 8013b34:	6879      	ldr	r1, [r7, #4]
 8013b36:	4618      	mov	r0, r3
 8013b38:	f000 fa08 	bl	8013f4c <ip4_addr_isbroadcast_u32>
 8013b3c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d001      	beq.n	8013b46 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013b42:	2301      	movs	r3, #1
 8013b44:	e000      	b.n	8013b48 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013b46:	2300      	movs	r3, #0
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3708      	adds	r7, #8
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	20005b3c 	.word	0x20005b3c

08013b54 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b086      	sub	sp, #24
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
 8013b5c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	685b      	ldr	r3, [r3, #4]
 8013b62:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013b64:	697b      	ldr	r3, [r7, #20]
 8013b66:	781b      	ldrb	r3, [r3, #0]
 8013b68:	091b      	lsrs	r3, r3, #4
 8013b6a:	b2db      	uxtb	r3, r3
 8013b6c:	2b04      	cmp	r3, #4
 8013b6e:	d004      	beq.n	8013b7a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f7f8 fbd3 	bl	800c31c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013b76:	2300      	movs	r3, #0
 8013b78:	e107      	b.n	8013d8a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013b7a:	697b      	ldr	r3, [r7, #20]
 8013b7c:	781b      	ldrb	r3, [r3, #0]
 8013b7e:	f003 030f 	and.w	r3, r3, #15
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	009b      	lsls	r3, r3, #2
 8013b86:	b2db      	uxtb	r3, r3
 8013b88:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013b8a:	697b      	ldr	r3, [r7, #20]
 8013b8c:	885b      	ldrh	r3, [r3, #2]
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7f7 f865 	bl	800ac60 <lwip_htons>
 8013b96:	4603      	mov	r3, r0
 8013b98:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	891b      	ldrh	r3, [r3, #8]
 8013b9e:	89ba      	ldrh	r2, [r7, #12]
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	d204      	bcs.n	8013bae <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013ba4:	89bb      	ldrh	r3, [r7, #12]
 8013ba6:	4619      	mov	r1, r3
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f7f8 fa31 	bl	800c010 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	895b      	ldrh	r3, [r3, #10]
 8013bb2:	89fa      	ldrh	r2, [r7, #14]
 8013bb4:	429a      	cmp	r2, r3
 8013bb6:	d807      	bhi.n	8013bc8 <ip4_input+0x74>
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	891b      	ldrh	r3, [r3, #8]
 8013bbc:	89ba      	ldrh	r2, [r7, #12]
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d802      	bhi.n	8013bc8 <ip4_input+0x74>
 8013bc2:	89fb      	ldrh	r3, [r7, #14]
 8013bc4:	2b13      	cmp	r3, #19
 8013bc6:	d804      	bhi.n	8013bd2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013bc8:	6878      	ldr	r0, [r7, #4]
 8013bca:	f7f8 fba7 	bl	800c31c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013bce:	2300      	movs	r3, #0
 8013bd0:	e0db      	b.n	8013d8a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	691b      	ldr	r3, [r3, #16]
 8013bd6:	4a6f      	ldr	r2, [pc, #444]	@ (8013d94 <ip4_input+0x240>)
 8013bd8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013bda:	697b      	ldr	r3, [r7, #20]
 8013bdc:	68db      	ldr	r3, [r3, #12]
 8013bde:	4a6d      	ldr	r2, [pc, #436]	@ (8013d94 <ip4_input+0x240>)
 8013be0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013be2:	4b6c      	ldr	r3, [pc, #432]	@ (8013d94 <ip4_input+0x240>)
 8013be4:	695b      	ldr	r3, [r3, #20]
 8013be6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013bea:	2be0      	cmp	r3, #224	@ 0xe0
 8013bec:	d112      	bne.n	8013c14 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013bf4:	f003 0301 	and.w	r3, r3, #1
 8013bf8:	b2db      	uxtb	r3, r3
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d007      	beq.n	8013c0e <ip4_input+0xba>
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	3304      	adds	r3, #4
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d002      	beq.n	8013c0e <ip4_input+0xba>
      netif = inp;
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	613b      	str	r3, [r7, #16]
 8013c0c:	e02a      	b.n	8013c64 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	613b      	str	r3, [r7, #16]
 8013c12:	e027      	b.n	8013c64 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013c14:	6838      	ldr	r0, [r7, #0]
 8013c16:	f7ff ff73 	bl	8013b00 <ip4_input_accept>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d002      	beq.n	8013c26 <ip4_input+0xd2>
      netif = inp;
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	613b      	str	r3, [r7, #16]
 8013c24:	e01e      	b.n	8013c64 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013c26:	2300      	movs	r3, #0
 8013c28:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013c2a:	4b5a      	ldr	r3, [pc, #360]	@ (8013d94 <ip4_input+0x240>)
 8013c2c:	695b      	ldr	r3, [r3, #20]
 8013c2e:	b2db      	uxtb	r3, r3
 8013c30:	2b7f      	cmp	r3, #127	@ 0x7f
 8013c32:	d017      	beq.n	8013c64 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013c34:	4b58      	ldr	r3, [pc, #352]	@ (8013d98 <ip4_input+0x244>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	613b      	str	r3, [r7, #16]
 8013c3a:	e00e      	b.n	8013c5a <ip4_input+0x106>
          if (netif == inp) {
 8013c3c:	693a      	ldr	r2, [r7, #16]
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	429a      	cmp	r2, r3
 8013c42:	d006      	beq.n	8013c52 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013c44:	6938      	ldr	r0, [r7, #16]
 8013c46:	f7ff ff5b 	bl	8013b00 <ip4_input_accept>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d108      	bne.n	8013c62 <ip4_input+0x10e>
 8013c50:	e000      	b.n	8013c54 <ip4_input+0x100>
            continue;
 8013c52:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013c54:	693b      	ldr	r3, [r7, #16]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	613b      	str	r3, [r7, #16]
 8013c5a:	693b      	ldr	r3, [r7, #16]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d1ed      	bne.n	8013c3c <ip4_input+0xe8>
 8013c60:	e000      	b.n	8013c64 <ip4_input+0x110>
            break;
 8013c62:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013c64:	4b4b      	ldr	r3, [pc, #300]	@ (8013d94 <ip4_input+0x240>)
 8013c66:	691b      	ldr	r3, [r3, #16]
 8013c68:	6839      	ldr	r1, [r7, #0]
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f000 f96e 	bl	8013f4c <ip4_addr_isbroadcast_u32>
 8013c70:	4603      	mov	r3, r0
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d105      	bne.n	8013c82 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013c76:	4b47      	ldr	r3, [pc, #284]	@ (8013d94 <ip4_input+0x240>)
 8013c78:	691b      	ldr	r3, [r3, #16]
 8013c7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013c7e:	2be0      	cmp	r3, #224	@ 0xe0
 8013c80:	d104      	bne.n	8013c8c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f7f8 fb4a 	bl	800c31c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	e07e      	b.n	8013d8a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013c8c:	693b      	ldr	r3, [r7, #16]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d104      	bne.n	8013c9c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013c92:	6878      	ldr	r0, [r7, #4]
 8013c94:	f7f8 fb42 	bl	800c31c <pbuf_free>
    return ERR_OK;
 8013c98:	2300      	movs	r3, #0
 8013c9a:	e076      	b.n	8013d8a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013c9c:	697b      	ldr	r3, [r7, #20]
 8013c9e:	88db      	ldrh	r3, [r3, #6]
 8013ca0:	b29b      	uxth	r3, r3
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8013ca8:	4013      	ands	r3, r2
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d00b      	beq.n	8013cc6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013cae:	6878      	ldr	r0, [r7, #4]
 8013cb0:	f000 fc92 	bl	80145d8 <ip4_reass>
 8013cb4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d101      	bne.n	8013cc0 <ip4_input+0x16c>
      return ERR_OK;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	e064      	b.n	8013d8a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013cc6:	4a33      	ldr	r2, [pc, #204]	@ (8013d94 <ip4_input+0x240>)
 8013cc8:	693b      	ldr	r3, [r7, #16]
 8013cca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013ccc:	4a31      	ldr	r2, [pc, #196]	@ (8013d94 <ip4_input+0x240>)
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013cd2:	4a30      	ldr	r2, [pc, #192]	@ (8013d94 <ip4_input+0x240>)
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	781b      	ldrb	r3, [r3, #0]
 8013cdc:	f003 030f 	and.w	r3, r3, #15
 8013ce0:	b2db      	uxtb	r3, r3
 8013ce2:	009b      	lsls	r3, r3, #2
 8013ce4:	b2db      	uxtb	r3, r3
 8013ce6:	461a      	mov	r2, r3
 8013ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8013d94 <ip4_input+0x240>)
 8013cea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013cec:	89fb      	ldrh	r3, [r7, #14]
 8013cee:	4619      	mov	r1, r3
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	f7f8 fa8d 	bl	800c210 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013cf6:	697b      	ldr	r3, [r7, #20]
 8013cf8:	7a5b      	ldrb	r3, [r3, #9]
 8013cfa:	2b11      	cmp	r3, #17
 8013cfc:	d006      	beq.n	8013d0c <ip4_input+0x1b8>
 8013cfe:	2b11      	cmp	r3, #17
 8013d00:	dc13      	bgt.n	8013d2a <ip4_input+0x1d6>
 8013d02:	2b01      	cmp	r3, #1
 8013d04:	d00c      	beq.n	8013d20 <ip4_input+0x1cc>
 8013d06:	2b06      	cmp	r3, #6
 8013d08:	d005      	beq.n	8013d16 <ip4_input+0x1c2>
 8013d0a:	e00e      	b.n	8013d2a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013d0c:	6839      	ldr	r1, [r7, #0]
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f7fe f984 	bl	801201c <udp_input>
        break;
 8013d14:	e026      	b.n	8013d64 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013d16:	6839      	ldr	r1, [r7, #0]
 8013d18:	6878      	ldr	r0, [r7, #4]
 8013d1a:	f7fa f9cb 	bl	800e0b4 <tcp_input>
        break;
 8013d1e:	e021      	b.n	8013d64 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013d20:	6839      	ldr	r1, [r7, #0]
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f7ff fcee 	bl	8013704 <icmp_input>
        break;
 8013d28:	e01c      	b.n	8013d64 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8013d94 <ip4_input+0x240>)
 8013d2c:	695b      	ldr	r3, [r3, #20]
 8013d2e:	6939      	ldr	r1, [r7, #16]
 8013d30:	4618      	mov	r0, r3
 8013d32:	f000 f90b 	bl	8013f4c <ip4_addr_isbroadcast_u32>
 8013d36:	4603      	mov	r3, r0
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d10f      	bne.n	8013d5c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013d3c:	4b15      	ldr	r3, [pc, #84]	@ (8013d94 <ip4_input+0x240>)
 8013d3e:	695b      	ldr	r3, [r3, #20]
 8013d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013d44:	2be0      	cmp	r3, #224	@ 0xe0
 8013d46:	d009      	beq.n	8013d5c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013d48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013d4c:	4619      	mov	r1, r3
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	f7f8 fad1 	bl	800c2f6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013d54:	2102      	movs	r1, #2
 8013d56:	6878      	ldr	r0, [r7, #4]
 8013d58:	f7ff fdd8 	bl	801390c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	f7f8 fadd 	bl	800c31c <pbuf_free>
        break;
 8013d62:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013d64:	4b0b      	ldr	r3, [pc, #44]	@ (8013d94 <ip4_input+0x240>)
 8013d66:	2200      	movs	r2, #0
 8013d68:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8013d94 <ip4_input+0x240>)
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013d70:	4b08      	ldr	r3, [pc, #32]	@ (8013d94 <ip4_input+0x240>)
 8013d72:	2200      	movs	r2, #0
 8013d74:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013d76:	4b07      	ldr	r3, [pc, #28]	@ (8013d94 <ip4_input+0x240>)
 8013d78:	2200      	movs	r2, #0
 8013d7a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013d7c:	4b05      	ldr	r3, [pc, #20]	@ (8013d94 <ip4_input+0x240>)
 8013d7e:	2200      	movs	r2, #0
 8013d80:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013d82:	4b04      	ldr	r3, [pc, #16]	@ (8013d94 <ip4_input+0x240>)
 8013d84:	2200      	movs	r2, #0
 8013d86:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013d88:	2300      	movs	r3, #0
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3718      	adds	r7, #24
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}
 8013d92:	bf00      	nop
 8013d94:	20005b3c 	.word	0x20005b3c
 8013d98:	2000b260 	.word	0x2000b260

08013d9c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b08a      	sub	sp, #40	@ 0x28
 8013da0:	af04      	add	r7, sp, #16
 8013da2:	60f8      	str	r0, [r7, #12]
 8013da4:	60b9      	str	r1, [r7, #8]
 8013da6:	607a      	str	r2, [r7, #4]
 8013da8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d009      	beq.n	8013dc8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d003      	beq.n	8013dc2 <ip4_output_if+0x26>
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d102      	bne.n	8013dc8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dc4:	3304      	adds	r3, #4
 8013dc6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013dc8:	78fa      	ldrb	r2, [r7, #3]
 8013dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dcc:	9302      	str	r3, [sp, #8]
 8013dce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013dd2:	9301      	str	r3, [sp, #4]
 8013dd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013dd8:	9300      	str	r3, [sp, #0]
 8013dda:	4613      	mov	r3, r2
 8013ddc:	687a      	ldr	r2, [r7, #4]
 8013dde:	6979      	ldr	r1, [r7, #20]
 8013de0:	68f8      	ldr	r0, [r7, #12]
 8013de2:	f000 f805 	bl	8013df0 <ip4_output_if_src>
 8013de6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	3718      	adds	r7, #24
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd80      	pop	{r7, pc}

08013df0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b088      	sub	sp, #32
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	60f8      	str	r0, [r7, #12]
 8013df8:	60b9      	str	r1, [r7, #8]
 8013dfa:	607a      	str	r2, [r7, #4]
 8013dfc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	7b9b      	ldrb	r3, [r3, #14]
 8013e02:	2b01      	cmp	r3, #1
 8013e04:	d006      	beq.n	8013e14 <ip4_output_if_src+0x24>
 8013e06:	4b4b      	ldr	r3, [pc, #300]	@ (8013f34 <ip4_output_if_src+0x144>)
 8013e08:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8013e0c:	494a      	ldr	r1, [pc, #296]	@ (8013f38 <ip4_output_if_src+0x148>)
 8013e0e:	484b      	ldr	r0, [pc, #300]	@ (8013f3c <ip4_output_if_src+0x14c>)
 8013e10:	f001 f8f2 	bl	8014ff8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d060      	beq.n	8013edc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013e1a:	2314      	movs	r3, #20
 8013e1c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013e1e:	2114      	movs	r1, #20
 8013e20:	68f8      	ldr	r0, [r7, #12]
 8013e22:	f7f8 f9e5 	bl	800c1f0 <pbuf_add_header>
 8013e26:	4603      	mov	r3, r0
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d002      	beq.n	8013e32 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013e2c:	f06f 0301 	mvn.w	r3, #1
 8013e30:	e07c      	b.n	8013f2c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	685b      	ldr	r3, [r3, #4]
 8013e36:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	895b      	ldrh	r3, [r3, #10]
 8013e3c:	2b13      	cmp	r3, #19
 8013e3e:	d806      	bhi.n	8013e4e <ip4_output_if_src+0x5e>
 8013e40:	4b3c      	ldr	r3, [pc, #240]	@ (8013f34 <ip4_output_if_src+0x144>)
 8013e42:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8013e46:	493e      	ldr	r1, [pc, #248]	@ (8013f40 <ip4_output_if_src+0x150>)
 8013e48:	483c      	ldr	r0, [pc, #240]	@ (8013f3c <ip4_output_if_src+0x14c>)
 8013e4a:	f001 f8d5 	bl	8014ff8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013e4e:	69fb      	ldr	r3, [r7, #28]
 8013e50:	78fa      	ldrb	r2, [r7, #3]
 8013e52:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013e54:	69fb      	ldr	r3, [r7, #28]
 8013e56:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013e5a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	681a      	ldr	r2, [r3, #0]
 8013e60:	69fb      	ldr	r3, [r7, #28]
 8013e62:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013e64:	8b7b      	ldrh	r3, [r7, #26]
 8013e66:	089b      	lsrs	r3, r3, #2
 8013e68:	b29b      	uxth	r3, r3
 8013e6a:	b2db      	uxtb	r3, r3
 8013e6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e70:	b2da      	uxtb	r2, r3
 8013e72:	69fb      	ldr	r3, [r7, #28]
 8013e74:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013e76:	69fb      	ldr	r3, [r7, #28]
 8013e78:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013e7c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	891b      	ldrh	r3, [r3, #8]
 8013e82:	4618      	mov	r0, r3
 8013e84:	f7f6 feec 	bl	800ac60 <lwip_htons>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	461a      	mov	r2, r3
 8013e8c:	69fb      	ldr	r3, [r7, #28]
 8013e8e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013e90:	69fb      	ldr	r3, [r7, #28]
 8013e92:	2200      	movs	r2, #0
 8013e94:	719a      	strb	r2, [r3, #6]
 8013e96:	2200      	movs	r2, #0
 8013e98:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8013f44 <ip4_output_if_src+0x154>)
 8013e9c:	881b      	ldrh	r3, [r3, #0]
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7f6 fede 	bl	800ac60 <lwip_htons>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	461a      	mov	r2, r3
 8013ea8:	69fb      	ldr	r3, [r7, #28]
 8013eaa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013eac:	4b25      	ldr	r3, [pc, #148]	@ (8013f44 <ip4_output_if_src+0x154>)
 8013eae:	881b      	ldrh	r3, [r3, #0]
 8013eb0:	3301      	adds	r3, #1
 8013eb2:	b29a      	uxth	r2, r3
 8013eb4:	4b23      	ldr	r3, [pc, #140]	@ (8013f44 <ip4_output_if_src+0x154>)
 8013eb6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d104      	bne.n	8013ec8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013ebe:	4b22      	ldr	r3, [pc, #136]	@ (8013f48 <ip4_output_if_src+0x158>)
 8013ec0:	681a      	ldr	r2, [r3, #0]
 8013ec2:	69fb      	ldr	r3, [r7, #28]
 8013ec4:	60da      	str	r2, [r3, #12]
 8013ec6:	e003      	b.n	8013ed0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	681a      	ldr	r2, [r3, #0]
 8013ecc:	69fb      	ldr	r3, [r7, #28]
 8013ece:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013ed0:	69fb      	ldr	r3, [r7, #28]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	729a      	strb	r2, [r3, #10]
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	72da      	strb	r2, [r3, #11]
 8013eda:	e00f      	b.n	8013efc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	895b      	ldrh	r3, [r3, #10]
 8013ee0:	2b13      	cmp	r3, #19
 8013ee2:	d802      	bhi.n	8013eea <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013ee4:	f06f 0301 	mvn.w	r3, #1
 8013ee8:	e020      	b.n	8013f2c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	685b      	ldr	r3, [r3, #4]
 8013eee:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013ef0:	69fb      	ldr	r3, [r7, #28]
 8013ef2:	691b      	ldr	r3, [r3, #16]
 8013ef4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013ef6:	f107 0314 	add.w	r3, r7, #20
 8013efa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013efe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d00c      	beq.n	8013f1e <ip4_output_if_src+0x12e>
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	891a      	ldrh	r2, [r3, #8]
 8013f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013f0c:	429a      	cmp	r2, r3
 8013f0e:	d906      	bls.n	8013f1e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013f10:	687a      	ldr	r2, [r7, #4]
 8013f12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013f14:	68f8      	ldr	r0, [r7, #12]
 8013f16:	f000 fd53 	bl	80149c0 <ip4_frag>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	e006      	b.n	8013f2c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f20:	695b      	ldr	r3, [r3, #20]
 8013f22:	687a      	ldr	r2, [r7, #4]
 8013f24:	68f9      	ldr	r1, [r7, #12]
 8013f26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013f28:	4798      	blx	r3
 8013f2a:	4603      	mov	r3, r0
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3720      	adds	r7, #32
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}
 8013f34:	080196f4 	.word	0x080196f4
 8013f38:	08019728 	.word	0x08019728
 8013f3c:	08019734 	.word	0x08019734
 8013f40:	0801975c 	.word	0x0801975c
 8013f44:	2000b3be 	.word	0x2000b3be
 8013f48:	08019b44 	.word	0x08019b44

08013f4c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013f4c:	b480      	push	{r7}
 8013f4e:	b085      	sub	sp, #20
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
 8013f54:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013f60:	d002      	beq.n	8013f68 <ip4_addr_isbroadcast_u32+0x1c>
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d101      	bne.n	8013f6c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013f68:	2301      	movs	r3, #1
 8013f6a:	e02a      	b.n	8013fc2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013f72:	f003 0302 	and.w	r3, r3, #2
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d101      	bne.n	8013f7e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	e021      	b.n	8013fc2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013f7e:	683b      	ldr	r3, [r7, #0]
 8013f80:	3304      	adds	r3, #4
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	687a      	ldr	r2, [r7, #4]
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d101      	bne.n	8013f8e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	e019      	b.n	8013fc2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013f8e:	68fa      	ldr	r2, [r7, #12]
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	3304      	adds	r3, #4
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	405a      	eors	r2, r3
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	3308      	adds	r3, #8
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	4013      	ands	r3, r2
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d10d      	bne.n	8013fc0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	3308      	adds	r3, #8
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	43da      	mvns	r2, r3
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	3308      	adds	r3, #8
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	d101      	bne.n	8013fc0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	e000      	b.n	8013fc2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013fc0:	2300      	movs	r3, #0
  }
}
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	3714      	adds	r7, #20
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fcc:	4770      	bx	lr
	...

08013fd0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b084      	sub	sp, #16
 8013fd4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013fda:	4b12      	ldr	r3, [pc, #72]	@ (8014024 <ip_reass_tmr+0x54>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013fe0:	e018      	b.n	8014014 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	7fdb      	ldrb	r3, [r3, #31]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d00b      	beq.n	8014002 <ip_reass_tmr+0x32>
      r->timer--;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	7fdb      	ldrb	r3, [r3, #31]
 8013fee:	3b01      	subs	r3, #1
 8013ff0:	b2da      	uxtb	r2, r3
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	60fb      	str	r3, [r7, #12]
 8014000:	e008      	b.n	8014014 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801400c:	68b9      	ldr	r1, [r7, #8]
 801400e:	6878      	ldr	r0, [r7, #4]
 8014010:	f000 f80a 	bl	8014028 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d1e3      	bne.n	8013fe2 <ip_reass_tmr+0x12>
    }
  }
}
 801401a:	bf00      	nop
 801401c:	bf00      	nop
 801401e:	3710      	adds	r7, #16
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}
 8014024:	2000b3c0 	.word	0x2000b3c0

08014028 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b088      	sub	sp, #32
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014032:	2300      	movs	r3, #0
 8014034:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014036:	683a      	ldr	r2, [r7, #0]
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	429a      	cmp	r2, r3
 801403c:	d105      	bne.n	801404a <ip_reass_free_complete_datagram+0x22>
 801403e:	4b45      	ldr	r3, [pc, #276]	@ (8014154 <ip_reass_free_complete_datagram+0x12c>)
 8014040:	22ab      	movs	r2, #171	@ 0xab
 8014042:	4945      	ldr	r1, [pc, #276]	@ (8014158 <ip_reass_free_complete_datagram+0x130>)
 8014044:	4845      	ldr	r0, [pc, #276]	@ (801415c <ip_reass_free_complete_datagram+0x134>)
 8014046:	f000 ffd7 	bl	8014ff8 <iprintf>
  if (prev != NULL) {
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d00a      	beq.n	8014066 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	687a      	ldr	r2, [r7, #4]
 8014056:	429a      	cmp	r2, r3
 8014058:	d005      	beq.n	8014066 <ip_reass_free_complete_datagram+0x3e>
 801405a:	4b3e      	ldr	r3, [pc, #248]	@ (8014154 <ip_reass_free_complete_datagram+0x12c>)
 801405c:	22ad      	movs	r2, #173	@ 0xad
 801405e:	4940      	ldr	r1, [pc, #256]	@ (8014160 <ip_reass_free_complete_datagram+0x138>)
 8014060:	483e      	ldr	r0, [pc, #248]	@ (801415c <ip_reass_free_complete_datagram+0x134>)
 8014062:	f000 ffc9 	bl	8014ff8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	685b      	ldr	r3, [r3, #4]
 801406a:	685b      	ldr	r3, [r3, #4]
 801406c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	889b      	ldrh	r3, [r3, #4]
 8014072:	b29b      	uxth	r3, r3
 8014074:	2b00      	cmp	r3, #0
 8014076:	d12a      	bne.n	80140ce <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	685b      	ldr	r3, [r3, #4]
 801407c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	681a      	ldr	r2, [r3, #0]
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014086:	69bb      	ldr	r3, [r7, #24]
 8014088:	6858      	ldr	r0, [r3, #4]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	3308      	adds	r3, #8
 801408e:	2214      	movs	r2, #20
 8014090:	4619      	mov	r1, r3
 8014092:	f001 f892 	bl	80151ba <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014096:	2101      	movs	r1, #1
 8014098:	69b8      	ldr	r0, [r7, #24]
 801409a:	f7ff fc47 	bl	801392c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801409e:	69b8      	ldr	r0, [r7, #24]
 80140a0:	f7f8 f9c4 	bl	800c42c <pbuf_clen>
 80140a4:	4603      	mov	r3, r0
 80140a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80140a8:	8bfa      	ldrh	r2, [r7, #30]
 80140aa:	8a7b      	ldrh	r3, [r7, #18]
 80140ac:	4413      	add	r3, r2
 80140ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80140b2:	db05      	blt.n	80140c0 <ip_reass_free_complete_datagram+0x98>
 80140b4:	4b27      	ldr	r3, [pc, #156]	@ (8014154 <ip_reass_free_complete_datagram+0x12c>)
 80140b6:	22bc      	movs	r2, #188	@ 0xbc
 80140b8:	492a      	ldr	r1, [pc, #168]	@ (8014164 <ip_reass_free_complete_datagram+0x13c>)
 80140ba:	4828      	ldr	r0, [pc, #160]	@ (801415c <ip_reass_free_complete_datagram+0x134>)
 80140bc:	f000 ff9c 	bl	8014ff8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80140c0:	8bfa      	ldrh	r2, [r7, #30]
 80140c2:	8a7b      	ldrh	r3, [r7, #18]
 80140c4:	4413      	add	r3, r2
 80140c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80140c8:	69b8      	ldr	r0, [r7, #24]
 80140ca:	f7f8 f927 	bl	800c31c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	685b      	ldr	r3, [r3, #4]
 80140d2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80140d4:	e01f      	b.n	8014116 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80140d6:	69bb      	ldr	r3, [r7, #24]
 80140d8:	685b      	ldr	r3, [r3, #4]
 80140da:	617b      	str	r3, [r7, #20]
    pcur = p;
 80140dc:	69bb      	ldr	r3, [r7, #24]
 80140de:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80140e6:	68f8      	ldr	r0, [r7, #12]
 80140e8:	f7f8 f9a0 	bl	800c42c <pbuf_clen>
 80140ec:	4603      	mov	r3, r0
 80140ee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80140f0:	8bfa      	ldrh	r2, [r7, #30]
 80140f2:	8a7b      	ldrh	r3, [r7, #18]
 80140f4:	4413      	add	r3, r2
 80140f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80140fa:	db05      	blt.n	8014108 <ip_reass_free_complete_datagram+0xe0>
 80140fc:	4b15      	ldr	r3, [pc, #84]	@ (8014154 <ip_reass_free_complete_datagram+0x12c>)
 80140fe:	22cc      	movs	r2, #204	@ 0xcc
 8014100:	4918      	ldr	r1, [pc, #96]	@ (8014164 <ip_reass_free_complete_datagram+0x13c>)
 8014102:	4816      	ldr	r0, [pc, #88]	@ (801415c <ip_reass_free_complete_datagram+0x134>)
 8014104:	f000 ff78 	bl	8014ff8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014108:	8bfa      	ldrh	r2, [r7, #30]
 801410a:	8a7b      	ldrh	r3, [r7, #18]
 801410c:	4413      	add	r3, r2
 801410e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014110:	68f8      	ldr	r0, [r7, #12]
 8014112:	f7f8 f903 	bl	800c31c <pbuf_free>
  while (p != NULL) {
 8014116:	69bb      	ldr	r3, [r7, #24]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d1dc      	bne.n	80140d6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801411c:	6839      	ldr	r1, [r7, #0]
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f000 f8c2 	bl	80142a8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014124:	4b10      	ldr	r3, [pc, #64]	@ (8014168 <ip_reass_free_complete_datagram+0x140>)
 8014126:	881b      	ldrh	r3, [r3, #0]
 8014128:	8bfa      	ldrh	r2, [r7, #30]
 801412a:	429a      	cmp	r2, r3
 801412c:	d905      	bls.n	801413a <ip_reass_free_complete_datagram+0x112>
 801412e:	4b09      	ldr	r3, [pc, #36]	@ (8014154 <ip_reass_free_complete_datagram+0x12c>)
 8014130:	22d2      	movs	r2, #210	@ 0xd2
 8014132:	490e      	ldr	r1, [pc, #56]	@ (801416c <ip_reass_free_complete_datagram+0x144>)
 8014134:	4809      	ldr	r0, [pc, #36]	@ (801415c <ip_reass_free_complete_datagram+0x134>)
 8014136:	f000 ff5f 	bl	8014ff8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801413a:	4b0b      	ldr	r3, [pc, #44]	@ (8014168 <ip_reass_free_complete_datagram+0x140>)
 801413c:	881a      	ldrh	r2, [r3, #0]
 801413e:	8bfb      	ldrh	r3, [r7, #30]
 8014140:	1ad3      	subs	r3, r2, r3
 8014142:	b29a      	uxth	r2, r3
 8014144:	4b08      	ldr	r3, [pc, #32]	@ (8014168 <ip_reass_free_complete_datagram+0x140>)
 8014146:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014148:	8bfb      	ldrh	r3, [r7, #30]
}
 801414a:	4618      	mov	r0, r3
 801414c:	3720      	adds	r7, #32
 801414e:	46bd      	mov	sp, r7
 8014150:	bd80      	pop	{r7, pc}
 8014152:	bf00      	nop
 8014154:	0801978c 	.word	0x0801978c
 8014158:	080197c8 	.word	0x080197c8
 801415c:	080197d4 	.word	0x080197d4
 8014160:	080197fc 	.word	0x080197fc
 8014164:	08019810 	.word	0x08019810
 8014168:	2000b3c4 	.word	0x2000b3c4
 801416c:	08019830 	.word	0x08019830

08014170 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b08a      	sub	sp, #40	@ 0x28
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
 8014178:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801417a:	2300      	movs	r3, #0
 801417c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801417e:	2300      	movs	r3, #0
 8014180:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014182:	2300      	movs	r3, #0
 8014184:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014186:	2300      	movs	r3, #0
 8014188:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801418a:	2300      	movs	r3, #0
 801418c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801418e:	4b28      	ldr	r3, [pc, #160]	@ (8014230 <ip_reass_remove_oldest_datagram+0xc0>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014194:	e030      	b.n	80141f8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014198:	695a      	ldr	r2, [r3, #20]
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	68db      	ldr	r3, [r3, #12]
 801419e:	429a      	cmp	r2, r3
 80141a0:	d10c      	bne.n	80141bc <ip_reass_remove_oldest_datagram+0x4c>
 80141a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141a4:	699a      	ldr	r2, [r3, #24]
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	691b      	ldr	r3, [r3, #16]
 80141aa:	429a      	cmp	r2, r3
 80141ac:	d106      	bne.n	80141bc <ip_reass_remove_oldest_datagram+0x4c>
 80141ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141b0:	899a      	ldrh	r2, [r3, #12]
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	889b      	ldrh	r3, [r3, #4]
 80141b6:	b29b      	uxth	r3, r3
 80141b8:	429a      	cmp	r2, r3
 80141ba:	d014      	beq.n	80141e6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80141bc:	693b      	ldr	r3, [r7, #16]
 80141be:	3301      	adds	r3, #1
 80141c0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80141c2:	6a3b      	ldr	r3, [r7, #32]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d104      	bne.n	80141d2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80141c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80141cc:	69fb      	ldr	r3, [r7, #28]
 80141ce:	61bb      	str	r3, [r7, #24]
 80141d0:	e009      	b.n	80141e6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80141d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141d4:	7fda      	ldrb	r2, [r3, #31]
 80141d6:	6a3b      	ldr	r3, [r7, #32]
 80141d8:	7fdb      	ldrb	r3, [r3, #31]
 80141da:	429a      	cmp	r2, r3
 80141dc:	d803      	bhi.n	80141e6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80141de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80141e2:	69fb      	ldr	r3, [r7, #28]
 80141e4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80141e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d001      	beq.n	80141f2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80141ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141f0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80141f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80141f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d1cb      	bne.n	8014196 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80141fe:	6a3b      	ldr	r3, [r7, #32]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d008      	beq.n	8014216 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014204:	69b9      	ldr	r1, [r7, #24]
 8014206:	6a38      	ldr	r0, [r7, #32]
 8014208:	f7ff ff0e 	bl	8014028 <ip_reass_free_complete_datagram>
 801420c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801420e:	697a      	ldr	r2, [r7, #20]
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	4413      	add	r3, r2
 8014214:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014216:	697a      	ldr	r2, [r7, #20]
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	429a      	cmp	r2, r3
 801421c:	da02      	bge.n	8014224 <ip_reass_remove_oldest_datagram+0xb4>
 801421e:	693b      	ldr	r3, [r7, #16]
 8014220:	2b01      	cmp	r3, #1
 8014222:	dcac      	bgt.n	801417e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014224:	697b      	ldr	r3, [r7, #20]
}
 8014226:	4618      	mov	r0, r3
 8014228:	3728      	adds	r7, #40	@ 0x28
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}
 801422e:	bf00      	nop
 8014230:	2000b3c0 	.word	0x2000b3c0

08014234 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b084      	sub	sp, #16
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
 801423c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801423e:	2004      	movs	r0, #4
 8014240:	f7f7 f986 	bl	800b550 <memp_malloc>
 8014244:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d110      	bne.n	801426e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801424c:	6839      	ldr	r1, [r7, #0]
 801424e:	6878      	ldr	r0, [r7, #4]
 8014250:	f7ff ff8e 	bl	8014170 <ip_reass_remove_oldest_datagram>
 8014254:	4602      	mov	r2, r0
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	4293      	cmp	r3, r2
 801425a:	dc03      	bgt.n	8014264 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801425c:	2004      	movs	r0, #4
 801425e:	f7f7 f977 	bl	800b550 <memp_malloc>
 8014262:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d101      	bne.n	801426e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801426a:	2300      	movs	r3, #0
 801426c:	e016      	b.n	801429c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801426e:	2220      	movs	r2, #32
 8014270:	2100      	movs	r1, #0
 8014272:	68f8      	ldr	r0, [r7, #12]
 8014274:	f000 ff25 	bl	80150c2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	220f      	movs	r2, #15
 801427c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801427e:	4b09      	ldr	r3, [pc, #36]	@ (80142a4 <ip_reass_enqueue_new_datagram+0x70>)
 8014280:	681a      	ldr	r2, [r3, #0]
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014286:	4a07      	ldr	r2, [pc, #28]	@ (80142a4 <ip_reass_enqueue_new_datagram+0x70>)
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	3308      	adds	r3, #8
 8014290:	2214      	movs	r2, #20
 8014292:	6879      	ldr	r1, [r7, #4]
 8014294:	4618      	mov	r0, r3
 8014296:	f000 ff90 	bl	80151ba <memcpy>
  return ipr;
 801429a:	68fb      	ldr	r3, [r7, #12]
}
 801429c:	4618      	mov	r0, r3
 801429e:	3710      	adds	r7, #16
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	2000b3c0 	.word	0x2000b3c0

080142a8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
 80142b0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80142b2:	4b10      	ldr	r3, [pc, #64]	@ (80142f4 <ip_reass_dequeue_datagram+0x4c>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	687a      	ldr	r2, [r7, #4]
 80142b8:	429a      	cmp	r2, r3
 80142ba:	d104      	bne.n	80142c6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	4a0c      	ldr	r2, [pc, #48]	@ (80142f4 <ip_reass_dequeue_datagram+0x4c>)
 80142c2:	6013      	str	r3, [r2, #0]
 80142c4:	e00d      	b.n	80142e2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80142c6:	683b      	ldr	r3, [r7, #0]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d106      	bne.n	80142da <ip_reass_dequeue_datagram+0x32>
 80142cc:	4b0a      	ldr	r3, [pc, #40]	@ (80142f8 <ip_reass_dequeue_datagram+0x50>)
 80142ce:	f240 1245 	movw	r2, #325	@ 0x145
 80142d2:	490a      	ldr	r1, [pc, #40]	@ (80142fc <ip_reass_dequeue_datagram+0x54>)
 80142d4:	480a      	ldr	r0, [pc, #40]	@ (8014300 <ip_reass_dequeue_datagram+0x58>)
 80142d6:	f000 fe8f 	bl	8014ff8 <iprintf>
    prev->next = ipr->next;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681a      	ldr	r2, [r3, #0]
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80142e2:	6879      	ldr	r1, [r7, #4]
 80142e4:	2004      	movs	r0, #4
 80142e6:	f7f7 f9a3 	bl	800b630 <memp_free>
}
 80142ea:	bf00      	nop
 80142ec:	3708      	adds	r7, #8
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}
 80142f2:	bf00      	nop
 80142f4:	2000b3c0 	.word	0x2000b3c0
 80142f8:	0801978c 	.word	0x0801978c
 80142fc:	08019854 	.word	0x08019854
 8014300:	080197d4 	.word	0x080197d4

08014304 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b08c      	sub	sp, #48	@ 0x30
 8014308:	af00      	add	r7, sp, #0
 801430a:	60f8      	str	r0, [r7, #12]
 801430c:	60b9      	str	r1, [r7, #8]
 801430e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014310:	2300      	movs	r3, #0
 8014312:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014314:	2301      	movs	r3, #1
 8014316:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	685b      	ldr	r3, [r3, #4]
 801431c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801431e:	69fb      	ldr	r3, [r7, #28]
 8014320:	885b      	ldrh	r3, [r3, #2]
 8014322:	b29b      	uxth	r3, r3
 8014324:	4618      	mov	r0, r3
 8014326:	f7f6 fc9b 	bl	800ac60 <lwip_htons>
 801432a:	4603      	mov	r3, r0
 801432c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801432e:	69fb      	ldr	r3, [r7, #28]
 8014330:	781b      	ldrb	r3, [r3, #0]
 8014332:	f003 030f 	and.w	r3, r3, #15
 8014336:	b2db      	uxtb	r3, r3
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801433c:	7e7b      	ldrb	r3, [r7, #25]
 801433e:	b29b      	uxth	r3, r3
 8014340:	8b7a      	ldrh	r2, [r7, #26]
 8014342:	429a      	cmp	r2, r3
 8014344:	d202      	bcs.n	801434c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014346:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801434a:	e135      	b.n	80145b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801434c:	7e7b      	ldrb	r3, [r7, #25]
 801434e:	b29b      	uxth	r3, r3
 8014350:	8b7a      	ldrh	r2, [r7, #26]
 8014352:	1ad3      	subs	r3, r2, r3
 8014354:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014356:	69fb      	ldr	r3, [r7, #28]
 8014358:	88db      	ldrh	r3, [r3, #6]
 801435a:	b29b      	uxth	r3, r3
 801435c:	4618      	mov	r0, r3
 801435e:	f7f6 fc7f 	bl	800ac60 <lwip_htons>
 8014362:	4603      	mov	r3, r0
 8014364:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014368:	b29b      	uxth	r3, r3
 801436a:	00db      	lsls	r3, r3, #3
 801436c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	685b      	ldr	r3, [r3, #4]
 8014372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8014374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014376:	2200      	movs	r2, #0
 8014378:	701a      	strb	r2, [r3, #0]
 801437a:	2200      	movs	r2, #0
 801437c:	705a      	strb	r2, [r3, #1]
 801437e:	2200      	movs	r2, #0
 8014380:	709a      	strb	r2, [r3, #2]
 8014382:	2200      	movs	r2, #0
 8014384:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014388:	8afa      	ldrh	r2, [r7, #22]
 801438a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801438c:	8afa      	ldrh	r2, [r7, #22]
 801438e:	8b7b      	ldrh	r3, [r7, #26]
 8014390:	4413      	add	r3, r2
 8014392:	b29a      	uxth	r2, r3
 8014394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014396:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801439a:	88db      	ldrh	r3, [r3, #6]
 801439c:	b29b      	uxth	r3, r3
 801439e:	8afa      	ldrh	r2, [r7, #22]
 80143a0:	429a      	cmp	r2, r3
 80143a2:	d902      	bls.n	80143aa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80143a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80143a8:	e106      	b.n	80145b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80143b0:	e068      	b.n	8014484 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80143b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143b4:	685b      	ldr	r3, [r3, #4]
 80143b6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80143b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ba:	889b      	ldrh	r3, [r3, #4]
 80143bc:	b29a      	uxth	r2, r3
 80143be:	693b      	ldr	r3, [r7, #16]
 80143c0:	889b      	ldrh	r3, [r3, #4]
 80143c2:	b29b      	uxth	r3, r3
 80143c4:	429a      	cmp	r2, r3
 80143c6:	d235      	bcs.n	8014434 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80143c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80143cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80143ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d020      	beq.n	8014416 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80143d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143d6:	889b      	ldrh	r3, [r3, #4]
 80143d8:	b29a      	uxth	r2, r3
 80143da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143dc:	88db      	ldrh	r3, [r3, #6]
 80143de:	b29b      	uxth	r3, r3
 80143e0:	429a      	cmp	r2, r3
 80143e2:	d307      	bcc.n	80143f4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80143e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143e6:	88db      	ldrh	r3, [r3, #6]
 80143e8:	b29a      	uxth	r2, r3
 80143ea:	693b      	ldr	r3, [r7, #16]
 80143ec:	889b      	ldrh	r3, [r3, #4]
 80143ee:	b29b      	uxth	r3, r3
 80143f0:	429a      	cmp	r2, r3
 80143f2:	d902      	bls.n	80143fa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80143f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80143f8:	e0de      	b.n	80145b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80143fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143fc:	68ba      	ldr	r2, [r7, #8]
 80143fe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014402:	88db      	ldrh	r3, [r3, #6]
 8014404:	b29a      	uxth	r2, r3
 8014406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014408:	889b      	ldrh	r3, [r3, #4]
 801440a:	b29b      	uxth	r3, r3
 801440c:	429a      	cmp	r2, r3
 801440e:	d03d      	beq.n	801448c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014410:	2300      	movs	r3, #0
 8014412:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014414:	e03a      	b.n	801448c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014418:	88db      	ldrh	r3, [r3, #6]
 801441a:	b29a      	uxth	r2, r3
 801441c:	693b      	ldr	r3, [r7, #16]
 801441e:	889b      	ldrh	r3, [r3, #4]
 8014420:	b29b      	uxth	r3, r3
 8014422:	429a      	cmp	r2, r3
 8014424:	d902      	bls.n	801442c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014426:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801442a:	e0c5      	b.n	80145b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	68ba      	ldr	r2, [r7, #8]
 8014430:	605a      	str	r2, [r3, #4]
      break;
 8014432:	e02b      	b.n	801448c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014436:	889b      	ldrh	r3, [r3, #4]
 8014438:	b29a      	uxth	r2, r3
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	889b      	ldrh	r3, [r3, #4]
 801443e:	b29b      	uxth	r3, r3
 8014440:	429a      	cmp	r2, r3
 8014442:	d102      	bne.n	801444a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014444:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014448:	e0b6      	b.n	80145b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801444a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801444c:	889b      	ldrh	r3, [r3, #4]
 801444e:	b29a      	uxth	r2, r3
 8014450:	693b      	ldr	r3, [r7, #16]
 8014452:	88db      	ldrh	r3, [r3, #6]
 8014454:	b29b      	uxth	r3, r3
 8014456:	429a      	cmp	r2, r3
 8014458:	d202      	bcs.n	8014460 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801445a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801445e:	e0ab      	b.n	80145b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014462:	2b00      	cmp	r3, #0
 8014464:	d009      	beq.n	801447a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014468:	88db      	ldrh	r3, [r3, #6]
 801446a:	b29a      	uxth	r2, r3
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	889b      	ldrh	r3, [r3, #4]
 8014470:	b29b      	uxth	r3, r3
 8014472:	429a      	cmp	r2, r3
 8014474:	d001      	beq.n	801447a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014476:	2300      	movs	r3, #0
 8014478:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8014480:	693b      	ldr	r3, [r7, #16]
 8014482:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8014484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014486:	2b00      	cmp	r3, #0
 8014488:	d193      	bne.n	80143b2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801448a:	e000      	b.n	801448e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801448c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014490:	2b00      	cmp	r3, #0
 8014492:	d12d      	bne.n	80144f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014496:	2b00      	cmp	r3, #0
 8014498:	d01c      	beq.n	80144d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801449a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801449c:	88db      	ldrh	r3, [r3, #6]
 801449e:	b29a      	uxth	r2, r3
 80144a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144a2:	889b      	ldrh	r3, [r3, #4]
 80144a4:	b29b      	uxth	r3, r3
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d906      	bls.n	80144b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80144aa:	4b45      	ldr	r3, [pc, #276]	@ (80145c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144ac:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80144b0:	4944      	ldr	r1, [pc, #272]	@ (80145c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80144b2:	4845      	ldr	r0, [pc, #276]	@ (80145c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144b4:	f000 fda0 	bl	8014ff8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80144b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144ba:	68ba      	ldr	r2, [r7, #8]
 80144bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80144be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144c0:	88db      	ldrh	r3, [r3, #6]
 80144c2:	b29a      	uxth	r2, r3
 80144c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144c6:	889b      	ldrh	r3, [r3, #4]
 80144c8:	b29b      	uxth	r3, r3
 80144ca:	429a      	cmp	r2, r3
 80144cc:	d010      	beq.n	80144f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80144ce:	2300      	movs	r3, #0
 80144d0:	623b      	str	r3, [r7, #32]
 80144d2:	e00d      	b.n	80144f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	685b      	ldr	r3, [r3, #4]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d006      	beq.n	80144ea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80144dc:	4b38      	ldr	r3, [pc, #224]	@ (80145c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144de:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80144e2:	493a      	ldr	r1, [pc, #232]	@ (80145cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80144e4:	4838      	ldr	r0, [pc, #224]	@ (80145c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144e6:	f000 fd87 	bl	8014ff8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	68ba      	ldr	r2, [r7, #8]
 80144ee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d105      	bne.n	8014502 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	7f9b      	ldrb	r3, [r3, #30]
 80144fa:	f003 0301 	and.w	r3, r3, #1
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d059      	beq.n	80145b6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014502:	6a3b      	ldr	r3, [r7, #32]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d04f      	beq.n	80145a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	685b      	ldr	r3, [r3, #4]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d006      	beq.n	801451e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	685b      	ldr	r3, [r3, #4]
 8014514:	685b      	ldr	r3, [r3, #4]
 8014516:	889b      	ldrh	r3, [r3, #4]
 8014518:	b29b      	uxth	r3, r3
 801451a:	2b00      	cmp	r3, #0
 801451c:	d002      	beq.n	8014524 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801451e:	2300      	movs	r3, #0
 8014520:	623b      	str	r3, [r7, #32]
 8014522:	e041      	b.n	80145a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014526:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8014528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801452e:	e012      	b.n	8014556 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8014536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014538:	88db      	ldrh	r3, [r3, #6]
 801453a:	b29a      	uxth	r2, r3
 801453c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801453e:	889b      	ldrh	r3, [r3, #4]
 8014540:	b29b      	uxth	r3, r3
 8014542:	429a      	cmp	r2, r3
 8014544:	d002      	beq.n	801454c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014546:	2300      	movs	r3, #0
 8014548:	623b      	str	r3, [r7, #32]
            break;
 801454a:	e007      	b.n	801455c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801454c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801454e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8014550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8014556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014558:	2b00      	cmp	r3, #0
 801455a:	d1e9      	bne.n	8014530 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801455c:	6a3b      	ldr	r3, [r7, #32]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d022      	beq.n	80145a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	685b      	ldr	r3, [r3, #4]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d106      	bne.n	8014578 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801456a:	4b15      	ldr	r3, [pc, #84]	@ (80145c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801456c:	f240 12df 	movw	r2, #479	@ 0x1df
 8014570:	4917      	ldr	r1, [pc, #92]	@ (80145d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014572:	4815      	ldr	r0, [pc, #84]	@ (80145c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014574:	f000 fd40 	bl	8014ff8 <iprintf>
          LWIP_ASSERT("sanity check",
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	685b      	ldr	r3, [r3, #4]
 801457c:	685b      	ldr	r3, [r3, #4]
 801457e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014580:	429a      	cmp	r2, r3
 8014582:	d106      	bne.n	8014592 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014584:	4b0e      	ldr	r3, [pc, #56]	@ (80145c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014586:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801458a:	4911      	ldr	r1, [pc, #68]	@ (80145d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801458c:	480e      	ldr	r0, [pc, #56]	@ (80145c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801458e:	f000 fd33 	bl	8014ff8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d006      	beq.n	80145a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801459a:	4b09      	ldr	r3, [pc, #36]	@ (80145c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801459c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80145a0:	490c      	ldr	r1, [pc, #48]	@ (80145d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80145a2:	4809      	ldr	r0, [pc, #36]	@ (80145c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80145a4:	f000 fd28 	bl	8014ff8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80145a8:	6a3b      	ldr	r3, [r7, #32]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	bf14      	ite	ne
 80145ae:	2301      	movne	r3, #1
 80145b0:	2300      	moveq	r3, #0
 80145b2:	b2db      	uxtb	r3, r3
 80145b4:	e000      	b.n	80145b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80145b6:	2300      	movs	r3, #0
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	3730      	adds	r7, #48	@ 0x30
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}
 80145c0:	0801978c 	.word	0x0801978c
 80145c4:	08019870 	.word	0x08019870
 80145c8:	080197d4 	.word	0x080197d4
 80145cc:	08019890 	.word	0x08019890
 80145d0:	080198c8 	.word	0x080198c8
 80145d4:	080198d8 	.word	0x080198d8

080145d8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b08e      	sub	sp, #56	@ 0x38
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	685b      	ldr	r3, [r3, #4]
 80145e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80145e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145e8:	781b      	ldrb	r3, [r3, #0]
 80145ea:	f003 030f 	and.w	r3, r3, #15
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	009b      	lsls	r3, r3, #2
 80145f2:	b2db      	uxtb	r3, r3
 80145f4:	2b14      	cmp	r3, #20
 80145f6:	f040 8171 	bne.w	80148dc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80145fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145fc:	88db      	ldrh	r3, [r3, #6]
 80145fe:	b29b      	uxth	r3, r3
 8014600:	4618      	mov	r0, r3
 8014602:	f7f6 fb2d 	bl	800ac60 <lwip_htons>
 8014606:	4603      	mov	r3, r0
 8014608:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801460c:	b29b      	uxth	r3, r3
 801460e:	00db      	lsls	r3, r3, #3
 8014610:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014614:	885b      	ldrh	r3, [r3, #2]
 8014616:	b29b      	uxth	r3, r3
 8014618:	4618      	mov	r0, r3
 801461a:	f7f6 fb21 	bl	800ac60 <lwip_htons>
 801461e:	4603      	mov	r3, r0
 8014620:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014624:	781b      	ldrb	r3, [r3, #0]
 8014626:	f003 030f 	and.w	r3, r3, #15
 801462a:	b2db      	uxtb	r3, r3
 801462c:	009b      	lsls	r3, r3, #2
 801462e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8014632:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014636:	b29b      	uxth	r3, r3
 8014638:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801463a:	429a      	cmp	r2, r3
 801463c:	f0c0 8150 	bcc.w	80148e0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014640:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014644:	b29b      	uxth	r3, r3
 8014646:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014648:	1ad3      	subs	r3, r2, r3
 801464a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f7f7 feed 	bl	800c42c <pbuf_clen>
 8014652:	4603      	mov	r3, r0
 8014654:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014656:	4b8c      	ldr	r3, [pc, #560]	@ (8014888 <ip4_reass+0x2b0>)
 8014658:	881b      	ldrh	r3, [r3, #0]
 801465a:	461a      	mov	r2, r3
 801465c:	8c3b      	ldrh	r3, [r7, #32]
 801465e:	4413      	add	r3, r2
 8014660:	2b0a      	cmp	r3, #10
 8014662:	dd10      	ble.n	8014686 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014664:	8c3b      	ldrh	r3, [r7, #32]
 8014666:	4619      	mov	r1, r3
 8014668:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801466a:	f7ff fd81 	bl	8014170 <ip_reass_remove_oldest_datagram>
 801466e:	4603      	mov	r3, r0
 8014670:	2b00      	cmp	r3, #0
 8014672:	f000 8137 	beq.w	80148e4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014676:	4b84      	ldr	r3, [pc, #528]	@ (8014888 <ip4_reass+0x2b0>)
 8014678:	881b      	ldrh	r3, [r3, #0]
 801467a:	461a      	mov	r2, r3
 801467c:	8c3b      	ldrh	r3, [r7, #32]
 801467e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014680:	2b0a      	cmp	r3, #10
 8014682:	f300 812f 	bgt.w	80148e4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014686:	4b81      	ldr	r3, [pc, #516]	@ (801488c <ip4_reass+0x2b4>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	633b      	str	r3, [r7, #48]	@ 0x30
 801468c:	e015      	b.n	80146ba <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014690:	695a      	ldr	r2, [r3, #20]
 8014692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014694:	68db      	ldr	r3, [r3, #12]
 8014696:	429a      	cmp	r2, r3
 8014698:	d10c      	bne.n	80146b4 <ip4_reass+0xdc>
 801469a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801469c:	699a      	ldr	r2, [r3, #24]
 801469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146a0:	691b      	ldr	r3, [r3, #16]
 80146a2:	429a      	cmp	r2, r3
 80146a4:	d106      	bne.n	80146b4 <ip4_reass+0xdc>
 80146a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146a8:	899a      	ldrh	r2, [r3, #12]
 80146aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146ac:	889b      	ldrh	r3, [r3, #4]
 80146ae:	b29b      	uxth	r3, r3
 80146b0:	429a      	cmp	r2, r3
 80146b2:	d006      	beq.n	80146c2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80146b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80146ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d1e6      	bne.n	801468e <ip4_reass+0xb6>
 80146c0:	e000      	b.n	80146c4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80146c2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80146c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d109      	bne.n	80146de <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80146ca:	8c3b      	ldrh	r3, [r7, #32]
 80146cc:	4619      	mov	r1, r3
 80146ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80146d0:	f7ff fdb0 	bl	8014234 <ip_reass_enqueue_new_datagram>
 80146d4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80146d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d11c      	bne.n	8014716 <ip4_reass+0x13e>
      goto nullreturn;
 80146dc:	e105      	b.n	80148ea <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80146de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146e0:	88db      	ldrh	r3, [r3, #6]
 80146e2:	b29b      	uxth	r3, r3
 80146e4:	4618      	mov	r0, r3
 80146e6:	f7f6 fabb 	bl	800ac60 <lwip_htons>
 80146ea:	4603      	mov	r3, r0
 80146ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d110      	bne.n	8014716 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80146f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146f6:	89db      	ldrh	r3, [r3, #14]
 80146f8:	4618      	mov	r0, r3
 80146fa:	f7f6 fab1 	bl	800ac60 <lwip_htons>
 80146fe:	4603      	mov	r3, r0
 8014700:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014704:	2b00      	cmp	r3, #0
 8014706:	d006      	beq.n	8014716 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801470a:	3308      	adds	r3, #8
 801470c:	2214      	movs	r2, #20
 801470e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014710:	4618      	mov	r0, r3
 8014712:	f000 fd52 	bl	80151ba <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014718:	88db      	ldrh	r3, [r3, #6]
 801471a:	b29b      	uxth	r3, r3
 801471c:	f003 0320 	and.w	r3, r3, #32
 8014720:	2b00      	cmp	r3, #0
 8014722:	bf0c      	ite	eq
 8014724:	2301      	moveq	r3, #1
 8014726:	2300      	movne	r3, #0
 8014728:	b2db      	uxtb	r3, r3
 801472a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801472c:	69fb      	ldr	r3, [r7, #28]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d00e      	beq.n	8014750 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014732:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014734:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014736:	4413      	add	r3, r2
 8014738:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801473a:	8b7a      	ldrh	r2, [r7, #26]
 801473c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801473e:	429a      	cmp	r2, r3
 8014740:	f0c0 80a0 	bcc.w	8014884 <ip4_reass+0x2ac>
 8014744:	8b7b      	ldrh	r3, [r7, #26]
 8014746:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801474a:	4293      	cmp	r3, r2
 801474c:	f200 809a 	bhi.w	8014884 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014750:	69fa      	ldr	r2, [r7, #28]
 8014752:	6879      	ldr	r1, [r7, #4]
 8014754:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014756:	f7ff fdd5 	bl	8014304 <ip_reass_chain_frag_into_datagram_and_validate>
 801475a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801475c:	697b      	ldr	r3, [r7, #20]
 801475e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014762:	f000 809b 	beq.w	801489c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014766:	4b48      	ldr	r3, [pc, #288]	@ (8014888 <ip4_reass+0x2b0>)
 8014768:	881a      	ldrh	r2, [r3, #0]
 801476a:	8c3b      	ldrh	r3, [r7, #32]
 801476c:	4413      	add	r3, r2
 801476e:	b29a      	uxth	r2, r3
 8014770:	4b45      	ldr	r3, [pc, #276]	@ (8014888 <ip4_reass+0x2b0>)
 8014772:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014774:	69fb      	ldr	r3, [r7, #28]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d00d      	beq.n	8014796 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801477a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801477c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801477e:	4413      	add	r3, r2
 8014780:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014784:	8a7a      	ldrh	r2, [r7, #18]
 8014786:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801478a:	7f9b      	ldrb	r3, [r3, #30]
 801478c:	f043 0301 	orr.w	r3, r3, #1
 8014790:	b2da      	uxtb	r2, r3
 8014792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014794:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	2b01      	cmp	r3, #1
 801479a:	d171      	bne.n	8014880 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801479c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801479e:	8b9b      	ldrh	r3, [r3, #28]
 80147a0:	3314      	adds	r3, #20
 80147a2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80147a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147a6:	685b      	ldr	r3, [r3, #4]
 80147a8:	685b      	ldr	r3, [r3, #4]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80147ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147b0:	685b      	ldr	r3, [r3, #4]
 80147b2:	685b      	ldr	r3, [r3, #4]
 80147b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80147b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147b8:	3308      	adds	r3, #8
 80147ba:	2214      	movs	r2, #20
 80147bc:	4619      	mov	r1, r3
 80147be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80147c0:	f000 fcfb 	bl	80151ba <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80147c4:	8a3b      	ldrh	r3, [r7, #16]
 80147c6:	4618      	mov	r0, r3
 80147c8:	f7f6 fa4a 	bl	800ac60 <lwip_htons>
 80147cc:	4603      	mov	r3, r0
 80147ce:	461a      	mov	r2, r3
 80147d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147d2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80147d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147d6:	2200      	movs	r2, #0
 80147d8:	719a      	strb	r2, [r3, #6]
 80147da:	2200      	movs	r2, #0
 80147dc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80147de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147e0:	2200      	movs	r2, #0
 80147e2:	729a      	strb	r2, [r3, #10]
 80147e4:	2200      	movs	r2, #0
 80147e6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80147e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147ea:	685b      	ldr	r3, [r3, #4]
 80147ec:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80147ee:	e00d      	b.n	801480c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80147f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80147f6:	2114      	movs	r1, #20
 80147f8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80147fa:	f7f7 fd09 	bl	800c210 <pbuf_remove_header>
      pbuf_cat(p, r);
 80147fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f7f7 fe4d 	bl	800c4a0 <pbuf_cat>
      r = iprh->next_pbuf;
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801480c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801480e:	2b00      	cmp	r3, #0
 8014810:	d1ee      	bne.n	80147f0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014812:	4b1e      	ldr	r3, [pc, #120]	@ (801488c <ip4_reass+0x2b4>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014818:	429a      	cmp	r2, r3
 801481a:	d102      	bne.n	8014822 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801481c:	2300      	movs	r3, #0
 801481e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014820:	e010      	b.n	8014844 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014822:	4b1a      	ldr	r3, [pc, #104]	@ (801488c <ip4_reass+0x2b4>)
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014828:	e007      	b.n	801483a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801482a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014830:	429a      	cmp	r2, r3
 8014832:	d006      	beq.n	8014842 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801483a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801483c:	2b00      	cmp	r3, #0
 801483e:	d1f4      	bne.n	801482a <ip4_reass+0x252>
 8014840:	e000      	b.n	8014844 <ip4_reass+0x26c>
          break;
 8014842:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014846:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014848:	f7ff fd2e 	bl	80142a8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f7f7 fded 	bl	800c42c <pbuf_clen>
 8014852:	4603      	mov	r3, r0
 8014854:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014856:	4b0c      	ldr	r3, [pc, #48]	@ (8014888 <ip4_reass+0x2b0>)
 8014858:	881b      	ldrh	r3, [r3, #0]
 801485a:	8c3a      	ldrh	r2, [r7, #32]
 801485c:	429a      	cmp	r2, r3
 801485e:	d906      	bls.n	801486e <ip4_reass+0x296>
 8014860:	4b0b      	ldr	r3, [pc, #44]	@ (8014890 <ip4_reass+0x2b8>)
 8014862:	f240 229b 	movw	r2, #667	@ 0x29b
 8014866:	490b      	ldr	r1, [pc, #44]	@ (8014894 <ip4_reass+0x2bc>)
 8014868:	480b      	ldr	r0, [pc, #44]	@ (8014898 <ip4_reass+0x2c0>)
 801486a:	f000 fbc5 	bl	8014ff8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801486e:	4b06      	ldr	r3, [pc, #24]	@ (8014888 <ip4_reass+0x2b0>)
 8014870:	881a      	ldrh	r2, [r3, #0]
 8014872:	8c3b      	ldrh	r3, [r7, #32]
 8014874:	1ad3      	subs	r3, r2, r3
 8014876:	b29a      	uxth	r2, r3
 8014878:	4b03      	ldr	r3, [pc, #12]	@ (8014888 <ip4_reass+0x2b0>)
 801487a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	e038      	b.n	80148f2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014880:	2300      	movs	r3, #0
 8014882:	e036      	b.n	80148f2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014884:	bf00      	nop
 8014886:	e00a      	b.n	801489e <ip4_reass+0x2c6>
 8014888:	2000b3c4 	.word	0x2000b3c4
 801488c:	2000b3c0 	.word	0x2000b3c0
 8014890:	0801978c 	.word	0x0801978c
 8014894:	080198fc 	.word	0x080198fc
 8014898:	080197d4 	.word	0x080197d4
    goto nullreturn_ipr;
 801489c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801489e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d106      	bne.n	80148b2 <ip4_reass+0x2da>
 80148a4:	4b15      	ldr	r3, [pc, #84]	@ (80148fc <ip4_reass+0x324>)
 80148a6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80148aa:	4915      	ldr	r1, [pc, #84]	@ (8014900 <ip4_reass+0x328>)
 80148ac:	4815      	ldr	r0, [pc, #84]	@ (8014904 <ip4_reass+0x32c>)
 80148ae:	f000 fba3 	bl	8014ff8 <iprintf>
  if (ipr->p == NULL) {
 80148b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148b4:	685b      	ldr	r3, [r3, #4]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d116      	bne.n	80148e8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80148ba:	4b13      	ldr	r3, [pc, #76]	@ (8014908 <ip4_reass+0x330>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80148c0:	429a      	cmp	r2, r3
 80148c2:	d006      	beq.n	80148d2 <ip4_reass+0x2fa>
 80148c4:	4b0d      	ldr	r3, [pc, #52]	@ (80148fc <ip4_reass+0x324>)
 80148c6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80148ca:	4910      	ldr	r1, [pc, #64]	@ (801490c <ip4_reass+0x334>)
 80148cc:	480d      	ldr	r0, [pc, #52]	@ (8014904 <ip4_reass+0x32c>)
 80148ce:	f000 fb93 	bl	8014ff8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80148d2:	2100      	movs	r1, #0
 80148d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80148d6:	f7ff fce7 	bl	80142a8 <ip_reass_dequeue_datagram>
 80148da:	e006      	b.n	80148ea <ip4_reass+0x312>
    goto nullreturn;
 80148dc:	bf00      	nop
 80148de:	e004      	b.n	80148ea <ip4_reass+0x312>
    goto nullreturn;
 80148e0:	bf00      	nop
 80148e2:	e002      	b.n	80148ea <ip4_reass+0x312>
      goto nullreturn;
 80148e4:	bf00      	nop
 80148e6:	e000      	b.n	80148ea <ip4_reass+0x312>
  }

nullreturn:
 80148e8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80148ea:	6878      	ldr	r0, [r7, #4]
 80148ec:	f7f7 fd16 	bl	800c31c <pbuf_free>
  return NULL;
 80148f0:	2300      	movs	r3, #0
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	3738      	adds	r7, #56	@ 0x38
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}
 80148fa:	bf00      	nop
 80148fc:	0801978c 	.word	0x0801978c
 8014900:	08019918 	.word	0x08019918
 8014904:	080197d4 	.word	0x080197d4
 8014908:	2000b3c0 	.word	0x2000b3c0
 801490c:	08019924 	.word	0x08019924

08014910 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014914:	2005      	movs	r0, #5
 8014916:	f7f6 fe1b 	bl	800b550 <memp_malloc>
 801491a:	4603      	mov	r3, r0
}
 801491c:	4618      	mov	r0, r3
 801491e:	bd80      	pop	{r7, pc}

08014920 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b082      	sub	sp, #8
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d106      	bne.n	801493c <ip_frag_free_pbuf_custom_ref+0x1c>
 801492e:	4b07      	ldr	r3, [pc, #28]	@ (801494c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014930:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8014934:	4906      	ldr	r1, [pc, #24]	@ (8014950 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014936:	4807      	ldr	r0, [pc, #28]	@ (8014954 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014938:	f000 fb5e 	bl	8014ff8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801493c:	6879      	ldr	r1, [r7, #4]
 801493e:	2005      	movs	r0, #5
 8014940:	f7f6 fe76 	bl	800b630 <memp_free>
}
 8014944:	bf00      	nop
 8014946:	3708      	adds	r7, #8
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}
 801494c:	0801978c 	.word	0x0801978c
 8014950:	08019944 	.word	0x08019944
 8014954:	080197d4 	.word	0x080197d4

08014958 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b084      	sub	sp, #16
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d106      	bne.n	8014978 <ipfrag_free_pbuf_custom+0x20>
 801496a:	4b11      	ldr	r3, [pc, #68]	@ (80149b0 <ipfrag_free_pbuf_custom+0x58>)
 801496c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8014970:	4910      	ldr	r1, [pc, #64]	@ (80149b4 <ipfrag_free_pbuf_custom+0x5c>)
 8014972:	4811      	ldr	r0, [pc, #68]	@ (80149b8 <ipfrag_free_pbuf_custom+0x60>)
 8014974:	f000 fb40 	bl	8014ff8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014978:	68fa      	ldr	r2, [r7, #12]
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	429a      	cmp	r2, r3
 801497e:	d006      	beq.n	801498e <ipfrag_free_pbuf_custom+0x36>
 8014980:	4b0b      	ldr	r3, [pc, #44]	@ (80149b0 <ipfrag_free_pbuf_custom+0x58>)
 8014982:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8014986:	490d      	ldr	r1, [pc, #52]	@ (80149bc <ipfrag_free_pbuf_custom+0x64>)
 8014988:	480b      	ldr	r0, [pc, #44]	@ (80149b8 <ipfrag_free_pbuf_custom+0x60>)
 801498a:	f000 fb35 	bl	8014ff8 <iprintf>
  if (pcr->original != NULL) {
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	695b      	ldr	r3, [r3, #20]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d004      	beq.n	80149a0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	695b      	ldr	r3, [r3, #20]
 801499a:	4618      	mov	r0, r3
 801499c:	f7f7 fcbe 	bl	800c31c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80149a0:	68f8      	ldr	r0, [r7, #12]
 80149a2:	f7ff ffbd 	bl	8014920 <ip_frag_free_pbuf_custom_ref>
}
 80149a6:	bf00      	nop
 80149a8:	3710      	adds	r7, #16
 80149aa:	46bd      	mov	sp, r7
 80149ac:	bd80      	pop	{r7, pc}
 80149ae:	bf00      	nop
 80149b0:	0801978c 	.word	0x0801978c
 80149b4:	08019950 	.word	0x08019950
 80149b8:	080197d4 	.word	0x080197d4
 80149bc:	0801995c 	.word	0x0801995c

080149c0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b094      	sub	sp, #80	@ 0x50
 80149c4:	af02      	add	r7, sp, #8
 80149c6:	60f8      	str	r0, [r7, #12]
 80149c8:	60b9      	str	r1, [r7, #8]
 80149ca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80149cc:	2300      	movs	r3, #0
 80149ce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80149d2:	68bb      	ldr	r3, [r7, #8]
 80149d4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80149d6:	3b14      	subs	r3, #20
 80149d8:	2b00      	cmp	r3, #0
 80149da:	da00      	bge.n	80149de <ip4_frag+0x1e>
 80149dc:	3307      	adds	r3, #7
 80149de:	10db      	asrs	r3, r3, #3
 80149e0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80149e2:	2314      	movs	r3, #20
 80149e4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	685b      	ldr	r3, [r3, #4]
 80149ea:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80149ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80149ee:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80149f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	f003 030f 	and.w	r3, r3, #15
 80149f8:	b2db      	uxtb	r3, r3
 80149fa:	009b      	lsls	r3, r3, #2
 80149fc:	b2db      	uxtb	r3, r3
 80149fe:	2b14      	cmp	r3, #20
 8014a00:	d002      	beq.n	8014a08 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014a02:	f06f 0305 	mvn.w	r3, #5
 8014a06:	e110      	b.n	8014c2a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	895b      	ldrh	r3, [r3, #10]
 8014a0c:	2b13      	cmp	r3, #19
 8014a0e:	d809      	bhi.n	8014a24 <ip4_frag+0x64>
 8014a10:	4b88      	ldr	r3, [pc, #544]	@ (8014c34 <ip4_frag+0x274>)
 8014a12:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8014a16:	4988      	ldr	r1, [pc, #544]	@ (8014c38 <ip4_frag+0x278>)
 8014a18:	4888      	ldr	r0, [pc, #544]	@ (8014c3c <ip4_frag+0x27c>)
 8014a1a:	f000 faed 	bl	8014ff8 <iprintf>
 8014a1e:	f06f 0305 	mvn.w	r3, #5
 8014a22:	e102      	b.n	8014c2a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a26:	88db      	ldrh	r3, [r3, #6]
 8014a28:	b29b      	uxth	r3, r3
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f7f6 f918 	bl	800ac60 <lwip_htons>
 8014a30:	4603      	mov	r3, r0
 8014a32:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8014a34:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014a36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014a3a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014a3e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014a40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014a44:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	891b      	ldrh	r3, [r3, #8]
 8014a4a:	3b14      	subs	r3, #20
 8014a4c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8014a50:	e0e1      	b.n	8014c16 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014a52:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014a54:	00db      	lsls	r3, r3, #3
 8014a56:	b29b      	uxth	r3, r3
 8014a58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014a5c:	4293      	cmp	r3, r2
 8014a5e:	bf28      	it	cs
 8014a60:	4613      	movcs	r3, r2
 8014a62:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014a64:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014a68:	2114      	movs	r1, #20
 8014a6a:	200e      	movs	r0, #14
 8014a6c:	f7f7 f972 	bl	800bd54 <pbuf_alloc>
 8014a70:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8014a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	f000 80d5 	beq.w	8014c24 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a7c:	895b      	ldrh	r3, [r3, #10]
 8014a7e:	2b13      	cmp	r3, #19
 8014a80:	d806      	bhi.n	8014a90 <ip4_frag+0xd0>
 8014a82:	4b6c      	ldr	r3, [pc, #432]	@ (8014c34 <ip4_frag+0x274>)
 8014a84:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8014a88:	496d      	ldr	r1, [pc, #436]	@ (8014c40 <ip4_frag+0x280>)
 8014a8a:	486c      	ldr	r0, [pc, #432]	@ (8014c3c <ip4_frag+0x27c>)
 8014a8c:	f000 fab4 	bl	8014ff8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	2214      	movs	r2, #20
 8014a96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f000 fb8e 	bl	80151ba <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014aa0:	685b      	ldr	r3, [r3, #4]
 8014aa2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8014aa4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014aa6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8014aaa:	e064      	b.n	8014b76 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	895a      	ldrh	r2, [r3, #10]
 8014ab0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014ab2:	1ad3      	subs	r3, r2, r3
 8014ab4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	895b      	ldrh	r3, [r3, #10]
 8014aba:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014abc:	429a      	cmp	r2, r3
 8014abe:	d906      	bls.n	8014ace <ip4_frag+0x10e>
 8014ac0:	4b5c      	ldr	r3, [pc, #368]	@ (8014c34 <ip4_frag+0x274>)
 8014ac2:	f240 322d 	movw	r2, #813	@ 0x32d
 8014ac6:	495f      	ldr	r1, [pc, #380]	@ (8014c44 <ip4_frag+0x284>)
 8014ac8:	485c      	ldr	r0, [pc, #368]	@ (8014c3c <ip4_frag+0x27c>)
 8014aca:	f000 fa95 	bl	8014ff8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014ace:	8bfa      	ldrh	r2, [r7, #30]
 8014ad0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014ad4:	4293      	cmp	r3, r2
 8014ad6:	bf28      	it	cs
 8014ad8:	4613      	movcs	r3, r2
 8014ada:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014ade:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d105      	bne.n	8014af2 <ip4_frag+0x132>
        poff = 0;
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	60fb      	str	r3, [r7, #12]
        continue;
 8014af0:	e041      	b.n	8014b76 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014af2:	f7ff ff0d 	bl	8014910 <ip_frag_alloc_pbuf_custom_ref>
 8014af6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014af8:	69bb      	ldr	r3, [r7, #24]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d103      	bne.n	8014b06 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014afe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014b00:	f7f7 fc0c 	bl	800c31c <pbuf_free>
        goto memerr;
 8014b04:	e08f      	b.n	8014c26 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014b06:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014b0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014b0e:	4413      	add	r3, r2
 8014b10:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8014b14:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014b18:	9201      	str	r2, [sp, #4]
 8014b1a:	9300      	str	r3, [sp, #0]
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	2241      	movs	r2, #65	@ 0x41
 8014b20:	2000      	movs	r0, #0
 8014b22:	f7f7 fa41 	bl	800bfa8 <pbuf_alloced_custom>
 8014b26:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014b28:	697b      	ldr	r3, [r7, #20]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d106      	bne.n	8014b3c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014b2e:	69b8      	ldr	r0, [r7, #24]
 8014b30:	f7ff fef6 	bl	8014920 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014b34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014b36:	f7f7 fbf1 	bl	800c31c <pbuf_free>
        goto memerr;
 8014b3a:	e074      	b.n	8014c26 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014b3c:	68f8      	ldr	r0, [r7, #12]
 8014b3e:	f7f7 fc8d 	bl	800c45c <pbuf_ref>
      pcr->original = p;
 8014b42:	69bb      	ldr	r3, [r7, #24]
 8014b44:	68fa      	ldr	r2, [r7, #12]
 8014b46:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014b48:	69bb      	ldr	r3, [r7, #24]
 8014b4a:	4a3f      	ldr	r2, [pc, #252]	@ (8014c48 <ip4_frag+0x288>)
 8014b4c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014b4e:	6979      	ldr	r1, [r7, #20]
 8014b50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014b52:	f7f7 fca5 	bl	800c4a0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014b56:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8014b5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014b5e:	1ad3      	subs	r3, r2, r3
 8014b60:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8014b64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d004      	beq.n	8014b76 <ip4_frag+0x1b6>
        poff = 0;
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014b76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d196      	bne.n	8014aac <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014b7e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014b80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014b84:	4413      	add	r3, r2
 8014b86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014b8c:	f1a3 0213 	sub.w	r2, r3, #19
 8014b90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014b94:	429a      	cmp	r2, r3
 8014b96:	bfcc      	ite	gt
 8014b98:	2301      	movgt	r3, #1
 8014b9a:	2300      	movle	r3, #0
 8014b9c:	b2db      	uxtb	r3, r3
 8014b9e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014ba0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014ba4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014ba8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8014baa:	6a3b      	ldr	r3, [r7, #32]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d002      	beq.n	8014bb6 <ip4_frag+0x1f6>
 8014bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d003      	beq.n	8014bbe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014bb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014bb8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014bbc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014bbe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	f7f6 f84d 	bl	800ac60 <lwip_htons>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	461a      	mov	r2, r3
 8014bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bcc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014bce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014bd0:	3314      	adds	r3, #20
 8014bd2:	b29b      	uxth	r3, r3
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7f6 f843 	bl	800ac60 <lwip_htons>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	461a      	mov	r2, r3
 8014bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014be0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014be4:	2200      	movs	r2, #0
 8014be6:	729a      	strb	r2, [r3, #10]
 8014be8:	2200      	movs	r2, #0
 8014bea:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	695b      	ldr	r3, [r3, #20]
 8014bf0:	687a      	ldr	r2, [r7, #4]
 8014bf2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014bf4:	68b8      	ldr	r0, [r7, #8]
 8014bf6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014bf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014bfa:	f7f7 fb8f 	bl	800c31c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014bfe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014c02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014c04:	1ad3      	subs	r3, r2, r3
 8014c06:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8014c0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8014c0e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014c10:	4413      	add	r3, r2
 8014c12:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8014c16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	f47f af19 	bne.w	8014a52 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014c20:	2300      	movs	r3, #0
 8014c22:	e002      	b.n	8014c2a <ip4_frag+0x26a>
      goto memerr;
 8014c24:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014c26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	3748      	adds	r7, #72	@ 0x48
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}
 8014c32:	bf00      	nop
 8014c34:	0801978c 	.word	0x0801978c
 8014c38:	08019968 	.word	0x08019968
 8014c3c:	080197d4 	.word	0x080197d4
 8014c40:	08019984 	.word	0x08019984
 8014c44:	080199a4 	.word	0x080199a4
 8014c48:	08014959 	.word	0x08014959

08014c4c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b086      	sub	sp, #24
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]
 8014c54:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014c56:	230e      	movs	r3, #14
 8014c58:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	895b      	ldrh	r3, [r3, #10]
 8014c5e:	2b0e      	cmp	r3, #14
 8014c60:	d96e      	bls.n	8014d40 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	7bdb      	ldrb	r3, [r3, #15]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d106      	bne.n	8014c78 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014c70:	3301      	adds	r3, #1
 8014c72:	b2da      	uxtb	r2, r3
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	685b      	ldr	r3, [r3, #4]
 8014c7c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014c7e:	693b      	ldr	r3, [r7, #16]
 8014c80:	7b1a      	ldrb	r2, [r3, #12]
 8014c82:	7b5b      	ldrb	r3, [r3, #13]
 8014c84:	021b      	lsls	r3, r3, #8
 8014c86:	4313      	orrs	r3, r2
 8014c88:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014c8a:	693b      	ldr	r3, [r7, #16]
 8014c8c:	781b      	ldrb	r3, [r3, #0]
 8014c8e:	f003 0301 	and.w	r3, r3, #1
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d023      	beq.n	8014cde <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014c96:	693b      	ldr	r3, [r7, #16]
 8014c98:	781b      	ldrb	r3, [r3, #0]
 8014c9a:	2b01      	cmp	r3, #1
 8014c9c:	d10f      	bne.n	8014cbe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014c9e:	693b      	ldr	r3, [r7, #16]
 8014ca0:	785b      	ldrb	r3, [r3, #1]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d11b      	bne.n	8014cde <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014ca6:	693b      	ldr	r3, [r7, #16]
 8014ca8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014caa:	2b5e      	cmp	r3, #94	@ 0x5e
 8014cac:	d117      	bne.n	8014cde <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	7b5b      	ldrb	r3, [r3, #13]
 8014cb2:	f043 0310 	orr.w	r3, r3, #16
 8014cb6:	b2da      	uxtb	r2, r3
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	735a      	strb	r2, [r3, #13]
 8014cbc:	e00f      	b.n	8014cde <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014cbe:	693b      	ldr	r3, [r7, #16]
 8014cc0:	2206      	movs	r2, #6
 8014cc2:	4928      	ldr	r1, [pc, #160]	@ (8014d64 <ethernet_input+0x118>)
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	f000 f9ec 	bl	80150a2 <memcmp>
 8014cca:	4603      	mov	r3, r0
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d106      	bne.n	8014cde <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	7b5b      	ldrb	r3, [r3, #13]
 8014cd4:	f043 0308 	orr.w	r3, r3, #8
 8014cd8:	b2da      	uxtb	r2, r3
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014cde:	89fb      	ldrh	r3, [r7, #14]
 8014ce0:	2b08      	cmp	r3, #8
 8014ce2:	d003      	beq.n	8014cec <ethernet_input+0xa0>
 8014ce4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014ce8:	d014      	beq.n	8014d14 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014cea:	e032      	b.n	8014d52 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014cf2:	f003 0308 	and.w	r3, r3, #8
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d024      	beq.n	8014d44 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014cfa:	8afb      	ldrh	r3, [r7, #22]
 8014cfc:	4619      	mov	r1, r3
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f7f7 fa86 	bl	800c210 <pbuf_remove_header>
 8014d04:	4603      	mov	r3, r0
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d11e      	bne.n	8014d48 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014d0a:	6839      	ldr	r1, [r7, #0]
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f7fe ff21 	bl	8013b54 <ip4_input>
      break;
 8014d12:	e013      	b.n	8014d3c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014d1a:	f003 0308 	and.w	r3, r3, #8
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d014      	beq.n	8014d4c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014d22:	8afb      	ldrh	r3, [r7, #22]
 8014d24:	4619      	mov	r1, r3
 8014d26:	6878      	ldr	r0, [r7, #4]
 8014d28:	f7f7 fa72 	bl	800c210 <pbuf_remove_header>
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d10e      	bne.n	8014d50 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014d32:	6839      	ldr	r1, [r7, #0]
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f7fe f8c1 	bl	8012ebc <etharp_input>
      break;
 8014d3a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	e00c      	b.n	8014d5a <ethernet_input+0x10e>
    goto free_and_return;
 8014d40:	bf00      	nop
 8014d42:	e006      	b.n	8014d52 <ethernet_input+0x106>
        goto free_and_return;
 8014d44:	bf00      	nop
 8014d46:	e004      	b.n	8014d52 <ethernet_input+0x106>
        goto free_and_return;
 8014d48:	bf00      	nop
 8014d4a:	e002      	b.n	8014d52 <ethernet_input+0x106>
        goto free_and_return;
 8014d4c:	bf00      	nop
 8014d4e:	e000      	b.n	8014d52 <ethernet_input+0x106>
        goto free_and_return;
 8014d50:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014d52:	6878      	ldr	r0, [r7, #4]
 8014d54:	f7f7 fae2 	bl	800c31c <pbuf_free>
  return ERR_OK;
 8014d58:	2300      	movs	r3, #0
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3718      	adds	r7, #24
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	bf00      	nop
 8014d64:	08019b48 	.word	0x08019b48

08014d68 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b086      	sub	sp, #24
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	60f8      	str	r0, [r7, #12]
 8014d70:	60b9      	str	r1, [r7, #8]
 8014d72:	607a      	str	r2, [r7, #4]
 8014d74:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014d76:	8c3b      	ldrh	r3, [r7, #32]
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f7f5 ff71 	bl	800ac60 <lwip_htons>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014d82:	210e      	movs	r1, #14
 8014d84:	68b8      	ldr	r0, [r7, #8]
 8014d86:	f7f7 fa33 	bl	800c1f0 <pbuf_add_header>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d125      	bne.n	8014ddc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014d90:	68bb      	ldr	r3, [r7, #8]
 8014d92:	685b      	ldr	r3, [r3, #4]
 8014d94:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014d96:	693b      	ldr	r3, [r7, #16]
 8014d98:	8afa      	ldrh	r2, [r7, #22]
 8014d9a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014d9c:	693b      	ldr	r3, [r7, #16]
 8014d9e:	2206      	movs	r2, #6
 8014da0:	6839      	ldr	r1, [r7, #0]
 8014da2:	4618      	mov	r0, r3
 8014da4:	f000 fa09 	bl	80151ba <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014da8:	693b      	ldr	r3, [r7, #16]
 8014daa:	3306      	adds	r3, #6
 8014dac:	2206      	movs	r2, #6
 8014dae:	6879      	ldr	r1, [r7, #4]
 8014db0:	4618      	mov	r0, r3
 8014db2:	f000 fa02 	bl	80151ba <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014dbc:	2b06      	cmp	r3, #6
 8014dbe:	d006      	beq.n	8014dce <ethernet_output+0x66>
 8014dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8014dec <ethernet_output+0x84>)
 8014dc2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014dc6:	490a      	ldr	r1, [pc, #40]	@ (8014df0 <ethernet_output+0x88>)
 8014dc8:	480a      	ldr	r0, [pc, #40]	@ (8014df4 <ethernet_output+0x8c>)
 8014dca:	f000 f915 	bl	8014ff8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	699b      	ldr	r3, [r3, #24]
 8014dd2:	68b9      	ldr	r1, [r7, #8]
 8014dd4:	68f8      	ldr	r0, [r7, #12]
 8014dd6:	4798      	blx	r3
 8014dd8:	4603      	mov	r3, r0
 8014dda:	e002      	b.n	8014de2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014ddc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014dde:	f06f 0301 	mvn.w	r3, #1
}
 8014de2:	4618      	mov	r0, r3
 8014de4:	3718      	adds	r7, #24
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd80      	pop	{r7, pc}
 8014dea:	bf00      	nop
 8014dec:	080199b4 	.word	0x080199b4
 8014df0:	080199ec 	.word	0x080199ec
 8014df4:	08019a20 	.word	0x08019a20

08014df8 <rand>:
 8014df8:	4b16      	ldr	r3, [pc, #88]	@ (8014e54 <rand+0x5c>)
 8014dfa:	b510      	push	{r4, lr}
 8014dfc:	681c      	ldr	r4, [r3, #0]
 8014dfe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e00:	b9b3      	cbnz	r3, 8014e30 <rand+0x38>
 8014e02:	2018      	movs	r0, #24
 8014e04:	f000 fa50 	bl	80152a8 <malloc>
 8014e08:	4602      	mov	r2, r0
 8014e0a:	6320      	str	r0, [r4, #48]	@ 0x30
 8014e0c:	b920      	cbnz	r0, 8014e18 <rand+0x20>
 8014e0e:	4b12      	ldr	r3, [pc, #72]	@ (8014e58 <rand+0x60>)
 8014e10:	4812      	ldr	r0, [pc, #72]	@ (8014e5c <rand+0x64>)
 8014e12:	2152      	movs	r1, #82	@ 0x52
 8014e14:	f000 f9e0 	bl	80151d8 <__assert_func>
 8014e18:	4911      	ldr	r1, [pc, #68]	@ (8014e60 <rand+0x68>)
 8014e1a:	4b12      	ldr	r3, [pc, #72]	@ (8014e64 <rand+0x6c>)
 8014e1c:	e9c0 1300 	strd	r1, r3, [r0]
 8014e20:	4b11      	ldr	r3, [pc, #68]	@ (8014e68 <rand+0x70>)
 8014e22:	6083      	str	r3, [r0, #8]
 8014e24:	230b      	movs	r3, #11
 8014e26:	8183      	strh	r3, [r0, #12]
 8014e28:	2100      	movs	r1, #0
 8014e2a:	2001      	movs	r0, #1
 8014e2c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014e30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014e32:	480e      	ldr	r0, [pc, #56]	@ (8014e6c <rand+0x74>)
 8014e34:	690b      	ldr	r3, [r1, #16]
 8014e36:	694c      	ldr	r4, [r1, #20]
 8014e38:	4a0d      	ldr	r2, [pc, #52]	@ (8014e70 <rand+0x78>)
 8014e3a:	4358      	muls	r0, r3
 8014e3c:	fb02 0004 	mla	r0, r2, r4, r0
 8014e40:	fba3 3202 	umull	r3, r2, r3, r2
 8014e44:	3301      	adds	r3, #1
 8014e46:	eb40 0002 	adc.w	r0, r0, r2
 8014e4a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014e4e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8014e52:	bd10      	pop	{r4, pc}
 8014e54:	200000d8 	.word	0x200000d8
 8014e58:	08019b56 	.word	0x08019b56
 8014e5c:	08019b6d 	.word	0x08019b6d
 8014e60:	abcd330e 	.word	0xabcd330e
 8014e64:	e66d1234 	.word	0xe66d1234
 8014e68:	0005deec 	.word	0x0005deec
 8014e6c:	5851f42d 	.word	0x5851f42d
 8014e70:	4c957f2d 	.word	0x4c957f2d

08014e74 <std>:
 8014e74:	2300      	movs	r3, #0
 8014e76:	b510      	push	{r4, lr}
 8014e78:	4604      	mov	r4, r0
 8014e7a:	e9c0 3300 	strd	r3, r3, [r0]
 8014e7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e82:	6083      	str	r3, [r0, #8]
 8014e84:	8181      	strh	r1, [r0, #12]
 8014e86:	6643      	str	r3, [r0, #100]	@ 0x64
 8014e88:	81c2      	strh	r2, [r0, #14]
 8014e8a:	6183      	str	r3, [r0, #24]
 8014e8c:	4619      	mov	r1, r3
 8014e8e:	2208      	movs	r2, #8
 8014e90:	305c      	adds	r0, #92	@ 0x5c
 8014e92:	f000 f916 	bl	80150c2 <memset>
 8014e96:	4b0d      	ldr	r3, [pc, #52]	@ (8014ecc <std+0x58>)
 8014e98:	6263      	str	r3, [r4, #36]	@ 0x24
 8014e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8014ed0 <std+0x5c>)
 8014e9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8014ed4 <std+0x60>)
 8014ea0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8014ed8 <std+0x64>)
 8014ea4:	6323      	str	r3, [r4, #48]	@ 0x30
 8014ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8014edc <std+0x68>)
 8014ea8:	6224      	str	r4, [r4, #32]
 8014eaa:	429c      	cmp	r4, r3
 8014eac:	d006      	beq.n	8014ebc <std+0x48>
 8014eae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014eb2:	4294      	cmp	r4, r2
 8014eb4:	d002      	beq.n	8014ebc <std+0x48>
 8014eb6:	33d0      	adds	r3, #208	@ 0xd0
 8014eb8:	429c      	cmp	r4, r3
 8014eba:	d105      	bne.n	8014ec8 <std+0x54>
 8014ebc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ec4:	f000 b976 	b.w	80151b4 <__retarget_lock_init_recursive>
 8014ec8:	bd10      	pop	{r4, pc}
 8014eca:	bf00      	nop
 8014ecc:	0801501d 	.word	0x0801501d
 8014ed0:	0801503f 	.word	0x0801503f
 8014ed4:	08015077 	.word	0x08015077
 8014ed8:	0801509b 	.word	0x0801509b
 8014edc:	2000b3c8 	.word	0x2000b3c8

08014ee0 <stdio_exit_handler>:
 8014ee0:	4a02      	ldr	r2, [pc, #8]	@ (8014eec <stdio_exit_handler+0xc>)
 8014ee2:	4903      	ldr	r1, [pc, #12]	@ (8014ef0 <stdio_exit_handler+0x10>)
 8014ee4:	4803      	ldr	r0, [pc, #12]	@ (8014ef4 <stdio_exit_handler+0x14>)
 8014ee6:	f000 b869 	b.w	8014fbc <_fwalk_sglue>
 8014eea:	bf00      	nop
 8014eec:	200000cc 	.word	0x200000cc
 8014ef0:	08015ab9 	.word	0x08015ab9
 8014ef4:	200000dc 	.word	0x200000dc

08014ef8 <cleanup_stdio>:
 8014ef8:	6841      	ldr	r1, [r0, #4]
 8014efa:	4b0c      	ldr	r3, [pc, #48]	@ (8014f2c <cleanup_stdio+0x34>)
 8014efc:	4299      	cmp	r1, r3
 8014efe:	b510      	push	{r4, lr}
 8014f00:	4604      	mov	r4, r0
 8014f02:	d001      	beq.n	8014f08 <cleanup_stdio+0x10>
 8014f04:	f000 fdd8 	bl	8015ab8 <_fflush_r>
 8014f08:	68a1      	ldr	r1, [r4, #8]
 8014f0a:	4b09      	ldr	r3, [pc, #36]	@ (8014f30 <cleanup_stdio+0x38>)
 8014f0c:	4299      	cmp	r1, r3
 8014f0e:	d002      	beq.n	8014f16 <cleanup_stdio+0x1e>
 8014f10:	4620      	mov	r0, r4
 8014f12:	f000 fdd1 	bl	8015ab8 <_fflush_r>
 8014f16:	68e1      	ldr	r1, [r4, #12]
 8014f18:	4b06      	ldr	r3, [pc, #24]	@ (8014f34 <cleanup_stdio+0x3c>)
 8014f1a:	4299      	cmp	r1, r3
 8014f1c:	d004      	beq.n	8014f28 <cleanup_stdio+0x30>
 8014f1e:	4620      	mov	r0, r4
 8014f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f24:	f000 bdc8 	b.w	8015ab8 <_fflush_r>
 8014f28:	bd10      	pop	{r4, pc}
 8014f2a:	bf00      	nop
 8014f2c:	2000b3c8 	.word	0x2000b3c8
 8014f30:	2000b430 	.word	0x2000b430
 8014f34:	2000b498 	.word	0x2000b498

08014f38 <global_stdio_init.part.0>:
 8014f38:	b510      	push	{r4, lr}
 8014f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8014f68 <global_stdio_init.part.0+0x30>)
 8014f3c:	4c0b      	ldr	r4, [pc, #44]	@ (8014f6c <global_stdio_init.part.0+0x34>)
 8014f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8014f70 <global_stdio_init.part.0+0x38>)
 8014f40:	601a      	str	r2, [r3, #0]
 8014f42:	4620      	mov	r0, r4
 8014f44:	2200      	movs	r2, #0
 8014f46:	2104      	movs	r1, #4
 8014f48:	f7ff ff94 	bl	8014e74 <std>
 8014f4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014f50:	2201      	movs	r2, #1
 8014f52:	2109      	movs	r1, #9
 8014f54:	f7ff ff8e 	bl	8014e74 <std>
 8014f58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014f5c:	2202      	movs	r2, #2
 8014f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f62:	2112      	movs	r1, #18
 8014f64:	f7ff bf86 	b.w	8014e74 <std>
 8014f68:	2000b500 	.word	0x2000b500
 8014f6c:	2000b3c8 	.word	0x2000b3c8
 8014f70:	08014ee1 	.word	0x08014ee1

08014f74 <__sfp_lock_acquire>:
 8014f74:	4801      	ldr	r0, [pc, #4]	@ (8014f7c <__sfp_lock_acquire+0x8>)
 8014f76:	f000 b91e 	b.w	80151b6 <__retarget_lock_acquire_recursive>
 8014f7a:	bf00      	nop
 8014f7c:	2000b509 	.word	0x2000b509

08014f80 <__sfp_lock_release>:
 8014f80:	4801      	ldr	r0, [pc, #4]	@ (8014f88 <__sfp_lock_release+0x8>)
 8014f82:	f000 b919 	b.w	80151b8 <__retarget_lock_release_recursive>
 8014f86:	bf00      	nop
 8014f88:	2000b509 	.word	0x2000b509

08014f8c <__sinit>:
 8014f8c:	b510      	push	{r4, lr}
 8014f8e:	4604      	mov	r4, r0
 8014f90:	f7ff fff0 	bl	8014f74 <__sfp_lock_acquire>
 8014f94:	6a23      	ldr	r3, [r4, #32]
 8014f96:	b11b      	cbz	r3, 8014fa0 <__sinit+0x14>
 8014f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f9c:	f7ff bff0 	b.w	8014f80 <__sfp_lock_release>
 8014fa0:	4b04      	ldr	r3, [pc, #16]	@ (8014fb4 <__sinit+0x28>)
 8014fa2:	6223      	str	r3, [r4, #32]
 8014fa4:	4b04      	ldr	r3, [pc, #16]	@ (8014fb8 <__sinit+0x2c>)
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d1f5      	bne.n	8014f98 <__sinit+0xc>
 8014fac:	f7ff ffc4 	bl	8014f38 <global_stdio_init.part.0>
 8014fb0:	e7f2      	b.n	8014f98 <__sinit+0xc>
 8014fb2:	bf00      	nop
 8014fb4:	08014ef9 	.word	0x08014ef9
 8014fb8:	2000b500 	.word	0x2000b500

08014fbc <_fwalk_sglue>:
 8014fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fc0:	4607      	mov	r7, r0
 8014fc2:	4688      	mov	r8, r1
 8014fc4:	4614      	mov	r4, r2
 8014fc6:	2600      	movs	r6, #0
 8014fc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014fcc:	f1b9 0901 	subs.w	r9, r9, #1
 8014fd0:	d505      	bpl.n	8014fde <_fwalk_sglue+0x22>
 8014fd2:	6824      	ldr	r4, [r4, #0]
 8014fd4:	2c00      	cmp	r4, #0
 8014fd6:	d1f7      	bne.n	8014fc8 <_fwalk_sglue+0xc>
 8014fd8:	4630      	mov	r0, r6
 8014fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fde:	89ab      	ldrh	r3, [r5, #12]
 8014fe0:	2b01      	cmp	r3, #1
 8014fe2:	d907      	bls.n	8014ff4 <_fwalk_sglue+0x38>
 8014fe4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014fe8:	3301      	adds	r3, #1
 8014fea:	d003      	beq.n	8014ff4 <_fwalk_sglue+0x38>
 8014fec:	4629      	mov	r1, r5
 8014fee:	4638      	mov	r0, r7
 8014ff0:	47c0      	blx	r8
 8014ff2:	4306      	orrs	r6, r0
 8014ff4:	3568      	adds	r5, #104	@ 0x68
 8014ff6:	e7e9      	b.n	8014fcc <_fwalk_sglue+0x10>

08014ff8 <iprintf>:
 8014ff8:	b40f      	push	{r0, r1, r2, r3}
 8014ffa:	b507      	push	{r0, r1, r2, lr}
 8014ffc:	4906      	ldr	r1, [pc, #24]	@ (8015018 <iprintf+0x20>)
 8014ffe:	ab04      	add	r3, sp, #16
 8015000:	6808      	ldr	r0, [r1, #0]
 8015002:	f853 2b04 	ldr.w	r2, [r3], #4
 8015006:	6881      	ldr	r1, [r0, #8]
 8015008:	9301      	str	r3, [sp, #4]
 801500a:	f000 fa2d 	bl	8015468 <_vfiprintf_r>
 801500e:	b003      	add	sp, #12
 8015010:	f85d eb04 	ldr.w	lr, [sp], #4
 8015014:	b004      	add	sp, #16
 8015016:	4770      	bx	lr
 8015018:	200000d8 	.word	0x200000d8

0801501c <__sread>:
 801501c:	b510      	push	{r4, lr}
 801501e:	460c      	mov	r4, r1
 8015020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015024:	f000 f878 	bl	8015118 <_read_r>
 8015028:	2800      	cmp	r0, #0
 801502a:	bfab      	itete	ge
 801502c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801502e:	89a3      	ldrhlt	r3, [r4, #12]
 8015030:	181b      	addge	r3, r3, r0
 8015032:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015036:	bfac      	ite	ge
 8015038:	6563      	strge	r3, [r4, #84]	@ 0x54
 801503a:	81a3      	strhlt	r3, [r4, #12]
 801503c:	bd10      	pop	{r4, pc}

0801503e <__swrite>:
 801503e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015042:	461f      	mov	r7, r3
 8015044:	898b      	ldrh	r3, [r1, #12]
 8015046:	05db      	lsls	r3, r3, #23
 8015048:	4605      	mov	r5, r0
 801504a:	460c      	mov	r4, r1
 801504c:	4616      	mov	r6, r2
 801504e:	d505      	bpl.n	801505c <__swrite+0x1e>
 8015050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015054:	2302      	movs	r3, #2
 8015056:	2200      	movs	r2, #0
 8015058:	f000 f84c 	bl	80150f4 <_lseek_r>
 801505c:	89a3      	ldrh	r3, [r4, #12]
 801505e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015062:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015066:	81a3      	strh	r3, [r4, #12]
 8015068:	4632      	mov	r2, r6
 801506a:	463b      	mov	r3, r7
 801506c:	4628      	mov	r0, r5
 801506e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015072:	f000 b863 	b.w	801513c <_write_r>

08015076 <__sseek>:
 8015076:	b510      	push	{r4, lr}
 8015078:	460c      	mov	r4, r1
 801507a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801507e:	f000 f839 	bl	80150f4 <_lseek_r>
 8015082:	1c43      	adds	r3, r0, #1
 8015084:	89a3      	ldrh	r3, [r4, #12]
 8015086:	bf15      	itete	ne
 8015088:	6560      	strne	r0, [r4, #84]	@ 0x54
 801508a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801508e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015092:	81a3      	strheq	r3, [r4, #12]
 8015094:	bf18      	it	ne
 8015096:	81a3      	strhne	r3, [r4, #12]
 8015098:	bd10      	pop	{r4, pc}

0801509a <__sclose>:
 801509a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801509e:	f000 b819 	b.w	80150d4 <_close_r>

080150a2 <memcmp>:
 80150a2:	b510      	push	{r4, lr}
 80150a4:	3901      	subs	r1, #1
 80150a6:	4402      	add	r2, r0
 80150a8:	4290      	cmp	r0, r2
 80150aa:	d101      	bne.n	80150b0 <memcmp+0xe>
 80150ac:	2000      	movs	r0, #0
 80150ae:	e005      	b.n	80150bc <memcmp+0x1a>
 80150b0:	7803      	ldrb	r3, [r0, #0]
 80150b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80150b6:	42a3      	cmp	r3, r4
 80150b8:	d001      	beq.n	80150be <memcmp+0x1c>
 80150ba:	1b18      	subs	r0, r3, r4
 80150bc:	bd10      	pop	{r4, pc}
 80150be:	3001      	adds	r0, #1
 80150c0:	e7f2      	b.n	80150a8 <memcmp+0x6>

080150c2 <memset>:
 80150c2:	4402      	add	r2, r0
 80150c4:	4603      	mov	r3, r0
 80150c6:	4293      	cmp	r3, r2
 80150c8:	d100      	bne.n	80150cc <memset+0xa>
 80150ca:	4770      	bx	lr
 80150cc:	f803 1b01 	strb.w	r1, [r3], #1
 80150d0:	e7f9      	b.n	80150c6 <memset+0x4>
	...

080150d4 <_close_r>:
 80150d4:	b538      	push	{r3, r4, r5, lr}
 80150d6:	4d06      	ldr	r5, [pc, #24]	@ (80150f0 <_close_r+0x1c>)
 80150d8:	2300      	movs	r3, #0
 80150da:	4604      	mov	r4, r0
 80150dc:	4608      	mov	r0, r1
 80150de:	602b      	str	r3, [r5, #0]
 80150e0:	f7ed fd0a 	bl	8002af8 <_close>
 80150e4:	1c43      	adds	r3, r0, #1
 80150e6:	d102      	bne.n	80150ee <_close_r+0x1a>
 80150e8:	682b      	ldr	r3, [r5, #0]
 80150ea:	b103      	cbz	r3, 80150ee <_close_r+0x1a>
 80150ec:	6023      	str	r3, [r4, #0]
 80150ee:	bd38      	pop	{r3, r4, r5, pc}
 80150f0:	2000b504 	.word	0x2000b504

080150f4 <_lseek_r>:
 80150f4:	b538      	push	{r3, r4, r5, lr}
 80150f6:	4d07      	ldr	r5, [pc, #28]	@ (8015114 <_lseek_r+0x20>)
 80150f8:	4604      	mov	r4, r0
 80150fa:	4608      	mov	r0, r1
 80150fc:	4611      	mov	r1, r2
 80150fe:	2200      	movs	r2, #0
 8015100:	602a      	str	r2, [r5, #0]
 8015102:	461a      	mov	r2, r3
 8015104:	f7ed fd1f 	bl	8002b46 <_lseek>
 8015108:	1c43      	adds	r3, r0, #1
 801510a:	d102      	bne.n	8015112 <_lseek_r+0x1e>
 801510c:	682b      	ldr	r3, [r5, #0]
 801510e:	b103      	cbz	r3, 8015112 <_lseek_r+0x1e>
 8015110:	6023      	str	r3, [r4, #0]
 8015112:	bd38      	pop	{r3, r4, r5, pc}
 8015114:	2000b504 	.word	0x2000b504

08015118 <_read_r>:
 8015118:	b538      	push	{r3, r4, r5, lr}
 801511a:	4d07      	ldr	r5, [pc, #28]	@ (8015138 <_read_r+0x20>)
 801511c:	4604      	mov	r4, r0
 801511e:	4608      	mov	r0, r1
 8015120:	4611      	mov	r1, r2
 8015122:	2200      	movs	r2, #0
 8015124:	602a      	str	r2, [r5, #0]
 8015126:	461a      	mov	r2, r3
 8015128:	f7ed fcad 	bl	8002a86 <_read>
 801512c:	1c43      	adds	r3, r0, #1
 801512e:	d102      	bne.n	8015136 <_read_r+0x1e>
 8015130:	682b      	ldr	r3, [r5, #0]
 8015132:	b103      	cbz	r3, 8015136 <_read_r+0x1e>
 8015134:	6023      	str	r3, [r4, #0]
 8015136:	bd38      	pop	{r3, r4, r5, pc}
 8015138:	2000b504 	.word	0x2000b504

0801513c <_write_r>:
 801513c:	b538      	push	{r3, r4, r5, lr}
 801513e:	4d07      	ldr	r5, [pc, #28]	@ (801515c <_write_r+0x20>)
 8015140:	4604      	mov	r4, r0
 8015142:	4608      	mov	r0, r1
 8015144:	4611      	mov	r1, r2
 8015146:	2200      	movs	r2, #0
 8015148:	602a      	str	r2, [r5, #0]
 801514a:	461a      	mov	r2, r3
 801514c:	f7ed fcb8 	bl	8002ac0 <_write>
 8015150:	1c43      	adds	r3, r0, #1
 8015152:	d102      	bne.n	801515a <_write_r+0x1e>
 8015154:	682b      	ldr	r3, [r5, #0]
 8015156:	b103      	cbz	r3, 801515a <_write_r+0x1e>
 8015158:	6023      	str	r3, [r4, #0]
 801515a:	bd38      	pop	{r3, r4, r5, pc}
 801515c:	2000b504 	.word	0x2000b504

08015160 <__errno>:
 8015160:	4b01      	ldr	r3, [pc, #4]	@ (8015168 <__errno+0x8>)
 8015162:	6818      	ldr	r0, [r3, #0]
 8015164:	4770      	bx	lr
 8015166:	bf00      	nop
 8015168:	200000d8 	.word	0x200000d8

0801516c <__libc_init_array>:
 801516c:	b570      	push	{r4, r5, r6, lr}
 801516e:	4d0d      	ldr	r5, [pc, #52]	@ (80151a4 <__libc_init_array+0x38>)
 8015170:	4c0d      	ldr	r4, [pc, #52]	@ (80151a8 <__libc_init_array+0x3c>)
 8015172:	1b64      	subs	r4, r4, r5
 8015174:	10a4      	asrs	r4, r4, #2
 8015176:	2600      	movs	r6, #0
 8015178:	42a6      	cmp	r6, r4
 801517a:	d109      	bne.n	8015190 <__libc_init_array+0x24>
 801517c:	4d0b      	ldr	r5, [pc, #44]	@ (80151ac <__libc_init_array+0x40>)
 801517e:	4c0c      	ldr	r4, [pc, #48]	@ (80151b0 <__libc_init_array+0x44>)
 8015180:	f001 ff66 	bl	8017050 <_init>
 8015184:	1b64      	subs	r4, r4, r5
 8015186:	10a4      	asrs	r4, r4, #2
 8015188:	2600      	movs	r6, #0
 801518a:	42a6      	cmp	r6, r4
 801518c:	d105      	bne.n	801519a <__libc_init_array+0x2e>
 801518e:	bd70      	pop	{r4, r5, r6, pc}
 8015190:	f855 3b04 	ldr.w	r3, [r5], #4
 8015194:	4798      	blx	r3
 8015196:	3601      	adds	r6, #1
 8015198:	e7ee      	b.n	8015178 <__libc_init_array+0xc>
 801519a:	f855 3b04 	ldr.w	r3, [r5], #4
 801519e:	4798      	blx	r3
 80151a0:	3601      	adds	r6, #1
 80151a2:	e7f2      	b.n	801518a <__libc_init_array+0x1e>
 80151a4:	08019e20 	.word	0x08019e20
 80151a8:	08019e20 	.word	0x08019e20
 80151ac:	08019e20 	.word	0x08019e20
 80151b0:	08019e24 	.word	0x08019e24

080151b4 <__retarget_lock_init_recursive>:
 80151b4:	4770      	bx	lr

080151b6 <__retarget_lock_acquire_recursive>:
 80151b6:	4770      	bx	lr

080151b8 <__retarget_lock_release_recursive>:
 80151b8:	4770      	bx	lr

080151ba <memcpy>:
 80151ba:	440a      	add	r2, r1
 80151bc:	4291      	cmp	r1, r2
 80151be:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80151c2:	d100      	bne.n	80151c6 <memcpy+0xc>
 80151c4:	4770      	bx	lr
 80151c6:	b510      	push	{r4, lr}
 80151c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80151cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80151d0:	4291      	cmp	r1, r2
 80151d2:	d1f9      	bne.n	80151c8 <memcpy+0xe>
 80151d4:	bd10      	pop	{r4, pc}
	...

080151d8 <__assert_func>:
 80151d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80151da:	4614      	mov	r4, r2
 80151dc:	461a      	mov	r2, r3
 80151de:	4b09      	ldr	r3, [pc, #36]	@ (8015204 <__assert_func+0x2c>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	4605      	mov	r5, r0
 80151e4:	68d8      	ldr	r0, [r3, #12]
 80151e6:	b14c      	cbz	r4, 80151fc <__assert_func+0x24>
 80151e8:	4b07      	ldr	r3, [pc, #28]	@ (8015208 <__assert_func+0x30>)
 80151ea:	9100      	str	r1, [sp, #0]
 80151ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80151f0:	4906      	ldr	r1, [pc, #24]	@ (801520c <__assert_func+0x34>)
 80151f2:	462b      	mov	r3, r5
 80151f4:	f000 fc88 	bl	8015b08 <fiprintf>
 80151f8:	f000 fd3c 	bl	8015c74 <abort>
 80151fc:	4b04      	ldr	r3, [pc, #16]	@ (8015210 <__assert_func+0x38>)
 80151fe:	461c      	mov	r4, r3
 8015200:	e7f3      	b.n	80151ea <__assert_func+0x12>
 8015202:	bf00      	nop
 8015204:	200000d8 	.word	0x200000d8
 8015208:	08019bc5 	.word	0x08019bc5
 801520c:	08019bd2 	.word	0x08019bd2
 8015210:	08019c00 	.word	0x08019c00

08015214 <_free_r>:
 8015214:	b538      	push	{r3, r4, r5, lr}
 8015216:	4605      	mov	r5, r0
 8015218:	2900      	cmp	r1, #0
 801521a:	d041      	beq.n	80152a0 <_free_r+0x8c>
 801521c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015220:	1f0c      	subs	r4, r1, #4
 8015222:	2b00      	cmp	r3, #0
 8015224:	bfb8      	it	lt
 8015226:	18e4      	addlt	r4, r4, r3
 8015228:	f000 f8e8 	bl	80153fc <__malloc_lock>
 801522c:	4a1d      	ldr	r2, [pc, #116]	@ (80152a4 <_free_r+0x90>)
 801522e:	6813      	ldr	r3, [r2, #0]
 8015230:	b933      	cbnz	r3, 8015240 <_free_r+0x2c>
 8015232:	6063      	str	r3, [r4, #4]
 8015234:	6014      	str	r4, [r2, #0]
 8015236:	4628      	mov	r0, r5
 8015238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801523c:	f000 b8e4 	b.w	8015408 <__malloc_unlock>
 8015240:	42a3      	cmp	r3, r4
 8015242:	d908      	bls.n	8015256 <_free_r+0x42>
 8015244:	6820      	ldr	r0, [r4, #0]
 8015246:	1821      	adds	r1, r4, r0
 8015248:	428b      	cmp	r3, r1
 801524a:	bf01      	itttt	eq
 801524c:	6819      	ldreq	r1, [r3, #0]
 801524e:	685b      	ldreq	r3, [r3, #4]
 8015250:	1809      	addeq	r1, r1, r0
 8015252:	6021      	streq	r1, [r4, #0]
 8015254:	e7ed      	b.n	8015232 <_free_r+0x1e>
 8015256:	461a      	mov	r2, r3
 8015258:	685b      	ldr	r3, [r3, #4]
 801525a:	b10b      	cbz	r3, 8015260 <_free_r+0x4c>
 801525c:	42a3      	cmp	r3, r4
 801525e:	d9fa      	bls.n	8015256 <_free_r+0x42>
 8015260:	6811      	ldr	r1, [r2, #0]
 8015262:	1850      	adds	r0, r2, r1
 8015264:	42a0      	cmp	r0, r4
 8015266:	d10b      	bne.n	8015280 <_free_r+0x6c>
 8015268:	6820      	ldr	r0, [r4, #0]
 801526a:	4401      	add	r1, r0
 801526c:	1850      	adds	r0, r2, r1
 801526e:	4283      	cmp	r3, r0
 8015270:	6011      	str	r1, [r2, #0]
 8015272:	d1e0      	bne.n	8015236 <_free_r+0x22>
 8015274:	6818      	ldr	r0, [r3, #0]
 8015276:	685b      	ldr	r3, [r3, #4]
 8015278:	6053      	str	r3, [r2, #4]
 801527a:	4408      	add	r0, r1
 801527c:	6010      	str	r0, [r2, #0]
 801527e:	e7da      	b.n	8015236 <_free_r+0x22>
 8015280:	d902      	bls.n	8015288 <_free_r+0x74>
 8015282:	230c      	movs	r3, #12
 8015284:	602b      	str	r3, [r5, #0]
 8015286:	e7d6      	b.n	8015236 <_free_r+0x22>
 8015288:	6820      	ldr	r0, [r4, #0]
 801528a:	1821      	adds	r1, r4, r0
 801528c:	428b      	cmp	r3, r1
 801528e:	bf04      	itt	eq
 8015290:	6819      	ldreq	r1, [r3, #0]
 8015292:	685b      	ldreq	r3, [r3, #4]
 8015294:	6063      	str	r3, [r4, #4]
 8015296:	bf04      	itt	eq
 8015298:	1809      	addeq	r1, r1, r0
 801529a:	6021      	streq	r1, [r4, #0]
 801529c:	6054      	str	r4, [r2, #4]
 801529e:	e7ca      	b.n	8015236 <_free_r+0x22>
 80152a0:	bd38      	pop	{r3, r4, r5, pc}
 80152a2:	bf00      	nop
 80152a4:	2000b510 	.word	0x2000b510

080152a8 <malloc>:
 80152a8:	4b02      	ldr	r3, [pc, #8]	@ (80152b4 <malloc+0xc>)
 80152aa:	4601      	mov	r1, r0
 80152ac:	6818      	ldr	r0, [r3, #0]
 80152ae:	f000 b825 	b.w	80152fc <_malloc_r>
 80152b2:	bf00      	nop
 80152b4:	200000d8 	.word	0x200000d8

080152b8 <sbrk_aligned>:
 80152b8:	b570      	push	{r4, r5, r6, lr}
 80152ba:	4e0f      	ldr	r6, [pc, #60]	@ (80152f8 <sbrk_aligned+0x40>)
 80152bc:	460c      	mov	r4, r1
 80152be:	6831      	ldr	r1, [r6, #0]
 80152c0:	4605      	mov	r5, r0
 80152c2:	b911      	cbnz	r1, 80152ca <sbrk_aligned+0x12>
 80152c4:	f000 fcc6 	bl	8015c54 <_sbrk_r>
 80152c8:	6030      	str	r0, [r6, #0]
 80152ca:	4621      	mov	r1, r4
 80152cc:	4628      	mov	r0, r5
 80152ce:	f000 fcc1 	bl	8015c54 <_sbrk_r>
 80152d2:	1c43      	adds	r3, r0, #1
 80152d4:	d103      	bne.n	80152de <sbrk_aligned+0x26>
 80152d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80152da:	4620      	mov	r0, r4
 80152dc:	bd70      	pop	{r4, r5, r6, pc}
 80152de:	1cc4      	adds	r4, r0, #3
 80152e0:	f024 0403 	bic.w	r4, r4, #3
 80152e4:	42a0      	cmp	r0, r4
 80152e6:	d0f8      	beq.n	80152da <sbrk_aligned+0x22>
 80152e8:	1a21      	subs	r1, r4, r0
 80152ea:	4628      	mov	r0, r5
 80152ec:	f000 fcb2 	bl	8015c54 <_sbrk_r>
 80152f0:	3001      	adds	r0, #1
 80152f2:	d1f2      	bne.n	80152da <sbrk_aligned+0x22>
 80152f4:	e7ef      	b.n	80152d6 <sbrk_aligned+0x1e>
 80152f6:	bf00      	nop
 80152f8:	2000b50c 	.word	0x2000b50c

080152fc <_malloc_r>:
 80152fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015300:	1ccd      	adds	r5, r1, #3
 8015302:	f025 0503 	bic.w	r5, r5, #3
 8015306:	3508      	adds	r5, #8
 8015308:	2d0c      	cmp	r5, #12
 801530a:	bf38      	it	cc
 801530c:	250c      	movcc	r5, #12
 801530e:	2d00      	cmp	r5, #0
 8015310:	4606      	mov	r6, r0
 8015312:	db01      	blt.n	8015318 <_malloc_r+0x1c>
 8015314:	42a9      	cmp	r1, r5
 8015316:	d904      	bls.n	8015322 <_malloc_r+0x26>
 8015318:	230c      	movs	r3, #12
 801531a:	6033      	str	r3, [r6, #0]
 801531c:	2000      	movs	r0, #0
 801531e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80153f8 <_malloc_r+0xfc>
 8015326:	f000 f869 	bl	80153fc <__malloc_lock>
 801532a:	f8d8 3000 	ldr.w	r3, [r8]
 801532e:	461c      	mov	r4, r3
 8015330:	bb44      	cbnz	r4, 8015384 <_malloc_r+0x88>
 8015332:	4629      	mov	r1, r5
 8015334:	4630      	mov	r0, r6
 8015336:	f7ff ffbf 	bl	80152b8 <sbrk_aligned>
 801533a:	1c43      	adds	r3, r0, #1
 801533c:	4604      	mov	r4, r0
 801533e:	d158      	bne.n	80153f2 <_malloc_r+0xf6>
 8015340:	f8d8 4000 	ldr.w	r4, [r8]
 8015344:	4627      	mov	r7, r4
 8015346:	2f00      	cmp	r7, #0
 8015348:	d143      	bne.n	80153d2 <_malloc_r+0xd6>
 801534a:	2c00      	cmp	r4, #0
 801534c:	d04b      	beq.n	80153e6 <_malloc_r+0xea>
 801534e:	6823      	ldr	r3, [r4, #0]
 8015350:	4639      	mov	r1, r7
 8015352:	4630      	mov	r0, r6
 8015354:	eb04 0903 	add.w	r9, r4, r3
 8015358:	f000 fc7c 	bl	8015c54 <_sbrk_r>
 801535c:	4581      	cmp	r9, r0
 801535e:	d142      	bne.n	80153e6 <_malloc_r+0xea>
 8015360:	6821      	ldr	r1, [r4, #0]
 8015362:	1a6d      	subs	r5, r5, r1
 8015364:	4629      	mov	r1, r5
 8015366:	4630      	mov	r0, r6
 8015368:	f7ff ffa6 	bl	80152b8 <sbrk_aligned>
 801536c:	3001      	adds	r0, #1
 801536e:	d03a      	beq.n	80153e6 <_malloc_r+0xea>
 8015370:	6823      	ldr	r3, [r4, #0]
 8015372:	442b      	add	r3, r5
 8015374:	6023      	str	r3, [r4, #0]
 8015376:	f8d8 3000 	ldr.w	r3, [r8]
 801537a:	685a      	ldr	r2, [r3, #4]
 801537c:	bb62      	cbnz	r2, 80153d8 <_malloc_r+0xdc>
 801537e:	f8c8 7000 	str.w	r7, [r8]
 8015382:	e00f      	b.n	80153a4 <_malloc_r+0xa8>
 8015384:	6822      	ldr	r2, [r4, #0]
 8015386:	1b52      	subs	r2, r2, r5
 8015388:	d420      	bmi.n	80153cc <_malloc_r+0xd0>
 801538a:	2a0b      	cmp	r2, #11
 801538c:	d917      	bls.n	80153be <_malloc_r+0xc2>
 801538e:	1961      	adds	r1, r4, r5
 8015390:	42a3      	cmp	r3, r4
 8015392:	6025      	str	r5, [r4, #0]
 8015394:	bf18      	it	ne
 8015396:	6059      	strne	r1, [r3, #4]
 8015398:	6863      	ldr	r3, [r4, #4]
 801539a:	bf08      	it	eq
 801539c:	f8c8 1000 	streq.w	r1, [r8]
 80153a0:	5162      	str	r2, [r4, r5]
 80153a2:	604b      	str	r3, [r1, #4]
 80153a4:	4630      	mov	r0, r6
 80153a6:	f000 f82f 	bl	8015408 <__malloc_unlock>
 80153aa:	f104 000b 	add.w	r0, r4, #11
 80153ae:	1d23      	adds	r3, r4, #4
 80153b0:	f020 0007 	bic.w	r0, r0, #7
 80153b4:	1ac2      	subs	r2, r0, r3
 80153b6:	bf1c      	itt	ne
 80153b8:	1a1b      	subne	r3, r3, r0
 80153ba:	50a3      	strne	r3, [r4, r2]
 80153bc:	e7af      	b.n	801531e <_malloc_r+0x22>
 80153be:	6862      	ldr	r2, [r4, #4]
 80153c0:	42a3      	cmp	r3, r4
 80153c2:	bf0c      	ite	eq
 80153c4:	f8c8 2000 	streq.w	r2, [r8]
 80153c8:	605a      	strne	r2, [r3, #4]
 80153ca:	e7eb      	b.n	80153a4 <_malloc_r+0xa8>
 80153cc:	4623      	mov	r3, r4
 80153ce:	6864      	ldr	r4, [r4, #4]
 80153d0:	e7ae      	b.n	8015330 <_malloc_r+0x34>
 80153d2:	463c      	mov	r4, r7
 80153d4:	687f      	ldr	r7, [r7, #4]
 80153d6:	e7b6      	b.n	8015346 <_malloc_r+0x4a>
 80153d8:	461a      	mov	r2, r3
 80153da:	685b      	ldr	r3, [r3, #4]
 80153dc:	42a3      	cmp	r3, r4
 80153de:	d1fb      	bne.n	80153d8 <_malloc_r+0xdc>
 80153e0:	2300      	movs	r3, #0
 80153e2:	6053      	str	r3, [r2, #4]
 80153e4:	e7de      	b.n	80153a4 <_malloc_r+0xa8>
 80153e6:	230c      	movs	r3, #12
 80153e8:	6033      	str	r3, [r6, #0]
 80153ea:	4630      	mov	r0, r6
 80153ec:	f000 f80c 	bl	8015408 <__malloc_unlock>
 80153f0:	e794      	b.n	801531c <_malloc_r+0x20>
 80153f2:	6005      	str	r5, [r0, #0]
 80153f4:	e7d6      	b.n	80153a4 <_malloc_r+0xa8>
 80153f6:	bf00      	nop
 80153f8:	2000b510 	.word	0x2000b510

080153fc <__malloc_lock>:
 80153fc:	4801      	ldr	r0, [pc, #4]	@ (8015404 <__malloc_lock+0x8>)
 80153fe:	f7ff beda 	b.w	80151b6 <__retarget_lock_acquire_recursive>
 8015402:	bf00      	nop
 8015404:	2000b508 	.word	0x2000b508

08015408 <__malloc_unlock>:
 8015408:	4801      	ldr	r0, [pc, #4]	@ (8015410 <__malloc_unlock+0x8>)
 801540a:	f7ff bed5 	b.w	80151b8 <__retarget_lock_release_recursive>
 801540e:	bf00      	nop
 8015410:	2000b508 	.word	0x2000b508

08015414 <__sfputc_r>:
 8015414:	6893      	ldr	r3, [r2, #8]
 8015416:	3b01      	subs	r3, #1
 8015418:	2b00      	cmp	r3, #0
 801541a:	b410      	push	{r4}
 801541c:	6093      	str	r3, [r2, #8]
 801541e:	da08      	bge.n	8015432 <__sfputc_r+0x1e>
 8015420:	6994      	ldr	r4, [r2, #24]
 8015422:	42a3      	cmp	r3, r4
 8015424:	db01      	blt.n	801542a <__sfputc_r+0x16>
 8015426:	290a      	cmp	r1, #10
 8015428:	d103      	bne.n	8015432 <__sfputc_r+0x1e>
 801542a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801542e:	f000 bb7d 	b.w	8015b2c <__swbuf_r>
 8015432:	6813      	ldr	r3, [r2, #0]
 8015434:	1c58      	adds	r0, r3, #1
 8015436:	6010      	str	r0, [r2, #0]
 8015438:	7019      	strb	r1, [r3, #0]
 801543a:	4608      	mov	r0, r1
 801543c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015440:	4770      	bx	lr

08015442 <__sfputs_r>:
 8015442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015444:	4606      	mov	r6, r0
 8015446:	460f      	mov	r7, r1
 8015448:	4614      	mov	r4, r2
 801544a:	18d5      	adds	r5, r2, r3
 801544c:	42ac      	cmp	r4, r5
 801544e:	d101      	bne.n	8015454 <__sfputs_r+0x12>
 8015450:	2000      	movs	r0, #0
 8015452:	e007      	b.n	8015464 <__sfputs_r+0x22>
 8015454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015458:	463a      	mov	r2, r7
 801545a:	4630      	mov	r0, r6
 801545c:	f7ff ffda 	bl	8015414 <__sfputc_r>
 8015460:	1c43      	adds	r3, r0, #1
 8015462:	d1f3      	bne.n	801544c <__sfputs_r+0xa>
 8015464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015468 <_vfiprintf_r>:
 8015468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801546c:	460d      	mov	r5, r1
 801546e:	b09d      	sub	sp, #116	@ 0x74
 8015470:	4614      	mov	r4, r2
 8015472:	4698      	mov	r8, r3
 8015474:	4606      	mov	r6, r0
 8015476:	b118      	cbz	r0, 8015480 <_vfiprintf_r+0x18>
 8015478:	6a03      	ldr	r3, [r0, #32]
 801547a:	b90b      	cbnz	r3, 8015480 <_vfiprintf_r+0x18>
 801547c:	f7ff fd86 	bl	8014f8c <__sinit>
 8015480:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015482:	07d9      	lsls	r1, r3, #31
 8015484:	d405      	bmi.n	8015492 <_vfiprintf_r+0x2a>
 8015486:	89ab      	ldrh	r3, [r5, #12]
 8015488:	059a      	lsls	r2, r3, #22
 801548a:	d402      	bmi.n	8015492 <_vfiprintf_r+0x2a>
 801548c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801548e:	f7ff fe92 	bl	80151b6 <__retarget_lock_acquire_recursive>
 8015492:	89ab      	ldrh	r3, [r5, #12]
 8015494:	071b      	lsls	r3, r3, #28
 8015496:	d501      	bpl.n	801549c <_vfiprintf_r+0x34>
 8015498:	692b      	ldr	r3, [r5, #16]
 801549a:	b99b      	cbnz	r3, 80154c4 <_vfiprintf_r+0x5c>
 801549c:	4629      	mov	r1, r5
 801549e:	4630      	mov	r0, r6
 80154a0:	f000 fb82 	bl	8015ba8 <__swsetup_r>
 80154a4:	b170      	cbz	r0, 80154c4 <_vfiprintf_r+0x5c>
 80154a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80154a8:	07dc      	lsls	r4, r3, #31
 80154aa:	d504      	bpl.n	80154b6 <_vfiprintf_r+0x4e>
 80154ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80154b0:	b01d      	add	sp, #116	@ 0x74
 80154b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154b6:	89ab      	ldrh	r3, [r5, #12]
 80154b8:	0598      	lsls	r0, r3, #22
 80154ba:	d4f7      	bmi.n	80154ac <_vfiprintf_r+0x44>
 80154bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80154be:	f7ff fe7b 	bl	80151b8 <__retarget_lock_release_recursive>
 80154c2:	e7f3      	b.n	80154ac <_vfiprintf_r+0x44>
 80154c4:	2300      	movs	r3, #0
 80154c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80154c8:	2320      	movs	r3, #32
 80154ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80154ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80154d2:	2330      	movs	r3, #48	@ 0x30
 80154d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015684 <_vfiprintf_r+0x21c>
 80154d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80154dc:	f04f 0901 	mov.w	r9, #1
 80154e0:	4623      	mov	r3, r4
 80154e2:	469a      	mov	sl, r3
 80154e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154e8:	b10a      	cbz	r2, 80154ee <_vfiprintf_r+0x86>
 80154ea:	2a25      	cmp	r2, #37	@ 0x25
 80154ec:	d1f9      	bne.n	80154e2 <_vfiprintf_r+0x7a>
 80154ee:	ebba 0b04 	subs.w	fp, sl, r4
 80154f2:	d00b      	beq.n	801550c <_vfiprintf_r+0xa4>
 80154f4:	465b      	mov	r3, fp
 80154f6:	4622      	mov	r2, r4
 80154f8:	4629      	mov	r1, r5
 80154fa:	4630      	mov	r0, r6
 80154fc:	f7ff ffa1 	bl	8015442 <__sfputs_r>
 8015500:	3001      	adds	r0, #1
 8015502:	f000 80a7 	beq.w	8015654 <_vfiprintf_r+0x1ec>
 8015506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015508:	445a      	add	r2, fp
 801550a:	9209      	str	r2, [sp, #36]	@ 0x24
 801550c:	f89a 3000 	ldrb.w	r3, [sl]
 8015510:	2b00      	cmp	r3, #0
 8015512:	f000 809f 	beq.w	8015654 <_vfiprintf_r+0x1ec>
 8015516:	2300      	movs	r3, #0
 8015518:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801551c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015520:	f10a 0a01 	add.w	sl, sl, #1
 8015524:	9304      	str	r3, [sp, #16]
 8015526:	9307      	str	r3, [sp, #28]
 8015528:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801552c:	931a      	str	r3, [sp, #104]	@ 0x68
 801552e:	4654      	mov	r4, sl
 8015530:	2205      	movs	r2, #5
 8015532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015536:	4853      	ldr	r0, [pc, #332]	@ (8015684 <_vfiprintf_r+0x21c>)
 8015538:	f7ea fe4a 	bl	80001d0 <memchr>
 801553c:	9a04      	ldr	r2, [sp, #16]
 801553e:	b9d8      	cbnz	r0, 8015578 <_vfiprintf_r+0x110>
 8015540:	06d1      	lsls	r1, r2, #27
 8015542:	bf44      	itt	mi
 8015544:	2320      	movmi	r3, #32
 8015546:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801554a:	0713      	lsls	r3, r2, #28
 801554c:	bf44      	itt	mi
 801554e:	232b      	movmi	r3, #43	@ 0x2b
 8015550:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015554:	f89a 3000 	ldrb.w	r3, [sl]
 8015558:	2b2a      	cmp	r3, #42	@ 0x2a
 801555a:	d015      	beq.n	8015588 <_vfiprintf_r+0x120>
 801555c:	9a07      	ldr	r2, [sp, #28]
 801555e:	4654      	mov	r4, sl
 8015560:	2000      	movs	r0, #0
 8015562:	f04f 0c0a 	mov.w	ip, #10
 8015566:	4621      	mov	r1, r4
 8015568:	f811 3b01 	ldrb.w	r3, [r1], #1
 801556c:	3b30      	subs	r3, #48	@ 0x30
 801556e:	2b09      	cmp	r3, #9
 8015570:	d94b      	bls.n	801560a <_vfiprintf_r+0x1a2>
 8015572:	b1b0      	cbz	r0, 80155a2 <_vfiprintf_r+0x13a>
 8015574:	9207      	str	r2, [sp, #28]
 8015576:	e014      	b.n	80155a2 <_vfiprintf_r+0x13a>
 8015578:	eba0 0308 	sub.w	r3, r0, r8
 801557c:	fa09 f303 	lsl.w	r3, r9, r3
 8015580:	4313      	orrs	r3, r2
 8015582:	9304      	str	r3, [sp, #16]
 8015584:	46a2      	mov	sl, r4
 8015586:	e7d2      	b.n	801552e <_vfiprintf_r+0xc6>
 8015588:	9b03      	ldr	r3, [sp, #12]
 801558a:	1d19      	adds	r1, r3, #4
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	9103      	str	r1, [sp, #12]
 8015590:	2b00      	cmp	r3, #0
 8015592:	bfbb      	ittet	lt
 8015594:	425b      	neglt	r3, r3
 8015596:	f042 0202 	orrlt.w	r2, r2, #2
 801559a:	9307      	strge	r3, [sp, #28]
 801559c:	9307      	strlt	r3, [sp, #28]
 801559e:	bfb8      	it	lt
 80155a0:	9204      	strlt	r2, [sp, #16]
 80155a2:	7823      	ldrb	r3, [r4, #0]
 80155a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80155a6:	d10a      	bne.n	80155be <_vfiprintf_r+0x156>
 80155a8:	7863      	ldrb	r3, [r4, #1]
 80155aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80155ac:	d132      	bne.n	8015614 <_vfiprintf_r+0x1ac>
 80155ae:	9b03      	ldr	r3, [sp, #12]
 80155b0:	1d1a      	adds	r2, r3, #4
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	9203      	str	r2, [sp, #12]
 80155b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80155ba:	3402      	adds	r4, #2
 80155bc:	9305      	str	r3, [sp, #20]
 80155be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015694 <_vfiprintf_r+0x22c>
 80155c2:	7821      	ldrb	r1, [r4, #0]
 80155c4:	2203      	movs	r2, #3
 80155c6:	4650      	mov	r0, sl
 80155c8:	f7ea fe02 	bl	80001d0 <memchr>
 80155cc:	b138      	cbz	r0, 80155de <_vfiprintf_r+0x176>
 80155ce:	9b04      	ldr	r3, [sp, #16]
 80155d0:	eba0 000a 	sub.w	r0, r0, sl
 80155d4:	2240      	movs	r2, #64	@ 0x40
 80155d6:	4082      	lsls	r2, r0
 80155d8:	4313      	orrs	r3, r2
 80155da:	3401      	adds	r4, #1
 80155dc:	9304      	str	r3, [sp, #16]
 80155de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155e2:	4829      	ldr	r0, [pc, #164]	@ (8015688 <_vfiprintf_r+0x220>)
 80155e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80155e8:	2206      	movs	r2, #6
 80155ea:	f7ea fdf1 	bl	80001d0 <memchr>
 80155ee:	2800      	cmp	r0, #0
 80155f0:	d03f      	beq.n	8015672 <_vfiprintf_r+0x20a>
 80155f2:	4b26      	ldr	r3, [pc, #152]	@ (801568c <_vfiprintf_r+0x224>)
 80155f4:	bb1b      	cbnz	r3, 801563e <_vfiprintf_r+0x1d6>
 80155f6:	9b03      	ldr	r3, [sp, #12]
 80155f8:	3307      	adds	r3, #7
 80155fa:	f023 0307 	bic.w	r3, r3, #7
 80155fe:	3308      	adds	r3, #8
 8015600:	9303      	str	r3, [sp, #12]
 8015602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015604:	443b      	add	r3, r7
 8015606:	9309      	str	r3, [sp, #36]	@ 0x24
 8015608:	e76a      	b.n	80154e0 <_vfiprintf_r+0x78>
 801560a:	fb0c 3202 	mla	r2, ip, r2, r3
 801560e:	460c      	mov	r4, r1
 8015610:	2001      	movs	r0, #1
 8015612:	e7a8      	b.n	8015566 <_vfiprintf_r+0xfe>
 8015614:	2300      	movs	r3, #0
 8015616:	3401      	adds	r4, #1
 8015618:	9305      	str	r3, [sp, #20]
 801561a:	4619      	mov	r1, r3
 801561c:	f04f 0c0a 	mov.w	ip, #10
 8015620:	4620      	mov	r0, r4
 8015622:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015626:	3a30      	subs	r2, #48	@ 0x30
 8015628:	2a09      	cmp	r2, #9
 801562a:	d903      	bls.n	8015634 <_vfiprintf_r+0x1cc>
 801562c:	2b00      	cmp	r3, #0
 801562e:	d0c6      	beq.n	80155be <_vfiprintf_r+0x156>
 8015630:	9105      	str	r1, [sp, #20]
 8015632:	e7c4      	b.n	80155be <_vfiprintf_r+0x156>
 8015634:	fb0c 2101 	mla	r1, ip, r1, r2
 8015638:	4604      	mov	r4, r0
 801563a:	2301      	movs	r3, #1
 801563c:	e7f0      	b.n	8015620 <_vfiprintf_r+0x1b8>
 801563e:	ab03      	add	r3, sp, #12
 8015640:	9300      	str	r3, [sp, #0]
 8015642:	462a      	mov	r2, r5
 8015644:	4b12      	ldr	r3, [pc, #72]	@ (8015690 <_vfiprintf_r+0x228>)
 8015646:	a904      	add	r1, sp, #16
 8015648:	4630      	mov	r0, r6
 801564a:	f3af 8000 	nop.w
 801564e:	4607      	mov	r7, r0
 8015650:	1c78      	adds	r0, r7, #1
 8015652:	d1d6      	bne.n	8015602 <_vfiprintf_r+0x19a>
 8015654:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015656:	07d9      	lsls	r1, r3, #31
 8015658:	d405      	bmi.n	8015666 <_vfiprintf_r+0x1fe>
 801565a:	89ab      	ldrh	r3, [r5, #12]
 801565c:	059a      	lsls	r2, r3, #22
 801565e:	d402      	bmi.n	8015666 <_vfiprintf_r+0x1fe>
 8015660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015662:	f7ff fda9 	bl	80151b8 <__retarget_lock_release_recursive>
 8015666:	89ab      	ldrh	r3, [r5, #12]
 8015668:	065b      	lsls	r3, r3, #25
 801566a:	f53f af1f 	bmi.w	80154ac <_vfiprintf_r+0x44>
 801566e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015670:	e71e      	b.n	80154b0 <_vfiprintf_r+0x48>
 8015672:	ab03      	add	r3, sp, #12
 8015674:	9300      	str	r3, [sp, #0]
 8015676:	462a      	mov	r2, r5
 8015678:	4b05      	ldr	r3, [pc, #20]	@ (8015690 <_vfiprintf_r+0x228>)
 801567a:	a904      	add	r1, sp, #16
 801567c:	4630      	mov	r0, r6
 801567e:	f000 f879 	bl	8015774 <_printf_i>
 8015682:	e7e4      	b.n	801564e <_vfiprintf_r+0x1e6>
 8015684:	08019c01 	.word	0x08019c01
 8015688:	08019c0b 	.word	0x08019c0b
 801568c:	00000000 	.word	0x00000000
 8015690:	08015443 	.word	0x08015443
 8015694:	08019c07 	.word	0x08019c07

08015698 <_printf_common>:
 8015698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801569c:	4616      	mov	r6, r2
 801569e:	4698      	mov	r8, r3
 80156a0:	688a      	ldr	r2, [r1, #8]
 80156a2:	690b      	ldr	r3, [r1, #16]
 80156a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80156a8:	4293      	cmp	r3, r2
 80156aa:	bfb8      	it	lt
 80156ac:	4613      	movlt	r3, r2
 80156ae:	6033      	str	r3, [r6, #0]
 80156b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80156b4:	4607      	mov	r7, r0
 80156b6:	460c      	mov	r4, r1
 80156b8:	b10a      	cbz	r2, 80156be <_printf_common+0x26>
 80156ba:	3301      	adds	r3, #1
 80156bc:	6033      	str	r3, [r6, #0]
 80156be:	6823      	ldr	r3, [r4, #0]
 80156c0:	0699      	lsls	r1, r3, #26
 80156c2:	bf42      	ittt	mi
 80156c4:	6833      	ldrmi	r3, [r6, #0]
 80156c6:	3302      	addmi	r3, #2
 80156c8:	6033      	strmi	r3, [r6, #0]
 80156ca:	6825      	ldr	r5, [r4, #0]
 80156cc:	f015 0506 	ands.w	r5, r5, #6
 80156d0:	d106      	bne.n	80156e0 <_printf_common+0x48>
 80156d2:	f104 0a19 	add.w	sl, r4, #25
 80156d6:	68e3      	ldr	r3, [r4, #12]
 80156d8:	6832      	ldr	r2, [r6, #0]
 80156da:	1a9b      	subs	r3, r3, r2
 80156dc:	42ab      	cmp	r3, r5
 80156de:	dc26      	bgt.n	801572e <_printf_common+0x96>
 80156e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80156e4:	6822      	ldr	r2, [r4, #0]
 80156e6:	3b00      	subs	r3, #0
 80156e8:	bf18      	it	ne
 80156ea:	2301      	movne	r3, #1
 80156ec:	0692      	lsls	r2, r2, #26
 80156ee:	d42b      	bmi.n	8015748 <_printf_common+0xb0>
 80156f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80156f4:	4641      	mov	r1, r8
 80156f6:	4638      	mov	r0, r7
 80156f8:	47c8      	blx	r9
 80156fa:	3001      	adds	r0, #1
 80156fc:	d01e      	beq.n	801573c <_printf_common+0xa4>
 80156fe:	6823      	ldr	r3, [r4, #0]
 8015700:	6922      	ldr	r2, [r4, #16]
 8015702:	f003 0306 	and.w	r3, r3, #6
 8015706:	2b04      	cmp	r3, #4
 8015708:	bf02      	ittt	eq
 801570a:	68e5      	ldreq	r5, [r4, #12]
 801570c:	6833      	ldreq	r3, [r6, #0]
 801570e:	1aed      	subeq	r5, r5, r3
 8015710:	68a3      	ldr	r3, [r4, #8]
 8015712:	bf0c      	ite	eq
 8015714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015718:	2500      	movne	r5, #0
 801571a:	4293      	cmp	r3, r2
 801571c:	bfc4      	itt	gt
 801571e:	1a9b      	subgt	r3, r3, r2
 8015720:	18ed      	addgt	r5, r5, r3
 8015722:	2600      	movs	r6, #0
 8015724:	341a      	adds	r4, #26
 8015726:	42b5      	cmp	r5, r6
 8015728:	d11a      	bne.n	8015760 <_printf_common+0xc8>
 801572a:	2000      	movs	r0, #0
 801572c:	e008      	b.n	8015740 <_printf_common+0xa8>
 801572e:	2301      	movs	r3, #1
 8015730:	4652      	mov	r2, sl
 8015732:	4641      	mov	r1, r8
 8015734:	4638      	mov	r0, r7
 8015736:	47c8      	blx	r9
 8015738:	3001      	adds	r0, #1
 801573a:	d103      	bne.n	8015744 <_printf_common+0xac>
 801573c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015744:	3501      	adds	r5, #1
 8015746:	e7c6      	b.n	80156d6 <_printf_common+0x3e>
 8015748:	18e1      	adds	r1, r4, r3
 801574a:	1c5a      	adds	r2, r3, #1
 801574c:	2030      	movs	r0, #48	@ 0x30
 801574e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015752:	4422      	add	r2, r4
 8015754:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015758:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801575c:	3302      	adds	r3, #2
 801575e:	e7c7      	b.n	80156f0 <_printf_common+0x58>
 8015760:	2301      	movs	r3, #1
 8015762:	4622      	mov	r2, r4
 8015764:	4641      	mov	r1, r8
 8015766:	4638      	mov	r0, r7
 8015768:	47c8      	blx	r9
 801576a:	3001      	adds	r0, #1
 801576c:	d0e6      	beq.n	801573c <_printf_common+0xa4>
 801576e:	3601      	adds	r6, #1
 8015770:	e7d9      	b.n	8015726 <_printf_common+0x8e>
	...

08015774 <_printf_i>:
 8015774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015778:	7e0f      	ldrb	r7, [r1, #24]
 801577a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801577c:	2f78      	cmp	r7, #120	@ 0x78
 801577e:	4691      	mov	r9, r2
 8015780:	4680      	mov	r8, r0
 8015782:	460c      	mov	r4, r1
 8015784:	469a      	mov	sl, r3
 8015786:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801578a:	d807      	bhi.n	801579c <_printf_i+0x28>
 801578c:	2f62      	cmp	r7, #98	@ 0x62
 801578e:	d80a      	bhi.n	80157a6 <_printf_i+0x32>
 8015790:	2f00      	cmp	r7, #0
 8015792:	f000 80d1 	beq.w	8015938 <_printf_i+0x1c4>
 8015796:	2f58      	cmp	r7, #88	@ 0x58
 8015798:	f000 80b8 	beq.w	801590c <_printf_i+0x198>
 801579c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80157a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80157a4:	e03a      	b.n	801581c <_printf_i+0xa8>
 80157a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80157aa:	2b15      	cmp	r3, #21
 80157ac:	d8f6      	bhi.n	801579c <_printf_i+0x28>
 80157ae:	a101      	add	r1, pc, #4	@ (adr r1, 80157b4 <_printf_i+0x40>)
 80157b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80157b4:	0801580d 	.word	0x0801580d
 80157b8:	08015821 	.word	0x08015821
 80157bc:	0801579d 	.word	0x0801579d
 80157c0:	0801579d 	.word	0x0801579d
 80157c4:	0801579d 	.word	0x0801579d
 80157c8:	0801579d 	.word	0x0801579d
 80157cc:	08015821 	.word	0x08015821
 80157d0:	0801579d 	.word	0x0801579d
 80157d4:	0801579d 	.word	0x0801579d
 80157d8:	0801579d 	.word	0x0801579d
 80157dc:	0801579d 	.word	0x0801579d
 80157e0:	0801591f 	.word	0x0801591f
 80157e4:	0801584b 	.word	0x0801584b
 80157e8:	080158d9 	.word	0x080158d9
 80157ec:	0801579d 	.word	0x0801579d
 80157f0:	0801579d 	.word	0x0801579d
 80157f4:	08015941 	.word	0x08015941
 80157f8:	0801579d 	.word	0x0801579d
 80157fc:	0801584b 	.word	0x0801584b
 8015800:	0801579d 	.word	0x0801579d
 8015804:	0801579d 	.word	0x0801579d
 8015808:	080158e1 	.word	0x080158e1
 801580c:	6833      	ldr	r3, [r6, #0]
 801580e:	1d1a      	adds	r2, r3, #4
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	6032      	str	r2, [r6, #0]
 8015814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015818:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801581c:	2301      	movs	r3, #1
 801581e:	e09c      	b.n	801595a <_printf_i+0x1e6>
 8015820:	6833      	ldr	r3, [r6, #0]
 8015822:	6820      	ldr	r0, [r4, #0]
 8015824:	1d19      	adds	r1, r3, #4
 8015826:	6031      	str	r1, [r6, #0]
 8015828:	0606      	lsls	r6, r0, #24
 801582a:	d501      	bpl.n	8015830 <_printf_i+0xbc>
 801582c:	681d      	ldr	r5, [r3, #0]
 801582e:	e003      	b.n	8015838 <_printf_i+0xc4>
 8015830:	0645      	lsls	r5, r0, #25
 8015832:	d5fb      	bpl.n	801582c <_printf_i+0xb8>
 8015834:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015838:	2d00      	cmp	r5, #0
 801583a:	da03      	bge.n	8015844 <_printf_i+0xd0>
 801583c:	232d      	movs	r3, #45	@ 0x2d
 801583e:	426d      	negs	r5, r5
 8015840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015844:	4858      	ldr	r0, [pc, #352]	@ (80159a8 <_printf_i+0x234>)
 8015846:	230a      	movs	r3, #10
 8015848:	e011      	b.n	801586e <_printf_i+0xfa>
 801584a:	6821      	ldr	r1, [r4, #0]
 801584c:	6833      	ldr	r3, [r6, #0]
 801584e:	0608      	lsls	r0, r1, #24
 8015850:	f853 5b04 	ldr.w	r5, [r3], #4
 8015854:	d402      	bmi.n	801585c <_printf_i+0xe8>
 8015856:	0649      	lsls	r1, r1, #25
 8015858:	bf48      	it	mi
 801585a:	b2ad      	uxthmi	r5, r5
 801585c:	2f6f      	cmp	r7, #111	@ 0x6f
 801585e:	4852      	ldr	r0, [pc, #328]	@ (80159a8 <_printf_i+0x234>)
 8015860:	6033      	str	r3, [r6, #0]
 8015862:	bf14      	ite	ne
 8015864:	230a      	movne	r3, #10
 8015866:	2308      	moveq	r3, #8
 8015868:	2100      	movs	r1, #0
 801586a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801586e:	6866      	ldr	r6, [r4, #4]
 8015870:	60a6      	str	r6, [r4, #8]
 8015872:	2e00      	cmp	r6, #0
 8015874:	db05      	blt.n	8015882 <_printf_i+0x10e>
 8015876:	6821      	ldr	r1, [r4, #0]
 8015878:	432e      	orrs	r6, r5
 801587a:	f021 0104 	bic.w	r1, r1, #4
 801587e:	6021      	str	r1, [r4, #0]
 8015880:	d04b      	beq.n	801591a <_printf_i+0x1a6>
 8015882:	4616      	mov	r6, r2
 8015884:	fbb5 f1f3 	udiv	r1, r5, r3
 8015888:	fb03 5711 	mls	r7, r3, r1, r5
 801588c:	5dc7      	ldrb	r7, [r0, r7]
 801588e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015892:	462f      	mov	r7, r5
 8015894:	42bb      	cmp	r3, r7
 8015896:	460d      	mov	r5, r1
 8015898:	d9f4      	bls.n	8015884 <_printf_i+0x110>
 801589a:	2b08      	cmp	r3, #8
 801589c:	d10b      	bne.n	80158b6 <_printf_i+0x142>
 801589e:	6823      	ldr	r3, [r4, #0]
 80158a0:	07df      	lsls	r7, r3, #31
 80158a2:	d508      	bpl.n	80158b6 <_printf_i+0x142>
 80158a4:	6923      	ldr	r3, [r4, #16]
 80158a6:	6861      	ldr	r1, [r4, #4]
 80158a8:	4299      	cmp	r1, r3
 80158aa:	bfde      	ittt	le
 80158ac:	2330      	movle	r3, #48	@ 0x30
 80158ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80158b2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80158b6:	1b92      	subs	r2, r2, r6
 80158b8:	6122      	str	r2, [r4, #16]
 80158ba:	f8cd a000 	str.w	sl, [sp]
 80158be:	464b      	mov	r3, r9
 80158c0:	aa03      	add	r2, sp, #12
 80158c2:	4621      	mov	r1, r4
 80158c4:	4640      	mov	r0, r8
 80158c6:	f7ff fee7 	bl	8015698 <_printf_common>
 80158ca:	3001      	adds	r0, #1
 80158cc:	d14a      	bne.n	8015964 <_printf_i+0x1f0>
 80158ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80158d2:	b004      	add	sp, #16
 80158d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158d8:	6823      	ldr	r3, [r4, #0]
 80158da:	f043 0320 	orr.w	r3, r3, #32
 80158de:	6023      	str	r3, [r4, #0]
 80158e0:	4832      	ldr	r0, [pc, #200]	@ (80159ac <_printf_i+0x238>)
 80158e2:	2778      	movs	r7, #120	@ 0x78
 80158e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80158e8:	6823      	ldr	r3, [r4, #0]
 80158ea:	6831      	ldr	r1, [r6, #0]
 80158ec:	061f      	lsls	r7, r3, #24
 80158ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80158f2:	d402      	bmi.n	80158fa <_printf_i+0x186>
 80158f4:	065f      	lsls	r7, r3, #25
 80158f6:	bf48      	it	mi
 80158f8:	b2ad      	uxthmi	r5, r5
 80158fa:	6031      	str	r1, [r6, #0]
 80158fc:	07d9      	lsls	r1, r3, #31
 80158fe:	bf44      	itt	mi
 8015900:	f043 0320 	orrmi.w	r3, r3, #32
 8015904:	6023      	strmi	r3, [r4, #0]
 8015906:	b11d      	cbz	r5, 8015910 <_printf_i+0x19c>
 8015908:	2310      	movs	r3, #16
 801590a:	e7ad      	b.n	8015868 <_printf_i+0xf4>
 801590c:	4826      	ldr	r0, [pc, #152]	@ (80159a8 <_printf_i+0x234>)
 801590e:	e7e9      	b.n	80158e4 <_printf_i+0x170>
 8015910:	6823      	ldr	r3, [r4, #0]
 8015912:	f023 0320 	bic.w	r3, r3, #32
 8015916:	6023      	str	r3, [r4, #0]
 8015918:	e7f6      	b.n	8015908 <_printf_i+0x194>
 801591a:	4616      	mov	r6, r2
 801591c:	e7bd      	b.n	801589a <_printf_i+0x126>
 801591e:	6833      	ldr	r3, [r6, #0]
 8015920:	6825      	ldr	r5, [r4, #0]
 8015922:	6961      	ldr	r1, [r4, #20]
 8015924:	1d18      	adds	r0, r3, #4
 8015926:	6030      	str	r0, [r6, #0]
 8015928:	062e      	lsls	r6, r5, #24
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	d501      	bpl.n	8015932 <_printf_i+0x1be>
 801592e:	6019      	str	r1, [r3, #0]
 8015930:	e002      	b.n	8015938 <_printf_i+0x1c4>
 8015932:	0668      	lsls	r0, r5, #25
 8015934:	d5fb      	bpl.n	801592e <_printf_i+0x1ba>
 8015936:	8019      	strh	r1, [r3, #0]
 8015938:	2300      	movs	r3, #0
 801593a:	6123      	str	r3, [r4, #16]
 801593c:	4616      	mov	r6, r2
 801593e:	e7bc      	b.n	80158ba <_printf_i+0x146>
 8015940:	6833      	ldr	r3, [r6, #0]
 8015942:	1d1a      	adds	r2, r3, #4
 8015944:	6032      	str	r2, [r6, #0]
 8015946:	681e      	ldr	r6, [r3, #0]
 8015948:	6862      	ldr	r2, [r4, #4]
 801594a:	2100      	movs	r1, #0
 801594c:	4630      	mov	r0, r6
 801594e:	f7ea fc3f 	bl	80001d0 <memchr>
 8015952:	b108      	cbz	r0, 8015958 <_printf_i+0x1e4>
 8015954:	1b80      	subs	r0, r0, r6
 8015956:	6060      	str	r0, [r4, #4]
 8015958:	6863      	ldr	r3, [r4, #4]
 801595a:	6123      	str	r3, [r4, #16]
 801595c:	2300      	movs	r3, #0
 801595e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015962:	e7aa      	b.n	80158ba <_printf_i+0x146>
 8015964:	6923      	ldr	r3, [r4, #16]
 8015966:	4632      	mov	r2, r6
 8015968:	4649      	mov	r1, r9
 801596a:	4640      	mov	r0, r8
 801596c:	47d0      	blx	sl
 801596e:	3001      	adds	r0, #1
 8015970:	d0ad      	beq.n	80158ce <_printf_i+0x15a>
 8015972:	6823      	ldr	r3, [r4, #0]
 8015974:	079b      	lsls	r3, r3, #30
 8015976:	d413      	bmi.n	80159a0 <_printf_i+0x22c>
 8015978:	68e0      	ldr	r0, [r4, #12]
 801597a:	9b03      	ldr	r3, [sp, #12]
 801597c:	4298      	cmp	r0, r3
 801597e:	bfb8      	it	lt
 8015980:	4618      	movlt	r0, r3
 8015982:	e7a6      	b.n	80158d2 <_printf_i+0x15e>
 8015984:	2301      	movs	r3, #1
 8015986:	4632      	mov	r2, r6
 8015988:	4649      	mov	r1, r9
 801598a:	4640      	mov	r0, r8
 801598c:	47d0      	blx	sl
 801598e:	3001      	adds	r0, #1
 8015990:	d09d      	beq.n	80158ce <_printf_i+0x15a>
 8015992:	3501      	adds	r5, #1
 8015994:	68e3      	ldr	r3, [r4, #12]
 8015996:	9903      	ldr	r1, [sp, #12]
 8015998:	1a5b      	subs	r3, r3, r1
 801599a:	42ab      	cmp	r3, r5
 801599c:	dcf2      	bgt.n	8015984 <_printf_i+0x210>
 801599e:	e7eb      	b.n	8015978 <_printf_i+0x204>
 80159a0:	2500      	movs	r5, #0
 80159a2:	f104 0619 	add.w	r6, r4, #25
 80159a6:	e7f5      	b.n	8015994 <_printf_i+0x220>
 80159a8:	08019c12 	.word	0x08019c12
 80159ac:	08019c23 	.word	0x08019c23

080159b0 <__sflush_r>:
 80159b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80159b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159b8:	0716      	lsls	r6, r2, #28
 80159ba:	4605      	mov	r5, r0
 80159bc:	460c      	mov	r4, r1
 80159be:	d454      	bmi.n	8015a6a <__sflush_r+0xba>
 80159c0:	684b      	ldr	r3, [r1, #4]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	dc02      	bgt.n	80159cc <__sflush_r+0x1c>
 80159c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	dd48      	ble.n	8015a5e <__sflush_r+0xae>
 80159cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80159ce:	2e00      	cmp	r6, #0
 80159d0:	d045      	beq.n	8015a5e <__sflush_r+0xae>
 80159d2:	2300      	movs	r3, #0
 80159d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80159d8:	682f      	ldr	r7, [r5, #0]
 80159da:	6a21      	ldr	r1, [r4, #32]
 80159dc:	602b      	str	r3, [r5, #0]
 80159de:	d030      	beq.n	8015a42 <__sflush_r+0x92>
 80159e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80159e2:	89a3      	ldrh	r3, [r4, #12]
 80159e4:	0759      	lsls	r1, r3, #29
 80159e6:	d505      	bpl.n	80159f4 <__sflush_r+0x44>
 80159e8:	6863      	ldr	r3, [r4, #4]
 80159ea:	1ad2      	subs	r2, r2, r3
 80159ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80159ee:	b10b      	cbz	r3, 80159f4 <__sflush_r+0x44>
 80159f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80159f2:	1ad2      	subs	r2, r2, r3
 80159f4:	2300      	movs	r3, #0
 80159f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80159f8:	6a21      	ldr	r1, [r4, #32]
 80159fa:	4628      	mov	r0, r5
 80159fc:	47b0      	blx	r6
 80159fe:	1c43      	adds	r3, r0, #1
 8015a00:	89a3      	ldrh	r3, [r4, #12]
 8015a02:	d106      	bne.n	8015a12 <__sflush_r+0x62>
 8015a04:	6829      	ldr	r1, [r5, #0]
 8015a06:	291d      	cmp	r1, #29
 8015a08:	d82b      	bhi.n	8015a62 <__sflush_r+0xb2>
 8015a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8015ab4 <__sflush_r+0x104>)
 8015a0c:	40ca      	lsrs	r2, r1
 8015a0e:	07d6      	lsls	r6, r2, #31
 8015a10:	d527      	bpl.n	8015a62 <__sflush_r+0xb2>
 8015a12:	2200      	movs	r2, #0
 8015a14:	6062      	str	r2, [r4, #4]
 8015a16:	04d9      	lsls	r1, r3, #19
 8015a18:	6922      	ldr	r2, [r4, #16]
 8015a1a:	6022      	str	r2, [r4, #0]
 8015a1c:	d504      	bpl.n	8015a28 <__sflush_r+0x78>
 8015a1e:	1c42      	adds	r2, r0, #1
 8015a20:	d101      	bne.n	8015a26 <__sflush_r+0x76>
 8015a22:	682b      	ldr	r3, [r5, #0]
 8015a24:	b903      	cbnz	r3, 8015a28 <__sflush_r+0x78>
 8015a26:	6560      	str	r0, [r4, #84]	@ 0x54
 8015a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015a2a:	602f      	str	r7, [r5, #0]
 8015a2c:	b1b9      	cbz	r1, 8015a5e <__sflush_r+0xae>
 8015a2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015a32:	4299      	cmp	r1, r3
 8015a34:	d002      	beq.n	8015a3c <__sflush_r+0x8c>
 8015a36:	4628      	mov	r0, r5
 8015a38:	f7ff fbec 	bl	8015214 <_free_r>
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8015a40:	e00d      	b.n	8015a5e <__sflush_r+0xae>
 8015a42:	2301      	movs	r3, #1
 8015a44:	4628      	mov	r0, r5
 8015a46:	47b0      	blx	r6
 8015a48:	4602      	mov	r2, r0
 8015a4a:	1c50      	adds	r0, r2, #1
 8015a4c:	d1c9      	bne.n	80159e2 <__sflush_r+0x32>
 8015a4e:	682b      	ldr	r3, [r5, #0]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d0c6      	beq.n	80159e2 <__sflush_r+0x32>
 8015a54:	2b1d      	cmp	r3, #29
 8015a56:	d001      	beq.n	8015a5c <__sflush_r+0xac>
 8015a58:	2b16      	cmp	r3, #22
 8015a5a:	d11e      	bne.n	8015a9a <__sflush_r+0xea>
 8015a5c:	602f      	str	r7, [r5, #0]
 8015a5e:	2000      	movs	r0, #0
 8015a60:	e022      	b.n	8015aa8 <__sflush_r+0xf8>
 8015a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015a66:	b21b      	sxth	r3, r3
 8015a68:	e01b      	b.n	8015aa2 <__sflush_r+0xf2>
 8015a6a:	690f      	ldr	r7, [r1, #16]
 8015a6c:	2f00      	cmp	r7, #0
 8015a6e:	d0f6      	beq.n	8015a5e <__sflush_r+0xae>
 8015a70:	0793      	lsls	r3, r2, #30
 8015a72:	680e      	ldr	r6, [r1, #0]
 8015a74:	bf08      	it	eq
 8015a76:	694b      	ldreq	r3, [r1, #20]
 8015a78:	600f      	str	r7, [r1, #0]
 8015a7a:	bf18      	it	ne
 8015a7c:	2300      	movne	r3, #0
 8015a7e:	eba6 0807 	sub.w	r8, r6, r7
 8015a82:	608b      	str	r3, [r1, #8]
 8015a84:	f1b8 0f00 	cmp.w	r8, #0
 8015a88:	dde9      	ble.n	8015a5e <__sflush_r+0xae>
 8015a8a:	6a21      	ldr	r1, [r4, #32]
 8015a8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015a8e:	4643      	mov	r3, r8
 8015a90:	463a      	mov	r2, r7
 8015a92:	4628      	mov	r0, r5
 8015a94:	47b0      	blx	r6
 8015a96:	2800      	cmp	r0, #0
 8015a98:	dc08      	bgt.n	8015aac <__sflush_r+0xfc>
 8015a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015aa2:	81a3      	strh	r3, [r4, #12]
 8015aa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015aac:	4407      	add	r7, r0
 8015aae:	eba8 0800 	sub.w	r8, r8, r0
 8015ab2:	e7e7      	b.n	8015a84 <__sflush_r+0xd4>
 8015ab4:	20400001 	.word	0x20400001

08015ab8 <_fflush_r>:
 8015ab8:	b538      	push	{r3, r4, r5, lr}
 8015aba:	690b      	ldr	r3, [r1, #16]
 8015abc:	4605      	mov	r5, r0
 8015abe:	460c      	mov	r4, r1
 8015ac0:	b913      	cbnz	r3, 8015ac8 <_fflush_r+0x10>
 8015ac2:	2500      	movs	r5, #0
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	bd38      	pop	{r3, r4, r5, pc}
 8015ac8:	b118      	cbz	r0, 8015ad2 <_fflush_r+0x1a>
 8015aca:	6a03      	ldr	r3, [r0, #32]
 8015acc:	b90b      	cbnz	r3, 8015ad2 <_fflush_r+0x1a>
 8015ace:	f7ff fa5d 	bl	8014f8c <__sinit>
 8015ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d0f3      	beq.n	8015ac2 <_fflush_r+0xa>
 8015ada:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015adc:	07d0      	lsls	r0, r2, #31
 8015ade:	d404      	bmi.n	8015aea <_fflush_r+0x32>
 8015ae0:	0599      	lsls	r1, r3, #22
 8015ae2:	d402      	bmi.n	8015aea <_fflush_r+0x32>
 8015ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015ae6:	f7ff fb66 	bl	80151b6 <__retarget_lock_acquire_recursive>
 8015aea:	4628      	mov	r0, r5
 8015aec:	4621      	mov	r1, r4
 8015aee:	f7ff ff5f 	bl	80159b0 <__sflush_r>
 8015af2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015af4:	07da      	lsls	r2, r3, #31
 8015af6:	4605      	mov	r5, r0
 8015af8:	d4e4      	bmi.n	8015ac4 <_fflush_r+0xc>
 8015afa:	89a3      	ldrh	r3, [r4, #12]
 8015afc:	059b      	lsls	r3, r3, #22
 8015afe:	d4e1      	bmi.n	8015ac4 <_fflush_r+0xc>
 8015b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015b02:	f7ff fb59 	bl	80151b8 <__retarget_lock_release_recursive>
 8015b06:	e7dd      	b.n	8015ac4 <_fflush_r+0xc>

08015b08 <fiprintf>:
 8015b08:	b40e      	push	{r1, r2, r3}
 8015b0a:	b503      	push	{r0, r1, lr}
 8015b0c:	4601      	mov	r1, r0
 8015b0e:	ab03      	add	r3, sp, #12
 8015b10:	4805      	ldr	r0, [pc, #20]	@ (8015b28 <fiprintf+0x20>)
 8015b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b16:	6800      	ldr	r0, [r0, #0]
 8015b18:	9301      	str	r3, [sp, #4]
 8015b1a:	f7ff fca5 	bl	8015468 <_vfiprintf_r>
 8015b1e:	b002      	add	sp, #8
 8015b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b24:	b003      	add	sp, #12
 8015b26:	4770      	bx	lr
 8015b28:	200000d8 	.word	0x200000d8

08015b2c <__swbuf_r>:
 8015b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b2e:	460e      	mov	r6, r1
 8015b30:	4614      	mov	r4, r2
 8015b32:	4605      	mov	r5, r0
 8015b34:	b118      	cbz	r0, 8015b3e <__swbuf_r+0x12>
 8015b36:	6a03      	ldr	r3, [r0, #32]
 8015b38:	b90b      	cbnz	r3, 8015b3e <__swbuf_r+0x12>
 8015b3a:	f7ff fa27 	bl	8014f8c <__sinit>
 8015b3e:	69a3      	ldr	r3, [r4, #24]
 8015b40:	60a3      	str	r3, [r4, #8]
 8015b42:	89a3      	ldrh	r3, [r4, #12]
 8015b44:	071a      	lsls	r2, r3, #28
 8015b46:	d501      	bpl.n	8015b4c <__swbuf_r+0x20>
 8015b48:	6923      	ldr	r3, [r4, #16]
 8015b4a:	b943      	cbnz	r3, 8015b5e <__swbuf_r+0x32>
 8015b4c:	4621      	mov	r1, r4
 8015b4e:	4628      	mov	r0, r5
 8015b50:	f000 f82a 	bl	8015ba8 <__swsetup_r>
 8015b54:	b118      	cbz	r0, 8015b5e <__swbuf_r+0x32>
 8015b56:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015b5a:	4638      	mov	r0, r7
 8015b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b5e:	6823      	ldr	r3, [r4, #0]
 8015b60:	6922      	ldr	r2, [r4, #16]
 8015b62:	1a98      	subs	r0, r3, r2
 8015b64:	6963      	ldr	r3, [r4, #20]
 8015b66:	b2f6      	uxtb	r6, r6
 8015b68:	4283      	cmp	r3, r0
 8015b6a:	4637      	mov	r7, r6
 8015b6c:	dc05      	bgt.n	8015b7a <__swbuf_r+0x4e>
 8015b6e:	4621      	mov	r1, r4
 8015b70:	4628      	mov	r0, r5
 8015b72:	f7ff ffa1 	bl	8015ab8 <_fflush_r>
 8015b76:	2800      	cmp	r0, #0
 8015b78:	d1ed      	bne.n	8015b56 <__swbuf_r+0x2a>
 8015b7a:	68a3      	ldr	r3, [r4, #8]
 8015b7c:	3b01      	subs	r3, #1
 8015b7e:	60a3      	str	r3, [r4, #8]
 8015b80:	6823      	ldr	r3, [r4, #0]
 8015b82:	1c5a      	adds	r2, r3, #1
 8015b84:	6022      	str	r2, [r4, #0]
 8015b86:	701e      	strb	r6, [r3, #0]
 8015b88:	6962      	ldr	r2, [r4, #20]
 8015b8a:	1c43      	adds	r3, r0, #1
 8015b8c:	429a      	cmp	r2, r3
 8015b8e:	d004      	beq.n	8015b9a <__swbuf_r+0x6e>
 8015b90:	89a3      	ldrh	r3, [r4, #12]
 8015b92:	07db      	lsls	r3, r3, #31
 8015b94:	d5e1      	bpl.n	8015b5a <__swbuf_r+0x2e>
 8015b96:	2e0a      	cmp	r6, #10
 8015b98:	d1df      	bne.n	8015b5a <__swbuf_r+0x2e>
 8015b9a:	4621      	mov	r1, r4
 8015b9c:	4628      	mov	r0, r5
 8015b9e:	f7ff ff8b 	bl	8015ab8 <_fflush_r>
 8015ba2:	2800      	cmp	r0, #0
 8015ba4:	d0d9      	beq.n	8015b5a <__swbuf_r+0x2e>
 8015ba6:	e7d6      	b.n	8015b56 <__swbuf_r+0x2a>

08015ba8 <__swsetup_r>:
 8015ba8:	b538      	push	{r3, r4, r5, lr}
 8015baa:	4b29      	ldr	r3, [pc, #164]	@ (8015c50 <__swsetup_r+0xa8>)
 8015bac:	4605      	mov	r5, r0
 8015bae:	6818      	ldr	r0, [r3, #0]
 8015bb0:	460c      	mov	r4, r1
 8015bb2:	b118      	cbz	r0, 8015bbc <__swsetup_r+0x14>
 8015bb4:	6a03      	ldr	r3, [r0, #32]
 8015bb6:	b90b      	cbnz	r3, 8015bbc <__swsetup_r+0x14>
 8015bb8:	f7ff f9e8 	bl	8014f8c <__sinit>
 8015bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bc0:	0719      	lsls	r1, r3, #28
 8015bc2:	d422      	bmi.n	8015c0a <__swsetup_r+0x62>
 8015bc4:	06da      	lsls	r2, r3, #27
 8015bc6:	d407      	bmi.n	8015bd8 <__swsetup_r+0x30>
 8015bc8:	2209      	movs	r2, #9
 8015bca:	602a      	str	r2, [r5, #0]
 8015bcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015bd0:	81a3      	strh	r3, [r4, #12]
 8015bd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015bd6:	e033      	b.n	8015c40 <__swsetup_r+0x98>
 8015bd8:	0758      	lsls	r0, r3, #29
 8015bda:	d512      	bpl.n	8015c02 <__swsetup_r+0x5a>
 8015bdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015bde:	b141      	cbz	r1, 8015bf2 <__swsetup_r+0x4a>
 8015be0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015be4:	4299      	cmp	r1, r3
 8015be6:	d002      	beq.n	8015bee <__swsetup_r+0x46>
 8015be8:	4628      	mov	r0, r5
 8015bea:	f7ff fb13 	bl	8015214 <_free_r>
 8015bee:	2300      	movs	r3, #0
 8015bf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8015bf2:	89a3      	ldrh	r3, [r4, #12]
 8015bf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015bf8:	81a3      	strh	r3, [r4, #12]
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	6063      	str	r3, [r4, #4]
 8015bfe:	6923      	ldr	r3, [r4, #16]
 8015c00:	6023      	str	r3, [r4, #0]
 8015c02:	89a3      	ldrh	r3, [r4, #12]
 8015c04:	f043 0308 	orr.w	r3, r3, #8
 8015c08:	81a3      	strh	r3, [r4, #12]
 8015c0a:	6923      	ldr	r3, [r4, #16]
 8015c0c:	b94b      	cbnz	r3, 8015c22 <__swsetup_r+0x7a>
 8015c0e:	89a3      	ldrh	r3, [r4, #12]
 8015c10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015c18:	d003      	beq.n	8015c22 <__swsetup_r+0x7a>
 8015c1a:	4621      	mov	r1, r4
 8015c1c:	4628      	mov	r0, r5
 8015c1e:	f000 f856 	bl	8015cce <__smakebuf_r>
 8015c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c26:	f013 0201 	ands.w	r2, r3, #1
 8015c2a:	d00a      	beq.n	8015c42 <__swsetup_r+0x9a>
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	60a2      	str	r2, [r4, #8]
 8015c30:	6962      	ldr	r2, [r4, #20]
 8015c32:	4252      	negs	r2, r2
 8015c34:	61a2      	str	r2, [r4, #24]
 8015c36:	6922      	ldr	r2, [r4, #16]
 8015c38:	b942      	cbnz	r2, 8015c4c <__swsetup_r+0xa4>
 8015c3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015c3e:	d1c5      	bne.n	8015bcc <__swsetup_r+0x24>
 8015c40:	bd38      	pop	{r3, r4, r5, pc}
 8015c42:	0799      	lsls	r1, r3, #30
 8015c44:	bf58      	it	pl
 8015c46:	6962      	ldrpl	r2, [r4, #20]
 8015c48:	60a2      	str	r2, [r4, #8]
 8015c4a:	e7f4      	b.n	8015c36 <__swsetup_r+0x8e>
 8015c4c:	2000      	movs	r0, #0
 8015c4e:	e7f7      	b.n	8015c40 <__swsetup_r+0x98>
 8015c50:	200000d8 	.word	0x200000d8

08015c54 <_sbrk_r>:
 8015c54:	b538      	push	{r3, r4, r5, lr}
 8015c56:	4d06      	ldr	r5, [pc, #24]	@ (8015c70 <_sbrk_r+0x1c>)
 8015c58:	2300      	movs	r3, #0
 8015c5a:	4604      	mov	r4, r0
 8015c5c:	4608      	mov	r0, r1
 8015c5e:	602b      	str	r3, [r5, #0]
 8015c60:	f7ec ff7e 	bl	8002b60 <_sbrk>
 8015c64:	1c43      	adds	r3, r0, #1
 8015c66:	d102      	bne.n	8015c6e <_sbrk_r+0x1a>
 8015c68:	682b      	ldr	r3, [r5, #0]
 8015c6a:	b103      	cbz	r3, 8015c6e <_sbrk_r+0x1a>
 8015c6c:	6023      	str	r3, [r4, #0]
 8015c6e:	bd38      	pop	{r3, r4, r5, pc}
 8015c70:	2000b504 	.word	0x2000b504

08015c74 <abort>:
 8015c74:	b508      	push	{r3, lr}
 8015c76:	2006      	movs	r0, #6
 8015c78:	f000 f88e 	bl	8015d98 <raise>
 8015c7c:	2001      	movs	r0, #1
 8015c7e:	f7ec fef7 	bl	8002a70 <_exit>

08015c82 <__swhatbuf_r>:
 8015c82:	b570      	push	{r4, r5, r6, lr}
 8015c84:	460c      	mov	r4, r1
 8015c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c8a:	2900      	cmp	r1, #0
 8015c8c:	b096      	sub	sp, #88	@ 0x58
 8015c8e:	4615      	mov	r5, r2
 8015c90:	461e      	mov	r6, r3
 8015c92:	da0d      	bge.n	8015cb0 <__swhatbuf_r+0x2e>
 8015c94:	89a3      	ldrh	r3, [r4, #12]
 8015c96:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015c9a:	f04f 0100 	mov.w	r1, #0
 8015c9e:	bf14      	ite	ne
 8015ca0:	2340      	movne	r3, #64	@ 0x40
 8015ca2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015ca6:	2000      	movs	r0, #0
 8015ca8:	6031      	str	r1, [r6, #0]
 8015caa:	602b      	str	r3, [r5, #0]
 8015cac:	b016      	add	sp, #88	@ 0x58
 8015cae:	bd70      	pop	{r4, r5, r6, pc}
 8015cb0:	466a      	mov	r2, sp
 8015cb2:	f000 f879 	bl	8015da8 <_fstat_r>
 8015cb6:	2800      	cmp	r0, #0
 8015cb8:	dbec      	blt.n	8015c94 <__swhatbuf_r+0x12>
 8015cba:	9901      	ldr	r1, [sp, #4]
 8015cbc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015cc0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015cc4:	4259      	negs	r1, r3
 8015cc6:	4159      	adcs	r1, r3
 8015cc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015ccc:	e7eb      	b.n	8015ca6 <__swhatbuf_r+0x24>

08015cce <__smakebuf_r>:
 8015cce:	898b      	ldrh	r3, [r1, #12]
 8015cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015cd2:	079d      	lsls	r5, r3, #30
 8015cd4:	4606      	mov	r6, r0
 8015cd6:	460c      	mov	r4, r1
 8015cd8:	d507      	bpl.n	8015cea <__smakebuf_r+0x1c>
 8015cda:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015cde:	6023      	str	r3, [r4, #0]
 8015ce0:	6123      	str	r3, [r4, #16]
 8015ce2:	2301      	movs	r3, #1
 8015ce4:	6163      	str	r3, [r4, #20]
 8015ce6:	b003      	add	sp, #12
 8015ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cea:	ab01      	add	r3, sp, #4
 8015cec:	466a      	mov	r2, sp
 8015cee:	f7ff ffc8 	bl	8015c82 <__swhatbuf_r>
 8015cf2:	9f00      	ldr	r7, [sp, #0]
 8015cf4:	4605      	mov	r5, r0
 8015cf6:	4639      	mov	r1, r7
 8015cf8:	4630      	mov	r0, r6
 8015cfa:	f7ff faff 	bl	80152fc <_malloc_r>
 8015cfe:	b948      	cbnz	r0, 8015d14 <__smakebuf_r+0x46>
 8015d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d04:	059a      	lsls	r2, r3, #22
 8015d06:	d4ee      	bmi.n	8015ce6 <__smakebuf_r+0x18>
 8015d08:	f023 0303 	bic.w	r3, r3, #3
 8015d0c:	f043 0302 	orr.w	r3, r3, #2
 8015d10:	81a3      	strh	r3, [r4, #12]
 8015d12:	e7e2      	b.n	8015cda <__smakebuf_r+0xc>
 8015d14:	89a3      	ldrh	r3, [r4, #12]
 8015d16:	6020      	str	r0, [r4, #0]
 8015d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015d1c:	81a3      	strh	r3, [r4, #12]
 8015d1e:	9b01      	ldr	r3, [sp, #4]
 8015d20:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015d24:	b15b      	cbz	r3, 8015d3e <__smakebuf_r+0x70>
 8015d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d2a:	4630      	mov	r0, r6
 8015d2c:	f000 f84e 	bl	8015dcc <_isatty_r>
 8015d30:	b128      	cbz	r0, 8015d3e <__smakebuf_r+0x70>
 8015d32:	89a3      	ldrh	r3, [r4, #12]
 8015d34:	f023 0303 	bic.w	r3, r3, #3
 8015d38:	f043 0301 	orr.w	r3, r3, #1
 8015d3c:	81a3      	strh	r3, [r4, #12]
 8015d3e:	89a3      	ldrh	r3, [r4, #12]
 8015d40:	431d      	orrs	r5, r3
 8015d42:	81a5      	strh	r5, [r4, #12]
 8015d44:	e7cf      	b.n	8015ce6 <__smakebuf_r+0x18>

08015d46 <_raise_r>:
 8015d46:	291f      	cmp	r1, #31
 8015d48:	b538      	push	{r3, r4, r5, lr}
 8015d4a:	4605      	mov	r5, r0
 8015d4c:	460c      	mov	r4, r1
 8015d4e:	d904      	bls.n	8015d5a <_raise_r+0x14>
 8015d50:	2316      	movs	r3, #22
 8015d52:	6003      	str	r3, [r0, #0]
 8015d54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d58:	bd38      	pop	{r3, r4, r5, pc}
 8015d5a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015d5c:	b112      	cbz	r2, 8015d64 <_raise_r+0x1e>
 8015d5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015d62:	b94b      	cbnz	r3, 8015d78 <_raise_r+0x32>
 8015d64:	4628      	mov	r0, r5
 8015d66:	f000 f853 	bl	8015e10 <_getpid_r>
 8015d6a:	4622      	mov	r2, r4
 8015d6c:	4601      	mov	r1, r0
 8015d6e:	4628      	mov	r0, r5
 8015d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d74:	f000 b83a 	b.w	8015dec <_kill_r>
 8015d78:	2b01      	cmp	r3, #1
 8015d7a:	d00a      	beq.n	8015d92 <_raise_r+0x4c>
 8015d7c:	1c59      	adds	r1, r3, #1
 8015d7e:	d103      	bne.n	8015d88 <_raise_r+0x42>
 8015d80:	2316      	movs	r3, #22
 8015d82:	6003      	str	r3, [r0, #0]
 8015d84:	2001      	movs	r0, #1
 8015d86:	e7e7      	b.n	8015d58 <_raise_r+0x12>
 8015d88:	2100      	movs	r1, #0
 8015d8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015d8e:	4620      	mov	r0, r4
 8015d90:	4798      	blx	r3
 8015d92:	2000      	movs	r0, #0
 8015d94:	e7e0      	b.n	8015d58 <_raise_r+0x12>
	...

08015d98 <raise>:
 8015d98:	4b02      	ldr	r3, [pc, #8]	@ (8015da4 <raise+0xc>)
 8015d9a:	4601      	mov	r1, r0
 8015d9c:	6818      	ldr	r0, [r3, #0]
 8015d9e:	f7ff bfd2 	b.w	8015d46 <_raise_r>
 8015da2:	bf00      	nop
 8015da4:	200000d8 	.word	0x200000d8

08015da8 <_fstat_r>:
 8015da8:	b538      	push	{r3, r4, r5, lr}
 8015daa:	4d07      	ldr	r5, [pc, #28]	@ (8015dc8 <_fstat_r+0x20>)
 8015dac:	2300      	movs	r3, #0
 8015dae:	4604      	mov	r4, r0
 8015db0:	4608      	mov	r0, r1
 8015db2:	4611      	mov	r1, r2
 8015db4:	602b      	str	r3, [r5, #0]
 8015db6:	f7ec feab 	bl	8002b10 <_fstat>
 8015dba:	1c43      	adds	r3, r0, #1
 8015dbc:	d102      	bne.n	8015dc4 <_fstat_r+0x1c>
 8015dbe:	682b      	ldr	r3, [r5, #0]
 8015dc0:	b103      	cbz	r3, 8015dc4 <_fstat_r+0x1c>
 8015dc2:	6023      	str	r3, [r4, #0]
 8015dc4:	bd38      	pop	{r3, r4, r5, pc}
 8015dc6:	bf00      	nop
 8015dc8:	2000b504 	.word	0x2000b504

08015dcc <_isatty_r>:
 8015dcc:	b538      	push	{r3, r4, r5, lr}
 8015dce:	4d06      	ldr	r5, [pc, #24]	@ (8015de8 <_isatty_r+0x1c>)
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	4604      	mov	r4, r0
 8015dd4:	4608      	mov	r0, r1
 8015dd6:	602b      	str	r3, [r5, #0]
 8015dd8:	f7ec feaa 	bl	8002b30 <_isatty>
 8015ddc:	1c43      	adds	r3, r0, #1
 8015dde:	d102      	bne.n	8015de6 <_isatty_r+0x1a>
 8015de0:	682b      	ldr	r3, [r5, #0]
 8015de2:	b103      	cbz	r3, 8015de6 <_isatty_r+0x1a>
 8015de4:	6023      	str	r3, [r4, #0]
 8015de6:	bd38      	pop	{r3, r4, r5, pc}
 8015de8:	2000b504 	.word	0x2000b504

08015dec <_kill_r>:
 8015dec:	b538      	push	{r3, r4, r5, lr}
 8015dee:	4d07      	ldr	r5, [pc, #28]	@ (8015e0c <_kill_r+0x20>)
 8015df0:	2300      	movs	r3, #0
 8015df2:	4604      	mov	r4, r0
 8015df4:	4608      	mov	r0, r1
 8015df6:	4611      	mov	r1, r2
 8015df8:	602b      	str	r3, [r5, #0]
 8015dfa:	f7ec fe27 	bl	8002a4c <_kill>
 8015dfe:	1c43      	adds	r3, r0, #1
 8015e00:	d102      	bne.n	8015e08 <_kill_r+0x1c>
 8015e02:	682b      	ldr	r3, [r5, #0]
 8015e04:	b103      	cbz	r3, 8015e08 <_kill_r+0x1c>
 8015e06:	6023      	str	r3, [r4, #0]
 8015e08:	bd38      	pop	{r3, r4, r5, pc}
 8015e0a:	bf00      	nop
 8015e0c:	2000b504 	.word	0x2000b504

08015e10 <_getpid_r>:
 8015e10:	f7ec be14 	b.w	8002a3c <_getpid>
 8015e14:	0000      	movs	r0, r0
	...

08015e18 <cos>:
 8015e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015e1a:	ec53 2b10 	vmov	r2, r3, d0
 8015e1e:	4826      	ldr	r0, [pc, #152]	@ (8015eb8 <cos+0xa0>)
 8015e20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8015e24:	4281      	cmp	r1, r0
 8015e26:	d806      	bhi.n	8015e36 <cos+0x1e>
 8015e28:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8015eb0 <cos+0x98>
 8015e2c:	b005      	add	sp, #20
 8015e2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8015e32:	f000 b8b9 	b.w	8015fa8 <__kernel_cos>
 8015e36:	4821      	ldr	r0, [pc, #132]	@ (8015ebc <cos+0xa4>)
 8015e38:	4281      	cmp	r1, r0
 8015e3a:	d908      	bls.n	8015e4e <cos+0x36>
 8015e3c:	4610      	mov	r0, r2
 8015e3e:	4619      	mov	r1, r3
 8015e40:	f7ea fa1a 	bl	8000278 <__aeabi_dsub>
 8015e44:	ec41 0b10 	vmov	d0, r0, r1
 8015e48:	b005      	add	sp, #20
 8015e4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e4e:	4668      	mov	r0, sp
 8015e50:	f000 fa2e 	bl	80162b0 <__ieee754_rem_pio2>
 8015e54:	f000 0003 	and.w	r0, r0, #3
 8015e58:	2801      	cmp	r0, #1
 8015e5a:	d00b      	beq.n	8015e74 <cos+0x5c>
 8015e5c:	2802      	cmp	r0, #2
 8015e5e:	d015      	beq.n	8015e8c <cos+0x74>
 8015e60:	b9d8      	cbnz	r0, 8015e9a <cos+0x82>
 8015e62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015e66:	ed9d 0b00 	vldr	d0, [sp]
 8015e6a:	f000 f89d 	bl	8015fa8 <__kernel_cos>
 8015e6e:	ec51 0b10 	vmov	r0, r1, d0
 8015e72:	e7e7      	b.n	8015e44 <cos+0x2c>
 8015e74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015e78:	ed9d 0b00 	vldr	d0, [sp]
 8015e7c:	f000 f95c 	bl	8016138 <__kernel_sin>
 8015e80:	ec53 2b10 	vmov	r2, r3, d0
 8015e84:	4610      	mov	r0, r2
 8015e86:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8015e8a:	e7db      	b.n	8015e44 <cos+0x2c>
 8015e8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015e90:	ed9d 0b00 	vldr	d0, [sp]
 8015e94:	f000 f888 	bl	8015fa8 <__kernel_cos>
 8015e98:	e7f2      	b.n	8015e80 <cos+0x68>
 8015e9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015e9e:	ed9d 0b00 	vldr	d0, [sp]
 8015ea2:	2001      	movs	r0, #1
 8015ea4:	f000 f948 	bl	8016138 <__kernel_sin>
 8015ea8:	e7e1      	b.n	8015e6e <cos+0x56>
 8015eaa:	bf00      	nop
 8015eac:	f3af 8000 	nop.w
	...
 8015eb8:	3fe921fb 	.word	0x3fe921fb
 8015ebc:	7fefffff 	.word	0x7fefffff

08015ec0 <sin>:
 8015ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015ec2:	ec53 2b10 	vmov	r2, r3, d0
 8015ec6:	4826      	ldr	r0, [pc, #152]	@ (8015f60 <sin+0xa0>)
 8015ec8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8015ecc:	4281      	cmp	r1, r0
 8015ece:	d807      	bhi.n	8015ee0 <sin+0x20>
 8015ed0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8015f58 <sin+0x98>
 8015ed4:	2000      	movs	r0, #0
 8015ed6:	b005      	add	sp, #20
 8015ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015edc:	f000 b92c 	b.w	8016138 <__kernel_sin>
 8015ee0:	4820      	ldr	r0, [pc, #128]	@ (8015f64 <sin+0xa4>)
 8015ee2:	4281      	cmp	r1, r0
 8015ee4:	d908      	bls.n	8015ef8 <sin+0x38>
 8015ee6:	4610      	mov	r0, r2
 8015ee8:	4619      	mov	r1, r3
 8015eea:	f7ea f9c5 	bl	8000278 <__aeabi_dsub>
 8015eee:	ec41 0b10 	vmov	d0, r0, r1
 8015ef2:	b005      	add	sp, #20
 8015ef4:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ef8:	4668      	mov	r0, sp
 8015efa:	f000 f9d9 	bl	80162b0 <__ieee754_rem_pio2>
 8015efe:	f000 0003 	and.w	r0, r0, #3
 8015f02:	2801      	cmp	r0, #1
 8015f04:	d00c      	beq.n	8015f20 <sin+0x60>
 8015f06:	2802      	cmp	r0, #2
 8015f08:	d011      	beq.n	8015f2e <sin+0x6e>
 8015f0a:	b9e8      	cbnz	r0, 8015f48 <sin+0x88>
 8015f0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015f10:	ed9d 0b00 	vldr	d0, [sp]
 8015f14:	2001      	movs	r0, #1
 8015f16:	f000 f90f 	bl	8016138 <__kernel_sin>
 8015f1a:	ec51 0b10 	vmov	r0, r1, d0
 8015f1e:	e7e6      	b.n	8015eee <sin+0x2e>
 8015f20:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015f24:	ed9d 0b00 	vldr	d0, [sp]
 8015f28:	f000 f83e 	bl	8015fa8 <__kernel_cos>
 8015f2c:	e7f5      	b.n	8015f1a <sin+0x5a>
 8015f2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015f32:	ed9d 0b00 	vldr	d0, [sp]
 8015f36:	2001      	movs	r0, #1
 8015f38:	f000 f8fe 	bl	8016138 <__kernel_sin>
 8015f3c:	ec53 2b10 	vmov	r2, r3, d0
 8015f40:	4610      	mov	r0, r2
 8015f42:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8015f46:	e7d2      	b.n	8015eee <sin+0x2e>
 8015f48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015f4c:	ed9d 0b00 	vldr	d0, [sp]
 8015f50:	f000 f82a 	bl	8015fa8 <__kernel_cos>
 8015f54:	e7f2      	b.n	8015f3c <sin+0x7c>
 8015f56:	bf00      	nop
	...
 8015f60:	3fe921fb 	.word	0x3fe921fb
 8015f64:	7fefffff 	.word	0x7fefffff

08015f68 <fmodf>:
 8015f68:	b508      	push	{r3, lr}
 8015f6a:	ed2d 8b02 	vpush	{d8}
 8015f6e:	eef0 8a40 	vmov.f32	s17, s0
 8015f72:	eeb0 8a60 	vmov.f32	s16, s1
 8015f76:	f000 fb9f 	bl	80166b8 <__ieee754_fmodf>
 8015f7a:	eef4 8a48 	vcmp.f32	s17, s16
 8015f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f82:	d60c      	bvs.n	8015f9e <fmodf+0x36>
 8015f84:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8015fa4 <fmodf+0x3c>
 8015f88:	eeb4 8a68 	vcmp.f32	s16, s17
 8015f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f90:	d105      	bne.n	8015f9e <fmodf+0x36>
 8015f92:	f7ff f8e5 	bl	8015160 <__errno>
 8015f96:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8015f9a:	2321      	movs	r3, #33	@ 0x21
 8015f9c:	6003      	str	r3, [r0, #0]
 8015f9e:	ecbd 8b02 	vpop	{d8}
 8015fa2:	bd08      	pop	{r3, pc}
 8015fa4:	00000000 	.word	0x00000000

08015fa8 <__kernel_cos>:
 8015fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fac:	ec57 6b10 	vmov	r6, r7, d0
 8015fb0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8015fb4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8015fb8:	ed8d 1b00 	vstr	d1, [sp]
 8015fbc:	d206      	bcs.n	8015fcc <__kernel_cos+0x24>
 8015fbe:	4630      	mov	r0, r6
 8015fc0:	4639      	mov	r1, r7
 8015fc2:	f7ea fdab 	bl	8000b1c <__aeabi_d2iz>
 8015fc6:	2800      	cmp	r0, #0
 8015fc8:	f000 8088 	beq.w	80160dc <__kernel_cos+0x134>
 8015fcc:	4632      	mov	r2, r6
 8015fce:	463b      	mov	r3, r7
 8015fd0:	4630      	mov	r0, r6
 8015fd2:	4639      	mov	r1, r7
 8015fd4:	f7ea fb08 	bl	80005e8 <__aeabi_dmul>
 8015fd8:	4b51      	ldr	r3, [pc, #324]	@ (8016120 <__kernel_cos+0x178>)
 8015fda:	2200      	movs	r2, #0
 8015fdc:	4604      	mov	r4, r0
 8015fde:	460d      	mov	r5, r1
 8015fe0:	f7ea fb02 	bl	80005e8 <__aeabi_dmul>
 8015fe4:	a340      	add	r3, pc, #256	@ (adr r3, 80160e8 <__kernel_cos+0x140>)
 8015fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fea:	4682      	mov	sl, r0
 8015fec:	468b      	mov	fp, r1
 8015fee:	4620      	mov	r0, r4
 8015ff0:	4629      	mov	r1, r5
 8015ff2:	f7ea faf9 	bl	80005e8 <__aeabi_dmul>
 8015ff6:	a33e      	add	r3, pc, #248	@ (adr r3, 80160f0 <__kernel_cos+0x148>)
 8015ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ffc:	f7ea f93e 	bl	800027c <__adddf3>
 8016000:	4622      	mov	r2, r4
 8016002:	462b      	mov	r3, r5
 8016004:	f7ea faf0 	bl	80005e8 <__aeabi_dmul>
 8016008:	a33b      	add	r3, pc, #236	@ (adr r3, 80160f8 <__kernel_cos+0x150>)
 801600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801600e:	f7ea f933 	bl	8000278 <__aeabi_dsub>
 8016012:	4622      	mov	r2, r4
 8016014:	462b      	mov	r3, r5
 8016016:	f7ea fae7 	bl	80005e8 <__aeabi_dmul>
 801601a:	a339      	add	r3, pc, #228	@ (adr r3, 8016100 <__kernel_cos+0x158>)
 801601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016020:	f7ea f92c 	bl	800027c <__adddf3>
 8016024:	4622      	mov	r2, r4
 8016026:	462b      	mov	r3, r5
 8016028:	f7ea fade 	bl	80005e8 <__aeabi_dmul>
 801602c:	a336      	add	r3, pc, #216	@ (adr r3, 8016108 <__kernel_cos+0x160>)
 801602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016032:	f7ea f921 	bl	8000278 <__aeabi_dsub>
 8016036:	4622      	mov	r2, r4
 8016038:	462b      	mov	r3, r5
 801603a:	f7ea fad5 	bl	80005e8 <__aeabi_dmul>
 801603e:	a334      	add	r3, pc, #208	@ (adr r3, 8016110 <__kernel_cos+0x168>)
 8016040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016044:	f7ea f91a 	bl	800027c <__adddf3>
 8016048:	4622      	mov	r2, r4
 801604a:	462b      	mov	r3, r5
 801604c:	f7ea facc 	bl	80005e8 <__aeabi_dmul>
 8016050:	4622      	mov	r2, r4
 8016052:	462b      	mov	r3, r5
 8016054:	f7ea fac8 	bl	80005e8 <__aeabi_dmul>
 8016058:	e9dd 2300 	ldrd	r2, r3, [sp]
 801605c:	4604      	mov	r4, r0
 801605e:	460d      	mov	r5, r1
 8016060:	4630      	mov	r0, r6
 8016062:	4639      	mov	r1, r7
 8016064:	f7ea fac0 	bl	80005e8 <__aeabi_dmul>
 8016068:	460b      	mov	r3, r1
 801606a:	4602      	mov	r2, r0
 801606c:	4629      	mov	r1, r5
 801606e:	4620      	mov	r0, r4
 8016070:	f7ea f902 	bl	8000278 <__aeabi_dsub>
 8016074:	4b2b      	ldr	r3, [pc, #172]	@ (8016124 <__kernel_cos+0x17c>)
 8016076:	4598      	cmp	r8, r3
 8016078:	4606      	mov	r6, r0
 801607a:	460f      	mov	r7, r1
 801607c:	d810      	bhi.n	80160a0 <__kernel_cos+0xf8>
 801607e:	4602      	mov	r2, r0
 8016080:	460b      	mov	r3, r1
 8016082:	4650      	mov	r0, sl
 8016084:	4659      	mov	r1, fp
 8016086:	f7ea f8f7 	bl	8000278 <__aeabi_dsub>
 801608a:	460b      	mov	r3, r1
 801608c:	4926      	ldr	r1, [pc, #152]	@ (8016128 <__kernel_cos+0x180>)
 801608e:	4602      	mov	r2, r0
 8016090:	2000      	movs	r0, #0
 8016092:	f7ea f8f1 	bl	8000278 <__aeabi_dsub>
 8016096:	ec41 0b10 	vmov	d0, r0, r1
 801609a:	b003      	add	sp, #12
 801609c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160a0:	4b22      	ldr	r3, [pc, #136]	@ (801612c <__kernel_cos+0x184>)
 80160a2:	4921      	ldr	r1, [pc, #132]	@ (8016128 <__kernel_cos+0x180>)
 80160a4:	4598      	cmp	r8, r3
 80160a6:	bf8c      	ite	hi
 80160a8:	4d21      	ldrhi	r5, [pc, #132]	@ (8016130 <__kernel_cos+0x188>)
 80160aa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80160ae:	2400      	movs	r4, #0
 80160b0:	4622      	mov	r2, r4
 80160b2:	462b      	mov	r3, r5
 80160b4:	2000      	movs	r0, #0
 80160b6:	f7ea f8df 	bl	8000278 <__aeabi_dsub>
 80160ba:	4622      	mov	r2, r4
 80160bc:	4680      	mov	r8, r0
 80160be:	4689      	mov	r9, r1
 80160c0:	462b      	mov	r3, r5
 80160c2:	4650      	mov	r0, sl
 80160c4:	4659      	mov	r1, fp
 80160c6:	f7ea f8d7 	bl	8000278 <__aeabi_dsub>
 80160ca:	4632      	mov	r2, r6
 80160cc:	463b      	mov	r3, r7
 80160ce:	f7ea f8d3 	bl	8000278 <__aeabi_dsub>
 80160d2:	4602      	mov	r2, r0
 80160d4:	460b      	mov	r3, r1
 80160d6:	4640      	mov	r0, r8
 80160d8:	4649      	mov	r1, r9
 80160da:	e7da      	b.n	8016092 <__kernel_cos+0xea>
 80160dc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8016118 <__kernel_cos+0x170>
 80160e0:	e7db      	b.n	801609a <__kernel_cos+0xf2>
 80160e2:	bf00      	nop
 80160e4:	f3af 8000 	nop.w
 80160e8:	be8838d4 	.word	0xbe8838d4
 80160ec:	bda8fae9 	.word	0xbda8fae9
 80160f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80160f4:	3e21ee9e 	.word	0x3e21ee9e
 80160f8:	809c52ad 	.word	0x809c52ad
 80160fc:	3e927e4f 	.word	0x3e927e4f
 8016100:	19cb1590 	.word	0x19cb1590
 8016104:	3efa01a0 	.word	0x3efa01a0
 8016108:	16c15177 	.word	0x16c15177
 801610c:	3f56c16c 	.word	0x3f56c16c
 8016110:	5555554c 	.word	0x5555554c
 8016114:	3fa55555 	.word	0x3fa55555
 8016118:	00000000 	.word	0x00000000
 801611c:	3ff00000 	.word	0x3ff00000
 8016120:	3fe00000 	.word	0x3fe00000
 8016124:	3fd33332 	.word	0x3fd33332
 8016128:	3ff00000 	.word	0x3ff00000
 801612c:	3fe90000 	.word	0x3fe90000
 8016130:	3fd20000 	.word	0x3fd20000
 8016134:	00000000 	.word	0x00000000

08016138 <__kernel_sin>:
 8016138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801613c:	ec55 4b10 	vmov	r4, r5, d0
 8016140:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016144:	b085      	sub	sp, #20
 8016146:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801614a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801614e:	4680      	mov	r8, r0
 8016150:	d205      	bcs.n	801615e <__kernel_sin+0x26>
 8016152:	4620      	mov	r0, r4
 8016154:	4629      	mov	r1, r5
 8016156:	f7ea fce1 	bl	8000b1c <__aeabi_d2iz>
 801615a:	2800      	cmp	r0, #0
 801615c:	d052      	beq.n	8016204 <__kernel_sin+0xcc>
 801615e:	4622      	mov	r2, r4
 8016160:	462b      	mov	r3, r5
 8016162:	4620      	mov	r0, r4
 8016164:	4629      	mov	r1, r5
 8016166:	f7ea fa3f 	bl	80005e8 <__aeabi_dmul>
 801616a:	4682      	mov	sl, r0
 801616c:	468b      	mov	fp, r1
 801616e:	4602      	mov	r2, r0
 8016170:	460b      	mov	r3, r1
 8016172:	4620      	mov	r0, r4
 8016174:	4629      	mov	r1, r5
 8016176:	f7ea fa37 	bl	80005e8 <__aeabi_dmul>
 801617a:	a342      	add	r3, pc, #264	@ (adr r3, 8016284 <__kernel_sin+0x14c>)
 801617c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016180:	e9cd 0100 	strd	r0, r1, [sp]
 8016184:	4650      	mov	r0, sl
 8016186:	4659      	mov	r1, fp
 8016188:	f7ea fa2e 	bl	80005e8 <__aeabi_dmul>
 801618c:	a33f      	add	r3, pc, #252	@ (adr r3, 801628c <__kernel_sin+0x154>)
 801618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016192:	f7ea f871 	bl	8000278 <__aeabi_dsub>
 8016196:	4652      	mov	r2, sl
 8016198:	465b      	mov	r3, fp
 801619a:	f7ea fa25 	bl	80005e8 <__aeabi_dmul>
 801619e:	a33d      	add	r3, pc, #244	@ (adr r3, 8016294 <__kernel_sin+0x15c>)
 80161a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161a4:	f7ea f86a 	bl	800027c <__adddf3>
 80161a8:	4652      	mov	r2, sl
 80161aa:	465b      	mov	r3, fp
 80161ac:	f7ea fa1c 	bl	80005e8 <__aeabi_dmul>
 80161b0:	a33a      	add	r3, pc, #232	@ (adr r3, 801629c <__kernel_sin+0x164>)
 80161b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161b6:	f7ea f85f 	bl	8000278 <__aeabi_dsub>
 80161ba:	4652      	mov	r2, sl
 80161bc:	465b      	mov	r3, fp
 80161be:	f7ea fa13 	bl	80005e8 <__aeabi_dmul>
 80161c2:	a338      	add	r3, pc, #224	@ (adr r3, 80162a4 <__kernel_sin+0x16c>)
 80161c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161c8:	f7ea f858 	bl	800027c <__adddf3>
 80161cc:	4606      	mov	r6, r0
 80161ce:	460f      	mov	r7, r1
 80161d0:	f1b8 0f00 	cmp.w	r8, #0
 80161d4:	d11b      	bne.n	801620e <__kernel_sin+0xd6>
 80161d6:	4602      	mov	r2, r0
 80161d8:	460b      	mov	r3, r1
 80161da:	4650      	mov	r0, sl
 80161dc:	4659      	mov	r1, fp
 80161de:	f7ea fa03 	bl	80005e8 <__aeabi_dmul>
 80161e2:	a325      	add	r3, pc, #148	@ (adr r3, 8016278 <__kernel_sin+0x140>)
 80161e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e8:	f7ea f846 	bl	8000278 <__aeabi_dsub>
 80161ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161f0:	f7ea f9fa 	bl	80005e8 <__aeabi_dmul>
 80161f4:	4602      	mov	r2, r0
 80161f6:	460b      	mov	r3, r1
 80161f8:	4620      	mov	r0, r4
 80161fa:	4629      	mov	r1, r5
 80161fc:	f7ea f83e 	bl	800027c <__adddf3>
 8016200:	4604      	mov	r4, r0
 8016202:	460d      	mov	r5, r1
 8016204:	ec45 4b10 	vmov	d0, r4, r5
 8016208:	b005      	add	sp, #20
 801620a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801620e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016212:	4b1b      	ldr	r3, [pc, #108]	@ (8016280 <__kernel_sin+0x148>)
 8016214:	2200      	movs	r2, #0
 8016216:	f7ea f9e7 	bl	80005e8 <__aeabi_dmul>
 801621a:	4632      	mov	r2, r6
 801621c:	4680      	mov	r8, r0
 801621e:	4689      	mov	r9, r1
 8016220:	463b      	mov	r3, r7
 8016222:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016226:	f7ea f9df 	bl	80005e8 <__aeabi_dmul>
 801622a:	4602      	mov	r2, r0
 801622c:	460b      	mov	r3, r1
 801622e:	4640      	mov	r0, r8
 8016230:	4649      	mov	r1, r9
 8016232:	f7ea f821 	bl	8000278 <__aeabi_dsub>
 8016236:	4652      	mov	r2, sl
 8016238:	465b      	mov	r3, fp
 801623a:	f7ea f9d5 	bl	80005e8 <__aeabi_dmul>
 801623e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016242:	f7ea f819 	bl	8000278 <__aeabi_dsub>
 8016246:	a30c      	add	r3, pc, #48	@ (adr r3, 8016278 <__kernel_sin+0x140>)
 8016248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801624c:	4606      	mov	r6, r0
 801624e:	460f      	mov	r7, r1
 8016250:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016254:	f7ea f9c8 	bl	80005e8 <__aeabi_dmul>
 8016258:	4602      	mov	r2, r0
 801625a:	460b      	mov	r3, r1
 801625c:	4630      	mov	r0, r6
 801625e:	4639      	mov	r1, r7
 8016260:	f7ea f80c 	bl	800027c <__adddf3>
 8016264:	4602      	mov	r2, r0
 8016266:	460b      	mov	r3, r1
 8016268:	4620      	mov	r0, r4
 801626a:	4629      	mov	r1, r5
 801626c:	f7ea f804 	bl	8000278 <__aeabi_dsub>
 8016270:	e7c6      	b.n	8016200 <__kernel_sin+0xc8>
 8016272:	bf00      	nop
 8016274:	f3af 8000 	nop.w
 8016278:	55555549 	.word	0x55555549
 801627c:	3fc55555 	.word	0x3fc55555
 8016280:	3fe00000 	.word	0x3fe00000
 8016284:	5acfd57c 	.word	0x5acfd57c
 8016288:	3de5d93a 	.word	0x3de5d93a
 801628c:	8a2b9ceb 	.word	0x8a2b9ceb
 8016290:	3e5ae5e6 	.word	0x3e5ae5e6
 8016294:	57b1fe7d 	.word	0x57b1fe7d
 8016298:	3ec71de3 	.word	0x3ec71de3
 801629c:	19c161d5 	.word	0x19c161d5
 80162a0:	3f2a01a0 	.word	0x3f2a01a0
 80162a4:	1110f8a6 	.word	0x1110f8a6
 80162a8:	3f811111 	.word	0x3f811111
 80162ac:	00000000 	.word	0x00000000

080162b0 <__ieee754_rem_pio2>:
 80162b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b4:	ec57 6b10 	vmov	r6, r7, d0
 80162b8:	4bc5      	ldr	r3, [pc, #788]	@ (80165d0 <__ieee754_rem_pio2+0x320>)
 80162ba:	b08d      	sub	sp, #52	@ 0x34
 80162bc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80162c0:	4598      	cmp	r8, r3
 80162c2:	4604      	mov	r4, r0
 80162c4:	9704      	str	r7, [sp, #16]
 80162c6:	d807      	bhi.n	80162d8 <__ieee754_rem_pio2+0x28>
 80162c8:	2200      	movs	r2, #0
 80162ca:	2300      	movs	r3, #0
 80162cc:	ed80 0b00 	vstr	d0, [r0]
 80162d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80162d4:	2500      	movs	r5, #0
 80162d6:	e028      	b.n	801632a <__ieee754_rem_pio2+0x7a>
 80162d8:	4bbe      	ldr	r3, [pc, #760]	@ (80165d4 <__ieee754_rem_pio2+0x324>)
 80162da:	4598      	cmp	r8, r3
 80162dc:	d878      	bhi.n	80163d0 <__ieee754_rem_pio2+0x120>
 80162de:	9b04      	ldr	r3, [sp, #16]
 80162e0:	4dbd      	ldr	r5, [pc, #756]	@ (80165d8 <__ieee754_rem_pio2+0x328>)
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	4630      	mov	r0, r6
 80162e6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8016598 <__ieee754_rem_pio2+0x2e8>)
 80162e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ec:	4639      	mov	r1, r7
 80162ee:	dd38      	ble.n	8016362 <__ieee754_rem_pio2+0xb2>
 80162f0:	f7e9 ffc2 	bl	8000278 <__aeabi_dsub>
 80162f4:	45a8      	cmp	r8, r5
 80162f6:	4606      	mov	r6, r0
 80162f8:	460f      	mov	r7, r1
 80162fa:	d01a      	beq.n	8016332 <__ieee754_rem_pio2+0x82>
 80162fc:	a3a8      	add	r3, pc, #672	@ (adr r3, 80165a0 <__ieee754_rem_pio2+0x2f0>)
 80162fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016302:	f7e9 ffb9 	bl	8000278 <__aeabi_dsub>
 8016306:	4602      	mov	r2, r0
 8016308:	460b      	mov	r3, r1
 801630a:	4680      	mov	r8, r0
 801630c:	4689      	mov	r9, r1
 801630e:	4630      	mov	r0, r6
 8016310:	4639      	mov	r1, r7
 8016312:	f7e9 ffb1 	bl	8000278 <__aeabi_dsub>
 8016316:	a3a2      	add	r3, pc, #648	@ (adr r3, 80165a0 <__ieee754_rem_pio2+0x2f0>)
 8016318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801631c:	f7e9 ffac 	bl	8000278 <__aeabi_dsub>
 8016320:	e9c4 8900 	strd	r8, r9, [r4]
 8016324:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016328:	2501      	movs	r5, #1
 801632a:	4628      	mov	r0, r5
 801632c:	b00d      	add	sp, #52	@ 0x34
 801632e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016332:	a39d      	add	r3, pc, #628	@ (adr r3, 80165a8 <__ieee754_rem_pio2+0x2f8>)
 8016334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016338:	f7e9 ff9e 	bl	8000278 <__aeabi_dsub>
 801633c:	a39c      	add	r3, pc, #624	@ (adr r3, 80165b0 <__ieee754_rem_pio2+0x300>)
 801633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016342:	4606      	mov	r6, r0
 8016344:	460f      	mov	r7, r1
 8016346:	f7e9 ff97 	bl	8000278 <__aeabi_dsub>
 801634a:	4602      	mov	r2, r0
 801634c:	460b      	mov	r3, r1
 801634e:	4680      	mov	r8, r0
 8016350:	4689      	mov	r9, r1
 8016352:	4630      	mov	r0, r6
 8016354:	4639      	mov	r1, r7
 8016356:	f7e9 ff8f 	bl	8000278 <__aeabi_dsub>
 801635a:	a395      	add	r3, pc, #596	@ (adr r3, 80165b0 <__ieee754_rem_pio2+0x300>)
 801635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016360:	e7dc      	b.n	801631c <__ieee754_rem_pio2+0x6c>
 8016362:	f7e9 ff8b 	bl	800027c <__adddf3>
 8016366:	45a8      	cmp	r8, r5
 8016368:	4606      	mov	r6, r0
 801636a:	460f      	mov	r7, r1
 801636c:	d018      	beq.n	80163a0 <__ieee754_rem_pio2+0xf0>
 801636e:	a38c      	add	r3, pc, #560	@ (adr r3, 80165a0 <__ieee754_rem_pio2+0x2f0>)
 8016370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016374:	f7e9 ff82 	bl	800027c <__adddf3>
 8016378:	4602      	mov	r2, r0
 801637a:	460b      	mov	r3, r1
 801637c:	4680      	mov	r8, r0
 801637e:	4689      	mov	r9, r1
 8016380:	4630      	mov	r0, r6
 8016382:	4639      	mov	r1, r7
 8016384:	f7e9 ff78 	bl	8000278 <__aeabi_dsub>
 8016388:	a385      	add	r3, pc, #532	@ (adr r3, 80165a0 <__ieee754_rem_pio2+0x2f0>)
 801638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801638e:	f7e9 ff75 	bl	800027c <__adddf3>
 8016392:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016396:	e9c4 8900 	strd	r8, r9, [r4]
 801639a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801639e:	e7c4      	b.n	801632a <__ieee754_rem_pio2+0x7a>
 80163a0:	a381      	add	r3, pc, #516	@ (adr r3, 80165a8 <__ieee754_rem_pio2+0x2f8>)
 80163a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163a6:	f7e9 ff69 	bl	800027c <__adddf3>
 80163aa:	a381      	add	r3, pc, #516	@ (adr r3, 80165b0 <__ieee754_rem_pio2+0x300>)
 80163ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163b0:	4606      	mov	r6, r0
 80163b2:	460f      	mov	r7, r1
 80163b4:	f7e9 ff62 	bl	800027c <__adddf3>
 80163b8:	4602      	mov	r2, r0
 80163ba:	460b      	mov	r3, r1
 80163bc:	4680      	mov	r8, r0
 80163be:	4689      	mov	r9, r1
 80163c0:	4630      	mov	r0, r6
 80163c2:	4639      	mov	r1, r7
 80163c4:	f7e9 ff58 	bl	8000278 <__aeabi_dsub>
 80163c8:	a379      	add	r3, pc, #484	@ (adr r3, 80165b0 <__ieee754_rem_pio2+0x300>)
 80163ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ce:	e7de      	b.n	801638e <__ieee754_rem_pio2+0xde>
 80163d0:	4b82      	ldr	r3, [pc, #520]	@ (80165dc <__ieee754_rem_pio2+0x32c>)
 80163d2:	4598      	cmp	r8, r3
 80163d4:	f200 80d1 	bhi.w	801657a <__ieee754_rem_pio2+0x2ca>
 80163d8:	f000 f966 	bl	80166a8 <fabs>
 80163dc:	ec57 6b10 	vmov	r6, r7, d0
 80163e0:	a375      	add	r3, pc, #468	@ (adr r3, 80165b8 <__ieee754_rem_pio2+0x308>)
 80163e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e6:	4630      	mov	r0, r6
 80163e8:	4639      	mov	r1, r7
 80163ea:	f7ea f8fd 	bl	80005e8 <__aeabi_dmul>
 80163ee:	4b7c      	ldr	r3, [pc, #496]	@ (80165e0 <__ieee754_rem_pio2+0x330>)
 80163f0:	2200      	movs	r2, #0
 80163f2:	f7e9 ff43 	bl	800027c <__adddf3>
 80163f6:	f7ea fb91 	bl	8000b1c <__aeabi_d2iz>
 80163fa:	4605      	mov	r5, r0
 80163fc:	f7ea f88a 	bl	8000514 <__aeabi_i2d>
 8016400:	4602      	mov	r2, r0
 8016402:	460b      	mov	r3, r1
 8016404:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016408:	a363      	add	r3, pc, #396	@ (adr r3, 8016598 <__ieee754_rem_pio2+0x2e8>)
 801640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801640e:	f7ea f8eb 	bl	80005e8 <__aeabi_dmul>
 8016412:	4602      	mov	r2, r0
 8016414:	460b      	mov	r3, r1
 8016416:	4630      	mov	r0, r6
 8016418:	4639      	mov	r1, r7
 801641a:	f7e9 ff2d 	bl	8000278 <__aeabi_dsub>
 801641e:	a360      	add	r3, pc, #384	@ (adr r3, 80165a0 <__ieee754_rem_pio2+0x2f0>)
 8016420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016424:	4682      	mov	sl, r0
 8016426:	468b      	mov	fp, r1
 8016428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801642c:	f7ea f8dc 	bl	80005e8 <__aeabi_dmul>
 8016430:	2d1f      	cmp	r5, #31
 8016432:	4606      	mov	r6, r0
 8016434:	460f      	mov	r7, r1
 8016436:	dc0c      	bgt.n	8016452 <__ieee754_rem_pio2+0x1a2>
 8016438:	4b6a      	ldr	r3, [pc, #424]	@ (80165e4 <__ieee754_rem_pio2+0x334>)
 801643a:	1e6a      	subs	r2, r5, #1
 801643c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016440:	4543      	cmp	r3, r8
 8016442:	d006      	beq.n	8016452 <__ieee754_rem_pio2+0x1a2>
 8016444:	4632      	mov	r2, r6
 8016446:	463b      	mov	r3, r7
 8016448:	4650      	mov	r0, sl
 801644a:	4659      	mov	r1, fp
 801644c:	f7e9 ff14 	bl	8000278 <__aeabi_dsub>
 8016450:	e00e      	b.n	8016470 <__ieee754_rem_pio2+0x1c0>
 8016452:	463b      	mov	r3, r7
 8016454:	4632      	mov	r2, r6
 8016456:	4650      	mov	r0, sl
 8016458:	4659      	mov	r1, fp
 801645a:	f7e9 ff0d 	bl	8000278 <__aeabi_dsub>
 801645e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016462:	9305      	str	r3, [sp, #20]
 8016464:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016468:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801646c:	2b10      	cmp	r3, #16
 801646e:	dc02      	bgt.n	8016476 <__ieee754_rem_pio2+0x1c6>
 8016470:	e9c4 0100 	strd	r0, r1, [r4]
 8016474:	e039      	b.n	80164ea <__ieee754_rem_pio2+0x23a>
 8016476:	a34c      	add	r3, pc, #304	@ (adr r3, 80165a8 <__ieee754_rem_pio2+0x2f8>)
 8016478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801647c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016480:	f7ea f8b2 	bl	80005e8 <__aeabi_dmul>
 8016484:	4606      	mov	r6, r0
 8016486:	460f      	mov	r7, r1
 8016488:	4602      	mov	r2, r0
 801648a:	460b      	mov	r3, r1
 801648c:	4650      	mov	r0, sl
 801648e:	4659      	mov	r1, fp
 8016490:	f7e9 fef2 	bl	8000278 <__aeabi_dsub>
 8016494:	4602      	mov	r2, r0
 8016496:	460b      	mov	r3, r1
 8016498:	4680      	mov	r8, r0
 801649a:	4689      	mov	r9, r1
 801649c:	4650      	mov	r0, sl
 801649e:	4659      	mov	r1, fp
 80164a0:	f7e9 feea 	bl	8000278 <__aeabi_dsub>
 80164a4:	4632      	mov	r2, r6
 80164a6:	463b      	mov	r3, r7
 80164a8:	f7e9 fee6 	bl	8000278 <__aeabi_dsub>
 80164ac:	a340      	add	r3, pc, #256	@ (adr r3, 80165b0 <__ieee754_rem_pio2+0x300>)
 80164ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164b2:	4606      	mov	r6, r0
 80164b4:	460f      	mov	r7, r1
 80164b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80164ba:	f7ea f895 	bl	80005e8 <__aeabi_dmul>
 80164be:	4632      	mov	r2, r6
 80164c0:	463b      	mov	r3, r7
 80164c2:	f7e9 fed9 	bl	8000278 <__aeabi_dsub>
 80164c6:	4602      	mov	r2, r0
 80164c8:	460b      	mov	r3, r1
 80164ca:	4606      	mov	r6, r0
 80164cc:	460f      	mov	r7, r1
 80164ce:	4640      	mov	r0, r8
 80164d0:	4649      	mov	r1, r9
 80164d2:	f7e9 fed1 	bl	8000278 <__aeabi_dsub>
 80164d6:	9a05      	ldr	r2, [sp, #20]
 80164d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80164dc:	1ad3      	subs	r3, r2, r3
 80164de:	2b31      	cmp	r3, #49	@ 0x31
 80164e0:	dc20      	bgt.n	8016524 <__ieee754_rem_pio2+0x274>
 80164e2:	e9c4 0100 	strd	r0, r1, [r4]
 80164e6:	46c2      	mov	sl, r8
 80164e8:	46cb      	mov	fp, r9
 80164ea:	e9d4 8900 	ldrd	r8, r9, [r4]
 80164ee:	4650      	mov	r0, sl
 80164f0:	4642      	mov	r2, r8
 80164f2:	464b      	mov	r3, r9
 80164f4:	4659      	mov	r1, fp
 80164f6:	f7e9 febf 	bl	8000278 <__aeabi_dsub>
 80164fa:	463b      	mov	r3, r7
 80164fc:	4632      	mov	r2, r6
 80164fe:	f7e9 febb 	bl	8000278 <__aeabi_dsub>
 8016502:	9b04      	ldr	r3, [sp, #16]
 8016504:	2b00      	cmp	r3, #0
 8016506:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801650a:	f6bf af0e 	bge.w	801632a <__ieee754_rem_pio2+0x7a>
 801650e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8016512:	6063      	str	r3, [r4, #4]
 8016514:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016518:	f8c4 8000 	str.w	r8, [r4]
 801651c:	60a0      	str	r0, [r4, #8]
 801651e:	60e3      	str	r3, [r4, #12]
 8016520:	426d      	negs	r5, r5
 8016522:	e702      	b.n	801632a <__ieee754_rem_pio2+0x7a>
 8016524:	a326      	add	r3, pc, #152	@ (adr r3, 80165c0 <__ieee754_rem_pio2+0x310>)
 8016526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801652a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801652e:	f7ea f85b 	bl	80005e8 <__aeabi_dmul>
 8016532:	4606      	mov	r6, r0
 8016534:	460f      	mov	r7, r1
 8016536:	4602      	mov	r2, r0
 8016538:	460b      	mov	r3, r1
 801653a:	4640      	mov	r0, r8
 801653c:	4649      	mov	r1, r9
 801653e:	f7e9 fe9b 	bl	8000278 <__aeabi_dsub>
 8016542:	4602      	mov	r2, r0
 8016544:	460b      	mov	r3, r1
 8016546:	4682      	mov	sl, r0
 8016548:	468b      	mov	fp, r1
 801654a:	4640      	mov	r0, r8
 801654c:	4649      	mov	r1, r9
 801654e:	f7e9 fe93 	bl	8000278 <__aeabi_dsub>
 8016552:	4632      	mov	r2, r6
 8016554:	463b      	mov	r3, r7
 8016556:	f7e9 fe8f 	bl	8000278 <__aeabi_dsub>
 801655a:	a31b      	add	r3, pc, #108	@ (adr r3, 80165c8 <__ieee754_rem_pio2+0x318>)
 801655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016560:	4606      	mov	r6, r0
 8016562:	460f      	mov	r7, r1
 8016564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016568:	f7ea f83e 	bl	80005e8 <__aeabi_dmul>
 801656c:	4632      	mov	r2, r6
 801656e:	463b      	mov	r3, r7
 8016570:	f7e9 fe82 	bl	8000278 <__aeabi_dsub>
 8016574:	4606      	mov	r6, r0
 8016576:	460f      	mov	r7, r1
 8016578:	e764      	b.n	8016444 <__ieee754_rem_pio2+0x194>
 801657a:	4b1b      	ldr	r3, [pc, #108]	@ (80165e8 <__ieee754_rem_pio2+0x338>)
 801657c:	4598      	cmp	r8, r3
 801657e:	d935      	bls.n	80165ec <__ieee754_rem_pio2+0x33c>
 8016580:	4632      	mov	r2, r6
 8016582:	463b      	mov	r3, r7
 8016584:	4630      	mov	r0, r6
 8016586:	4639      	mov	r1, r7
 8016588:	f7e9 fe76 	bl	8000278 <__aeabi_dsub>
 801658c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016590:	e9c4 0100 	strd	r0, r1, [r4]
 8016594:	e69e      	b.n	80162d4 <__ieee754_rem_pio2+0x24>
 8016596:	bf00      	nop
 8016598:	54400000 	.word	0x54400000
 801659c:	3ff921fb 	.word	0x3ff921fb
 80165a0:	1a626331 	.word	0x1a626331
 80165a4:	3dd0b461 	.word	0x3dd0b461
 80165a8:	1a600000 	.word	0x1a600000
 80165ac:	3dd0b461 	.word	0x3dd0b461
 80165b0:	2e037073 	.word	0x2e037073
 80165b4:	3ba3198a 	.word	0x3ba3198a
 80165b8:	6dc9c883 	.word	0x6dc9c883
 80165bc:	3fe45f30 	.word	0x3fe45f30
 80165c0:	2e000000 	.word	0x2e000000
 80165c4:	3ba3198a 	.word	0x3ba3198a
 80165c8:	252049c1 	.word	0x252049c1
 80165cc:	397b839a 	.word	0x397b839a
 80165d0:	3fe921fb 	.word	0x3fe921fb
 80165d4:	4002d97b 	.word	0x4002d97b
 80165d8:	3ff921fb 	.word	0x3ff921fb
 80165dc:	413921fb 	.word	0x413921fb
 80165e0:	3fe00000 	.word	0x3fe00000
 80165e4:	08019c34 	.word	0x08019c34
 80165e8:	7fefffff 	.word	0x7fefffff
 80165ec:	ea4f 5528 	mov.w	r5, r8, asr #20
 80165f0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80165f4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80165f8:	4630      	mov	r0, r6
 80165fa:	460f      	mov	r7, r1
 80165fc:	f7ea fa8e 	bl	8000b1c <__aeabi_d2iz>
 8016600:	f7e9 ff88 	bl	8000514 <__aeabi_i2d>
 8016604:	4602      	mov	r2, r0
 8016606:	460b      	mov	r3, r1
 8016608:	4630      	mov	r0, r6
 801660a:	4639      	mov	r1, r7
 801660c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016610:	f7e9 fe32 	bl	8000278 <__aeabi_dsub>
 8016614:	4b22      	ldr	r3, [pc, #136]	@ (80166a0 <__ieee754_rem_pio2+0x3f0>)
 8016616:	2200      	movs	r2, #0
 8016618:	f7e9 ffe6 	bl	80005e8 <__aeabi_dmul>
 801661c:	460f      	mov	r7, r1
 801661e:	4606      	mov	r6, r0
 8016620:	f7ea fa7c 	bl	8000b1c <__aeabi_d2iz>
 8016624:	f7e9 ff76 	bl	8000514 <__aeabi_i2d>
 8016628:	4602      	mov	r2, r0
 801662a:	460b      	mov	r3, r1
 801662c:	4630      	mov	r0, r6
 801662e:	4639      	mov	r1, r7
 8016630:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016634:	f7e9 fe20 	bl	8000278 <__aeabi_dsub>
 8016638:	4b19      	ldr	r3, [pc, #100]	@ (80166a0 <__ieee754_rem_pio2+0x3f0>)
 801663a:	2200      	movs	r2, #0
 801663c:	f7e9 ffd4 	bl	80005e8 <__aeabi_dmul>
 8016640:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8016644:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8016648:	f04f 0803 	mov.w	r8, #3
 801664c:	2600      	movs	r6, #0
 801664e:	2700      	movs	r7, #0
 8016650:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8016654:	4632      	mov	r2, r6
 8016656:	463b      	mov	r3, r7
 8016658:	46c2      	mov	sl, r8
 801665a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801665e:	f7ea fa2b 	bl	8000ab8 <__aeabi_dcmpeq>
 8016662:	2800      	cmp	r0, #0
 8016664:	d1f4      	bne.n	8016650 <__ieee754_rem_pio2+0x3a0>
 8016666:	4b0f      	ldr	r3, [pc, #60]	@ (80166a4 <__ieee754_rem_pio2+0x3f4>)
 8016668:	9301      	str	r3, [sp, #4]
 801666a:	2302      	movs	r3, #2
 801666c:	9300      	str	r3, [sp, #0]
 801666e:	462a      	mov	r2, r5
 8016670:	4653      	mov	r3, sl
 8016672:	4621      	mov	r1, r4
 8016674:	a806      	add	r0, sp, #24
 8016676:	f000 f8a3 	bl	80167c0 <__kernel_rem_pio2>
 801667a:	9b04      	ldr	r3, [sp, #16]
 801667c:	2b00      	cmp	r3, #0
 801667e:	4605      	mov	r5, r0
 8016680:	f6bf ae53 	bge.w	801632a <__ieee754_rem_pio2+0x7a>
 8016684:	e9d4 2100 	ldrd	r2, r1, [r4]
 8016688:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801668c:	e9c4 2300 	strd	r2, r3, [r4]
 8016690:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8016694:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016698:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801669c:	e740      	b.n	8016520 <__ieee754_rem_pio2+0x270>
 801669e:	bf00      	nop
 80166a0:	41700000 	.word	0x41700000
 80166a4:	08019cb4 	.word	0x08019cb4

080166a8 <fabs>:
 80166a8:	ec51 0b10 	vmov	r0, r1, d0
 80166ac:	4602      	mov	r2, r0
 80166ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80166b2:	ec43 2b10 	vmov	d0, r2, r3
 80166b6:	4770      	bx	lr

080166b8 <__ieee754_fmodf>:
 80166b8:	b570      	push	{r4, r5, r6, lr}
 80166ba:	ee10 6a90 	vmov	r6, s1
 80166be:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80166c2:	1e5a      	subs	r2, r3, #1
 80166c4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80166c8:	d206      	bcs.n	80166d8 <__ieee754_fmodf+0x20>
 80166ca:	ee10 4a10 	vmov	r4, s0
 80166ce:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 80166d2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80166d6:	d304      	bcc.n	80166e2 <__ieee754_fmodf+0x2a>
 80166d8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80166dc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80166e0:	bd70      	pop	{r4, r5, r6, pc}
 80166e2:	4299      	cmp	r1, r3
 80166e4:	dbfc      	blt.n	80166e0 <__ieee754_fmodf+0x28>
 80166e6:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 80166ea:	d105      	bne.n	80166f8 <__ieee754_fmodf+0x40>
 80166ec:	4b32      	ldr	r3, [pc, #200]	@ (80167b8 <__ieee754_fmodf+0x100>)
 80166ee:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 80166f2:	ed93 0a00 	vldr	s0, [r3]
 80166f6:	e7f3      	b.n	80166e0 <__ieee754_fmodf+0x28>
 80166f8:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80166fc:	d146      	bne.n	801678c <__ieee754_fmodf+0xd4>
 80166fe:	020a      	lsls	r2, r1, #8
 8016700:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8016704:	2a00      	cmp	r2, #0
 8016706:	dc3e      	bgt.n	8016786 <__ieee754_fmodf+0xce>
 8016708:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801670c:	bf01      	itttt	eq
 801670e:	021a      	lsleq	r2, r3, #8
 8016710:	fab2 f282 	clzeq	r2, r2
 8016714:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8016718:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 801671c:	bf16      	itet	ne
 801671e:	15da      	asrne	r2, r3, #23
 8016720:	3282      	addeq	r2, #130	@ 0x82
 8016722:	3a7f      	subne	r2, #127	@ 0x7f
 8016724:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8016728:	bfbb      	ittet	lt
 801672a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801672e:	1a24      	sublt	r4, r4, r0
 8016730:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8016734:	40a1      	lsllt	r1, r4
 8016736:	bfa8      	it	ge
 8016738:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 801673c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8016740:	bfb5      	itete	lt
 8016742:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8016746:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 801674a:	1aa4      	sublt	r4, r4, r2
 801674c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8016750:	bfb8      	it	lt
 8016752:	fa03 f404 	lsllt.w	r4, r3, r4
 8016756:	1a80      	subs	r0, r0, r2
 8016758:	1b0b      	subs	r3, r1, r4
 801675a:	b9d0      	cbnz	r0, 8016792 <__ieee754_fmodf+0xda>
 801675c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8016760:	bf28      	it	cs
 8016762:	460b      	movcs	r3, r1
 8016764:	2b00      	cmp	r3, #0
 8016766:	d0c1      	beq.n	80166ec <__ieee754_fmodf+0x34>
 8016768:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801676c:	db19      	blt.n	80167a2 <__ieee754_fmodf+0xea>
 801676e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8016772:	db19      	blt.n	80167a8 <__ieee754_fmodf+0xf0>
 8016774:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8016778:	327f      	adds	r2, #127	@ 0x7f
 801677a:	432b      	orrs	r3, r5
 801677c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8016780:	ee00 3a10 	vmov	s0, r3
 8016784:	e7ac      	b.n	80166e0 <__ieee754_fmodf+0x28>
 8016786:	3801      	subs	r0, #1
 8016788:	0052      	lsls	r2, r2, #1
 801678a:	e7bb      	b.n	8016704 <__ieee754_fmodf+0x4c>
 801678c:	15c8      	asrs	r0, r1, #23
 801678e:	387f      	subs	r0, #127	@ 0x7f
 8016790:	e7ba      	b.n	8016708 <__ieee754_fmodf+0x50>
 8016792:	2b00      	cmp	r3, #0
 8016794:	da02      	bge.n	801679c <__ieee754_fmodf+0xe4>
 8016796:	0049      	lsls	r1, r1, #1
 8016798:	3801      	subs	r0, #1
 801679a:	e7dd      	b.n	8016758 <__ieee754_fmodf+0xa0>
 801679c:	d0a6      	beq.n	80166ec <__ieee754_fmodf+0x34>
 801679e:	0059      	lsls	r1, r3, #1
 80167a0:	e7fa      	b.n	8016798 <__ieee754_fmodf+0xe0>
 80167a2:	005b      	lsls	r3, r3, #1
 80167a4:	3a01      	subs	r2, #1
 80167a6:	e7df      	b.n	8016768 <__ieee754_fmodf+0xb0>
 80167a8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 80167ac:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80167b0:	3282      	adds	r2, #130	@ 0x82
 80167b2:	4113      	asrs	r3, r2
 80167b4:	432b      	orrs	r3, r5
 80167b6:	e7e3      	b.n	8016780 <__ieee754_fmodf+0xc8>
 80167b8:	08019dbc 	.word	0x08019dbc
 80167bc:	00000000 	.word	0x00000000

080167c0 <__kernel_rem_pio2>:
 80167c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167c4:	ed2d 8b02 	vpush	{d8}
 80167c8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80167cc:	f112 0f14 	cmn.w	r2, #20
 80167d0:	9306      	str	r3, [sp, #24]
 80167d2:	9104      	str	r1, [sp, #16]
 80167d4:	4bc2      	ldr	r3, [pc, #776]	@ (8016ae0 <__kernel_rem_pio2+0x320>)
 80167d6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80167d8:	9008      	str	r0, [sp, #32]
 80167da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80167de:	9300      	str	r3, [sp, #0]
 80167e0:	9b06      	ldr	r3, [sp, #24]
 80167e2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80167e6:	bfa8      	it	ge
 80167e8:	1ed4      	subge	r4, r2, #3
 80167ea:	9305      	str	r3, [sp, #20]
 80167ec:	bfb2      	itee	lt
 80167ee:	2400      	movlt	r4, #0
 80167f0:	2318      	movge	r3, #24
 80167f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80167f6:	f06f 0317 	mvn.w	r3, #23
 80167fa:	fb04 3303 	mla	r3, r4, r3, r3
 80167fe:	eb03 0b02 	add.w	fp, r3, r2
 8016802:	9b00      	ldr	r3, [sp, #0]
 8016804:	9a05      	ldr	r2, [sp, #20]
 8016806:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8016ad0 <__kernel_rem_pio2+0x310>
 801680a:	eb03 0802 	add.w	r8, r3, r2
 801680e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8016810:	1aa7      	subs	r7, r4, r2
 8016812:	ae20      	add	r6, sp, #128	@ 0x80
 8016814:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8016818:	2500      	movs	r5, #0
 801681a:	4545      	cmp	r5, r8
 801681c:	dd12      	ble.n	8016844 <__kernel_rem_pio2+0x84>
 801681e:	9b06      	ldr	r3, [sp, #24]
 8016820:	aa20      	add	r2, sp, #128	@ 0x80
 8016822:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8016826:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801682a:	2700      	movs	r7, #0
 801682c:	9b00      	ldr	r3, [sp, #0]
 801682e:	429f      	cmp	r7, r3
 8016830:	dc2e      	bgt.n	8016890 <__kernel_rem_pio2+0xd0>
 8016832:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8016ad0 <__kernel_rem_pio2+0x310>
 8016836:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801683a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801683e:	46a8      	mov	r8, r5
 8016840:	2600      	movs	r6, #0
 8016842:	e01b      	b.n	801687c <__kernel_rem_pio2+0xbc>
 8016844:	42ef      	cmn	r7, r5
 8016846:	d407      	bmi.n	8016858 <__kernel_rem_pio2+0x98>
 8016848:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801684c:	f7e9 fe62 	bl	8000514 <__aeabi_i2d>
 8016850:	e8e6 0102 	strd	r0, r1, [r6], #8
 8016854:	3501      	adds	r5, #1
 8016856:	e7e0      	b.n	801681a <__kernel_rem_pio2+0x5a>
 8016858:	ec51 0b18 	vmov	r0, r1, d8
 801685c:	e7f8      	b.n	8016850 <__kernel_rem_pio2+0x90>
 801685e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8016862:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8016866:	f7e9 febf 	bl	80005e8 <__aeabi_dmul>
 801686a:	4602      	mov	r2, r0
 801686c:	460b      	mov	r3, r1
 801686e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016872:	f7e9 fd03 	bl	800027c <__adddf3>
 8016876:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801687a:	3601      	adds	r6, #1
 801687c:	9b05      	ldr	r3, [sp, #20]
 801687e:	429e      	cmp	r6, r3
 8016880:	dded      	ble.n	801685e <__kernel_rem_pio2+0x9e>
 8016882:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016886:	3701      	adds	r7, #1
 8016888:	ecaa 7b02 	vstmia	sl!, {d7}
 801688c:	3508      	adds	r5, #8
 801688e:	e7cd      	b.n	801682c <__kernel_rem_pio2+0x6c>
 8016890:	9b00      	ldr	r3, [sp, #0]
 8016892:	f8dd 8000 	ldr.w	r8, [sp]
 8016896:	aa0c      	add	r2, sp, #48	@ 0x30
 8016898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801689c:	930a      	str	r3, [sp, #40]	@ 0x28
 801689e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80168a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80168a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80168a6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80168aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80168ac:	ab98      	add	r3, sp, #608	@ 0x260
 80168ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80168b2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80168b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80168ba:	ac0c      	add	r4, sp, #48	@ 0x30
 80168bc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80168be:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80168c2:	46a1      	mov	r9, r4
 80168c4:	46c2      	mov	sl, r8
 80168c6:	f1ba 0f00 	cmp.w	sl, #0
 80168ca:	dc77      	bgt.n	80169bc <__kernel_rem_pio2+0x1fc>
 80168cc:	4658      	mov	r0, fp
 80168ce:	ed9d 0b02 	vldr	d0, [sp, #8]
 80168d2:	f000 fac5 	bl	8016e60 <scalbn>
 80168d6:	ec57 6b10 	vmov	r6, r7, d0
 80168da:	2200      	movs	r2, #0
 80168dc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80168e0:	4630      	mov	r0, r6
 80168e2:	4639      	mov	r1, r7
 80168e4:	f7e9 fe80 	bl	80005e8 <__aeabi_dmul>
 80168e8:	ec41 0b10 	vmov	d0, r0, r1
 80168ec:	f000 fb34 	bl	8016f58 <floor>
 80168f0:	4b7c      	ldr	r3, [pc, #496]	@ (8016ae4 <__kernel_rem_pio2+0x324>)
 80168f2:	ec51 0b10 	vmov	r0, r1, d0
 80168f6:	2200      	movs	r2, #0
 80168f8:	f7e9 fe76 	bl	80005e8 <__aeabi_dmul>
 80168fc:	4602      	mov	r2, r0
 80168fe:	460b      	mov	r3, r1
 8016900:	4630      	mov	r0, r6
 8016902:	4639      	mov	r1, r7
 8016904:	f7e9 fcb8 	bl	8000278 <__aeabi_dsub>
 8016908:	460f      	mov	r7, r1
 801690a:	4606      	mov	r6, r0
 801690c:	f7ea f906 	bl	8000b1c <__aeabi_d2iz>
 8016910:	9002      	str	r0, [sp, #8]
 8016912:	f7e9 fdff 	bl	8000514 <__aeabi_i2d>
 8016916:	4602      	mov	r2, r0
 8016918:	460b      	mov	r3, r1
 801691a:	4630      	mov	r0, r6
 801691c:	4639      	mov	r1, r7
 801691e:	f7e9 fcab 	bl	8000278 <__aeabi_dsub>
 8016922:	f1bb 0f00 	cmp.w	fp, #0
 8016926:	4606      	mov	r6, r0
 8016928:	460f      	mov	r7, r1
 801692a:	dd6c      	ble.n	8016a06 <__kernel_rem_pio2+0x246>
 801692c:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8016930:	ab0c      	add	r3, sp, #48	@ 0x30
 8016932:	9d02      	ldr	r5, [sp, #8]
 8016934:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016938:	f1cb 0018 	rsb	r0, fp, #24
 801693c:	fa43 f200 	asr.w	r2, r3, r0
 8016940:	4415      	add	r5, r2
 8016942:	4082      	lsls	r2, r0
 8016944:	1a9b      	subs	r3, r3, r2
 8016946:	aa0c      	add	r2, sp, #48	@ 0x30
 8016948:	9502      	str	r5, [sp, #8]
 801694a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801694e:	f1cb 0217 	rsb	r2, fp, #23
 8016952:	fa43 f902 	asr.w	r9, r3, r2
 8016956:	f1b9 0f00 	cmp.w	r9, #0
 801695a:	dd64      	ble.n	8016a26 <__kernel_rem_pio2+0x266>
 801695c:	9b02      	ldr	r3, [sp, #8]
 801695e:	2200      	movs	r2, #0
 8016960:	3301      	adds	r3, #1
 8016962:	9302      	str	r3, [sp, #8]
 8016964:	4615      	mov	r5, r2
 8016966:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801696a:	4590      	cmp	r8, r2
 801696c:	f300 80a1 	bgt.w	8016ab2 <__kernel_rem_pio2+0x2f2>
 8016970:	f1bb 0f00 	cmp.w	fp, #0
 8016974:	dd07      	ble.n	8016986 <__kernel_rem_pio2+0x1c6>
 8016976:	f1bb 0f01 	cmp.w	fp, #1
 801697a:	f000 80c1 	beq.w	8016b00 <__kernel_rem_pio2+0x340>
 801697e:	f1bb 0f02 	cmp.w	fp, #2
 8016982:	f000 80c8 	beq.w	8016b16 <__kernel_rem_pio2+0x356>
 8016986:	f1b9 0f02 	cmp.w	r9, #2
 801698a:	d14c      	bne.n	8016a26 <__kernel_rem_pio2+0x266>
 801698c:	4632      	mov	r2, r6
 801698e:	463b      	mov	r3, r7
 8016990:	4955      	ldr	r1, [pc, #340]	@ (8016ae8 <__kernel_rem_pio2+0x328>)
 8016992:	2000      	movs	r0, #0
 8016994:	f7e9 fc70 	bl	8000278 <__aeabi_dsub>
 8016998:	4606      	mov	r6, r0
 801699a:	460f      	mov	r7, r1
 801699c:	2d00      	cmp	r5, #0
 801699e:	d042      	beq.n	8016a26 <__kernel_rem_pio2+0x266>
 80169a0:	4658      	mov	r0, fp
 80169a2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8016ad8 <__kernel_rem_pio2+0x318>
 80169a6:	f000 fa5b 	bl	8016e60 <scalbn>
 80169aa:	4630      	mov	r0, r6
 80169ac:	4639      	mov	r1, r7
 80169ae:	ec53 2b10 	vmov	r2, r3, d0
 80169b2:	f7e9 fc61 	bl	8000278 <__aeabi_dsub>
 80169b6:	4606      	mov	r6, r0
 80169b8:	460f      	mov	r7, r1
 80169ba:	e034      	b.n	8016a26 <__kernel_rem_pio2+0x266>
 80169bc:	4b4b      	ldr	r3, [pc, #300]	@ (8016aec <__kernel_rem_pio2+0x32c>)
 80169be:	2200      	movs	r2, #0
 80169c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80169c4:	f7e9 fe10 	bl	80005e8 <__aeabi_dmul>
 80169c8:	f7ea f8a8 	bl	8000b1c <__aeabi_d2iz>
 80169cc:	f7e9 fda2 	bl	8000514 <__aeabi_i2d>
 80169d0:	4b47      	ldr	r3, [pc, #284]	@ (8016af0 <__kernel_rem_pio2+0x330>)
 80169d2:	2200      	movs	r2, #0
 80169d4:	4606      	mov	r6, r0
 80169d6:	460f      	mov	r7, r1
 80169d8:	f7e9 fe06 	bl	80005e8 <__aeabi_dmul>
 80169dc:	4602      	mov	r2, r0
 80169de:	460b      	mov	r3, r1
 80169e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80169e4:	f7e9 fc48 	bl	8000278 <__aeabi_dsub>
 80169e8:	f7ea f898 	bl	8000b1c <__aeabi_d2iz>
 80169ec:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80169f0:	f849 0b04 	str.w	r0, [r9], #4
 80169f4:	4639      	mov	r1, r7
 80169f6:	4630      	mov	r0, r6
 80169f8:	f7e9 fc40 	bl	800027c <__adddf3>
 80169fc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8016a00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a04:	e75f      	b.n	80168c6 <__kernel_rem_pio2+0x106>
 8016a06:	d107      	bne.n	8016a18 <__kernel_rem_pio2+0x258>
 8016a08:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8016a0c:	aa0c      	add	r2, sp, #48	@ 0x30
 8016a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016a12:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8016a16:	e79e      	b.n	8016956 <__kernel_rem_pio2+0x196>
 8016a18:	4b36      	ldr	r3, [pc, #216]	@ (8016af4 <__kernel_rem_pio2+0x334>)
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	f7ea f86a 	bl	8000af4 <__aeabi_dcmpge>
 8016a20:	2800      	cmp	r0, #0
 8016a22:	d143      	bne.n	8016aac <__kernel_rem_pio2+0x2ec>
 8016a24:	4681      	mov	r9, r0
 8016a26:	2200      	movs	r2, #0
 8016a28:	2300      	movs	r3, #0
 8016a2a:	4630      	mov	r0, r6
 8016a2c:	4639      	mov	r1, r7
 8016a2e:	f7ea f843 	bl	8000ab8 <__aeabi_dcmpeq>
 8016a32:	2800      	cmp	r0, #0
 8016a34:	f000 80c1 	beq.w	8016bba <__kernel_rem_pio2+0x3fa>
 8016a38:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8016a3c:	2200      	movs	r2, #0
 8016a3e:	9900      	ldr	r1, [sp, #0]
 8016a40:	428b      	cmp	r3, r1
 8016a42:	da70      	bge.n	8016b26 <__kernel_rem_pio2+0x366>
 8016a44:	2a00      	cmp	r2, #0
 8016a46:	f000 808b 	beq.w	8016b60 <__kernel_rem_pio2+0x3a0>
 8016a4a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8016a4e:	ab0c      	add	r3, sp, #48	@ 0x30
 8016a50:	f1ab 0b18 	sub.w	fp, fp, #24
 8016a54:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d0f6      	beq.n	8016a4a <__kernel_rem_pio2+0x28a>
 8016a5c:	4658      	mov	r0, fp
 8016a5e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8016ad8 <__kernel_rem_pio2+0x318>
 8016a62:	f000 f9fd 	bl	8016e60 <scalbn>
 8016a66:	f108 0301 	add.w	r3, r8, #1
 8016a6a:	00da      	lsls	r2, r3, #3
 8016a6c:	9205      	str	r2, [sp, #20]
 8016a6e:	ec55 4b10 	vmov	r4, r5, d0
 8016a72:	aa70      	add	r2, sp, #448	@ 0x1c0
 8016a74:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8016aec <__kernel_rem_pio2+0x32c>
 8016a78:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8016a7c:	4646      	mov	r6, r8
 8016a7e:	f04f 0a00 	mov.w	sl, #0
 8016a82:	2e00      	cmp	r6, #0
 8016a84:	f280 80d1 	bge.w	8016c2a <__kernel_rem_pio2+0x46a>
 8016a88:	4644      	mov	r4, r8
 8016a8a:	2c00      	cmp	r4, #0
 8016a8c:	f2c0 80ff 	blt.w	8016c8e <__kernel_rem_pio2+0x4ce>
 8016a90:	4b19      	ldr	r3, [pc, #100]	@ (8016af8 <__kernel_rem_pio2+0x338>)
 8016a92:	461f      	mov	r7, r3
 8016a94:	ab70      	add	r3, sp, #448	@ 0x1c0
 8016a96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016a9a:	9306      	str	r3, [sp, #24]
 8016a9c:	f04f 0a00 	mov.w	sl, #0
 8016aa0:	f04f 0b00 	mov.w	fp, #0
 8016aa4:	2600      	movs	r6, #0
 8016aa6:	eba8 0504 	sub.w	r5, r8, r4
 8016aaa:	e0e4      	b.n	8016c76 <__kernel_rem_pio2+0x4b6>
 8016aac:	f04f 0902 	mov.w	r9, #2
 8016ab0:	e754      	b.n	801695c <__kernel_rem_pio2+0x19c>
 8016ab2:	f854 3b04 	ldr.w	r3, [r4], #4
 8016ab6:	bb0d      	cbnz	r5, 8016afc <__kernel_rem_pio2+0x33c>
 8016ab8:	b123      	cbz	r3, 8016ac4 <__kernel_rem_pio2+0x304>
 8016aba:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8016abe:	f844 3c04 	str.w	r3, [r4, #-4]
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	3201      	adds	r2, #1
 8016ac6:	461d      	mov	r5, r3
 8016ac8:	e74f      	b.n	801696a <__kernel_rem_pio2+0x1aa>
 8016aca:	bf00      	nop
 8016acc:	f3af 8000 	nop.w
	...
 8016adc:	3ff00000 	.word	0x3ff00000
 8016ae0:	08019e08 	.word	0x08019e08
 8016ae4:	40200000 	.word	0x40200000
 8016ae8:	3ff00000 	.word	0x3ff00000
 8016aec:	3e700000 	.word	0x3e700000
 8016af0:	41700000 	.word	0x41700000
 8016af4:	3fe00000 	.word	0x3fe00000
 8016af8:	08019dc8 	.word	0x08019dc8
 8016afc:	1acb      	subs	r3, r1, r3
 8016afe:	e7de      	b.n	8016abe <__kernel_rem_pio2+0x2fe>
 8016b00:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8016b04:	ab0c      	add	r3, sp, #48	@ 0x30
 8016b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b0a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016b0e:	a90c      	add	r1, sp, #48	@ 0x30
 8016b10:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016b14:	e737      	b.n	8016986 <__kernel_rem_pio2+0x1c6>
 8016b16:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8016b1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8016b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b20:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016b24:	e7f3      	b.n	8016b0e <__kernel_rem_pio2+0x34e>
 8016b26:	a90c      	add	r1, sp, #48	@ 0x30
 8016b28:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8016b2c:	3b01      	subs	r3, #1
 8016b2e:	430a      	orrs	r2, r1
 8016b30:	e785      	b.n	8016a3e <__kernel_rem_pio2+0x27e>
 8016b32:	3401      	adds	r4, #1
 8016b34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016b38:	2a00      	cmp	r2, #0
 8016b3a:	d0fa      	beq.n	8016b32 <__kernel_rem_pio2+0x372>
 8016b3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016b3e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8016b42:	eb0d 0503 	add.w	r5, sp, r3
 8016b46:	9b06      	ldr	r3, [sp, #24]
 8016b48:	aa20      	add	r2, sp, #128	@ 0x80
 8016b4a:	4443      	add	r3, r8
 8016b4c:	f108 0701 	add.w	r7, r8, #1
 8016b50:	3d98      	subs	r5, #152	@ 0x98
 8016b52:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8016b56:	4444      	add	r4, r8
 8016b58:	42bc      	cmp	r4, r7
 8016b5a:	da04      	bge.n	8016b66 <__kernel_rem_pio2+0x3a6>
 8016b5c:	46a0      	mov	r8, r4
 8016b5e:	e6a2      	b.n	80168a6 <__kernel_rem_pio2+0xe6>
 8016b60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016b62:	2401      	movs	r4, #1
 8016b64:	e7e6      	b.n	8016b34 <__kernel_rem_pio2+0x374>
 8016b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b68:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8016b6c:	f7e9 fcd2 	bl	8000514 <__aeabi_i2d>
 8016b70:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8016e30 <__kernel_rem_pio2+0x670>
 8016b74:	e8e6 0102 	strd	r0, r1, [r6], #8
 8016b78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016b7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016b80:	46b2      	mov	sl, r6
 8016b82:	f04f 0800 	mov.w	r8, #0
 8016b86:	9b05      	ldr	r3, [sp, #20]
 8016b88:	4598      	cmp	r8, r3
 8016b8a:	dd05      	ble.n	8016b98 <__kernel_rem_pio2+0x3d8>
 8016b8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016b90:	3701      	adds	r7, #1
 8016b92:	eca5 7b02 	vstmia	r5!, {d7}
 8016b96:	e7df      	b.n	8016b58 <__kernel_rem_pio2+0x398>
 8016b98:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8016b9c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8016ba0:	f7e9 fd22 	bl	80005e8 <__aeabi_dmul>
 8016ba4:	4602      	mov	r2, r0
 8016ba6:	460b      	mov	r3, r1
 8016ba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016bac:	f7e9 fb66 	bl	800027c <__adddf3>
 8016bb0:	f108 0801 	add.w	r8, r8, #1
 8016bb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016bb8:	e7e5      	b.n	8016b86 <__kernel_rem_pio2+0x3c6>
 8016bba:	f1cb 0000 	rsb	r0, fp, #0
 8016bbe:	ec47 6b10 	vmov	d0, r6, r7
 8016bc2:	f000 f94d 	bl	8016e60 <scalbn>
 8016bc6:	ec55 4b10 	vmov	r4, r5, d0
 8016bca:	4b9b      	ldr	r3, [pc, #620]	@ (8016e38 <__kernel_rem_pio2+0x678>)
 8016bcc:	2200      	movs	r2, #0
 8016bce:	4620      	mov	r0, r4
 8016bd0:	4629      	mov	r1, r5
 8016bd2:	f7e9 ff8f 	bl	8000af4 <__aeabi_dcmpge>
 8016bd6:	b300      	cbz	r0, 8016c1a <__kernel_rem_pio2+0x45a>
 8016bd8:	4b98      	ldr	r3, [pc, #608]	@ (8016e3c <__kernel_rem_pio2+0x67c>)
 8016bda:	2200      	movs	r2, #0
 8016bdc:	4620      	mov	r0, r4
 8016bde:	4629      	mov	r1, r5
 8016be0:	f7e9 fd02 	bl	80005e8 <__aeabi_dmul>
 8016be4:	f7e9 ff9a 	bl	8000b1c <__aeabi_d2iz>
 8016be8:	4606      	mov	r6, r0
 8016bea:	f7e9 fc93 	bl	8000514 <__aeabi_i2d>
 8016bee:	4b92      	ldr	r3, [pc, #584]	@ (8016e38 <__kernel_rem_pio2+0x678>)
 8016bf0:	2200      	movs	r2, #0
 8016bf2:	f7e9 fcf9 	bl	80005e8 <__aeabi_dmul>
 8016bf6:	460b      	mov	r3, r1
 8016bf8:	4602      	mov	r2, r0
 8016bfa:	4629      	mov	r1, r5
 8016bfc:	4620      	mov	r0, r4
 8016bfe:	f7e9 fb3b 	bl	8000278 <__aeabi_dsub>
 8016c02:	f7e9 ff8b 	bl	8000b1c <__aeabi_d2iz>
 8016c06:	ab0c      	add	r3, sp, #48	@ 0x30
 8016c08:	f10b 0b18 	add.w	fp, fp, #24
 8016c0c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8016c10:	f108 0801 	add.w	r8, r8, #1
 8016c14:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8016c18:	e720      	b.n	8016a5c <__kernel_rem_pio2+0x29c>
 8016c1a:	4620      	mov	r0, r4
 8016c1c:	4629      	mov	r1, r5
 8016c1e:	f7e9 ff7d 	bl	8000b1c <__aeabi_d2iz>
 8016c22:	ab0c      	add	r3, sp, #48	@ 0x30
 8016c24:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8016c28:	e718      	b.n	8016a5c <__kernel_rem_pio2+0x29c>
 8016c2a:	ab0c      	add	r3, sp, #48	@ 0x30
 8016c2c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016c30:	f7e9 fc70 	bl	8000514 <__aeabi_i2d>
 8016c34:	4622      	mov	r2, r4
 8016c36:	462b      	mov	r3, r5
 8016c38:	f7e9 fcd6 	bl	80005e8 <__aeabi_dmul>
 8016c3c:	4652      	mov	r2, sl
 8016c3e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8016c42:	465b      	mov	r3, fp
 8016c44:	4620      	mov	r0, r4
 8016c46:	4629      	mov	r1, r5
 8016c48:	f7e9 fcce 	bl	80005e8 <__aeabi_dmul>
 8016c4c:	3e01      	subs	r6, #1
 8016c4e:	4604      	mov	r4, r0
 8016c50:	460d      	mov	r5, r1
 8016c52:	e716      	b.n	8016a82 <__kernel_rem_pio2+0x2c2>
 8016c54:	9906      	ldr	r1, [sp, #24]
 8016c56:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8016c5a:	9106      	str	r1, [sp, #24]
 8016c5c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8016c60:	f7e9 fcc2 	bl	80005e8 <__aeabi_dmul>
 8016c64:	4602      	mov	r2, r0
 8016c66:	460b      	mov	r3, r1
 8016c68:	4650      	mov	r0, sl
 8016c6a:	4659      	mov	r1, fp
 8016c6c:	f7e9 fb06 	bl	800027c <__adddf3>
 8016c70:	3601      	adds	r6, #1
 8016c72:	4682      	mov	sl, r0
 8016c74:	468b      	mov	fp, r1
 8016c76:	9b00      	ldr	r3, [sp, #0]
 8016c78:	429e      	cmp	r6, r3
 8016c7a:	dc01      	bgt.n	8016c80 <__kernel_rem_pio2+0x4c0>
 8016c7c:	42ae      	cmp	r6, r5
 8016c7e:	dde9      	ble.n	8016c54 <__kernel_rem_pio2+0x494>
 8016c80:	ab48      	add	r3, sp, #288	@ 0x120
 8016c82:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016c86:	e9c5 ab00 	strd	sl, fp, [r5]
 8016c8a:	3c01      	subs	r4, #1
 8016c8c:	e6fd      	b.n	8016a8a <__kernel_rem_pio2+0x2ca>
 8016c8e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8016c90:	2b02      	cmp	r3, #2
 8016c92:	dc0b      	bgt.n	8016cac <__kernel_rem_pio2+0x4ec>
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	dc35      	bgt.n	8016d04 <__kernel_rem_pio2+0x544>
 8016c98:	d059      	beq.n	8016d4e <__kernel_rem_pio2+0x58e>
 8016c9a:	9b02      	ldr	r3, [sp, #8]
 8016c9c:	f003 0007 	and.w	r0, r3, #7
 8016ca0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8016ca4:	ecbd 8b02 	vpop	{d8}
 8016ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8016cae:	2b03      	cmp	r3, #3
 8016cb0:	d1f3      	bne.n	8016c9a <__kernel_rem_pio2+0x4da>
 8016cb2:	9b05      	ldr	r3, [sp, #20]
 8016cb4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8016cb8:	eb0d 0403 	add.w	r4, sp, r3
 8016cbc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8016cc0:	4625      	mov	r5, r4
 8016cc2:	46c2      	mov	sl, r8
 8016cc4:	f1ba 0f00 	cmp.w	sl, #0
 8016cc8:	dc69      	bgt.n	8016d9e <__kernel_rem_pio2+0x5de>
 8016cca:	4645      	mov	r5, r8
 8016ccc:	2d01      	cmp	r5, #1
 8016cce:	f300 8087 	bgt.w	8016de0 <__kernel_rem_pio2+0x620>
 8016cd2:	9c05      	ldr	r4, [sp, #20]
 8016cd4:	ab48      	add	r3, sp, #288	@ 0x120
 8016cd6:	441c      	add	r4, r3
 8016cd8:	2000      	movs	r0, #0
 8016cda:	2100      	movs	r1, #0
 8016cdc:	f1b8 0f01 	cmp.w	r8, #1
 8016ce0:	f300 809c 	bgt.w	8016e1c <__kernel_rem_pio2+0x65c>
 8016ce4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8016ce8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8016cec:	f1b9 0f00 	cmp.w	r9, #0
 8016cf0:	f040 80a6 	bne.w	8016e40 <__kernel_rem_pio2+0x680>
 8016cf4:	9b04      	ldr	r3, [sp, #16]
 8016cf6:	e9c3 5600 	strd	r5, r6, [r3]
 8016cfa:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8016cfe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8016d02:	e7ca      	b.n	8016c9a <__kernel_rem_pio2+0x4da>
 8016d04:	9d05      	ldr	r5, [sp, #20]
 8016d06:	ab48      	add	r3, sp, #288	@ 0x120
 8016d08:	441d      	add	r5, r3
 8016d0a:	4644      	mov	r4, r8
 8016d0c:	2000      	movs	r0, #0
 8016d0e:	2100      	movs	r1, #0
 8016d10:	2c00      	cmp	r4, #0
 8016d12:	da35      	bge.n	8016d80 <__kernel_rem_pio2+0x5c0>
 8016d14:	f1b9 0f00 	cmp.w	r9, #0
 8016d18:	d038      	beq.n	8016d8c <__kernel_rem_pio2+0x5cc>
 8016d1a:	4602      	mov	r2, r0
 8016d1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016d20:	9c04      	ldr	r4, [sp, #16]
 8016d22:	e9c4 2300 	strd	r2, r3, [r4]
 8016d26:	4602      	mov	r2, r0
 8016d28:	460b      	mov	r3, r1
 8016d2a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8016d2e:	f7e9 faa3 	bl	8000278 <__aeabi_dsub>
 8016d32:	ad4a      	add	r5, sp, #296	@ 0x128
 8016d34:	2401      	movs	r4, #1
 8016d36:	45a0      	cmp	r8, r4
 8016d38:	da2b      	bge.n	8016d92 <__kernel_rem_pio2+0x5d2>
 8016d3a:	f1b9 0f00 	cmp.w	r9, #0
 8016d3e:	d002      	beq.n	8016d46 <__kernel_rem_pio2+0x586>
 8016d40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016d44:	4619      	mov	r1, r3
 8016d46:	9b04      	ldr	r3, [sp, #16]
 8016d48:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8016d4c:	e7a5      	b.n	8016c9a <__kernel_rem_pio2+0x4da>
 8016d4e:	9c05      	ldr	r4, [sp, #20]
 8016d50:	ab48      	add	r3, sp, #288	@ 0x120
 8016d52:	441c      	add	r4, r3
 8016d54:	2000      	movs	r0, #0
 8016d56:	2100      	movs	r1, #0
 8016d58:	f1b8 0f00 	cmp.w	r8, #0
 8016d5c:	da09      	bge.n	8016d72 <__kernel_rem_pio2+0x5b2>
 8016d5e:	f1b9 0f00 	cmp.w	r9, #0
 8016d62:	d002      	beq.n	8016d6a <__kernel_rem_pio2+0x5aa>
 8016d64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016d68:	4619      	mov	r1, r3
 8016d6a:	9b04      	ldr	r3, [sp, #16]
 8016d6c:	e9c3 0100 	strd	r0, r1, [r3]
 8016d70:	e793      	b.n	8016c9a <__kernel_rem_pio2+0x4da>
 8016d72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8016d76:	f7e9 fa81 	bl	800027c <__adddf3>
 8016d7a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8016d7e:	e7eb      	b.n	8016d58 <__kernel_rem_pio2+0x598>
 8016d80:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8016d84:	f7e9 fa7a 	bl	800027c <__adddf3>
 8016d88:	3c01      	subs	r4, #1
 8016d8a:	e7c1      	b.n	8016d10 <__kernel_rem_pio2+0x550>
 8016d8c:	4602      	mov	r2, r0
 8016d8e:	460b      	mov	r3, r1
 8016d90:	e7c6      	b.n	8016d20 <__kernel_rem_pio2+0x560>
 8016d92:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8016d96:	f7e9 fa71 	bl	800027c <__adddf3>
 8016d9a:	3401      	adds	r4, #1
 8016d9c:	e7cb      	b.n	8016d36 <__kernel_rem_pio2+0x576>
 8016d9e:	ed35 7b02 	vldmdb	r5!, {d7}
 8016da2:	ed8d 7b00 	vstr	d7, [sp]
 8016da6:	ed95 7b02 	vldr	d7, [r5, #8]
 8016daa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016dae:	ec53 2b17 	vmov	r2, r3, d7
 8016db2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016db6:	f7e9 fa61 	bl	800027c <__adddf3>
 8016dba:	4602      	mov	r2, r0
 8016dbc:	460b      	mov	r3, r1
 8016dbe:	4606      	mov	r6, r0
 8016dc0:	460f      	mov	r7, r1
 8016dc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016dc6:	f7e9 fa57 	bl	8000278 <__aeabi_dsub>
 8016dca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016dce:	f7e9 fa55 	bl	800027c <__adddf3>
 8016dd2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8016dd6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8016dda:	e9c5 6700 	strd	r6, r7, [r5]
 8016dde:	e771      	b.n	8016cc4 <__kernel_rem_pio2+0x504>
 8016de0:	ed34 7b02 	vldmdb	r4!, {d7}
 8016de4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8016de8:	ec51 0b17 	vmov	r0, r1, d7
 8016dec:	4652      	mov	r2, sl
 8016dee:	465b      	mov	r3, fp
 8016df0:	ed8d 7b00 	vstr	d7, [sp]
 8016df4:	f7e9 fa42 	bl	800027c <__adddf3>
 8016df8:	4602      	mov	r2, r0
 8016dfa:	460b      	mov	r3, r1
 8016dfc:	4606      	mov	r6, r0
 8016dfe:	460f      	mov	r7, r1
 8016e00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e04:	f7e9 fa38 	bl	8000278 <__aeabi_dsub>
 8016e08:	4652      	mov	r2, sl
 8016e0a:	465b      	mov	r3, fp
 8016e0c:	f7e9 fa36 	bl	800027c <__adddf3>
 8016e10:	3d01      	subs	r5, #1
 8016e12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016e16:	e9c4 6700 	strd	r6, r7, [r4]
 8016e1a:	e757      	b.n	8016ccc <__kernel_rem_pio2+0x50c>
 8016e1c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8016e20:	f7e9 fa2c 	bl	800027c <__adddf3>
 8016e24:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8016e28:	e758      	b.n	8016cdc <__kernel_rem_pio2+0x51c>
 8016e2a:	bf00      	nop
 8016e2c:	f3af 8000 	nop.w
	...
 8016e38:	41700000 	.word	0x41700000
 8016e3c:	3e700000 	.word	0x3e700000
 8016e40:	9b04      	ldr	r3, [sp, #16]
 8016e42:	9a04      	ldr	r2, [sp, #16]
 8016e44:	601d      	str	r5, [r3, #0]
 8016e46:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8016e4a:	605c      	str	r4, [r3, #4]
 8016e4c:	609f      	str	r7, [r3, #8]
 8016e4e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8016e52:	60d3      	str	r3, [r2, #12]
 8016e54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016e58:	6110      	str	r0, [r2, #16]
 8016e5a:	6153      	str	r3, [r2, #20]
 8016e5c:	e71d      	b.n	8016c9a <__kernel_rem_pio2+0x4da>
 8016e5e:	bf00      	nop

08016e60 <scalbn>:
 8016e60:	b570      	push	{r4, r5, r6, lr}
 8016e62:	ec55 4b10 	vmov	r4, r5, d0
 8016e66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8016e6a:	4606      	mov	r6, r0
 8016e6c:	462b      	mov	r3, r5
 8016e6e:	b991      	cbnz	r1, 8016e96 <scalbn+0x36>
 8016e70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016e74:	4323      	orrs	r3, r4
 8016e76:	d03b      	beq.n	8016ef0 <scalbn+0x90>
 8016e78:	4b33      	ldr	r3, [pc, #204]	@ (8016f48 <scalbn+0xe8>)
 8016e7a:	4620      	mov	r0, r4
 8016e7c:	4629      	mov	r1, r5
 8016e7e:	2200      	movs	r2, #0
 8016e80:	f7e9 fbb2 	bl	80005e8 <__aeabi_dmul>
 8016e84:	4b31      	ldr	r3, [pc, #196]	@ (8016f4c <scalbn+0xec>)
 8016e86:	429e      	cmp	r6, r3
 8016e88:	4604      	mov	r4, r0
 8016e8a:	460d      	mov	r5, r1
 8016e8c:	da0f      	bge.n	8016eae <scalbn+0x4e>
 8016e8e:	a326      	add	r3, pc, #152	@ (adr r3, 8016f28 <scalbn+0xc8>)
 8016e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e94:	e01e      	b.n	8016ed4 <scalbn+0x74>
 8016e96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8016e9a:	4291      	cmp	r1, r2
 8016e9c:	d10b      	bne.n	8016eb6 <scalbn+0x56>
 8016e9e:	4622      	mov	r2, r4
 8016ea0:	4620      	mov	r0, r4
 8016ea2:	4629      	mov	r1, r5
 8016ea4:	f7e9 f9ea 	bl	800027c <__adddf3>
 8016ea8:	4604      	mov	r4, r0
 8016eaa:	460d      	mov	r5, r1
 8016eac:	e020      	b.n	8016ef0 <scalbn+0x90>
 8016eae:	460b      	mov	r3, r1
 8016eb0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016eb4:	3936      	subs	r1, #54	@ 0x36
 8016eb6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016eba:	4296      	cmp	r6, r2
 8016ebc:	dd0d      	ble.n	8016eda <scalbn+0x7a>
 8016ebe:	2d00      	cmp	r5, #0
 8016ec0:	a11b      	add	r1, pc, #108	@ (adr r1, 8016f30 <scalbn+0xd0>)
 8016ec2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ec6:	da02      	bge.n	8016ece <scalbn+0x6e>
 8016ec8:	a11b      	add	r1, pc, #108	@ (adr r1, 8016f38 <scalbn+0xd8>)
 8016eca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ece:	a318      	add	r3, pc, #96	@ (adr r3, 8016f30 <scalbn+0xd0>)
 8016ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ed4:	f7e9 fb88 	bl	80005e8 <__aeabi_dmul>
 8016ed8:	e7e6      	b.n	8016ea8 <scalbn+0x48>
 8016eda:	1872      	adds	r2, r6, r1
 8016edc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8016ee0:	428a      	cmp	r2, r1
 8016ee2:	dcec      	bgt.n	8016ebe <scalbn+0x5e>
 8016ee4:	2a00      	cmp	r2, #0
 8016ee6:	dd06      	ble.n	8016ef6 <scalbn+0x96>
 8016ee8:	f36f 531e 	bfc	r3, #20, #11
 8016eec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016ef0:	ec45 4b10 	vmov	d0, r4, r5
 8016ef4:	bd70      	pop	{r4, r5, r6, pc}
 8016ef6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8016efa:	da08      	bge.n	8016f0e <scalbn+0xae>
 8016efc:	2d00      	cmp	r5, #0
 8016efe:	a10a      	add	r1, pc, #40	@ (adr r1, 8016f28 <scalbn+0xc8>)
 8016f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f04:	dac3      	bge.n	8016e8e <scalbn+0x2e>
 8016f06:	a10e      	add	r1, pc, #56	@ (adr r1, 8016f40 <scalbn+0xe0>)
 8016f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f0c:	e7bf      	b.n	8016e8e <scalbn+0x2e>
 8016f0e:	3236      	adds	r2, #54	@ 0x36
 8016f10:	f36f 531e 	bfc	r3, #20, #11
 8016f14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016f18:	4620      	mov	r0, r4
 8016f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8016f50 <scalbn+0xf0>)
 8016f1c:	4629      	mov	r1, r5
 8016f1e:	2200      	movs	r2, #0
 8016f20:	e7d8      	b.n	8016ed4 <scalbn+0x74>
 8016f22:	bf00      	nop
 8016f24:	f3af 8000 	nop.w
 8016f28:	c2f8f359 	.word	0xc2f8f359
 8016f2c:	01a56e1f 	.word	0x01a56e1f
 8016f30:	8800759c 	.word	0x8800759c
 8016f34:	7e37e43c 	.word	0x7e37e43c
 8016f38:	8800759c 	.word	0x8800759c
 8016f3c:	fe37e43c 	.word	0xfe37e43c
 8016f40:	c2f8f359 	.word	0xc2f8f359
 8016f44:	81a56e1f 	.word	0x81a56e1f
 8016f48:	43500000 	.word	0x43500000
 8016f4c:	ffff3cb0 	.word	0xffff3cb0
 8016f50:	3c900000 	.word	0x3c900000
 8016f54:	00000000 	.word	0x00000000

08016f58 <floor>:
 8016f58:	ec51 0b10 	vmov	r0, r1, d0
 8016f5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f64:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8016f68:	2e13      	cmp	r6, #19
 8016f6a:	460c      	mov	r4, r1
 8016f6c:	4605      	mov	r5, r0
 8016f6e:	4680      	mov	r8, r0
 8016f70:	dc34      	bgt.n	8016fdc <floor+0x84>
 8016f72:	2e00      	cmp	r6, #0
 8016f74:	da17      	bge.n	8016fa6 <floor+0x4e>
 8016f76:	a332      	add	r3, pc, #200	@ (adr r3, 8017040 <floor+0xe8>)
 8016f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f7c:	f7e9 f97e 	bl	800027c <__adddf3>
 8016f80:	2200      	movs	r2, #0
 8016f82:	2300      	movs	r3, #0
 8016f84:	f7e9 fdc0 	bl	8000b08 <__aeabi_dcmpgt>
 8016f88:	b150      	cbz	r0, 8016fa0 <floor+0x48>
 8016f8a:	2c00      	cmp	r4, #0
 8016f8c:	da55      	bge.n	801703a <floor+0xe2>
 8016f8e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8016f92:	432c      	orrs	r4, r5
 8016f94:	2500      	movs	r5, #0
 8016f96:	42ac      	cmp	r4, r5
 8016f98:	4c2b      	ldr	r4, [pc, #172]	@ (8017048 <floor+0xf0>)
 8016f9a:	bf08      	it	eq
 8016f9c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8016fa0:	4621      	mov	r1, r4
 8016fa2:	4628      	mov	r0, r5
 8016fa4:	e023      	b.n	8016fee <floor+0x96>
 8016fa6:	4f29      	ldr	r7, [pc, #164]	@ (801704c <floor+0xf4>)
 8016fa8:	4137      	asrs	r7, r6
 8016faa:	ea01 0307 	and.w	r3, r1, r7
 8016fae:	4303      	orrs	r3, r0
 8016fb0:	d01d      	beq.n	8016fee <floor+0x96>
 8016fb2:	a323      	add	r3, pc, #140	@ (adr r3, 8017040 <floor+0xe8>)
 8016fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fb8:	f7e9 f960 	bl	800027c <__adddf3>
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	f7e9 fda2 	bl	8000b08 <__aeabi_dcmpgt>
 8016fc4:	2800      	cmp	r0, #0
 8016fc6:	d0eb      	beq.n	8016fa0 <floor+0x48>
 8016fc8:	2c00      	cmp	r4, #0
 8016fca:	bfbe      	ittt	lt
 8016fcc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8016fd0:	4133      	asrlt	r3, r6
 8016fd2:	18e4      	addlt	r4, r4, r3
 8016fd4:	ea24 0407 	bic.w	r4, r4, r7
 8016fd8:	2500      	movs	r5, #0
 8016fda:	e7e1      	b.n	8016fa0 <floor+0x48>
 8016fdc:	2e33      	cmp	r6, #51	@ 0x33
 8016fde:	dd0a      	ble.n	8016ff6 <floor+0x9e>
 8016fe0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8016fe4:	d103      	bne.n	8016fee <floor+0x96>
 8016fe6:	4602      	mov	r2, r0
 8016fe8:	460b      	mov	r3, r1
 8016fea:	f7e9 f947 	bl	800027c <__adddf3>
 8016fee:	ec41 0b10 	vmov	d0, r0, r1
 8016ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ff6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8016ffa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016ffe:	40df      	lsrs	r7, r3
 8017000:	4207      	tst	r7, r0
 8017002:	d0f4      	beq.n	8016fee <floor+0x96>
 8017004:	a30e      	add	r3, pc, #56	@ (adr r3, 8017040 <floor+0xe8>)
 8017006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801700a:	f7e9 f937 	bl	800027c <__adddf3>
 801700e:	2200      	movs	r2, #0
 8017010:	2300      	movs	r3, #0
 8017012:	f7e9 fd79 	bl	8000b08 <__aeabi_dcmpgt>
 8017016:	2800      	cmp	r0, #0
 8017018:	d0c2      	beq.n	8016fa0 <floor+0x48>
 801701a:	2c00      	cmp	r4, #0
 801701c:	da0a      	bge.n	8017034 <floor+0xdc>
 801701e:	2e14      	cmp	r6, #20
 8017020:	d101      	bne.n	8017026 <floor+0xce>
 8017022:	3401      	adds	r4, #1
 8017024:	e006      	b.n	8017034 <floor+0xdc>
 8017026:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801702a:	2301      	movs	r3, #1
 801702c:	40b3      	lsls	r3, r6
 801702e:	441d      	add	r5, r3
 8017030:	4545      	cmp	r5, r8
 8017032:	d3f6      	bcc.n	8017022 <floor+0xca>
 8017034:	ea25 0507 	bic.w	r5, r5, r7
 8017038:	e7b2      	b.n	8016fa0 <floor+0x48>
 801703a:	2500      	movs	r5, #0
 801703c:	462c      	mov	r4, r5
 801703e:	e7af      	b.n	8016fa0 <floor+0x48>
 8017040:	8800759c 	.word	0x8800759c
 8017044:	7e37e43c 	.word	0x7e37e43c
 8017048:	bff00000 	.word	0xbff00000
 801704c:	000fffff 	.word	0x000fffff

08017050 <_init>:
 8017050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017052:	bf00      	nop
 8017054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017056:	bc08      	pop	{r3}
 8017058:	469e      	mov	lr, r3
 801705a:	4770      	bx	lr

0801705c <_fini>:
 801705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801705e:	bf00      	nop
 8017060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017062:	bc08      	pop	{r3}
 8017064:	469e      	mov	lr, r3
 8017066:	4770      	bx	lr

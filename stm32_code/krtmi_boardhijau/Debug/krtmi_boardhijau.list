
krtmi_boardhijau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000159c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bcc  08015b58  08015b58  00016b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018724  08018724  0001a128  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018724  08018724  00019724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801872c  0801872c  0001a128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801872c  0801872c  0001972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018730  08018730  00019730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000128  20000000  08018734  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001a128  2**0
                  CONTENTS
 10 .bss          0000b3e4  20000128  20000128  0001a128  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000b50c  2000b50c  0001a128  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001a128  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029b1b  00000000  00000000  0001a158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006f73  00000000  00000000  00043c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002180  00000000  00000000  0004abe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001aaf  00000000  00000000  0004cd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033829  00000000  00000000  0004e817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003813c  00000000  00000000  00082040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6956  00000000  00000000  000ba17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b0ad2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000093d0  00000000  00000000  001b0b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  001b9ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000128 	.word	0x20000128
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015b40 	.word	0x08015b40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000012c 	.word	0x2000012c
 80001cc:	08015b40 	.word	0x08015b40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b988 	b.w	8000e24 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	468e      	mov	lr, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	4688      	mov	r8, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d962      	bls.n	8000c08 <__udivmoddi4+0xdc>
 8000b42:	fab2 f682 	clz	r6, r2
 8000b46:	b14e      	cbz	r6, 8000b5c <__udivmoddi4+0x30>
 8000b48:	f1c6 0320 	rsb	r3, r6, #32
 8000b4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	40b7      	lsls	r7, r6
 8000b56:	ea43 0808 	orr.w	r8, r3, r8
 8000b5a:	40b4      	lsls	r4, r6
 8000b5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b68:	0c23      	lsrs	r3, r4, #16
 8000b6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b72:	fb01 f20c 	mul.w	r2, r1, ip
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b80:	f080 80ea 	bcs.w	8000d58 <__udivmoddi4+0x22c>
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f240 80e7 	bls.w	8000d58 <__udivmoddi4+0x22c>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	443b      	add	r3, r7
 8000b8e:	1a9a      	subs	r2, r3, r2
 8000b90:	b2a3      	uxth	r3, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba2:	459c      	cmp	ip, r3
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x8e>
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bac:	f080 80d6 	bcs.w	8000d5c <__udivmoddi4+0x230>
 8000bb0:	459c      	cmp	ip, r3
 8000bb2:	f240 80d3 	bls.w	8000d5c <__udivmoddi4+0x230>
 8000bb6:	443b      	add	r3, r7
 8000bb8:	3802      	subs	r0, #2
 8000bba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bbe:	eba3 030c 	sub.w	r3, r3, ip
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11d      	cbz	r5, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40f3      	lsrs	r3, r6
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e9c5 3200 	strd	r3, r2, [r5]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d905      	bls.n	8000be2 <__udivmoddi4+0xb6>
 8000bd6:	b10d      	cbz	r5, 8000bdc <__udivmoddi4+0xb0>
 8000bd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4608      	mov	r0, r1
 8000be0:	e7f5      	b.n	8000bce <__udivmoddi4+0xa2>
 8000be2:	fab3 f183 	clz	r1, r3
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d146      	bne.n	8000c78 <__udivmoddi4+0x14c>
 8000bea:	4573      	cmp	r3, lr
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xc8>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 8105 	bhi.w	8000dfe <__udivmoddi4+0x2d2>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	4690      	mov	r8, r2
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0e5      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c02:	e9c5 4800 	strd	r4, r8, [r5]
 8000c06:	e7e2      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f000 8090 	beq.w	8000d2e <__udivmoddi4+0x202>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	f040 80a4 	bne.w	8000d60 <__udivmoddi4+0x234>
 8000c18:	1a8a      	subs	r2, r1, r2
 8000c1a:	0c03      	lsrs	r3, r0, #16
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	b280      	uxth	r0, r0
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c32:	fb04 f20c 	mul.w	r2, r4, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x11e>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x11c>
 8000c42:	429a      	cmp	r2, r3
 8000c44:	f200 80e0 	bhi.w	8000e08 <__udivmoddi4+0x2dc>
 8000c48:	46c4      	mov	ip, r8
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c58:	fb02 f404 	mul.w	r4, r2, r4
 8000c5c:	429c      	cmp	r4, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x144>
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x142>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f200 80ca 	bhi.w	8000e02 <__udivmoddi4+0x2d6>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	1b1b      	subs	r3, r3, r4
 8000c72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c76:	e7a5      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c78:	f1c1 0620 	rsb	r6, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c82:	431f      	orrs	r7, r3
 8000c84:	fa0e f401 	lsl.w	r4, lr, r1
 8000c88:	fa20 f306 	lsr.w	r3, r0, r6
 8000c8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	fa1f fc87 	uxth.w	ip, r7
 8000c9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ca8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x1a0>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cbe:	f080 809c 	bcs.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8099 	bls.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	fa1f fe83 	uxth.w	lr, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ce4:	45a4      	cmp	ip, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1ce>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cee:	f080 8082 	bcs.w	8000df6 <__udivmoddi4+0x2ca>
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d97f      	bls.n	8000df6 <__udivmoddi4+0x2ca>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cfe:	eba4 040c 	sub.w	r4, r4, ip
 8000d02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d06:	4564      	cmp	r4, ip
 8000d08:	4673      	mov	r3, lr
 8000d0a:	46e1      	mov	r9, ip
 8000d0c:	d362      	bcc.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d0e:	d05f      	beq.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d10:	b15d      	cbz	r5, 8000d2a <__udivmoddi4+0x1fe>
 8000d12:	ebb8 0203 	subs.w	r2, r8, r3
 8000d16:	eb64 0409 	sbc.w	r4, r4, r9
 8000d1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d22:	431e      	orrs	r6, r3
 8000d24:	40cc      	lsrs	r4, r1
 8000d26:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e74f      	b.n	8000bce <__udivmoddi4+0xa2>
 8000d2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d32:	0c01      	lsrs	r1, r0, #16
 8000d34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d38:	b280      	uxth	r0, r0
 8000d3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4638      	mov	r0, r7
 8000d42:	463c      	mov	r4, r7
 8000d44:	46b8      	mov	r8, r7
 8000d46:	46be      	mov	lr, r7
 8000d48:	2620      	movs	r6, #32
 8000d4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d4e:	eba2 0208 	sub.w	r2, r2, r8
 8000d52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d56:	e766      	b.n	8000c26 <__udivmoddi4+0xfa>
 8000d58:	4601      	mov	r1, r0
 8000d5a:	e718      	b.n	8000b8e <__udivmoddi4+0x62>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	e72c      	b.n	8000bba <__udivmoddi4+0x8e>
 8000d60:	f1c6 0220 	rsb	r2, r6, #32
 8000d64:	fa2e f302 	lsr.w	r3, lr, r2
 8000d68:	40b7      	lsls	r7, r6
 8000d6a:	40b1      	lsls	r1, r6
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d74:	430a      	orrs	r2, r1
 8000d76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d7a:	b2bc      	uxth	r4, r7
 8000d7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb08 f904 	mul.w	r9, r8, r4
 8000d8a:	40b0      	lsls	r0, r6
 8000d8c:	4589      	cmp	r9, r1
 8000d8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d92:	b280      	uxth	r0, r0
 8000d94:	d93e      	bls.n	8000e14 <__udivmoddi4+0x2e8>
 8000d96:	1879      	adds	r1, r7, r1
 8000d98:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d9c:	d201      	bcs.n	8000da2 <__udivmoddi4+0x276>
 8000d9e:	4589      	cmp	r9, r1
 8000da0:	d81f      	bhi.n	8000de2 <__udivmoddi4+0x2b6>
 8000da2:	eba1 0109 	sub.w	r1, r1, r9
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fb09 f804 	mul.w	r8, r9, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	b292      	uxth	r2, r2
 8000db4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db8:	4542      	cmp	r2, r8
 8000dba:	d229      	bcs.n	8000e10 <__udivmoddi4+0x2e4>
 8000dbc:	18ba      	adds	r2, r7, r2
 8000dbe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dc2:	d2c4      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc4:	4542      	cmp	r2, r8
 8000dc6:	d2c2      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dcc:	443a      	add	r2, r7
 8000dce:	e7be      	b.n	8000d4e <__udivmoddi4+0x222>
 8000dd0:	45f0      	cmp	r8, lr
 8000dd2:	d29d      	bcs.n	8000d10 <__udivmoddi4+0x1e4>
 8000dd4:	ebbe 0302 	subs.w	r3, lr, r2
 8000dd8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ddc:	3801      	subs	r0, #1
 8000dde:	46e1      	mov	r9, ip
 8000de0:	e796      	b.n	8000d10 <__udivmoddi4+0x1e4>
 8000de2:	eba7 0909 	sub.w	r9, r7, r9
 8000de6:	4449      	add	r1, r9
 8000de8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df0:	fb09 f804 	mul.w	r8, r9, r4
 8000df4:	e7db      	b.n	8000dae <__udivmoddi4+0x282>
 8000df6:	4673      	mov	r3, lr
 8000df8:	e77f      	b.n	8000cfa <__udivmoddi4+0x1ce>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	e766      	b.n	8000ccc <__udivmoddi4+0x1a0>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e6fd      	b.n	8000bfe <__udivmoddi4+0xd2>
 8000e02:	443b      	add	r3, r7
 8000e04:	3a02      	subs	r2, #2
 8000e06:	e733      	b.n	8000c70 <__udivmoddi4+0x144>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	443b      	add	r3, r7
 8000e0e:	e71c      	b.n	8000c4a <__udivmoddi4+0x11e>
 8000e10:	4649      	mov	r1, r9
 8000e12:	e79c      	b.n	8000d4e <__udivmoddi4+0x222>
 8000e14:	eba1 0109 	sub.w	r1, r1, r9
 8000e18:	46c4      	mov	ip, r8
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fb09 f804 	mul.w	r8, r9, r4
 8000e22:	e7c4      	b.n	8000dae <__udivmoddi4+0x282>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2e:	463b      	mov	r3, r7
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ec0 <MX_ADC1_Init+0x98>)
 8000e3c:	4a21      	ldr	r2, [pc, #132]	@ (8000ec4 <MX_ADC1_Init+0x9c>)
 8000e3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <MX_ADC1_Init+0x98>)
 8000e42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e48:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <MX_ADC1_Init+0x98>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <MX_ADC1_Init+0x98>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <MX_ADC1_Init+0x98>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <MX_ADC1_Init+0x98>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e62:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <MX_ADC1_Init+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e68:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <MX_ADC1_Init+0x98>)
 8000e6a:	4a17      	ldr	r2, [pc, #92]	@ (8000ec8 <MX_ADC1_Init+0xa0>)
 8000e6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <MX_ADC1_Init+0x98>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <MX_ADC1_Init+0x98>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <MX_ADC1_Init+0x98>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <MX_ADC1_Init+0x98>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e88:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <MX_ADC1_Init+0x98>)
 8000e8a:	f003 fc75 	bl	8004778 <HAL_ADC_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e94:	f001 f8f8 	bl	8002088 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <MX_ADC1_Init+0x98>)
 8000eaa:	f003 fca9 	bl	8004800 <HAL_ADC_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000eb4:	f001 f8e8 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000144 	.word	0x20000144
 8000ec4:	40012000 	.word	0x40012000
 8000ec8:	0f000001 	.word	0x0f000001

08000ecc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	@ 0x30
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a31      	ldr	r2, [pc, #196]	@ (8000fb0 <HAL_ADC_MspInit+0xe4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d15b      	bne.n	8000fa6 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	4b30      	ldr	r3, [pc, #192]	@ (8000fb4 <HAL_ADC_MspInit+0xe8>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb4 <HAL_ADC_MspInit+0xe8>)
 8000ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000efe:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb4 <HAL_ADC_MspInit+0xe8>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f06:	61bb      	str	r3, [r7, #24]
 8000f08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	4b29      	ldr	r3, [pc, #164]	@ (8000fb4 <HAL_ADC_MspInit+0xe8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a28      	ldr	r2, [pc, #160]	@ (8000fb4 <HAL_ADC_MspInit+0xe8>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <HAL_ADC_MspInit+0xe8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <HAL_ADC_MspInit+0xe8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a21      	ldr	r2, [pc, #132]	@ (8000fb4 <HAL_ADC_MspInit+0xe8>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <HAL_ADC_MspInit+0xe8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <HAL_ADC_MspInit+0xe8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8000fb4 <HAL_ADC_MspInit+0xe8>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <HAL_ADC_MspInit+0xe8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000f5e:	230d      	movs	r3, #13
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f62:	2303      	movs	r3, #3
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4811      	ldr	r0, [pc, #68]	@ (8000fb8 <HAL_ADC_MspInit+0xec>)
 8000f72:	f005 fdb3 	bl	8006adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f76:	2330      	movs	r3, #48	@ 0x30
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	480c      	ldr	r0, [pc, #48]	@ (8000fbc <HAL_ADC_MspInit+0xf0>)
 8000f8a:	f005 fda7 	bl	8006adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f92:	2303      	movs	r3, #3
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4807      	ldr	r0, [pc, #28]	@ (8000fc0 <HAL_ADC_MspInit+0xf4>)
 8000fa2:	f005 fd9b 	bl	8006adc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	3730      	adds	r7, #48	@ 0x30
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40012000 	.word	0x40012000
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40020400 	.word	0x40020400

08000fc4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fc8:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <MX_CAN1_Init+0x60>)
 8000fca:	4a17      	ldr	r2, [pc, #92]	@ (8001028 <MX_CAN1_Init+0x64>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000fce:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <MX_CAN1_Init+0x60>)
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <MX_CAN1_Init+0x60>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fda:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <MX_CAN1_Init+0x60>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <MX_CAN1_Init+0x60>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <MX_CAN1_Init+0x60>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <MX_CAN1_Init+0x60>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <MX_CAN1_Init+0x60>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <MX_CAN1_Init+0x60>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <MX_CAN1_Init+0x60>)
 8001000:	2200      	movs	r2, #0
 8001002:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <MX_CAN1_Init+0x60>)
 8001006:	2200      	movs	r2, #0
 8001008:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <MX_CAN1_Init+0x60>)
 800100c:	2200      	movs	r2, #0
 800100e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	@ (8001024 <MX_CAN1_Init+0x60>)
 8001012:	f003 fe13 	bl	8004c3c <HAL_CAN_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800101c:	f001 f834 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	2000018c 	.word	0x2000018c
 8001028:	40006400 	.word	0x40006400

0800102c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	@ 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a19      	ldr	r2, [pc, #100]	@ (80010b0 <HAL_CAN_MspInit+0x84>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d12c      	bne.n	80010a8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <HAL_CAN_MspInit+0x88>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	4a17      	ldr	r2, [pc, #92]	@ (80010b4 <HAL_CAN_MspInit+0x88>)
 8001058:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800105c:	6413      	str	r3, [r2, #64]	@ 0x40
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <HAL_CAN_MspInit+0x88>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HAL_CAN_MspInit+0x88>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <HAL_CAN_MspInit+0x88>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <HAL_CAN_MspInit+0x88>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001086:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800108a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001098:	2309      	movs	r3, #9
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <HAL_CAN_MspInit+0x8c>)
 80010a4:	f005 fd1a 	bl	8006adc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80010a8:	bf00      	nop
 80010aa:	3728      	adds	r7, #40	@ 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40006400 	.word	0x40006400
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000

080010bc <Controller_Drift>:
 */

#include "controller.h"

int8_t Controller_Drift(int8_t value, int8_t max)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
	if(abs(value) < max)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	bfb8      	it	lt
 80010d4:	425b      	neglt	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010de:	429a      	cmp	r2, r3
 80010e0:	da01      	bge.n	80010e6 <Controller_Drift+0x2a>
	{
		return 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e00e      	b.n	8001104 <Controller_Drift+0x48>
	}
	else if(value > 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	dd05      	ble.n	80010fa <Controller_Drift+0x3e>
	{
		return value - max;
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	e004      	b.n	8001104 <Controller_Drift+0x48>
	}
	else
	{
		return value + max;
 80010fa:	79fa      	ldrb	r2, [r7, #7]
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	4413      	add	r3, r2
 8001100:	b2db      	uxtb	r3, r3
 8001102:	b25b      	sxtb	r3, r3
	}
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <map>:

int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	69b9      	ldr	r1, [r7, #24]
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	1a8a      	subs	r2, r1, r2
 800112a:	fb03 f202 	mul.w	r2, r3, r2
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1acb      	subs	r3, r1, r3
 8001134:	fb92 f2f3 	sdiv	r2, r2, r3
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	4413      	add	r3, r2
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b3f      	ldr	r3, [pc, #252]	@ (8001250 <MX_DMA_Init+0x108>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a3e      	ldr	r2, [pc, #248]	@ (8001250 <MX_DMA_Init+0x108>)
 8001158:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b3c      	ldr	r3, [pc, #240]	@ (8001250 <MX_DMA_Init+0x108>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	4b38      	ldr	r3, [pc, #224]	@ (8001250 <MX_DMA_Init+0x108>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a37      	ldr	r2, [pc, #220]	@ (8001250 <MX_DMA_Init+0x108>)
 8001174:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b35      	ldr	r3, [pc, #212]	@ (8001250 <MX_DMA_Init+0x108>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	200b      	movs	r0, #11
 800118c:	f003 ff2d 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001190:	200b      	movs	r0, #11
 8001192:	f003 ff46 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	200c      	movs	r0, #12
 800119c:	f003 ff25 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011a0:	200c      	movs	r0, #12
 80011a2:	f003 ff3e 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	200d      	movs	r0, #13
 80011ac:	f003 ff1d 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80011b0:	200d      	movs	r0, #13
 80011b2:	f003 ff36 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	200e      	movs	r0, #14
 80011bc:	f003 ff15 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80011c0:	200e      	movs	r0, #14
 80011c2:	f003 ff2e 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	200f      	movs	r0, #15
 80011cc:	f003 ff0d 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80011d0:	200f      	movs	r0, #15
 80011d2:	f003 ff26 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2010      	movs	r0, #16
 80011dc:	f003 ff05 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011e0:	2010      	movs	r0, #16
 80011e2:	f003 ff1e 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2011      	movs	r0, #17
 80011ec:	f003 fefd 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80011f0:	2011      	movs	r0, #17
 80011f2:	f003 ff16 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	202f      	movs	r0, #47	@ 0x2f
 80011fc:	f003 fef5 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001200:	202f      	movs	r0, #47	@ 0x2f
 8001202:	f003 ff0e 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2039      	movs	r0, #57	@ 0x39
 800120c:	f003 feed 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001210:	2039      	movs	r0, #57	@ 0x39
 8001212:	f003 ff06 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	203a      	movs	r0, #58	@ 0x3a
 800121c:	f003 fee5 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001220:	203a      	movs	r0, #58	@ 0x3a
 8001222:	f003 fefe 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2045      	movs	r0, #69	@ 0x45
 800122c:	f003 fedd 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001230:	2045      	movs	r0, #69	@ 0x45
 8001232:	f003 fef6 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2046      	movs	r0, #70	@ 0x46
 800123c:	f003 fed5 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001240:	2046      	movs	r0, #70	@ 0x46
 8001242:	f003 feee 	bl	8005022 <HAL_NVIC_EnableIRQ>

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800

08001254 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	@ 0x30
 8001258:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
 800126e:	4b50      	ldr	r3, [pc, #320]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a4f      	ldr	r2, [pc, #316]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 8001274:	f043 0310 	orr.w	r3, r3, #16
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b4d      	ldr	r3, [pc, #308]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	4b49      	ldr	r3, [pc, #292]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a48      	ldr	r2, [pc, #288]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b46      	ldr	r3, [pc, #280]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b42      	ldr	r3, [pc, #264]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a41      	ldr	r2, [pc, #260]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b3f      	ldr	r3, [pc, #252]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b3b      	ldr	r3, [pc, #236]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a3a      	ldr	r2, [pc, #232]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b38      	ldr	r3, [pc, #224]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b34      	ldr	r3, [pc, #208]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a33      	ldr	r2, [pc, #204]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b2d      	ldr	r3, [pc, #180]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a2c      	ldr	r2, [pc, #176]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <MX_GPIO_Init+0x15c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 8001312:	2200      	movs	r2, #0
 8001314:	f247 519f 	movw	r1, #30111	@ 0x759f
 8001318:	4826      	ldr	r0, [pc, #152]	@ (80013b4 <MX_GPIO_Init+0x160>)
 800131a:	f005 fd7b 	bl	8006e14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8001324:	4824      	ldr	r0, [pc, #144]	@ (80013b8 <MX_GPIO_Init+0x164>)
 8001326:	f005 fd75 	bl	8006e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 414d 	mov.w	r1, #52480	@ 0xcd00
 8001330:	4822      	ldr	r0, [pc, #136]	@ (80013bc <MX_GPIO_Init+0x168>)
 8001332:	f005 fd6f 	bl	8006e14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE7
                           PE8 PE10 PE12 PE13
                           PE14 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 8001336:	f247 539f 	movw	r3, #30111	@ 0x759f
 800133a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4819      	ldr	r0, [pc, #100]	@ (80013b4 <MX_GPIO_Init+0x160>)
 8001350:	f005 fbc4 	bl	8006adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001354:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	4812      	ldr	r0, [pc, #72]	@ (80013b8 <MX_GPIO_Init+0x164>)
 800136e:	f005 fbb5 	bl	8006adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 PD11 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8001372:	f44f 434d 	mov.w	r3, #52480	@ 0xcd00
 8001376:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	480c      	ldr	r0, [pc, #48]	@ (80013bc <MX_GPIO_Init+0x168>)
 800138c:	f005 fba6 	bl	8006adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8001390:	239b      	movs	r3, #155	@ 0x9b
 8001392:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001398:	2301      	movs	r3, #1
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	@ (80013bc <MX_GPIO_Init+0x168>)
 80013a4:	f005 fb9a 	bl	8006adc <HAL_GPIO_Init>

}
 80013a8:	bf00      	nop
 80013aa:	3730      	adds	r7, #48	@ 0x30
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020c00 	.word	0x40020c00

080013c0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013c6:	4a13      	ldr	r2, [pc, #76]	@ (8001414 <MX_I2C1_Init+0x54>)
 80013c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013cc:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <MX_I2C1_Init+0x58>)
 80013ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013fe:	f005 fd23 	bl	8006e48 <HAL_I2C_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001408:	f000 fe3e 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200001b4 	.word	0x200001b4
 8001414:	40005400 	.word	0x40005400
 8001418:	000186a0 	.word	0x000186a0

0800141c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <MX_I2C3_Init+0x50>)
 8001422:	4a13      	ldr	r2, [pc, #76]	@ (8001470 <MX_I2C3_Init+0x54>)
 8001424:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_I2C3_Init+0x50>)
 8001428:	4a12      	ldr	r2, [pc, #72]	@ (8001474 <MX_I2C3_Init+0x58>)
 800142a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_I2C3_Init+0x50>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_I2C3_Init+0x50>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <MX_I2C3_Init+0x50>)
 800143a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800143e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <MX_I2C3_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_I2C3_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144c:	4b07      	ldr	r3, [pc, #28]	@ (800146c <MX_I2C3_Init+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_I2C3_Init+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001458:	4804      	ldr	r0, [pc, #16]	@ (800146c <MX_I2C3_Init+0x50>)
 800145a:	f005 fcf5 	bl	8006e48 <HAL_I2C_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001464:	f000 fe10 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000208 	.word	0x20000208
 8001470:	40005c00 	.word	0x40005c00
 8001474:	000186a0 	.word	0x000186a0

08001478 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	@ 0x30
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a42      	ldr	r2, [pc, #264]	@ (80015a0 <HAL_I2C_MspInit+0x128>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d12c      	bne.n	80014f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	4b41      	ldr	r3, [pc, #260]	@ (80015a4 <HAL_I2C_MspInit+0x12c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a40      	ldr	r2, [pc, #256]	@ (80015a4 <HAL_I2C_MspInit+0x12c>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b3e      	ldr	r3, [pc, #248]	@ (80015a4 <HAL_I2C_MspInit+0x12c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014b6:	23c0      	movs	r3, #192	@ 0xc0
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ba:	2312      	movs	r3, #18
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c6:	2304      	movs	r3, #4
 80014c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	4835      	ldr	r0, [pc, #212]	@ (80015a8 <HAL_I2C_MspInit+0x130>)
 80014d2:	f005 fb03 	bl	8006adc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	4b32      	ldr	r3, [pc, #200]	@ (80015a4 <HAL_I2C_MspInit+0x12c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	4a31      	ldr	r2, [pc, #196]	@ (80015a4 <HAL_I2C_MspInit+0x12c>)
 80014e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e6:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <HAL_I2C_MspInit+0x12c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80014f2:	e050      	b.n	8001596 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a2c      	ldr	r2, [pc, #176]	@ (80015ac <HAL_I2C_MspInit+0x134>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d14b      	bne.n	8001596 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b28      	ldr	r3, [pc, #160]	@ (80015a4 <HAL_I2C_MspInit+0x12c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a27      	ldr	r2, [pc, #156]	@ (80015a4 <HAL_I2C_MspInit+0x12c>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b25      	ldr	r3, [pc, #148]	@ (80015a4 <HAL_I2C_MspInit+0x12c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b21      	ldr	r3, [pc, #132]	@ (80015a4 <HAL_I2C_MspInit+0x12c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a20      	ldr	r2, [pc, #128]	@ (80015a4 <HAL_I2C_MspInit+0x12c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <HAL_I2C_MspInit+0x12c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001536:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153c:	2312      	movs	r3, #18
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001548:	2304      	movs	r3, #4
 800154a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	4817      	ldr	r0, [pc, #92]	@ (80015b0 <HAL_I2C_MspInit+0x138>)
 8001554:	f005 fac2 	bl	8006adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001558:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800155c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155e:	2312      	movs	r3, #18
 8001560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800156a:	2304      	movs	r3, #4
 800156c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	480f      	ldr	r0, [pc, #60]	@ (80015b4 <HAL_I2C_MspInit+0x13c>)
 8001576:	f005 fab1 	bl	8006adc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <HAL_I2C_MspInit+0x12c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	4a08      	ldr	r2, [pc, #32]	@ (80015a4 <HAL_I2C_MspInit+0x12c>)
 8001584:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001588:	6413      	str	r3, [r2, #64]	@ 0x40
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <HAL_I2C_MspInit+0x12c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
}
 8001596:	bf00      	nop
 8001598:	3730      	adds	r7, #48	@ 0x30
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40005400 	.word	0x40005400
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020400 	.word	0x40020400
 80015ac:	40005c00 	.word	0x40005c00
 80015b0:	40020800 	.word	0x40020800
 80015b4:	40020000 	.word	0x40020000

080015b8 <Robot_Init>:
float yaw_adjust;
uint16_t UltraSonic[4];


void Robot_Init()
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af04      	add	r7, sp, #16
	Motor_Init(	&motorA,
 80015be:	2301      	movs	r3, #1
 80015c0:	9303      	str	r3, [sp, #12]
 80015c2:	2300      	movs	r3, #0
 80015c4:	9302      	str	r3, [sp, #8]
 80015c6:	4b58      	ldr	r3, [pc, #352]	@ (8001728 <Robot_Init+0x170>)
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	4b56      	ldr	r3, [pc, #344]	@ (800172c <Robot_Init+0x174>)
 80015d2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015d6:	4955      	ldr	r1, [pc, #340]	@ (800172c <Robot_Init+0x174>)
 80015d8:	4855      	ldr	r0, [pc, #340]	@ (8001730 <Robot_Init+0x178>)
 80015da:	f000 fd5b 	bl	8002094 <Motor_Init>
				GPIOC, GPIO_PIN_15,
				GPIOC, GPIO_PIN_13,
				&htim11, TIM_CHANNEL_1, 1);

	Motor_Init(	&motorB,
 80015de:	2300      	movs	r3, #0
 80015e0:	9303      	str	r3, [sp, #12]
 80015e2:	2300      	movs	r3, #0
 80015e4:	9302      	str	r3, [sp, #8]
 80015e6:	4b53      	ldr	r3, [pc, #332]	@ (8001734 <Robot_Init+0x17c>)
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	2301      	movs	r3, #1
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	4b52      	ldr	r3, [pc, #328]	@ (8001738 <Robot_Init+0x180>)
 80015f0:	2208      	movs	r2, #8
 80015f2:	4951      	ldr	r1, [pc, #324]	@ (8001738 <Robot_Init+0x180>)
 80015f4:	4851      	ldr	r0, [pc, #324]	@ (800173c <Robot_Init+0x184>)
 80015f6:	f000 fd4d 	bl	8002094 <Motor_Init>
				GPIOE, GPIO_PIN_3,
				GPIOE, GPIO_PIN_0,
				&htim10, TIM_CHANNEL_1, 0);

	Motor_Init(	&motorC,
 80015fa:	2301      	movs	r3, #1
 80015fc:	9303      	str	r3, [sp, #12]
 80015fe:	2300      	movs	r3, #0
 8001600:	9302      	str	r3, [sp, #8]
 8001602:	4b4f      	ldr	r3, [pc, #316]	@ (8001740 <Robot_Init+0x188>)
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	4b4d      	ldr	r3, [pc, #308]	@ (8001744 <Robot_Init+0x18c>)
 800160e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001612:	494c      	ldr	r1, [pc, #304]	@ (8001744 <Robot_Init+0x18c>)
 8001614:	484c      	ldr	r0, [pc, #304]	@ (8001748 <Robot_Init+0x190>)
 8001616:	f000 fd3d 	bl	8002094 <Motor_Init>
				GPIOD, GPIO_PIN_10,
				GPIOD, GPIO_PIN_8,
				&htim12, TIM_CHANNEL_1, 1);

	Encoder_Init(&encA, &htim3, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	494b      	ldr	r1, [pc, #300]	@ (800174c <Robot_Init+0x194>)
 800161e:	484c      	ldr	r0, [pc, #304]	@ (8001750 <Robot_Init+0x198>)
 8001620:	f000 fdd4 	bl	80021cc <Encoder_Init>
	Encoder_Init(&encB, &htim4, 1);
 8001624:	2201      	movs	r2, #1
 8001626:	494b      	ldr	r1, [pc, #300]	@ (8001754 <Robot_Init+0x19c>)
 8001628:	484b      	ldr	r0, [pc, #300]	@ (8001758 <Robot_Init+0x1a0>)
 800162a:	f000 fdcf 	bl	80021cc <Encoder_Init>
	Encoder_Init(&encC, &htim2, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	494a      	ldr	r1, [pc, #296]	@ (800175c <Robot_Init+0x1a4>)
 8001632:	484b      	ldr	r0, [pc, #300]	@ (8001760 <Robot_Init+0x1a8>)
 8001634:	f000 fdca 	bl	80021cc <Encoder_Init>

	kp = 45;
 8001638:	4b4a      	ldr	r3, [pc, #296]	@ (8001764 <Robot_Init+0x1ac>)
 800163a:	4a4b      	ldr	r2, [pc, #300]	@ (8001768 <Robot_Init+0x1b0>)
 800163c:	601a      	str	r2, [r3, #0]
	ki = 2.5;
 800163e:	4b4b      	ldr	r3, [pc, #300]	@ (800176c <Robot_Init+0x1b4>)
 8001640:	4a4b      	ldr	r2, [pc, #300]	@ (8001770 <Robot_Init+0x1b8>)
 8001642:	601a      	str	r2, [r3, #0]
	kd = 0;
 8001644:	4b4b      	ldr	r3, [pc, #300]	@ (8001774 <Robot_Init+0x1bc>)
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

    PID_Init(&PID_A, kp, ki, kd);
 800164c:	4b45      	ldr	r3, [pc, #276]	@ (8001764 <Robot_Init+0x1ac>)
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	4b46      	ldr	r3, [pc, #280]	@ (800176c <Robot_Init+0x1b4>)
 8001654:	ed93 7a00 	vldr	s14, [r3]
 8001658:	4b46      	ldr	r3, [pc, #280]	@ (8001774 <Robot_Init+0x1bc>)
 800165a:	edd3 6a00 	vldr	s13, [r3]
 800165e:	eeb0 1a66 	vmov.f32	s2, s13
 8001662:	eef0 0a47 	vmov.f32	s1, s14
 8001666:	eeb0 0a67 	vmov.f32	s0, s15
 800166a:	4843      	ldr	r0, [pc, #268]	@ (8001778 <Robot_Init+0x1c0>)
 800166c:	f000 fe8a 	bl	8002384 <PID_Init>
    PID_Init(&PID_B, kp, ki, kd);
 8001670:	4b3c      	ldr	r3, [pc, #240]	@ (8001764 <Robot_Init+0x1ac>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	4b3d      	ldr	r3, [pc, #244]	@ (800176c <Robot_Init+0x1b4>)
 8001678:	ed93 7a00 	vldr	s14, [r3]
 800167c:	4b3d      	ldr	r3, [pc, #244]	@ (8001774 <Robot_Init+0x1bc>)
 800167e:	edd3 6a00 	vldr	s13, [r3]
 8001682:	eeb0 1a66 	vmov.f32	s2, s13
 8001686:	eef0 0a47 	vmov.f32	s1, s14
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	483b      	ldr	r0, [pc, #236]	@ (800177c <Robot_Init+0x1c4>)
 8001690:	f000 fe78 	bl	8002384 <PID_Init>
    PID_Init(&PID_C, kp, ki, kd);
 8001694:	4b33      	ldr	r3, [pc, #204]	@ (8001764 <Robot_Init+0x1ac>)
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	4b34      	ldr	r3, [pc, #208]	@ (800176c <Robot_Init+0x1b4>)
 800169c:	ed93 7a00 	vldr	s14, [r3]
 80016a0:	4b34      	ldr	r3, [pc, #208]	@ (8001774 <Robot_Init+0x1bc>)
 80016a2:	edd3 6a00 	vldr	s13, [r3]
 80016a6:	eeb0 1a66 	vmov.f32	s2, s13
 80016aa:	eef0 0a47 	vmov.f32	s1, s14
 80016ae:	eeb0 0a67 	vmov.f32	s0, s15
 80016b2:	4833      	ldr	r0, [pc, #204]	@ (8001780 <Robot_Init+0x1c8>)
 80016b4:	f000 fe66 	bl	8002384 <PID_Init>
    PID_Init(&PID_VY, 0.65, 0, 0);
 80016b8:	ed9f 1a32 	vldr	s2, [pc, #200]	@ 8001784 <Robot_Init+0x1cc>
 80016bc:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8001784 <Robot_Init+0x1cc>
 80016c0:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8001788 <Robot_Init+0x1d0>
 80016c4:	4831      	ldr	r0, [pc, #196]	@ (800178c <Robot_Init+0x1d4>)
 80016c6:	f000 fe5d 	bl	8002384 <PID_Init>
    PID_Init(&PID_VW, 0.5, 0, 0);
 80016ca:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 8001784 <Robot_Init+0x1cc>
 80016ce:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8001784 <Robot_Init+0x1cc>
 80016d2:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80016d6:	482e      	ldr	r0, [pc, #184]	@ (8001790 <Robot_Init+0x1d8>)
 80016d8:	f000 fe54 	bl	8002384 <PID_Init>

    HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 80016dc:	2235      	movs	r2, #53	@ 0x35
 80016de:	492d      	ldr	r1, [pc, #180]	@ (8001794 <Robot_Init+0x1dc>)
 80016e0:	482d      	ldr	r0, [pc, #180]	@ (8001798 <Robot_Init+0x1e0>)
 80016e2:	f007 fa9d 	bl	8008c20 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
 80016e6:	2217      	movs	r2, #23
 80016e8:	492c      	ldr	r1, [pc, #176]	@ (800179c <Robot_Init+0x1e4>)
 80016ea:	482d      	ldr	r0, [pc, #180]	@ (80017a0 <Robot_Init+0x1e8>)
 80016ec:	f007 fa98 	bl	8008c20 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 80016f0:	222b      	movs	r2, #43	@ 0x2b
 80016f2:	492c      	ldr	r1, [pc, #176]	@ (80017a4 <Robot_Init+0x1ec>)
 80016f4:	482c      	ldr	r0, [pc, #176]	@ (80017a8 <Robot_Init+0x1f0>)
 80016f6:	f007 fa93 	bl	8008c20 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 80016fa:	2235      	movs	r2, #53	@ 0x35
 80016fc:	492b      	ldr	r1, [pc, #172]	@ (80017ac <Robot_Init+0x1f4>)
 80016fe:	482c      	ldr	r0, [pc, #176]	@ (80017b0 <Robot_Init+0x1f8>)
 8001700:	f007 fa8e 	bl	8008c20 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 8001704:	2217      	movs	r2, #23
 8001706:	492b      	ldr	r1, [pc, #172]	@ (80017b4 <Robot_Init+0x1fc>)
 8001708:	482b      	ldr	r0, [pc, #172]	@ (80017b8 <Robot_Init+0x200>)
 800170a:	f007 fa89 	bl	8008c20 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 800170e:	2207      	movs	r2, #7
 8001710:	492a      	ldr	r1, [pc, #168]	@ (80017bc <Robot_Init+0x204>)
 8001712:	482b      	ldr	r0, [pc, #172]	@ (80017c0 <Robot_Init+0x208>)
 8001714:	f007 fa84 	bl	8008c20 <HAL_UART_Receive_DMA>

	udpClient_connect();
 8001718:	f002 f802 	bl	8003720 <udpClient_connect>

	HAL_TIM_Base_Start_IT(&htim6);
 800171c:	4829      	ldr	r0, [pc, #164]	@ (80017c4 <Robot_Init+0x20c>)
 800171e:	f006 f9bf 	bl	8007aa0 <HAL_TIM_Base_Start_IT>
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000788 	.word	0x20000788
 800172c:	40020800 	.word	0x40020800
 8001730:	20000288 	.word	0x20000288
 8001734:	20000740 	.word	0x20000740
 8001738:	40021000 	.word	0x40021000
 800173c:	200002a4 	.word	0x200002a4
 8001740:	200007d0 	.word	0x200007d0
 8001744:	40020c00 	.word	0x40020c00
 8001748:	200002c0 	.word	0x200002c0
 800174c:	20000590 	.word	0x20000590
 8001750:	200002dc 	.word	0x200002dc
 8001754:	200005d8 	.word	0x200005d8
 8001758:	200002e4 	.word	0x200002e4
 800175c:	20000548 	.word	0x20000548
 8001760:	200002ec 	.word	0x200002ec
 8001764:	200003fc 	.word	0x200003fc
 8001768:	42340000 	.word	0x42340000
 800176c:	20000400 	.word	0x20000400
 8001770:	40200000 	.word	0x40200000
 8001774:	20000404 	.word	0x20000404
 8001778:	20000304 	.word	0x20000304
 800177c:	20000334 	.word	0x20000334
 8001780:	20000364 	.word	0x20000364
 8001784:	00000000 	.word	0x00000000
 8001788:	3f266666 	.word	0x3f266666
 800178c:	20000394 	.word	0x20000394
 8001790:	200003c4 	.word	0x200003c4
 8001794:	20000408 	.word	0x20000408
 8001798:	2000096c 	.word	0x2000096c
 800179c:	20000440 	.word	0x20000440
 80017a0:	200009b4 	.word	0x200009b4
 80017a4:	20000458 	.word	0x20000458
 80017a8:	200009fc 	.word	0x200009fc
 80017ac:	20000484 	.word	0x20000484
 80017b0:	200008dc 	.word	0x200008dc
 80017b4:	200004bc 	.word	0x200004bc
 80017b8:	20000924 	.word	0x20000924
 80017bc:	200004d4 	.word	0x200004d4
 80017c0:	20000a44 	.word	0x20000a44
 80017c4:	20000668 	.word	0x20000668

080017c8 <Robot_Motor>:

void Robot_Motor()
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
	static uint16_t timer = 0;

	if(timer >= 9)
 80017ce:	4b66      	ldr	r3, [pc, #408]	@ (8001968 <Robot_Motor+0x1a0>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	f240 80bd 	bls.w	8001952 <Robot_Motor+0x18a>
//
//		PID_Update(&PID_VY, 20, avg_distance, 5);
//
//		PID_Update(&PID_VW, UltraSonic[0], UltraSonic[1], 5);

		vx = 3;
 80017d8:	4b64      	ldr	r3, [pc, #400]	@ (800196c <Robot_Motor+0x1a4>)
 80017da:	2203      	movs	r2, #3
 80017dc:	801a      	strh	r2, [r3, #0]
		vy = 0;
 80017de:	4b64      	ldr	r3, [pc, #400]	@ (8001970 <Robot_Motor+0x1a8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	801a      	strh	r2, [r3, #0]
		vw = 0;
 80017e4:	4b63      	ldr	r3, [pc, #396]	@ (8001974 <Robot_Motor+0x1ac>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	801a      	strh	r2, [r3, #0]

		int16_t va = Kinematics_Triangle(MOTOR_A, vx, vy, vw);
 80017ea:	4b60      	ldr	r3, [pc, #384]	@ (800196c <Robot_Motor+0x1a4>)
 80017ec:	f9b3 1000 	ldrsh.w	r1, [r3]
 80017f0:	4b5f      	ldr	r3, [pc, #380]	@ (8001970 <Robot_Motor+0x1a8>)
 80017f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001974 <Robot_Motor+0x1ac>)
 80017f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fc:	2000      	movs	r0, #0
 80017fe:	f000 fd2b 	bl	8002258 <Kinematics_Triangle>
 8001802:	4603      	mov	r3, r0
 8001804:	80fb      	strh	r3, [r7, #6]
		int16_t vb = Kinematics_Triangle(MOTOR_B, vx, vy, vw);
 8001806:	4b59      	ldr	r3, [pc, #356]	@ (800196c <Robot_Motor+0x1a4>)
 8001808:	f9b3 1000 	ldrsh.w	r1, [r3]
 800180c:	4b58      	ldr	r3, [pc, #352]	@ (8001970 <Robot_Motor+0x1a8>)
 800180e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001812:	4b58      	ldr	r3, [pc, #352]	@ (8001974 <Robot_Motor+0x1ac>)
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	2001      	movs	r0, #1
 800181a:	f000 fd1d 	bl	8002258 <Kinematics_Triangle>
 800181e:	4603      	mov	r3, r0
 8001820:	80bb      	strh	r3, [r7, #4]
		int16_t vc = Kinematics_Triangle(MOTOR_C, vx, vy, vw);
 8001822:	4b52      	ldr	r3, [pc, #328]	@ (800196c <Robot_Motor+0x1a4>)
 8001824:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001828:	4b51      	ldr	r3, [pc, #324]	@ (8001970 <Robot_Motor+0x1a8>)
 800182a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800182e:	4b51      	ldr	r3, [pc, #324]	@ (8001974 <Robot_Motor+0x1ac>)
 8001830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001834:	2002      	movs	r0, #2
 8001836:	f000 fd0f 	bl	8002258 <Kinematics_Triangle>
 800183a:	4603      	mov	r3, r0
 800183c:	807b      	strh	r3, [r7, #2]
//		int16_t va = udp_rx.motor_a;
//		int16_t vb = udp_rx.motor_b;
//		int16_t vc = udp_rx.motor_c;


		Encoder_GetCount(&encA);
 800183e:	484e      	ldr	r0, [pc, #312]	@ (8001978 <Robot_Motor+0x1b0>)
 8001840:	f000 fcdb 	bl	80021fa <Encoder_GetCount>
		Encoder_GetCount(&encB);
 8001844:	484d      	ldr	r0, [pc, #308]	@ (800197c <Robot_Motor+0x1b4>)
 8001846:	f000 fcd8 	bl	80021fa <Encoder_GetCount>
		Encoder_GetCount(&encC);
 800184a:	484d      	ldr	r0, [pc, #308]	@ (8001980 <Robot_Motor+0x1b8>)
 800184c:	f000 fcd5 	bl	80021fa <Encoder_GetCount>

		/* Save UDP */
		udp_tx.enc_a = encA.count;
 8001850:	4b49      	ldr	r3, [pc, #292]	@ (8001978 <Robot_Motor+0x1b0>)
 8001852:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001856:	4b4b      	ldr	r3, [pc, #300]	@ (8001984 <Robot_Motor+0x1bc>)
 8001858:	801a      	strh	r2, [r3, #0]
		udp_tx.enc_b = encB.count;
 800185a:	4b48      	ldr	r3, [pc, #288]	@ (800197c <Robot_Motor+0x1b4>)
 800185c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001860:	4b48      	ldr	r3, [pc, #288]	@ (8001984 <Robot_Motor+0x1bc>)
 8001862:	805a      	strh	r2, [r3, #2]
		udp_tx.enc_c = encC.count;
 8001864:	4b46      	ldr	r3, [pc, #280]	@ (8001980 <Robot_Motor+0x1b8>)
 8001866:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800186a:	4b46      	ldr	r3, [pc, #280]	@ (8001984 <Robot_Motor+0x1bc>)
 800186c:	809a      	strh	r2, [r3, #4]

		Encoder_ResetCount(&encA);
 800186e:	4842      	ldr	r0, [pc, #264]	@ (8001978 <Robot_Motor+0x1b0>)
 8001870:	f000 fce3 	bl	800223a <Encoder_ResetCount>
		Encoder_ResetCount(&encB);
 8001874:	4841      	ldr	r0, [pc, #260]	@ (800197c <Robot_Motor+0x1b4>)
 8001876:	f000 fce0 	bl	800223a <Encoder_ResetCount>
		Encoder_ResetCount(&encC);
 800187a:	4841      	ldr	r0, [pc, #260]	@ (8001980 <Robot_Motor+0x1b8>)
 800187c:	f000 fcdd 	bl	800223a <Encoder_ResetCount>

		PID_Update(&PID_A, (float)va, (float)encA.count, 999);
 8001880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001884:	ee07 3a90 	vmov	s15, r3
 8001888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188c:	4b3a      	ldr	r3, [pc, #232]	@ (8001978 <Robot_Motor+0x1b0>)
 800188e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001892:	ee07 3a10 	vmov	s14, r3
 8001896:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800189a:	ed9f 1a3b 	vldr	s2, [pc, #236]	@ 8001988 <Robot_Motor+0x1c0>
 800189e:	eef0 0a47 	vmov.f32	s1, s14
 80018a2:	eeb0 0a67 	vmov.f32	s0, s15
 80018a6:	4839      	ldr	r0, [pc, #228]	@ (800198c <Robot_Motor+0x1c4>)
 80018a8:	f000 fda9 	bl	80023fe <PID_Update>
		PID_Update(&PID_B, (float)vb, (float)encB.count, 999);
 80018ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018b0:	ee07 3a90 	vmov	s15, r3
 80018b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b8:	4b30      	ldr	r3, [pc, #192]	@ (800197c <Robot_Motor+0x1b4>)
 80018ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018be:	ee07 3a10 	vmov	s14, r3
 80018c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018c6:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 8001988 <Robot_Motor+0x1c0>
 80018ca:	eef0 0a47 	vmov.f32	s1, s14
 80018ce:	eeb0 0a67 	vmov.f32	s0, s15
 80018d2:	482f      	ldr	r0, [pc, #188]	@ (8001990 <Robot_Motor+0x1c8>)
 80018d4:	f000 fd93 	bl	80023fe <PID_Update>
		PID_Update(&PID_C, (float)vc, (float)encC.count, 999);
 80018d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e4:	4b26      	ldr	r3, [pc, #152]	@ (8001980 <Robot_Motor+0x1b8>)
 80018e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018ea:	ee07 3a10 	vmov	s14, r3
 80018ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018f2:	ed9f 1a25 	vldr	s2, [pc, #148]	@ 8001988 <Robot_Motor+0x1c0>
 80018f6:	eef0 0a47 	vmov.f32	s1, s14
 80018fa:	eeb0 0a67 	vmov.f32	s0, s15
 80018fe:	4825      	ldr	r0, [pc, #148]	@ (8001994 <Robot_Motor+0x1cc>)
 8001900:	f000 fd7d 	bl	80023fe <PID_Update>

		Motor_Run(&motorA, (int16_t)PID_A.output);
 8001904:	4b21      	ldr	r3, [pc, #132]	@ (800198c <Robot_Motor+0x1c4>)
 8001906:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800190a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800190e:	ee17 3a90 	vmov	r3, s15
 8001912:	b21b      	sxth	r3, r3
 8001914:	4619      	mov	r1, r3
 8001916:	4820      	ldr	r0, [pc, #128]	@ (8001998 <Robot_Motor+0x1d0>)
 8001918:	f000 fbe6 	bl	80020e8 <Motor_Run>
		Motor_Run(&motorB, (int16_t)PID_B.output);
 800191c:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <Robot_Motor+0x1c8>)
 800191e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001926:	ee17 3a90 	vmov	r3, s15
 800192a:	b21b      	sxth	r3, r3
 800192c:	4619      	mov	r1, r3
 800192e:	481b      	ldr	r0, [pc, #108]	@ (800199c <Robot_Motor+0x1d4>)
 8001930:	f000 fbda 	bl	80020e8 <Motor_Run>
		Motor_Run(&motorC, (int16_t)PID_C.output);
 8001934:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <Robot_Motor+0x1cc>)
 8001936:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800193a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193e:	ee17 3a90 	vmov	r3, s15
 8001942:	b21b      	sxth	r3, r3
 8001944:	4619      	mov	r1, r3
 8001946:	4816      	ldr	r0, [pc, #88]	@ (80019a0 <Robot_Motor+0x1d8>)
 8001948:	f000 fbce 	bl	80020e8 <Motor_Run>

		timer = 0;
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <Robot_Motor+0x1a0>)
 800194e:	2200      	movs	r2, #0
 8001950:	801a      	strh	r2, [r3, #0]
	}

	timer++;
 8001952:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <Robot_Motor+0x1a0>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	b29a      	uxth	r2, r3
 800195a:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <Robot_Motor+0x1a0>)
 800195c:	801a      	strh	r2, [r3, #0]
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200004f4 	.word	0x200004f4
 800196c:	200003f4 	.word	0x200003f4
 8001970:	200003f6 	.word	0x200003f6
 8001974:	200003f8 	.word	0x200003f8
 8001978:	200002dc 	.word	0x200002dc
 800197c:	200002e4 	.word	0x200002e4
 8001980:	200002ec 	.word	0x200002ec
 8001984:	2000086c 	.word	0x2000086c
 8001988:	4479c000 	.word	0x4479c000
 800198c:	20000304 	.word	0x20000304
 8001990:	20000334 	.word	0x20000334
 8001994:	20000364 	.word	0x20000364
 8001998:	20000288 	.word	0x20000288
 800199c:	200002a4 	.word	0x200002a4
 80019a0:	200002c0 	.word	0x200002c0

080019a4 <Robot_LED_Blink>:

void Robot_LED_Blink()
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	static uint16_t timer = 0;
	static uint8_t state = 0;

	if(timer >= 99)
 80019a8:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <Robot_LED_Blink+0x44>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	2b62      	cmp	r3, #98	@ 0x62
 80019ae:	d913      	bls.n	80019d8 <Robot_LED_Blink+0x34>
	{
		state = !(state);
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <Robot_LED_Blink+0x48>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf0c      	ite	eq
 80019b8:	2301      	moveq	r3, #1
 80019ba:	2300      	movne	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <Robot_LED_Blink+0x48>)
 80019c2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, state);
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <Robot_LED_Blink+0x48>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	2102      	movs	r1, #2
 80019cc:	4808      	ldr	r0, [pc, #32]	@ (80019f0 <Robot_LED_Blink+0x4c>)
 80019ce:	f005 fa21 	bl	8006e14 <HAL_GPIO_WritePin>
		timer = 0;
 80019d2:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <Robot_LED_Blink+0x44>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	801a      	strh	r2, [r3, #0]
	}

	timer++;
 80019d8:	4b03      	ldr	r3, [pc, #12]	@ (80019e8 <Robot_LED_Blink+0x44>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	3301      	adds	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	4b01      	ldr	r3, [pc, #4]	@ (80019e8 <Robot_LED_Blink+0x44>)
 80019e2:	801a      	strh	r2, [r3, #0]
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200004f6 	.word	0x200004f6
 80019ec:	200004f8 	.word	0x200004f8
 80019f0:	40021000 	.word	0x40021000

080019f4 <Robot_Transmit_UART>:

void Robot_Transmit_UART()
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	memcpy(UART1_TX_BUFFER + 3, &cnt_tx, 2);
 80019f8:	4a09      	ldr	r2, [pc, #36]	@ (8001a20 <Robot_Transmit_UART+0x2c>)
 80019fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <Robot_Transmit_UART+0x30>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)UART1_TX_BUFFER, sizeof(UART1_TX_BUFFER));
 8001a00:	2235      	movs	r2, #53	@ 0x35
 8001a02:	4909      	ldr	r1, [pc, #36]	@ (8001a28 <Robot_Transmit_UART+0x34>)
 8001a04:	4809      	ldr	r0, [pc, #36]	@ (8001a2c <Robot_Transmit_UART+0x38>)
 8001a06:	f007 f88f 	bl	8008b28 <HAL_UART_Transmit_DMA>
	cnt_tx++;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <Robot_Transmit_UART+0x30>)
 8001a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	3301      	adds	r3, #1
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	b21a      	sxth	r2, r3
 8001a18:	4b02      	ldr	r3, [pc, #8]	@ (8001a24 <Robot_Transmit_UART+0x30>)
 8001a1a:	801a      	strh	r2, [r3, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000003 	.word	0x20000003
 8001a24:	200004de 	.word	0x200004de
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	2000096c 	.word	0x2000096c

08001a30 <Robot_Loop>:

void Robot_Loop()
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	Robot_Transmit_UART();
 8001a34:	f7ff ffde 	bl	80019f4 <Robot_Transmit_UART>

	Robot_Motor();
 8001a38:	f7ff fec6 	bl	80017c8 <Robot_Motor>

	Robot_LED_Blink();
 8001a3c:	f7ff ffb2 	bl	80019a4 <Robot_LED_Blink>
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

	if(htim == &htim6)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a07      	ldr	r2, [pc, #28]	@ (8001a6c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d107      	bne.n	8001a64 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		udp_cnt++;
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001a5e:	701a      	strb	r2, [r3, #0]

		Robot_Loop();
 8001a60:	f7ff ffe6 	bl	8001a30 <Robot_Loop>
	}
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000668 	.word	0x20000668
 8001a70:	2000025c 	.word	0x2000025c
 8001a74:	00000000 	.word	0x00000000

08001a78 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //--- VGT ARM
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a81      	ldr	r2, [pc, #516]	@ (8001c88 <HAL_UART_RxCpltCallback+0x210>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d109      	bne.n	8001a9c <HAL_UART_RxCpltCallback+0x24>
	{
		memcpy(&cnt_rx, UART1_RX_BUFFER + 3, 2);
 8001a88:	4b80      	ldr	r3, [pc, #512]	@ (8001c8c <HAL_UART_RxCpltCallback+0x214>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b80      	ldr	r3, [pc, #512]	@ (8001c90 <HAL_UART_RxCpltCallback+0x218>)
 8001a90:	801a      	strh	r2, [r3, #0]

		HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8001a92:	2235      	movs	r2, #53	@ 0x35
 8001a94:	497f      	ldr	r1, [pc, #508]	@ (8001c94 <HAL_UART_RxCpltCallback+0x21c>)
 8001a96:	487c      	ldr	r0, [pc, #496]	@ (8001c88 <HAL_UART_RxCpltCallback+0x210>)
 8001a98:	f007 f8c2 	bl	8008c20 <HAL_UART_Receive_DMA>
//		udp_tx.yaw_degree = yaw_degree;
//
//		HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
//	}

	if(huart == &huart3)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a7e      	ldr	r2, [pc, #504]	@ (8001c98 <HAL_UART_RxCpltCallback+0x220>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	f040 8083 	bne.w	8001bac <HAL_UART_RxCpltCallback+0x134>
	{
		memcpy((uint8_t*)&input + 4, UART3_RX_BUFFER + 3, sizeof(input) - 4);
 8001aa6:	4b7d      	ldr	r3, [pc, #500]	@ (8001c9c <HAL_UART_RxCpltCallback+0x224>)
 8001aa8:	497d      	ldr	r1, [pc, #500]	@ (8001ca0 <HAL_UART_RxCpltCallback+0x228>)
 8001aaa:	2224      	movs	r2, #36	@ 0x24
 8001aac:	4618      	mov	r0, r3
 8001aae:	f013 fa1a 	bl	8014ee6 <memcpy>

		input.lX = Controller_Drift(input.lX_raw, 12);
 8001ab2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001ab4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001ab8:	210c      	movs	r1, #12
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fafe 	bl	80010bc <Controller_Drift>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b77      	ldr	r3, [pc, #476]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001ac6:	709a      	strb	r2, [r3, #2]
		input.lY = Controller_Drift(input.lY_raw, 12);
 8001ac8:	4b76      	ldr	r3, [pc, #472]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001aca:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001ace:	210c      	movs	r1, #12
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff faf3 	bl	80010bc <Controller_Drift>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b72      	ldr	r3, [pc, #456]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001adc:	70da      	strb	r2, [r3, #3]
		input.rX = Controller_Drift(input.rX_raw, 12);
 8001ade:	4b71      	ldr	r3, [pc, #452]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001ae0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001ae4:	210c      	movs	r1, #12
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fae8 	bl	80010bc <Controller_Drift>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b6c      	ldr	r3, [pc, #432]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001af2:	701a      	strb	r2, [r3, #0]
		input.rY = Controller_Drift(input.rY_raw, 12);
 8001af4:	4b6b      	ldr	r3, [pc, #428]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001af6:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001afa:	210c      	movs	r1, #12
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fadd 	bl	80010bc <Controller_Drift>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b67      	ldr	r3, [pc, #412]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001b08:	705a      	strb	r2, [r3, #1]

		input.lX = map(input.lX, -128, 127, -30, 30);
 8001b0a:	4b66      	ldr	r3, [pc, #408]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001b0c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001b10:	4618      	mov	r0, r3
 8001b12:	231e      	movs	r3, #30
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	f06f 031d 	mvn.w	r3, #29
 8001b1a:	227f      	movs	r2, #127	@ 0x7f
 8001b1c:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001b20:	f7ff faf6 	bl	8001110 <map>
 8001b24:	4603      	mov	r3, r0
 8001b26:	b25a      	sxtb	r2, r3
 8001b28:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001b2a:	709a      	strb	r2, [r3, #2]
		input.lY = map(input.lY, -128, 127, -30, 30);
 8001b2c:	4b5d      	ldr	r3, [pc, #372]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001b2e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001b32:	4618      	mov	r0, r3
 8001b34:	231e      	movs	r3, #30
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	f06f 031d 	mvn.w	r3, #29
 8001b3c:	227f      	movs	r2, #127	@ 0x7f
 8001b3e:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001b42:	f7ff fae5 	bl	8001110 <map>
 8001b46:	4603      	mov	r3, r0
 8001b48:	b25a      	sxtb	r2, r3
 8001b4a:	4b56      	ldr	r3, [pc, #344]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001b4c:	70da      	strb	r2, [r3, #3]
		input.rX = map(input.rX, -128, 127, -15, 15);
 8001b4e:	4b55      	ldr	r3, [pc, #340]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001b50:	f993 3000 	ldrsb.w	r3, [r3]
 8001b54:	4618      	mov	r0, r3
 8001b56:	230f      	movs	r3, #15
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	f06f 030e 	mvn.w	r3, #14
 8001b5e:	227f      	movs	r2, #127	@ 0x7f
 8001b60:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001b64:	f7ff fad4 	bl	8001110 <map>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	b25a      	sxtb	r2, r3
 8001b6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001b6e:	701a      	strb	r2, [r3, #0]
		input.rY = map(input.rY, -128, 127, -30, 30);
 8001b70:	4b4c      	ldr	r3, [pc, #304]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001b72:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001b76:	4618      	mov	r0, r3
 8001b78:	231e      	movs	r3, #30
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	f06f 031d 	mvn.w	r3, #29
 8001b80:	227f      	movs	r2, #127	@ 0x7f
 8001b82:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001b86:	f7ff fac3 	bl	8001110 <map>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b25a      	sxtb	r2, r3
 8001b8e:	4b45      	ldr	r3, [pc, #276]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001b90:	705a      	strb	r2, [r3, #1]
//
//		vx = vx_controller;
//		vy = vy_controller;
//		vw = vw_controller;

		if(input.crs)
 8001b92:	4b44      	ldr	r3, [pc, #272]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x22c>)
 8001b94:	7b9b      	ldrb	r3, [r3, #14]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_UART_RxCpltCallback+0x12a>
		{
			yaw_adjust = yaw_degree;
 8001b9a:	4b43      	ldr	r3, [pc, #268]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x230>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a43      	ldr	r2, [pc, #268]	@ (8001cac <HAL_UART_RxCpltCallback+0x234>)
 8001ba0:	6013      	str	r3, [r2, #0]
		}


		HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 8001ba2:	222b      	movs	r2, #43	@ 0x2b
 8001ba4:	4942      	ldr	r1, [pc, #264]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x238>)
 8001ba6:	483c      	ldr	r0, [pc, #240]	@ (8001c98 <HAL_UART_RxCpltCallback+0x220>)
 8001ba8:	f007 f83a 	bl	8008c20 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart4)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a41      	ldr	r2, [pc, #260]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x23c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d116      	bne.n	8001be2 <HAL_UART_RxCpltCallback+0x16a>
	{
		memcpy(&encX.count, UART4_RX_BUFFER + 3, 2);
 8001bb4:	4b40      	ldr	r3, [pc, #256]	@ (8001cb8 <HAL_UART_RxCpltCallback+0x240>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	4b40      	ldr	r3, [pc, #256]	@ (8001cbc <HAL_UART_RxCpltCallback+0x244>)
 8001bbc:	809a      	strh	r2, [r3, #4]
		memcpy(&encY.count, UART4_RX_BUFFER + 5, 2);
 8001bbe:	4b40      	ldr	r3, [pc, #256]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x248>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x24c>)
 8001bc6:	809a      	strh	r2, [r3, #4]

		/* Save UDP */
		memcpy(&udp_tx.enc_x, &encX.count, 2);
 8001bc8:	4b3c      	ldr	r3, [pc, #240]	@ (8001cbc <HAL_UART_RxCpltCallback+0x244>)
 8001bca:	889a      	ldrh	r2, [r3, #4]
 8001bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x250>)
 8001bce:	80da      	strh	r2, [r3, #6]
		memcpy(&udp_tx.enc_y, &encY.count, 2);
 8001bd0:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x24c>)
 8001bd2:	889a      	ldrh	r2, [r3, #4]
 8001bd4:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x250>)
 8001bd6:	811a      	strh	r2, [r3, #8]

		HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 8001bd8:	2235      	movs	r2, #53	@ 0x35
 8001bda:	493c      	ldr	r1, [pc, #240]	@ (8001ccc <HAL_UART_RxCpltCallback+0x254>)
 8001bdc:	4835      	ldr	r0, [pc, #212]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x23c>)
 8001bde:	f007 f81f 	bl	8008c20 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart5)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a3a      	ldr	r2, [pc, #232]	@ (8001cd0 <HAL_UART_RxCpltCallback+0x258>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d111      	bne.n	8001c0e <HAL_UART_RxCpltCallback+0x196>
	{
		memcpy(UltraSonic, UART5_RX_BUFFER + 3, sizeof(UltraSonic));
 8001bea:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd4 <HAL_UART_RxCpltCallback+0x25c>)
 8001bec:	2208      	movs	r2, #8
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4839      	ldr	r0, [pc, #228]	@ (8001cd8 <HAL_UART_RxCpltCallback+0x260>)
 8001bf2:	f013 f978 	bl	8014ee6 <memcpy>

		/* Save UDP */
		memcpy(udp_tx.ultrasonic, UltraSonic, sizeof(udp_tx.ultrasonic));
 8001bf6:	4b34      	ldr	r3, [pc, #208]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x250>)
 8001bf8:	4a37      	ldr	r2, [pc, #220]	@ (8001cd8 <HAL_UART_RxCpltCallback+0x260>)
 8001bfa:	3314      	adds	r3, #20
 8001bfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c00:	e883 0003 	stmia.w	r3, {r0, r1}

		HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 8001c04:	2217      	movs	r2, #23
 8001c06:	4935      	ldr	r1, [pc, #212]	@ (8001cdc <HAL_UART_RxCpltCallback+0x264>)
 8001c08:	4831      	ldr	r0, [pc, #196]	@ (8001cd0 <HAL_UART_RxCpltCallback+0x258>)
 8001c0a:	f007 f809 	bl	8008c20 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart6)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a33      	ldr	r2, [pc, #204]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x268>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d130      	bne.n	8001c78 <HAL_UART_RxCpltCallback+0x200>
	{
		memcpy(&yaw_degree, UART6_RX_BUFFER + 3, 4);
 8001c16:	4b33      	ldr	r3, [pc, #204]	@ (8001ce4 <HAL_UART_RxCpltCallback+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x230>)
 8001c1e:	601a      	str	r2, [r3, #0]

		yaw_radian = (yaw_degree - yaw_adjust) * M_PI/180.0;
 8001c20:	4b21      	ldr	r3, [pc, #132]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x230>)
 8001c22:	ed93 7a00 	vldr	s14, [r3]
 8001c26:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_UART_RxCpltCallback+0x234>)
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c30:	ee17 0a90 	vmov	r0, s15
 8001c34:	f7fe fc80 	bl	8000538 <__aeabi_f2d>
 8001c38:	a311      	add	r3, pc, #68	@ (adr r3, 8001c80 <HAL_UART_RxCpltCallback+0x208>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7fe fcd3 	bl	80005e8 <__aeabi_dmul>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x270>)
 8001c50:	f7fe fdf4 	bl	800083c <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe fefe 	bl	8000a5c <__aeabi_d2f>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4a22      	ldr	r2, [pc, #136]	@ (8001cec <HAL_UART_RxCpltCallback+0x274>)
 8001c64:	6013      	str	r3, [r2, #0]

		/* Save UDP */
		udp_tx.yaw_degree = yaw_degree;
 8001c66:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x230>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a17      	ldr	r2, [pc, #92]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x250>)
 8001c6c:	6113      	str	r3, [r2, #16]

		HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 8001c6e:	2207      	movs	r2, #7
 8001c70:	491f      	ldr	r1, [pc, #124]	@ (8001cf0 <HAL_UART_RxCpltCallback+0x278>)
 8001c72:	481b      	ldr	r0, [pc, #108]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x268>)
 8001c74:	f006 ffd4 	bl	8008c20 <HAL_UART_Receive_DMA>
	}

}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	54442d18 	.word	0x54442d18
 8001c84:	400921fb 	.word	0x400921fb
 8001c88:	2000096c 	.word	0x2000096c
 8001c8c:	2000040b 	.word	0x2000040b
 8001c90:	200004dc 	.word	0x200004dc
 8001c94:	20000408 	.word	0x20000408
 8001c98:	200009fc 	.word	0x200009fc
 8001c9c:	20000264 	.word	0x20000264
 8001ca0:	2000045b 	.word	0x2000045b
 8001ca4:	20000260 	.word	0x20000260
 8001ca8:	200004e0 	.word	0x200004e0
 8001cac:	200004e8 	.word	0x200004e8
 8001cb0:	20000458 	.word	0x20000458
 8001cb4:	200008dc 	.word	0x200008dc
 8001cb8:	20000487 	.word	0x20000487
 8001cbc:	200002f4 	.word	0x200002f4
 8001cc0:	20000489 	.word	0x20000489
 8001cc4:	200002fc 	.word	0x200002fc
 8001cc8:	2000086c 	.word	0x2000086c
 8001ccc:	20000484 	.word	0x20000484
 8001cd0:	20000924 	.word	0x20000924
 8001cd4:	200004bf 	.word	0x200004bf
 8001cd8:	200004ec 	.word	0x200004ec
 8001cdc:	200004bc 	.word	0x200004bc
 8001ce0:	20000a44 	.word	0x20000a44
 8001ce4:	200004d7 	.word	0x200004d7
 8001ce8:	40668000 	.word	0x40668000
 8001cec:	200004e4 	.word	0x200004e4
 8001cf0:	200004d4 	.word	0x200004d4

08001cf4 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //--- VGT ARM
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a49      	ldr	r2, [pc, #292]	@ (8001e24 <HAL_UART_RxHalfCpltCallback+0x130>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d113      	bne.n	8001d2c <HAL_UART_RxHalfCpltCallback+0x38>
	{
		if(!(UART1_RX_BUFFER[0] == 'A' && UART1_RX_BUFFER[1] == 'B' && UART1_RX_BUFFER[2] == 'C'))
 8001d04:	4b48      	ldr	r3, [pc, #288]	@ (8001e28 <HAL_UART_RxHalfCpltCallback+0x134>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b41      	cmp	r3, #65	@ 0x41
 8001d0a:	d107      	bne.n	8001d1c <HAL_UART_RxHalfCpltCallback+0x28>
 8001d0c:	4b46      	ldr	r3, [pc, #280]	@ (8001e28 <HAL_UART_RxHalfCpltCallback+0x134>)
 8001d0e:	785b      	ldrb	r3, [r3, #1]
 8001d10:	2b42      	cmp	r3, #66	@ 0x42
 8001d12:	d103      	bne.n	8001d1c <HAL_UART_RxHalfCpltCallback+0x28>
 8001d14:	4b44      	ldr	r3, [pc, #272]	@ (8001e28 <HAL_UART_RxHalfCpltCallback+0x134>)
 8001d16:	789b      	ldrb	r3, [r3, #2]
 8001d18:	2b43      	cmp	r3, #67	@ 0x43
 8001d1a:	d007      	beq.n	8001d2c <HAL_UART_RxHalfCpltCallback+0x38>
		{
			HAL_UART_AbortReceive(&huart1);
 8001d1c:	4841      	ldr	r0, [pc, #260]	@ (8001e24 <HAL_UART_RxHalfCpltCallback+0x130>)
 8001d1e:	f006 ffa4 	bl	8008c6a <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8001d22:	2235      	movs	r2, #53	@ 0x35
 8001d24:	4940      	ldr	r1, [pc, #256]	@ (8001e28 <HAL_UART_RxHalfCpltCallback+0x134>)
 8001d26:	483f      	ldr	r0, [pc, #252]	@ (8001e24 <HAL_UART_RxHalfCpltCallback+0x130>)
 8001d28:	f006 ff7a 	bl	8008c20 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e2c <HAL_UART_RxHalfCpltCallback+0x138>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d113      	bne.n	8001d5c <HAL_UART_RxHalfCpltCallback+0x68>
	{
		if(!(UART2_RX_BUFFER[0] == 'A' && UART2_RX_BUFFER[1] == 'B' && UART2_RX_BUFFER[2] == 'C'))
 8001d34:	4b3e      	ldr	r3, [pc, #248]	@ (8001e30 <HAL_UART_RxHalfCpltCallback+0x13c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b41      	cmp	r3, #65	@ 0x41
 8001d3a:	d107      	bne.n	8001d4c <HAL_UART_RxHalfCpltCallback+0x58>
 8001d3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e30 <HAL_UART_RxHalfCpltCallback+0x13c>)
 8001d3e:	785b      	ldrb	r3, [r3, #1]
 8001d40:	2b42      	cmp	r3, #66	@ 0x42
 8001d42:	d103      	bne.n	8001d4c <HAL_UART_RxHalfCpltCallback+0x58>
 8001d44:	4b3a      	ldr	r3, [pc, #232]	@ (8001e30 <HAL_UART_RxHalfCpltCallback+0x13c>)
 8001d46:	789b      	ldrb	r3, [r3, #2]
 8001d48:	2b43      	cmp	r3, #67	@ 0x43
 8001d4a:	d007      	beq.n	8001d5c <HAL_UART_RxHalfCpltCallback+0x68>
		{
			HAL_UART_AbortReceive(&huart2);
 8001d4c:	4837      	ldr	r0, [pc, #220]	@ (8001e2c <HAL_UART_RxHalfCpltCallback+0x138>)
 8001d4e:	f006 ff8c 	bl	8008c6a <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
 8001d52:	2217      	movs	r2, #23
 8001d54:	4936      	ldr	r1, [pc, #216]	@ (8001e30 <HAL_UART_RxHalfCpltCallback+0x13c>)
 8001d56:	4835      	ldr	r0, [pc, #212]	@ (8001e2c <HAL_UART_RxHalfCpltCallback+0x138>)
 8001d58:	f006 ff62 	bl	8008c20 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart3)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a35      	ldr	r2, [pc, #212]	@ (8001e34 <HAL_UART_RxHalfCpltCallback+0x140>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d113      	bne.n	8001d8c <HAL_UART_RxHalfCpltCallback+0x98>
	{
		if(!(UART3_RX_BUFFER[0] == 'A' && UART3_RX_BUFFER[1] == 'B' && UART3_RX_BUFFER[2] == 'C'))
 8001d64:	4b34      	ldr	r3, [pc, #208]	@ (8001e38 <HAL_UART_RxHalfCpltCallback+0x144>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b41      	cmp	r3, #65	@ 0x41
 8001d6a:	d107      	bne.n	8001d7c <HAL_UART_RxHalfCpltCallback+0x88>
 8001d6c:	4b32      	ldr	r3, [pc, #200]	@ (8001e38 <HAL_UART_RxHalfCpltCallback+0x144>)
 8001d6e:	785b      	ldrb	r3, [r3, #1]
 8001d70:	2b42      	cmp	r3, #66	@ 0x42
 8001d72:	d103      	bne.n	8001d7c <HAL_UART_RxHalfCpltCallback+0x88>
 8001d74:	4b30      	ldr	r3, [pc, #192]	@ (8001e38 <HAL_UART_RxHalfCpltCallback+0x144>)
 8001d76:	789b      	ldrb	r3, [r3, #2]
 8001d78:	2b43      	cmp	r3, #67	@ 0x43
 8001d7a:	d007      	beq.n	8001d8c <HAL_UART_RxHalfCpltCallback+0x98>
		{
			HAL_UART_AbortReceive(&huart3);
 8001d7c:	482d      	ldr	r0, [pc, #180]	@ (8001e34 <HAL_UART_RxHalfCpltCallback+0x140>)
 8001d7e:	f006 ff74 	bl	8008c6a <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 8001d82:	222b      	movs	r2, #43	@ 0x2b
 8001d84:	492c      	ldr	r1, [pc, #176]	@ (8001e38 <HAL_UART_RxHalfCpltCallback+0x144>)
 8001d86:	482b      	ldr	r0, [pc, #172]	@ (8001e34 <HAL_UART_RxHalfCpltCallback+0x140>)
 8001d88:	f006 ff4a 	bl	8008c20 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart4)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8001e3c <HAL_UART_RxHalfCpltCallback+0x148>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d113      	bne.n	8001dbc <HAL_UART_RxHalfCpltCallback+0xc8>
	{
		if(!(UART4_RX_BUFFER[0] == 'A' && UART4_RX_BUFFER[1] == 'B' && UART4_RX_BUFFER[2] == 'C'))
 8001d94:	4b2a      	ldr	r3, [pc, #168]	@ (8001e40 <HAL_UART_RxHalfCpltCallback+0x14c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b41      	cmp	r3, #65	@ 0x41
 8001d9a:	d107      	bne.n	8001dac <HAL_UART_RxHalfCpltCallback+0xb8>
 8001d9c:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <HAL_UART_RxHalfCpltCallback+0x14c>)
 8001d9e:	785b      	ldrb	r3, [r3, #1]
 8001da0:	2b42      	cmp	r3, #66	@ 0x42
 8001da2:	d103      	bne.n	8001dac <HAL_UART_RxHalfCpltCallback+0xb8>
 8001da4:	4b26      	ldr	r3, [pc, #152]	@ (8001e40 <HAL_UART_RxHalfCpltCallback+0x14c>)
 8001da6:	789b      	ldrb	r3, [r3, #2]
 8001da8:	2b43      	cmp	r3, #67	@ 0x43
 8001daa:	d007      	beq.n	8001dbc <HAL_UART_RxHalfCpltCallback+0xc8>
		{
			HAL_UART_AbortReceive(&huart4);
 8001dac:	4823      	ldr	r0, [pc, #140]	@ (8001e3c <HAL_UART_RxHalfCpltCallback+0x148>)
 8001dae:	f006 ff5c 	bl	8008c6a <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 8001db2:	2235      	movs	r2, #53	@ 0x35
 8001db4:	4922      	ldr	r1, [pc, #136]	@ (8001e40 <HAL_UART_RxHalfCpltCallback+0x14c>)
 8001db6:	4821      	ldr	r0, [pc, #132]	@ (8001e3c <HAL_UART_RxHalfCpltCallback+0x148>)
 8001db8:	f006 ff32 	bl	8008c20 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart5)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a21      	ldr	r2, [pc, #132]	@ (8001e44 <HAL_UART_RxHalfCpltCallback+0x150>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d113      	bne.n	8001dec <HAL_UART_RxHalfCpltCallback+0xf8>
	{
		if(!(UART5_RX_BUFFER[0] == 'A' && UART5_RX_BUFFER[1] == 'B' && UART5_RX_BUFFER[2] == 'C'))
 8001dc4:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <HAL_UART_RxHalfCpltCallback+0x154>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b41      	cmp	r3, #65	@ 0x41
 8001dca:	d107      	bne.n	8001ddc <HAL_UART_RxHalfCpltCallback+0xe8>
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <HAL_UART_RxHalfCpltCallback+0x154>)
 8001dce:	785b      	ldrb	r3, [r3, #1]
 8001dd0:	2b42      	cmp	r3, #66	@ 0x42
 8001dd2:	d103      	bne.n	8001ddc <HAL_UART_RxHalfCpltCallback+0xe8>
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <HAL_UART_RxHalfCpltCallback+0x154>)
 8001dd6:	789b      	ldrb	r3, [r3, #2]
 8001dd8:	2b43      	cmp	r3, #67	@ 0x43
 8001dda:	d007      	beq.n	8001dec <HAL_UART_RxHalfCpltCallback+0xf8>
		{
			HAL_UART_AbortReceive(&huart5);
 8001ddc:	4819      	ldr	r0, [pc, #100]	@ (8001e44 <HAL_UART_RxHalfCpltCallback+0x150>)
 8001dde:	f006 ff44 	bl	8008c6a <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 8001de2:	2217      	movs	r2, #23
 8001de4:	4918      	ldr	r1, [pc, #96]	@ (8001e48 <HAL_UART_RxHalfCpltCallback+0x154>)
 8001de6:	4817      	ldr	r0, [pc, #92]	@ (8001e44 <HAL_UART_RxHalfCpltCallback+0x150>)
 8001de8:	f006 ff1a 	bl	8008c20 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart6)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a17      	ldr	r2, [pc, #92]	@ (8001e4c <HAL_UART_RxHalfCpltCallback+0x158>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d113      	bne.n	8001e1c <HAL_UART_RxHalfCpltCallback+0x128>
	{
		if(!(UART6_RX_BUFFER[0] == 'A' && UART6_RX_BUFFER[1] == 'B' && UART6_RX_BUFFER[2] == 'C'))
 8001df4:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <HAL_UART_RxHalfCpltCallback+0x15c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b41      	cmp	r3, #65	@ 0x41
 8001dfa:	d107      	bne.n	8001e0c <HAL_UART_RxHalfCpltCallback+0x118>
 8001dfc:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <HAL_UART_RxHalfCpltCallback+0x15c>)
 8001dfe:	785b      	ldrb	r3, [r3, #1]
 8001e00:	2b42      	cmp	r3, #66	@ 0x42
 8001e02:	d103      	bne.n	8001e0c <HAL_UART_RxHalfCpltCallback+0x118>
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_UART_RxHalfCpltCallback+0x15c>)
 8001e06:	789b      	ldrb	r3, [r3, #2]
 8001e08:	2b43      	cmp	r3, #67	@ 0x43
 8001e0a:	d007      	beq.n	8001e1c <HAL_UART_RxHalfCpltCallback+0x128>
		{
			HAL_UART_AbortReceive(&huart6);
 8001e0c:	480f      	ldr	r0, [pc, #60]	@ (8001e4c <HAL_UART_RxHalfCpltCallback+0x158>)
 8001e0e:	f006 ff2c 	bl	8008c6a <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 8001e12:	2207      	movs	r2, #7
 8001e14:	490e      	ldr	r1, [pc, #56]	@ (8001e50 <HAL_UART_RxHalfCpltCallback+0x15c>)
 8001e16:	480d      	ldr	r0, [pc, #52]	@ (8001e4c <HAL_UART_RxHalfCpltCallback+0x158>)
 8001e18:	f006 ff02 	bl	8008c20 <HAL_UART_Receive_DMA>
		}
	}

}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	2000096c 	.word	0x2000096c
 8001e28:	20000408 	.word	0x20000408
 8001e2c:	200009b4 	.word	0x200009b4
 8001e30:	20000440 	.word	0x20000440
 8001e34:	200009fc 	.word	0x200009fc
 8001e38:	20000458 	.word	0x20000458
 8001e3c:	200008dc 	.word	0x200008dc
 8001e40:	20000484 	.word	0x20000484
 8001e44:	20000924 	.word	0x20000924
 8001e48:	200004bc 	.word	0x200004bc
 8001e4c:	20000a44 	.word	0x20000a44
 8001e50:	200004d4 	.word	0x200004d4

08001e54 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //--- VGT ARM
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a25      	ldr	r2, [pc, #148]	@ (8001ef4 <HAL_UART_ErrorCallback+0xa0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d107      	bne.n	8001e74 <HAL_UART_ErrorCallback+0x20>
	{
		HAL_UART_AbortReceive(&huart1);
 8001e64:	4823      	ldr	r0, [pc, #140]	@ (8001ef4 <HAL_UART_ErrorCallback+0xa0>)
 8001e66:	f006 ff00 	bl	8008c6a <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8001e6a:	2235      	movs	r2, #53	@ 0x35
 8001e6c:	4922      	ldr	r1, [pc, #136]	@ (8001ef8 <HAL_UART_ErrorCallback+0xa4>)
 8001e6e:	4821      	ldr	r0, [pc, #132]	@ (8001ef4 <HAL_UART_ErrorCallback+0xa0>)
 8001e70:	f006 fed6 	bl	8008c20 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a21      	ldr	r2, [pc, #132]	@ (8001efc <HAL_UART_ErrorCallback+0xa8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d107      	bne.n	8001e8c <HAL_UART_ErrorCallback+0x38>
	{
		HAL_UART_AbortReceive(&huart2);
 8001e7c:	481f      	ldr	r0, [pc, #124]	@ (8001efc <HAL_UART_ErrorCallback+0xa8>)
 8001e7e:	f006 fef4 	bl	8008c6a <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
 8001e82:	2217      	movs	r2, #23
 8001e84:	491e      	ldr	r1, [pc, #120]	@ (8001f00 <HAL_UART_ErrorCallback+0xac>)
 8001e86:	481d      	ldr	r0, [pc, #116]	@ (8001efc <HAL_UART_ErrorCallback+0xa8>)
 8001e88:	f006 feca 	bl	8008c20 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart3)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f04 <HAL_UART_ErrorCallback+0xb0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d107      	bne.n	8001ea4 <HAL_UART_ErrorCallback+0x50>
	{
		HAL_UART_AbortReceive(&huart3);
 8001e94:	481b      	ldr	r0, [pc, #108]	@ (8001f04 <HAL_UART_ErrorCallback+0xb0>)
 8001e96:	f006 fee8 	bl	8008c6a <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 8001e9a:	222b      	movs	r2, #43	@ 0x2b
 8001e9c:	491a      	ldr	r1, [pc, #104]	@ (8001f08 <HAL_UART_ErrorCallback+0xb4>)
 8001e9e:	4819      	ldr	r0, [pc, #100]	@ (8001f04 <HAL_UART_ErrorCallback+0xb0>)
 8001ea0:	f006 febe 	bl	8008c20 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart4)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a19      	ldr	r2, [pc, #100]	@ (8001f0c <HAL_UART_ErrorCallback+0xb8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d107      	bne.n	8001ebc <HAL_UART_ErrorCallback+0x68>
	{
		HAL_UART_AbortReceive(&huart4);
 8001eac:	4817      	ldr	r0, [pc, #92]	@ (8001f0c <HAL_UART_ErrorCallback+0xb8>)
 8001eae:	f006 fedc 	bl	8008c6a <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 8001eb2:	2235      	movs	r2, #53	@ 0x35
 8001eb4:	4916      	ldr	r1, [pc, #88]	@ (8001f10 <HAL_UART_ErrorCallback+0xbc>)
 8001eb6:	4815      	ldr	r0, [pc, #84]	@ (8001f0c <HAL_UART_ErrorCallback+0xb8>)
 8001eb8:	f006 feb2 	bl	8008c20 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart5)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a15      	ldr	r2, [pc, #84]	@ (8001f14 <HAL_UART_ErrorCallback+0xc0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d107      	bne.n	8001ed4 <HAL_UART_ErrorCallback+0x80>
	{
		HAL_UART_AbortReceive(&huart5);
 8001ec4:	4813      	ldr	r0, [pc, #76]	@ (8001f14 <HAL_UART_ErrorCallback+0xc0>)
 8001ec6:	f006 fed0 	bl	8008c6a <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 8001eca:	2217      	movs	r2, #23
 8001ecc:	4912      	ldr	r1, [pc, #72]	@ (8001f18 <HAL_UART_ErrorCallback+0xc4>)
 8001ece:	4811      	ldr	r0, [pc, #68]	@ (8001f14 <HAL_UART_ErrorCallback+0xc0>)
 8001ed0:	f006 fea6 	bl	8008c20 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart6)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a11      	ldr	r2, [pc, #68]	@ (8001f1c <HAL_UART_ErrorCallback+0xc8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d107      	bne.n	8001eec <HAL_UART_ErrorCallback+0x98>
	{
		HAL_UART_AbortReceive(&huart6);
 8001edc:	480f      	ldr	r0, [pc, #60]	@ (8001f1c <HAL_UART_ErrorCallback+0xc8>)
 8001ede:	f006 fec4 	bl	8008c6a <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	490e      	ldr	r1, [pc, #56]	@ (8001f20 <HAL_UART_ErrorCallback+0xcc>)
 8001ee6:	480d      	ldr	r0, [pc, #52]	@ (8001f1c <HAL_UART_ErrorCallback+0xc8>)
 8001ee8:	f006 fe9a 	bl	8008c20 <HAL_UART_Receive_DMA>

	}

}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	2000096c 	.word	0x2000096c
 8001ef8:	20000408 	.word	0x20000408
 8001efc:	200009b4 	.word	0x200009b4
 8001f00:	20000440 	.word	0x20000440
 8001f04:	200009fc 	.word	0x200009fc
 8001f08:	20000458 	.word	0x20000458
 8001f0c:	200008dc 	.word	0x200008dc
 8001f10:	20000484 	.word	0x20000484
 8001f14:	20000924 	.word	0x20000924
 8001f18:	200004bc 	.word	0x200004bc
 8001f1c:	20000a44 	.word	0x20000a44
 8001f20:	200004d4 	.word	0x200004d4

08001f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f28:	f002 fb90 	bl	800464c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f2c:	f000 f842 	bl	8001fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f30:	f7ff f990 	bl	8001254 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f34:	f7ff f908 	bl	8001148 <MX_DMA_Init>
  MX_ADC1_Init();
 8001f38:	f7fe ff76 	bl	8000e28 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001f3c:	f7ff f842 	bl	8000fc4 <MX_CAN1_Init>
  MX_I2C1_Init();
 8001f40:	f7ff fa3e 	bl	80013c0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001f44:	f7ff fa6a 	bl	800141c <MX_I2C3_Init>
  MX_TIM1_Init();
 8001f48:	f000 fcf0 	bl	800292c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f4c:	f000 fd46 	bl	80029dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f50:	f000 fd98 	bl	8002a84 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f54:	f000 fdea 	bl	8002b2c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001f58:	f000 fe3c 	bl	8002bd4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001f5c:	f000 fed4 	bl	8002d08 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001f60:	f000 ff56 	bl	8002e10 <MX_TIM9_Init>
  MX_TIM10_Init();
 8001f64:	f000 ffa4 	bl	8002eb0 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001f68:	f000 fff0 	bl	8002f4c <MX_TIM11_Init>
  MX_TIM12_Init();
 8001f6c:	f001 f83c 	bl	8002fe8 <MX_TIM12_Init>
  MX_TIM13_Init();
 8001f70:	f001 f88a 	bl	8003088 <MX_TIM13_Init>
  MX_UART4_Init();
 8001f74:	f001 fd12 	bl	800399c <MX_UART4_Init>
  MX_UART5_Init();
 8001f78:	f001 fd3a 	bl	80039f0 <MX_UART5_Init>
  MX_TIM6_Init();
 8001f7c:	f000 fe8e 	bl	8002c9c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8001f80:	f001 fd8a 	bl	8003a98 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001f84:	f001 fd5e 	bl	8003a44 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001f88:	f001 fdb0 	bl	8003aec <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001f8c:	f001 fdd8 	bl	8003b40 <MX_USART6_UART_Init>
  MX_LWIP_Init();
 8001f90:	f008 f80e 	bl	8009fb0 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  Robot_Init();
 8001f94:	f7ff fb10 	bl	80015b8 <Robot_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(udp_cnt >= 1)
 8001f98:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <main+0x8c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0fb      	beq.n	8001f98 <main+0x74>
	  {
		  MX_LWIP_Process();
 8001fa0:	f008 f946 	bl	800a230 <MX_LWIP_Process>
		  udpClient_send();
 8001fa4:	f001 fc9e 	bl	80038e4 <udpClient_send>
		  udp_cnt = 0;
 8001fa8:	4b01      	ldr	r3, [pc, #4]	@ (8001fb0 <main+0x8c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
	  if(udp_cnt >= 1)
 8001fae:	e7f3      	b.n	8001f98 <main+0x74>
 8001fb0:	2000025c 	.word	0x2000025c

08001fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b094      	sub	sp, #80	@ 0x50
 8001fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fba:	f107 0320 	add.w	r3, r7, #32
 8001fbe:	2230      	movs	r2, #48	@ 0x30
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f012 ff19 	bl	8014dfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	4b28      	ldr	r3, [pc, #160]	@ (8002080 <SystemClock_Config+0xcc>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	4a27      	ldr	r2, [pc, #156]	@ (8002080 <SystemClock_Config+0xcc>)
 8001fe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe8:	4b25      	ldr	r3, [pc, #148]	@ (8002080 <SystemClock_Config+0xcc>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	4b22      	ldr	r3, [pc, #136]	@ (8002084 <SystemClock_Config+0xd0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a21      	ldr	r2, [pc, #132]	@ (8002084 <SystemClock_Config+0xd0>)
 8001ffe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b1f      	ldr	r3, [pc, #124]	@ (8002084 <SystemClock_Config+0xd0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002010:	2301      	movs	r3, #1
 8002012:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002014:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800201a:	2302      	movs	r3, #2
 800201c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800201e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002024:	2304      	movs	r3, #4
 8002026:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002028:	23a8      	movs	r3, #168	@ 0xa8
 800202a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800202c:	2302      	movs	r3, #2
 800202e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002030:	2304      	movs	r3, #4
 8002032:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002034:	f107 0320 	add.w	r3, r7, #32
 8002038:	4618      	mov	r0, r3
 800203a:	f005 f849 	bl	80070d0 <HAL_RCC_OscConfig>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002044:	f000 f820 	bl	8002088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002048:	230f      	movs	r3, #15
 800204a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800204c:	2302      	movs	r3, #2
 800204e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002054:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002058:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800205a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800205e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	2105      	movs	r1, #5
 8002066:	4618      	mov	r0, r3
 8002068:	f005 faaa 	bl	80075c0 <HAL_RCC_ClockConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002072:	f000 f809 	bl	8002088 <Error_Handler>
  }
}
 8002076:	bf00      	nop
 8002078:	3750      	adds	r7, #80	@ 0x50
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800
 8002084:	40007000 	.word	0x40007000

08002088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800208c:	b672      	cpsid	i
}
 800208e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <Error_Handler+0x8>

08002094 <Motor_Init>:
void Motor_Init(Motor_t *uMotor,
               GPIO_TypeDef *GPIO_A, uint16_t GPIO_PIN_A,
               GPIO_TypeDef *GPIO_B, uint16_t GPIO_PIN_B,
               TIM_HandleTypeDef *htimx, uint32_t channel,
               uint8_t reversed)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	4613      	mov	r3, r2
 80020a2:	80fb      	strh	r3, [r7, #6]
	uMotor -> GPIO_A 		= GPIO_A;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	601a      	str	r2, [r3, #0]
	uMotor -> GPIO_PIN_A 	= GPIO_PIN_A;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	88fa      	ldrh	r2, [r7, #6]
 80020ae:	809a      	strh	r2, [r3, #4]
	uMotor -> GPIO_B 		= GPIO_B;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	609a      	str	r2, [r3, #8]
	uMotor -> GPIO_PIN_B 	= GPIO_PIN_B;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8b3a      	ldrh	r2, [r7, #24]
 80020ba:	819a      	strh	r2, [r3, #12]
	uMotor -> htimx 		= htimx;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	611a      	str	r2, [r3, #16]
	uMotor -> channel 		= channel;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a3a      	ldr	r2, [r7, #32]
 80020c6:	615a      	str	r2, [r3, #20]
	uMotor -> reversed 		= reversed;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80020ce:	761a      	strb	r2, [r3, #24]

	HAL_TIM_PWM_Start(uMotor->htimx, uMotor->channel);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	4619      	mov	r1, r3
 80020da:	4610      	mov	r0, r2
 80020dc:	f005 fda0 	bl	8007c20 <HAL_TIM_PWM_Start>

	return;
 80020e0:	bf00      	nop
}
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <Motor_Run>:


void Motor_Run(Motor_t *uMotor, int16_t speed)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	807b      	strh	r3, [r7, #2]
    if(uMotor -> reversed)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7e1b      	ldrb	r3, [r3, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <Motor_Run+0x1c>
    {
        speed = -speed;
 80020fc:	887b      	ldrh	r3, [r7, #2]
 80020fe:	425b      	negs	r3, r3
 8002100:	b29b      	uxth	r3, r3
 8002102:	807b      	strh	r3, [r7, #2]
    }

	uint8_t dir_a = (speed >= 0);
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	43db      	mvns	r3, r3
 8002108:	b29b      	uxth	r3, r3
 800210a:	0bdb      	lsrs	r3, r3, #15
 800210c:	b2db      	uxtb	r3, r3
 800210e:	73fb      	strb	r3, [r7, #15]
	uint8_t dir_b = (speed <  0);
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	0bdb      	lsrs	r3, r3, #15
 8002114:	b2db      	uxtb	r3, r3
 8002116:	73bb      	strb	r3, [r7, #14]
	speed = abs(speed);
 8002118:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800211c:	2b00      	cmp	r3, #0
 800211e:	bfb8      	it	lt
 8002120:	425b      	neglt	r3, r3
 8002122:	b29b      	uxth	r3, r3
 8002124:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(uMotor -> GPIO_A, uMotor -> GPIO_PIN_A, dir_a);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	889b      	ldrh	r3, [r3, #4]
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	4619      	mov	r1, r3
 8002132:	f004 fe6f 	bl	8006e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(uMotor -> GPIO_B, uMotor -> GPIO_PIN_B, dir_b);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6898      	ldr	r0, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	899b      	ldrh	r3, [r3, #12]
 800213e:	7bba      	ldrb	r2, [r7, #14]
 8002140:	4619      	mov	r1, r3
 8002142:	f004 fe67 	bl	8006e14 <HAL_GPIO_WritePin>

	switch (uMotor->channel)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d838      	bhi.n	80021c0 <Motor_Run+0xd8>
 800214e:	a201      	add	r2, pc, #4	@ (adr r2, 8002154 <Motor_Run+0x6c>)
 8002150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002154:	08002189 	.word	0x08002189
 8002158:	080021c1 	.word	0x080021c1
 800215c:	080021c1 	.word	0x080021c1
 8002160:	080021c1 	.word	0x080021c1
 8002164:	08002197 	.word	0x08002197
 8002168:	080021c1 	.word	0x080021c1
 800216c:	080021c1 	.word	0x080021c1
 8002170:	080021c1 	.word	0x080021c1
 8002174:	080021a5 	.word	0x080021a5
 8002178:	080021c1 	.word	0x080021c1
 800217c:	080021c1 	.word	0x080021c1
 8002180:	080021c1 	.word	0x080021c1
 8002184:	080021b3 	.word	0x080021b3
	{
		case TIM_CHANNEL_1:
			uMotor -> htimx -> Instance -> CCR1 = speed;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002192:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002194:	e015      	b.n	80021c2 <Motor_Run+0xda>
		case TIM_CHANNEL_2:
			uMotor -> htimx -> Instance -> CCR2 = speed;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80021a0:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80021a2:	e00e      	b.n	80021c2 <Motor_Run+0xda>
		case TIM_CHANNEL_3:
			uMotor -> htimx -> Instance -> CCR3 = speed;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80021ae:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80021b0:	e007      	b.n	80021c2 <Motor_Run+0xda>
		case TIM_CHANNEL_4:
			uMotor -> htimx -> Instance -> CCR4 = speed;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80021bc:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 80021be:	e000      	b.n	80021c2 <Motor_Run+0xda>
		default:
			break;
 80021c0:	bf00      	nop
	}

	return;
 80021c2:	bf00      	nop
}
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop

080021cc <Encoder_Init>:


void Encoder_Init(Encoder_t *uEncoder, TIM_HandleTypeDef *htimx, uint8_t reversed)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	4613      	mov	r3, r2
 80021d8:	71fb      	strb	r3, [r7, #7]
	uEncoder -> htimx 		= htimx;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	601a      	str	r2, [r3, #0]
	uEncoder -> reversed 	= reversed;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	79fa      	ldrb	r2, [r7, #7]
 80021e4:	719a      	strb	r2, [r3, #6]

	HAL_TIM_Encoder_Start(uEncoder->htimx, TIM_CHANNEL_ALL);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	213c      	movs	r1, #60	@ 0x3c
 80021ec:	4618      	mov	r0, r3
 80021ee:	f005 fe85 	bl	8007efc <HAL_TIM_Encoder_Start>

	return;
 80021f2:	bf00      	nop
}
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <Encoder_GetCount>:


void Encoder_GetCount(Encoder_t *uEncoder)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
	if(uEncoder -> reversed)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	799b      	ldrb	r3, [r3, #6]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <Encoder_GetCount+0x26>
	{
		uEncoder -> count = -(uEncoder -> htimx -> Instance -> CNT);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	b29b      	uxth	r3, r3
 8002214:	425b      	negs	r3, r3
 8002216:	b29b      	uxth	r3, r3
 8002218:	b21a      	sxth	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	809a      	strh	r2, [r3, #4]
	else
	{
		uEncoder -> count = uEncoder -> htimx -> Instance -> CNT;
	}

	return;
 800221e:	e007      	b.n	8002230 <Encoder_GetCount+0x36>
		uEncoder -> count = uEncoder -> htimx -> Instance -> CNT;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002228:	b21a      	sxth	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	809a      	strh	r2, [r3, #4]
	return;
 800222e:	bf00      	nop
}
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <Encoder_ResetCount>:


void Encoder_ResetCount(Encoder_t *uEncoder)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
	uEncoder -> htimx -> Instance -> CNT = 0;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2200      	movs	r2, #0
 800224a:	625a      	str	r2, [r3, #36]	@ 0x24

	return;
 800224c:	bf00      	nop
}
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <Kinematics_Triangle>:


int16_t Kinematics_Triangle(Motor_e eMotor, int16_t vx, int16_t vy, int16_t vw)
{
 8002258:	b5b0      	push	{r4, r5, r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	4604      	mov	r4, r0
 8002260:	4608      	mov	r0, r1
 8002262:	4611      	mov	r1, r2
 8002264:	461a      	mov	r2, r3
 8002266:	4623      	mov	r3, r4
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	4603      	mov	r3, r0
 800226c:	80bb      	strh	r3, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	807b      	strh	r3, [r7, #2]
 8002272:	4613      	mov	r3, r2
 8002274:	803b      	strh	r3, [r7, #0]
	switch(eMotor)
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d042      	beq.n	8002302 <Kinematics_Triangle+0xaa>
 800227c:	2b02      	cmp	r3, #2
 800227e:	dc76      	bgt.n	800236e <Kinematics_Triangle+0x116>
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <Kinematics_Triangle+0x32>
 8002284:	2b01      	cmp	r3, #1
 8002286:	d006      	beq.n	8002296 <Kinematics_Triangle+0x3e>
 8002288:	e071      	b.n	800236e <Kinematics_Triangle+0x116>
	{
		case MOTOR_A:
			return vx + vw;
 800228a:	88ba      	ldrh	r2, [r7, #4]
 800228c:	883b      	ldrh	r3, [r7, #0]
 800228e:	4413      	add	r3, r2
 8002290:	b29b      	uxth	r3, r3
 8002292:	b21b      	sxth	r3, r3
 8002294:	e06c      	b.n	8002370 <Kinematics_Triangle+0x118>
		case MOTOR_B:
			return (-0.5 * vx) + (0.866025 * vy) + vw;
 8002296:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe f93a 	bl	8000514 <__aeabi_i2d>
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	4b36      	ldr	r3, [pc, #216]	@ (8002380 <Kinematics_Triangle+0x128>)
 80022a6:	f7fe f99f 	bl	80005e8 <__aeabi_dmul>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4614      	mov	r4, r2
 80022b0:	461d      	mov	r5, r3
 80022b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe f92c 	bl	8000514 <__aeabi_i2d>
 80022bc:	a32e      	add	r3, pc, #184	@ (adr r3, 8002378 <Kinematics_Triangle+0x120>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	f7fe f991 	bl	80005e8 <__aeabi_dmul>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4620      	mov	r0, r4
 80022cc:	4629      	mov	r1, r5
 80022ce:	f7fd ffd5 	bl	800027c <__adddf3>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4614      	mov	r4, r2
 80022d8:	461d      	mov	r5, r3
 80022da:	f9b7 3000 	ldrsh.w	r3, [r7]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe f918 	bl	8000514 <__aeabi_i2d>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4620      	mov	r0, r4
 80022ea:	4629      	mov	r1, r5
 80022ec:	f7fd ffc6 	bl	800027c <__adddf3>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7fe fb88 	bl	8000a0c <__aeabi_d2iz>
 80022fc:	4603      	mov	r3, r0
 80022fe:	b21b      	sxth	r3, r3
 8002300:	e036      	b.n	8002370 <Kinematics_Triangle+0x118>
		case MOTOR_C:
			return (-0.5 * vx) - (0.866025 * vy) + vw;
 8002302:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe f904 	bl	8000514 <__aeabi_i2d>
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <Kinematics_Triangle+0x128>)
 8002312:	f7fe f969 	bl	80005e8 <__aeabi_dmul>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4614      	mov	r4, r2
 800231c:	461d      	mov	r5, r3
 800231e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f8f6 	bl	8000514 <__aeabi_i2d>
 8002328:	a313      	add	r3, pc, #76	@ (adr r3, 8002378 <Kinematics_Triangle+0x120>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f95b 	bl	80005e8 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4620      	mov	r0, r4
 8002338:	4629      	mov	r1, r5
 800233a:	f7fd ff9d 	bl	8000278 <__aeabi_dsub>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4614      	mov	r4, r2
 8002344:	461d      	mov	r5, r3
 8002346:	f9b7 3000 	ldrsh.w	r3, [r7]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe f8e2 	bl	8000514 <__aeabi_i2d>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4620      	mov	r0, r4
 8002356:	4629      	mov	r1, r5
 8002358:	f7fd ff90 	bl	800027c <__adddf3>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f7fe fb52 	bl	8000a0c <__aeabi_d2iz>
 8002368:	4603      	mov	r3, r0
 800236a:	b21b      	sxth	r3, r3
 800236c:	e000      	b.n	8002370 <Kinematics_Triangle+0x118>
		case MOTOR_D:
		case MOTOR_E:
		case MOTOR_F:
		case MOTOR_G:
		default:
			return 0;
 800236e:	2300      	movs	r3, #0
	}
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bdb0      	pop	{r4, r5, r7, pc}
 8002378:	0f9096bc 	.word	0x0f9096bc
 800237c:	3febb67a 	.word	0x3febb67a
 8002380:	bfe00000 	.word	0xbfe00000

08002384 <PID_Init>:

#include "pid.h"

/* Functions */
void PID_Init(PID_t *uPID, float kp, float ki, float kd)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002390:	edc7 0a01 	vstr	s1, [r7, #4]
 8002394:	ed87 1a00 	vstr	s2, [r7]
	uPID -> kp = kp;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	601a      	str	r2, [r3, #0]
	uPID -> ki = ki;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	605a      	str	r2, [r3, #4]
	uPID -> kd = kd;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	609a      	str	r2, [r3, #8]

	uPID -> proportional 	= 0;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	60da      	str	r2, [r3, #12]
	uPID -> integral 		= 0;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
	uPID -> derivative 		= 0;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	615a      	str	r2, [r3, #20]

	uPID -> error 			= 0;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
	uPID -> prev_error 		= 0;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
	uPID -> setpoint 		= 0;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	621a      	str	r2, [r3, #32]
	uPID -> feedback		= 0;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	@ 0x24

	uPID -> max_output		= 0;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	629a      	str	r2, [r3, #40]	@ 0x28
	uPID -> output			= 0;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	62da      	str	r2, [r3, #44]	@ 0x2c

	return;
 80023f2:	bf00      	nop
}
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <PID_Update>:


void PID_Update(PID_t *uPID, float setpoint, float feedback, float max_output)
{
 80023fe:	b480      	push	{r7}
 8002400:	b085      	sub	sp, #20
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	ed87 0a02 	vstr	s0, [r7, #8]
 800240a:	edc7 0a01 	vstr	s1, [r7, #4]
 800240e:	ed87 1a00 	vstr	s2, [r7]
	uPID->setpoint 		= setpoint;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	621a      	str	r2, [r3, #32]
	uPID->feedback 		= feedback;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	625a      	str	r2, [r3, #36]	@ 0x24
	uPID->max_output 	= max_output;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	629a      	str	r2, [r3, #40]	@ 0x28

	uPID->error = uPID->setpoint - uPID->feedback;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	ed93 7a08 	vldr	s14, [r3, #32]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	edc3 7a06 	vstr	s15, [r3, #24]
//	    if(uPID->error > 180) 			{ setpoint -= 360; }
//	    else if(uPID->error < -180) 	{ setpoint += 360; }
//	    uPID->error = setpoint - feedback;
//	}

	uPID->proportional = uPID->kp * uPID->error;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	ed93 7a00 	vldr	s14, [r3]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	edd3 7a06 	vldr	s15, [r3, #24]
 8002446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	edc3 7a03 	vstr	s15, [r3, #12]
	uPID->integral    += uPID->ki * uPID->error;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	ed93 7a04 	vldr	s14, [r3, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	edd3 6a01 	vldr	s13, [r3, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	edc3 7a04 	vstr	s15, [r3, #16]
	uPID->derivative   = uPID->kd * (uPID->error - uPID->prev_error);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	ed93 7a02 	vldr	s14, [r3, #8]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	edd3 6a06 	vldr	s13, [r3, #24]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002482:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	edc3 7a05 	vstr	s15, [r3, #20]
	uPID->prev_error   = uPID->error;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	61da      	str	r2, [r3, #28]

	if(uPID->integral >= uPID->max_output) 			{ uPID->integral =   uPID->max_output;  }
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	ed93 7a04 	vldr	s14, [r3, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80024a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ac:	db04      	blt.n	80024b8 <PID_Update+0xba>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	611a      	str	r2, [r3, #16]
 80024b6:	e014      	b.n	80024e2 <PID_Update+0xe4>
	else if(uPID->integral < -(uPID->max_output)) 	{ uPID->integral = -(uPID->max_output); }
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80024c4:	eef1 7a67 	vneg.f32	s15, s15
 80024c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	d507      	bpl.n	80024e2 <PID_Update+0xe4>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80024d8:	eef1 7a67 	vneg.f32	s15, s15
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	edc3 7a04 	vstr	s15, [r3, #16]

	uPID->output = (uPID->proportional) + (uPID->integral) + (uPID->derivative);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80024ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80024f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	if(uPID->output >= uPID->max_output) 			{ uPID->output =   uPID->max_output;  }
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800250e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002516:	db04      	blt.n	8002522 <PID_Update+0x124>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	62da      	str	r2, [r3, #44]	@ 0x2c
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }

	return;
 8002520:	e016      	b.n	8002550 <PID_Update+0x152>
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800252e:	eef1 7a67 	vneg.f32	s15, s15
 8002532:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253a:	d400      	bmi.n	800253e <PID_Update+0x140>
	return;
 800253c:	e008      	b.n	8002550 <PID_Update+0x152>
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002544:	eef1 7a67 	vneg.f32	s15, s15
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	return;
 800254e:	bf00      	nop
}
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <HAL_MspInit+0x4c>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	4a0f      	ldr	r2, [pc, #60]	@ (80025a8 <HAL_MspInit+0x4c>)
 800256c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002570:	6453      	str	r3, [r2, #68]	@ 0x44
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <HAL_MspInit+0x4c>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	603b      	str	r3, [r7, #0]
 8002582:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <HAL_MspInit+0x4c>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	4a08      	ldr	r2, [pc, #32]	@ (80025a8 <HAL_MspInit+0x4c>)
 8002588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800258c:	6413      	str	r3, [r2, #64]	@ 0x40
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <HAL_MspInit+0x4c>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800

080025ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <NMI_Handler+0x4>

080025b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <HardFault_Handler+0x4>

080025bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <MemManage_Handler+0x4>

080025c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c8:	bf00      	nop
 80025ca:	e7fd      	b.n	80025c8 <BusFault_Handler+0x4>

080025cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <UsageFault_Handler+0x4>

080025d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002602:	f002 f875 	bl	80046f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002610:	4802      	ldr	r0, [pc, #8]	@ (800261c <DMA1_Stream0_IRQHandler+0x10>)
 8002612:	f002 feb9 	bl	8005388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000b4c 	.word	0x20000b4c

08002620 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <DMA1_Stream1_IRQHandler+0x10>)
 8002626:	f002 feaf 	bl	8005388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000d8c 	.word	0x20000d8c

08002634 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <DMA1_Stream2_IRQHandler+0x10>)
 800263a:	f002 fea5 	bl	8005388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000a8c 	.word	0x20000a8c

08002648 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800264c:	4802      	ldr	r0, [pc, #8]	@ (8002658 <DMA1_Stream3_IRQHandler+0x10>)
 800264e:	f002 fe9b 	bl	8005388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000dec 	.word	0x20000dec

0800265c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002660:	4802      	ldr	r0, [pc, #8]	@ (800266c <DMA1_Stream4_IRQHandler+0x10>)
 8002662:	f002 fe91 	bl	8005388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000aec 	.word	0x20000aec

08002670 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002674:	4802      	ldr	r0, [pc, #8]	@ (8002680 <DMA1_Stream5_IRQHandler+0x10>)
 8002676:	f002 fe87 	bl	8005388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000ccc 	.word	0x20000ccc

08002684 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002688:	4802      	ldr	r0, [pc, #8]	@ (8002694 <DMA1_Stream6_IRQHandler+0x10>)
 800268a:	f002 fe7d 	bl	8005388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000d2c 	.word	0x20000d2c

08002698 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800269c:	4802      	ldr	r0, [pc, #8]	@ (80026a8 <USART1_IRQHandler+0x10>)
 800269e:	f006 fb87 	bl	8008db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000096c 	.word	0x2000096c

080026ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026b0:	4802      	ldr	r0, [pc, #8]	@ (80026bc <USART2_IRQHandler+0x10>)
 80026b2:	f006 fb7d 	bl	8008db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200009b4 	.word	0x200009b4

080026c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80026c4:	4802      	ldr	r0, [pc, #8]	@ (80026d0 <USART3_IRQHandler+0x10>)
 80026c6:	f006 fb73 	bl	8008db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200009fc 	.word	0x200009fc

080026d4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80026d8:	4802      	ldr	r0, [pc, #8]	@ (80026e4 <DMA1_Stream7_IRQHandler+0x10>)
 80026da:	f002 fe55 	bl	8005388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000bac 	.word	0x20000bac

080026e8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80026ec:	4802      	ldr	r0, [pc, #8]	@ (80026f8 <UART4_IRQHandler+0x10>)
 80026ee:	f006 fb5f 	bl	8008db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200008dc 	.word	0x200008dc

080026fc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002700:	4802      	ldr	r0, [pc, #8]	@ (800270c <UART5_IRQHandler+0x10>)
 8002702:	f006 fb55 	bl	8008db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000924 	.word	0x20000924

08002710 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002714:	4802      	ldr	r0, [pc, #8]	@ (8002720 <TIM6_DAC_IRQHandler+0x10>)
 8002716:	f005 fc7f 	bl	8008018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000668 	.word	0x20000668

08002724 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <DMA2_Stream1_IRQHandler+0x10>)
 800272a:	f002 fe2d 	bl	8005388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000e4c 	.word	0x20000e4c

08002738 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800273c:	4802      	ldr	r0, [pc, #8]	@ (8002748 <DMA2_Stream2_IRQHandler+0x10>)
 800273e:	f002 fe23 	bl	8005388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000c0c 	.word	0x20000c0c

0800274c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <DMA2_Stream6_IRQHandler+0x10>)
 8002752:	f002 fe19 	bl	8005388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000eac 	.word	0x20000eac

08002760 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002764:	4802      	ldr	r0, [pc, #8]	@ (8002770 <DMA2_Stream7_IRQHandler+0x10>)
 8002766:	f002 fe0f 	bl	8005388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000c6c 	.word	0x20000c6c

08002774 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return 1;
 8002778:	2301      	movs	r3, #1
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <_kill>:

int _kill(int pid, int sig)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800278e:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <_kill+0x20>)
 8002790:	2216      	movs	r2, #22
 8002792:	601a      	str	r2, [r3, #0]
  return -1;
 8002794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	2000b4fc 	.word	0x2000b4fc

080027a8 <_exit>:

void _exit (int status)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027b0:	f04f 31ff 	mov.w	r1, #4294967295
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ffe5 	bl	8002784 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027ba:	bf00      	nop
 80027bc:	e7fd      	b.n	80027ba <_exit+0x12>

080027be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e00a      	b.n	80027e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027d0:	f3af 8000 	nop.w
 80027d4:	4601      	mov	r1, r0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	60ba      	str	r2, [r7, #8]
 80027dc:	b2ca      	uxtb	r2, r1
 80027de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3301      	adds	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	dbf0      	blt.n	80027d0 <_read+0x12>
  }

  return len;
 80027ee:	687b      	ldr	r3, [r7, #4]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	e009      	b.n	800281e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	60ba      	str	r2, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3301      	adds	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	429a      	cmp	r2, r3
 8002824:	dbf1      	blt.n	800280a <_write+0x12>
  }
  return len;
 8002826:	687b      	ldr	r3, [r7, #4]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_close>:

int _close(int file)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002858:	605a      	str	r2, [r3, #4]
  return 0;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_isatty>:

int _isatty(int file)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002870:	2301      	movs	r3, #1
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a0:	4a14      	ldr	r2, [pc, #80]	@ (80028f4 <_sbrk+0x5c>)
 80028a2:	4b15      	ldr	r3, [pc, #84]	@ (80028f8 <_sbrk+0x60>)
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028ac:	4b13      	ldr	r3, [pc, #76]	@ (80028fc <_sbrk+0x64>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b4:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <_sbrk+0x64>)
 80028b6:	4a12      	ldr	r2, [pc, #72]	@ (8002900 <_sbrk+0x68>)
 80028b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ba:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <_sbrk+0x64>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d205      	bcs.n	80028d4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80028c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002904 <_sbrk+0x6c>)
 80028ca:	220c      	movs	r2, #12
 80028cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	e009      	b.n	80028e8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d4:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <_sbrk+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028da:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <_sbrk+0x64>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	4a06      	ldr	r2, [pc, #24]	@ (80028fc <_sbrk+0x64>)
 80028e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028e6:	68fb      	ldr	r3, [r7, #12]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	20020000 	.word	0x20020000
 80028f8:	00000400 	.word	0x00000400
 80028fc:	200004fc 	.word	0x200004fc
 8002900:	2000b510 	.word	0x2000b510
 8002904:	2000b4fc 	.word	0x2000b4fc

08002908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800290c:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <SystemInit+0x20>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002912:	4a05      	ldr	r2, [pc, #20]	@ (8002928 <SystemInit+0x20>)
 8002914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08c      	sub	sp, #48	@ 0x30
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002932:	f107 030c 	add.w	r3, r7, #12
 8002936:	2224      	movs	r2, #36	@ 0x24
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f012 fa5d 	bl	8014dfa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002948:	4b22      	ldr	r3, [pc, #136]	@ (80029d4 <MX_TIM1_Init+0xa8>)
 800294a:	4a23      	ldr	r2, [pc, #140]	@ (80029d8 <MX_TIM1_Init+0xac>)
 800294c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800294e:	4b21      	ldr	r3, [pc, #132]	@ (80029d4 <MX_TIM1_Init+0xa8>)
 8002950:	2200      	movs	r2, #0
 8002952:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002954:	4b1f      	ldr	r3, [pc, #124]	@ (80029d4 <MX_TIM1_Init+0xa8>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800295a:	4b1e      	ldr	r3, [pc, #120]	@ (80029d4 <MX_TIM1_Init+0xa8>)
 800295c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002960:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002962:	4b1c      	ldr	r3, [pc, #112]	@ (80029d4 <MX_TIM1_Init+0xa8>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002968:	4b1a      	ldr	r3, [pc, #104]	@ (80029d4 <MX_TIM1_Init+0xa8>)
 800296a:	2200      	movs	r2, #0
 800296c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800296e:	4b19      	ldr	r3, [pc, #100]	@ (80029d4 <MX_TIM1_Init+0xa8>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002974:	2301      	movs	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002978:	2300      	movs	r3, #0
 800297a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800297c:	2301      	movs	r3, #1
 800297e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002980:	2300      	movs	r3, #0
 8002982:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002988:	2300      	movs	r3, #0
 800298a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800298c:	2301      	movs	r3, #1
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002990:	2300      	movs	r3, #0
 8002992:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002998:	f107 030c 	add.w	r3, r7, #12
 800299c:	4619      	mov	r1, r3
 800299e:	480d      	ldr	r0, [pc, #52]	@ (80029d4 <MX_TIM1_Init+0xa8>)
 80029a0:	f005 fa06 	bl	8007db0 <HAL_TIM_Encoder_Init>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80029aa:	f7ff fb6d 	bl	8002088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	4619      	mov	r1, r3
 80029ba:	4806      	ldr	r0, [pc, #24]	@ (80029d4 <MX_TIM1_Init+0xa8>)
 80029bc:	f005 ff82 	bl	80088c4 <HAL_TIMEx_MasterConfigSynchronization>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80029c6:	f7ff fb5f 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029ca:	bf00      	nop
 80029cc:	3730      	adds	r7, #48	@ 0x30
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000500 	.word	0x20000500
 80029d8:	40010000 	.word	0x40010000

080029dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08c      	sub	sp, #48	@ 0x30
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029e2:	f107 030c 	add.w	r3, r7, #12
 80029e6:	2224      	movs	r2, #36	@ 0x24
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f012 fa05 	bl	8014dfa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029f8:	4b21      	ldr	r3, [pc, #132]	@ (8002a80 <MX_TIM2_Init+0xa4>)
 80029fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a00:	4b1f      	ldr	r3, [pc, #124]	@ (8002a80 <MX_TIM2_Init+0xa4>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a06:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <MX_TIM2_Init+0xa4>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a80 <MX_TIM2_Init+0xa4>)
 8002a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a14:	4b1a      	ldr	r3, [pc, #104]	@ (8002a80 <MX_TIM2_Init+0xa4>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a1a:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <MX_TIM2_Init+0xa4>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a20:	2301      	movs	r3, #1
 8002a22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a24:	2300      	movs	r3, #0
 8002a26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a34:	2300      	movs	r3, #0
 8002a36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002a44:	f107 030c 	add.w	r3, r7, #12
 8002a48:	4619      	mov	r1, r3
 8002a4a:	480d      	ldr	r0, [pc, #52]	@ (8002a80 <MX_TIM2_Init+0xa4>)
 8002a4c:	f005 f9b0 	bl	8007db0 <HAL_TIM_Encoder_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002a56:	f7ff fb17 	bl	8002088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a62:	1d3b      	adds	r3, r7, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	4806      	ldr	r0, [pc, #24]	@ (8002a80 <MX_TIM2_Init+0xa4>)
 8002a68:	f005 ff2c 	bl	80088c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002a72:	f7ff fb09 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a76:	bf00      	nop
 8002a78:	3730      	adds	r7, #48	@ 0x30
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000548 	.word	0x20000548

08002a84 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08c      	sub	sp, #48	@ 0x30
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	2224      	movs	r2, #36	@ 0x24
 8002a90:	2100      	movs	r1, #0
 8002a92:	4618      	mov	r0, r3
 8002a94:	f012 f9b1 	bl	8014dfa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002aa0:	4b20      	ldr	r3, [pc, #128]	@ (8002b24 <MX_TIM3_Init+0xa0>)
 8002aa2:	4a21      	ldr	r2, [pc, #132]	@ (8002b28 <MX_TIM3_Init+0xa4>)
 8002aa4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b24 <MX_TIM3_Init+0xa0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aac:	4b1d      	ldr	r3, [pc, #116]	@ (8002b24 <MX_TIM3_Init+0xa0>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b24 <MX_TIM3_Init+0xa0>)
 8002ab4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ab8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aba:	4b1a      	ldr	r3, [pc, #104]	@ (8002b24 <MX_TIM3_Init+0xa0>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac0:	4b18      	ldr	r3, [pc, #96]	@ (8002b24 <MX_TIM3_Init+0xa0>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ada:	2300      	movs	r3, #0
 8002adc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002aea:	f107 030c 	add.w	r3, r7, #12
 8002aee:	4619      	mov	r1, r3
 8002af0:	480c      	ldr	r0, [pc, #48]	@ (8002b24 <MX_TIM3_Init+0xa0>)
 8002af2:	f005 f95d 	bl	8007db0 <HAL_TIM_Encoder_Init>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002afc:	f7ff fac4 	bl	8002088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4805      	ldr	r0, [pc, #20]	@ (8002b24 <MX_TIM3_Init+0xa0>)
 8002b0e:	f005 fed9 	bl	80088c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002b18:	f7ff fab6 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b1c:	bf00      	nop
 8002b1e:	3730      	adds	r7, #48	@ 0x30
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000590 	.word	0x20000590
 8002b28:	40000400 	.word	0x40000400

08002b2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08c      	sub	sp, #48	@ 0x30
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b32:	f107 030c 	add.w	r3, r7, #12
 8002b36:	2224      	movs	r2, #36	@ 0x24
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f012 f95d 	bl	8014dfa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b48:	4b20      	ldr	r3, [pc, #128]	@ (8002bcc <MX_TIM4_Init+0xa0>)
 8002b4a:	4a21      	ldr	r2, [pc, #132]	@ (8002bd0 <MX_TIM4_Init+0xa4>)
 8002b4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bcc <MX_TIM4_Init+0xa0>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b54:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <MX_TIM4_Init+0xa0>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bcc <MX_TIM4_Init+0xa0>)
 8002b5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	@ (8002bcc <MX_TIM4_Init+0xa0>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b68:	4b18      	ldr	r3, [pc, #96]	@ (8002bcc <MX_TIM4_Init+0xa0>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b76:	2301      	movs	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b86:	2301      	movs	r3, #1
 8002b88:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002b92:	f107 030c 	add.w	r3, r7, #12
 8002b96:	4619      	mov	r1, r3
 8002b98:	480c      	ldr	r0, [pc, #48]	@ (8002bcc <MX_TIM4_Init+0xa0>)
 8002b9a:	f005 f909 	bl	8007db0 <HAL_TIM_Encoder_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002ba4:	f7ff fa70 	bl	8002088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4805      	ldr	r0, [pc, #20]	@ (8002bcc <MX_TIM4_Init+0xa0>)
 8002bb6:	f005 fe85 	bl	80088c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002bc0:	f7ff fa62 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	3730      	adds	r7, #48	@ 0x30
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200005d8 	.word	0x200005d8
 8002bd0:	40000800 	.word	0x40000800

08002bd4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	@ 0x28
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bda:	f107 0320 	add.w	r3, r7, #32
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	60da      	str	r2, [r3, #12]
 8002bf0:	611a      	str	r2, [r3, #16]
 8002bf2:	615a      	str	r2, [r3, #20]
 8002bf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002bf6:	4b27      	ldr	r3, [pc, #156]	@ (8002c94 <MX_TIM5_Init+0xc0>)
 8002bf8:	4a27      	ldr	r2, [pc, #156]	@ (8002c98 <MX_TIM5_Init+0xc4>)
 8002bfa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8002bfc:	4b25      	ldr	r3, [pc, #148]	@ (8002c94 <MX_TIM5_Init+0xc0>)
 8002bfe:	2253      	movs	r2, #83	@ 0x53
 8002c00:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c02:	4b24      	ldr	r3, [pc, #144]	@ (8002c94 <MX_TIM5_Init+0xc0>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002c08:	4b22      	ldr	r3, [pc, #136]	@ (8002c94 <MX_TIM5_Init+0xc0>)
 8002c0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c0e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c10:	4b20      	ldr	r3, [pc, #128]	@ (8002c94 <MX_TIM5_Init+0xc0>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c16:	4b1f      	ldr	r3, [pc, #124]	@ (8002c94 <MX_TIM5_Init+0xc0>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002c1c:	481d      	ldr	r0, [pc, #116]	@ (8002c94 <MX_TIM5_Init+0xc0>)
 8002c1e:	f004 ffaf 	bl	8007b80 <HAL_TIM_PWM_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002c28:	f7ff fa2e 	bl	8002088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c34:	f107 0320 	add.w	r3, r7, #32
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4816      	ldr	r0, [pc, #88]	@ (8002c94 <MX_TIM5_Init+0xc0>)
 8002c3c:	f005 fe42 	bl	80088c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002c46:	f7ff fa1f 	bl	8002088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c4a:	2360      	movs	r3, #96	@ 0x60
 8002c4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	4619      	mov	r1, r3
 8002c60:	480c      	ldr	r0, [pc, #48]	@ (8002c94 <MX_TIM5_Init+0xc0>)
 8002c62:	f005 fac9 	bl	80081f8 <HAL_TIM_PWM_ConfigChannel>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002c6c:	f7ff fa0c 	bl	8002088 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	220c      	movs	r2, #12
 8002c74:	4619      	mov	r1, r3
 8002c76:	4807      	ldr	r0, [pc, #28]	@ (8002c94 <MX_TIM5_Init+0xc0>)
 8002c78:	f005 fabe 	bl	80081f8 <HAL_TIM_PWM_ConfigChannel>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002c82:	f7ff fa01 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002c86:	4803      	ldr	r0, [pc, #12]	@ (8002c94 <MX_TIM5_Init+0xc0>)
 8002c88:	f000 fc22 	bl	80034d0 <HAL_TIM_MspPostInit>

}
 8002c8c:	bf00      	nop
 8002c8e:	3728      	adds	r7, #40	@ 0x28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000620 	.word	0x20000620
 8002c98:	40000c00 	.word	0x40000c00

08002c9c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca2:	463b      	mov	r3, r7
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002caa:	4b15      	ldr	r3, [pc, #84]	@ (8002d00 <MX_TIM6_Init+0x64>)
 8002cac:	4a15      	ldr	r2, [pc, #84]	@ (8002d04 <MX_TIM6_Init+0x68>)
 8002cae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8002cb0:	4b13      	ldr	r3, [pc, #76]	@ (8002d00 <MX_TIM6_Init+0x64>)
 8002cb2:	2253      	movs	r2, #83	@ 0x53
 8002cb4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb6:	4b12      	ldr	r3, [pc, #72]	@ (8002d00 <MX_TIM6_Init+0x64>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 8002cbc:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <MX_TIM6_Init+0x64>)
 8002cbe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cc2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d00 <MX_TIM6_Init+0x64>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002cca:	480d      	ldr	r0, [pc, #52]	@ (8002d00 <MX_TIM6_Init+0x64>)
 8002ccc:	f004 fe98 	bl	8007a00 <HAL_TIM_Base_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002cd6:	f7ff f9d7 	bl	8002088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ce2:	463b      	mov	r3, r7
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4806      	ldr	r0, [pc, #24]	@ (8002d00 <MX_TIM6_Init+0x64>)
 8002ce8:	f005 fdec 	bl	80088c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002cf2:	f7ff f9c9 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000668 	.word	0x20000668
 8002d04:	40001000 	.word	0x40001000

08002d08 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b092      	sub	sp, #72	@ 0x48
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
 8002d28:	615a      	str	r2, [r3, #20]
 8002d2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	2220      	movs	r2, #32
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f012 f861 	bl	8014dfa <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002d38:	4b33      	ldr	r3, [pc, #204]	@ (8002e08 <MX_TIM8_Init+0x100>)
 8002d3a:	4a34      	ldr	r2, [pc, #208]	@ (8002e0c <MX_TIM8_Init+0x104>)
 8002d3c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 8002d3e:	4b32      	ldr	r3, [pc, #200]	@ (8002e08 <MX_TIM8_Init+0x100>)
 8002d40:	22a7      	movs	r2, #167	@ 0xa7
 8002d42:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d44:	4b30      	ldr	r3, [pc, #192]	@ (8002e08 <MX_TIM8_Init+0x100>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8002d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e08 <MX_TIM8_Init+0x100>)
 8002d4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d50:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d52:	4b2d      	ldr	r3, [pc, #180]	@ (8002e08 <MX_TIM8_Init+0x100>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002d58:	4b2b      	ldr	r3, [pc, #172]	@ (8002e08 <MX_TIM8_Init+0x100>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e08 <MX_TIM8_Init+0x100>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002d64:	4828      	ldr	r0, [pc, #160]	@ (8002e08 <MX_TIM8_Init+0x100>)
 8002d66:	f004 ff0b 	bl	8007b80 <HAL_TIM_PWM_Init>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002d70:	f7ff f98a 	bl	8002088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d74:	2300      	movs	r3, #0
 8002d76:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002d7c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d80:	4619      	mov	r1, r3
 8002d82:	4821      	ldr	r0, [pc, #132]	@ (8002e08 <MX_TIM8_Init+0x100>)
 8002d84:	f005 fd9e 	bl	80088c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002d8e:	f7ff f97b 	bl	8002088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d92:	2360      	movs	r3, #96	@ 0x60
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002da6:	2300      	movs	r3, #0
 8002da8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002db2:	2208      	movs	r2, #8
 8002db4:	4619      	mov	r1, r3
 8002db6:	4814      	ldr	r0, [pc, #80]	@ (8002e08 <MX_TIM8_Init+0x100>)
 8002db8:	f005 fa1e 	bl	80081f8 <HAL_TIM_PWM_ConfigChannel>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002dc2:	f7ff f961 	bl	8002088 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002dda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	4619      	mov	r1, r3
 8002de8:	4807      	ldr	r0, [pc, #28]	@ (8002e08 <MX_TIM8_Init+0x100>)
 8002dea:	f005 fde7 	bl	80089bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8002df4:	f7ff f948 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002df8:	4803      	ldr	r0, [pc, #12]	@ (8002e08 <MX_TIM8_Init+0x100>)
 8002dfa:	f000 fb69 	bl	80034d0 <HAL_TIM_MspPostInit>

}
 8002dfe:	bf00      	nop
 8002e00:	3748      	adds	r7, #72	@ 0x48
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200006b0 	.word	0x200006b0
 8002e0c:	40010400 	.word	0x40010400

08002e10 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
 8002e24:	615a      	str	r2, [r3, #20]
 8002e26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002e28:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea8 <MX_TIM9_Init+0x98>)
 8002e2a:	4a20      	ldr	r2, [pc, #128]	@ (8002eac <MX_TIM9_Init+0x9c>)
 8002e2c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea8 <MX_TIM9_Init+0x98>)
 8002e30:	22a7      	movs	r2, #167	@ 0xa7
 8002e32:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea8 <MX_TIM9_Init+0x98>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <MX_TIM9_Init+0x98>)
 8002e3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e40:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e42:	4b19      	ldr	r3, [pc, #100]	@ (8002ea8 <MX_TIM9_Init+0x98>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e48:	4b17      	ldr	r3, [pc, #92]	@ (8002ea8 <MX_TIM9_Init+0x98>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002e4e:	4816      	ldr	r0, [pc, #88]	@ (8002ea8 <MX_TIM9_Init+0x98>)
 8002e50:	f004 fe96 	bl	8007b80 <HAL_TIM_PWM_Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8002e5a:	f7ff f915 	bl	8002088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e5e:	2360      	movs	r3, #96	@ 0x60
 8002e60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	2200      	movs	r2, #0
 8002e72:	4619      	mov	r1, r3
 8002e74:	480c      	ldr	r0, [pc, #48]	@ (8002ea8 <MX_TIM9_Init+0x98>)
 8002e76:	f005 f9bf 	bl	80081f8 <HAL_TIM_PWM_ConfigChannel>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8002e80:	f7ff f902 	bl	8002088 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	2204      	movs	r2, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4807      	ldr	r0, [pc, #28]	@ (8002ea8 <MX_TIM9_Init+0x98>)
 8002e8c:	f005 f9b4 	bl	80081f8 <HAL_TIM_PWM_ConfigChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002e96:	f7ff f8f7 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002e9a:	4803      	ldr	r0, [pc, #12]	@ (8002ea8 <MX_TIM9_Init+0x98>)
 8002e9c:	f000 fb18 	bl	80034d0 <HAL_TIM_MspPostInit>

}
 8002ea0:	bf00      	nop
 8002ea2:	3720      	adds	r7, #32
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200006f8 	.word	0x200006f8
 8002eac:	40014000 	.word	0x40014000

08002eb0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
 8002ec4:	615a      	str	r2, [r3, #20]
 8002ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f44 <MX_TIM10_Init+0x94>)
 8002eca:	4a1f      	ldr	r2, [pc, #124]	@ (8002f48 <MX_TIM10_Init+0x98>)
 8002ecc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8002ece:	4b1d      	ldr	r3, [pc, #116]	@ (8002f44 <MX_TIM10_Init+0x94>)
 8002ed0:	22a7      	movs	r2, #167	@ 0xa7
 8002ed2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f44 <MX_TIM10_Init+0x94>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8002eda:	4b1a      	ldr	r3, [pc, #104]	@ (8002f44 <MX_TIM10_Init+0x94>)
 8002edc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ee0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee2:	4b18      	ldr	r3, [pc, #96]	@ (8002f44 <MX_TIM10_Init+0x94>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee8:	4b16      	ldr	r3, [pc, #88]	@ (8002f44 <MX_TIM10_Init+0x94>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002eee:	4815      	ldr	r0, [pc, #84]	@ (8002f44 <MX_TIM10_Init+0x94>)
 8002ef0:	f004 fd86 	bl	8007a00 <HAL_TIM_Base_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002efa:	f7ff f8c5 	bl	8002088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002efe:	4811      	ldr	r0, [pc, #68]	@ (8002f44 <MX_TIM10_Init+0x94>)
 8002f00:	f004 fe3e 	bl	8007b80 <HAL_TIM_PWM_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002f0a:	f7ff f8bd 	bl	8002088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f0e:	2360      	movs	r3, #96	@ 0x60
 8002f10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f1e:	1d3b      	adds	r3, r7, #4
 8002f20:	2200      	movs	r2, #0
 8002f22:	4619      	mov	r1, r3
 8002f24:	4807      	ldr	r0, [pc, #28]	@ (8002f44 <MX_TIM10_Init+0x94>)
 8002f26:	f005 f967 	bl	80081f8 <HAL_TIM_PWM_ConfigChannel>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002f30:	f7ff f8aa 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002f34:	4803      	ldr	r0, [pc, #12]	@ (8002f44 <MX_TIM10_Init+0x94>)
 8002f36:	f000 facb 	bl	80034d0 <HAL_TIM_MspPostInit>

}
 8002f3a:	bf00      	nop
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000740 	.word	0x20000740
 8002f48:	40014400 	.word	0x40014400

08002f4c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f52:	1d3b      	adds	r3, r7, #4
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
 8002f60:	615a      	str	r2, [r3, #20]
 8002f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002f64:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe0 <MX_TIM11_Init+0x94>)
 8002f66:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe4 <MX_TIM11_Init+0x98>)
 8002f68:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <MX_TIM11_Init+0x94>)
 8002f6c:	22a7      	movs	r2, #167	@ 0xa7
 8002f6e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f70:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe0 <MX_TIM11_Init+0x94>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8002f76:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe0 <MX_TIM11_Init+0x94>)
 8002f78:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f7c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f7e:	4b18      	ldr	r3, [pc, #96]	@ (8002fe0 <MX_TIM11_Init+0x94>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f84:	4b16      	ldr	r3, [pc, #88]	@ (8002fe0 <MX_TIM11_Init+0x94>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002f8a:	4815      	ldr	r0, [pc, #84]	@ (8002fe0 <MX_TIM11_Init+0x94>)
 8002f8c:	f004 fd38 	bl	8007a00 <HAL_TIM_Base_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002f96:	f7ff f877 	bl	8002088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002f9a:	4811      	ldr	r0, [pc, #68]	@ (8002fe0 <MX_TIM11_Init+0x94>)
 8002f9c:	f004 fdf0 	bl	8007b80 <HAL_TIM_PWM_Init>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002fa6:	f7ff f86f 	bl	8002088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002faa:	2360      	movs	r3, #96	@ 0x60
 8002fac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fba:	1d3b      	adds	r3, r7, #4
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4807      	ldr	r0, [pc, #28]	@ (8002fe0 <MX_TIM11_Init+0x94>)
 8002fc2:	f005 f919 	bl	80081f8 <HAL_TIM_PWM_ConfigChannel>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002fcc:	f7ff f85c 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002fd0:	4803      	ldr	r0, [pc, #12]	@ (8002fe0 <MX_TIM11_Init+0x94>)
 8002fd2:	f000 fa7d 	bl	80034d0 <HAL_TIM_MspPostInit>

}
 8002fd6:	bf00      	nop
 8002fd8:	3720      	adds	r7, #32
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000788 	.word	0x20000788
 8002fe4:	40014800 	.word	0x40014800

08002fe8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	60da      	str	r2, [r3, #12]
 8002ffa:	611a      	str	r2, [r3, #16]
 8002ffc:	615a      	str	r2, [r3, #20]
 8002ffe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003000:	4b1f      	ldr	r3, [pc, #124]	@ (8003080 <MX_TIM12_Init+0x98>)
 8003002:	4a20      	ldr	r2, [pc, #128]	@ (8003084 <MX_TIM12_Init+0x9c>)
 8003004:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 8003006:	4b1e      	ldr	r3, [pc, #120]	@ (8003080 <MX_TIM12_Init+0x98>)
 8003008:	2253      	movs	r2, #83	@ 0x53
 800300a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300c:	4b1c      	ldr	r3, [pc, #112]	@ (8003080 <MX_TIM12_Init+0x98>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8003012:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <MX_TIM12_Init+0x98>)
 8003014:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003018:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800301a:	4b19      	ldr	r3, [pc, #100]	@ (8003080 <MX_TIM12_Init+0x98>)
 800301c:	2200      	movs	r2, #0
 800301e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003020:	4b17      	ldr	r3, [pc, #92]	@ (8003080 <MX_TIM12_Init+0x98>)
 8003022:	2200      	movs	r2, #0
 8003024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003026:	4816      	ldr	r0, [pc, #88]	@ (8003080 <MX_TIM12_Init+0x98>)
 8003028:	f004 fdaa 	bl	8007b80 <HAL_TIM_PWM_Init>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8003032:	f7ff f829 	bl	8002088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003036:	2360      	movs	r3, #96	@ 0x60
 8003038:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003046:	1d3b      	adds	r3, r7, #4
 8003048:	2200      	movs	r2, #0
 800304a:	4619      	mov	r1, r3
 800304c:	480c      	ldr	r0, [pc, #48]	@ (8003080 <MX_TIM12_Init+0x98>)
 800304e:	f005 f8d3 	bl	80081f8 <HAL_TIM_PWM_ConfigChannel>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8003058:	f7ff f816 	bl	8002088 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800305c:	1d3b      	adds	r3, r7, #4
 800305e:	2204      	movs	r2, #4
 8003060:	4619      	mov	r1, r3
 8003062:	4807      	ldr	r0, [pc, #28]	@ (8003080 <MX_TIM12_Init+0x98>)
 8003064:	f005 f8c8 	bl	80081f8 <HAL_TIM_PWM_ConfigChannel>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800306e:	f7ff f80b 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8003072:	4803      	ldr	r0, [pc, #12]	@ (8003080 <MX_TIM12_Init+0x98>)
 8003074:	f000 fa2c 	bl	80034d0 <HAL_TIM_MspPostInit>

}
 8003078:	bf00      	nop
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	200007d0 	.word	0x200007d0
 8003084:	40001800 	.word	0x40001800

08003088 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	611a      	str	r2, [r3, #16]
 800309c:	615a      	str	r2, [r3, #20]
 800309e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80030a0:	4b1e      	ldr	r3, [pc, #120]	@ (800311c <MX_TIM13_Init+0x94>)
 80030a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003120 <MX_TIM13_Init+0x98>)
 80030a4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 80030a6:	4b1d      	ldr	r3, [pc, #116]	@ (800311c <MX_TIM13_Init+0x94>)
 80030a8:	2253      	movs	r2, #83	@ 0x53
 80030aa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ac:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <MX_TIM13_Init+0x94>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 80030b2:	4b1a      	ldr	r3, [pc, #104]	@ (800311c <MX_TIM13_Init+0x94>)
 80030b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80030b8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ba:	4b18      	ldr	r3, [pc, #96]	@ (800311c <MX_TIM13_Init+0x94>)
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c0:	4b16      	ldr	r3, [pc, #88]	@ (800311c <MX_TIM13_Init+0x94>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80030c6:	4815      	ldr	r0, [pc, #84]	@ (800311c <MX_TIM13_Init+0x94>)
 80030c8:	f004 fc9a 	bl	8007a00 <HAL_TIM_Base_Init>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80030d2:	f7fe ffd9 	bl	8002088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80030d6:	4811      	ldr	r0, [pc, #68]	@ (800311c <MX_TIM13_Init+0x94>)
 80030d8:	f004 fd52 	bl	8007b80 <HAL_TIM_PWM_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80030e2:	f7fe ffd1 	bl	8002088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030e6:	2360      	movs	r3, #96	@ 0x60
 80030e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030f6:	1d3b      	adds	r3, r7, #4
 80030f8:	2200      	movs	r2, #0
 80030fa:	4619      	mov	r1, r3
 80030fc:	4807      	ldr	r0, [pc, #28]	@ (800311c <MX_TIM13_Init+0x94>)
 80030fe:	f005 f87b 	bl	80081f8 <HAL_TIM_PWM_ConfigChannel>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003108:	f7fe ffbe 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800310c:	4803      	ldr	r0, [pc, #12]	@ (800311c <MX_TIM13_Init+0x94>)
 800310e:	f000 f9df 	bl	80034d0 <HAL_TIM_MspPostInit>

}
 8003112:	bf00      	nop
 8003114:	3720      	adds	r7, #32
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000818 	.word	0x20000818
 8003120:	40001c00 	.word	0x40001c00

08003124 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b090      	sub	sp, #64	@ 0x40
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a74      	ldr	r2, [pc, #464]	@ (8003314 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d12d      	bne.n	80031a2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800314a:	4b73      	ldr	r3, [pc, #460]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	4a72      	ldr	r2, [pc, #456]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6453      	str	r3, [r2, #68]	@ 0x44
 8003156:	4b70      	ldr	r3, [pc, #448]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003160:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
 8003166:	4b6c      	ldr	r3, [pc, #432]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	4a6b      	ldr	r2, [pc, #428]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800316c:	f043 0310 	orr.w	r3, r3, #16
 8003170:	6313      	str	r3, [r2, #48]	@ 0x30
 8003172:	4b69      	ldr	r3, [pc, #420]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800317e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003182:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003184:	2302      	movs	r3, #2
 8003186:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318c:	2300      	movs	r3, #0
 800318e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003190:	2301      	movs	r3, #1
 8003192:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003194:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003198:	4619      	mov	r1, r3
 800319a:	4860      	ldr	r0, [pc, #384]	@ (800331c <HAL_TIM_Encoder_MspInit+0x1f8>)
 800319c:	f003 fc9e 	bl	8006adc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80031a0:	e0b4      	b.n	800330c <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(tim_encoderHandle->Instance==TIM2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031aa:	d14b      	bne.n	8003244 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031ac:	2300      	movs	r3, #0
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	4b59      	ldr	r3, [pc, #356]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	4a58      	ldr	r2, [pc, #352]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80031bc:	4b56      	ldr	r3, [pc, #344]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	623b      	str	r3, [r7, #32]
 80031c6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	4b52      	ldr	r3, [pc, #328]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d0:	4a51      	ldr	r2, [pc, #324]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80031d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80031ee:	f043 0302 	orr.w	r3, r3, #2
 80031f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f4:	4b48      	ldr	r3, [pc, #288]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003200:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003206:	2302      	movs	r3, #2
 8003208:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320e:	2300      	movs	r3, #0
 8003210:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003212:	2301      	movs	r3, #1
 8003214:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003216:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800321a:	4619      	mov	r1, r3
 800321c:	4840      	ldr	r0, [pc, #256]	@ (8003320 <HAL_TIM_Encoder_MspInit+0x1fc>)
 800321e:	f003 fc5d 	bl	8006adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003222:	2308      	movs	r3, #8
 8003224:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322e:	2300      	movs	r3, #0
 8003230:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003232:	2301      	movs	r3, #1
 8003234:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003236:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800323a:	4619      	mov	r1, r3
 800323c:	4839      	ldr	r0, [pc, #228]	@ (8003324 <HAL_TIM_Encoder_MspInit+0x200>)
 800323e:	f003 fc4d 	bl	8006adc <HAL_GPIO_Init>
}
 8003242:	e063      	b.n	800330c <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(tim_encoderHandle->Instance==TIM3)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a37      	ldr	r2, [pc, #220]	@ (8003328 <HAL_TIM_Encoder_MspInit+0x204>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d12c      	bne.n	80032a8 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	4b31      	ldr	r3, [pc, #196]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	4a30      	ldr	r2, [pc, #192]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003258:	f043 0302 	orr.w	r3, r3, #2
 800325c:	6413      	str	r3, [r2, #64]	@ 0x40
 800325e:	4b2e      	ldr	r3, [pc, #184]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	4b2a      	ldr	r3, [pc, #168]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	4a29      	ldr	r2, [pc, #164]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	6313      	str	r3, [r2, #48]	@ 0x30
 800327a:	4b27      	ldr	r3, [pc, #156]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003286:	2330      	movs	r3, #48	@ 0x30
 8003288:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003292:	2300      	movs	r3, #0
 8003294:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003296:	2302      	movs	r3, #2
 8003298:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800329e:	4619      	mov	r1, r3
 80032a0:	4820      	ldr	r0, [pc, #128]	@ (8003324 <HAL_TIM_Encoder_MspInit+0x200>)
 80032a2:	f003 fc1b 	bl	8006adc <HAL_GPIO_Init>
}
 80032a6:	e031      	b.n	800330c <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(tim_encoderHandle->Instance==TIM4)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1f      	ldr	r2, [pc, #124]	@ (800332c <HAL_TIM_Encoder_MspInit+0x208>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d12c      	bne.n	800330c <HAL_TIM_Encoder_MspInit+0x1e8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	4b18      	ldr	r3, [pc, #96]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	4a17      	ldr	r2, [pc, #92]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80032bc:	f043 0304 	orr.w	r3, r3, #4
 80032c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032c2:	4b15      	ldr	r3, [pc, #84]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	4b11      	ldr	r3, [pc, #68]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	4a10      	ldr	r2, [pc, #64]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80032d8:	f043 0308 	orr.w	r3, r3, #8
 80032dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032de:	4b0e      	ldr	r3, [pc, #56]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80032ea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80032ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f0:	2302      	movs	r3, #2
 80032f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f8:	2300      	movs	r3, #0
 80032fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032fc:	2302      	movs	r3, #2
 80032fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003300:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003304:	4619      	mov	r1, r3
 8003306:	480a      	ldr	r0, [pc, #40]	@ (8003330 <HAL_TIM_Encoder_MspInit+0x20c>)
 8003308:	f003 fbe8 	bl	8006adc <HAL_GPIO_Init>
}
 800330c:	bf00      	nop
 800330e:	3740      	adds	r7, #64	@ 0x40
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40010000 	.word	0x40010000
 8003318:	40023800 	.word	0x40023800
 800331c:	40021000 	.word	0x40021000
 8003320:	40020000 	.word	0x40020000
 8003324:	40020400 	.word	0x40020400
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40020c00 	.word	0x40020c00

08003334 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a29      	ldr	r2, [pc, #164]	@ (80033e8 <HAL_TIM_PWM_MspInit+0xb4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10e      	bne.n	8003364 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	4b28      	ldr	r3, [pc, #160]	@ (80033ec <HAL_TIM_PWM_MspInit+0xb8>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	4a27      	ldr	r2, [pc, #156]	@ (80033ec <HAL_TIM_PWM_MspInit+0xb8>)
 8003350:	f043 0308 	orr.w	r3, r3, #8
 8003354:	6413      	str	r3, [r2, #64]	@ 0x40
 8003356:	4b25      	ldr	r3, [pc, #148]	@ (80033ec <HAL_TIM_PWM_MspInit+0xb8>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003362:	e03a      	b.n	80033da <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM8)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a21      	ldr	r2, [pc, #132]	@ (80033f0 <HAL_TIM_PWM_MspInit+0xbc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d10e      	bne.n	800338c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	4b1e      	ldr	r3, [pc, #120]	@ (80033ec <HAL_TIM_PWM_MspInit+0xb8>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	4a1d      	ldr	r2, [pc, #116]	@ (80033ec <HAL_TIM_PWM_MspInit+0xb8>)
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	6453      	str	r3, [r2, #68]	@ 0x44
 800337e:	4b1b      	ldr	r3, [pc, #108]	@ (80033ec <HAL_TIM_PWM_MspInit+0xb8>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	693b      	ldr	r3, [r7, #16]
}
 800338a:	e026      	b.n	80033da <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM9)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a18      	ldr	r2, [pc, #96]	@ (80033f4 <HAL_TIM_PWM_MspInit+0xc0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d10e      	bne.n	80033b4 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	4b14      	ldr	r3, [pc, #80]	@ (80033ec <HAL_TIM_PWM_MspInit+0xb8>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339e:	4a13      	ldr	r2, [pc, #76]	@ (80033ec <HAL_TIM_PWM_MspInit+0xb8>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033a6:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <HAL_TIM_PWM_MspInit+0xb8>)
 80033a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
}
 80033b2:	e012      	b.n	80033da <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM12)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a0f      	ldr	r2, [pc, #60]	@ (80033f8 <HAL_TIM_PWM_MspInit+0xc4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10d      	bne.n	80033da <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <HAL_TIM_PWM_MspInit+0xb8>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	4a09      	ldr	r2, [pc, #36]	@ (80033ec <HAL_TIM_PWM_MspInit+0xb8>)
 80033c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ce:	4b07      	ldr	r3, [pc, #28]	@ (80033ec <HAL_TIM_PWM_MspInit+0xb8>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40000c00 	.word	0x40000c00
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40010400 	.word	0x40010400
 80033f4:	40014000 	.word	0x40014000
 80033f8:	40001800 	.word	0x40001800

080033fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a2c      	ldr	r2, [pc, #176]	@ (80034bc <HAL_TIM_Base_MspInit+0xc0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d116      	bne.n	800343c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	4b2b      	ldr	r3, [pc, #172]	@ (80034c0 <HAL_TIM_Base_MspInit+0xc4>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	4a2a      	ldr	r2, [pc, #168]	@ (80034c0 <HAL_TIM_Base_MspInit+0xc4>)
 8003418:	f043 0310 	orr.w	r3, r3, #16
 800341c:	6413      	str	r3, [r2, #64]	@ 0x40
 800341e:	4b28      	ldr	r3, [pc, #160]	@ (80034c0 <HAL_TIM_Base_MspInit+0xc4>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800342a:	2200      	movs	r2, #0
 800342c:	2100      	movs	r1, #0
 800342e:	2036      	movs	r0, #54	@ 0x36
 8003430:	f001 fddb 	bl	8004fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003434:	2036      	movs	r0, #54	@ 0x36
 8003436:	f001 fdf4 	bl	8005022 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800343a:	e03a      	b.n	80034b2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a20      	ldr	r2, [pc, #128]	@ (80034c4 <HAL_TIM_Base_MspInit+0xc8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d10e      	bne.n	8003464 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	4b1d      	ldr	r3, [pc, #116]	@ (80034c0 <HAL_TIM_Base_MspInit+0xc4>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344e:	4a1c      	ldr	r2, [pc, #112]	@ (80034c0 <HAL_TIM_Base_MspInit+0xc4>)
 8003450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003454:	6453      	str	r3, [r2, #68]	@ 0x44
 8003456:	4b1a      	ldr	r3, [pc, #104]	@ (80034c0 <HAL_TIM_Base_MspInit+0xc4>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	693b      	ldr	r3, [r7, #16]
}
 8003462:	e026      	b.n	80034b2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a17      	ldr	r2, [pc, #92]	@ (80034c8 <HAL_TIM_Base_MspInit+0xcc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d10e      	bne.n	800348c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	4b13      	ldr	r3, [pc, #76]	@ (80034c0 <HAL_TIM_Base_MspInit+0xc4>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	4a12      	ldr	r2, [pc, #72]	@ (80034c0 <HAL_TIM_Base_MspInit+0xc4>)
 8003478:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800347c:	6453      	str	r3, [r2, #68]	@ 0x44
 800347e:	4b10      	ldr	r3, [pc, #64]	@ (80034c0 <HAL_TIM_Base_MspInit+0xc4>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003482:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
}
 800348a:	e012      	b.n	80034b2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM13)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a0e      	ldr	r2, [pc, #56]	@ (80034cc <HAL_TIM_Base_MspInit+0xd0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d10d      	bne.n	80034b2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	4b09      	ldr	r3, [pc, #36]	@ (80034c0 <HAL_TIM_Base_MspInit+0xc4>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	4a08      	ldr	r2, [pc, #32]	@ (80034c0 <HAL_TIM_Base_MspInit+0xc4>)
 80034a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034a6:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <HAL_TIM_Base_MspInit+0xc4>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
}
 80034b2:	bf00      	nop
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40001000 	.word	0x40001000
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40014400 	.word	0x40014400
 80034c8:	40014800 	.word	0x40014800
 80034cc:	40001c00 	.word	0x40001c00

080034d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08e      	sub	sp, #56	@ 0x38
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a80      	ldr	r2, [pc, #512]	@ (80036f0 <HAL_TIM_MspPostInit+0x220>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d11e      	bne.n	8003530 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	623b      	str	r3, [r7, #32]
 80034f6:	4b7f      	ldr	r3, [pc, #508]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	4a7e      	ldr	r2, [pc, #504]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6313      	str	r3, [r2, #48]	@ 0x30
 8003502:	4b7c      	ldr	r3, [pc, #496]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	623b      	str	r3, [r7, #32]
 800350c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800350e:	2309      	movs	r3, #9
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003512:	2302      	movs	r3, #2
 8003514:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351a:	2300      	movs	r3, #0
 800351c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800351e:	2302      	movs	r3, #2
 8003520:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003526:	4619      	mov	r1, r3
 8003528:	4873      	ldr	r0, [pc, #460]	@ (80036f8 <HAL_TIM_MspPostInit+0x228>)
 800352a:	f003 fad7 	bl	8006adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800352e:	e0da      	b.n	80036e6 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM8)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a71      	ldr	r2, [pc, #452]	@ (80036fc <HAL_TIM_MspPostInit+0x22c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d11f      	bne.n	800357a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	4b6d      	ldr	r3, [pc, #436]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	4a6c      	ldr	r2, [pc, #432]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 8003544:	f043 0304 	orr.w	r3, r3, #4
 8003548:	6313      	str	r3, [r2, #48]	@ 0x30
 800354a:	4b6a      	ldr	r3, [pc, #424]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003556:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800355a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355c:	2302      	movs	r3, #2
 800355e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003564:	2300      	movs	r3, #0
 8003566:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003568:	2303      	movs	r3, #3
 800356a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003570:	4619      	mov	r1, r3
 8003572:	4863      	ldr	r0, [pc, #396]	@ (8003700 <HAL_TIM_MspPostInit+0x230>)
 8003574:	f003 fab2 	bl	8006adc <HAL_GPIO_Init>
}
 8003578:	e0b5      	b.n	80036e6 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM9)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a61      	ldr	r2, [pc, #388]	@ (8003704 <HAL_TIM_MspPostInit+0x234>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d11e      	bne.n	80035c2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
 8003588:	4b5a      	ldr	r3, [pc, #360]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	4a59      	ldr	r2, [pc, #356]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 800358e:	f043 0310 	orr.w	r3, r3, #16
 8003592:	6313      	str	r3, [r2, #48]	@ 0x30
 8003594:	4b57      	ldr	r3, [pc, #348]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80035a0:	2360      	movs	r3, #96	@ 0x60
 80035a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a4:	2302      	movs	r3, #2
 80035a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ac:	2300      	movs	r3, #0
 80035ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80035b0:	2303      	movs	r3, #3
 80035b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035b8:	4619      	mov	r1, r3
 80035ba:	4853      	ldr	r0, [pc, #332]	@ (8003708 <HAL_TIM_MspPostInit+0x238>)
 80035bc:	f003 fa8e 	bl	8006adc <HAL_GPIO_Init>
}
 80035c0:	e091      	b.n	80036e6 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM10)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a51      	ldr	r2, [pc, #324]	@ (800370c <HAL_TIM_MspPostInit+0x23c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d11f      	bne.n	800360c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	4b48      	ldr	r3, [pc, #288]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 80035d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d4:	4a47      	ldr	r2, [pc, #284]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 80035d6:	f043 0302 	orr.w	r3, r3, #2
 80035da:	6313      	str	r3, [r2, #48]	@ 0x30
 80035dc:	4b45      	ldr	r3, [pc, #276]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f6:	2300      	movs	r3, #0
 80035f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80035fa:	2303      	movs	r3, #3
 80035fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003602:	4619      	mov	r1, r3
 8003604:	4842      	ldr	r0, [pc, #264]	@ (8003710 <HAL_TIM_MspPostInit+0x240>)
 8003606:	f003 fa69 	bl	8006adc <HAL_GPIO_Init>
}
 800360a:	e06c      	b.n	80036e6 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM11)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a40      	ldr	r2, [pc, #256]	@ (8003714 <HAL_TIM_MspPostInit+0x244>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d11f      	bne.n	8003656 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	4b36      	ldr	r3, [pc, #216]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	4a35      	ldr	r2, [pc, #212]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 8003620:	f043 0302 	orr.w	r3, r3, #2
 8003624:	6313      	str	r3, [r2, #48]	@ 0x30
 8003626:	4b33      	ldr	r3, [pc, #204]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003636:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003638:	2302      	movs	r3, #2
 800363a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	2300      	movs	r3, #0
 800363e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003640:	2300      	movs	r3, #0
 8003642:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003644:	2303      	movs	r3, #3
 8003646:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003648:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800364c:	4619      	mov	r1, r3
 800364e:	4830      	ldr	r0, [pc, #192]	@ (8003710 <HAL_TIM_MspPostInit+0x240>)
 8003650:	f003 fa44 	bl	8006adc <HAL_GPIO_Init>
}
 8003654:	e047      	b.n	80036e6 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM12)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a2f      	ldr	r2, [pc, #188]	@ (8003718 <HAL_TIM_MspPostInit+0x248>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d11f      	bne.n	80036a0 <HAL_TIM_MspPostInit+0x1d0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	4b23      	ldr	r3, [pc, #140]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 8003666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003668:	4a22      	ldr	r2, [pc, #136]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 800366a:	f043 0302 	orr.w	r3, r3, #2
 800366e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003670:	4b20      	ldr	r3, [pc, #128]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800367c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003680:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003682:	2302      	movs	r3, #2
 8003684:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368a:	2300      	movs	r3, #0
 800368c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800368e:	2309      	movs	r3, #9
 8003690:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003696:	4619      	mov	r1, r3
 8003698:	481d      	ldr	r0, [pc, #116]	@ (8003710 <HAL_TIM_MspPostInit+0x240>)
 800369a:	f003 fa1f 	bl	8006adc <HAL_GPIO_Init>
}
 800369e:	e022      	b.n	80036e6 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM13)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1d      	ldr	r2, [pc, #116]	@ (800371c <HAL_TIM_MspPostInit+0x24c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d11d      	bne.n	80036e6 <HAL_TIM_MspPostInit+0x216>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b2:	4a10      	ldr	r2, [pc, #64]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ba:	4b0e      	ldr	r3, [pc, #56]	@ (80036f4 <HAL_TIM_MspPostInit+0x224>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036c6:	2340      	movs	r3, #64	@ 0x40
 80036c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d2:	2300      	movs	r3, #0
 80036d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80036d6:	2309      	movs	r3, #9
 80036d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036de:	4619      	mov	r1, r3
 80036e0:	4805      	ldr	r0, [pc, #20]	@ (80036f8 <HAL_TIM_MspPostInit+0x228>)
 80036e2:	f003 f9fb 	bl	8006adc <HAL_GPIO_Init>
}
 80036e6:	bf00      	nop
 80036e8:	3738      	adds	r7, #56	@ 0x38
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40000c00 	.word	0x40000c00
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40020000 	.word	0x40020000
 80036fc:	40010400 	.word	0x40010400
 8003700:	40020800 	.word	0x40020800
 8003704:	40014000 	.word	0x40014000
 8003708:	40021000 	.word	0x40021000
 800370c:	40014400 	.word	0x40014400
 8003710:	40020400 	.word	0x40020400
 8003714:	40014800 	.word	0x40014800
 8003718:	40001800 	.word	0x40001800
 800371c:	40001c00 	.word	0x40001c00

08003720 <udpClient_connect>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port);

void udpClient_connect(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
	err_t err;
	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8003726:	f00e fef5 	bl	8012514 <udp_new>
 800372a:	4603      	mov	r3, r0
 800372c:	4a67      	ldr	r2, [pc, #412]	@ (80038cc <udpClient_connect+0x1ac>)
 800372e:	6013      	str	r3, [r2, #0]
	/* Bind the block to module's IP and port */
	IP_ADDR4(&stm32IPaddr, stm32_addr.a, stm32_addr.b, stm32_addr.c, stm32_addr.d); //--- stm32
 8003730:	4b67      	ldr	r3, [pc, #412]	@ (80038d0 <udpClient_connect+0x1b0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	061a      	lsls	r2, r3, #24
 8003736:	4b66      	ldr	r3, [pc, #408]	@ (80038d0 <udpClient_connect+0x1b0>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	041b      	lsls	r3, r3, #16
 800373c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003740:	431a      	orrs	r2, r3
 8003742:	4b63      	ldr	r3, [pc, #396]	@ (80038d0 <udpClient_connect+0x1b0>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	b29b      	uxth	r3, r3
 800374a:	431a      	orrs	r2, r3
 800374c:	4b60      	ldr	r3, [pc, #384]	@ (80038d0 <udpClient_connect+0x1b0>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	4313      	orrs	r3, r2
 8003754:	061a      	lsls	r2, r3, #24
 8003756:	4b5e      	ldr	r3, [pc, #376]	@ (80038d0 <udpClient_connect+0x1b0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	0619      	lsls	r1, r3, #24
 800375c:	4b5c      	ldr	r3, [pc, #368]	@ (80038d0 <udpClient_connect+0x1b0>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	041b      	lsls	r3, r3, #16
 8003762:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003766:	4319      	orrs	r1, r3
 8003768:	4b59      	ldr	r3, [pc, #356]	@ (80038d0 <udpClient_connect+0x1b0>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	b29b      	uxth	r3, r3
 8003770:	4319      	orrs	r1, r3
 8003772:	4b57      	ldr	r3, [pc, #348]	@ (80038d0 <udpClient_connect+0x1b0>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	430b      	orrs	r3, r1
 800377a:	021b      	lsls	r3, r3, #8
 800377c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003780:	431a      	orrs	r2, r3
 8003782:	4b53      	ldr	r3, [pc, #332]	@ (80038d0 <udpClient_connect+0x1b0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	0619      	lsls	r1, r3, #24
 8003788:	4b51      	ldr	r3, [pc, #324]	@ (80038d0 <udpClient_connect+0x1b0>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003792:	4319      	orrs	r1, r3
 8003794:	4b4e      	ldr	r3, [pc, #312]	@ (80038d0 <udpClient_connect+0x1b0>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	b29b      	uxth	r3, r3
 800379c:	4319      	orrs	r1, r3
 800379e:	4b4c      	ldr	r3, [pc, #304]	@ (80038d0 <udpClient_connect+0x1b0>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	430b      	orrs	r3, r1
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80037ac:	431a      	orrs	r2, r3
 80037ae:	4b48      	ldr	r3, [pc, #288]	@ (80038d0 <udpClient_connect+0x1b0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	0619      	lsls	r1, r3, #24
 80037b4:	4b46      	ldr	r3, [pc, #280]	@ (80038d0 <udpClient_connect+0x1b0>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	041b      	lsls	r3, r3, #16
 80037ba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80037be:	4319      	orrs	r1, r3
 80037c0:	4b43      	ldr	r3, [pc, #268]	@ (80038d0 <udpClient_connect+0x1b0>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	4319      	orrs	r1, r3
 80037ca:	4b41      	ldr	r3, [pc, #260]	@ (80038d0 <udpClient_connect+0x1b0>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	430b      	orrs	r3, r1
 80037d2:	0e1b      	lsrs	r3, r3, #24
 80037d4:	4313      	orrs	r3, r2
 80037d6:	4a3f      	ldr	r2, [pc, #252]	@ (80038d4 <udpClient_connect+0x1b4>)
 80037d8:	6013      	str	r3, [r2, #0]
	udp_bind(upcb, &stm32IPaddr, stm32_addr.port);
 80037da:	4b3c      	ldr	r3, [pc, #240]	@ (80038cc <udpClient_connect+0x1ac>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a3c      	ldr	r2, [pc, #240]	@ (80038d0 <udpClient_connect+0x1b0>)
 80037e0:	6912      	ldr	r2, [r2, #16]
 80037e2:	b292      	uxth	r2, r2
 80037e4:	493b      	ldr	r1, [pc, #236]	@ (80038d4 <udpClient_connect+0x1b4>)
 80037e6:	4618      	mov	r0, r3
 80037e8:	f00e fd7e 	bl	80122e8 <udp_bind>
	/* configure destination IP address and port */
	IP_ADDR4(&pcIPaddr, pc_addr.a, pc_addr.b, pc_addr.c, pc_addr.d); //--- NUC/MINI PC
 80037ec:	4b3a      	ldr	r3, [pc, #232]	@ (80038d8 <udpClient_connect+0x1b8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	061a      	lsls	r2, r3, #24
 80037f2:	4b39      	ldr	r3, [pc, #228]	@ (80038d8 <udpClient_connect+0x1b8>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	041b      	lsls	r3, r3, #16
 80037f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80037fc:	431a      	orrs	r2, r3
 80037fe:	4b36      	ldr	r3, [pc, #216]	@ (80038d8 <udpClient_connect+0x1b8>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	b29b      	uxth	r3, r3
 8003806:	431a      	orrs	r2, r3
 8003808:	4b33      	ldr	r3, [pc, #204]	@ (80038d8 <udpClient_connect+0x1b8>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	4313      	orrs	r3, r2
 8003810:	061a      	lsls	r2, r3, #24
 8003812:	4b31      	ldr	r3, [pc, #196]	@ (80038d8 <udpClient_connect+0x1b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	0619      	lsls	r1, r3, #24
 8003818:	4b2f      	ldr	r3, [pc, #188]	@ (80038d8 <udpClient_connect+0x1b8>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003822:	4319      	orrs	r1, r3
 8003824:	4b2c      	ldr	r3, [pc, #176]	@ (80038d8 <udpClient_connect+0x1b8>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	b29b      	uxth	r3, r3
 800382c:	4319      	orrs	r1, r3
 800382e:	4b2a      	ldr	r3, [pc, #168]	@ (80038d8 <udpClient_connect+0x1b8>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	430b      	orrs	r3, r1
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800383c:	431a      	orrs	r2, r3
 800383e:	4b26      	ldr	r3, [pc, #152]	@ (80038d8 <udpClient_connect+0x1b8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	0619      	lsls	r1, r3, #24
 8003844:	4b24      	ldr	r3, [pc, #144]	@ (80038d8 <udpClient_connect+0x1b8>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	041b      	lsls	r3, r3, #16
 800384a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800384e:	4319      	orrs	r1, r3
 8003850:	4b21      	ldr	r3, [pc, #132]	@ (80038d8 <udpClient_connect+0x1b8>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	b29b      	uxth	r3, r3
 8003858:	4319      	orrs	r1, r3
 800385a:	4b1f      	ldr	r3, [pc, #124]	@ (80038d8 <udpClient_connect+0x1b8>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	430b      	orrs	r3, r1
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003868:	431a      	orrs	r2, r3
 800386a:	4b1b      	ldr	r3, [pc, #108]	@ (80038d8 <udpClient_connect+0x1b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	0619      	lsls	r1, r3, #24
 8003870:	4b19      	ldr	r3, [pc, #100]	@ (80038d8 <udpClient_connect+0x1b8>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	041b      	lsls	r3, r3, #16
 8003876:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800387a:	4319      	orrs	r1, r3
 800387c:	4b16      	ldr	r3, [pc, #88]	@ (80038d8 <udpClient_connect+0x1b8>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	b29b      	uxth	r3, r3
 8003884:	4319      	orrs	r1, r3
 8003886:	4b14      	ldr	r3, [pc, #80]	@ (80038d8 <udpClient_connect+0x1b8>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	430b      	orrs	r3, r1
 800388e:	0e1b      	lsrs	r3, r3, #24
 8003890:	4313      	orrs	r3, r2
 8003892:	4a12      	ldr	r2, [pc, #72]	@ (80038dc <udpClient_connect+0x1bc>)
 8003894:	6013      	str	r3, [r2, #0]
	err= udp_connect(upcb, &pcIPaddr, pc_addr.port);
 8003896:	4b0d      	ldr	r3, [pc, #52]	@ (80038cc <udpClient_connect+0x1ac>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a0f      	ldr	r2, [pc, #60]	@ (80038d8 <udpClient_connect+0x1b8>)
 800389c:	6912      	ldr	r2, [r2, #16]
 800389e:	b292      	uxth	r2, r2
 80038a0:	490e      	ldr	r1, [pc, #56]	@ (80038dc <udpClient_connect+0x1bc>)
 80038a2:	4618      	mov	r0, r3
 80038a4:	f00e fda8 	bl	80123f8 <udp_connect>
 80038a8:	4603      	mov	r3, r0
 80038aa:	71fb      	strb	r3, [r7, #7]

	if (err == ERR_OK)
 80038ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d106      	bne.n	80038c2 <udpClient_connect+0x1a2>
	{
		udp_recv(upcb, udp_receive_callback, NULL);
 80038b4:	4b05      	ldr	r3, [pc, #20]	@ (80038cc <udpClient_connect+0x1ac>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2200      	movs	r2, #0
 80038ba:	4909      	ldr	r1, [pc, #36]	@ (80038e0 <udpClient_connect+0x1c0>)
 80038bc:	4618      	mov	r0, r3
 80038be:	f00e fe09 	bl	80124d4 <udp_recv>
	}
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000860 	.word	0x20000860
 80038d0:	2000003c 	.word	0x2000003c
 80038d4:	20000864 	.word	0x20000864
 80038d8:	20000050 	.word	0x20000050
 80038dc:	20000868 	.word	0x20000868
 80038e0:	08003959 	.word	0x08003959

080038e4 <udpClient_send>:


void udpClient_send(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
  struct pbuf *txBuf;

  int len = sizeof(udp_tx_buffer);
 80038ea:	2340      	movs	r3, #64	@ 0x40
 80038ec:	607b      	str	r3, [r7, #4]

  memcpy(udp_tx_buffer +  3, &udp_tx, sizeof(udpTx_t));
 80038ee:	4b14      	ldr	r3, [pc, #80]	@ (8003940 <udpClient_send+0x5c>)
 80038f0:	2220      	movs	r2, #32
 80038f2:	4914      	ldr	r1, [pc, #80]	@ (8003944 <udpClient_send+0x60>)
 80038f4:	4618      	mov	r0, r3
 80038f6:	f011 faf6 	bl	8014ee6 <memcpy>

  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_POOL);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8003902:	4619      	mov	r1, r3
 8003904:	2036      	movs	r0, #54	@ 0x36
 8003906:	f008 f8c1 	bl	800ba8c <pbuf_alloc>
 800390a:	6038      	str	r0, [r7, #0]

  if (txBuf != NULL)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d012      	beq.n	8003938 <udpClient_send+0x54>
  {
    pbuf_take(txBuf, udp_tx_buffer, len);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	b29b      	uxth	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	490b      	ldr	r1, [pc, #44]	@ (8003948 <udpClient_send+0x64>)
 800391a:	6838      	ldr	r0, [r7, #0]
 800391c:	f008 fe06 	bl	800c52c <pbuf_take>

    udp_sendto(upcb, txBuf, &pcIPaddr, pc_addr.port);
 8003920:	4b0a      	ldr	r3, [pc, #40]	@ (800394c <udpClient_send+0x68>)
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	4b0a      	ldr	r3, [pc, #40]	@ (8003950 <udpClient_send+0x6c>)
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	b29b      	uxth	r3, r3
 800392a:	4a0a      	ldr	r2, [pc, #40]	@ (8003954 <udpClient_send+0x70>)
 800392c:	6839      	ldr	r1, [r7, #0]
 800392e:	f00e fb25 	bl	8011f7c <udp_sendto>

    pbuf_free(txBuf);
 8003932:	6838      	ldr	r0, [r7, #0]
 8003934:	f008 fb8e 	bl	800c054 <pbuf_free>
  }
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000067 	.word	0x20000067
 8003944:	2000086c 	.word	0x2000086c
 8003948:	20000064 	.word	0x20000064
 800394c:	20000860 	.word	0x20000860
 8003950:	20000050 	.word	0x20000050
 8003954:	20000868 	.word	0x20000868

08003958 <udp_receive_callback>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	memcpy(udp_rx_buffer, p->payload, p->len);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6859      	ldr	r1, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	895b      	ldrh	r3, [r3, #10]
 800396e:	461a      	mov	r2, r3
 8003970:	4807      	ldr	r0, [pc, #28]	@ (8003990 <udp_receive_callback+0x38>)
 8003972:	f011 fab8 	bl	8014ee6 <memcpy>

	memcpy(&udp_rx, udp_rx_buffer +  3, sizeof(udpRx_t));
 8003976:	4b07      	ldr	r3, [pc, #28]	@ (8003994 <udp_receive_callback+0x3c>)
 8003978:	220e      	movs	r2, #14
 800397a:	4619      	mov	r1, r3
 800397c:	4806      	ldr	r0, [pc, #24]	@ (8003998 <udp_receive_callback+0x40>)
 800397e:	f011 fab2 	bl	8014ee6 <memcpy>

	pbuf_free(p);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f008 fb66 	bl	800c054 <pbuf_free>
}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	2000089c 	.word	0x2000089c
 8003994:	2000089f 	.word	0x2000089f
 8003998:	2000088c 	.word	0x2000088c

0800399c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80039a0:	4b11      	ldr	r3, [pc, #68]	@ (80039e8 <MX_UART4_Init+0x4c>)
 80039a2:	4a12      	ldr	r2, [pc, #72]	@ (80039ec <MX_UART4_Init+0x50>)
 80039a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80039a6:	4b10      	ldr	r3, [pc, #64]	@ (80039e8 <MX_UART4_Init+0x4c>)
 80039a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80039ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80039ae:	4b0e      	ldr	r3, [pc, #56]	@ (80039e8 <MX_UART4_Init+0x4c>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80039b4:	4b0c      	ldr	r3, [pc, #48]	@ (80039e8 <MX_UART4_Init+0x4c>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80039ba:	4b0b      	ldr	r3, [pc, #44]	@ (80039e8 <MX_UART4_Init+0x4c>)
 80039bc:	2200      	movs	r2, #0
 80039be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80039c0:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <MX_UART4_Init+0x4c>)
 80039c2:	220c      	movs	r2, #12
 80039c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039c6:	4b08      	ldr	r3, [pc, #32]	@ (80039e8 <MX_UART4_Init+0x4c>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80039cc:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <MX_UART4_Init+0x4c>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80039d2:	4805      	ldr	r0, [pc, #20]	@ (80039e8 <MX_UART4_Init+0x4c>)
 80039d4:	f005 f858 	bl	8008a88 <HAL_UART_Init>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80039de:	f7fe fb53 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200008dc 	.word	0x200008dc
 80039ec:	40004c00 	.word	0x40004c00

080039f0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80039f4:	4b11      	ldr	r3, [pc, #68]	@ (8003a3c <MX_UART5_Init+0x4c>)
 80039f6:	4a12      	ldr	r2, [pc, #72]	@ (8003a40 <MX_UART5_Init+0x50>)
 80039f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80039fa:	4b10      	ldr	r3, [pc, #64]	@ (8003a3c <MX_UART5_Init+0x4c>)
 80039fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003a00:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003a02:	4b0e      	ldr	r3, [pc, #56]	@ (8003a3c <MX_UART5_Init+0x4c>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003a08:	4b0c      	ldr	r3, [pc, #48]	@ (8003a3c <MX_UART5_Init+0x4c>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a3c <MX_UART5_Init+0x4c>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003a14:	4b09      	ldr	r3, [pc, #36]	@ (8003a3c <MX_UART5_Init+0x4c>)
 8003a16:	220c      	movs	r2, #12
 8003a18:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a1a:	4b08      	ldr	r3, [pc, #32]	@ (8003a3c <MX_UART5_Init+0x4c>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a20:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <MX_UART5_Init+0x4c>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003a26:	4805      	ldr	r0, [pc, #20]	@ (8003a3c <MX_UART5_Init+0x4c>)
 8003a28:	f005 f82e 	bl	8008a88 <HAL_UART_Init>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003a32:	f7fe fb29 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003a36:	bf00      	nop
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000924 	.word	0x20000924
 8003a40:	40005000 	.word	0x40005000

08003a44 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a48:	4b11      	ldr	r3, [pc, #68]	@ (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a4a:	4a12      	ldr	r2, [pc, #72]	@ (8003a94 <MX_USART1_UART_Init+0x50>)
 8003a4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a4e:	4b10      	ldr	r3, [pc, #64]	@ (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003a54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a56:	4b0e      	ldr	r3, [pc, #56]	@ (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a62:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a68:	4b09      	ldr	r3, [pc, #36]	@ (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a6e:	4b08      	ldr	r3, [pc, #32]	@ (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a74:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a7a:	4805      	ldr	r0, [pc, #20]	@ (8003a90 <MX_USART1_UART_Init+0x4c>)
 8003a7c:	f005 f804 	bl	8008a88 <HAL_UART_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a86:	f7fe faff 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	2000096c 	.word	0x2000096c
 8003a94:	40011000 	.word	0x40011000

08003a98 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ae4 <MX_USART2_UART_Init+0x4c>)
 8003a9e:	4a12      	ldr	r2, [pc, #72]	@ (8003ae8 <MX_USART2_UART_Init+0x50>)
 8003aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003aa2:	4b10      	ldr	r3, [pc, #64]	@ (8003ae4 <MX_USART2_UART_Init+0x4c>)
 8003aa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae4 <MX_USART2_UART_Init+0x4c>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae4 <MX_USART2_UART_Init+0x4c>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <MX_USART2_UART_Init+0x4c>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003abc:	4b09      	ldr	r3, [pc, #36]	@ (8003ae4 <MX_USART2_UART_Init+0x4c>)
 8003abe:	220c      	movs	r2, #12
 8003ac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ac2:	4b08      	ldr	r3, [pc, #32]	@ (8003ae4 <MX_USART2_UART_Init+0x4c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ac8:	4b06      	ldr	r3, [pc, #24]	@ (8003ae4 <MX_USART2_UART_Init+0x4c>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ace:	4805      	ldr	r0, [pc, #20]	@ (8003ae4 <MX_USART2_UART_Init+0x4c>)
 8003ad0:	f004 ffda 	bl	8008a88 <HAL_UART_Init>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003ada:	f7fe fad5 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	200009b4 	.word	0x200009b4
 8003ae8:	40004400 	.word	0x40004400

08003aec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003af0:	4b11      	ldr	r3, [pc, #68]	@ (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003af2:	4a12      	ldr	r2, [pc, #72]	@ (8003b3c <MX_USART3_UART_Init+0x50>)
 8003af4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003af6:	4b10      	ldr	r3, [pc, #64]	@ (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003af8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003afc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003afe:	4b0e      	ldr	r3, [pc, #56]	@ (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003b04:	4b0c      	ldr	r3, [pc, #48]	@ (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003b10:	4b09      	ldr	r3, [pc, #36]	@ (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003b12:	220c      	movs	r2, #12
 8003b14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b16:	4b08      	ldr	r3, [pc, #32]	@ (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b1c:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003b22:	4805      	ldr	r0, [pc, #20]	@ (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003b24:	f004 ffb0 	bl	8008a88 <HAL_UART_Init>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003b2e:	f7fe faab 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200009fc 	.word	0x200009fc
 8003b3c:	40004800 	.word	0x40004800

08003b40 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003b44:	4b11      	ldr	r3, [pc, #68]	@ (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b46:	4a12      	ldr	r2, [pc, #72]	@ (8003b90 <MX_USART6_UART_Init+0x50>)
 8003b48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003b4a:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003b52:	4b0e      	ldr	r3, [pc, #56]	@ (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003b58:	4b0c      	ldr	r3, [pc, #48]	@ (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003b64:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b66:	220c      	movs	r2, #12
 8003b68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b6a:	4b08      	ldr	r3, [pc, #32]	@ (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b70:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003b76:	4805      	ldr	r0, [pc, #20]	@ (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b78:	f004 ff86 	bl	8008a88 <HAL_UART_Init>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003b82:	f7fe fa81 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000a44 	.word	0x20000a44
 8003b90:	40011400 	.word	0x40011400

08003b94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b096      	sub	sp, #88	@ 0x58
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a4a      	ldr	r2, [pc, #296]	@ (8003cdc <HAL_UART_MspInit+0x148>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	f040 80a0 	bne.w	8003cf8 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003bb8:	2300      	movs	r3, #0
 8003bba:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bbc:	4b48      	ldr	r3, [pc, #288]	@ (8003ce0 <HAL_UART_MspInit+0x14c>)
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	4a47      	ldr	r2, [pc, #284]	@ (8003ce0 <HAL_UART_MspInit+0x14c>)
 8003bc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003bc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bc8:	4b45      	ldr	r3, [pc, #276]	@ (8003ce0 <HAL_UART_MspInit+0x14c>)
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd8:	4b41      	ldr	r3, [pc, #260]	@ (8003ce0 <HAL_UART_MspInit+0x14c>)
 8003bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bdc:	4a40      	ldr	r2, [pc, #256]	@ (8003ce0 <HAL_UART_MspInit+0x14c>)
 8003bde:	f043 0304 	orr.w	r3, r3, #4
 8003be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003be4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce0 <HAL_UART_MspInit+0x14c>)
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003bf0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003bf4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003c02:	2308      	movs	r3, #8
 8003c04:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c06:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4835      	ldr	r0, [pc, #212]	@ (8003ce4 <HAL_UART_MspInit+0x150>)
 8003c0e:	f002 ff65 	bl	8006adc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003c12:	4b35      	ldr	r3, [pc, #212]	@ (8003ce8 <HAL_UART_MspInit+0x154>)
 8003c14:	4a35      	ldr	r2, [pc, #212]	@ (8003cec <HAL_UART_MspInit+0x158>)
 8003c16:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003c18:	4b33      	ldr	r3, [pc, #204]	@ (8003ce8 <HAL_UART_MspInit+0x154>)
 8003c1a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c1e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c20:	4b31      	ldr	r3, [pc, #196]	@ (8003ce8 <HAL_UART_MspInit+0x154>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c26:	4b30      	ldr	r3, [pc, #192]	@ (8003ce8 <HAL_UART_MspInit+0x154>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce8 <HAL_UART_MspInit+0x154>)
 8003c2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c32:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c34:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce8 <HAL_UART_MspInit+0x154>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce8 <HAL_UART_MspInit+0x154>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003c40:	4b29      	ldr	r3, [pc, #164]	@ (8003ce8 <HAL_UART_MspInit+0x154>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c46:	4b28      	ldr	r3, [pc, #160]	@ (8003ce8 <HAL_UART_MspInit+0x154>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c4c:	4b26      	ldr	r3, [pc, #152]	@ (8003ce8 <HAL_UART_MspInit+0x154>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003c52:	4825      	ldr	r0, [pc, #148]	@ (8003ce8 <HAL_UART_MspInit+0x154>)
 8003c54:	f001 fa00 	bl	8005058 <HAL_DMA_Init>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003c5e:	f7fe fa13 	bl	8002088 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a20      	ldr	r2, [pc, #128]	@ (8003ce8 <HAL_UART_MspInit+0x154>)
 8003c66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c68:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce8 <HAL_UART_MspInit+0x154>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003c6e:	4b20      	ldr	r3, [pc, #128]	@ (8003cf0 <HAL_UART_MspInit+0x15c>)
 8003c70:	4a20      	ldr	r2, [pc, #128]	@ (8003cf4 <HAL_UART_MspInit+0x160>)
 8003c72:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8003c74:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf0 <HAL_UART_MspInit+0x15c>)
 8003c76:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c7a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf0 <HAL_UART_MspInit+0x15c>)
 8003c7e:	2240      	movs	r2, #64	@ 0x40
 8003c80:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c82:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf0 <HAL_UART_MspInit+0x15c>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c88:	4b19      	ldr	r3, [pc, #100]	@ (8003cf0 <HAL_UART_MspInit+0x15c>)
 8003c8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c8e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c90:	4b17      	ldr	r3, [pc, #92]	@ (8003cf0 <HAL_UART_MspInit+0x15c>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c96:	4b16      	ldr	r3, [pc, #88]	@ (8003cf0 <HAL_UART_MspInit+0x15c>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003c9c:	4b14      	ldr	r3, [pc, #80]	@ (8003cf0 <HAL_UART_MspInit+0x15c>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ca2:	4b13      	ldr	r3, [pc, #76]	@ (8003cf0 <HAL_UART_MspInit+0x15c>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ca8:	4b11      	ldr	r3, [pc, #68]	@ (8003cf0 <HAL_UART_MspInit+0x15c>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003cae:	4810      	ldr	r0, [pc, #64]	@ (8003cf0 <HAL_UART_MspInit+0x15c>)
 8003cb0:	f001 f9d2 	bl	8005058 <HAL_DMA_Init>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003cba:	f7fe f9e5 	bl	8002088 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8003cf0 <HAL_UART_MspInit+0x15c>)
 8003cc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf0 <HAL_UART_MspInit+0x15c>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2100      	movs	r1, #0
 8003cce:	2034      	movs	r0, #52	@ 0x34
 8003cd0:	f001 f98b 	bl	8004fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003cd4:	2034      	movs	r0, #52	@ 0x34
 8003cd6:	f001 f9a4 	bl	8005022 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003cda:	e375      	b.n	80043c8 <HAL_UART_MspInit+0x834>
 8003cdc:	40004c00 	.word	0x40004c00
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	40020800 	.word	0x40020800
 8003ce8:	20000a8c 	.word	0x20000a8c
 8003cec:	40026040 	.word	0x40026040
 8003cf0:	20000aec 	.word	0x20000aec
 8003cf4:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a5a      	ldr	r2, [pc, #360]	@ (8003e68 <HAL_UART_MspInit+0x2d4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	f040 80c2 	bne.w	8003e88 <HAL_UART_MspInit+0x2f4>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003d04:	2300      	movs	r3, #0
 8003d06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d08:	4b58      	ldr	r3, [pc, #352]	@ (8003e6c <HAL_UART_MspInit+0x2d8>)
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	4a57      	ldr	r2, [pc, #348]	@ (8003e6c <HAL_UART_MspInit+0x2d8>)
 8003d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d12:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d14:	4b55      	ldr	r3, [pc, #340]	@ (8003e6c <HAL_UART_MspInit+0x2d8>)
 8003d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d20:	2300      	movs	r3, #0
 8003d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d24:	4b51      	ldr	r3, [pc, #324]	@ (8003e6c <HAL_UART_MspInit+0x2d8>)
 8003d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d28:	4a50      	ldr	r2, [pc, #320]	@ (8003e6c <HAL_UART_MspInit+0x2d8>)
 8003d2a:	f043 0304 	orr.w	r3, r3, #4
 8003d2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d30:	4b4e      	ldr	r3, [pc, #312]	@ (8003e6c <HAL_UART_MspInit+0x2d8>)
 8003d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d40:	4b4a      	ldr	r3, [pc, #296]	@ (8003e6c <HAL_UART_MspInit+0x2d8>)
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	4a49      	ldr	r2, [pc, #292]	@ (8003e6c <HAL_UART_MspInit+0x2d8>)
 8003d46:	f043 0308 	orr.w	r3, r3, #8
 8003d4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d4c:	4b47      	ldr	r3, [pc, #284]	@ (8003e6c <HAL_UART_MspInit+0x2d8>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003d58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d5c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d66:	2303      	movs	r3, #3
 8003d68:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d6e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003d72:	4619      	mov	r1, r3
 8003d74:	483e      	ldr	r0, [pc, #248]	@ (8003e70 <HAL_UART_MspInit+0x2dc>)
 8003d76:	f002 feb1 	bl	8006adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d7a:	2304      	movs	r3, #4
 8003d7c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d86:	2303      	movs	r3, #3
 8003d88:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d8e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003d92:	4619      	mov	r1, r3
 8003d94:	4837      	ldr	r0, [pc, #220]	@ (8003e74 <HAL_UART_MspInit+0x2e0>)
 8003d96:	f002 fea1 	bl	8006adc <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003d9a:	4b37      	ldr	r3, [pc, #220]	@ (8003e78 <HAL_UART_MspInit+0x2e4>)
 8003d9c:	4a37      	ldr	r2, [pc, #220]	@ (8003e7c <HAL_UART_MspInit+0x2e8>)
 8003d9e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8003da0:	4b35      	ldr	r3, [pc, #212]	@ (8003e78 <HAL_UART_MspInit+0x2e4>)
 8003da2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003da6:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003da8:	4b33      	ldr	r3, [pc, #204]	@ (8003e78 <HAL_UART_MspInit+0x2e4>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dae:	4b32      	ldr	r3, [pc, #200]	@ (8003e78 <HAL_UART_MspInit+0x2e4>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003db4:	4b30      	ldr	r3, [pc, #192]	@ (8003e78 <HAL_UART_MspInit+0x2e4>)
 8003db6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dba:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003e78 <HAL_UART_MspInit+0x2e4>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dc2:	4b2d      	ldr	r3, [pc, #180]	@ (8003e78 <HAL_UART_MspInit+0x2e4>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8003dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e78 <HAL_UART_MspInit+0x2e4>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003dce:	4b2a      	ldr	r3, [pc, #168]	@ (8003e78 <HAL_UART_MspInit+0x2e4>)
 8003dd0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003dd4:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dd6:	4b28      	ldr	r3, [pc, #160]	@ (8003e78 <HAL_UART_MspInit+0x2e4>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003ddc:	4826      	ldr	r0, [pc, #152]	@ (8003e78 <HAL_UART_MspInit+0x2e4>)
 8003dde:	f001 f93b 	bl	8005058 <HAL_DMA_Init>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_UART_MspInit+0x258>
      Error_Handler();
 8003de8:	f7fe f94e 	bl	8002088 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a22      	ldr	r2, [pc, #136]	@ (8003e78 <HAL_UART_MspInit+0x2e4>)
 8003df0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003df2:	4a21      	ldr	r2, [pc, #132]	@ (8003e78 <HAL_UART_MspInit+0x2e4>)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8003df8:	4b21      	ldr	r3, [pc, #132]	@ (8003e80 <HAL_UART_MspInit+0x2ec>)
 8003dfa:	4a22      	ldr	r2, [pc, #136]	@ (8003e84 <HAL_UART_MspInit+0x2f0>)
 8003dfc:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8003dfe:	4b20      	ldr	r3, [pc, #128]	@ (8003e80 <HAL_UART_MspInit+0x2ec>)
 8003e00:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003e04:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e06:	4b1e      	ldr	r3, [pc, #120]	@ (8003e80 <HAL_UART_MspInit+0x2ec>)
 8003e08:	2240      	movs	r2, #64	@ 0x40
 8003e0a:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003e80 <HAL_UART_MspInit+0x2ec>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e12:	4b1b      	ldr	r3, [pc, #108]	@ (8003e80 <HAL_UART_MspInit+0x2ec>)
 8003e14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e18:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e1a:	4b19      	ldr	r3, [pc, #100]	@ (8003e80 <HAL_UART_MspInit+0x2ec>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e20:	4b17      	ldr	r3, [pc, #92]	@ (8003e80 <HAL_UART_MspInit+0x2ec>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8003e26:	4b16      	ldr	r3, [pc, #88]	@ (8003e80 <HAL_UART_MspInit+0x2ec>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003e2c:	4b14      	ldr	r3, [pc, #80]	@ (8003e80 <HAL_UART_MspInit+0x2ec>)
 8003e2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e32:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e34:	4b12      	ldr	r3, [pc, #72]	@ (8003e80 <HAL_UART_MspInit+0x2ec>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8003e3a:	4811      	ldr	r0, [pc, #68]	@ (8003e80 <HAL_UART_MspInit+0x2ec>)
 8003e3c:	f001 f90c 	bl	8005058 <HAL_DMA_Init>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_UART_MspInit+0x2b6>
      Error_Handler();
 8003e46:	f7fe f91f 	bl	8002088 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8003e80 <HAL_UART_MspInit+0x2ec>)
 8003e4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e50:	4a0b      	ldr	r2, [pc, #44]	@ (8003e80 <HAL_UART_MspInit+0x2ec>)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003e56:	2200      	movs	r2, #0
 8003e58:	2100      	movs	r1, #0
 8003e5a:	2035      	movs	r0, #53	@ 0x35
 8003e5c:	f001 f8c5 	bl	8004fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003e60:	2035      	movs	r0, #53	@ 0x35
 8003e62:	f001 f8de 	bl	8005022 <HAL_NVIC_EnableIRQ>
}
 8003e66:	e2af      	b.n	80043c8 <HAL_UART_MspInit+0x834>
 8003e68:	40005000 	.word	0x40005000
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40020800 	.word	0x40020800
 8003e74:	40020c00 	.word	0x40020c00
 8003e78:	20000b4c 	.word	0x20000b4c
 8003e7c:	40026010 	.word	0x40026010
 8003e80:	20000bac 	.word	0x20000bac
 8003e84:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a96      	ldr	r2, [pc, #600]	@ (80040e8 <HAL_UART_MspInit+0x554>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	f040 8092 	bne.w	8003fb8 <HAL_UART_MspInit+0x424>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e94:	2300      	movs	r3, #0
 8003e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e98:	4b94      	ldr	r3, [pc, #592]	@ (80040ec <HAL_UART_MspInit+0x558>)
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9c:	4a93      	ldr	r2, [pc, #588]	@ (80040ec <HAL_UART_MspInit+0x558>)
 8003e9e:	f043 0310 	orr.w	r3, r3, #16
 8003ea2:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ea4:	4b91      	ldr	r3, [pc, #580]	@ (80040ec <HAL_UART_MspInit+0x558>)
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eb4:	4b8d      	ldr	r3, [pc, #564]	@ (80040ec <HAL_UART_MspInit+0x558>)
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb8:	4a8c      	ldr	r2, [pc, #560]	@ (80040ec <HAL_UART_MspInit+0x558>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ec0:	4b8a      	ldr	r3, [pc, #552]	@ (80040ec <HAL_UART_MspInit+0x558>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ecc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003ed0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eda:	2303      	movs	r3, #3
 8003edc:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ede:	2307      	movs	r3, #7
 8003ee0:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4881      	ldr	r0, [pc, #516]	@ (80040f0 <HAL_UART_MspInit+0x55c>)
 8003eea:	f002 fdf7 	bl	8006adc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003eee:	4b81      	ldr	r3, [pc, #516]	@ (80040f4 <HAL_UART_MspInit+0x560>)
 8003ef0:	4a81      	ldr	r2, [pc, #516]	@ (80040f8 <HAL_UART_MspInit+0x564>)
 8003ef2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003ef4:	4b7f      	ldr	r3, [pc, #508]	@ (80040f4 <HAL_UART_MspInit+0x560>)
 8003ef6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003efa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003efc:	4b7d      	ldr	r3, [pc, #500]	@ (80040f4 <HAL_UART_MspInit+0x560>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f02:	4b7c      	ldr	r3, [pc, #496]	@ (80040f4 <HAL_UART_MspInit+0x560>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f08:	4b7a      	ldr	r3, [pc, #488]	@ (80040f4 <HAL_UART_MspInit+0x560>)
 8003f0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f10:	4b78      	ldr	r3, [pc, #480]	@ (80040f4 <HAL_UART_MspInit+0x560>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f16:	4b77      	ldr	r3, [pc, #476]	@ (80040f4 <HAL_UART_MspInit+0x560>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003f1c:	4b75      	ldr	r3, [pc, #468]	@ (80040f4 <HAL_UART_MspInit+0x560>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f22:	4b74      	ldr	r3, [pc, #464]	@ (80040f4 <HAL_UART_MspInit+0x560>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f28:	4b72      	ldr	r3, [pc, #456]	@ (80040f4 <HAL_UART_MspInit+0x560>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f2e:	4871      	ldr	r0, [pc, #452]	@ (80040f4 <HAL_UART_MspInit+0x560>)
 8003f30:	f001 f892 	bl	8005058 <HAL_DMA_Init>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_UART_MspInit+0x3aa>
      Error_Handler();
 8003f3a:	f7fe f8a5 	bl	8002088 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a6c      	ldr	r2, [pc, #432]	@ (80040f4 <HAL_UART_MspInit+0x560>)
 8003f42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f44:	4a6b      	ldr	r2, [pc, #428]	@ (80040f4 <HAL_UART_MspInit+0x560>)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003f4a:	4b6c      	ldr	r3, [pc, #432]	@ (80040fc <HAL_UART_MspInit+0x568>)
 8003f4c:	4a6c      	ldr	r2, [pc, #432]	@ (8004100 <HAL_UART_MspInit+0x56c>)
 8003f4e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003f50:	4b6a      	ldr	r3, [pc, #424]	@ (80040fc <HAL_UART_MspInit+0x568>)
 8003f52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003f56:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f58:	4b68      	ldr	r3, [pc, #416]	@ (80040fc <HAL_UART_MspInit+0x568>)
 8003f5a:	2240      	movs	r2, #64	@ 0x40
 8003f5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f5e:	4b67      	ldr	r3, [pc, #412]	@ (80040fc <HAL_UART_MspInit+0x568>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f64:	4b65      	ldr	r3, [pc, #404]	@ (80040fc <HAL_UART_MspInit+0x568>)
 8003f66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f6a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f6c:	4b63      	ldr	r3, [pc, #396]	@ (80040fc <HAL_UART_MspInit+0x568>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f72:	4b62      	ldr	r3, [pc, #392]	@ (80040fc <HAL_UART_MspInit+0x568>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003f78:	4b60      	ldr	r3, [pc, #384]	@ (80040fc <HAL_UART_MspInit+0x568>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f7e:	4b5f      	ldr	r3, [pc, #380]	@ (80040fc <HAL_UART_MspInit+0x568>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f84:	4b5d      	ldr	r3, [pc, #372]	@ (80040fc <HAL_UART_MspInit+0x568>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003f8a:	485c      	ldr	r0, [pc, #368]	@ (80040fc <HAL_UART_MspInit+0x568>)
 8003f8c:	f001 f864 	bl	8005058 <HAL_DMA_Init>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_UART_MspInit+0x406>
      Error_Handler();
 8003f96:	f7fe f877 	bl	8002088 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a57      	ldr	r2, [pc, #348]	@ (80040fc <HAL_UART_MspInit+0x568>)
 8003f9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003fa0:	4a56      	ldr	r2, [pc, #344]	@ (80040fc <HAL_UART_MspInit+0x568>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2100      	movs	r1, #0
 8003faa:	2025      	movs	r0, #37	@ 0x25
 8003fac:	f001 f81d 	bl	8004fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003fb0:	2025      	movs	r0, #37	@ 0x25
 8003fb2:	f001 f836 	bl	8005022 <HAL_NVIC_EnableIRQ>
}
 8003fb6:	e207      	b.n	80043c8 <HAL_UART_MspInit+0x834>
  else if(uartHandle->Instance==USART2)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a51      	ldr	r2, [pc, #324]	@ (8004104 <HAL_UART_MspInit+0x570>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	f040 80ac 	bne.w	800411c <HAL_UART_MspInit+0x588>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc8:	4b48      	ldr	r3, [pc, #288]	@ (80040ec <HAL_UART_MspInit+0x558>)
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	4a47      	ldr	r2, [pc, #284]	@ (80040ec <HAL_UART_MspInit+0x558>)
 8003fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fd4:	4b45      	ldr	r3, [pc, #276]	@ (80040ec <HAL_UART_MspInit+0x558>)
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	623b      	str	r3, [r7, #32]
 8003fe4:	4b41      	ldr	r3, [pc, #260]	@ (80040ec <HAL_UART_MspInit+0x558>)
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe8:	4a40      	ldr	r2, [pc, #256]	@ (80040ec <HAL_UART_MspInit+0x558>)
 8003fea:	f043 0308 	orr.w	r3, r3, #8
 8003fee:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80040ec <HAL_UART_MspInit+0x558>)
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	623b      	str	r3, [r7, #32]
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003ffc:	2360      	movs	r3, #96	@ 0x60
 8003ffe:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004000:	2302      	movs	r3, #2
 8004002:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004004:	2300      	movs	r3, #0
 8004006:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004008:	2303      	movs	r3, #3
 800400a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800400c:	2307      	movs	r3, #7
 800400e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004010:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004014:	4619      	mov	r1, r3
 8004016:	483c      	ldr	r0, [pc, #240]	@ (8004108 <HAL_UART_MspInit+0x574>)
 8004018:	f002 fd60 	bl	8006adc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800401c:	4b3b      	ldr	r3, [pc, #236]	@ (800410c <HAL_UART_MspInit+0x578>)
 800401e:	4a3c      	ldr	r2, [pc, #240]	@ (8004110 <HAL_UART_MspInit+0x57c>)
 8004020:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004022:	4b3a      	ldr	r3, [pc, #232]	@ (800410c <HAL_UART_MspInit+0x578>)
 8004024:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004028:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800402a:	4b38      	ldr	r3, [pc, #224]	@ (800410c <HAL_UART_MspInit+0x578>)
 800402c:	2200      	movs	r2, #0
 800402e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004030:	4b36      	ldr	r3, [pc, #216]	@ (800410c <HAL_UART_MspInit+0x578>)
 8004032:	2200      	movs	r2, #0
 8004034:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004036:	4b35      	ldr	r3, [pc, #212]	@ (800410c <HAL_UART_MspInit+0x578>)
 8004038:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800403c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800403e:	4b33      	ldr	r3, [pc, #204]	@ (800410c <HAL_UART_MspInit+0x578>)
 8004040:	2200      	movs	r2, #0
 8004042:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004044:	4b31      	ldr	r3, [pc, #196]	@ (800410c <HAL_UART_MspInit+0x578>)
 8004046:	2200      	movs	r2, #0
 8004048:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800404a:	4b30      	ldr	r3, [pc, #192]	@ (800410c <HAL_UART_MspInit+0x578>)
 800404c:	2200      	movs	r2, #0
 800404e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004050:	4b2e      	ldr	r3, [pc, #184]	@ (800410c <HAL_UART_MspInit+0x578>)
 8004052:	2200      	movs	r2, #0
 8004054:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004056:	4b2d      	ldr	r3, [pc, #180]	@ (800410c <HAL_UART_MspInit+0x578>)
 8004058:	2200      	movs	r2, #0
 800405a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800405c:	482b      	ldr	r0, [pc, #172]	@ (800410c <HAL_UART_MspInit+0x578>)
 800405e:	f000 fffb 	bl	8005058 <HAL_DMA_Init>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_UART_MspInit+0x4d8>
      Error_Handler();
 8004068:	f7fe f80e 	bl	8002088 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a27      	ldr	r2, [pc, #156]	@ (800410c <HAL_UART_MspInit+0x578>)
 8004070:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004072:	4a26      	ldr	r2, [pc, #152]	@ (800410c <HAL_UART_MspInit+0x578>)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004078:	4b26      	ldr	r3, [pc, #152]	@ (8004114 <HAL_UART_MspInit+0x580>)
 800407a:	4a27      	ldr	r2, [pc, #156]	@ (8004118 <HAL_UART_MspInit+0x584>)
 800407c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800407e:	4b25      	ldr	r3, [pc, #148]	@ (8004114 <HAL_UART_MspInit+0x580>)
 8004080:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004084:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004086:	4b23      	ldr	r3, [pc, #140]	@ (8004114 <HAL_UART_MspInit+0x580>)
 8004088:	2240      	movs	r2, #64	@ 0x40
 800408a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800408c:	4b21      	ldr	r3, [pc, #132]	@ (8004114 <HAL_UART_MspInit+0x580>)
 800408e:	2200      	movs	r2, #0
 8004090:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004092:	4b20      	ldr	r3, [pc, #128]	@ (8004114 <HAL_UART_MspInit+0x580>)
 8004094:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004098:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800409a:	4b1e      	ldr	r3, [pc, #120]	@ (8004114 <HAL_UART_MspInit+0x580>)
 800409c:	2200      	movs	r2, #0
 800409e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004114 <HAL_UART_MspInit+0x580>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80040a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004114 <HAL_UART_MspInit+0x580>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80040ac:	4b19      	ldr	r3, [pc, #100]	@ (8004114 <HAL_UART_MspInit+0x580>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040b2:	4b18      	ldr	r3, [pc, #96]	@ (8004114 <HAL_UART_MspInit+0x580>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80040b8:	4816      	ldr	r0, [pc, #88]	@ (8004114 <HAL_UART_MspInit+0x580>)
 80040ba:	f000 ffcd 	bl	8005058 <HAL_DMA_Init>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_UART_MspInit+0x534>
      Error_Handler();
 80040c4:	f7fd ffe0 	bl	8002088 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a12      	ldr	r2, [pc, #72]	@ (8004114 <HAL_UART_MspInit+0x580>)
 80040cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80040ce:	4a11      	ldr	r2, [pc, #68]	@ (8004114 <HAL_UART_MspInit+0x580>)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80040d4:	2200      	movs	r2, #0
 80040d6:	2100      	movs	r1, #0
 80040d8:	2026      	movs	r0, #38	@ 0x26
 80040da:	f000 ff86 	bl	8004fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80040de:	2026      	movs	r0, #38	@ 0x26
 80040e0:	f000 ff9f 	bl	8005022 <HAL_NVIC_EnableIRQ>
}
 80040e4:	e170      	b.n	80043c8 <HAL_UART_MspInit+0x834>
 80040e6:	bf00      	nop
 80040e8:	40011000 	.word	0x40011000
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40020000 	.word	0x40020000
 80040f4:	20000c0c 	.word	0x20000c0c
 80040f8:	40026440 	.word	0x40026440
 80040fc:	20000c6c 	.word	0x20000c6c
 8004100:	400264b8 	.word	0x400264b8
 8004104:	40004400 	.word	0x40004400
 8004108:	40020c00 	.word	0x40020c00
 800410c:	20000ccc 	.word	0x20000ccc
 8004110:	40026088 	.word	0x40026088
 8004114:	20000d2c 	.word	0x20000d2c
 8004118:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a5a      	ldr	r2, [pc, #360]	@ (800428c <HAL_UART_MspInit+0x6f8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	f040 80c2 	bne.w	80042ac <HAL_UART_MspInit+0x718>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004128:	2300      	movs	r3, #0
 800412a:	61fb      	str	r3, [r7, #28]
 800412c:	4b58      	ldr	r3, [pc, #352]	@ (8004290 <HAL_UART_MspInit+0x6fc>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	4a57      	ldr	r2, [pc, #348]	@ (8004290 <HAL_UART_MspInit+0x6fc>)
 8004132:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004136:	6413      	str	r3, [r2, #64]	@ 0x40
 8004138:	4b55      	ldr	r3, [pc, #340]	@ (8004290 <HAL_UART_MspInit+0x6fc>)
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004144:	2300      	movs	r3, #0
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	4b51      	ldr	r3, [pc, #324]	@ (8004290 <HAL_UART_MspInit+0x6fc>)
 800414a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414c:	4a50      	ldr	r2, [pc, #320]	@ (8004290 <HAL_UART_MspInit+0x6fc>)
 800414e:	f043 0302 	orr.w	r3, r3, #2
 8004152:	6313      	str	r3, [r2, #48]	@ 0x30
 8004154:	4b4e      	ldr	r3, [pc, #312]	@ (8004290 <HAL_UART_MspInit+0x6fc>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	4b4a      	ldr	r3, [pc, #296]	@ (8004290 <HAL_UART_MspInit+0x6fc>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004168:	4a49      	ldr	r2, [pc, #292]	@ (8004290 <HAL_UART_MspInit+0x6fc>)
 800416a:	f043 0308 	orr.w	r3, r3, #8
 800416e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004170:	4b47      	ldr	r3, [pc, #284]	@ (8004290 <HAL_UART_MspInit+0x6fc>)
 8004172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800417c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004180:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004182:	2302      	movs	r3, #2
 8004184:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004186:	2300      	movs	r3, #0
 8004188:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418a:	2303      	movs	r3, #3
 800418c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800418e:	2307      	movs	r3, #7
 8004190:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004192:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004196:	4619      	mov	r1, r3
 8004198:	483e      	ldr	r0, [pc, #248]	@ (8004294 <HAL_UART_MspInit+0x700>)
 800419a:	f002 fc9f 	bl	8006adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800419e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041a2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a4:	2302      	movs	r3, #2
 80041a6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ac:	2303      	movs	r3, #3
 80041ae:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041b0:	2307      	movs	r3, #7
 80041b2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041b4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80041b8:	4619      	mov	r1, r3
 80041ba:	4837      	ldr	r0, [pc, #220]	@ (8004298 <HAL_UART_MspInit+0x704>)
 80041bc:	f002 fc8e 	bl	8006adc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80041c0:	4b36      	ldr	r3, [pc, #216]	@ (800429c <HAL_UART_MspInit+0x708>)
 80041c2:	4a37      	ldr	r2, [pc, #220]	@ (80042a0 <HAL_UART_MspInit+0x70c>)
 80041c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80041c6:	4b35      	ldr	r3, [pc, #212]	@ (800429c <HAL_UART_MspInit+0x708>)
 80041c8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80041cc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ce:	4b33      	ldr	r3, [pc, #204]	@ (800429c <HAL_UART_MspInit+0x708>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041d4:	4b31      	ldr	r3, [pc, #196]	@ (800429c <HAL_UART_MspInit+0x708>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041da:	4b30      	ldr	r3, [pc, #192]	@ (800429c <HAL_UART_MspInit+0x708>)
 80041dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041e0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041e2:	4b2e      	ldr	r3, [pc, #184]	@ (800429c <HAL_UART_MspInit+0x708>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041e8:	4b2c      	ldr	r3, [pc, #176]	@ (800429c <HAL_UART_MspInit+0x708>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80041ee:	4b2b      	ldr	r3, [pc, #172]	@ (800429c <HAL_UART_MspInit+0x708>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041f4:	4b29      	ldr	r3, [pc, #164]	@ (800429c <HAL_UART_MspInit+0x708>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041fa:	4b28      	ldr	r3, [pc, #160]	@ (800429c <HAL_UART_MspInit+0x708>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004200:	4826      	ldr	r0, [pc, #152]	@ (800429c <HAL_UART_MspInit+0x708>)
 8004202:	f000 ff29 	bl	8005058 <HAL_DMA_Init>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_UART_MspInit+0x67c>
      Error_Handler();
 800420c:	f7fd ff3c 	bl	8002088 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a22      	ldr	r2, [pc, #136]	@ (800429c <HAL_UART_MspInit+0x708>)
 8004214:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004216:	4a21      	ldr	r2, [pc, #132]	@ (800429c <HAL_UART_MspInit+0x708>)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800421c:	4b21      	ldr	r3, [pc, #132]	@ (80042a4 <HAL_UART_MspInit+0x710>)
 800421e:	4a22      	ldr	r2, [pc, #136]	@ (80042a8 <HAL_UART_MspInit+0x714>)
 8004220:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004222:	4b20      	ldr	r3, [pc, #128]	@ (80042a4 <HAL_UART_MspInit+0x710>)
 8004224:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004228:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800422a:	4b1e      	ldr	r3, [pc, #120]	@ (80042a4 <HAL_UART_MspInit+0x710>)
 800422c:	2240      	movs	r2, #64	@ 0x40
 800422e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004230:	4b1c      	ldr	r3, [pc, #112]	@ (80042a4 <HAL_UART_MspInit+0x710>)
 8004232:	2200      	movs	r2, #0
 8004234:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004236:	4b1b      	ldr	r3, [pc, #108]	@ (80042a4 <HAL_UART_MspInit+0x710>)
 8004238:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800423c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800423e:	4b19      	ldr	r3, [pc, #100]	@ (80042a4 <HAL_UART_MspInit+0x710>)
 8004240:	2200      	movs	r2, #0
 8004242:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004244:	4b17      	ldr	r3, [pc, #92]	@ (80042a4 <HAL_UART_MspInit+0x710>)
 8004246:	2200      	movs	r2, #0
 8004248:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800424a:	4b16      	ldr	r3, [pc, #88]	@ (80042a4 <HAL_UART_MspInit+0x710>)
 800424c:	2200      	movs	r2, #0
 800424e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004250:	4b14      	ldr	r3, [pc, #80]	@ (80042a4 <HAL_UART_MspInit+0x710>)
 8004252:	2200      	movs	r2, #0
 8004254:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004256:	4b13      	ldr	r3, [pc, #76]	@ (80042a4 <HAL_UART_MspInit+0x710>)
 8004258:	2200      	movs	r2, #0
 800425a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800425c:	4811      	ldr	r0, [pc, #68]	@ (80042a4 <HAL_UART_MspInit+0x710>)
 800425e:	f000 fefb 	bl	8005058 <HAL_DMA_Init>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_UART_MspInit+0x6d8>
      Error_Handler();
 8004268:	f7fd ff0e 	bl	8002088 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a0d      	ldr	r2, [pc, #52]	@ (80042a4 <HAL_UART_MspInit+0x710>)
 8004270:	639a      	str	r2, [r3, #56]	@ 0x38
 8004272:	4a0c      	ldr	r2, [pc, #48]	@ (80042a4 <HAL_UART_MspInit+0x710>)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004278:	2200      	movs	r2, #0
 800427a:	2100      	movs	r1, #0
 800427c:	2027      	movs	r0, #39	@ 0x27
 800427e:	f000 feb4 	bl	8004fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004282:	2027      	movs	r0, #39	@ 0x27
 8004284:	f000 fecd 	bl	8005022 <HAL_NVIC_EnableIRQ>
}
 8004288:	e09e      	b.n	80043c8 <HAL_UART_MspInit+0x834>
 800428a:	bf00      	nop
 800428c:	40004800 	.word	0x40004800
 8004290:	40023800 	.word	0x40023800
 8004294:	40020400 	.word	0x40020400
 8004298:	40020c00 	.word	0x40020c00
 800429c:	20000d8c 	.word	0x20000d8c
 80042a0:	40026028 	.word	0x40026028
 80042a4:	20000dec 	.word	0x20000dec
 80042a8:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a47      	ldr	r2, [pc, #284]	@ (80043d0 <HAL_UART_MspInit+0x83c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	f040 8088 	bne.w	80043c8 <HAL_UART_MspInit+0x834>
    __HAL_RCC_USART6_CLK_ENABLE();
 80042b8:	2300      	movs	r3, #0
 80042ba:	613b      	str	r3, [r7, #16]
 80042bc:	4b45      	ldr	r3, [pc, #276]	@ (80043d4 <HAL_UART_MspInit+0x840>)
 80042be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c0:	4a44      	ldr	r2, [pc, #272]	@ (80043d4 <HAL_UART_MspInit+0x840>)
 80042c2:	f043 0320 	orr.w	r3, r3, #32
 80042c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80042c8:	4b42      	ldr	r3, [pc, #264]	@ (80043d4 <HAL_UART_MspInit+0x840>)
 80042ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	4b3e      	ldr	r3, [pc, #248]	@ (80043d4 <HAL_UART_MspInit+0x840>)
 80042da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042dc:	4a3d      	ldr	r2, [pc, #244]	@ (80043d4 <HAL_UART_MspInit+0x840>)
 80042de:	f043 0304 	orr.w	r3, r3, #4
 80042e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80042e4:	4b3b      	ldr	r3, [pc, #236]	@ (80043d4 <HAL_UART_MspInit+0x840>)
 80042e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042f0:	23c0      	movs	r3, #192	@ 0xc0
 80042f2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f4:	2302      	movs	r3, #2
 80042f6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042fc:	2303      	movs	r3, #3
 80042fe:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004300:	2308      	movs	r3, #8
 8004302:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004304:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004308:	4619      	mov	r1, r3
 800430a:	4833      	ldr	r0, [pc, #204]	@ (80043d8 <HAL_UART_MspInit+0x844>)
 800430c:	f002 fbe6 	bl	8006adc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004310:	4b32      	ldr	r3, [pc, #200]	@ (80043dc <HAL_UART_MspInit+0x848>)
 8004312:	4a33      	ldr	r2, [pc, #204]	@ (80043e0 <HAL_UART_MspInit+0x84c>)
 8004314:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004316:	4b31      	ldr	r3, [pc, #196]	@ (80043dc <HAL_UART_MspInit+0x848>)
 8004318:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800431c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800431e:	4b2f      	ldr	r3, [pc, #188]	@ (80043dc <HAL_UART_MspInit+0x848>)
 8004320:	2200      	movs	r2, #0
 8004322:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004324:	4b2d      	ldr	r3, [pc, #180]	@ (80043dc <HAL_UART_MspInit+0x848>)
 8004326:	2200      	movs	r2, #0
 8004328:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800432a:	4b2c      	ldr	r3, [pc, #176]	@ (80043dc <HAL_UART_MspInit+0x848>)
 800432c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004330:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004332:	4b2a      	ldr	r3, [pc, #168]	@ (80043dc <HAL_UART_MspInit+0x848>)
 8004334:	2200      	movs	r2, #0
 8004336:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004338:	4b28      	ldr	r3, [pc, #160]	@ (80043dc <HAL_UART_MspInit+0x848>)
 800433a:	2200      	movs	r2, #0
 800433c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800433e:	4b27      	ldr	r3, [pc, #156]	@ (80043dc <HAL_UART_MspInit+0x848>)
 8004340:	2200      	movs	r2, #0
 8004342:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004344:	4b25      	ldr	r3, [pc, #148]	@ (80043dc <HAL_UART_MspInit+0x848>)
 8004346:	2200      	movs	r2, #0
 8004348:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800434a:	4b24      	ldr	r3, [pc, #144]	@ (80043dc <HAL_UART_MspInit+0x848>)
 800434c:	2200      	movs	r2, #0
 800434e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004350:	4822      	ldr	r0, [pc, #136]	@ (80043dc <HAL_UART_MspInit+0x848>)
 8004352:	f000 fe81 	bl	8005058 <HAL_DMA_Init>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <HAL_UART_MspInit+0x7cc>
      Error_Handler();
 800435c:	f7fd fe94 	bl	8002088 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a1e      	ldr	r2, [pc, #120]	@ (80043dc <HAL_UART_MspInit+0x848>)
 8004364:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004366:	4a1d      	ldr	r2, [pc, #116]	@ (80043dc <HAL_UART_MspInit+0x848>)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800436c:	4b1d      	ldr	r3, [pc, #116]	@ (80043e4 <HAL_UART_MspInit+0x850>)
 800436e:	4a1e      	ldr	r2, [pc, #120]	@ (80043e8 <HAL_UART_MspInit+0x854>)
 8004370:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8004372:	4b1c      	ldr	r3, [pc, #112]	@ (80043e4 <HAL_UART_MspInit+0x850>)
 8004374:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004378:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800437a:	4b1a      	ldr	r3, [pc, #104]	@ (80043e4 <HAL_UART_MspInit+0x850>)
 800437c:	2240      	movs	r2, #64	@ 0x40
 800437e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004380:	4b18      	ldr	r3, [pc, #96]	@ (80043e4 <HAL_UART_MspInit+0x850>)
 8004382:	2200      	movs	r2, #0
 8004384:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004386:	4b17      	ldr	r3, [pc, #92]	@ (80043e4 <HAL_UART_MspInit+0x850>)
 8004388:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800438c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800438e:	4b15      	ldr	r3, [pc, #84]	@ (80043e4 <HAL_UART_MspInit+0x850>)
 8004390:	2200      	movs	r2, #0
 8004392:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004394:	4b13      	ldr	r3, [pc, #76]	@ (80043e4 <HAL_UART_MspInit+0x850>)
 8004396:	2200      	movs	r2, #0
 8004398:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800439a:	4b12      	ldr	r3, [pc, #72]	@ (80043e4 <HAL_UART_MspInit+0x850>)
 800439c:	2200      	movs	r2, #0
 800439e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80043a0:	4b10      	ldr	r3, [pc, #64]	@ (80043e4 <HAL_UART_MspInit+0x850>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043a6:	4b0f      	ldr	r3, [pc, #60]	@ (80043e4 <HAL_UART_MspInit+0x850>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80043ac:	480d      	ldr	r0, [pc, #52]	@ (80043e4 <HAL_UART_MspInit+0x850>)
 80043ae:	f000 fe53 	bl	8005058 <HAL_DMA_Init>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <HAL_UART_MspInit+0x828>
      Error_Handler();
 80043b8:	f7fd fe66 	bl	8002088 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a09      	ldr	r2, [pc, #36]	@ (80043e4 <HAL_UART_MspInit+0x850>)
 80043c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80043c2:	4a08      	ldr	r2, [pc, #32]	@ (80043e4 <HAL_UART_MspInit+0x850>)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80043c8:	bf00      	nop
 80043ca:	3758      	adds	r7, #88	@ 0x58
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40011400 	.word	0x40011400
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40020800 	.word	0x40020800
 80043dc:	20000e4c 	.word	0x20000e4c
 80043e0:	40026428 	.word	0x40026428
 80043e4:	20000eac 	.word	0x20000eac
 80043e8:	400264a0 	.word	0x400264a0

080043ec <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  


  ldr   sp, =_estack     /* set stack pointer */
 80043ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004424 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80043f0:	f7fe fa8a 	bl	8002908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043f4:	480c      	ldr	r0, [pc, #48]	@ (8004428 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80043f6:	490d      	ldr	r1, [pc, #52]	@ (800442c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80043f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004430 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80043fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043fc:	e002      	b.n	8004404 <LoopCopyDataInit>

080043fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004402:	3304      	adds	r3, #4

08004404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004408:	d3f9      	bcc.n	80043fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800440a:	4a0a      	ldr	r2, [pc, #40]	@ (8004434 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800440c:	4c0a      	ldr	r4, [pc, #40]	@ (8004438 <LoopFillZerobss+0x22>)
  movs r3, #0
 800440e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004410:	e001      	b.n	8004416 <LoopFillZerobss>

08004412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004414:	3204      	adds	r2, #4

08004416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004418:	d3fb      	bcc.n	8004412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800441a:	f010 fd3d 	bl	8014e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800441e:	f7fd fd81 	bl	8001f24 <main>
  bx  lr    
 8004422:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004424:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800442c:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8004430:	08018734 	.word	0x08018734
  ldr r2, =_sbss
 8004434:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8004438:	2000b50c 	.word	0x2000b50c

0800443c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800443c:	e7fe      	b.n	800443c <ADC_IRQHandler>

0800443e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <LAN8742_RegisterBusIO+0x28>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <LAN8742_RegisterBusIO+0x28>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <LAN8742_RegisterBusIO+0x28>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d102      	bne.n	800446c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	e014      	b.n	8004496 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b086      	sub	sp, #24
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d139      	bne.n	8004532 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	e01c      	b.n	8004512 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f107 020c 	add.w	r2, r7, #12
 80044e0:	2112      	movs	r1, #18
 80044e2:	6978      	ldr	r0, [r7, #20]
 80044e4:	4798      	blx	r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	da03      	bge.n	80044f4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80044ec:	f06f 0304 	mvn.w	r3, #4
 80044f0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80044f2:	e00b      	b.n	800450c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 031f 	and.w	r3, r3, #31
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d105      	bne.n	800450c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
         break;
 800450a:	e005      	b.n	8004518 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	3301      	adds	r3, #1
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b1f      	cmp	r3, #31
 8004516:	d9df      	bls.n	80044d8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b1f      	cmp	r3, #31
 800451e:	d902      	bls.n	8004526 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8004520:	f06f 0302 	mvn.w	r3, #2
 8004524:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d102      	bne.n	8004532 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8004532:	693b      	ldr	r3, [r7, #16]
 }
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6810      	ldr	r0, [r2, #0]
 8004550:	f107 020c 	add.w	r2, r7, #12
 8004554:	2101      	movs	r1, #1
 8004556:	4798      	blx	r3
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	da02      	bge.n	8004564 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800455e:	f06f 0304 	mvn.w	r3, #4
 8004562:	e06e      	b.n	8004642 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6810      	ldr	r0, [r2, #0]
 800456c:	f107 020c 	add.w	r2, r7, #12
 8004570:	2101      	movs	r1, #1
 8004572:	4798      	blx	r3
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	da02      	bge.n	8004580 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800457a:	f06f 0304 	mvn.w	r3, #4
 800457e:	e060      	b.n	8004642 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800458a:	2301      	movs	r3, #1
 800458c:	e059      	b.n	8004642 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6810      	ldr	r0, [r2, #0]
 8004596:	f107 020c 	add.w	r2, r7, #12
 800459a:	2100      	movs	r1, #0
 800459c:	4798      	blx	r3
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	da02      	bge.n	80045aa <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80045a4:	f06f 0304 	mvn.w	r3, #4
 80045a8:	e04b      	b.n	8004642 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d11b      	bne.n	80045ec <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d006      	beq.n	80045cc <LAN8742_GetLinkState+0x90>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80045c8:	2302      	movs	r3, #2
 80045ca:	e03a      	b.n	8004642 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e033      	b.n	8004642 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80045e4:	2304      	movs	r3, #4
 80045e6:	e02c      	b.n	8004642 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80045e8:	2305      	movs	r3, #5
 80045ea:	e02a      	b.n	8004642 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6810      	ldr	r0, [r2, #0]
 80045f4:	f107 020c 	add.w	r2, r7, #12
 80045f8:	211f      	movs	r1, #31
 80045fa:	4798      	blx	r3
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	da02      	bge.n	8004608 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8004602:	f06f 0304 	mvn.w	r3, #4
 8004606:	e01c      	b.n	8004642 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8004612:	2306      	movs	r3, #6
 8004614:	e015      	b.n	8004642 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f003 031c 	and.w	r3, r3, #28
 800461c:	2b18      	cmp	r3, #24
 800461e:	d101      	bne.n	8004624 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8004620:	2302      	movs	r3, #2
 8004622:	e00e      	b.n	8004642 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 031c 	and.w	r3, r3, #28
 800462a:	2b08      	cmp	r3, #8
 800462c:	d101      	bne.n	8004632 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800462e:	2303      	movs	r3, #3
 8004630:	e007      	b.n	8004642 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 031c 	and.w	r3, r3, #28
 8004638:	2b14      	cmp	r3, #20
 800463a:	d101      	bne.n	8004640 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800463c:	2304      	movs	r3, #4
 800463e:	e000      	b.n	8004642 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8004640:	2305      	movs	r3, #5
    }
  }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004650:	4b0e      	ldr	r3, [pc, #56]	@ (800468c <HAL_Init+0x40>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0d      	ldr	r2, [pc, #52]	@ (800468c <HAL_Init+0x40>)
 8004656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800465a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800465c:	4b0b      	ldr	r3, [pc, #44]	@ (800468c <HAL_Init+0x40>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a0a      	ldr	r2, [pc, #40]	@ (800468c <HAL_Init+0x40>)
 8004662:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004666:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004668:	4b08      	ldr	r3, [pc, #32]	@ (800468c <HAL_Init+0x40>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a07      	ldr	r2, [pc, #28]	@ (800468c <HAL_Init+0x40>)
 800466e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004672:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004674:	2003      	movs	r0, #3
 8004676:	f000 fcad 	bl	8004fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800467a:	200f      	movs	r0, #15
 800467c:	f000 f808 	bl	8004690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004680:	f7fd ff6c 	bl	800255c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40023c00 	.word	0x40023c00

08004690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004698:	4b12      	ldr	r3, [pc, #72]	@ (80046e4 <HAL_InitTick+0x54>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4b12      	ldr	r3, [pc, #72]	@ (80046e8 <HAL_InitTick+0x58>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	4619      	mov	r1, r3
 80046a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80046aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fcc5 	bl	800503e <HAL_SYSTICK_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e00e      	b.n	80046dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b0f      	cmp	r3, #15
 80046c2:	d80a      	bhi.n	80046da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046c4:	2200      	movs	r2, #0
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295
 80046cc:	f000 fc8d 	bl	8004fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046d0:	4a06      	ldr	r2, [pc, #24]	@ (80046ec <HAL_InitTick+0x5c>)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	e000      	b.n	80046dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20000038 	.word	0x20000038
 80046e8:	200000a8 	.word	0x200000a8
 80046ec:	200000a4 	.word	0x200000a4

080046f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046f4:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <HAL_IncTick+0x20>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b06      	ldr	r3, [pc, #24]	@ (8004714 <HAL_IncTick+0x24>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4413      	add	r3, r2
 8004700:	4a04      	ldr	r2, [pc, #16]	@ (8004714 <HAL_IncTick+0x24>)
 8004702:	6013      	str	r3, [r2, #0]
}
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	200000a8 	.word	0x200000a8
 8004714:	20000f0c 	.word	0x20000f0c

08004718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return uwTick;
 800471c:	4b03      	ldr	r3, [pc, #12]	@ (800472c <HAL_GetTick+0x14>)
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000f0c 	.word	0x20000f0c

08004730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004738:	f7ff ffee 	bl	8004718 <HAL_GetTick>
 800473c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d005      	beq.n	8004756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800474a:	4b0a      	ldr	r3, [pc, #40]	@ (8004774 <HAL_Delay+0x44>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004756:	bf00      	nop
 8004758:	f7ff ffde 	bl	8004718 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	429a      	cmp	r2, r3
 8004766:	d8f7      	bhi.n	8004758 <HAL_Delay+0x28>
  {
  }
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	200000a8 	.word	0x200000a8

08004778 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e033      	b.n	80047f6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc fb98 	bl	8000ecc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d118      	bne.n	80047e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80047be:	f023 0302 	bic.w	r3, r3, #2
 80047c2:	f043 0202 	orr.w	r2, r3, #2
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f93a 	bl	8004a44 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	f023 0303 	bic.w	r3, r3, #3
 80047de:	f043 0201 	orr.w	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80047e6:	e001      	b.n	80047ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_ADC_ConfigChannel+0x1c>
 8004818:	2302      	movs	r3, #2
 800481a:	e105      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x228>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b09      	cmp	r3, #9
 800482a:	d925      	bls.n	8004878 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68d9      	ldr	r1, [r3, #12]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	461a      	mov	r2, r3
 800483a:	4613      	mov	r3, r2
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	4413      	add	r3, r2
 8004840:	3b1e      	subs	r3, #30
 8004842:	2207      	movs	r2, #7
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43da      	mvns	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	400a      	ands	r2, r1
 8004850:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68d9      	ldr	r1, [r3, #12]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	4618      	mov	r0, r3
 8004864:	4603      	mov	r3, r0
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	4403      	add	r3, r0
 800486a:	3b1e      	subs	r3, #30
 800486c:	409a      	lsls	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	60da      	str	r2, [r3, #12]
 8004876:	e022      	b.n	80048be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6919      	ldr	r1, [r3, #16]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	4613      	mov	r3, r2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4413      	add	r3, r2
 800488c:	2207      	movs	r2, #7
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43da      	mvns	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	400a      	ands	r2, r1
 800489a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6919      	ldr	r1, [r3, #16]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	4618      	mov	r0, r3
 80048ae:	4603      	mov	r3, r0
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4403      	add	r3, r0
 80048b4:	409a      	lsls	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b06      	cmp	r3, #6
 80048c4:	d824      	bhi.n	8004910 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	3b05      	subs	r3, #5
 80048d8:	221f      	movs	r2, #31
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43da      	mvns	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	400a      	ands	r2, r1
 80048e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	4618      	mov	r0, r3
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	3b05      	subs	r3, #5
 8004902:	fa00 f203 	lsl.w	r2, r0, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	635a      	str	r2, [r3, #52]	@ 0x34
 800490e:	e04c      	b.n	80049aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b0c      	cmp	r3, #12
 8004916:	d824      	bhi.n	8004962 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	3b23      	subs	r3, #35	@ 0x23
 800492a:	221f      	movs	r2, #31
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	43da      	mvns	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	400a      	ands	r2, r1
 8004938:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	4618      	mov	r0, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	3b23      	subs	r3, #35	@ 0x23
 8004954:	fa00 f203 	lsl.w	r2, r0, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004960:	e023      	b.n	80049aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	3b41      	subs	r3, #65	@ 0x41
 8004974:	221f      	movs	r2, #31
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43da      	mvns	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	400a      	ands	r2, r1
 8004982:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	4618      	mov	r0, r3
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	3b41      	subs	r3, #65	@ 0x41
 800499e:	fa00 f203 	lsl.w	r2, r0, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049aa:	4b22      	ldr	r3, [pc, #136]	@ (8004a34 <HAL_ADC_ConfigChannel+0x234>)
 80049ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a21      	ldr	r2, [pc, #132]	@ (8004a38 <HAL_ADC_ConfigChannel+0x238>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d109      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x1cc>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b12      	cmp	r3, #18
 80049be:	d105      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a19      	ldr	r2, [pc, #100]	@ (8004a38 <HAL_ADC_ConfigChannel+0x238>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d123      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x21e>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d003      	beq.n	80049e6 <HAL_ADC_ConfigChannel+0x1e6>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b11      	cmp	r3, #17
 80049e4:	d11b      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b10      	cmp	r3, #16
 80049f8:	d111      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049fa:	4b10      	ldr	r3, [pc, #64]	@ (8004a3c <HAL_ADC_ConfigChannel+0x23c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a10      	ldr	r2, [pc, #64]	@ (8004a40 <HAL_ADC_ConfigChannel+0x240>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	0c9a      	lsrs	r2, r3, #18
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004a10:	e002      	b.n	8004a18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f9      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40012300 	.word	0x40012300
 8004a38:	40012000 	.word	0x40012000
 8004a3c:	20000038 	.word	0x20000038
 8004a40:	431bde83 	.word	0x431bde83

08004a44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a4c:	4b79      	ldr	r3, [pc, #484]	@ (8004c34 <ADC_Init+0x1f0>)
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	431a      	orrs	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6859      	ldr	r1, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	021a      	lsls	r2, r3, #8
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004a9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6859      	ldr	r1, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004abe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6899      	ldr	r1, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad6:	4a58      	ldr	r2, [pc, #352]	@ (8004c38 <ADC_Init+0x1f4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d022      	beq.n	8004b22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004aea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6899      	ldr	r1, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004b0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6899      	ldr	r1, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	609a      	str	r2, [r3, #8]
 8004b20:	e00f      	b.n	8004b42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004b40:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0202 	bic.w	r2, r2, #2
 8004b50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6899      	ldr	r1, [r3, #8]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	7e1b      	ldrb	r3, [r3, #24]
 8004b5c:	005a      	lsls	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01b      	beq.n	8004ba8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b7e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004b8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6859      	ldr	r1, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	035a      	lsls	r2, r3, #13
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	e007      	b.n	8004bb8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bb6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	051a      	lsls	r2, r3, #20
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004bec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6899      	ldr	r1, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bfa:	025a      	lsls	r2, r3, #9
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6899      	ldr	r1, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	029a      	lsls	r2, r3, #10
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	609a      	str	r2, [r3, #8]
}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40012300 	.word	0x40012300
 8004c38:	0f000001 	.word	0x0f000001

08004c3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e0ed      	b.n	8004e2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d102      	bne.n	8004c60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fc f9e6 	bl	800102c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c70:	f7ff fd52 	bl	8004718 <HAL_GetTick>
 8004c74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c76:	e012      	b.n	8004c9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c78:	f7ff fd4e 	bl	8004718 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b0a      	cmp	r3, #10
 8004c84:	d90b      	bls.n	8004c9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2205      	movs	r2, #5
 8004c96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e0c5      	b.n	8004e2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0e5      	beq.n	8004c78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0202 	bic.w	r2, r2, #2
 8004cba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cbc:	f7ff fd2c 	bl	8004718 <HAL_GetTick>
 8004cc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004cc2:	e012      	b.n	8004cea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004cc4:	f7ff fd28 	bl	8004718 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b0a      	cmp	r3, #10
 8004cd0:	d90b      	bls.n	8004cea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2205      	movs	r2, #5
 8004ce2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e09f      	b.n	8004e2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e5      	bne.n	8004cc4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	7e1b      	ldrb	r3, [r3, #24]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d108      	bne.n	8004d12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	e007      	b.n	8004d22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	7e5b      	ldrb	r3, [r3, #25]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d108      	bne.n	8004d3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	e007      	b.n	8004d4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	7e9b      	ldrb	r3, [r3, #26]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d108      	bne.n	8004d66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0220 	orr.w	r2, r2, #32
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	e007      	b.n	8004d76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0220 	bic.w	r2, r2, #32
 8004d74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	7edb      	ldrb	r3, [r3, #27]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d108      	bne.n	8004d90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0210 	bic.w	r2, r2, #16
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e007      	b.n	8004da0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0210 	orr.w	r2, r2, #16
 8004d9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	7f1b      	ldrb	r3, [r3, #28]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d108      	bne.n	8004dba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0208 	orr.w	r2, r2, #8
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	e007      	b.n	8004dca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0208 	bic.w	r2, r2, #8
 8004dc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	7f5b      	ldrb	r3, [r3, #29]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d108      	bne.n	8004de4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f042 0204 	orr.w	r2, r2, #4
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e007      	b.n	8004df4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0204 	bic.w	r2, r2, #4
 8004df2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	ea42 0103 	orr.w	r1, r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	1e5a      	subs	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e44:	4b0c      	ldr	r3, [pc, #48]	@ (8004e78 <__NVIC_SetPriorityGrouping+0x44>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e50:	4013      	ands	r3, r2
 8004e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e66:	4a04      	ldr	r2, [pc, #16]	@ (8004e78 <__NVIC_SetPriorityGrouping+0x44>)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	60d3      	str	r3, [r2, #12]
}
 8004e6c:	bf00      	nop
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	e000ed00 	.word	0xe000ed00

08004e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e80:	4b04      	ldr	r3, [pc, #16]	@ (8004e94 <__NVIC_GetPriorityGrouping+0x18>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	0a1b      	lsrs	r3, r3, #8
 8004e86:	f003 0307 	and.w	r3, r3, #7
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	e000ed00 	.word	0xe000ed00

08004e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	db0b      	blt.n	8004ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	f003 021f 	and.w	r2, r3, #31
 8004eb0:	4907      	ldr	r1, [pc, #28]	@ (8004ed0 <__NVIC_EnableIRQ+0x38>)
 8004eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	2001      	movs	r0, #1
 8004eba:	fa00 f202 	lsl.w	r2, r0, r2
 8004ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	e000e100 	.word	0xe000e100

08004ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	6039      	str	r1, [r7, #0]
 8004ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	db0a      	blt.n	8004efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	490c      	ldr	r1, [pc, #48]	@ (8004f20 <__NVIC_SetPriority+0x4c>)
 8004eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef2:	0112      	lsls	r2, r2, #4
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004efc:	e00a      	b.n	8004f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	4908      	ldr	r1, [pc, #32]	@ (8004f24 <__NVIC_SetPriority+0x50>)
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	3b04      	subs	r3, #4
 8004f0c:	0112      	lsls	r2, r2, #4
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	440b      	add	r3, r1
 8004f12:	761a      	strb	r2, [r3, #24]
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	e000e100 	.word	0xe000e100
 8004f24:	e000ed00 	.word	0xe000ed00

08004f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b089      	sub	sp, #36	@ 0x24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f1c3 0307 	rsb	r3, r3, #7
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	bf28      	it	cs
 8004f46:	2304      	movcs	r3, #4
 8004f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	2b06      	cmp	r3, #6
 8004f50:	d902      	bls.n	8004f58 <NVIC_EncodePriority+0x30>
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	3b03      	subs	r3, #3
 8004f56:	e000      	b.n	8004f5a <NVIC_EncodePriority+0x32>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	43da      	mvns	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f70:	f04f 31ff 	mov.w	r1, #4294967295
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7a:	43d9      	mvns	r1, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f80:	4313      	orrs	r3, r2
         );
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3724      	adds	r7, #36	@ 0x24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fa0:	d301      	bcc.n	8004fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e00f      	b.n	8004fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd0 <SysTick_Config+0x40>)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fae:	210f      	movs	r1, #15
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	f7ff ff8e 	bl	8004ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fb8:	4b05      	ldr	r3, [pc, #20]	@ (8004fd0 <SysTick_Config+0x40>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fbe:	4b04      	ldr	r3, [pc, #16]	@ (8004fd0 <SysTick_Config+0x40>)
 8004fc0:	2207      	movs	r2, #7
 8004fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	e000e010 	.word	0xe000e010

08004fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff ff29 	bl	8004e34 <__NVIC_SetPriorityGrouping>
}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b086      	sub	sp, #24
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
 8004ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ffc:	f7ff ff3e 	bl	8004e7c <__NVIC_GetPriorityGrouping>
 8005000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	6978      	ldr	r0, [r7, #20]
 8005008:	f7ff ff8e 	bl	8004f28 <NVIC_EncodePriority>
 800500c:	4602      	mov	r2, r0
 800500e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff ff5d 	bl	8004ed4 <__NVIC_SetPriority>
}
 800501a:	bf00      	nop
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
 8005028:	4603      	mov	r3, r0
 800502a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800502c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff ff31 	bl	8004e98 <__NVIC_EnableIRQ>
}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7ff ffa2 	bl	8004f90 <SysTick_Config>
 800504c:	4603      	mov	r3, r0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005064:	f7ff fb58 	bl	8004718 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e099      	b.n	80051a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0201 	bic.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005094:	e00f      	b.n	80050b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005096:	f7ff fb3f 	bl	8004718 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b05      	cmp	r3, #5
 80050a2:	d908      	bls.n	80050b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2203      	movs	r2, #3
 80050ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e078      	b.n	80051a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e8      	bne.n	8005096 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4b38      	ldr	r3, [pc, #224]	@ (80051b0 <HAL_DMA_Init+0x158>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510c:	2b04      	cmp	r3, #4
 800510e:	d107      	bne.n	8005120 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005118:	4313      	orrs	r3, r2
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f023 0307 	bic.w	r3, r3, #7
 8005136:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005146:	2b04      	cmp	r3, #4
 8005148:	d117      	bne.n	800517a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00e      	beq.n	800517a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fb0d 	bl	800577c <DMA_CheckFifoParam>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d008      	beq.n	800517a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2240      	movs	r2, #64	@ 0x40
 800516c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005176:	2301      	movs	r3, #1
 8005178:	e016      	b.n	80051a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fac4 	bl	8005710 <DMA_CalcBaseAndBitshift>
 8005188:	4603      	mov	r3, r0
 800518a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005190:	223f      	movs	r2, #63	@ 0x3f
 8005192:	409a      	lsls	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	f010803f 	.word	0xf010803f

080051b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_DMA_Start_IT+0x26>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e040      	b.n	800525c <HAL_DMA_Start_IT+0xa8>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d12f      	bne.n	800524e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2202      	movs	r2, #2
 80051f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 fa56 	bl	80056b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520c:	223f      	movs	r2, #63	@ 0x3f
 800520e:	409a      	lsls	r2, r3
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0216 	orr.w	r2, r2, #22
 8005222:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0208 	orr.w	r2, r2, #8
 800523a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	e005      	b.n	800525a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005256:	2302      	movs	r3, #2
 8005258:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800525a:	7dfb      	ldrb	r3, [r7, #23]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005270:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005272:	f7ff fa51 	bl	8004718 <HAL_GetTick>
 8005276:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d008      	beq.n	8005296 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2280      	movs	r2, #128	@ 0x80
 8005288:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e052      	b.n	800533c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0216 	bic.w	r2, r2, #22
 80052a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695a      	ldr	r2, [r3, #20]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d103      	bne.n	80052c6 <HAL_DMA_Abort+0x62>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0208 	bic.w	r2, r2, #8
 80052d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052e6:	e013      	b.n	8005310 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052e8:	f7ff fa16 	bl	8004718 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b05      	cmp	r3, #5
 80052f4:	d90c      	bls.n	8005310 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2203      	movs	r2, #3
 8005300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e015      	b.n	800533c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e4      	bne.n	80052e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005322:	223f      	movs	r2, #63	@ 0x3f
 8005324:	409a      	lsls	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d004      	beq.n	8005362 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2280      	movs	r2, #128	@ 0x80
 800535c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e00c      	b.n	800537c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2205      	movs	r2, #5
 8005366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0201 	bic.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005394:	4b8e      	ldr	r3, [pc, #568]	@ (80055d0 <HAL_DMA_IRQHandler+0x248>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a8e      	ldr	r2, [pc, #568]	@ (80055d4 <HAL_DMA_IRQHandler+0x24c>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	0a9b      	lsrs	r3, r3, #10
 80053a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b2:	2208      	movs	r2, #8
 80053b4:	409a      	lsls	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01a      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d013      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0204 	bic.w	r2, r2, #4
 80053da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e0:	2208      	movs	r2, #8
 80053e2:	409a      	lsls	r2, r3
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ec:	f043 0201 	orr.w	r2, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f8:	2201      	movs	r2, #1
 80053fa:	409a      	lsls	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d012      	beq.n	800542a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005416:	2201      	movs	r2, #1
 8005418:	409a      	lsls	r2, r3
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005422:	f043 0202 	orr.w	r2, r3, #2
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800542e:	2204      	movs	r2, #4
 8005430:	409a      	lsls	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4013      	ands	r3, r2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d012      	beq.n	8005460 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00b      	beq.n	8005460 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800544c:	2204      	movs	r2, #4
 800544e:	409a      	lsls	r2, r3
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005458:	f043 0204 	orr.w	r2, r3, #4
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005464:	2210      	movs	r2, #16
 8005466:	409a      	lsls	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d043      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d03c      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005482:	2210      	movs	r2, #16
 8005484:	409a      	lsls	r2, r3
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d018      	beq.n	80054ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d108      	bne.n	80054b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d024      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	4798      	blx	r3
 80054b6:	e01f      	b.n	80054f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01b      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
 80054c8:	e016      	b.n	80054f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d107      	bne.n	80054e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0208 	bic.w	r2, r2, #8
 80054e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054fc:	2220      	movs	r2, #32
 80054fe:	409a      	lsls	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 808f 	beq.w	8005628 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8087 	beq.w	8005628 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800551e:	2220      	movs	r2, #32
 8005520:	409a      	lsls	r2, r3
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b05      	cmp	r3, #5
 8005530:	d136      	bne.n	80055a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0216 	bic.w	r2, r2, #22
 8005540:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695a      	ldr	r2, [r3, #20]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005550:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d103      	bne.n	8005562 <HAL_DMA_IRQHandler+0x1da>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800555e:	2b00      	cmp	r3, #0
 8005560:	d007      	beq.n	8005572 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0208 	bic.w	r2, r2, #8
 8005570:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005576:	223f      	movs	r2, #63	@ 0x3f
 8005578:	409a      	lsls	r2, r3
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005592:	2b00      	cmp	r3, #0
 8005594:	d07e      	beq.n	8005694 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	4798      	blx	r3
        }
        return;
 800559e:	e079      	b.n	8005694 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01d      	beq.n	80055ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10d      	bne.n	80055d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d031      	beq.n	8005628 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	4798      	blx	r3
 80055cc:	e02c      	b.n	8005628 <HAL_DMA_IRQHandler+0x2a0>
 80055ce:	bf00      	nop
 80055d0:	20000038 	.word	0x20000038
 80055d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d023      	beq.n	8005628 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
 80055e8:	e01e      	b.n	8005628 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10f      	bne.n	8005618 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0210 	bic.w	r2, r2, #16
 8005606:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562c:	2b00      	cmp	r3, #0
 800562e:	d032      	beq.n	8005696 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d022      	beq.n	8005682 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2205      	movs	r2, #5
 8005640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0201 	bic.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	3301      	adds	r3, #1
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	429a      	cmp	r2, r3
 800565e:	d307      	bcc.n	8005670 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f2      	bne.n	8005654 <HAL_DMA_IRQHandler+0x2cc>
 800566e:	e000      	b.n	8005672 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005670:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	4798      	blx	r3
 8005692:	e000      	b.n	8005696 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005694:	bf00      	nop
    }
  }
}
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80056d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b40      	cmp	r3, #64	@ 0x40
 80056e0:	d108      	bne.n	80056f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80056f2:	e007      	b.n	8005704 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	60da      	str	r2, [r3, #12]
}
 8005704:	bf00      	nop
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	3b10      	subs	r3, #16
 8005720:	4a14      	ldr	r2, [pc, #80]	@ (8005774 <DMA_CalcBaseAndBitshift+0x64>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	091b      	lsrs	r3, r3, #4
 8005728:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800572a:	4a13      	ldr	r2, [pc, #76]	@ (8005778 <DMA_CalcBaseAndBitshift+0x68>)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b03      	cmp	r3, #3
 800573c:	d909      	bls.n	8005752 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005746:	f023 0303 	bic.w	r3, r3, #3
 800574a:	1d1a      	adds	r2, r3, #4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005750:	e007      	b.n	8005762 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800575a:	f023 0303 	bic.w	r3, r3, #3
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	aaaaaaab 	.word	0xaaaaaaab
 8005778:	08018550 	.word	0x08018550

0800577c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11f      	bne.n	80057d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d856      	bhi.n	800584a <DMA_CheckFifoParam+0xce>
 800579c:	a201      	add	r2, pc, #4	@ (adr r2, 80057a4 <DMA_CheckFifoParam+0x28>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057b5 	.word	0x080057b5
 80057a8:	080057c7 	.word	0x080057c7
 80057ac:	080057b5 	.word	0x080057b5
 80057b0:	0800584b 	.word	0x0800584b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d046      	beq.n	800584e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c4:	e043      	b.n	800584e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057ce:	d140      	bne.n	8005852 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057d4:	e03d      	b.n	8005852 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057de:	d121      	bne.n	8005824 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d837      	bhi.n	8005856 <DMA_CheckFifoParam+0xda>
 80057e6:	a201      	add	r2, pc, #4	@ (adr r2, 80057ec <DMA_CheckFifoParam+0x70>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	080057fd 	.word	0x080057fd
 80057f0:	08005803 	.word	0x08005803
 80057f4:	080057fd 	.word	0x080057fd
 80057f8:	08005815 	.word	0x08005815
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005800:	e030      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005806:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d025      	beq.n	800585a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005812:	e022      	b.n	800585a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800581c:	d11f      	bne.n	800585e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005822:	e01c      	b.n	800585e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d903      	bls.n	8005832 <DMA_CheckFifoParam+0xb6>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b03      	cmp	r3, #3
 800582e:	d003      	beq.n	8005838 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005830:	e018      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
      break;
 8005836:	e015      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00e      	beq.n	8005862 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
      break;
 8005848:	e00b      	b.n	8005862 <DMA_CheckFifoParam+0xe6>
      break;
 800584a:	bf00      	nop
 800584c:	e00a      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;
 800584e:	bf00      	nop
 8005850:	e008      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;
 8005852:	bf00      	nop
 8005854:	e006      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;
 8005856:	bf00      	nop
 8005858:	e004      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;
 800585a:	bf00      	nop
 800585c:	e002      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;   
 800585e:	bf00      	nop
 8005860:	e000      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;
 8005862:	bf00      	nop
    }
  } 
  
  return status; 
 8005864:	7bfb      	ldrb	r3, [r7, #15]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop

08005874 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e08a      	b.n	800599c <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800588c:	2b00      	cmp	r3, #0
 800588e:	d106      	bne.n	800589e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f004 fe8d 	bl	800a5b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800589e:	2300      	movs	r3, #0
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	4b40      	ldr	r3, [pc, #256]	@ (80059a4 <HAL_ETH_Init+0x130>)
 80058a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a6:	4a3f      	ldr	r2, [pc, #252]	@ (80059a4 <HAL_ETH_Init+0x130>)
 80058a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80058ae:	4b3d      	ldr	r3, [pc, #244]	@ (80059a4 <HAL_ETH_Init+0x130>)
 80058b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058b6:	60bb      	str	r3, [r7, #8]
 80058b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80058ba:	4b3b      	ldr	r3, [pc, #236]	@ (80059a8 <HAL_ETH_Init+0x134>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	4a3a      	ldr	r2, [pc, #232]	@ (80059a8 <HAL_ETH_Init+0x134>)
 80058c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80058c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80058c6:	4b38      	ldr	r3, [pc, #224]	@ (80059a8 <HAL_ETH_Init+0x134>)
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	4936      	ldr	r1, [pc, #216]	@ (80059a8 <HAL_ETH_Init+0x134>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80058d4:	4b34      	ldr	r3, [pc, #208]	@ (80059a8 <HAL_ETH_Init+0x134>)
 80058d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	f043 0301 	orr.w	r3, r3, #1
 80058ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058f0:	f7fe ff12 	bl	8004718 <HAL_GetTick>
 80058f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80058f6:	e011      	b.n	800591c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80058f8:	f7fe ff0e 	bl	8004718 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005906:	d909      	bls.n	800591c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2204      	movs	r2, #4
 800590c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	22e0      	movs	r2, #224	@ 0xe0
 8005914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e03f      	b.n	800599c <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e4      	bne.n	80058f8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fe16 	bl	8006560 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fec1 	bl	80066bc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 ff17 	bl	800676e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	461a      	mov	r2, r3
 8005946:	2100      	movs	r1, #0
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fe7f 	bl	800664c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800595c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800596e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005972:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8005986:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2210      	movs	r2, #16
 8005996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40023800 	.word	0x40023800
 80059a8:	40013800 	.word	0x40013800

080059ac <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d150      	bne.n	8005a60 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2204      	movs	r2, #4
 80059ca:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f9f8 	bl	8005dc2 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0208 	orr.w	r2, r2, #8
 80059e0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80059ea:	2001      	movs	r0, #1
 80059ec:	f7fe fea0 	bl	8004730 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0204 	orr.w	r2, r2, #4
 8005a06:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a10:	2001      	movs	r0, #1
 8005a12:	f7fe fe8d 	bl	8004730 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fc3a 	bl	8006298 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005a36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a3a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	f043 0302 	orr.w	r3, r3, #2
 8005a4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a52:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2240      	movs	r2, #64	@ 0x40
 8005a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	e000      	b.n	8005a62 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
  }
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b084      	sub	sp, #16
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a78:	2b40      	cmp	r3, #64	@ 0x40
 8005a7a:	d14a      	bne.n	8005b12 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a9a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	f023 0302 	bic.w	r3, r3, #2
 8005aae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ab2:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0204 	bic.w	r2, r2, #4
 8005ac2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005acc:	2001      	movs	r0, #1
 8005ace:	f7fe fe2f 	bl	8004730 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fbdc 	bl	8006298 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0208 	bic.w	r2, r2, #8
 8005aee:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005af8:	2001      	movs	r0, #1
 8005afa:	f7fe fe19 	bl	8004730 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2210      	movs	r2, #16
 8005b0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e000      	b.n	8005b14 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
  }
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b34:	f043 0201 	orr.w	r2, r3, #1
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e07c      	b.n	8005c3c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b48:	2b40      	cmp	r3, #64	@ 0x40
 8005b4a:	d176      	bne.n	8005c3a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 fe7b 	bl	800684c <ETH_Prepare_Tx_Descriptors>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d009      	beq.n	8005b70 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b62:	f043 0202 	orr.w	r2, r3, #2
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e065      	b.n	8005c3c <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8005b70:	f3bf 8f4f 	dsb	sy
}
 8005b74:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3206      	adds	r2, #6
 8005b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b82:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d904      	bls.n	8005ba0 <HAL_ETH_Transmit+0x84>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9a:	1f1a      	subs	r2, r3, #4
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3106      	adds	r1, #6
 8005bac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005bb0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005bb4:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8005bb6:	f7fe fdaf 	bl	8004718 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005bbc:	e037      	b.n	8005c2e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d011      	beq.n	8005bf4 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd6:	f043 0208 	orr.w	r2, r3, #8
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e023      	b.n	8005c3c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfa:	d018      	beq.n	8005c2e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bfc:	f7fe fd8c 	bl	8004718 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d302      	bcc.n	8005c12 <HAL_ETH_Transmit+0xf6>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10d      	bne.n	8005c2e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c18:	f043 0204 	orr.w	r2, r3, #4
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8005c28:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e006      	b.n	8005c3c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	dbc3      	blt.n	8005bbe <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e000      	b.n	8005c3c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
  }
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d109      	bne.n	8005c70 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c62:	f043 0201 	orr.w	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0a4      	b.n	8005dba <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c76:	2b40      	cmp	r3, #64	@ 0x40
 8005c78:	d001      	beq.n	8005c7e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e09d      	b.n	8005dba <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c82:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	3212      	adds	r2, #18
 8005c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c94:	f1c3 0304 	rsb	r3, r3, #4
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005c9a:	e066      	b.n	8005d6a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d103      	bne.n	8005ccc <HAL_ETH_ReadData+0x88>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d03c      	beq.n	8005d46 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	0c1b      	lsrs	r3, r3, #16
 8005cea:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005cee:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8005d04:	2301      	movs	r3, #1
 8005d06:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005d20:	461a      	mov	r2, r3
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f004 fdf7 	bl	800a918 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	441a      	add	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	2200      	movs	r2, #0
 8005d44:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d902      	bls.n	8005d58 <HAL_ETH_ReadData+0x114>
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3b04      	subs	r3, #4
 8005d56:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	3212      	adds	r2, #18
 8005d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d62:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	3301      	adds	r3, #1
 8005d68:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	db06      	blt.n	8005d80 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d202      	bcs.n	8005d80 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8005d7a:	7cfb      	ldrb	r3, [r7, #19]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d08d      	beq.n	8005c9c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	441a      	add	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f814 	bl	8005dc2 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8005da0:	7cfb      	ldrb	r3, [r7, #19]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d108      	bne.n	8005db8 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e000      	b.n	8005dba <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b088      	sub	sp, #32
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dd6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	3212      	adds	r2, #18
 8005dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de2:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005de8:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8005dea:	e044      	b.n	8005e76 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d112      	bne.n	8005e1a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8005df4:	f107 0308 	add.w	r3, r7, #8
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f004 fd5d 	bl	800a8b8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d102      	bne.n	8005e0a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	74fb      	strb	r3, [r7, #19]
 8005e08:	e007      	b.n	8005e1a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	461a      	mov	r2, r3
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8005e1a:	7cfb      	ldrb	r3, [r7, #19]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d02a      	beq.n	8005e76 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d108      	bne.n	8005e3a <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	6053      	str	r3, [r2, #4]
 8005e38:	e005      	b.n	8005e46 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	3301      	adds	r3, #1
 8005e56:	61fb      	str	r3, [r7, #28]
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d902      	bls.n	8005e64 <ETH_UpdateDescriptor+0xa2>
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3b04      	subs	r3, #4
 8005e62:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	3212      	adds	r2, #18
 8005e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6e:	617b      	str	r3, [r7, #20]
      desccount--;
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <ETH_UpdateDescriptor+0xc0>
 8005e7c:	7cfb      	ldrb	r3, [r7, #19]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1b4      	bne.n	8005dec <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d01a      	beq.n	8005ec2 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	3303      	adds	r3, #3
 8005e90:	f003 0303 	and.w	r3, r3, #3
 8005e94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005e96:	f3bf 8f5f 	dmb	sy
}
 8005e9a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6919      	ldr	r1, [r3, #16]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	18ca      	adds	r2, r1, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eb4:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b086      	sub	sp, #24
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	607a      	str	r2, [r7, #4]
 8005ed6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f003 031c 	and.w	r3, r3, #28
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	02db      	lsls	r3, r3, #11
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	019b      	lsls	r3, r3, #6
 8005ef8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f023 0302 	bic.w	r3, r3, #2
 8005f08:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8005f1a:	f7fe fbfd 	bl	8004718 <HAL_GetTick>
 8005f1e:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005f20:	e00d      	b.n	8005f3e <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8005f22:	f7fe fbf9 	bl	8004718 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f30:	d301      	bcc.n	8005f36 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e010      	b.n	8005f58 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1ec      	bne.n	8005f22 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f003 031c 	and.w	r3, r3, #28
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	02db      	lsls	r3, r3, #11
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	019b      	lsls	r3, r3, #6
 8005f8e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f043 0302 	orr.w	r3, r3, #2
 8005f9e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fba:	f7fe fbad 	bl	8004718 <HAL_GetTick>
 8005fbe:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005fc0:	e00d      	b.n	8005fde <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8005fc2:	f7fe fba9 	bl	8004718 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fd0:	d301      	bcc.n	8005fd6 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e009      	b.n	8005fea <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1ec      	bne.n	8005fc2 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e0e6      	b.n	80061d4 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	bf14      	ite	ne
 8006014:	2301      	movne	r3, #1
 8006016:	2300      	moveq	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	461a      	mov	r2, r3
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800603a:	2b00      	cmp	r3, #0
 800603c:	bf0c      	ite	eq
 800603e:	2301      	moveq	r3, #1
 8006040:	2300      	movne	r3, #0
 8006042:	b2db      	uxtb	r3, r3
 8006044:	461a      	mov	r2, r3
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8006056:	2b00      	cmp	r3, #0
 8006058:	bf14      	ite	ne
 800605a:	2301      	movne	r3, #1
 800605c:	2300      	moveq	r3, #0
 800605e:	b2db      	uxtb	r3, r3
 8006060:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006070:	2b00      	cmp	r3, #0
 8006072:	bf0c      	ite	eq
 8006074:	2301      	moveq	r3, #1
 8006076:	2300      	movne	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	461a      	mov	r2, r3
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800608a:	2b00      	cmp	r3, #0
 800608c:	bf14      	ite	ne
 800608e:	2301      	movne	r3, #1
 8006090:	2300      	moveq	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bf0c      	ite	eq
 80060c4:	2301      	moveq	r3, #1
 80060c6:	2300      	movne	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	461a      	mov	r2, r3
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	bf0c      	ite	eq
 80060de:	2301      	moveq	r3, #1
 80060e0:	2300      	movne	r3, #0
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	bf14      	ite	ne
 80060f8:	2301      	movne	r3, #1
 80060fa:	2300      	moveq	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	461a      	mov	r2, r3
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800611c:	2b00      	cmp	r3, #0
 800611e:	bf14      	ite	ne
 8006120:	2301      	movne	r3, #1
 8006122:	2300      	moveq	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006136:	2b00      	cmp	r3, #0
 8006138:	bf14      	ite	ne
 800613a:	2301      	movne	r3, #1
 800613c:	2300      	moveq	r3, #0
 800613e:	b2db      	uxtb	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	bf14      	ite	ne
 8006154:	2301      	movne	r3, #1
 8006156:	2300      	moveq	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	461a      	mov	r2, r3
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800616c:	2b00      	cmp	r3, #0
 800616e:	bf0c      	ite	eq
 8006170:	2301      	moveq	r3, #1
 8006172:	2300      	movne	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	0c1b      	lsrs	r3, r3, #16
 8006194:	b29a      	uxth	r2, r3
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bf14      	ite	ne
 80061a8:	2301      	movne	r3, #1
 80061aa:	2300      	moveq	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	461a      	mov	r2, r3
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	bf14      	ite	ne
 80061c4:	2301      	movne	r3, #1
 80061c6:	2300      	moveq	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e00b      	b.n	800620c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061fa:	2b10      	cmp	r3, #16
 80061fc:	d105      	bne.n	800620a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80061fe:	6839      	ldr	r1, [r7, #0]
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f86f 	bl	80062e4 <ETH_SetMACConfig>

    return HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	e000      	b.n	800620c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
  }
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 031c 	bic.w	r3, r3, #28
 800622a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800622c:	f001 fbb4 	bl	8007998 <HAL_RCC_GetHCLKFreq>
 8006230:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	4a14      	ldr	r2, [pc, #80]	@ (8006288 <HAL_ETH_SetMDIOClockRange+0x74>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d804      	bhi.n	8006244 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f043 0308 	orr.w	r3, r3, #8
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	e019      	b.n	8006278 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4a11      	ldr	r2, [pc, #68]	@ (800628c <HAL_ETH_SetMDIOClockRange+0x78>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d204      	bcs.n	8006256 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f043 030c 	orr.w	r3, r3, #12
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	e010      	b.n	8006278 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	4a0d      	ldr	r2, [pc, #52]	@ (8006290 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d90c      	bls.n	8006278 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	4a0c      	ldr	r2, [pc, #48]	@ (8006294 <HAL_ETH_SetMDIOClockRange+0x80>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d804      	bhi.n	8006270 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f043 0304 	orr.w	r3, r3, #4
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	e003      	b.n	8006278 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f043 0310 	orr.w	r3, r3, #16
 8006276:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	611a      	str	r2, [r3, #16]
}
 8006280:	bf00      	nop
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	02160ebf 	.word	0x02160ebf
 800628c:	03938700 	.word	0x03938700
 8006290:	05f5e0ff 	.word	0x05f5e0ff
 8006294:	08f0d17f 	.word	0x08f0d17f

08006298 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6812      	ldr	r2, [r2, #0]
 80062b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80062ba:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80062c8:	2001      	movs	r0, #1
 80062ca:	f7fe fa31 	bl	8004730 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80062d8:	6193      	str	r3, [r2, #24]
}
 80062da:	bf00      	nop
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4b53      	ldr	r3, [pc, #332]	@ (8006448 <ETH_SetMACConfig+0x164>)
 80062fa:	4013      	ands	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	7b9b      	ldrb	r3, [r3, #14]
 8006302:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	7c12      	ldrb	r2, [r2, #16]
 8006308:	2a00      	cmp	r2, #0
 800630a:	d102      	bne.n	8006312 <ETH_SetMACConfig+0x2e>
 800630c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006310:	e000      	b.n	8006314 <ETH_SetMACConfig+0x30>
 8006312:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006314:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	7c52      	ldrb	r2, [r2, #17]
 800631a:	2a00      	cmp	r2, #0
 800631c:	d102      	bne.n	8006324 <ETH_SetMACConfig+0x40>
 800631e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8006322:	e000      	b.n	8006326 <ETH_SetMACConfig+0x42>
 8006324:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006326:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800632c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	7fdb      	ldrb	r3, [r3, #31]
 8006332:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8006334:	431a      	orrs	r2, r3
                        macconf->Speed |
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800633a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	7f92      	ldrb	r2, [r2, #30]
 8006340:	2a00      	cmp	r2, #0
 8006342:	d102      	bne.n	800634a <ETH_SetMACConfig+0x66>
 8006344:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006348:	e000      	b.n	800634c <ETH_SetMACConfig+0x68>
 800634a:	2200      	movs	r2, #0
                        macconf->Speed |
 800634c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	7f1b      	ldrb	r3, [r3, #28]
 8006352:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006354:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800635a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	791b      	ldrb	r3, [r3, #4]
 8006360:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8006362:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	f892 2020 	ldrb.w	r2, [r2, #32]
 800636a:	2a00      	cmp	r2, #0
 800636c:	d102      	bne.n	8006374 <ETH_SetMACConfig+0x90>
 800636e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006372:	e000      	b.n	8006376 <ETH_SetMACConfig+0x92>
 8006374:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006376:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	7bdb      	ldrb	r3, [r3, #15]
 800637c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800637e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006384:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800638c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800638e:	4313      	orrs	r3, r2
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80063a6:	2001      	movs	r0, #1
 80063a8:	f7fe f9c2 	bl	8004730 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80063c2:	4013      	ands	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80063d2:	2a00      	cmp	r2, #0
 80063d4:	d101      	bne.n	80063da <ETH_SetMACConfig+0xf6>
 80063d6:	2280      	movs	r2, #128	@ 0x80
 80063d8:	e000      	b.n	80063dc <ETH_SetMACConfig+0xf8>
 80063da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80063dc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80063e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80063ea:	2a01      	cmp	r2, #1
 80063ec:	d101      	bne.n	80063f2 <ETH_SetMACConfig+0x10e>
 80063ee:	2208      	movs	r2, #8
 80063f0:	e000      	b.n	80063f4 <ETH_SetMACConfig+0x110>
 80063f2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80063f4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80063fc:	2a01      	cmp	r2, #1
 80063fe:	d101      	bne.n	8006404 <ETH_SetMACConfig+0x120>
 8006400:	2204      	movs	r2, #4
 8006402:	e000      	b.n	8006406 <ETH_SetMACConfig+0x122>
 8006404:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006406:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800640e:	2a01      	cmp	r2, #1
 8006410:	d101      	bne.n	8006416 <ETH_SetMACConfig+0x132>
 8006412:	2202      	movs	r2, #2
 8006414:	e000      	b.n	8006418 <ETH_SetMACConfig+0x134>
 8006416:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006418:	4313      	orrs	r3, r2
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006430:	2001      	movs	r0, #1
 8006432:	f7fe f97d 	bl	8004730 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	619a      	str	r2, [r3, #24]
}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	fd20810f 	.word	0xfd20810f

0800644c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4b3d      	ldr	r3, [pc, #244]	@ (800655c <ETH_SetDMAConfig+0x110>)
 8006466:	4013      	ands	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	7b1b      	ldrb	r3, [r3, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d102      	bne.n	8006478 <ETH_SetDMAConfig+0x2c>
 8006472:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006476:	e000      	b.n	800647a <ETH_SetDMAConfig+0x2e>
 8006478:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	7b5b      	ldrb	r3, [r3, #13]
 800647e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006480:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	7f52      	ldrb	r2, [r2, #29]
 8006486:	2a00      	cmp	r2, #0
 8006488:	d102      	bne.n	8006490 <ETH_SetDMAConfig+0x44>
 800648a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800648e:	e000      	b.n	8006492 <ETH_SetDMAConfig+0x46>
 8006490:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006492:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	7b9b      	ldrb	r3, [r3, #14]
 8006498:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800649a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80064a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	7f1b      	ldrb	r3, [r3, #28]
 80064a6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80064a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	7f9b      	ldrb	r3, [r3, #30]
 80064ae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80064b0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80064b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064be:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80064c0:	4313      	orrs	r3, r2
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064d0:	461a      	mov	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80064e2:	2001      	movs	r0, #1
 80064e4:	f7fe f924 	bl	8004730 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064f0:	461a      	mov	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	791b      	ldrb	r3, [r3, #4]
 80064fa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006500:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8006506:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800650c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006514:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8006516:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800651e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006524:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800652e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006532:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006540:	2001      	movs	r0, #1
 8006542:	f7fe f8f5 	bl	8004730 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800654e:	461a      	mov	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6013      	str	r3, [r2, #0]
}
 8006554:	bf00      	nop
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	f8de3f23 	.word	0xf8de3f23

08006560 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b0a6      	sub	sp, #152	@ 0x98
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800656e:	2301      	movs	r3, #1
 8006570:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006574:	2300      	movs	r3, #0
 8006576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006578:	2300      	movs	r3, #0
 800657a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800657e:	2301      	movs	r3, #1
 8006580:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006584:	2300      	movs	r3, #0
 8006586:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800658a:	2301      	movs	r3, #1
 800658c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006590:	2301      	movs	r3, #1
 8006592:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006596:	2300      	movs	r3, #0
 8006598:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800659c:	2300      	movs	r3, #0
 800659e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80065a2:	2300      	movs	r3, #0
 80065a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80065b0:	2300      	movs	r3, #0
 80065b2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80065b6:	2300      	movs	r3, #0
 80065b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80065bc:	2300      	movs	r3, #0
 80065be:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80065c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80065cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80065ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80065d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80065d4:	2300      	movs	r3, #0
 80065d6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80065da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff fe7f 	bl	80062e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80065e6:	2301      	movs	r3, #1
 80065e8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80065ea:	2301      	movs	r3, #1
 80065ec:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80065ee:	2301      	movs	r3, #1
 80065f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80065f4:	2301      	movs	r3, #1
 80065f6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80065f8:	2300      	movs	r3, #0
 80065fa:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006602:	2300      	movs	r3, #0
 8006604:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006608:	2300      	movs	r3, #0
 800660a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006612:	2301      	movs	r3, #1
 8006614:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006616:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800661a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800661c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006620:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006622:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006626:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8006628:	2301      	movs	r3, #1
 800662a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800662e:	2300      	movs	r3, #0
 8006630:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006632:	2300      	movs	r3, #0
 8006634:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006636:	f107 0308 	add.w	r3, r7, #8
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff ff05 	bl	800644c <ETH_SetDMAConfig>
}
 8006642:	bf00      	nop
 8006644:	3798      	adds	r7, #152	@ 0x98
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3305      	adds	r3, #5
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	3204      	adds	r2, #4
 8006664:	7812      	ldrb	r2, [r2, #0]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	4b11      	ldr	r3, [pc, #68]	@ (80066b4 <ETH_MACAddressConfig+0x68>)
 800666e:	4413      	add	r3, r2
 8006670:	461a      	mov	r2, r3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3303      	adds	r3, #3
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	061a      	lsls	r2, r3, #24
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3302      	adds	r3, #2
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	041b      	lsls	r3, r3, #16
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3301      	adds	r3, #1
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	021b      	lsls	r3, r3, #8
 8006690:	4313      	orrs	r3, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	7812      	ldrb	r2, [r2, #0]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <ETH_MACAddressConfig+0x6c>)
 800669e:	4413      	add	r3, r2
 80066a0:	461a      	mov	r2, r3
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	6013      	str	r3, [r2, #0]
}
 80066a6:	bf00      	nop
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40028040 	.word	0x40028040
 80066b8:	40028044 	.word	0x40028044

080066bc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	e03e      	b.n	8006748 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68d9      	ldr	r1, [r3, #12]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	440b      	add	r3, r1
 80066da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2200      	movs	r2, #0
 80066e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2200      	movs	r2, #0
 80066ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2200      	movs	r2, #0
 80066f2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	3206      	adds	r2, #6
 80066fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d80c      	bhi.n	800672c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68d9      	ldr	r1, [r3, #12]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	4613      	mov	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	00db      	lsls	r3, r3, #3
 8006722:	440b      	add	r3, r1
 8006724:	461a      	mov	r2, r3
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	60da      	str	r2, [r3, #12]
 800672a:	e004      	b.n	8006736 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	461a      	mov	r2, r3
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3301      	adds	r3, #1
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b03      	cmp	r3, #3
 800674c:	d9bd      	bls.n	80066ca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006760:	611a      	str	r2, [r3, #16]
}
 8006762:	bf00      	nop
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	e048      	b.n	800680e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6919      	ldr	r1, [r3, #16]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	440b      	add	r3, r1
 800678c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2200      	movs	r2, #0
 8006798:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	2200      	movs	r2, #0
 800679e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2200      	movs	r2, #0
 80067a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2200      	movs	r2, #0
 80067aa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2200      	movs	r2, #0
 80067b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80067b8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80067d2:	68b9      	ldr	r1, [r7, #8]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	3212      	adds	r2, #18
 80067da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d80c      	bhi.n	80067fe <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6919      	ldr	r1, [r3, #16]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	440b      	add	r3, r1
 80067f6:	461a      	mov	r2, r3
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	60da      	str	r2, [r3, #12]
 80067fc:	e004      	b.n	8006808 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	461a      	mov	r2, r3
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3301      	adds	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b03      	cmp	r3, #3
 8006812:	d9b3      	bls.n	800677c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691a      	ldr	r2, [r3, #16]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800683e:	60da      	str	r2, [r3, #12]
}
 8006840:	bf00      	nop
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800684c:	b480      	push	{r7}
 800684e:	b091      	sub	sp, #68	@ 0x44
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3318      	adds	r3, #24
 800685c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8006864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006876:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800687e:	2300      	movs	r3, #0
 8006880:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800688a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800688e:	d007      	beq.n	80068a0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006894:	3304      	adds	r3, #4
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80068a0:	2302      	movs	r3, #2
 80068a2:	e115      	b.n	8006ad0 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 80068a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a6:	3301      	adds	r3, #1
 80068a8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80068aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80068b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80068bc:	f023 031f 	bic.w	r3, r3, #31
 80068c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068c2:	6852      	ldr	r2, [r2, #4]
 80068c4:	431a      	orrs	r2, r3
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d008      	beq.n	80068e8 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d008      	beq.n	8006906 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	431a      	orrs	r2, r3
 8006902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006904:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	d005      	beq.n	800691e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8006912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800692a:	e084      	b.n	8006a36 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800692c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006936:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d006      	beq.n	800694c <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	e005      	b.n	8006958 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800694c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006956:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800695a:	3301      	adds	r3, #1
 800695c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800695e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006960:	2b03      	cmp	r3, #3
 8006962:	d902      	bls.n	800696a <ETH_Prepare_Tx_Descriptors+0x11e>
 8006964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006966:	3b04      	subs	r3, #4
 8006968:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800696e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006972:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8006974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800697c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006980:	d007      	beq.n	8006992 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006986:	3304      	adds	r3, #4
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d029      	beq.n	80069e6 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80069a0:	2300      	movs	r3, #0
 80069a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069a4:	e019      	b.n	80069da <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 80069a6:	f3bf 8f5f 	dmb	sy
}
 80069aa:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80069ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80069b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80069b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ba:	3301      	adds	r3, #1
 80069bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d902      	bls.n	80069ca <ETH_Prepare_Tx_Descriptors+0x17e>
 80069c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069c6:	3b04      	subs	r3, #4
 80069c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80069ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80069d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d6:	3301      	adds	r3, #1
 80069d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069de:	429a      	cmp	r2, r3
 80069e0:	d3e1      	bcc.n	80069a6 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 80069e2:	2302      	movs	r3, #2
 80069e4:	e074      	b.n	8006ad0 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80069e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80069f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f4:	3301      	adds	r3, #1
 80069f6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80069f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80069fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8006a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8006a10:	f023 031f 	bic.w	r3, r3, #31
 8006a14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a16:	6852      	ldr	r2, [r2, #4]
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8006a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a20:	3301      	adds	r3, #1
 8006a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8006a24:	f3bf 8f5f 	dmb	sy
}
 8006a28:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8006a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f47f af76 	bne.w	800692c <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d006      	beq.n	8006a54 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	e005      	b.n	8006a60 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	6a3a      	ldr	r2, [r7, #32]
 8006a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a74:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8006a76:	f3bf 8f5f 	dmb	sy
}
 8006a7a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a86:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a90:	3304      	adds	r3, #4
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8006a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a9c:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa2:	613b      	str	r3, [r7, #16]
  return(result);
 8006aa4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8006aa6:	61fb      	str	r3, [r7, #28]
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f383 8810 	msr	PRIMASK, r3
}
 8006ab2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aba:	4413      	add	r3, r2
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	f383 8810 	msr	PRIMASK, r3
}
 8006acc:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3744      	adds	r7, #68	@ 0x44
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b089      	sub	sp, #36	@ 0x24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006af2:	2300      	movs	r3, #0
 8006af4:	61fb      	str	r3, [r7, #28]
 8006af6:	e16b      	b.n	8006dd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006af8:	2201      	movs	r2, #1
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	fa02 f303 	lsl.w	r3, r2, r3
 8006b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	f040 815a 	bne.w	8006dca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f003 0303 	and.w	r3, r3, #3
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d005      	beq.n	8006b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d130      	bne.n	8006b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	2203      	movs	r2, #3
 8006b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3e:	43db      	mvns	r3, r3
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	4013      	ands	r3, r2
 8006b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b64:	2201      	movs	r2, #1
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6c:	43db      	mvns	r3, r3
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	4013      	ands	r3, r2
 8006b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	091b      	lsrs	r3, r3, #4
 8006b7a:	f003 0201 	and.w	r2, r3, #1
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	fa02 f303 	lsl.w	r3, r2, r3
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f003 0303 	and.w	r3, r3, #3
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d017      	beq.n	8006bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	2203      	movs	r2, #3
 8006ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bac:	43db      	mvns	r3, r3
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f003 0303 	and.w	r3, r3, #3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d123      	bne.n	8006c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	08da      	lsrs	r2, r3, #3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3208      	adds	r2, #8
 8006be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	220f      	movs	r2, #15
 8006bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf4:	43db      	mvns	r3, r3
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	691a      	ldr	r2, [r3, #16]
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	08da      	lsrs	r2, r3, #3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	3208      	adds	r2, #8
 8006c1a:	69b9      	ldr	r1, [r7, #24]
 8006c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	2203      	movs	r2, #3
 8006c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c30:	43db      	mvns	r3, r3
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	4013      	ands	r3, r2
 8006c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f003 0203 	and.w	r2, r3, #3
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	fa02 f303 	lsl.w	r3, r2, r3
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 80b4 	beq.w	8006dca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c62:	2300      	movs	r3, #0
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	4b60      	ldr	r3, [pc, #384]	@ (8006de8 <HAL_GPIO_Init+0x30c>)
 8006c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c6a:	4a5f      	ldr	r2, [pc, #380]	@ (8006de8 <HAL_GPIO_Init+0x30c>)
 8006c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c72:	4b5d      	ldr	r3, [pc, #372]	@ (8006de8 <HAL_GPIO_Init+0x30c>)
 8006c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c7e:	4a5b      	ldr	r2, [pc, #364]	@ (8006dec <HAL_GPIO_Init+0x310>)
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	089b      	lsrs	r3, r3, #2
 8006c84:	3302      	adds	r3, #2
 8006c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	220f      	movs	r2, #15
 8006c96:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9a:	43db      	mvns	r3, r3
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a52      	ldr	r2, [pc, #328]	@ (8006df0 <HAL_GPIO_Init+0x314>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d02b      	beq.n	8006d02 <HAL_GPIO_Init+0x226>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a51      	ldr	r2, [pc, #324]	@ (8006df4 <HAL_GPIO_Init+0x318>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d025      	beq.n	8006cfe <HAL_GPIO_Init+0x222>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a50      	ldr	r2, [pc, #320]	@ (8006df8 <HAL_GPIO_Init+0x31c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d01f      	beq.n	8006cfa <HAL_GPIO_Init+0x21e>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a4f      	ldr	r2, [pc, #316]	@ (8006dfc <HAL_GPIO_Init+0x320>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d019      	beq.n	8006cf6 <HAL_GPIO_Init+0x21a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a4e      	ldr	r2, [pc, #312]	@ (8006e00 <HAL_GPIO_Init+0x324>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d013      	beq.n	8006cf2 <HAL_GPIO_Init+0x216>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a4d      	ldr	r2, [pc, #308]	@ (8006e04 <HAL_GPIO_Init+0x328>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d00d      	beq.n	8006cee <HAL_GPIO_Init+0x212>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a4c      	ldr	r2, [pc, #304]	@ (8006e08 <HAL_GPIO_Init+0x32c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d007      	beq.n	8006cea <HAL_GPIO_Init+0x20e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a4b      	ldr	r2, [pc, #300]	@ (8006e0c <HAL_GPIO_Init+0x330>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d101      	bne.n	8006ce6 <HAL_GPIO_Init+0x20a>
 8006ce2:	2307      	movs	r3, #7
 8006ce4:	e00e      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006ce6:	2308      	movs	r3, #8
 8006ce8:	e00c      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006cea:	2306      	movs	r3, #6
 8006cec:	e00a      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006cee:	2305      	movs	r3, #5
 8006cf0:	e008      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006cf2:	2304      	movs	r3, #4
 8006cf4:	e006      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e004      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	e002      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e000      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006d02:	2300      	movs	r3, #0
 8006d04:	69fa      	ldr	r2, [r7, #28]
 8006d06:	f002 0203 	and.w	r2, r2, #3
 8006d0a:	0092      	lsls	r2, r2, #2
 8006d0c:	4093      	lsls	r3, r2
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d14:	4935      	ldr	r1, [pc, #212]	@ (8006dec <HAL_GPIO_Init+0x310>)
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	089b      	lsrs	r3, r3, #2
 8006d1a:	3302      	adds	r3, #2
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d22:	4b3b      	ldr	r3, [pc, #236]	@ (8006e10 <HAL_GPIO_Init+0x334>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	43db      	mvns	r3, r3
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d46:	4a32      	ldr	r2, [pc, #200]	@ (8006e10 <HAL_GPIO_Init+0x334>)
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d4c:	4b30      	ldr	r3, [pc, #192]	@ (8006e10 <HAL_GPIO_Init+0x334>)
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	43db      	mvns	r3, r3
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d70:	4a27      	ldr	r2, [pc, #156]	@ (8006e10 <HAL_GPIO_Init+0x334>)
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006d76:	4b26      	ldr	r3, [pc, #152]	@ (8006e10 <HAL_GPIO_Init+0x334>)
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	43db      	mvns	r3, r3
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	4013      	ands	r3, r2
 8006d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8006e10 <HAL_GPIO_Init+0x334>)
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006da0:	4b1b      	ldr	r3, [pc, #108]	@ (8006e10 <HAL_GPIO_Init+0x334>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	43db      	mvns	r3, r3
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	4013      	ands	r3, r2
 8006dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006dc4:	4a12      	ldr	r2, [pc, #72]	@ (8006e10 <HAL_GPIO_Init+0x334>)
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	61fb      	str	r3, [r7, #28]
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	2b0f      	cmp	r3, #15
 8006dd4:	f67f ae90 	bls.w	8006af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop
 8006ddc:	3724      	adds	r7, #36	@ 0x24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40023800 	.word	0x40023800
 8006dec:	40013800 	.word	0x40013800
 8006df0:	40020000 	.word	0x40020000
 8006df4:	40020400 	.word	0x40020400
 8006df8:	40020800 	.word	0x40020800
 8006dfc:	40020c00 	.word	0x40020c00
 8006e00:	40021000 	.word	0x40021000
 8006e04:	40021400 	.word	0x40021400
 8006e08:	40021800 	.word	0x40021800
 8006e0c:	40021c00 	.word	0x40021c00
 8006e10:	40013c00 	.word	0x40013c00

08006e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	807b      	strh	r3, [r7, #2]
 8006e20:	4613      	mov	r3, r2
 8006e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e24:	787b      	ldrb	r3, [r7, #1]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e2a:	887a      	ldrh	r2, [r7, #2]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006e30:	e003      	b.n	8006e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006e32:	887b      	ldrh	r3, [r7, #2]
 8006e34:	041a      	lsls	r2, r3, #16
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	619a      	str	r2, [r3, #24]
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
	...

08006e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e12b      	b.n	80070b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fa fb02 	bl	8001478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2224      	movs	r2, #36	@ 0x24
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0201 	bic.w	r2, r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006eac:	f000 fd80 	bl	80079b0 <HAL_RCC_GetPCLK1Freq>
 8006eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4a81      	ldr	r2, [pc, #516]	@ (80070bc <HAL_I2C_Init+0x274>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d807      	bhi.n	8006ecc <HAL_I2C_Init+0x84>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4a80      	ldr	r2, [pc, #512]	@ (80070c0 <HAL_I2C_Init+0x278>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	bf94      	ite	ls
 8006ec4:	2301      	movls	r3, #1
 8006ec6:	2300      	movhi	r3, #0
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	e006      	b.n	8006eda <HAL_I2C_Init+0x92>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4a7d      	ldr	r2, [pc, #500]	@ (80070c4 <HAL_I2C_Init+0x27c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	bf94      	ite	ls
 8006ed4:	2301      	movls	r3, #1
 8006ed6:	2300      	movhi	r3, #0
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e0e7      	b.n	80070b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4a78      	ldr	r2, [pc, #480]	@ (80070c8 <HAL_I2C_Init+0x280>)
 8006ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eea:	0c9b      	lsrs	r3, r3, #18
 8006eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	4a6a      	ldr	r2, [pc, #424]	@ (80070bc <HAL_I2C_Init+0x274>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d802      	bhi.n	8006f1c <HAL_I2C_Init+0xd4>
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	e009      	b.n	8006f30 <HAL_I2C_Init+0xe8>
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006f22:	fb02 f303 	mul.w	r3, r2, r3
 8006f26:	4a69      	ldr	r2, [pc, #420]	@ (80070cc <HAL_I2C_Init+0x284>)
 8006f28:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2c:	099b      	lsrs	r3, r3, #6
 8006f2e:	3301      	adds	r3, #1
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6812      	ldr	r2, [r2, #0]
 8006f34:	430b      	orrs	r3, r1
 8006f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006f42:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	495c      	ldr	r1, [pc, #368]	@ (80070bc <HAL_I2C_Init+0x274>)
 8006f4c:	428b      	cmp	r3, r1
 8006f4e:	d819      	bhi.n	8006f84 <HAL_I2C_Init+0x13c>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	1e59      	subs	r1, r3, #1
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f5e:	1c59      	adds	r1, r3, #1
 8006f60:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006f64:	400b      	ands	r3, r1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <HAL_I2C_Init+0x138>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	1e59      	subs	r1, r3, #1
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f78:	3301      	adds	r3, #1
 8006f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f7e:	e051      	b.n	8007024 <HAL_I2C_Init+0x1dc>
 8006f80:	2304      	movs	r3, #4
 8006f82:	e04f      	b.n	8007024 <HAL_I2C_Init+0x1dc>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d111      	bne.n	8006fb0 <HAL_I2C_Init+0x168>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	1e58      	subs	r0, r3, #1
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6859      	ldr	r1, [r3, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	440b      	add	r3, r1
 8006f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bf0c      	ite	eq
 8006fa8:	2301      	moveq	r3, #1
 8006faa:	2300      	movne	r3, #0
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	e012      	b.n	8006fd6 <HAL_I2C_Init+0x18e>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	1e58      	subs	r0, r3, #1
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6859      	ldr	r1, [r3, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	440b      	add	r3, r1
 8006fbe:	0099      	lsls	r1, r3, #2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	bf0c      	ite	eq
 8006fd0:	2301      	moveq	r3, #1
 8006fd2:	2300      	movne	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <HAL_I2C_Init+0x196>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e022      	b.n	8007024 <HAL_I2C_Init+0x1dc>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10e      	bne.n	8007004 <HAL_I2C_Init+0x1bc>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1e58      	subs	r0, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6859      	ldr	r1, [r3, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	440b      	add	r3, r1
 8006ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007002:	e00f      	b.n	8007024 <HAL_I2C_Init+0x1dc>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	1e58      	subs	r0, r3, #1
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6859      	ldr	r1, [r3, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	0099      	lsls	r1, r3, #2
 8007014:	440b      	add	r3, r1
 8007016:	fbb0 f3f3 	udiv	r3, r0, r3
 800701a:	3301      	adds	r3, #1
 800701c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007020:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	6809      	ldr	r1, [r1, #0]
 8007028:	4313      	orrs	r3, r2
 800702a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69da      	ldr	r2, [r3, #28]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007052:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6911      	ldr	r1, [r2, #16]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	68d2      	ldr	r2, [r2, #12]
 800705e:	4311      	orrs	r1, r2
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6812      	ldr	r2, [r2, #0]
 8007064:	430b      	orrs	r3, r1
 8007066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695a      	ldr	r2, [r3, #20]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f042 0201 	orr.w	r2, r2, #1
 8007092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	000186a0 	.word	0x000186a0
 80070c0:	001e847f 	.word	0x001e847f
 80070c4:	003d08ff 	.word	0x003d08ff
 80070c8:	431bde83 	.word	0x431bde83
 80070cc:	10624dd3 	.word	0x10624dd3

080070d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e267      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d075      	beq.n	80071da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80070ee:	4b88      	ldr	r3, [pc, #544]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 030c 	and.w	r3, r3, #12
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	d00c      	beq.n	8007114 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070fa:	4b85      	ldr	r3, [pc, #532]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007102:	2b08      	cmp	r3, #8
 8007104:	d112      	bne.n	800712c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007106:	4b82      	ldr	r3, [pc, #520]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800710e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007112:	d10b      	bne.n	800712c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007114:	4b7e      	ldr	r3, [pc, #504]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d05b      	beq.n	80071d8 <HAL_RCC_OscConfig+0x108>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d157      	bne.n	80071d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e242      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007134:	d106      	bne.n	8007144 <HAL_RCC_OscConfig+0x74>
 8007136:	4b76      	ldr	r3, [pc, #472]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a75      	ldr	r2, [pc, #468]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 800713c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	e01d      	b.n	8007180 <HAL_RCC_OscConfig+0xb0>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800714c:	d10c      	bne.n	8007168 <HAL_RCC_OscConfig+0x98>
 800714e:	4b70      	ldr	r3, [pc, #448]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a6f      	ldr	r2, [pc, #444]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 8007154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	4b6d      	ldr	r3, [pc, #436]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a6c      	ldr	r2, [pc, #432]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 8007160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	e00b      	b.n	8007180 <HAL_RCC_OscConfig+0xb0>
 8007168:	4b69      	ldr	r3, [pc, #420]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a68      	ldr	r2, [pc, #416]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 800716e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	4b66      	ldr	r3, [pc, #408]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a65      	ldr	r2, [pc, #404]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 800717a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800717e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d013      	beq.n	80071b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007188:	f7fd fac6 	bl	8004718 <HAL_GetTick>
 800718c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800718e:	e008      	b.n	80071a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007190:	f7fd fac2 	bl	8004718 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	2b64      	cmp	r3, #100	@ 0x64
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e207      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071a2:	4b5b      	ldr	r3, [pc, #364]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0f0      	beq.n	8007190 <HAL_RCC_OscConfig+0xc0>
 80071ae:	e014      	b.n	80071da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b0:	f7fd fab2 	bl	8004718 <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071b8:	f7fd faae 	bl	8004718 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b64      	cmp	r3, #100	@ 0x64
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e1f3      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071ca:	4b51      	ldr	r3, [pc, #324]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f0      	bne.n	80071b8 <HAL_RCC_OscConfig+0xe8>
 80071d6:	e000      	b.n	80071da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d063      	beq.n	80072ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80071e6:	4b4a      	ldr	r3, [pc, #296]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 030c 	and.w	r3, r3, #12
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00b      	beq.n	800720a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071f2:	4b47      	ldr	r3, [pc, #284]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80071fa:	2b08      	cmp	r3, #8
 80071fc:	d11c      	bne.n	8007238 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071fe:	4b44      	ldr	r3, [pc, #272]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d116      	bne.n	8007238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800720a:	4b41      	ldr	r3, [pc, #260]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d005      	beq.n	8007222 <HAL_RCC_OscConfig+0x152>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d001      	beq.n	8007222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e1c7      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007222:	4b3b      	ldr	r3, [pc, #236]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	4937      	ldr	r1, [pc, #220]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 8007232:	4313      	orrs	r3, r2
 8007234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007236:	e03a      	b.n	80072ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d020      	beq.n	8007282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007240:	4b34      	ldr	r3, [pc, #208]	@ (8007314 <HAL_RCC_OscConfig+0x244>)
 8007242:	2201      	movs	r2, #1
 8007244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007246:	f7fd fa67 	bl	8004718 <HAL_GetTick>
 800724a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800724c:	e008      	b.n	8007260 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800724e:	f7fd fa63 	bl	8004718 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d901      	bls.n	8007260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e1a8      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007260:	4b2b      	ldr	r3, [pc, #172]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d0f0      	beq.n	800724e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800726c:	4b28      	ldr	r3, [pc, #160]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	00db      	lsls	r3, r3, #3
 800727a:	4925      	ldr	r1, [pc, #148]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 800727c:	4313      	orrs	r3, r2
 800727e:	600b      	str	r3, [r1, #0]
 8007280:	e015      	b.n	80072ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007282:	4b24      	ldr	r3, [pc, #144]	@ (8007314 <HAL_RCC_OscConfig+0x244>)
 8007284:	2200      	movs	r2, #0
 8007286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007288:	f7fd fa46 	bl	8004718 <HAL_GetTick>
 800728c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800728e:	e008      	b.n	80072a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007290:	f7fd fa42 	bl	8004718 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b02      	cmp	r3, #2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e187      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1f0      	bne.n	8007290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0308 	and.w	r3, r3, #8
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d036      	beq.n	8007328 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d016      	beq.n	80072f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072c2:	4b15      	ldr	r3, [pc, #84]	@ (8007318 <HAL_RCC_OscConfig+0x248>)
 80072c4:	2201      	movs	r2, #1
 80072c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c8:	f7fd fa26 	bl	8004718 <HAL_GetTick>
 80072cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072ce:	e008      	b.n	80072e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072d0:	f7fd fa22 	bl	8004718 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d901      	bls.n	80072e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e167      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007310 <HAL_RCC_OscConfig+0x240>)
 80072e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0f0      	beq.n	80072d0 <HAL_RCC_OscConfig+0x200>
 80072ee:	e01b      	b.n	8007328 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072f0:	4b09      	ldr	r3, [pc, #36]	@ (8007318 <HAL_RCC_OscConfig+0x248>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072f6:	f7fd fa0f 	bl	8004718 <HAL_GetTick>
 80072fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072fc:	e00e      	b.n	800731c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072fe:	f7fd fa0b 	bl	8004718 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d907      	bls.n	800731c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e150      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
 8007310:	40023800 	.word	0x40023800
 8007314:	42470000 	.word	0x42470000
 8007318:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800731c:	4b88      	ldr	r3, [pc, #544]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 800731e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007320:	f003 0302 	and.w	r3, r3, #2
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1ea      	bne.n	80072fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 8097 	beq.w	8007464 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007336:	2300      	movs	r3, #0
 8007338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800733a:	4b81      	ldr	r3, [pc, #516]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 800733c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10f      	bne.n	8007366 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007346:	2300      	movs	r3, #0
 8007348:	60bb      	str	r3, [r7, #8]
 800734a:	4b7d      	ldr	r3, [pc, #500]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 800734c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734e:	4a7c      	ldr	r2, [pc, #496]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 8007350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007354:	6413      	str	r3, [r2, #64]	@ 0x40
 8007356:	4b7a      	ldr	r3, [pc, #488]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 8007358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800735e:	60bb      	str	r3, [r7, #8]
 8007360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007362:	2301      	movs	r3, #1
 8007364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007366:	4b77      	ldr	r3, [pc, #476]	@ (8007544 <HAL_RCC_OscConfig+0x474>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800736e:	2b00      	cmp	r3, #0
 8007370:	d118      	bne.n	80073a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007372:	4b74      	ldr	r3, [pc, #464]	@ (8007544 <HAL_RCC_OscConfig+0x474>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a73      	ldr	r2, [pc, #460]	@ (8007544 <HAL_RCC_OscConfig+0x474>)
 8007378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800737c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800737e:	f7fd f9cb 	bl	8004718 <HAL_GetTick>
 8007382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007384:	e008      	b.n	8007398 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007386:	f7fd f9c7 	bl	8004718 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	2b02      	cmp	r3, #2
 8007392:	d901      	bls.n	8007398 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e10c      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007398:	4b6a      	ldr	r3, [pc, #424]	@ (8007544 <HAL_RCC_OscConfig+0x474>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0f0      	beq.n	8007386 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d106      	bne.n	80073ba <HAL_RCC_OscConfig+0x2ea>
 80073ac:	4b64      	ldr	r3, [pc, #400]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 80073ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b0:	4a63      	ldr	r2, [pc, #396]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 80073b2:	f043 0301 	orr.w	r3, r3, #1
 80073b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80073b8:	e01c      	b.n	80073f4 <HAL_RCC_OscConfig+0x324>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	2b05      	cmp	r3, #5
 80073c0:	d10c      	bne.n	80073dc <HAL_RCC_OscConfig+0x30c>
 80073c2:	4b5f      	ldr	r3, [pc, #380]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 80073c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c6:	4a5e      	ldr	r2, [pc, #376]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 80073c8:	f043 0304 	orr.w	r3, r3, #4
 80073cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80073ce:	4b5c      	ldr	r3, [pc, #368]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 80073d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d2:	4a5b      	ldr	r2, [pc, #364]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 80073d4:	f043 0301 	orr.w	r3, r3, #1
 80073d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80073da:	e00b      	b.n	80073f4 <HAL_RCC_OscConfig+0x324>
 80073dc:	4b58      	ldr	r3, [pc, #352]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 80073de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e0:	4a57      	ldr	r2, [pc, #348]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 80073e2:	f023 0301 	bic.w	r3, r3, #1
 80073e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80073e8:	4b55      	ldr	r3, [pc, #340]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 80073ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ec:	4a54      	ldr	r2, [pc, #336]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 80073ee:	f023 0304 	bic.w	r3, r3, #4
 80073f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d015      	beq.n	8007428 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073fc:	f7fd f98c 	bl	8004718 <HAL_GetTick>
 8007400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007402:	e00a      	b.n	800741a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007404:	f7fd f988 	bl	8004718 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007412:	4293      	cmp	r3, r2
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e0cb      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800741a:	4b49      	ldr	r3, [pc, #292]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 800741c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0ee      	beq.n	8007404 <HAL_RCC_OscConfig+0x334>
 8007426:	e014      	b.n	8007452 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007428:	f7fd f976 	bl	8004718 <HAL_GetTick>
 800742c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800742e:	e00a      	b.n	8007446 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007430:	f7fd f972 	bl	8004718 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800743e:	4293      	cmp	r3, r2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e0b5      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007446:	4b3e      	ldr	r3, [pc, #248]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 8007448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1ee      	bne.n	8007430 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d105      	bne.n	8007464 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007458:	4b39      	ldr	r3, [pc, #228]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 800745a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745c:	4a38      	ldr	r2, [pc, #224]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 800745e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007462:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 80a1 	beq.w	80075b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800746e:	4b34      	ldr	r3, [pc, #208]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f003 030c 	and.w	r3, r3, #12
 8007476:	2b08      	cmp	r3, #8
 8007478:	d05c      	beq.n	8007534 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d141      	bne.n	8007506 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007482:	4b31      	ldr	r3, [pc, #196]	@ (8007548 <HAL_RCC_OscConfig+0x478>)
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007488:	f7fd f946 	bl	8004718 <HAL_GetTick>
 800748c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800748e:	e008      	b.n	80074a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007490:	f7fd f942 	bl	8004718 <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	2b02      	cmp	r3, #2
 800749c:	d901      	bls.n	80074a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e087      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074a2:	4b27      	ldr	r3, [pc, #156]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1f0      	bne.n	8007490 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69da      	ldr	r2, [r3, #28]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074bc:	019b      	lsls	r3, r3, #6
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c4:	085b      	lsrs	r3, r3, #1
 80074c6:	3b01      	subs	r3, #1
 80074c8:	041b      	lsls	r3, r3, #16
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d0:	061b      	lsls	r3, r3, #24
 80074d2:	491b      	ldr	r1, [pc, #108]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007548 <HAL_RCC_OscConfig+0x478>)
 80074da:	2201      	movs	r2, #1
 80074dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074de:	f7fd f91b 	bl	8004718 <HAL_GetTick>
 80074e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074e4:	e008      	b.n	80074f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074e6:	f7fd f917 	bl	8004718 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d901      	bls.n	80074f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e05c      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074f8:	4b11      	ldr	r3, [pc, #68]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0f0      	beq.n	80074e6 <HAL_RCC_OscConfig+0x416>
 8007504:	e054      	b.n	80075b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007506:	4b10      	ldr	r3, [pc, #64]	@ (8007548 <HAL_RCC_OscConfig+0x478>)
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800750c:	f7fd f904 	bl	8004718 <HAL_GetTick>
 8007510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007512:	e008      	b.n	8007526 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007514:	f7fd f900 	bl	8004718 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b02      	cmp	r3, #2
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e045      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007526:	4b06      	ldr	r3, [pc, #24]	@ (8007540 <HAL_RCC_OscConfig+0x470>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1f0      	bne.n	8007514 <HAL_RCC_OscConfig+0x444>
 8007532:	e03d      	b.n	80075b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d107      	bne.n	800754c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e038      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
 8007540:	40023800 	.word	0x40023800
 8007544:	40007000 	.word	0x40007000
 8007548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800754c:	4b1b      	ldr	r3, [pc, #108]	@ (80075bc <HAL_RCC_OscConfig+0x4ec>)
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d028      	beq.n	80075ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007564:	429a      	cmp	r2, r3
 8007566:	d121      	bne.n	80075ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007572:	429a      	cmp	r2, r3
 8007574:	d11a      	bne.n	80075ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800757c:	4013      	ands	r3, r2
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007584:	4293      	cmp	r3, r2
 8007586:	d111      	bne.n	80075ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	3b01      	subs	r3, #1
 8007596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007598:	429a      	cmp	r2, r3
 800759a:	d107      	bne.n	80075ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d001      	beq.n	80075b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e000      	b.n	80075b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	40023800 	.word	0x40023800

080075c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e0cc      	b.n	800776e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075d4:	4b68      	ldr	r3, [pc, #416]	@ (8007778 <HAL_RCC_ClockConfig+0x1b8>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d90c      	bls.n	80075fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075e2:	4b65      	ldr	r3, [pc, #404]	@ (8007778 <HAL_RCC_ClockConfig+0x1b8>)
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	b2d2      	uxtb	r2, r2
 80075e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ea:	4b63      	ldr	r3, [pc, #396]	@ (8007778 <HAL_RCC_ClockConfig+0x1b8>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0307 	and.w	r3, r3, #7
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d001      	beq.n	80075fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e0b8      	b.n	800776e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b00      	cmp	r3, #0
 8007606:	d020      	beq.n	800764a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007614:	4b59      	ldr	r3, [pc, #356]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	4a58      	ldr	r2, [pc, #352]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 800761a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800761e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800762c:	4b53      	ldr	r3, [pc, #332]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	4a52      	ldr	r2, [pc, #328]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 8007632:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007638:	4b50      	ldr	r3, [pc, #320]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	494d      	ldr	r1, [pc, #308]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 8007646:	4313      	orrs	r3, r2
 8007648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d044      	beq.n	80076e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d107      	bne.n	800766e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800765e:	4b47      	ldr	r3, [pc, #284]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d119      	bne.n	800769e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e07f      	b.n	800776e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	2b02      	cmp	r3, #2
 8007674:	d003      	beq.n	800767e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800767a:	2b03      	cmp	r3, #3
 800767c:	d107      	bne.n	800768e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800767e:	4b3f      	ldr	r3, [pc, #252]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d109      	bne.n	800769e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e06f      	b.n	800776e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800768e:	4b3b      	ldr	r3, [pc, #236]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e067      	b.n	800776e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800769e:	4b37      	ldr	r3, [pc, #220]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f023 0203 	bic.w	r2, r3, #3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	4934      	ldr	r1, [pc, #208]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076b0:	f7fd f832 	bl	8004718 <HAL_GetTick>
 80076b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076b6:	e00a      	b.n	80076ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076b8:	f7fd f82e 	bl	8004718 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d901      	bls.n	80076ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e04f      	b.n	800776e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ce:	4b2b      	ldr	r3, [pc, #172]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f003 020c 	and.w	r2, r3, #12
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	429a      	cmp	r2, r3
 80076de:	d1eb      	bne.n	80076b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076e0:	4b25      	ldr	r3, [pc, #148]	@ (8007778 <HAL_RCC_ClockConfig+0x1b8>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d20c      	bcs.n	8007708 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ee:	4b22      	ldr	r3, [pc, #136]	@ (8007778 <HAL_RCC_ClockConfig+0x1b8>)
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076f6:	4b20      	ldr	r3, [pc, #128]	@ (8007778 <HAL_RCC_ClockConfig+0x1b8>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0307 	and.w	r3, r3, #7
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	429a      	cmp	r2, r3
 8007702:	d001      	beq.n	8007708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e032      	b.n	800776e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0304 	and.w	r3, r3, #4
 8007710:	2b00      	cmp	r3, #0
 8007712:	d008      	beq.n	8007726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007714:	4b19      	ldr	r3, [pc, #100]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	4916      	ldr	r1, [pc, #88]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 8007722:	4313      	orrs	r3, r2
 8007724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0308 	and.w	r3, r3, #8
 800772e:	2b00      	cmp	r3, #0
 8007730:	d009      	beq.n	8007746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007732:	4b12      	ldr	r3, [pc, #72]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	490e      	ldr	r1, [pc, #56]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 8007742:	4313      	orrs	r3, r2
 8007744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007746:	f000 f821 	bl	800778c <HAL_RCC_GetSysClockFreq>
 800774a:	4602      	mov	r2, r0
 800774c:	4b0b      	ldr	r3, [pc, #44]	@ (800777c <HAL_RCC_ClockConfig+0x1bc>)
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	091b      	lsrs	r3, r3, #4
 8007752:	f003 030f 	and.w	r3, r3, #15
 8007756:	490a      	ldr	r1, [pc, #40]	@ (8007780 <HAL_RCC_ClockConfig+0x1c0>)
 8007758:	5ccb      	ldrb	r3, [r1, r3]
 800775a:	fa22 f303 	lsr.w	r3, r2, r3
 800775e:	4a09      	ldr	r2, [pc, #36]	@ (8007784 <HAL_RCC_ClockConfig+0x1c4>)
 8007760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007762:	4b09      	ldr	r3, [pc, #36]	@ (8007788 <HAL_RCC_ClockConfig+0x1c8>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4618      	mov	r0, r3
 8007768:	f7fc ff92 	bl	8004690 <HAL_InitTick>

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	40023c00 	.word	0x40023c00
 800777c:	40023800 	.word	0x40023800
 8007780:	08018538 	.word	0x08018538
 8007784:	20000038 	.word	0x20000038
 8007788:	200000a4 	.word	0x200000a4

0800778c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800778c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007790:	b094      	sub	sp, #80	@ 0x50
 8007792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077a4:	4b79      	ldr	r3, [pc, #484]	@ (800798c <HAL_RCC_GetSysClockFreq+0x200>)
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f003 030c 	and.w	r3, r3, #12
 80077ac:	2b08      	cmp	r3, #8
 80077ae:	d00d      	beq.n	80077cc <HAL_RCC_GetSysClockFreq+0x40>
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	f200 80e1 	bhi.w	8007978 <HAL_RCC_GetSysClockFreq+0x1ec>
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <HAL_RCC_GetSysClockFreq+0x34>
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d003      	beq.n	80077c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80077be:	e0db      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077c0:	4b73      	ldr	r3, [pc, #460]	@ (8007990 <HAL_RCC_GetSysClockFreq+0x204>)
 80077c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077c4:	e0db      	b.n	800797e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077c6:	4b73      	ldr	r3, [pc, #460]	@ (8007994 <HAL_RCC_GetSysClockFreq+0x208>)
 80077c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077ca:	e0d8      	b.n	800797e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077cc:	4b6f      	ldr	r3, [pc, #444]	@ (800798c <HAL_RCC_GetSysClockFreq+0x200>)
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077d6:	4b6d      	ldr	r3, [pc, #436]	@ (800798c <HAL_RCC_GetSysClockFreq+0x200>)
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d063      	beq.n	80078aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077e2:	4b6a      	ldr	r3, [pc, #424]	@ (800798c <HAL_RCC_GetSysClockFreq+0x200>)
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	099b      	lsrs	r3, r3, #6
 80077e8:	2200      	movs	r2, #0
 80077ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80077ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80077f6:	2300      	movs	r3, #0
 80077f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80077fe:	4622      	mov	r2, r4
 8007800:	462b      	mov	r3, r5
 8007802:	f04f 0000 	mov.w	r0, #0
 8007806:	f04f 0100 	mov.w	r1, #0
 800780a:	0159      	lsls	r1, r3, #5
 800780c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007810:	0150      	lsls	r0, r2, #5
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	4621      	mov	r1, r4
 8007818:	1a51      	subs	r1, r2, r1
 800781a:	6139      	str	r1, [r7, #16]
 800781c:	4629      	mov	r1, r5
 800781e:	eb63 0301 	sbc.w	r3, r3, r1
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	f04f 0200 	mov.w	r2, #0
 8007828:	f04f 0300 	mov.w	r3, #0
 800782c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007830:	4659      	mov	r1, fp
 8007832:	018b      	lsls	r3, r1, #6
 8007834:	4651      	mov	r1, sl
 8007836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800783a:	4651      	mov	r1, sl
 800783c:	018a      	lsls	r2, r1, #6
 800783e:	4651      	mov	r1, sl
 8007840:	ebb2 0801 	subs.w	r8, r2, r1
 8007844:	4659      	mov	r1, fp
 8007846:	eb63 0901 	sbc.w	r9, r3, r1
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	f04f 0300 	mov.w	r3, #0
 8007852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800785a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800785e:	4690      	mov	r8, r2
 8007860:	4699      	mov	r9, r3
 8007862:	4623      	mov	r3, r4
 8007864:	eb18 0303 	adds.w	r3, r8, r3
 8007868:	60bb      	str	r3, [r7, #8]
 800786a:	462b      	mov	r3, r5
 800786c:	eb49 0303 	adc.w	r3, r9, r3
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	f04f 0300 	mov.w	r3, #0
 800787a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800787e:	4629      	mov	r1, r5
 8007880:	024b      	lsls	r3, r1, #9
 8007882:	4621      	mov	r1, r4
 8007884:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007888:	4621      	mov	r1, r4
 800788a:	024a      	lsls	r2, r1, #9
 800788c:	4610      	mov	r0, r2
 800788e:	4619      	mov	r1, r3
 8007890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007892:	2200      	movs	r2, #0
 8007894:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007896:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800789c:	f7f9 f92e 	bl	8000afc <__aeabi_uldivmod>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4613      	mov	r3, r2
 80078a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078a8:	e058      	b.n	800795c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078aa:	4b38      	ldr	r3, [pc, #224]	@ (800798c <HAL_RCC_GetSysClockFreq+0x200>)
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	099b      	lsrs	r3, r3, #6
 80078b0:	2200      	movs	r2, #0
 80078b2:	4618      	mov	r0, r3
 80078b4:	4611      	mov	r1, r2
 80078b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80078ba:	623b      	str	r3, [r7, #32]
 80078bc:	2300      	movs	r3, #0
 80078be:	627b      	str	r3, [r7, #36]	@ 0x24
 80078c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80078c4:	4642      	mov	r2, r8
 80078c6:	464b      	mov	r3, r9
 80078c8:	f04f 0000 	mov.w	r0, #0
 80078cc:	f04f 0100 	mov.w	r1, #0
 80078d0:	0159      	lsls	r1, r3, #5
 80078d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078d6:	0150      	lsls	r0, r2, #5
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4641      	mov	r1, r8
 80078de:	ebb2 0a01 	subs.w	sl, r2, r1
 80078e2:	4649      	mov	r1, r9
 80078e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80078e8:	f04f 0200 	mov.w	r2, #0
 80078ec:	f04f 0300 	mov.w	r3, #0
 80078f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80078f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80078f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80078fc:	ebb2 040a 	subs.w	r4, r2, sl
 8007900:	eb63 050b 	sbc.w	r5, r3, fp
 8007904:	f04f 0200 	mov.w	r2, #0
 8007908:	f04f 0300 	mov.w	r3, #0
 800790c:	00eb      	lsls	r3, r5, #3
 800790e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007912:	00e2      	lsls	r2, r4, #3
 8007914:	4614      	mov	r4, r2
 8007916:	461d      	mov	r5, r3
 8007918:	4643      	mov	r3, r8
 800791a:	18e3      	adds	r3, r4, r3
 800791c:	603b      	str	r3, [r7, #0]
 800791e:	464b      	mov	r3, r9
 8007920:	eb45 0303 	adc.w	r3, r5, r3
 8007924:	607b      	str	r3, [r7, #4]
 8007926:	f04f 0200 	mov.w	r2, #0
 800792a:	f04f 0300 	mov.w	r3, #0
 800792e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007932:	4629      	mov	r1, r5
 8007934:	028b      	lsls	r3, r1, #10
 8007936:	4621      	mov	r1, r4
 8007938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800793c:	4621      	mov	r1, r4
 800793e:	028a      	lsls	r2, r1, #10
 8007940:	4610      	mov	r0, r2
 8007942:	4619      	mov	r1, r3
 8007944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007946:	2200      	movs	r2, #0
 8007948:	61bb      	str	r3, [r7, #24]
 800794a:	61fa      	str	r2, [r7, #28]
 800794c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007950:	f7f9 f8d4 	bl	8000afc <__aeabi_uldivmod>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4613      	mov	r3, r2
 800795a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800795c:	4b0b      	ldr	r3, [pc, #44]	@ (800798c <HAL_RCC_GetSysClockFreq+0x200>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	0c1b      	lsrs	r3, r3, #16
 8007962:	f003 0303 	and.w	r3, r3, #3
 8007966:	3301      	adds	r3, #1
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800796c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800796e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007970:	fbb2 f3f3 	udiv	r3, r2, r3
 8007974:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007976:	e002      	b.n	800797e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007978:	4b05      	ldr	r3, [pc, #20]	@ (8007990 <HAL_RCC_GetSysClockFreq+0x204>)
 800797a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800797c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800797e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007980:	4618      	mov	r0, r3
 8007982:	3750      	adds	r7, #80	@ 0x50
 8007984:	46bd      	mov	sp, r7
 8007986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800798a:	bf00      	nop
 800798c:	40023800 	.word	0x40023800
 8007990:	00f42400 	.word	0x00f42400
 8007994:	007a1200 	.word	0x007a1200

08007998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800799c:	4b03      	ldr	r3, [pc, #12]	@ (80079ac <HAL_RCC_GetHCLKFreq+0x14>)
 800799e:	681b      	ldr	r3, [r3, #0]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	20000038 	.word	0x20000038

080079b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80079b4:	f7ff fff0 	bl	8007998 <HAL_RCC_GetHCLKFreq>
 80079b8:	4602      	mov	r2, r0
 80079ba:	4b05      	ldr	r3, [pc, #20]	@ (80079d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	0a9b      	lsrs	r3, r3, #10
 80079c0:	f003 0307 	and.w	r3, r3, #7
 80079c4:	4903      	ldr	r1, [pc, #12]	@ (80079d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079c6:	5ccb      	ldrb	r3, [r1, r3]
 80079c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	40023800 	.word	0x40023800
 80079d4:	08018548 	.word	0x08018548

080079d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80079dc:	f7ff ffdc 	bl	8007998 <HAL_RCC_GetHCLKFreq>
 80079e0:	4602      	mov	r2, r0
 80079e2:	4b05      	ldr	r3, [pc, #20]	@ (80079f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	0b5b      	lsrs	r3, r3, #13
 80079e8:	f003 0307 	and.w	r3, r3, #7
 80079ec:	4903      	ldr	r1, [pc, #12]	@ (80079fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80079ee:	5ccb      	ldrb	r3, [r1, r3]
 80079f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	40023800 	.word	0x40023800
 80079fc:	08018548 	.word	0x08018548

08007a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e041      	b.n	8007a96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7fb fce8 	bl	80033fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4610      	mov	r0, r2
 8007a40:	f000 fcc4 	bl	80083cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d001      	beq.n	8007ab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e04e      	b.n	8007b56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f042 0201 	orr.w	r2, r2, #1
 8007ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a23      	ldr	r2, [pc, #140]	@ (8007b64 <HAL_TIM_Base_Start_IT+0xc4>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d022      	beq.n	8007b20 <HAL_TIM_Base_Start_IT+0x80>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ae2:	d01d      	beq.n	8007b20 <HAL_TIM_Base_Start_IT+0x80>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8007b68 <HAL_TIM_Base_Start_IT+0xc8>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d018      	beq.n	8007b20 <HAL_TIM_Base_Start_IT+0x80>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a1e      	ldr	r2, [pc, #120]	@ (8007b6c <HAL_TIM_Base_Start_IT+0xcc>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d013      	beq.n	8007b20 <HAL_TIM_Base_Start_IT+0x80>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a1c      	ldr	r2, [pc, #112]	@ (8007b70 <HAL_TIM_Base_Start_IT+0xd0>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d00e      	beq.n	8007b20 <HAL_TIM_Base_Start_IT+0x80>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a1b      	ldr	r2, [pc, #108]	@ (8007b74 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d009      	beq.n	8007b20 <HAL_TIM_Base_Start_IT+0x80>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a19      	ldr	r2, [pc, #100]	@ (8007b78 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d004      	beq.n	8007b20 <HAL_TIM_Base_Start_IT+0x80>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a18      	ldr	r2, [pc, #96]	@ (8007b7c <HAL_TIM_Base_Start_IT+0xdc>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d111      	bne.n	8007b44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2b06      	cmp	r3, #6
 8007b30:	d010      	beq.n	8007b54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f042 0201 	orr.w	r2, r2, #1
 8007b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b42:	e007      	b.n	8007b54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f042 0201 	orr.w	r2, r2, #1
 8007b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	40010000 	.word	0x40010000
 8007b68:	40000400 	.word	0x40000400
 8007b6c:	40000800 	.word	0x40000800
 8007b70:	40000c00 	.word	0x40000c00
 8007b74:	40010400 	.word	0x40010400
 8007b78:	40014000 	.word	0x40014000
 8007b7c:	40001800 	.word	0x40001800

08007b80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e041      	b.n	8007c16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7fb fbc4 	bl	8003334 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	f000 fc04 	bl	80083cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d109      	bne.n	8007c44 <HAL_TIM_PWM_Start+0x24>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	bf14      	ite	ne
 8007c3c:	2301      	movne	r3, #1
 8007c3e:	2300      	moveq	r3, #0
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	e022      	b.n	8007c8a <HAL_TIM_PWM_Start+0x6a>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d109      	bne.n	8007c5e <HAL_TIM_PWM_Start+0x3e>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	bf14      	ite	ne
 8007c56:	2301      	movne	r3, #1
 8007c58:	2300      	moveq	r3, #0
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	e015      	b.n	8007c8a <HAL_TIM_PWM_Start+0x6a>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d109      	bne.n	8007c78 <HAL_TIM_PWM_Start+0x58>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	bf14      	ite	ne
 8007c70:	2301      	movne	r3, #1
 8007c72:	2300      	moveq	r3, #0
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	e008      	b.n	8007c8a <HAL_TIM_PWM_Start+0x6a>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	bf14      	ite	ne
 8007c84:	2301      	movne	r3, #1
 8007c86:	2300      	moveq	r3, #0
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e07c      	b.n	8007d8c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d104      	bne.n	8007ca2 <HAL_TIM_PWM_Start+0x82>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ca0:	e013      	b.n	8007cca <HAL_TIM_PWM_Start+0xaa>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b04      	cmp	r3, #4
 8007ca6:	d104      	bne.n	8007cb2 <HAL_TIM_PWM_Start+0x92>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2202      	movs	r2, #2
 8007cac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cb0:	e00b      	b.n	8007cca <HAL_TIM_PWM_Start+0xaa>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b08      	cmp	r3, #8
 8007cb6:	d104      	bne.n	8007cc2 <HAL_TIM_PWM_Start+0xa2>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cc0:	e003      	b.n	8007cca <HAL_TIM_PWM_Start+0xaa>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 fdd0 	bl	8008878 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8007d94 <HAL_TIM_PWM_Start+0x174>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d004      	beq.n	8007cec <HAL_TIM_PWM_Start+0xcc>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8007d98 <HAL_TIM_PWM_Start+0x178>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d101      	bne.n	8007cf0 <HAL_TIM_PWM_Start+0xd0>
 8007cec:	2301      	movs	r3, #1
 8007cee:	e000      	b.n	8007cf2 <HAL_TIM_PWM_Start+0xd2>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d007      	beq.n	8007d06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a22      	ldr	r2, [pc, #136]	@ (8007d94 <HAL_TIM_PWM_Start+0x174>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d022      	beq.n	8007d56 <HAL_TIM_PWM_Start+0x136>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d18:	d01d      	beq.n	8007d56 <HAL_TIM_PWM_Start+0x136>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007d9c <HAL_TIM_PWM_Start+0x17c>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d018      	beq.n	8007d56 <HAL_TIM_PWM_Start+0x136>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a1d      	ldr	r2, [pc, #116]	@ (8007da0 <HAL_TIM_PWM_Start+0x180>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d013      	beq.n	8007d56 <HAL_TIM_PWM_Start+0x136>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a1c      	ldr	r2, [pc, #112]	@ (8007da4 <HAL_TIM_PWM_Start+0x184>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d00e      	beq.n	8007d56 <HAL_TIM_PWM_Start+0x136>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a16      	ldr	r2, [pc, #88]	@ (8007d98 <HAL_TIM_PWM_Start+0x178>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d009      	beq.n	8007d56 <HAL_TIM_PWM_Start+0x136>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a18      	ldr	r2, [pc, #96]	@ (8007da8 <HAL_TIM_PWM_Start+0x188>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d004      	beq.n	8007d56 <HAL_TIM_PWM_Start+0x136>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a16      	ldr	r2, [pc, #88]	@ (8007dac <HAL_TIM_PWM_Start+0x18c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d111      	bne.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f003 0307 	and.w	r3, r3, #7
 8007d60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b06      	cmp	r3, #6
 8007d66:	d010      	beq.n	8007d8a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d78:	e007      	b.n	8007d8a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f042 0201 	orr.w	r2, r2, #1
 8007d88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	40010000 	.word	0x40010000
 8007d98:	40010400 	.word	0x40010400
 8007d9c:	40000400 	.word	0x40000400
 8007da0:	40000800 	.word	0x40000800
 8007da4:	40000c00 	.word	0x40000c00
 8007da8:	40014000 	.word	0x40014000
 8007dac:	40001800 	.word	0x40001800

08007db0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e097      	b.n	8007ef4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d106      	bne.n	8007dde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7fb f9a3 	bl	8003124 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2202      	movs	r2, #2
 8007de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	6812      	ldr	r2, [r2, #0]
 8007df0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007df4:	f023 0307 	bic.w	r3, r3, #7
 8007df8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4619      	mov	r1, r3
 8007e04:	4610      	mov	r0, r2
 8007e06:	f000 fae1 	bl	80083cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e32:	f023 0303 	bic.w	r3, r3, #3
 8007e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	021b      	lsls	r3, r3, #8
 8007e42:	4313      	orrs	r3, r2
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007e50:	f023 030c 	bic.w	r3, r3, #12
 8007e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	021b      	lsls	r3, r3, #8
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	011a      	lsls	r2, r3, #4
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	031b      	lsls	r3, r3, #12
 8007e80:	4313      	orrs	r3, r2
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007e8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007e96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	011b      	lsls	r3, r3, #4
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007f24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d110      	bne.n	8007f4e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d102      	bne.n	8007f38 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f32:	7b7b      	ldrb	r3, [r7, #13]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d001      	beq.n	8007f3c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e069      	b.n	8008010 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f4c:	e031      	b.n	8007fb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d110      	bne.n	8007f76 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d102      	bne.n	8007f60 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f5a:	7b3b      	ldrb	r3, [r7, #12]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d001      	beq.n	8007f64 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e055      	b.n	8008010 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f74:	e01d      	b.n	8007fb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d108      	bne.n	8007f8e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d105      	bne.n	8007f8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f82:	7b7b      	ldrb	r3, [r7, #13]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d102      	bne.n	8007f8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f88:	7b3b      	ldrb	r3, [r7, #12]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d001      	beq.n	8007f92 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e03e      	b.n	8008010 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2202      	movs	r2, #2
 8007f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2202      	movs	r2, #2
 8007fae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <HAL_TIM_Encoder_Start+0xc4>
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2b04      	cmp	r3, #4
 8007fbc:	d008      	beq.n	8007fd0 <HAL_TIM_Encoder_Start+0xd4>
 8007fbe:	e00f      	b.n	8007fe0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 fc55 	bl	8008878 <TIM_CCxChannelCmd>
      break;
 8007fce:	e016      	b.n	8007ffe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	2104      	movs	r1, #4
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 fc4d 	bl	8008878 <TIM_CCxChannelCmd>
      break;
 8007fde:	e00e      	b.n	8007ffe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 fc45 	bl	8008878 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	2104      	movs	r1, #4
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 fc3e 	bl	8008878 <TIM_CCxChannelCmd>
      break;
 8007ffc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f042 0201 	orr.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b00      	cmp	r3, #0
 8008038:	d020      	beq.n	800807c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b00      	cmp	r3, #0
 8008042:	d01b      	beq.n	800807c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f06f 0202 	mvn.w	r2, #2
 800804c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	f003 0303 	and.w	r3, r3, #3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d003      	beq.n	800806a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f994 	bl	8008390 <HAL_TIM_IC_CaptureCallback>
 8008068:	e005      	b.n	8008076 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f986 	bl	800837c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f997 	bl	80083a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f003 0304 	and.w	r3, r3, #4
 8008082:	2b00      	cmp	r3, #0
 8008084:	d020      	beq.n	80080c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01b      	beq.n	80080c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f06f 0204 	mvn.w	r2, #4
 8008098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2202      	movs	r2, #2
 800809e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f96e 	bl	8008390 <HAL_TIM_IC_CaptureCallback>
 80080b4:	e005      	b.n	80080c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f960 	bl	800837c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f971 	bl	80083a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f003 0308 	and.w	r3, r3, #8
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d020      	beq.n	8008114 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01b      	beq.n	8008114 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f06f 0208 	mvn.w	r2, #8
 80080e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2204      	movs	r2, #4
 80080ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f948 	bl	8008390 <HAL_TIM_IC_CaptureCallback>
 8008100:	e005      	b.n	800810e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f93a 	bl	800837c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f94b 	bl	80083a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f003 0310 	and.w	r3, r3, #16
 800811a:	2b00      	cmp	r3, #0
 800811c:	d020      	beq.n	8008160 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f003 0310 	and.w	r3, r3, #16
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01b      	beq.n	8008160 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f06f 0210 	mvn.w	r2, #16
 8008130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2208      	movs	r2, #8
 8008136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	69db      	ldr	r3, [r3, #28]
 800813e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f922 	bl	8008390 <HAL_TIM_IC_CaptureCallback>
 800814c:	e005      	b.n	800815a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f914 	bl	800837c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f925 	bl	80083a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00c      	beq.n	8008184 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	2b00      	cmp	r3, #0
 8008172:	d007      	beq.n	8008184 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f06f 0201 	mvn.w	r2, #1
 800817c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7f9 fc60 	bl	8001a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00c      	beq.n	80081a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008194:	2b00      	cmp	r3, #0
 8008196:	d007      	beq.n	80081a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80081a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fc66 	bl	8008a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00c      	beq.n	80081cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d007      	beq.n	80081cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80081c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f8f6 	bl	80083b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	f003 0320 	and.w	r3, r3, #32
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00c      	beq.n	80081f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f003 0320 	and.w	r3, r3, #32
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d007      	beq.n	80081f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f06f 0220 	mvn.w	r2, #32
 80081e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fc38 	bl	8008a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800820e:	2b01      	cmp	r3, #1
 8008210:	d101      	bne.n	8008216 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008212:	2302      	movs	r3, #2
 8008214:	e0ae      	b.n	8008374 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b0c      	cmp	r3, #12
 8008222:	f200 809f 	bhi.w	8008364 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008226:	a201      	add	r2, pc, #4	@ (adr r2, 800822c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822c:	08008261 	.word	0x08008261
 8008230:	08008365 	.word	0x08008365
 8008234:	08008365 	.word	0x08008365
 8008238:	08008365 	.word	0x08008365
 800823c:	080082a1 	.word	0x080082a1
 8008240:	08008365 	.word	0x08008365
 8008244:	08008365 	.word	0x08008365
 8008248:	08008365 	.word	0x08008365
 800824c:	080082e3 	.word	0x080082e3
 8008250:	08008365 	.word	0x08008365
 8008254:	08008365 	.word	0x08008365
 8008258:	08008365 	.word	0x08008365
 800825c:	08008323 	.word	0x08008323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68b9      	ldr	r1, [r7, #8]
 8008266:	4618      	mov	r0, r3
 8008268:	f000 f956 	bl	8008518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	699a      	ldr	r2, [r3, #24]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f042 0208 	orr.w	r2, r2, #8
 800827a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699a      	ldr	r2, [r3, #24]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f022 0204 	bic.w	r2, r2, #4
 800828a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6999      	ldr	r1, [r3, #24]
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	691a      	ldr	r2, [r3, #16]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	430a      	orrs	r2, r1
 800829c:	619a      	str	r2, [r3, #24]
      break;
 800829e:	e064      	b.n	800836a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68b9      	ldr	r1, [r7, #8]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 f9a6 	bl	80085f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	699a      	ldr	r2, [r3, #24]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	699a      	ldr	r2, [r3, #24]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6999      	ldr	r1, [r3, #24]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	021a      	lsls	r2, r3, #8
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	430a      	orrs	r2, r1
 80082de:	619a      	str	r2, [r3, #24]
      break;
 80082e0:	e043      	b.n	800836a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68b9      	ldr	r1, [r7, #8]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 f9fb 	bl	80086e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	69da      	ldr	r2, [r3, #28]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f042 0208 	orr.w	r2, r2, #8
 80082fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	69da      	ldr	r2, [r3, #28]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 0204 	bic.w	r2, r2, #4
 800830c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69d9      	ldr	r1, [r3, #28]
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	691a      	ldr	r2, [r3, #16]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	61da      	str	r2, [r3, #28]
      break;
 8008320:	e023      	b.n	800836a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68b9      	ldr	r1, [r7, #8]
 8008328:	4618      	mov	r0, r3
 800832a:	f000 fa4f 	bl	80087cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69da      	ldr	r2, [r3, #28]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800833c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69da      	ldr	r2, [r3, #28]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800834c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69d9      	ldr	r1, [r3, #28]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	021a      	lsls	r2, r3, #8
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	61da      	str	r2, [r3, #28]
      break;
 8008362:	e002      	b.n	800836a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	75fb      	strb	r3, [r7, #23]
      break;
 8008368:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008372:	7dfb      	ldrb	r3, [r7, #23]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3718      	adds	r7, #24
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a43      	ldr	r2, [pc, #268]	@ (80084ec <TIM_Base_SetConfig+0x120>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d013      	beq.n	800840c <TIM_Base_SetConfig+0x40>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ea:	d00f      	beq.n	800840c <TIM_Base_SetConfig+0x40>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a40      	ldr	r2, [pc, #256]	@ (80084f0 <TIM_Base_SetConfig+0x124>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d00b      	beq.n	800840c <TIM_Base_SetConfig+0x40>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a3f      	ldr	r2, [pc, #252]	@ (80084f4 <TIM_Base_SetConfig+0x128>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d007      	beq.n	800840c <TIM_Base_SetConfig+0x40>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a3e      	ldr	r2, [pc, #248]	@ (80084f8 <TIM_Base_SetConfig+0x12c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d003      	beq.n	800840c <TIM_Base_SetConfig+0x40>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a3d      	ldr	r2, [pc, #244]	@ (80084fc <TIM_Base_SetConfig+0x130>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d108      	bne.n	800841e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	4313      	orrs	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a32      	ldr	r2, [pc, #200]	@ (80084ec <TIM_Base_SetConfig+0x120>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d02b      	beq.n	800847e <TIM_Base_SetConfig+0xb2>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800842c:	d027      	beq.n	800847e <TIM_Base_SetConfig+0xb2>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a2f      	ldr	r2, [pc, #188]	@ (80084f0 <TIM_Base_SetConfig+0x124>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d023      	beq.n	800847e <TIM_Base_SetConfig+0xb2>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a2e      	ldr	r2, [pc, #184]	@ (80084f4 <TIM_Base_SetConfig+0x128>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d01f      	beq.n	800847e <TIM_Base_SetConfig+0xb2>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a2d      	ldr	r2, [pc, #180]	@ (80084f8 <TIM_Base_SetConfig+0x12c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d01b      	beq.n	800847e <TIM_Base_SetConfig+0xb2>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a2c      	ldr	r2, [pc, #176]	@ (80084fc <TIM_Base_SetConfig+0x130>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d017      	beq.n	800847e <TIM_Base_SetConfig+0xb2>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a2b      	ldr	r2, [pc, #172]	@ (8008500 <TIM_Base_SetConfig+0x134>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d013      	beq.n	800847e <TIM_Base_SetConfig+0xb2>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a2a      	ldr	r2, [pc, #168]	@ (8008504 <TIM_Base_SetConfig+0x138>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00f      	beq.n	800847e <TIM_Base_SetConfig+0xb2>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a29      	ldr	r2, [pc, #164]	@ (8008508 <TIM_Base_SetConfig+0x13c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00b      	beq.n	800847e <TIM_Base_SetConfig+0xb2>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a28      	ldr	r2, [pc, #160]	@ (800850c <TIM_Base_SetConfig+0x140>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d007      	beq.n	800847e <TIM_Base_SetConfig+0xb2>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a27      	ldr	r2, [pc, #156]	@ (8008510 <TIM_Base_SetConfig+0x144>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d003      	beq.n	800847e <TIM_Base_SetConfig+0xb2>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a26      	ldr	r2, [pc, #152]	@ (8008514 <TIM_Base_SetConfig+0x148>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d108      	bne.n	8008490 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	4313      	orrs	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	689a      	ldr	r2, [r3, #8]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a0e      	ldr	r2, [pc, #56]	@ (80084ec <TIM_Base_SetConfig+0x120>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d003      	beq.n	80084be <TIM_Base_SetConfig+0xf2>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a10      	ldr	r2, [pc, #64]	@ (80084fc <TIM_Base_SetConfig+0x130>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d103      	bne.n	80084c6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	691a      	ldr	r2, [r3, #16]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f043 0204 	orr.w	r2, r3, #4
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	601a      	str	r2, [r3, #0]
}
 80084de:	bf00      	nop
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	40010000 	.word	0x40010000
 80084f0:	40000400 	.word	0x40000400
 80084f4:	40000800 	.word	0x40000800
 80084f8:	40000c00 	.word	0x40000c00
 80084fc:	40010400 	.word	0x40010400
 8008500:	40014000 	.word	0x40014000
 8008504:	40014400 	.word	0x40014400
 8008508:	40014800 	.word	0x40014800
 800850c:	40001800 	.word	0x40001800
 8008510:	40001c00 	.word	0x40001c00
 8008514:	40002000 	.word	0x40002000

08008518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	f023 0201 	bic.w	r2, r3, #1
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f023 0303 	bic.w	r3, r3, #3
 800854e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f023 0302 	bic.w	r3, r3, #2
 8008560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	4313      	orrs	r3, r2
 800856a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a20      	ldr	r2, [pc, #128]	@ (80085f0 <TIM_OC1_SetConfig+0xd8>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d003      	beq.n	800857c <TIM_OC1_SetConfig+0x64>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a1f      	ldr	r2, [pc, #124]	@ (80085f4 <TIM_OC1_SetConfig+0xdc>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d10c      	bne.n	8008596 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	f023 0308 	bic.w	r3, r3, #8
 8008582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	4313      	orrs	r3, r2
 800858c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f023 0304 	bic.w	r3, r3, #4
 8008594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a15      	ldr	r2, [pc, #84]	@ (80085f0 <TIM_OC1_SetConfig+0xd8>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d003      	beq.n	80085a6 <TIM_OC1_SetConfig+0x8e>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a14      	ldr	r2, [pc, #80]	@ (80085f4 <TIM_OC1_SetConfig+0xdc>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d111      	bne.n	80085ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	4313      	orrs	r3, r2
 80085be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685a      	ldr	r2, [r3, #4]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	621a      	str	r2, [r3, #32]
}
 80085e4:	bf00      	nop
 80085e6:	371c      	adds	r7, #28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	40010000 	.word	0x40010000
 80085f4:	40010400 	.word	0x40010400

080085f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	f023 0210 	bic.w	r2, r3, #16
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800862e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	021b      	lsls	r3, r3, #8
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	4313      	orrs	r3, r2
 800863a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f023 0320 	bic.w	r3, r3, #32
 8008642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	011b      	lsls	r3, r3, #4
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	4313      	orrs	r3, r2
 800864e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a22      	ldr	r2, [pc, #136]	@ (80086dc <TIM_OC2_SetConfig+0xe4>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d003      	beq.n	8008660 <TIM_OC2_SetConfig+0x68>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a21      	ldr	r2, [pc, #132]	@ (80086e0 <TIM_OC2_SetConfig+0xe8>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d10d      	bne.n	800867c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	011b      	lsls	r3, r3, #4
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	4313      	orrs	r3, r2
 8008672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800867a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a17      	ldr	r2, [pc, #92]	@ (80086dc <TIM_OC2_SetConfig+0xe4>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d003      	beq.n	800868c <TIM_OC2_SetConfig+0x94>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a16      	ldr	r2, [pc, #88]	@ (80086e0 <TIM_OC2_SetConfig+0xe8>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d113      	bne.n	80086b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008692:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800869a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	693a      	ldr	r2, [r7, #16]
 80086b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	621a      	str	r2, [r3, #32]
}
 80086ce:	bf00      	nop
 80086d0:	371c      	adds	r7, #28
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	40010000 	.word	0x40010000
 80086e0:	40010400 	.word	0x40010400

080086e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a1b      	ldr	r3, [r3, #32]
 80086f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0303 	bic.w	r3, r3, #3
 800871a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800872c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	021b      	lsls	r3, r3, #8
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	4313      	orrs	r3, r2
 8008738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a21      	ldr	r2, [pc, #132]	@ (80087c4 <TIM_OC3_SetConfig+0xe0>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d003      	beq.n	800874a <TIM_OC3_SetConfig+0x66>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a20      	ldr	r2, [pc, #128]	@ (80087c8 <TIM_OC3_SetConfig+0xe4>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d10d      	bne.n	8008766 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	021b      	lsls	r3, r3, #8
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	4313      	orrs	r3, r2
 800875c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a16      	ldr	r2, [pc, #88]	@ (80087c4 <TIM_OC3_SetConfig+0xe0>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d003      	beq.n	8008776 <TIM_OC3_SetConfig+0x92>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a15      	ldr	r2, [pc, #84]	@ (80087c8 <TIM_OC3_SetConfig+0xe4>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d113      	bne.n	800879e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800877c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	011b      	lsls	r3, r3, #4
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	4313      	orrs	r3, r2
 8008790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	011b      	lsls	r3, r3, #4
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	4313      	orrs	r3, r2
 800879c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685a      	ldr	r2, [r3, #4]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	621a      	str	r2, [r3, #32]
}
 80087b8:	bf00      	nop
 80087ba:	371c      	adds	r7, #28
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	40010000 	.word	0x40010000
 80087c8:	40010400 	.word	0x40010400

080087cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b087      	sub	sp, #28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	021b      	lsls	r3, r3, #8
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	4313      	orrs	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	031b      	lsls	r3, r3, #12
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	4313      	orrs	r3, r2
 8008822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a12      	ldr	r2, [pc, #72]	@ (8008870 <TIM_OC4_SetConfig+0xa4>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d003      	beq.n	8008834 <TIM_OC4_SetConfig+0x68>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a11      	ldr	r2, [pc, #68]	@ (8008874 <TIM_OC4_SetConfig+0xa8>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d109      	bne.n	8008848 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800883a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	019b      	lsls	r3, r3, #6
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	4313      	orrs	r3, r2
 8008846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	621a      	str	r2, [r3, #32]
}
 8008862:	bf00      	nop
 8008864:	371c      	adds	r7, #28
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	40010000 	.word	0x40010000
 8008874:	40010400 	.word	0x40010400

08008878 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f003 031f 	and.w	r3, r3, #31
 800888a:	2201      	movs	r2, #1
 800888c:	fa02 f303 	lsl.w	r3, r2, r3
 8008890:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6a1a      	ldr	r2, [r3, #32]
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	43db      	mvns	r3, r3
 800889a:	401a      	ands	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6a1a      	ldr	r2, [r3, #32]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f003 031f 	and.w	r3, r3, #31
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	fa01 f303 	lsl.w	r3, r1, r3
 80088b0:	431a      	orrs	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	621a      	str	r2, [r3, #32]
}
 80088b6:	bf00      	nop
 80088b8:	371c      	adds	r7, #28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
	...

080088c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d101      	bne.n	80088dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088d8:	2302      	movs	r3, #2
 80088da:	e05a      	b.n	8008992 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2202      	movs	r2, #2
 80088e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a21      	ldr	r2, [pc, #132]	@ (80089a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d022      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008928:	d01d      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a1d      	ldr	r2, [pc, #116]	@ (80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d018      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a1b      	ldr	r2, [pc, #108]	@ (80089a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d013      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a1a      	ldr	r2, [pc, #104]	@ (80089ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d00e      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a18      	ldr	r2, [pc, #96]	@ (80089b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d009      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a17      	ldr	r2, [pc, #92]	@ (80089b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d004      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a15      	ldr	r2, [pc, #84]	@ (80089b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d10c      	bne.n	8008980 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800896c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	4313      	orrs	r3, r2
 8008976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	40010000 	.word	0x40010000
 80089a4:	40000400 	.word	0x40000400
 80089a8:	40000800 	.word	0x40000800
 80089ac:	40000c00 	.word	0x40000c00
 80089b0:	40010400 	.word	0x40010400
 80089b4:	40014000 	.word	0x40014000
 80089b8:	40001800 	.word	0x40001800

080089bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d101      	bne.n	80089d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80089d4:	2302      	movs	r3, #2
 80089d6:	e03d      	b.n	8008a54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e042      	b.n	8008b20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d106      	bne.n	8008ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7fb f870 	bl	8003b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2224      	movs	r2, #36	@ 0x24
 8008ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008aca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fffb 	bl	8009ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	691a      	ldr	r2, [r3, #16]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	695a      	ldr	r2, [r3, #20]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008af0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68da      	ldr	r2, [r3, #12]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08c      	sub	sp, #48	@ 0x30
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	4613      	mov	r3, r2
 8008b34:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	2b20      	cmp	r3, #32
 8008b40:	d162      	bne.n	8008c08 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d002      	beq.n	8008b4e <HAL_UART_Transmit_DMA+0x26>
 8008b48:	88fb      	ldrh	r3, [r7, #6]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e05b      	b.n	8008c0a <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	88fa      	ldrh	r2, [r7, #6]
 8008b5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	88fa      	ldrh	r2, [r7, #6]
 8008b62:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2221      	movs	r2, #33	@ 0x21
 8008b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b76:	4a27      	ldr	r2, [pc, #156]	@ (8008c14 <HAL_UART_Transmit_DMA+0xec>)
 8008b78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7e:	4a26      	ldr	r2, [pc, #152]	@ (8008c18 <HAL_UART_Transmit_DMA+0xf0>)
 8008b80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b86:	4a25      	ldr	r2, [pc, #148]	@ (8008c1c <HAL_UART_Transmit_DMA+0xf4>)
 8008b88:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b8e:	2200      	movs	r2, #0
 8008b90:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008b92:	f107 0308 	add.w	r3, r7, #8
 8008b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9e:	6819      	ldr	r1, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3304      	adds	r3, #4
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	88fb      	ldrh	r3, [r7, #6]
 8008baa:	f7fc fb03 	bl	80051b4 <HAL_DMA_Start_IT>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d008      	beq.n	8008bc6 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2210      	movs	r2, #16
 8008bb8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e021      	b.n	8008c0a <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008bce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3314      	adds	r3, #20
 8008bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	e853 3f00 	ldrex	r3, [r3]
 8008bde:	617b      	str	r3, [r7, #20]
   return(result);
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008be6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3314      	adds	r3, #20
 8008bee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bf0:	627a      	str	r2, [r7, #36]	@ 0x24
 8008bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf4:	6a39      	ldr	r1, [r7, #32]
 8008bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bf8:	e841 2300 	strex	r3, r2, [r1]
 8008bfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1e5      	bne.n	8008bd0 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	e000      	b.n	8008c0a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8008c08:	2302      	movs	r3, #2
  }
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3730      	adds	r7, #48	@ 0x30
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	08009345 	.word	0x08009345
 8008c18:	080093df 	.word	0x080093df
 8008c1c:	08009563 	.word	0x08009563

08008c20 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b20      	cmp	r3, #32
 8008c38:	d112      	bne.n	8008c60 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <HAL_UART_Receive_DMA+0x26>
 8008c40:	88fb      	ldrh	r3, [r7, #6]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e00b      	b.n	8008c62 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008c50:	88fb      	ldrh	r3, [r7, #6]
 8008c52:	461a      	mov	r2, r3
 8008c54:	68b9      	ldr	r1, [r7, #8]
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 fcce 	bl	80095f8 <UART_Start_Receive_DMA>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	e000      	b.n	8008c62 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008c60:	2302      	movs	r3, #2
  }
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b09a      	sub	sp, #104	@ 0x68
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	330c      	adds	r3, #12
 8008c78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c7c:	e853 3f00 	ldrex	r3, [r3]
 8008c80:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c88:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	330c      	adds	r3, #12
 8008c90:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008c92:	657a      	str	r2, [r7, #84]	@ 0x54
 8008c94:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c9a:	e841 2300 	strex	r3, r2, [r1]
 8008c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1e5      	bne.n	8008c72 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3314      	adds	r3, #20
 8008cac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb0:	e853 3f00 	ldrex	r3, [r3]
 8008cb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb8:	f023 0301 	bic.w	r3, r3, #1
 8008cbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	3314      	adds	r3, #20
 8008cc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008cc6:	643a      	str	r2, [r7, #64]	@ 0x40
 8008cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ccc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008cce:	e841 2300 	strex	r3, r2, [r1]
 8008cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1e5      	bne.n	8008ca6 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d119      	bne.n	8008d16 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	330c      	adds	r3, #12
 8008ce8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	f023 0310 	bic.w	r3, r3, #16
 8008cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	330c      	adds	r3, #12
 8008d00:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008d02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e5      	bne.n	8008ce2 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d20:	2b40      	cmp	r3, #64	@ 0x40
 8008d22:	d136      	bne.n	8008d92 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3314      	adds	r3, #20
 8008d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	e853 3f00 	ldrex	r3, [r3]
 8008d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3314      	adds	r3, #20
 8008d42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d44:	61ba      	str	r2, [r7, #24]
 8008d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d48:	6979      	ldr	r1, [r7, #20]
 8008d4a:	69ba      	ldr	r2, [r7, #24]
 8008d4c:	e841 2300 	strex	r3, r2, [r1]
 8008d50:	613b      	str	r3, [r7, #16]
   return(result);
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1e5      	bne.n	8008d24 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d018      	beq.n	8008d92 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d64:	2200      	movs	r2, #0
 8008d66:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fc fa79 	bl	8005264 <HAL_DMA_Abort>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00c      	beq.n	8008d92 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fc fc8d 	bl	800569c <HAL_DMA_GetError>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b20      	cmp	r3, #32
 8008d86:	d104      	bne.n	8008d92 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2210      	movs	r2, #16
 8008d8c:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e00a      	b.n	8008da8 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3768      	adds	r7, #104	@ 0x68
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b0ba      	sub	sp, #232	@ 0xe8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de6:	f003 030f 	and.w	r3, r3, #15
 8008dea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10f      	bne.n	8008e16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dfa:	f003 0320 	and.w	r3, r3, #32
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d009      	beq.n	8008e16 <HAL_UART_IRQHandler+0x66>
 8008e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e06:	f003 0320 	and.w	r3, r3, #32
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fd9c 	bl	800994c <UART_Receive_IT>
      return;
 8008e14:	e273      	b.n	80092fe <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 80de 	beq.w	8008fdc <HAL_UART_IRQHandler+0x22c>
 8008e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d106      	bne.n	8008e3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f000 80d1 	beq.w	8008fdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00b      	beq.n	8008e5e <HAL_UART_IRQHandler+0xae>
 8008e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d005      	beq.n	8008e5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e56:	f043 0201 	orr.w	r2, r3, #1
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e62:	f003 0304 	and.w	r3, r3, #4
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00b      	beq.n	8008e82 <HAL_UART_IRQHandler+0xd2>
 8008e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d005      	beq.n	8008e82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e7a:	f043 0202 	orr.w	r2, r3, #2
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00b      	beq.n	8008ea6 <HAL_UART_IRQHandler+0xf6>
 8008e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d005      	beq.n	8008ea6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e9e:	f043 0204 	orr.w	r2, r3, #4
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eaa:	f003 0308 	and.w	r3, r3, #8
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d011      	beq.n	8008ed6 <HAL_UART_IRQHandler+0x126>
 8008eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eb6:	f003 0320 	and.w	r3, r3, #32
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d105      	bne.n	8008eca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d005      	beq.n	8008ed6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ece:	f043 0208 	orr.w	r2, r3, #8
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f000 820a 	beq.w	80092f4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ee4:	f003 0320 	and.w	r3, r3, #32
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d008      	beq.n	8008efe <HAL_UART_IRQHandler+0x14e>
 8008eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ef0:	f003 0320 	and.w	r3, r3, #32
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fd27 	bl	800994c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f08:	2b40      	cmp	r3, #64	@ 0x40
 8008f0a:	bf0c      	ite	eq
 8008f0c:	2301      	moveq	r3, #1
 8008f0e:	2300      	movne	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f1a:	f003 0308 	and.w	r3, r3, #8
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d103      	bne.n	8008f2a <HAL_UART_IRQHandler+0x17a>
 8008f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d04f      	beq.n	8008fca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fc32 	bl	8009794 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f3a:	2b40      	cmp	r3, #64	@ 0x40
 8008f3c:	d141      	bne.n	8008fc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3314      	adds	r3, #20
 8008f44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3314      	adds	r3, #20
 8008f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f7a:	e841 2300 	strex	r3, r2, [r1]
 8008f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1d9      	bne.n	8008f3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d013      	beq.n	8008fba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f96:	4a8a      	ldr	r2, [pc, #552]	@ (80091c0 <HAL_UART_IRQHandler+0x410>)
 8008f98:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fc f9d0 	bl	8005344 <HAL_DMA_Abort_IT>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d016      	beq.n	8008fd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb8:	e00e      	b.n	8008fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7f8 ff4a 	bl	8001e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc0:	e00a      	b.n	8008fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7f8 ff46 	bl	8001e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc8:	e006      	b.n	8008fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7f8 ff42 	bl	8001e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008fd6:	e18d      	b.n	80092f4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd8:	bf00      	nop
    return;
 8008fda:	e18b      	b.n	80092f4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	f040 8167 	bne.w	80092b4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fea:	f003 0310 	and.w	r3, r3, #16
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f000 8160 	beq.w	80092b4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ff8:	f003 0310 	and.w	r3, r3, #16
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 8159 	beq.w	80092b4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009002:	2300      	movs	r3, #0
 8009004:	60bb      	str	r3, [r7, #8]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	60bb      	str	r3, [r7, #8]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	60bb      	str	r3, [r7, #8]
 8009016:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009022:	2b40      	cmp	r3, #64	@ 0x40
 8009024:	f040 80ce 	bne.w	80091c4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009034:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 80a9 	beq.w	8009190 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009046:	429a      	cmp	r2, r3
 8009048:	f080 80a2 	bcs.w	8009190 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009052:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800905e:	f000 8088 	beq.w	8009172 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	330c      	adds	r3, #12
 8009068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009078:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800907c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009080:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	330c      	adds	r3, #12
 800908a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800908e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009096:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800909a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80090a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1d9      	bne.n	8009062 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3314      	adds	r3, #20
 80090b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090c0:	f023 0301 	bic.w	r3, r3, #1
 80090c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3314      	adds	r3, #20
 80090ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80090d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80090d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80090da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80090e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e1      	bne.n	80090ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3314      	adds	r3, #20
 80090f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090f4:	e853 3f00 	ldrex	r3, [r3]
 80090f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80090fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009100:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3314      	adds	r3, #20
 800910a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800910e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009110:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009114:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800911c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e3      	bne.n	80090ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2220      	movs	r2, #32
 8009126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	330c      	adds	r3, #12
 8009136:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800913a:	e853 3f00 	ldrex	r3, [r3]
 800913e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009142:	f023 0310 	bic.w	r3, r3, #16
 8009146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	330c      	adds	r3, #12
 8009150:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009154:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009156:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800915a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e3      	bne.n	8009130 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800916c:	4618      	mov	r0, r3
 800916e:	f7fc f879 	bl	8005264 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2202      	movs	r2, #2
 8009176:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009180:	b29b      	uxth	r3, r3
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	b29b      	uxth	r3, r3
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f8cf 	bl	800932c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800918e:	e0b3      	b.n	80092f8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009194:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009198:	429a      	cmp	r2, r3
 800919a:	f040 80ad 	bne.w	80092f8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091a8:	f040 80a6 	bne.w	80092f8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2202      	movs	r2, #2
 80091b0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f8b7 	bl	800932c <HAL_UARTEx_RxEventCallback>
      return;
 80091be:	e09b      	b.n	80092f8 <HAL_UART_IRQHandler+0x548>
 80091c0:	0800985b 	.word	0x0800985b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091d8:	b29b      	uxth	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 808e 	beq.w	80092fc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80091e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 8089 	beq.w	80092fc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	330c      	adds	r3, #12
 80091f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009200:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	330c      	adds	r3, #12
 800920a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800920e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009210:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800921c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e3      	bne.n	80091ea <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3314      	adds	r3, #20
 8009228:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	623b      	str	r3, [r7, #32]
   return(result);
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	f023 0301 	bic.w	r3, r3, #1
 8009238:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3314      	adds	r3, #20
 8009242:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009246:	633a      	str	r2, [r7, #48]	@ 0x30
 8009248:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800924c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e3      	bne.n	8009222 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2220      	movs	r2, #32
 800925e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	330c      	adds	r3, #12
 800926e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	60fb      	str	r3, [r7, #12]
   return(result);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f023 0310 	bic.w	r3, r3, #16
 800927e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	330c      	adds	r3, #12
 8009288:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800928c:	61fa      	str	r2, [r7, #28]
 800928e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	69b9      	ldr	r1, [r7, #24]
 8009292:	69fa      	ldr	r2, [r7, #28]
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	617b      	str	r3, [r7, #20]
   return(result);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e3      	bne.n	8009268 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f83d 	bl	800932c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092b2:	e023      	b.n	80092fc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d009      	beq.n	80092d4 <HAL_UART_IRQHandler+0x524>
 80092c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fad5 	bl	800987c <UART_Transmit_IT>
    return;
 80092d2:	e014      	b.n	80092fe <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80092d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00e      	beq.n	80092fe <HAL_UART_IRQHandler+0x54e>
 80092e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d008      	beq.n	80092fe <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fb15 	bl	800991c <UART_EndTransmit_IT>
    return;
 80092f2:	e004      	b.n	80092fe <HAL_UART_IRQHandler+0x54e>
    return;
 80092f4:	bf00      	nop
 80092f6:	e002      	b.n	80092fe <HAL_UART_IRQHandler+0x54e>
      return;
 80092f8:	bf00      	nop
 80092fa:	e000      	b.n	80092fe <HAL_UART_IRQHandler+0x54e>
      return;
 80092fc:	bf00      	nop
  }
}
 80092fe:	37e8      	adds	r7, #232	@ 0xe8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b090      	sub	sp, #64	@ 0x40
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009350:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800935c:	2b00      	cmp	r3, #0
 800935e:	d137      	bne.n	80093d0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009362:	2200      	movs	r2, #0
 8009364:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3314      	adds	r3, #20
 800936c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009370:	e853 3f00 	ldrex	r3, [r3]
 8009374:	623b      	str	r3, [r7, #32]
   return(result);
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800937c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800937e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3314      	adds	r3, #20
 8009384:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009386:	633a      	str	r2, [r7, #48]	@ 0x30
 8009388:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800938c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e5      	bne.n	8009366 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800939a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	330c      	adds	r3, #12
 80093a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	e853 3f00 	ldrex	r3, [r3]
 80093a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	330c      	adds	r3, #12
 80093b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093ba:	61fa      	str	r2, [r7, #28]
 80093bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	69b9      	ldr	r1, [r7, #24]
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	e841 2300 	strex	r3, r2, [r1]
 80093c6:	617b      	str	r3, [r7, #20]
   return(result);
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1e5      	bne.n	800939a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093ce:	e002      	b.n	80093d6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80093d0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80093d2:	f7ff ff97 	bl	8009304 <HAL_UART_TxCpltCallback>
}
 80093d6:	bf00      	nop
 80093d8:	3740      	adds	r7, #64	@ 0x40
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f7ff ff93 	bl	8009318 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093f2:	bf00      	nop
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b09c      	sub	sp, #112	@ 0x70
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009406:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009412:	2b00      	cmp	r3, #0
 8009414:	d172      	bne.n	80094fc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009418:	2200      	movs	r2, #0
 800941a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800941c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	330c      	adds	r3, #12
 8009422:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009426:	e853 3f00 	ldrex	r3, [r3]
 800942a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800942c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800942e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009432:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	330c      	adds	r3, #12
 800943a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800943c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800943e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009440:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009442:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009444:	e841 2300 	strex	r3, r2, [r1]
 8009448:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800944a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e5      	bne.n	800941c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3314      	adds	r3, #20
 8009456:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945a:	e853 3f00 	ldrex	r3, [r3]
 800945e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009462:	f023 0301 	bic.w	r3, r3, #1
 8009466:	667b      	str	r3, [r7, #100]	@ 0x64
 8009468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3314      	adds	r3, #20
 800946e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009470:	647a      	str	r2, [r7, #68]	@ 0x44
 8009472:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009474:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009478:	e841 2300 	strex	r3, r2, [r1]
 800947c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800947e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1e5      	bne.n	8009450 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3314      	adds	r3, #20
 800948a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948e:	e853 3f00 	ldrex	r3, [r3]
 8009492:	623b      	str	r3, [r7, #32]
   return(result);
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800949a:	663b      	str	r3, [r7, #96]	@ 0x60
 800949c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	3314      	adds	r3, #20
 80094a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80094a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80094a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094ac:	e841 2300 	strex	r3, r2, [r1]
 80094b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1e5      	bne.n	8009484 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80094b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094ba:	2220      	movs	r2, #32
 80094bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d119      	bne.n	80094fc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	330c      	adds	r3, #12
 80094ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	e853 3f00 	ldrex	r3, [r3]
 80094d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f023 0310 	bic.w	r3, r3, #16
 80094de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80094e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	330c      	adds	r3, #12
 80094e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80094e8:	61fa      	str	r2, [r7, #28]
 80094ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	69b9      	ldr	r1, [r7, #24]
 80094ee:	69fa      	ldr	r2, [r7, #28]
 80094f0:	e841 2300 	strex	r3, r2, [r1]
 80094f4:	617b      	str	r3, [r7, #20]
   return(result);
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e5      	bne.n	80094c8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094fe:	2200      	movs	r2, #0
 8009500:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009506:	2b01      	cmp	r3, #1
 8009508:	d106      	bne.n	8009518 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800950a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800950c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800950e:	4619      	mov	r1, r3
 8009510:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009512:	f7ff ff0b 	bl	800932c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009516:	e002      	b.n	800951e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009518:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800951a:	f7f8 faad 	bl	8001a78 <HAL_UART_RxCpltCallback>
}
 800951e:	bf00      	nop
 8009520:	3770      	adds	r7, #112	@ 0x70
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009532:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2201      	movs	r2, #1
 8009538:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800953e:	2b01      	cmp	r3, #1
 8009540:	d108      	bne.n	8009554 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009546:	085b      	lsrs	r3, r3, #1
 8009548:	b29b      	uxth	r3, r3
 800954a:	4619      	mov	r1, r3
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f7ff feed 	bl	800932c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009552:	e002      	b.n	800955a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f7f8 fbcd 	bl	8001cf4 <HAL_UART_RxHalfCpltCallback>
}
 800955a:	bf00      	nop
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800956a:	2300      	movs	r3, #0
 800956c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009572:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800957e:	2b80      	cmp	r3, #128	@ 0x80
 8009580:	bf0c      	ite	eq
 8009582:	2301      	moveq	r3, #1
 8009584:	2300      	movne	r3, #0
 8009586:	b2db      	uxtb	r3, r3
 8009588:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b21      	cmp	r3, #33	@ 0x21
 8009594:	d108      	bne.n	80095a8 <UART_DMAError+0x46>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2200      	movs	r2, #0
 80095a0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80095a2:	68b8      	ldr	r0, [r7, #8]
 80095a4:	f000 f8ce 	bl	8009744 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095b2:	2b40      	cmp	r3, #64	@ 0x40
 80095b4:	bf0c      	ite	eq
 80095b6:	2301      	moveq	r3, #1
 80095b8:	2300      	movne	r3, #0
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b22      	cmp	r3, #34	@ 0x22
 80095c8:	d108      	bne.n	80095dc <UART_DMAError+0x7a>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d005      	beq.n	80095dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2200      	movs	r2, #0
 80095d4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80095d6:	68b8      	ldr	r0, [r7, #8]
 80095d8:	f000 f8dc 	bl	8009794 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095e0:	f043 0210 	orr.w	r2, r3, #16
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095e8:	68b8      	ldr	r0, [r7, #8]
 80095ea:	f7f8 fc33 	bl	8001e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095ee:	bf00      	nop
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
	...

080095f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b098      	sub	sp, #96	@ 0x60
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4613      	mov	r3, r2
 8009604:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	88fa      	ldrh	r2, [r7, #6]
 8009610:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2222      	movs	r2, #34	@ 0x22
 800961c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009624:	4a44      	ldr	r2, [pc, #272]	@ (8009738 <UART_Start_Receive_DMA+0x140>)
 8009626:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800962c:	4a43      	ldr	r2, [pc, #268]	@ (800973c <UART_Start_Receive_DMA+0x144>)
 800962e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009634:	4a42      	ldr	r2, [pc, #264]	@ (8009740 <UART_Start_Receive_DMA+0x148>)
 8009636:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800963c:	2200      	movs	r2, #0
 800963e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009640:	f107 0308 	add.w	r3, r7, #8
 8009644:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	3304      	adds	r3, #4
 8009650:	4619      	mov	r1, r3
 8009652:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	88fb      	ldrh	r3, [r7, #6]
 8009658:	f7fb fdac 	bl	80051b4 <HAL_DMA_Start_IT>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d008      	beq.n	8009674 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2210      	movs	r2, #16
 8009666:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2220      	movs	r2, #32
 800966c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e05d      	b.n	8009730 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009674:	2300      	movs	r3, #0
 8009676:	613b      	str	r3, [r7, #16]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	613b      	str	r3, [r7, #16]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	613b      	str	r3, [r7, #16]
 8009688:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d019      	beq.n	80096c6 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	330c      	adds	r3, #12
 8009698:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800969c:	e853 3f00 	ldrex	r3, [r3]
 80096a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	330c      	adds	r3, #12
 80096b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096b2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80096b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80096b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80096c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e5      	bne.n	8009692 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3314      	adds	r3, #20
 80096cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d0:	e853 3f00 	ldrex	r3, [r3]
 80096d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d8:	f043 0301 	orr.w	r3, r3, #1
 80096dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3314      	adds	r3, #20
 80096e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096e6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80096e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80096ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096ee:	e841 2300 	strex	r3, r2, [r1]
 80096f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1e5      	bne.n	80096c6 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3314      	adds	r3, #20
 8009700:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	e853 3f00 	ldrex	r3, [r3]
 8009708:	617b      	str	r3, [r7, #20]
   return(result);
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009710:	653b      	str	r3, [r7, #80]	@ 0x50
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3314      	adds	r3, #20
 8009718:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800971a:	627a      	str	r2, [r7, #36]	@ 0x24
 800971c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971e:	6a39      	ldr	r1, [r7, #32]
 8009720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	61fb      	str	r3, [r7, #28]
   return(result);
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e5      	bne.n	80096fa <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3760      	adds	r7, #96	@ 0x60
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	080093fb 	.word	0x080093fb
 800973c:	08009527 	.word	0x08009527
 8009740:	08009563 	.word	0x08009563

08009744 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009744:	b480      	push	{r7}
 8009746:	b089      	sub	sp, #36	@ 0x24
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	330c      	adds	r3, #12
 8009752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	e853 3f00 	ldrex	r3, [r3]
 800975a:	60bb      	str	r3, [r7, #8]
   return(result);
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009762:	61fb      	str	r3, [r7, #28]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	330c      	adds	r3, #12
 800976a:	69fa      	ldr	r2, [r7, #28]
 800976c:	61ba      	str	r2, [r7, #24]
 800976e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009770:	6979      	ldr	r1, [r7, #20]
 8009772:	69ba      	ldr	r2, [r7, #24]
 8009774:	e841 2300 	strex	r3, r2, [r1]
 8009778:	613b      	str	r3, [r7, #16]
   return(result);
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1e5      	bne.n	800974c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2220      	movs	r2, #32
 8009784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009788:	bf00      	nop
 800978a:	3724      	adds	r7, #36	@ 0x24
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009794:	b480      	push	{r7}
 8009796:	b095      	sub	sp, #84	@ 0x54
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	330c      	adds	r3, #12
 80097a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a6:	e853 3f00 	ldrex	r3, [r3]
 80097aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	330c      	adds	r3, #12
 80097ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80097be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097c4:	e841 2300 	strex	r3, r2, [r1]
 80097c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1e5      	bne.n	800979c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3314      	adds	r3, #20
 80097d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	e853 3f00 	ldrex	r3, [r3]
 80097de:	61fb      	str	r3, [r7, #28]
   return(result);
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	f023 0301 	bic.w	r3, r3, #1
 80097e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	3314      	adds	r3, #20
 80097ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097f8:	e841 2300 	strex	r3, r2, [r1]
 80097fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1e5      	bne.n	80097d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009808:	2b01      	cmp	r3, #1
 800980a:	d119      	bne.n	8009840 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	330c      	adds	r3, #12
 8009812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	e853 3f00 	ldrex	r3, [r3]
 800981a:	60bb      	str	r3, [r7, #8]
   return(result);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	f023 0310 	bic.w	r3, r3, #16
 8009822:	647b      	str	r3, [r7, #68]	@ 0x44
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	330c      	adds	r3, #12
 800982a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800982c:	61ba      	str	r2, [r7, #24]
 800982e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009830:	6979      	ldr	r1, [r7, #20]
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	e841 2300 	strex	r3, r2, [r1]
 8009838:	613b      	str	r3, [r7, #16]
   return(result);
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1e5      	bne.n	800980c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2220      	movs	r2, #32
 8009844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800984e:	bf00      	nop
 8009850:	3754      	adds	r7, #84	@ 0x54
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009866:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7f8 faf0 	bl	8001e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009874:	bf00      	nop
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b21      	cmp	r3, #33	@ 0x21
 800988e:	d13e      	bne.n	800990e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009898:	d114      	bne.n	80098c4 <UART_Transmit_IT+0x48>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d110      	bne.n	80098c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	881b      	ldrh	r3, [r3, #0]
 80098ac:	461a      	mov	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a1b      	ldr	r3, [r3, #32]
 80098bc:	1c9a      	adds	r2, r3, #2
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	621a      	str	r2, [r3, #32]
 80098c2:	e008      	b.n	80098d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	1c59      	adds	r1, r3, #1
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	6211      	str	r1, [r2, #32]
 80098ce:	781a      	ldrb	r2, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098da:	b29b      	uxth	r3, r3
 80098dc:	3b01      	subs	r3, #1
 80098de:	b29b      	uxth	r3, r3
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	4619      	mov	r1, r3
 80098e4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10f      	bne.n	800990a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68da      	ldr	r2, [r3, #12]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80098f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68da      	ldr	r2, [r3, #12]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009908:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	e000      	b.n	8009910 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800990e:	2302      	movs	r3, #2
  }
}
 8009910:	4618      	mov	r0, r3
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68da      	ldr	r2, [r3, #12]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009932:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2220      	movs	r2, #32
 8009938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7ff fce1 	bl	8009304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b08c      	sub	sp, #48	@ 0x30
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009954:	2300      	movs	r3, #0
 8009956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009958:	2300      	movs	r3, #0
 800995a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b22      	cmp	r3, #34	@ 0x22
 8009966:	f040 80aa 	bne.w	8009abe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009972:	d115      	bne.n	80099a0 <UART_Receive_IT+0x54>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d111      	bne.n	80099a0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009980:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	b29b      	uxth	r3, r3
 800998a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800998e:	b29a      	uxth	r2, r3
 8009990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009992:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009998:	1c9a      	adds	r2, r3, #2
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	629a      	str	r2, [r3, #40]	@ 0x28
 800999e:	e024      	b.n	80099ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099ae:	d007      	beq.n	80099c0 <UART_Receive_IT+0x74>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10a      	bne.n	80099ce <UART_Receive_IT+0x82>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d106      	bne.n	80099ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ca:	701a      	strb	r2, [r3, #0]
 80099cc:	e008      	b.n	80099e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099da:	b2da      	uxtb	r2, r3
 80099dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e4:	1c5a      	adds	r2, r3, #1
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	3b01      	subs	r3, #1
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	4619      	mov	r1, r3
 80099f8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d15d      	bne.n	8009aba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f022 0220 	bic.w	r2, r2, #32
 8009a0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68da      	ldr	r2, [r3, #12]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009a1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	695a      	ldr	r2, [r3, #20]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f022 0201 	bic.w	r2, r2, #1
 8009a2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2220      	movs	r2, #32
 8009a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d135      	bne.n	8009ab0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	330c      	adds	r3, #12
 8009a50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	e853 3f00 	ldrex	r3, [r3]
 8009a58:	613b      	str	r3, [r7, #16]
   return(result);
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f023 0310 	bic.w	r3, r3, #16
 8009a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	330c      	adds	r3, #12
 8009a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a6a:	623a      	str	r2, [r7, #32]
 8009a6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6e:	69f9      	ldr	r1, [r7, #28]
 8009a70:	6a3a      	ldr	r2, [r7, #32]
 8009a72:	e841 2300 	strex	r3, r2, [r1]
 8009a76:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1e5      	bne.n	8009a4a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0310 	and.w	r3, r3, #16
 8009a88:	2b10      	cmp	r3, #16
 8009a8a:	d10a      	bne.n	8009aa2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	60fb      	str	r3, [r7, #12]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	60fb      	str	r3, [r7, #12]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff fc3f 	bl	800932c <HAL_UARTEx_RxEventCallback>
 8009aae:	e002      	b.n	8009ab6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f7f7 ffe1 	bl	8001a78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	e002      	b.n	8009ac0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	e000      	b.n	8009ac0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009abe:	2302      	movs	r3, #2
  }
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3730      	adds	r7, #48	@ 0x30
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009acc:	b0c0      	sub	sp, #256	@ 0x100
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ae4:	68d9      	ldr	r1, [r3, #12]
 8009ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	ea40 0301 	orr.w	r3, r0, r1
 8009af0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009af6:	689a      	ldr	r2, [r3, #8]
 8009af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	431a      	orrs	r2, r3
 8009b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	431a      	orrs	r2, r3
 8009b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b0c:	69db      	ldr	r3, [r3, #28]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009b20:	f021 010c 	bic.w	r1, r1, #12
 8009b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b2e:	430b      	orrs	r3, r1
 8009b30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b42:	6999      	ldr	r1, [r3, #24]
 8009b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	ea40 0301 	orr.w	r3, r0, r1
 8009b4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	4b8f      	ldr	r3, [pc, #572]	@ (8009d94 <UART_SetConfig+0x2cc>)
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d005      	beq.n	8009b68 <UART_SetConfig+0xa0>
 8009b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	4b8d      	ldr	r3, [pc, #564]	@ (8009d98 <UART_SetConfig+0x2d0>)
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d104      	bne.n	8009b72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b68:	f7fd ff36 	bl	80079d8 <HAL_RCC_GetPCLK2Freq>
 8009b6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009b70:	e003      	b.n	8009b7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b72:	f7fd ff1d 	bl	80079b0 <HAL_RCC_GetPCLK1Freq>
 8009b76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b84:	f040 810c 	bne.w	8009da0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009b92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009b96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009b9a:	4622      	mov	r2, r4
 8009b9c:	462b      	mov	r3, r5
 8009b9e:	1891      	adds	r1, r2, r2
 8009ba0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009ba2:	415b      	adcs	r3, r3
 8009ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ba6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009baa:	4621      	mov	r1, r4
 8009bac:	eb12 0801 	adds.w	r8, r2, r1
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	eb43 0901 	adc.w	r9, r3, r1
 8009bb6:	f04f 0200 	mov.w	r2, #0
 8009bba:	f04f 0300 	mov.w	r3, #0
 8009bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009bca:	4690      	mov	r8, r2
 8009bcc:	4699      	mov	r9, r3
 8009bce:	4623      	mov	r3, r4
 8009bd0:	eb18 0303 	adds.w	r3, r8, r3
 8009bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009bd8:	462b      	mov	r3, r5
 8009bda:	eb49 0303 	adc.w	r3, r9, r3
 8009bde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009bee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009bf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	18db      	adds	r3, r3, r3
 8009bfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	eb42 0303 	adc.w	r3, r2, r3
 8009c02:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009c08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009c0c:	f7f6 ff76 	bl	8000afc <__aeabi_uldivmod>
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	4b61      	ldr	r3, [pc, #388]	@ (8009d9c <UART_SetConfig+0x2d4>)
 8009c16:	fba3 2302 	umull	r2, r3, r3, r2
 8009c1a:	095b      	lsrs	r3, r3, #5
 8009c1c:	011c      	lsls	r4, r3, #4
 8009c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c22:	2200      	movs	r2, #0
 8009c24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009c2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009c30:	4642      	mov	r2, r8
 8009c32:	464b      	mov	r3, r9
 8009c34:	1891      	adds	r1, r2, r2
 8009c36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009c38:	415b      	adcs	r3, r3
 8009c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009c40:	4641      	mov	r1, r8
 8009c42:	eb12 0a01 	adds.w	sl, r2, r1
 8009c46:	4649      	mov	r1, r9
 8009c48:	eb43 0b01 	adc.w	fp, r3, r1
 8009c4c:	f04f 0200 	mov.w	r2, #0
 8009c50:	f04f 0300 	mov.w	r3, #0
 8009c54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009c58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c60:	4692      	mov	sl, r2
 8009c62:	469b      	mov	fp, r3
 8009c64:	4643      	mov	r3, r8
 8009c66:	eb1a 0303 	adds.w	r3, sl, r3
 8009c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c6e:	464b      	mov	r3, r9
 8009c70:	eb4b 0303 	adc.w	r3, fp, r3
 8009c74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009c88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	18db      	adds	r3, r3, r3
 8009c90:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c92:	4613      	mov	r3, r2
 8009c94:	eb42 0303 	adc.w	r3, r2, r3
 8009c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009c9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009ca2:	f7f6 ff2b 	bl	8000afc <__aeabi_uldivmod>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	460b      	mov	r3, r1
 8009caa:	4611      	mov	r1, r2
 8009cac:	4b3b      	ldr	r3, [pc, #236]	@ (8009d9c <UART_SetConfig+0x2d4>)
 8009cae:	fba3 2301 	umull	r2, r3, r3, r1
 8009cb2:	095b      	lsrs	r3, r3, #5
 8009cb4:	2264      	movs	r2, #100	@ 0x64
 8009cb6:	fb02 f303 	mul.w	r3, r2, r3
 8009cba:	1acb      	subs	r3, r1, r3
 8009cbc:	00db      	lsls	r3, r3, #3
 8009cbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009cc2:	4b36      	ldr	r3, [pc, #216]	@ (8009d9c <UART_SetConfig+0x2d4>)
 8009cc4:	fba3 2302 	umull	r2, r3, r3, r2
 8009cc8:	095b      	lsrs	r3, r3, #5
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009cd0:	441c      	add	r4, r3
 8009cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009cdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009ce0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	464b      	mov	r3, r9
 8009ce8:	1891      	adds	r1, r2, r2
 8009cea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009cec:	415b      	adcs	r3, r3
 8009cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009cf4:	4641      	mov	r1, r8
 8009cf6:	1851      	adds	r1, r2, r1
 8009cf8:	6339      	str	r1, [r7, #48]	@ 0x30
 8009cfa:	4649      	mov	r1, r9
 8009cfc:	414b      	adcs	r3, r1
 8009cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d00:	f04f 0200 	mov.w	r2, #0
 8009d04:	f04f 0300 	mov.w	r3, #0
 8009d08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009d0c:	4659      	mov	r1, fp
 8009d0e:	00cb      	lsls	r3, r1, #3
 8009d10:	4651      	mov	r1, sl
 8009d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d16:	4651      	mov	r1, sl
 8009d18:	00ca      	lsls	r2, r1, #3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4603      	mov	r3, r0
 8009d20:	4642      	mov	r2, r8
 8009d22:	189b      	adds	r3, r3, r2
 8009d24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d28:	464b      	mov	r3, r9
 8009d2a:	460a      	mov	r2, r1
 8009d2c:	eb42 0303 	adc.w	r3, r2, r3
 8009d30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d40:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009d44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009d48:	460b      	mov	r3, r1
 8009d4a:	18db      	adds	r3, r3, r3
 8009d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d4e:	4613      	mov	r3, r2
 8009d50:	eb42 0303 	adc.w	r3, r2, r3
 8009d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009d5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009d5e:	f7f6 fecd 	bl	8000afc <__aeabi_uldivmod>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	4b0d      	ldr	r3, [pc, #52]	@ (8009d9c <UART_SetConfig+0x2d4>)
 8009d68:	fba3 1302 	umull	r1, r3, r3, r2
 8009d6c:	095b      	lsrs	r3, r3, #5
 8009d6e:	2164      	movs	r1, #100	@ 0x64
 8009d70:	fb01 f303 	mul.w	r3, r1, r3
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	00db      	lsls	r3, r3, #3
 8009d78:	3332      	adds	r3, #50	@ 0x32
 8009d7a:	4a08      	ldr	r2, [pc, #32]	@ (8009d9c <UART_SetConfig+0x2d4>)
 8009d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d80:	095b      	lsrs	r3, r3, #5
 8009d82:	f003 0207 	and.w	r2, r3, #7
 8009d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4422      	add	r2, r4
 8009d8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009d90:	e106      	b.n	8009fa0 <UART_SetConfig+0x4d8>
 8009d92:	bf00      	nop
 8009d94:	40011000 	.word	0x40011000
 8009d98:	40011400 	.word	0x40011400
 8009d9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009da4:	2200      	movs	r2, #0
 8009da6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009daa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009dae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009db2:	4642      	mov	r2, r8
 8009db4:	464b      	mov	r3, r9
 8009db6:	1891      	adds	r1, r2, r2
 8009db8:	6239      	str	r1, [r7, #32]
 8009dba:	415b      	adcs	r3, r3
 8009dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009dc2:	4641      	mov	r1, r8
 8009dc4:	1854      	adds	r4, r2, r1
 8009dc6:	4649      	mov	r1, r9
 8009dc8:	eb43 0501 	adc.w	r5, r3, r1
 8009dcc:	f04f 0200 	mov.w	r2, #0
 8009dd0:	f04f 0300 	mov.w	r3, #0
 8009dd4:	00eb      	lsls	r3, r5, #3
 8009dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009dda:	00e2      	lsls	r2, r4, #3
 8009ddc:	4614      	mov	r4, r2
 8009dde:	461d      	mov	r5, r3
 8009de0:	4643      	mov	r3, r8
 8009de2:	18e3      	adds	r3, r4, r3
 8009de4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009de8:	464b      	mov	r3, r9
 8009dea:	eb45 0303 	adc.w	r3, r5, r3
 8009dee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009dfe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e02:	f04f 0200 	mov.w	r2, #0
 8009e06:	f04f 0300 	mov.w	r3, #0
 8009e0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009e0e:	4629      	mov	r1, r5
 8009e10:	008b      	lsls	r3, r1, #2
 8009e12:	4621      	mov	r1, r4
 8009e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e18:	4621      	mov	r1, r4
 8009e1a:	008a      	lsls	r2, r1, #2
 8009e1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009e20:	f7f6 fe6c 	bl	8000afc <__aeabi_uldivmod>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4b60      	ldr	r3, [pc, #384]	@ (8009fac <UART_SetConfig+0x4e4>)
 8009e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8009e2e:	095b      	lsrs	r3, r3, #5
 8009e30:	011c      	lsls	r4, r3, #4
 8009e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e36:	2200      	movs	r2, #0
 8009e38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009e40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009e44:	4642      	mov	r2, r8
 8009e46:	464b      	mov	r3, r9
 8009e48:	1891      	adds	r1, r2, r2
 8009e4a:	61b9      	str	r1, [r7, #24]
 8009e4c:	415b      	adcs	r3, r3
 8009e4e:	61fb      	str	r3, [r7, #28]
 8009e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e54:	4641      	mov	r1, r8
 8009e56:	1851      	adds	r1, r2, r1
 8009e58:	6139      	str	r1, [r7, #16]
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	414b      	adcs	r3, r1
 8009e5e:	617b      	str	r3, [r7, #20]
 8009e60:	f04f 0200 	mov.w	r2, #0
 8009e64:	f04f 0300 	mov.w	r3, #0
 8009e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e6c:	4659      	mov	r1, fp
 8009e6e:	00cb      	lsls	r3, r1, #3
 8009e70:	4651      	mov	r1, sl
 8009e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e76:	4651      	mov	r1, sl
 8009e78:	00ca      	lsls	r2, r1, #3
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4603      	mov	r3, r0
 8009e80:	4642      	mov	r2, r8
 8009e82:	189b      	adds	r3, r3, r2
 8009e84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e88:	464b      	mov	r3, r9
 8009e8a:	460a      	mov	r2, r1
 8009e8c:	eb42 0303 	adc.w	r3, r2, r3
 8009e90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009ea0:	f04f 0200 	mov.w	r2, #0
 8009ea4:	f04f 0300 	mov.w	r3, #0
 8009ea8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009eac:	4649      	mov	r1, r9
 8009eae:	008b      	lsls	r3, r1, #2
 8009eb0:	4641      	mov	r1, r8
 8009eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009eb6:	4641      	mov	r1, r8
 8009eb8:	008a      	lsls	r2, r1, #2
 8009eba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009ebe:	f7f6 fe1d 	bl	8000afc <__aeabi_uldivmod>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	4b38      	ldr	r3, [pc, #224]	@ (8009fac <UART_SetConfig+0x4e4>)
 8009eca:	fba3 2301 	umull	r2, r3, r3, r1
 8009ece:	095b      	lsrs	r3, r3, #5
 8009ed0:	2264      	movs	r2, #100	@ 0x64
 8009ed2:	fb02 f303 	mul.w	r3, r2, r3
 8009ed6:	1acb      	subs	r3, r1, r3
 8009ed8:	011b      	lsls	r3, r3, #4
 8009eda:	3332      	adds	r3, #50	@ 0x32
 8009edc:	4a33      	ldr	r2, [pc, #204]	@ (8009fac <UART_SetConfig+0x4e4>)
 8009ede:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee2:	095b      	lsrs	r3, r3, #5
 8009ee4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ee8:	441c      	add	r4, r3
 8009eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009eee:	2200      	movs	r2, #0
 8009ef0:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ef2:	677a      	str	r2, [r7, #116]	@ 0x74
 8009ef4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009ef8:	4642      	mov	r2, r8
 8009efa:	464b      	mov	r3, r9
 8009efc:	1891      	adds	r1, r2, r2
 8009efe:	60b9      	str	r1, [r7, #8]
 8009f00:	415b      	adcs	r3, r3
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f08:	4641      	mov	r1, r8
 8009f0a:	1851      	adds	r1, r2, r1
 8009f0c:	6039      	str	r1, [r7, #0]
 8009f0e:	4649      	mov	r1, r9
 8009f10:	414b      	adcs	r3, r1
 8009f12:	607b      	str	r3, [r7, #4]
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	f04f 0300 	mov.w	r3, #0
 8009f1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f20:	4659      	mov	r1, fp
 8009f22:	00cb      	lsls	r3, r1, #3
 8009f24:	4651      	mov	r1, sl
 8009f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f2a:	4651      	mov	r1, sl
 8009f2c:	00ca      	lsls	r2, r1, #3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	4619      	mov	r1, r3
 8009f32:	4603      	mov	r3, r0
 8009f34:	4642      	mov	r2, r8
 8009f36:	189b      	adds	r3, r3, r2
 8009f38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f3a:	464b      	mov	r3, r9
 8009f3c:	460a      	mov	r2, r1
 8009f3e:	eb42 0303 	adc.w	r3, r2, r3
 8009f42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009f50:	f04f 0200 	mov.w	r2, #0
 8009f54:	f04f 0300 	mov.w	r3, #0
 8009f58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009f5c:	4649      	mov	r1, r9
 8009f5e:	008b      	lsls	r3, r1, #2
 8009f60:	4641      	mov	r1, r8
 8009f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f66:	4641      	mov	r1, r8
 8009f68:	008a      	lsls	r2, r1, #2
 8009f6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009f6e:	f7f6 fdc5 	bl	8000afc <__aeabi_uldivmod>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4b0d      	ldr	r3, [pc, #52]	@ (8009fac <UART_SetConfig+0x4e4>)
 8009f78:	fba3 1302 	umull	r1, r3, r3, r2
 8009f7c:	095b      	lsrs	r3, r3, #5
 8009f7e:	2164      	movs	r1, #100	@ 0x64
 8009f80:	fb01 f303 	mul.w	r3, r1, r3
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	011b      	lsls	r3, r3, #4
 8009f88:	3332      	adds	r3, #50	@ 0x32
 8009f8a:	4a08      	ldr	r2, [pc, #32]	@ (8009fac <UART_SetConfig+0x4e4>)
 8009f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f90:	095b      	lsrs	r3, r3, #5
 8009f92:	f003 020f 	and.w	r2, r3, #15
 8009f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4422      	add	r2, r4
 8009f9e:	609a      	str	r2, [r3, #8]
}
 8009fa0:	bf00      	nop
 8009fa2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fac:	51eb851f 	.word	0x51eb851f

08009fb0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009fb6:	4b87      	ldr	r3, [pc, #540]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 8009fb8:	22c0      	movs	r2, #192	@ 0xc0
 8009fba:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009fbc:	4b85      	ldr	r3, [pc, #532]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 8009fbe:	22a8      	movs	r2, #168	@ 0xa8
 8009fc0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 13;
 8009fc2:	4b84      	ldr	r3, [pc, #528]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 8009fc4:	220d      	movs	r2, #13
 8009fc6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8009fc8:	4b82      	ldr	r3, [pc, #520]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 8009fca:	226f      	movs	r2, #111	@ 0x6f
 8009fcc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009fce:	4b82      	ldr	r3, [pc, #520]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 8009fd0:	22ff      	movs	r2, #255	@ 0xff
 8009fd2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009fd4:	4b80      	ldr	r3, [pc, #512]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 8009fd6:	22ff      	movs	r2, #255	@ 0xff
 8009fd8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009fda:	4b7f      	ldr	r3, [pc, #508]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 8009fdc:	22ff      	movs	r2, #255	@ 0xff
 8009fde:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009fe0:	4b7d      	ldr	r3, [pc, #500]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009fe6:	4b7d      	ldr	r3, [pc, #500]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 8009fe8:	22c0      	movs	r2, #192	@ 0xc0
 8009fea:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009fec:	4b7b      	ldr	r3, [pc, #492]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 8009fee:	22a8      	movs	r2, #168	@ 0xa8
 8009ff0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 13;
 8009ff2:	4b7a      	ldr	r3, [pc, #488]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 8009ff4:	220d      	movs	r2, #13
 8009ff6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 8009ff8:	4b78      	ldr	r3, [pc, #480]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 8009ffa:	2264      	movs	r2, #100	@ 0x64
 8009ffc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8009ffe:	f000 fcfa 	bl	800a9f6 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a002:	4b74      	ldr	r3, [pc, #464]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	061a      	lsls	r2, r3, #24
 800a008:	4b72      	ldr	r3, [pc, #456]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a00a:	785b      	ldrb	r3, [r3, #1]
 800a00c:	041b      	lsls	r3, r3, #16
 800a00e:	431a      	orrs	r2, r3
 800a010:	4b70      	ldr	r3, [pc, #448]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a012:	789b      	ldrb	r3, [r3, #2]
 800a014:	021b      	lsls	r3, r3, #8
 800a016:	4313      	orrs	r3, r2
 800a018:	4a6e      	ldr	r2, [pc, #440]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a01a:	78d2      	ldrb	r2, [r2, #3]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	061a      	lsls	r2, r3, #24
 800a020:	4b6c      	ldr	r3, [pc, #432]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	0619      	lsls	r1, r3, #24
 800a026:	4b6b      	ldr	r3, [pc, #428]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a028:	785b      	ldrb	r3, [r3, #1]
 800a02a:	041b      	lsls	r3, r3, #16
 800a02c:	4319      	orrs	r1, r3
 800a02e:	4b69      	ldr	r3, [pc, #420]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a030:	789b      	ldrb	r3, [r3, #2]
 800a032:	021b      	lsls	r3, r3, #8
 800a034:	430b      	orrs	r3, r1
 800a036:	4967      	ldr	r1, [pc, #412]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a038:	78c9      	ldrb	r1, [r1, #3]
 800a03a:	430b      	orrs	r3, r1
 800a03c:	021b      	lsls	r3, r3, #8
 800a03e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a042:	431a      	orrs	r2, r3
 800a044:	4b63      	ldr	r3, [pc, #396]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	0619      	lsls	r1, r3, #24
 800a04a:	4b62      	ldr	r3, [pc, #392]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a04c:	785b      	ldrb	r3, [r3, #1]
 800a04e:	041b      	lsls	r3, r3, #16
 800a050:	4319      	orrs	r1, r3
 800a052:	4b60      	ldr	r3, [pc, #384]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a054:	789b      	ldrb	r3, [r3, #2]
 800a056:	021b      	lsls	r3, r3, #8
 800a058:	430b      	orrs	r3, r1
 800a05a:	495e      	ldr	r1, [pc, #376]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a05c:	78c9      	ldrb	r1, [r1, #3]
 800a05e:	430b      	orrs	r3, r1
 800a060:	0a1b      	lsrs	r3, r3, #8
 800a062:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a066:	431a      	orrs	r2, r3
 800a068:	4b5a      	ldr	r3, [pc, #360]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	0619      	lsls	r1, r3, #24
 800a06e:	4b59      	ldr	r3, [pc, #356]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a070:	785b      	ldrb	r3, [r3, #1]
 800a072:	041b      	lsls	r3, r3, #16
 800a074:	4319      	orrs	r1, r3
 800a076:	4b57      	ldr	r3, [pc, #348]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a078:	789b      	ldrb	r3, [r3, #2]
 800a07a:	021b      	lsls	r3, r3, #8
 800a07c:	430b      	orrs	r3, r1
 800a07e:	4955      	ldr	r1, [pc, #340]	@ (800a1d4 <MX_LWIP_Init+0x224>)
 800a080:	78c9      	ldrb	r1, [r1, #3]
 800a082:	430b      	orrs	r3, r1
 800a084:	0e1b      	lsrs	r3, r3, #24
 800a086:	4313      	orrs	r3, r2
 800a088:	4a55      	ldr	r2, [pc, #340]	@ (800a1e0 <MX_LWIP_Init+0x230>)
 800a08a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a08c:	4b52      	ldr	r3, [pc, #328]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	061a      	lsls	r2, r3, #24
 800a092:	4b51      	ldr	r3, [pc, #324]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a094:	785b      	ldrb	r3, [r3, #1]
 800a096:	041b      	lsls	r3, r3, #16
 800a098:	431a      	orrs	r2, r3
 800a09a:	4b4f      	ldr	r3, [pc, #316]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a09c:	789b      	ldrb	r3, [r3, #2]
 800a09e:	021b      	lsls	r3, r3, #8
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	4a4d      	ldr	r2, [pc, #308]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a0a4:	78d2      	ldrb	r2, [r2, #3]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	061a      	lsls	r2, r3, #24
 800a0aa:	4b4b      	ldr	r3, [pc, #300]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	0619      	lsls	r1, r3, #24
 800a0b0:	4b49      	ldr	r3, [pc, #292]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a0b2:	785b      	ldrb	r3, [r3, #1]
 800a0b4:	041b      	lsls	r3, r3, #16
 800a0b6:	4319      	orrs	r1, r3
 800a0b8:	4b47      	ldr	r3, [pc, #284]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a0ba:	789b      	ldrb	r3, [r3, #2]
 800a0bc:	021b      	lsls	r3, r3, #8
 800a0be:	430b      	orrs	r3, r1
 800a0c0:	4945      	ldr	r1, [pc, #276]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a0c2:	78c9      	ldrb	r1, [r1, #3]
 800a0c4:	430b      	orrs	r3, r1
 800a0c6:	021b      	lsls	r3, r3, #8
 800a0c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a0cc:	431a      	orrs	r2, r3
 800a0ce:	4b42      	ldr	r3, [pc, #264]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	0619      	lsls	r1, r3, #24
 800a0d4:	4b40      	ldr	r3, [pc, #256]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a0d6:	785b      	ldrb	r3, [r3, #1]
 800a0d8:	041b      	lsls	r3, r3, #16
 800a0da:	4319      	orrs	r1, r3
 800a0dc:	4b3e      	ldr	r3, [pc, #248]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a0de:	789b      	ldrb	r3, [r3, #2]
 800a0e0:	021b      	lsls	r3, r3, #8
 800a0e2:	430b      	orrs	r3, r1
 800a0e4:	493c      	ldr	r1, [pc, #240]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a0e6:	78c9      	ldrb	r1, [r1, #3]
 800a0e8:	430b      	orrs	r3, r1
 800a0ea:	0a1b      	lsrs	r3, r3, #8
 800a0ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a0f0:	431a      	orrs	r2, r3
 800a0f2:	4b39      	ldr	r3, [pc, #228]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	0619      	lsls	r1, r3, #24
 800a0f8:	4b37      	ldr	r3, [pc, #220]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a0fa:	785b      	ldrb	r3, [r3, #1]
 800a0fc:	041b      	lsls	r3, r3, #16
 800a0fe:	4319      	orrs	r1, r3
 800a100:	4b35      	ldr	r3, [pc, #212]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a102:	789b      	ldrb	r3, [r3, #2]
 800a104:	021b      	lsls	r3, r3, #8
 800a106:	430b      	orrs	r3, r1
 800a108:	4933      	ldr	r1, [pc, #204]	@ (800a1d8 <MX_LWIP_Init+0x228>)
 800a10a:	78c9      	ldrb	r1, [r1, #3]
 800a10c:	430b      	orrs	r3, r1
 800a10e:	0e1b      	lsrs	r3, r3, #24
 800a110:	4313      	orrs	r3, r2
 800a112:	4a34      	ldr	r2, [pc, #208]	@ (800a1e4 <MX_LWIP_Init+0x234>)
 800a114:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a116:	4b31      	ldr	r3, [pc, #196]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	061a      	lsls	r2, r3, #24
 800a11c:	4b2f      	ldr	r3, [pc, #188]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a11e:	785b      	ldrb	r3, [r3, #1]
 800a120:	041b      	lsls	r3, r3, #16
 800a122:	431a      	orrs	r2, r3
 800a124:	4b2d      	ldr	r3, [pc, #180]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a126:	789b      	ldrb	r3, [r3, #2]
 800a128:	021b      	lsls	r3, r3, #8
 800a12a:	4313      	orrs	r3, r2
 800a12c:	4a2b      	ldr	r2, [pc, #172]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a12e:	78d2      	ldrb	r2, [r2, #3]
 800a130:	4313      	orrs	r3, r2
 800a132:	061a      	lsls	r2, r3, #24
 800a134:	4b29      	ldr	r3, [pc, #164]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	0619      	lsls	r1, r3, #24
 800a13a:	4b28      	ldr	r3, [pc, #160]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a13c:	785b      	ldrb	r3, [r3, #1]
 800a13e:	041b      	lsls	r3, r3, #16
 800a140:	4319      	orrs	r1, r3
 800a142:	4b26      	ldr	r3, [pc, #152]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a144:	789b      	ldrb	r3, [r3, #2]
 800a146:	021b      	lsls	r3, r3, #8
 800a148:	430b      	orrs	r3, r1
 800a14a:	4924      	ldr	r1, [pc, #144]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a14c:	78c9      	ldrb	r1, [r1, #3]
 800a14e:	430b      	orrs	r3, r1
 800a150:	021b      	lsls	r3, r3, #8
 800a152:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a156:	431a      	orrs	r2, r3
 800a158:	4b20      	ldr	r3, [pc, #128]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	0619      	lsls	r1, r3, #24
 800a15e:	4b1f      	ldr	r3, [pc, #124]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a160:	785b      	ldrb	r3, [r3, #1]
 800a162:	041b      	lsls	r3, r3, #16
 800a164:	4319      	orrs	r1, r3
 800a166:	4b1d      	ldr	r3, [pc, #116]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a168:	789b      	ldrb	r3, [r3, #2]
 800a16a:	021b      	lsls	r3, r3, #8
 800a16c:	430b      	orrs	r3, r1
 800a16e:	491b      	ldr	r1, [pc, #108]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a170:	78c9      	ldrb	r1, [r1, #3]
 800a172:	430b      	orrs	r3, r1
 800a174:	0a1b      	lsrs	r3, r3, #8
 800a176:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a17a:	431a      	orrs	r2, r3
 800a17c:	4b17      	ldr	r3, [pc, #92]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	0619      	lsls	r1, r3, #24
 800a182:	4b16      	ldr	r3, [pc, #88]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a184:	785b      	ldrb	r3, [r3, #1]
 800a186:	041b      	lsls	r3, r3, #16
 800a188:	4319      	orrs	r1, r3
 800a18a:	4b14      	ldr	r3, [pc, #80]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a18c:	789b      	ldrb	r3, [r3, #2]
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	430b      	orrs	r3, r1
 800a192:	4912      	ldr	r1, [pc, #72]	@ (800a1dc <MX_LWIP_Init+0x22c>)
 800a194:	78c9      	ldrb	r1, [r1, #3]
 800a196:	430b      	orrs	r3, r1
 800a198:	0e1b      	lsrs	r3, r3, #24
 800a19a:	4313      	orrs	r3, r2
 800a19c:	4a12      	ldr	r2, [pc, #72]	@ (800a1e8 <MX_LWIP_Init+0x238>)
 800a19e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a1a0:	4b12      	ldr	r3, [pc, #72]	@ (800a1ec <MX_LWIP_Init+0x23c>)
 800a1a2:	9302      	str	r3, [sp, #8]
 800a1a4:	4b12      	ldr	r3, [pc, #72]	@ (800a1f0 <MX_LWIP_Init+0x240>)
 800a1a6:	9301      	str	r3, [sp, #4]
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a1e8 <MX_LWIP_Init+0x238>)
 800a1ae:	4a0d      	ldr	r2, [pc, #52]	@ (800a1e4 <MX_LWIP_Init+0x234>)
 800a1b0:	490b      	ldr	r1, [pc, #44]	@ (800a1e0 <MX_LWIP_Init+0x230>)
 800a1b2:	4810      	ldr	r0, [pc, #64]	@ (800a1f4 <MX_LWIP_Init+0x244>)
 800a1b4:	f001 f90a 	bl	800b3cc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a1b8:	480e      	ldr	r0, [pc, #56]	@ (800a1f4 <MX_LWIP_Init+0x244>)
 800a1ba:	f001 fab9 	bl	800b730 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800a1be:	480d      	ldr	r0, [pc, #52]	@ (800a1f4 <MX_LWIP_Init+0x244>)
 800a1c0:	f001 fac6 	bl	800b750 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a1c4:	490c      	ldr	r1, [pc, #48]	@ (800a1f8 <MX_LWIP_Init+0x248>)
 800a1c6:	480b      	ldr	r0, [pc, #44]	@ (800a1f4 <MX_LWIP_Init+0x244>)
 800a1c8:	f001 fbc4 	bl	800b954 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a1cc:	bf00      	nop
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20000f54 	.word	0x20000f54
 800a1d8:	20000f58 	.word	0x20000f58
 800a1dc:	20000f5c 	.word	0x20000f5c
 800a1e0:	20000f48 	.word	0x20000f48
 800a1e4:	20000f4c 	.word	0x20000f4c
 800a1e8:	20000f50 	.word	0x20000f50
 800a1ec:	08014985 	.word	0x08014985
 800a1f0:	0800a519 	.word	0x0800a519
 800a1f4:	20000f14 	.word	0x20000f14
 800a1f8:	0800a24d 	.word	0x0800a24d

0800a1fc <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800a204:	f7fa fa88 	bl	8004718 <HAL_GetTick>
 800a208:	4602      	mov	r2, r0
 800a20a:	4b08      	ldr	r3, [pc, #32]	@ (800a22c <Ethernet_Link_Periodic_Handle+0x30>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	2b63      	cmp	r3, #99	@ 0x63
 800a212:	d907      	bls.n	800a224 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800a214:	f7fa fa80 	bl	8004718 <HAL_GetTick>
 800a218:	4603      	mov	r3, r0
 800a21a:	4a04      	ldr	r2, [pc, #16]	@ (800a22c <Ethernet_Link_Periodic_Handle+0x30>)
 800a21c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fabe 	bl	800a7a0 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800a224:	bf00      	nop
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20000f10 	.word	0x20000f10

0800a230 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800a234:	4804      	ldr	r0, [pc, #16]	@ (800a248 <MX_LWIP_Process+0x18>)
 800a236:	f000 f94f 	bl	800a4d8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800a23a:	f007 fc9b 	bl	8011b74 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800a23e:	4802      	ldr	r0, [pc, #8]	@ (800a248 <MX_LWIP_Process+0x18>)
 800a240:	f7ff ffdc 	bl	800a1fc <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800a244:	bf00      	nop
 800a246:	bd80      	pop	{r7, pc}
 800a248:	20000f14 	.word	0x20000f14

0800a24c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a26c:	4b44      	ldr	r3, [pc, #272]	@ (800a380 <low_level_init+0x120>)
 800a26e:	4a45      	ldr	r2, [pc, #276]	@ (800a384 <low_level_init+0x124>)
 800a270:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x12;
 800a272:	2312      	movs	r3, #18
 800a274:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x34;
 800a276:	2334      	movs	r3, #52	@ 0x34
 800a278:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x56;
 800a27a:	2356      	movs	r3, #86	@ 0x56
 800a27c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x12;
 800a27e:	2312      	movs	r3, #18
 800a280:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x34;
 800a282:	2334      	movs	r3, #52	@ 0x34
 800a284:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x56;
 800a286:	2356      	movs	r3, #86	@ 0x56
 800a288:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a28a:	4a3d      	ldr	r2, [pc, #244]	@ (800a380 <low_level_init+0x120>)
 800a28c:	f107 0308 	add.w	r3, r7, #8
 800a290:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a292:	4b3b      	ldr	r3, [pc, #236]	@ (800a380 <low_level_init+0x120>)
 800a294:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800a298:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a29a:	4b39      	ldr	r3, [pc, #228]	@ (800a380 <low_level_init+0x120>)
 800a29c:	4a3a      	ldr	r2, [pc, #232]	@ (800a388 <low_level_init+0x128>)
 800a29e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a2a0:	4b37      	ldr	r3, [pc, #220]	@ (800a380 <low_level_init+0x120>)
 800a2a2:	4a3a      	ldr	r2, [pc, #232]	@ (800a38c <low_level_init+0x12c>)
 800a2a4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a2a6:	4b36      	ldr	r3, [pc, #216]	@ (800a380 <low_level_init+0x120>)
 800a2a8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a2ac:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a2ae:	4834      	ldr	r0, [pc, #208]	@ (800a380 <low_level_init+0x120>)
 800a2b0:	f7fb fae0 	bl	8005874 <HAL_ETH_Init>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a2b8:	2238      	movs	r2, #56	@ 0x38
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	4834      	ldr	r0, [pc, #208]	@ (800a390 <low_level_init+0x130>)
 800a2be:	f00a fd9c 	bl	8014dfa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a2c2:	4b33      	ldr	r3, [pc, #204]	@ (800a390 <low_level_init+0x130>)
 800a2c4:	2221      	movs	r2, #33	@ 0x21
 800a2c6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a2c8:	4b31      	ldr	r3, [pc, #196]	@ (800a390 <low_level_init+0x130>)
 800a2ca:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800a2ce:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a2d0:	4b2f      	ldr	r3, [pc, #188]	@ (800a390 <low_level_init+0x130>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a2d6:	482f      	ldr	r0, [pc, #188]	@ (800a394 <low_level_init+0x134>)
 800a2d8:	f000 ff40 	bl	800b15c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2206      	movs	r2, #6
 800a2e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a2e4:	4b26      	ldr	r3, [pc, #152]	@ (800a380 <low_level_init+0x120>)
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	781a      	ldrb	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a2f0:	4b23      	ldr	r3, [pc, #140]	@ (800a380 <low_level_init+0x120>)
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	785a      	ldrb	r2, [r3, #1]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a2fc:	4b20      	ldr	r3, [pc, #128]	@ (800a380 <low_level_init+0x120>)
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	789a      	ldrb	r2, [r3, #2]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a308:	4b1d      	ldr	r3, [pc, #116]	@ (800a380 <low_level_init+0x120>)
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	78da      	ldrb	r2, [r3, #3]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a314:	4b1a      	ldr	r3, [pc, #104]	@ (800a380 <low_level_init+0x120>)
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	791a      	ldrb	r2, [r3, #4]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a320:	4b17      	ldr	r3, [pc, #92]	@ (800a380 <low_level_init+0x120>)
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	795a      	ldrb	r2, [r3, #5]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a332:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a33a:	f043 030a 	orr.w	r3, r3, #10
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a346:	4914      	ldr	r1, [pc, #80]	@ (800a398 <low_level_init+0x138>)
 800a348:	4814      	ldr	r0, [pc, #80]	@ (800a39c <low_level_init+0x13c>)
 800a34a:	f7fa f878 	bl	800443e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800a34e:	4813      	ldr	r0, [pc, #76]	@ (800a39c <low_level_init+0x13c>)
 800a350:	f7fa f8a7 	bl	80044a2 <LAN8742_Init>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d006      	beq.n	800a368 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f001 faca 	bl	800b8f4 <netif_set_link_down>
    netif_set_down(netif);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f001 fa61 	bl	800b828 <netif_set_down>
 800a366:	e008      	b.n	800a37a <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800a368:	7bfb      	ldrb	r3, [r7, #15]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d103      	bne.n	800a376 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fa16 	bl	800a7a0 <ethernet_link_check_state>
 800a374:	e001      	b.n	800a37a <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800a376:	f7f7 fe87 	bl	8002088 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	20005a2c 	.word	0x20005a2c
 800a384:	40028000 	.word	0x40028000
 800a388:	2000598c 	.word	0x2000598c
 800a38c:	200058ec 	.word	0x200058ec
 800a390:	20005adc 	.word	0x20005adc
 800a394:	08018558 	.word	0x08018558
 800a398:	200000ac 	.word	0x200000ac
 800a39c:	20005b14 	.word	0x20005b14

0800a3a0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b092      	sub	sp, #72	@ 0x48
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a3b8:	f107 030c 	add.w	r3, r7, #12
 800a3bc:	2230      	movs	r2, #48	@ 0x30
 800a3be:	2100      	movs	r1, #0
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f00a fd1a 	bl	8014dfa <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a3c6:	f107 030c 	add.w	r3, r7, #12
 800a3ca:	2230      	movs	r2, #48	@ 0x30
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f00a fd13 	bl	8014dfa <memset>

  for(q = p; q != NULL; q = q->next)
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3d8:	e045      	b.n	800a466 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a3da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3dc:	2b03      	cmp	r3, #3
 800a3de:	d902      	bls.n	800a3e6 <low_level_output+0x46>
      return ERR_IF;
 800a3e0:	f06f 030b 	mvn.w	r3, #11
 800a3e4:	e055      	b.n	800a492 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800a3e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3e8:	6859      	ldr	r1, [r3, #4]
 800a3ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	005b      	lsls	r3, r3, #1
 800a3f0:	4413      	add	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	3348      	adds	r3, #72	@ 0x48
 800a3f6:	443b      	add	r3, r7
 800a3f8:	3b3c      	subs	r3, #60	@ 0x3c
 800a3fa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a3fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3fe:	895b      	ldrh	r3, [r3, #10]
 800a400:	4619      	mov	r1, r3
 800a402:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a404:	4613      	mov	r3, r2
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	4413      	add	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	3348      	adds	r3, #72	@ 0x48
 800a40e:	443b      	add	r3, r7
 800a410:	3b38      	subs	r3, #56	@ 0x38
 800a412:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a416:	2b00      	cmp	r3, #0
 800a418:	d011      	beq.n	800a43e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a41a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a41c:	1e5a      	subs	r2, r3, #1
 800a41e:	f107 000c 	add.w	r0, r7, #12
 800a422:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a424:	460b      	mov	r3, r1
 800a426:	005b      	lsls	r3, r3, #1
 800a428:	440b      	add	r3, r1
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	18c1      	adds	r1, r0, r3
 800a42e:	4613      	mov	r3, r2
 800a430:	005b      	lsls	r3, r3, #1
 800a432:	4413      	add	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	3348      	adds	r3, #72	@ 0x48
 800a438:	443b      	add	r3, r7
 800a43a:	3b34      	subs	r3, #52	@ 0x34
 800a43c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a43e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d109      	bne.n	800a45a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a446:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a448:	4613      	mov	r3, r2
 800a44a:	005b      	lsls	r3, r3, #1
 800a44c:	4413      	add	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	3348      	adds	r3, #72	@ 0x48
 800a452:	443b      	add	r3, r7
 800a454:	3b34      	subs	r3, #52	@ 0x34
 800a456:	2200      	movs	r2, #0
 800a458:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a45a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a45c:	3301      	adds	r3, #1
 800a45e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800a460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	643b      	str	r3, [r7, #64]	@ 0x40
 800a466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1b6      	bne.n	800a3da <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	891b      	ldrh	r3, [r3, #8]
 800a470:	461a      	mov	r2, r3
 800a472:	4b0a      	ldr	r3, [pc, #40]	@ (800a49c <low_level_output+0xfc>)
 800a474:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a476:	4a09      	ldr	r2, [pc, #36]	@ (800a49c <low_level_output+0xfc>)
 800a478:	f107 030c 	add.w	r3, r7, #12
 800a47c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a47e:	4a07      	ldr	r2, [pc, #28]	@ (800a49c <low_level_output+0xfc>)
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a484:	2214      	movs	r2, #20
 800a486:	4905      	ldr	r1, [pc, #20]	@ (800a49c <low_level_output+0xfc>)
 800a488:	4805      	ldr	r0, [pc, #20]	@ (800a4a0 <low_level_output+0x100>)
 800a48a:	f7fb fb47 	bl	8005b1c <HAL_ETH_Transmit>

  return errval;
 800a48e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a492:	4618      	mov	r0, r3
 800a494:	3748      	adds	r7, #72	@ 0x48
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	20005adc 	.word	0x20005adc
 800a4a0:	20005a2c 	.word	0x20005a2c

0800a4a4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a4b0:	4b07      	ldr	r3, [pc, #28]	@ (800a4d0 <low_level_input+0x2c>)
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d105      	bne.n	800a4c4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a4b8:	f107 030c 	add.w	r3, r7, #12
 800a4bc:	4619      	mov	r1, r3
 800a4be:	4805      	ldr	r0, [pc, #20]	@ (800a4d4 <low_level_input+0x30>)
 800a4c0:	f7fb fbc0 	bl	8005c44 <HAL_ETH_ReadData>
  }

  return p;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	200058e8 	.word	0x200058e8
 800a4d4:	20005a2c 	.word	0x20005a2c

0800a4d8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff ffdd 	bl	800a4a4 <low_level_input>
 800a4ea:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00a      	beq.n	800a508 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	4798      	blx	r3
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d002      	beq.n	800a508 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f001 fda6 	bl	800c054 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1ea      	bne.n	800a4e4 <ethernetif_input+0xc>
}
 800a50e:	bf00      	nop
 800a510:	bf00      	nop
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d106      	bne.n	800a534 <ethernetif_init+0x1c>
 800a526:	4b0e      	ldr	r3, [pc, #56]	@ (800a560 <ethernetif_init+0x48>)
 800a528:	f240 126f 	movw	r2, #367	@ 0x16f
 800a52c:	490d      	ldr	r1, [pc, #52]	@ (800a564 <ethernetif_init+0x4c>)
 800a52e:	480e      	ldr	r0, [pc, #56]	@ (800a568 <ethernetif_init+0x50>)
 800a530:	f00a fbfe 	bl	8014d30 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2273      	movs	r2, #115	@ 0x73
 800a538:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2274      	movs	r2, #116	@ 0x74
 800a540:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a09      	ldr	r2, [pc, #36]	@ (800a56c <ethernetif_init+0x54>)
 800a548:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a08      	ldr	r2, [pc, #32]	@ (800a570 <ethernetif_init+0x58>)
 800a54e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7ff fe85 	bl	800a260 <low_level_init>

  return ERR_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	08015b58 	.word	0x08015b58
 800a564:	08015b74 	.word	0x08015b74
 800a568:	08015b84 	.word	0x08015b84
 800a56c:	08012e3d 	.word	0x08012e3d
 800a570:	0800a3a1 	.word	0x0800a3a1

0800a574 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a580:	68f9      	ldr	r1, [r7, #12]
 800a582:	4807      	ldr	r0, [pc, #28]	@ (800a5a0 <pbuf_free_custom+0x2c>)
 800a584:	f000 fecc 	bl	800b320 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a588:	4b06      	ldr	r3, [pc, #24]	@ (800a5a4 <pbuf_free_custom+0x30>)
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d102      	bne.n	800a596 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a590:	4b04      	ldr	r3, [pc, #16]	@ (800a5a4 <pbuf_free_custom+0x30>)
 800a592:	2200      	movs	r2, #0
 800a594:	701a      	strb	r2, [r3, #0]
  }
}
 800a596:	bf00      	nop
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	08018558 	.word	0x08018558
 800a5a4:	200058e8 	.word	0x200058e8

0800a5a8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a5ac:	f7fa f8b4 	bl	8004718 <HAL_GetTick>
 800a5b0:	4603      	mov	r3, r0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	bd80      	pop	{r7, pc}
	...

0800a5b8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08e      	sub	sp, #56	@ 0x38
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]
 800a5c8:	605a      	str	r2, [r3, #4]
 800a5ca:	609a      	str	r2, [r3, #8]
 800a5cc:	60da      	str	r2, [r3, #12]
 800a5ce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a46      	ldr	r2, [pc, #280]	@ (800a6f0 <HAL_ETH_MspInit+0x138>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	f040 8085 	bne.w	800a6e6 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a5dc:	2300      	movs	r3, #0
 800a5de:	623b      	str	r3, [r7, #32]
 800a5e0:	4b44      	ldr	r3, [pc, #272]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a5e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e4:	4a43      	ldr	r2, [pc, #268]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a5e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a5ea:	6313      	str	r3, [r2, #48]	@ 0x30
 800a5ec:	4b41      	ldr	r3, [pc, #260]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a5ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5f4:	623b      	str	r3, [r7, #32]
 800a5f6:	6a3b      	ldr	r3, [r7, #32]
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	61fb      	str	r3, [r7, #28]
 800a5fc:	4b3d      	ldr	r3, [pc, #244]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a5fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a600:	4a3c      	ldr	r2, [pc, #240]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a602:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a606:	6313      	str	r3, [r2, #48]	@ 0x30
 800a608:	4b3a      	ldr	r3, [pc, #232]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a60a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a60c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a610:	61fb      	str	r3, [r7, #28]
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	2300      	movs	r3, #0
 800a616:	61bb      	str	r3, [r7, #24]
 800a618:	4b36      	ldr	r3, [pc, #216]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a61a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a61c:	4a35      	ldr	r2, [pc, #212]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a61e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a622:	6313      	str	r3, [r2, #48]	@ 0x30
 800a624:	4b33      	ldr	r3, [pc, #204]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a62c:	61bb      	str	r3, [r7, #24]
 800a62e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a630:	2300      	movs	r3, #0
 800a632:	617b      	str	r3, [r7, #20]
 800a634:	4b2f      	ldr	r3, [pc, #188]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a638:	4a2e      	ldr	r2, [pc, #184]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a63a:	f043 0304 	orr.w	r3, r3, #4
 800a63e:	6313      	str	r3, [r2, #48]	@ 0x30
 800a640:	4b2c      	ldr	r3, [pc, #176]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a644:	f003 0304 	and.w	r3, r3, #4
 800a648:	617b      	str	r3, [r7, #20]
 800a64a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a64c:	2300      	movs	r3, #0
 800a64e:	613b      	str	r3, [r7, #16]
 800a650:	4b28      	ldr	r3, [pc, #160]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a654:	4a27      	ldr	r2, [pc, #156]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a656:	f043 0301 	orr.w	r3, r3, #1
 800a65a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a65c:	4b25      	ldr	r3, [pc, #148]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a65e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a660:	f003 0301 	and.w	r3, r3, #1
 800a664:	613b      	str	r3, [r7, #16]
 800a666:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a668:	2300      	movs	r3, #0
 800a66a:	60fb      	str	r3, [r7, #12]
 800a66c:	4b21      	ldr	r3, [pc, #132]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a66e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a670:	4a20      	ldr	r2, [pc, #128]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a672:	f043 0302 	orr.w	r3, r3, #2
 800a676:	6313      	str	r3, [r2, #48]	@ 0x30
 800a678:	4b1e      	ldr	r3, [pc, #120]	@ (800a6f4 <HAL_ETH_MspInit+0x13c>)
 800a67a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a67c:	f003 0302 	and.w	r3, r3, #2
 800a680:	60fb      	str	r3, [r7, #12]
 800a682:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a684:	2332      	movs	r3, #50	@ 0x32
 800a686:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a688:	2302      	movs	r3, #2
 800a68a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a68c:	2300      	movs	r3, #0
 800a68e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a690:	2303      	movs	r3, #3
 800a692:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a694:	230b      	movs	r3, #11
 800a696:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a69c:	4619      	mov	r1, r3
 800a69e:	4816      	ldr	r0, [pc, #88]	@ (800a6f8 <HAL_ETH_MspInit+0x140>)
 800a6a0:	f7fc fa1c 	bl	8006adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a6a4:	2386      	movs	r3, #134	@ 0x86
 800a6a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a6b4:	230b      	movs	r3, #11
 800a6b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6bc:	4619      	mov	r1, r3
 800a6be:	480f      	ldr	r0, [pc, #60]	@ (800a6fc <HAL_ETH_MspInit+0x144>)
 800a6c0:	f7fc fa0c 	bl	8006adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800a6c4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800a6c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a6d6:	230b      	movs	r3, #11
 800a6d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a6da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4807      	ldr	r0, [pc, #28]	@ (800a700 <HAL_ETH_MspInit+0x148>)
 800a6e2:	f7fc f9fb 	bl	8006adc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a6e6:	bf00      	nop
 800a6e8:	3738      	adds	r7, #56	@ 0x38
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	40028000 	.word	0x40028000
 800a6f4:	40023800 	.word	0x40023800
 800a6f8:	40020800 	.word	0x40020800
 800a6fc:	40020000 	.word	0x40020000
 800a700:	40020400 	.word	0x40020400

0800a704 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a708:	4802      	ldr	r0, [pc, #8]	@ (800a714 <ETH_PHY_IO_Init+0x10>)
 800a70a:	f7fb fd83 	bl	8006214 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	bd80      	pop	{r7, pc}
 800a714:	20005a2c 	.word	0x20005a2c

0800a718 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a718:	b480      	push	{r7}
 800a71a:	af00      	add	r7, sp, #0
  return 0;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	68ba      	ldr	r2, [r7, #8]
 800a738:	68f9      	ldr	r1, [r7, #12]
 800a73a:	4807      	ldr	r0, [pc, #28]	@ (800a758 <ETH_PHY_IO_ReadReg+0x30>)
 800a73c:	f7fb fbc5 	bl	8005eca <HAL_ETH_ReadPHYRegister>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d002      	beq.n	800a74c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a746:	f04f 33ff 	mov.w	r3, #4294967295
 800a74a:	e000      	b.n	800a74e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20005a2c 	.word	0x20005a2c

0800a75c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	68f9      	ldr	r1, [r7, #12]
 800a76e:	4807      	ldr	r0, [pc, #28]	@ (800a78c <ETH_PHY_IO_WriteReg+0x30>)
 800a770:	f7fb fbf6 	bl	8005f60 <HAL_ETH_WritePHYRegister>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d002      	beq.n	800a780 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a77a:	f04f 33ff 	mov.w	r3, #4294967295
 800a77e:	e000      	b.n	800a782 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	20005a2c 	.word	0x20005a2c

0800a790 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a794:	f7f9 ffc0 	bl	8004718 <HAL_GetTick>
 800a798:	4603      	mov	r3, r0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	bd80      	pop	{r7, pc}
	...

0800a7a0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b0a0      	sub	sp, #128	@ 0x80
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a7a8:	f107 030c 	add.w	r3, r7, #12
 800a7ac:	2264      	movs	r2, #100	@ 0x64
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f00a fb22 	bl	8014dfa <memset>
  int32_t PHYLinkState = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a7be:	2300      	movs	r3, #0
 800a7c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a7c6:	483a      	ldr	r0, [pc, #232]	@ (800a8b0 <ethernet_link_check_state+0x110>)
 800a7c8:	f7f9 feb8 	bl	800453c <LAN8742_GetLinkState>
 800a7cc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a7d4:	089b      	lsrs	r3, r3, #2
 800a7d6:	f003 0301 	and.w	r3, r3, #1
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00c      	beq.n	800a7fa <ethernet_link_check_state+0x5a>
 800a7e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	dc09      	bgt.n	800a7fa <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800a7e6:	4833      	ldr	r0, [pc, #204]	@ (800a8b4 <ethernet_link_check_state+0x114>)
 800a7e8:	f7fb f93f 	bl	8005a6a <HAL_ETH_Stop>
    netif_set_down(netif);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f001 f81b 	bl	800b828 <netif_set_down>
    netif_set_link_down(netif);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f001 f87e 	bl	800b8f4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800a7f8:	e055      	b.n	800a8a6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a800:	f003 0304 	and.w	r3, r3, #4
 800a804:	2b00      	cmp	r3, #0
 800a806:	d14e      	bne.n	800a8a6 <ethernet_link_check_state+0x106>
 800a808:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	dd4b      	ble.n	800a8a6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800a80e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a810:	3b02      	subs	r3, #2
 800a812:	2b03      	cmp	r3, #3
 800a814:	d82a      	bhi.n	800a86c <ethernet_link_check_state+0xcc>
 800a816:	a201      	add	r2, pc, #4	@ (adr r2, 800a81c <ethernet_link_check_state+0x7c>)
 800a818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81c:	0800a82d 	.word	0x0800a82d
 800a820:	0800a83f 	.word	0x0800a83f
 800a824:	0800a84f 	.word	0x0800a84f
 800a828:	0800a85f 	.word	0x0800a85f
      duplex = ETH_FULLDUPLEX_MODE;
 800a82c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a830:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a832:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a836:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a838:	2301      	movs	r3, #1
 800a83a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a83c:	e017      	b.n	800a86e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a83e:	2300      	movs	r3, #0
 800a840:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a842:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a846:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a848:	2301      	movs	r3, #1
 800a84a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a84c:	e00f      	b.n	800a86e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800a84e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a852:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a854:	2300      	movs	r3, #0
 800a856:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a858:	2301      	movs	r3, #1
 800a85a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a85c:	e007      	b.n	800a86e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a85e:	2300      	movs	r3, #0
 800a860:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a862:	2300      	movs	r3, #0
 800a864:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a866:	2301      	movs	r3, #1
 800a868:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a86a:	e000      	b.n	800a86e <ethernet_link_check_state+0xce>
      break;
 800a86c:	bf00      	nop
    if(linkchanged)
 800a86e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a870:	2b00      	cmp	r3, #0
 800a872:	d018      	beq.n	800a8a6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a874:	f107 030c 	add.w	r3, r7, #12
 800a878:	4619      	mov	r1, r3
 800a87a:	480e      	ldr	r0, [pc, #56]	@ (800a8b4 <ethernet_link_check_state+0x114>)
 800a87c:	f7fb fbb9 	bl	8005ff2 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a880:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a882:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800a884:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a886:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a888:	f107 030c 	add.w	r3, r7, #12
 800a88c:	4619      	mov	r1, r3
 800a88e:	4809      	ldr	r0, [pc, #36]	@ (800a8b4 <ethernet_link_check_state+0x114>)
 800a890:	f7fb fca6 	bl	80061e0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800a894:	4807      	ldr	r0, [pc, #28]	@ (800a8b4 <ethernet_link_check_state+0x114>)
 800a896:	f7fb f889 	bl	80059ac <HAL_ETH_Start>
      netif_set_up(netif);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 ff58 	bl	800b750 <netif_set_up>
      netif_set_link_up(netif);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fff3 	bl	800b88c <netif_set_link_up>
}
 800a8a6:	bf00      	nop
 800a8a8:	3780      	adds	r7, #128	@ 0x80
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20005b14 	.word	0x20005b14
 800a8b4:	20005a2c 	.word	0x20005a2c

0800a8b8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af02      	add	r7, sp, #8
 800a8be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a8c0:	4812      	ldr	r0, [pc, #72]	@ (800a90c <HAL_ETH_RxAllocateCallback+0x54>)
 800a8c2:	f000 fcbf 	bl	800b244 <memp_malloc_pool>
 800a8c6:	60f8      	str	r0, [r7, #12]
  if (p)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d014      	beq.n	800a8f8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f103 0220 	add.w	r2, r3, #32
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	4a0d      	ldr	r2, [pc, #52]	@ (800a910 <HAL_ETH_RxAllocateCallback+0x58>)
 800a8dc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a8e6:	9201      	str	r2, [sp, #4]
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2241      	movs	r2, #65	@ 0x41
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	f001 f9f5 	bl	800bce0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a8f6:	e005      	b.n	800a904 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a8f8:	4b06      	ldr	r3, [pc, #24]	@ (800a914 <HAL_ETH_RxAllocateCallback+0x5c>)
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	601a      	str	r2, [r3, #0]
}
 800a904:	bf00      	nop
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	08018558 	.word	0x08018558
 800a910:	0800a575 	.word	0x0800a575
 800a914:	200058e8 	.word	0x200058e8

0800a918 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a918:	b480      	push	{r7}
 800a91a:	b089      	sub	sp, #36	@ 0x24
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	607a      	str	r2, [r7, #4]
 800a924:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a92e:	2300      	movs	r3, #0
 800a930:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	3b20      	subs	r3, #32
 800a936:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	2200      	movs	r2, #0
 800a93c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	2200      	movs	r2, #0
 800a942:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	887a      	ldrh	r2, [r7, #2]
 800a948:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d103      	bne.n	800a95a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	69fa      	ldr	r2, [r7, #28]
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	e003      	b.n	800a962 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	69fa      	ldr	r2, [r7, #28]
 800a960:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	69fa      	ldr	r2, [r7, #28]
 800a966:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	61fb      	str	r3, [r7, #28]
 800a96e:	e009      	b.n	800a984 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	891a      	ldrh	r2, [r3, #8]
 800a974:	887b      	ldrh	r3, [r7, #2]
 800a976:	4413      	add	r3, r2
 800a978:	b29a      	uxth	r2, r3
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	61fb      	str	r3, [r7, #28]
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1f2      	bne.n	800a970 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800a98a:	bf00      	nop
 800a98c:	bf00      	nop
 800a98e:	3724      	adds	r7, #36	@ 0x24
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	4603      	mov	r3, r0
 800a9a0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a9a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a9a6:	021b      	lsls	r3, r3, #8
 800a9a8:	b21a      	sxth	r2, r3
 800a9aa:	88fb      	ldrh	r3, [r7, #6]
 800a9ac:	0a1b      	lsrs	r3, r3, #8
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	b21b      	sxth	r3, r3
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	b21b      	sxth	r3, r3
 800a9b6:	b29b      	uxth	r3, r3
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	061a      	lsls	r2, r3, #24
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	021b      	lsls	r3, r3, #8
 800a9d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a9d8:	431a      	orrs	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	0a1b      	lsrs	r3, r3, #8
 800a9de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a9e2:	431a      	orrs	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	0e1b      	lsrs	r3, r3, #24
 800a9e8:	4313      	orrs	r3, r2
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b082      	sub	sp, #8
 800a9fa:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800aa00:	f000 f8d4 	bl	800abac <mem_init>
  memp_init();
 800aa04:	f000 fbda 	bl	800b1bc <memp_init>
  pbuf_init();
  netif_init();
 800aa08:	f000 fcd8 	bl	800b3bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800aa0c:	f007 f8f4 	bl	8011bf8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800aa10:	f001 fe50 	bl	800c6b4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800aa14:	f007 f866 	bl	8011ae4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800aa18:	bf00      	nop
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	4603      	mov	r3, r0
 800aa28:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800aa2a:	4b05      	ldr	r3, [pc, #20]	@ (800aa40 <ptr_to_mem+0x20>)
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	88fb      	ldrh	r3, [r7, #6]
 800aa30:	4413      	add	r3, r2
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	20008360 	.word	0x20008360

0800aa44 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800aa4c:	4b05      	ldr	r3, [pc, #20]	@ (800aa64 <mem_to_ptr+0x20>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	b29b      	uxth	r3, r3
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	20008360 	.word	0x20008360

0800aa68 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800aa68:	b590      	push	{r4, r7, lr}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800aa70:	4b45      	ldr	r3, [pc, #276]	@ (800ab88 <plug_holes+0x120>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d206      	bcs.n	800aa88 <plug_holes+0x20>
 800aa7a:	4b44      	ldr	r3, [pc, #272]	@ (800ab8c <plug_holes+0x124>)
 800aa7c:	f240 12df 	movw	r2, #479	@ 0x1df
 800aa80:	4943      	ldr	r1, [pc, #268]	@ (800ab90 <plug_holes+0x128>)
 800aa82:	4844      	ldr	r0, [pc, #272]	@ (800ab94 <plug_holes+0x12c>)
 800aa84:	f00a f954 	bl	8014d30 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800aa88:	4b43      	ldr	r3, [pc, #268]	@ (800ab98 <plug_holes+0x130>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d306      	bcc.n	800aaa0 <plug_holes+0x38>
 800aa92:	4b3e      	ldr	r3, [pc, #248]	@ (800ab8c <plug_holes+0x124>)
 800aa94:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800aa98:	4940      	ldr	r1, [pc, #256]	@ (800ab9c <plug_holes+0x134>)
 800aa9a:	483e      	ldr	r0, [pc, #248]	@ (800ab94 <plug_holes+0x12c>)
 800aa9c:	f00a f948 	bl	8014d30 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	791b      	ldrb	r3, [r3, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d006      	beq.n	800aab6 <plug_holes+0x4e>
 800aaa8:	4b38      	ldr	r3, [pc, #224]	@ (800ab8c <plug_holes+0x124>)
 800aaaa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800aaae:	493c      	ldr	r1, [pc, #240]	@ (800aba0 <plug_holes+0x138>)
 800aab0:	4838      	ldr	r0, [pc, #224]	@ (800ab94 <plug_holes+0x12c>)
 800aab2:	f00a f93d 	bl	8014d30 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	881b      	ldrh	r3, [r3, #0]
 800aaba:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800aabe:	d906      	bls.n	800aace <plug_holes+0x66>
 800aac0:	4b32      	ldr	r3, [pc, #200]	@ (800ab8c <plug_holes+0x124>)
 800aac2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800aac6:	4937      	ldr	r1, [pc, #220]	@ (800aba4 <plug_holes+0x13c>)
 800aac8:	4832      	ldr	r0, [pc, #200]	@ (800ab94 <plug_holes+0x12c>)
 800aaca:	f00a f931 	bl	8014d30 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7ff ffa4 	bl	800aa20 <ptr_to_mem>
 800aad8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d024      	beq.n	800ab2c <plug_holes+0xc4>
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	791b      	ldrb	r3, [r3, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d120      	bne.n	800ab2c <plug_holes+0xc4>
 800aaea:	4b2b      	ldr	r3, [pc, #172]	@ (800ab98 <plug_holes+0x130>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d01b      	beq.n	800ab2c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800aaf4:	4b2c      	ldr	r3, [pc, #176]	@ (800aba8 <plug_holes+0x140>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d102      	bne.n	800ab04 <plug_holes+0x9c>
      lfree = mem;
 800aafe:	4a2a      	ldr	r2, [pc, #168]	@ (800aba8 <plug_holes+0x140>)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	881a      	ldrh	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	881b      	ldrh	r3, [r3, #0]
 800ab10:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ab14:	d00a      	beq.n	800ab2c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	881b      	ldrh	r3, [r3, #0]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7ff ff80 	bl	800aa20 <ptr_to_mem>
 800ab20:	4604      	mov	r4, r0
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f7ff ff8e 	bl	800aa44 <mem_to_ptr>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	885b      	ldrh	r3, [r3, #2]
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7ff ff75 	bl	800aa20 <ptr_to_mem>
 800ab36:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d01f      	beq.n	800ab80 <plug_holes+0x118>
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	791b      	ldrb	r3, [r3, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d11b      	bne.n	800ab80 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ab48:	4b17      	ldr	r3, [pc, #92]	@ (800aba8 <plug_holes+0x140>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d102      	bne.n	800ab58 <plug_holes+0xf0>
      lfree = pmem;
 800ab52:	4a15      	ldr	r2, [pc, #84]	@ (800aba8 <plug_holes+0x140>)
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	881a      	ldrh	r2, [r3, #0]
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ab68:	d00a      	beq.n	800ab80 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	881b      	ldrh	r3, [r3, #0]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7ff ff56 	bl	800aa20 <ptr_to_mem>
 800ab74:	4604      	mov	r4, r0
 800ab76:	68b8      	ldr	r0, [r7, #8]
 800ab78:	f7ff ff64 	bl	800aa44 <mem_to_ptr>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ab80:	bf00      	nop
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd90      	pop	{r4, r7, pc}
 800ab88:	20008360 	.word	0x20008360
 800ab8c:	08015bac 	.word	0x08015bac
 800ab90:	08015bdc 	.word	0x08015bdc
 800ab94:	08015bf4 	.word	0x08015bf4
 800ab98:	20008364 	.word	0x20008364
 800ab9c:	08015c1c 	.word	0x08015c1c
 800aba0:	08015c38 	.word	0x08015c38
 800aba4:	08015c54 	.word	0x08015c54
 800aba8:	20008368 	.word	0x20008368

0800abac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800abb2:	4b18      	ldr	r3, [pc, #96]	@ (800ac14 <mem_init+0x68>)
 800abb4:	3303      	adds	r3, #3
 800abb6:	f023 0303 	bic.w	r3, r3, #3
 800abba:	461a      	mov	r2, r3
 800abbc:	4b16      	ldr	r3, [pc, #88]	@ (800ac18 <mem_init+0x6c>)
 800abbe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800abc0:	4b15      	ldr	r3, [pc, #84]	@ (800ac18 <mem_init+0x6c>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800abcc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800abda:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800abde:	f7ff ff1f 	bl	800aa20 <ptr_to_mem>
 800abe2:	4603      	mov	r3, r0
 800abe4:	4a0d      	ldr	r2, [pc, #52]	@ (800ac1c <mem_init+0x70>)
 800abe6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800abe8:	4b0c      	ldr	r3, [pc, #48]	@ (800ac1c <mem_init+0x70>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2201      	movs	r2, #1
 800abee:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800abf0:	4b0a      	ldr	r3, [pc, #40]	@ (800ac1c <mem_init+0x70>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800abf8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800abfa:	4b08      	ldr	r3, [pc, #32]	@ (800ac1c <mem_init+0x70>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800ac02:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ac04:	4b04      	ldr	r3, [pc, #16]	@ (800ac18 <mem_init+0x6c>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a05      	ldr	r2, [pc, #20]	@ (800ac20 <mem_init+0x74>)
 800ac0a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20005b4c 	.word	0x20005b4c
 800ac18:	20008360 	.word	0x20008360
 800ac1c:	20008364 	.word	0x20008364
 800ac20:	20008368 	.word	0x20008368

0800ac24 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7ff ff09 	bl	800aa44 <mem_to_ptr>
 800ac32:	4603      	mov	r3, r0
 800ac34:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	881b      	ldrh	r3, [r3, #0]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7ff fef0 	bl	800aa20 <ptr_to_mem>
 800ac40:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	885b      	ldrh	r3, [r3, #2]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7ff feea 	bl	800aa20 <ptr_to_mem>
 800ac4c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	881b      	ldrh	r3, [r3, #0]
 800ac52:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ac56:	d818      	bhi.n	800ac8a <mem_link_valid+0x66>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	885b      	ldrh	r3, [r3, #2]
 800ac5c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ac60:	d813      	bhi.n	800ac8a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ac66:	8afa      	ldrh	r2, [r7, #22]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d004      	beq.n	800ac76 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	881b      	ldrh	r3, [r3, #0]
 800ac70:	8afa      	ldrh	r2, [r7, #22]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d109      	bne.n	800ac8a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ac76:	4b08      	ldr	r3, [pc, #32]	@ (800ac98 <mem_link_valid+0x74>)
 800ac78:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ac7a:	693a      	ldr	r2, [r7, #16]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d006      	beq.n	800ac8e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	885b      	ldrh	r3, [r3, #2]
 800ac84:	8afa      	ldrh	r2, [r7, #22]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d001      	beq.n	800ac8e <mem_link_valid+0x6a>
    return 0;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	e000      	b.n	800ac90 <mem_link_valid+0x6c>
  }
  return 1;
 800ac8e:	2301      	movs	r3, #1
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3718      	adds	r7, #24
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	20008364 	.word	0x20008364

0800ac9c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d04c      	beq.n	800ad44 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f003 0303 	and.w	r3, r3, #3
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d007      	beq.n	800acc4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800acb4:	4b25      	ldr	r3, [pc, #148]	@ (800ad4c <mem_free+0xb0>)
 800acb6:	f240 2273 	movw	r2, #627	@ 0x273
 800acba:	4925      	ldr	r1, [pc, #148]	@ (800ad50 <mem_free+0xb4>)
 800acbc:	4825      	ldr	r0, [pc, #148]	@ (800ad54 <mem_free+0xb8>)
 800acbe:	f00a f837 	bl	8014d30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800acc2:	e040      	b.n	800ad46 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	3b08      	subs	r3, #8
 800acc8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800acca:	4b23      	ldr	r3, [pc, #140]	@ (800ad58 <mem_free+0xbc>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d306      	bcc.n	800ace2 <mem_free+0x46>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f103 020c 	add.w	r2, r3, #12
 800acda:	4b20      	ldr	r3, [pc, #128]	@ (800ad5c <mem_free+0xc0>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d907      	bls.n	800acf2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ace2:	4b1a      	ldr	r3, [pc, #104]	@ (800ad4c <mem_free+0xb0>)
 800ace4:	f240 227f 	movw	r2, #639	@ 0x27f
 800ace8:	491d      	ldr	r1, [pc, #116]	@ (800ad60 <mem_free+0xc4>)
 800acea:	481a      	ldr	r0, [pc, #104]	@ (800ad54 <mem_free+0xb8>)
 800acec:	f00a f820 	bl	8014d30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800acf0:	e029      	b.n	800ad46 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	791b      	ldrb	r3, [r3, #4]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d107      	bne.n	800ad0a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800acfa:	4b14      	ldr	r3, [pc, #80]	@ (800ad4c <mem_free+0xb0>)
 800acfc:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800ad00:	4918      	ldr	r1, [pc, #96]	@ (800ad64 <mem_free+0xc8>)
 800ad02:	4814      	ldr	r0, [pc, #80]	@ (800ad54 <mem_free+0xb8>)
 800ad04:	f00a f814 	bl	8014d30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ad08:	e01d      	b.n	800ad46 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	f7ff ff8a 	bl	800ac24 <mem_link_valid>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d107      	bne.n	800ad26 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ad16:	4b0d      	ldr	r3, [pc, #52]	@ (800ad4c <mem_free+0xb0>)
 800ad18:	f240 2295 	movw	r2, #661	@ 0x295
 800ad1c:	4912      	ldr	r1, [pc, #72]	@ (800ad68 <mem_free+0xcc>)
 800ad1e:	480d      	ldr	r0, [pc, #52]	@ (800ad54 <mem_free+0xb8>)
 800ad20:	f00a f806 	bl	8014d30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ad24:	e00f      	b.n	800ad46 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ad2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ad6c <mem_free+0xd0>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d202      	bcs.n	800ad3c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ad36:	4a0d      	ldr	r2, [pc, #52]	@ (800ad6c <mem_free+0xd0>)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f7ff fe93 	bl	800aa68 <plug_holes>
 800ad42:	e000      	b.n	800ad46 <mem_free+0xaa>
    return;
 800ad44:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	08015bac 	.word	0x08015bac
 800ad50:	08015c80 	.word	0x08015c80
 800ad54:	08015bf4 	.word	0x08015bf4
 800ad58:	20008360 	.word	0x20008360
 800ad5c:	20008364 	.word	0x20008364
 800ad60:	08015ca4 	.word	0x08015ca4
 800ad64:	08015cc0 	.word	0x08015cc0
 800ad68:	08015ce8 	.word	0x08015ce8
 800ad6c:	20008368 	.word	0x20008368

0800ad70 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b088      	sub	sp, #32
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ad7c:	887b      	ldrh	r3, [r7, #2]
 800ad7e:	3303      	adds	r3, #3
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	f023 0303 	bic.w	r3, r3, #3
 800ad86:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ad88:	8bfb      	ldrh	r3, [r7, #30]
 800ad8a:	2b0b      	cmp	r3, #11
 800ad8c:	d801      	bhi.n	800ad92 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ad8e:	230c      	movs	r3, #12
 800ad90:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ad92:	8bfb      	ldrh	r3, [r7, #30]
 800ad94:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ad98:	d803      	bhi.n	800ada2 <mem_trim+0x32>
 800ad9a:	8bfa      	ldrh	r2, [r7, #30]
 800ad9c:	887b      	ldrh	r3, [r7, #2]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d201      	bcs.n	800ada6 <mem_trim+0x36>
    return NULL;
 800ada2:	2300      	movs	r3, #0
 800ada4:	e0cc      	b.n	800af40 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ada6:	4b68      	ldr	r3, [pc, #416]	@ (800af48 <mem_trim+0x1d8>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	429a      	cmp	r2, r3
 800adae:	d304      	bcc.n	800adba <mem_trim+0x4a>
 800adb0:	4b66      	ldr	r3, [pc, #408]	@ (800af4c <mem_trim+0x1dc>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d306      	bcc.n	800adc8 <mem_trim+0x58>
 800adba:	4b65      	ldr	r3, [pc, #404]	@ (800af50 <mem_trim+0x1e0>)
 800adbc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800adc0:	4964      	ldr	r1, [pc, #400]	@ (800af54 <mem_trim+0x1e4>)
 800adc2:	4865      	ldr	r0, [pc, #404]	@ (800af58 <mem_trim+0x1e8>)
 800adc4:	f009 ffb4 	bl	8014d30 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800adc8:	4b5f      	ldr	r3, [pc, #380]	@ (800af48 <mem_trim+0x1d8>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	429a      	cmp	r2, r3
 800add0:	d304      	bcc.n	800addc <mem_trim+0x6c>
 800add2:	4b5e      	ldr	r3, [pc, #376]	@ (800af4c <mem_trim+0x1dc>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	429a      	cmp	r2, r3
 800adda:	d301      	bcc.n	800ade0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	e0af      	b.n	800af40 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	3b08      	subs	r3, #8
 800ade4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ade6:	69b8      	ldr	r0, [r7, #24]
 800ade8:	f7ff fe2c 	bl	800aa44 <mem_to_ptr>
 800adec:	4603      	mov	r3, r0
 800adee:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	881a      	ldrh	r2, [r3, #0]
 800adf4:	8afb      	ldrh	r3, [r7, #22]
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	3b08      	subs	r3, #8
 800adfc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800adfe:	8bfa      	ldrh	r2, [r7, #30]
 800ae00:	8abb      	ldrh	r3, [r7, #20]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d906      	bls.n	800ae14 <mem_trim+0xa4>
 800ae06:	4b52      	ldr	r3, [pc, #328]	@ (800af50 <mem_trim+0x1e0>)
 800ae08:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800ae0c:	4953      	ldr	r1, [pc, #332]	@ (800af5c <mem_trim+0x1ec>)
 800ae0e:	4852      	ldr	r0, [pc, #328]	@ (800af58 <mem_trim+0x1e8>)
 800ae10:	f009 ff8e 	bl	8014d30 <iprintf>
  if (newsize > size) {
 800ae14:	8bfa      	ldrh	r2, [r7, #30]
 800ae16:	8abb      	ldrh	r3, [r7, #20]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d901      	bls.n	800ae20 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	e08f      	b.n	800af40 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800ae20:	8bfa      	ldrh	r2, [r7, #30]
 800ae22:	8abb      	ldrh	r3, [r7, #20]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d101      	bne.n	800ae2c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	e089      	b.n	800af40 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7ff fdf5 	bl	800aa20 <ptr_to_mem>
 800ae36:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	791b      	ldrb	r3, [r3, #4]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d13f      	bne.n	800aec0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	881b      	ldrh	r3, [r3, #0]
 800ae44:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ae48:	d106      	bne.n	800ae58 <mem_trim+0xe8>
 800ae4a:	4b41      	ldr	r3, [pc, #260]	@ (800af50 <mem_trim+0x1e0>)
 800ae4c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800ae50:	4943      	ldr	r1, [pc, #268]	@ (800af60 <mem_trim+0x1f0>)
 800ae52:	4841      	ldr	r0, [pc, #260]	@ (800af58 <mem_trim+0x1e8>)
 800ae54:	f009 ff6c 	bl	8014d30 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	881b      	ldrh	r3, [r3, #0]
 800ae5c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ae5e:	8afa      	ldrh	r2, [r7, #22]
 800ae60:	8bfb      	ldrh	r3, [r7, #30]
 800ae62:	4413      	add	r3, r2
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	3308      	adds	r3, #8
 800ae68:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ae6a:	4b3e      	ldr	r3, [pc, #248]	@ (800af64 <mem_trim+0x1f4>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d106      	bne.n	800ae82 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800ae74:	89fb      	ldrh	r3, [r7, #14]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7ff fdd2 	bl	800aa20 <ptr_to_mem>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	4a39      	ldr	r2, [pc, #228]	@ (800af64 <mem_trim+0x1f4>)
 800ae80:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ae82:	89fb      	ldrh	r3, [r7, #14]
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff fdcb 	bl	800aa20 <ptr_to_mem>
 800ae8a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	89ba      	ldrh	r2, [r7, #12]
 800ae96:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	8afa      	ldrh	r2, [r7, #22]
 800ae9c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	89fa      	ldrh	r2, [r7, #14]
 800aea2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800aeac:	d047      	beq.n	800af3e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7ff fdb4 	bl	800aa20 <ptr_to_mem>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	89fb      	ldrh	r3, [r7, #14]
 800aebc:	8053      	strh	r3, [r2, #2]
 800aebe:	e03e      	b.n	800af3e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800aec0:	8bfb      	ldrh	r3, [r7, #30]
 800aec2:	f103 0214 	add.w	r2, r3, #20
 800aec6:	8abb      	ldrh	r3, [r7, #20]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d838      	bhi.n	800af3e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800aecc:	8afa      	ldrh	r2, [r7, #22]
 800aece:	8bfb      	ldrh	r3, [r7, #30]
 800aed0:	4413      	add	r3, r2
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	3308      	adds	r3, #8
 800aed6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	881b      	ldrh	r3, [r3, #0]
 800aedc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800aee0:	d106      	bne.n	800aef0 <mem_trim+0x180>
 800aee2:	4b1b      	ldr	r3, [pc, #108]	@ (800af50 <mem_trim+0x1e0>)
 800aee4:	f240 3216 	movw	r2, #790	@ 0x316
 800aee8:	491d      	ldr	r1, [pc, #116]	@ (800af60 <mem_trim+0x1f0>)
 800aeea:	481b      	ldr	r0, [pc, #108]	@ (800af58 <mem_trim+0x1e8>)
 800aeec:	f009 ff20 	bl	8014d30 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800aef0:	89fb      	ldrh	r3, [r7, #14]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7ff fd94 	bl	800aa20 <ptr_to_mem>
 800aef8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800aefa:	4b1a      	ldr	r3, [pc, #104]	@ (800af64 <mem_trim+0x1f4>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	429a      	cmp	r2, r3
 800af02:	d202      	bcs.n	800af0a <mem_trim+0x19a>
      lfree = mem2;
 800af04:	4a17      	ldr	r2, [pc, #92]	@ (800af64 <mem_trim+0x1f4>)
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	2200      	movs	r2, #0
 800af0e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	881a      	ldrh	r2, [r3, #0]
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	8afa      	ldrh	r2, [r7, #22]
 800af1c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	89fa      	ldrh	r2, [r7, #14]
 800af22:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800af2c:	d007      	beq.n	800af3e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	881b      	ldrh	r3, [r3, #0]
 800af32:	4618      	mov	r0, r3
 800af34:	f7ff fd74 	bl	800aa20 <ptr_to_mem>
 800af38:	4602      	mov	r2, r0
 800af3a:	89fb      	ldrh	r3, [r7, #14]
 800af3c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800af3e:	687b      	ldr	r3, [r7, #4]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3720      	adds	r7, #32
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	20008360 	.word	0x20008360
 800af4c:	20008364 	.word	0x20008364
 800af50:	08015bac 	.word	0x08015bac
 800af54:	08015d1c 	.word	0x08015d1c
 800af58:	08015bf4 	.word	0x08015bf4
 800af5c:	08015d34 	.word	0x08015d34
 800af60:	08015d54 	.word	0x08015d54
 800af64:	20008368 	.word	0x20008368

0800af68 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b088      	sub	sp, #32
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800af72:	88fb      	ldrh	r3, [r7, #6]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d101      	bne.n	800af7c <mem_malloc+0x14>
    return NULL;
 800af78:	2300      	movs	r3, #0
 800af7a:	e0d9      	b.n	800b130 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800af7c:	88fb      	ldrh	r3, [r7, #6]
 800af7e:	3303      	adds	r3, #3
 800af80:	b29b      	uxth	r3, r3
 800af82:	f023 0303 	bic.w	r3, r3, #3
 800af86:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800af88:	8bbb      	ldrh	r3, [r7, #28]
 800af8a:	2b0b      	cmp	r3, #11
 800af8c:	d801      	bhi.n	800af92 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800af8e:	230c      	movs	r3, #12
 800af90:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800af92:	8bbb      	ldrh	r3, [r7, #28]
 800af94:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800af98:	d803      	bhi.n	800afa2 <mem_malloc+0x3a>
 800af9a:	8bba      	ldrh	r2, [r7, #28]
 800af9c:	88fb      	ldrh	r3, [r7, #6]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d201      	bcs.n	800afa6 <mem_malloc+0x3e>
    return NULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	e0c4      	b.n	800b130 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800afa6:	4b64      	ldr	r3, [pc, #400]	@ (800b138 <mem_malloc+0x1d0>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4618      	mov	r0, r3
 800afac:	f7ff fd4a 	bl	800aa44 <mem_to_ptr>
 800afb0:	4603      	mov	r3, r0
 800afb2:	83fb      	strh	r3, [r7, #30]
 800afb4:	e0b4      	b.n	800b120 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800afb6:	8bfb      	ldrh	r3, [r7, #30]
 800afb8:	4618      	mov	r0, r3
 800afba:	f7ff fd31 	bl	800aa20 <ptr_to_mem>
 800afbe:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	791b      	ldrb	r3, [r3, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f040 80a4 	bne.w	800b112 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	8bfb      	ldrh	r3, [r7, #30]
 800afd2:	1ad3      	subs	r3, r2, r3
 800afd4:	f1a3 0208 	sub.w	r2, r3, #8
 800afd8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800afda:	429a      	cmp	r2, r3
 800afdc:	f0c0 8099 	bcc.w	800b112 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	881b      	ldrh	r3, [r3, #0]
 800afe4:	461a      	mov	r2, r3
 800afe6:	8bfb      	ldrh	r3, [r7, #30]
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	f1a3 0208 	sub.w	r2, r3, #8
 800afee:	8bbb      	ldrh	r3, [r7, #28]
 800aff0:	3314      	adds	r3, #20
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d333      	bcc.n	800b05e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800aff6:	8bfa      	ldrh	r2, [r7, #30]
 800aff8:	8bbb      	ldrh	r3, [r7, #28]
 800affa:	4413      	add	r3, r2
 800affc:	b29b      	uxth	r3, r3
 800affe:	3308      	adds	r3, #8
 800b000:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b002:	8a7b      	ldrh	r3, [r7, #18]
 800b004:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b008:	d106      	bne.n	800b018 <mem_malloc+0xb0>
 800b00a:	4b4c      	ldr	r3, [pc, #304]	@ (800b13c <mem_malloc+0x1d4>)
 800b00c:	f240 3287 	movw	r2, #903	@ 0x387
 800b010:	494b      	ldr	r1, [pc, #300]	@ (800b140 <mem_malloc+0x1d8>)
 800b012:	484c      	ldr	r0, [pc, #304]	@ (800b144 <mem_malloc+0x1dc>)
 800b014:	f009 fe8c 	bl	8014d30 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b018:	8a7b      	ldrh	r3, [r7, #18]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7ff fd00 	bl	800aa20 <ptr_to_mem>
 800b020:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	881a      	ldrh	r2, [r3, #0]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	8bfa      	ldrh	r2, [r7, #30]
 800b034:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	8a7a      	ldrh	r2, [r7, #18]
 800b03a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	2201      	movs	r2, #1
 800b040:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	881b      	ldrh	r3, [r3, #0]
 800b046:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b04a:	d00b      	beq.n	800b064 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	881b      	ldrh	r3, [r3, #0]
 800b050:	4618      	mov	r0, r3
 800b052:	f7ff fce5 	bl	800aa20 <ptr_to_mem>
 800b056:	4602      	mov	r2, r0
 800b058:	8a7b      	ldrh	r3, [r7, #18]
 800b05a:	8053      	strh	r3, [r2, #2]
 800b05c:	e002      	b.n	800b064 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	2201      	movs	r2, #1
 800b062:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b064:	4b34      	ldr	r3, [pc, #208]	@ (800b138 <mem_malloc+0x1d0>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d127      	bne.n	800b0be <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b06e:	4b32      	ldr	r3, [pc, #200]	@ (800b138 <mem_malloc+0x1d0>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b074:	e005      	b.n	800b082 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	881b      	ldrh	r3, [r3, #0]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff fcd0 	bl	800aa20 <ptr_to_mem>
 800b080:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	791b      	ldrb	r3, [r3, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d004      	beq.n	800b094 <mem_malloc+0x12c>
 800b08a:	4b2f      	ldr	r3, [pc, #188]	@ (800b148 <mem_malloc+0x1e0>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	69ba      	ldr	r2, [r7, #24]
 800b090:	429a      	cmp	r2, r3
 800b092:	d1f0      	bne.n	800b076 <mem_malloc+0x10e>
          }
          lfree = cur;
 800b094:	4a28      	ldr	r2, [pc, #160]	@ (800b138 <mem_malloc+0x1d0>)
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b09a:	4b27      	ldr	r3, [pc, #156]	@ (800b138 <mem_malloc+0x1d0>)
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	4b2a      	ldr	r3, [pc, #168]	@ (800b148 <mem_malloc+0x1e0>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d00b      	beq.n	800b0be <mem_malloc+0x156>
 800b0a6:	4b24      	ldr	r3, [pc, #144]	@ (800b138 <mem_malloc+0x1d0>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	791b      	ldrb	r3, [r3, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d006      	beq.n	800b0be <mem_malloc+0x156>
 800b0b0:	4b22      	ldr	r3, [pc, #136]	@ (800b13c <mem_malloc+0x1d4>)
 800b0b2:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800b0b6:	4925      	ldr	r1, [pc, #148]	@ (800b14c <mem_malloc+0x1e4>)
 800b0b8:	4822      	ldr	r0, [pc, #136]	@ (800b144 <mem_malloc+0x1dc>)
 800b0ba:	f009 fe39 	bl	8014d30 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b0be:	8bba      	ldrh	r2, [r7, #28]
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	3308      	adds	r3, #8
 800b0c6:	4a20      	ldr	r2, [pc, #128]	@ (800b148 <mem_malloc+0x1e0>)
 800b0c8:	6812      	ldr	r2, [r2, #0]
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d906      	bls.n	800b0dc <mem_malloc+0x174>
 800b0ce:	4b1b      	ldr	r3, [pc, #108]	@ (800b13c <mem_malloc+0x1d4>)
 800b0d0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800b0d4:	491e      	ldr	r1, [pc, #120]	@ (800b150 <mem_malloc+0x1e8>)
 800b0d6:	481b      	ldr	r0, [pc, #108]	@ (800b144 <mem_malloc+0x1dc>)
 800b0d8:	f009 fe2a 	bl	8014d30 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f003 0303 	and.w	r3, r3, #3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d006      	beq.n	800b0f4 <mem_malloc+0x18c>
 800b0e6:	4b15      	ldr	r3, [pc, #84]	@ (800b13c <mem_malloc+0x1d4>)
 800b0e8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800b0ec:	4919      	ldr	r1, [pc, #100]	@ (800b154 <mem_malloc+0x1ec>)
 800b0ee:	4815      	ldr	r0, [pc, #84]	@ (800b144 <mem_malloc+0x1dc>)
 800b0f0:	f009 fe1e 	bl	8014d30 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	f003 0303 	and.w	r3, r3, #3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d006      	beq.n	800b10c <mem_malloc+0x1a4>
 800b0fe:	4b0f      	ldr	r3, [pc, #60]	@ (800b13c <mem_malloc+0x1d4>)
 800b100:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800b104:	4914      	ldr	r1, [pc, #80]	@ (800b158 <mem_malloc+0x1f0>)
 800b106:	480f      	ldr	r0, [pc, #60]	@ (800b144 <mem_malloc+0x1dc>)
 800b108:	f009 fe12 	bl	8014d30 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	3308      	adds	r3, #8
 800b110:	e00e      	b.n	800b130 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b112:	8bfb      	ldrh	r3, [r7, #30]
 800b114:	4618      	mov	r0, r3
 800b116:	f7ff fc83 	bl	800aa20 <ptr_to_mem>
 800b11a:	4603      	mov	r3, r0
 800b11c:	881b      	ldrh	r3, [r3, #0]
 800b11e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b120:	8bfa      	ldrh	r2, [r7, #30]
 800b122:	8bbb      	ldrh	r3, [r7, #28]
 800b124:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800b128:	429a      	cmp	r2, r3
 800b12a:	f4ff af44 	bcc.w	800afb6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	3720      	adds	r7, #32
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	20008368 	.word	0x20008368
 800b13c:	08015bac 	.word	0x08015bac
 800b140:	08015d54 	.word	0x08015d54
 800b144:	08015bf4 	.word	0x08015bf4
 800b148:	20008364 	.word	0x20008364
 800b14c:	08015d68 	.word	0x08015d68
 800b150:	08015d84 	.word	0x08015d84
 800b154:	08015db4 	.word	0x08015db4
 800b158:	08015de4 	.word	0x08015de4

0800b15c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	2200      	movs	r2, #0
 800b16a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	3303      	adds	r3, #3
 800b172:	f023 0303 	bic.w	r3, r3, #3
 800b176:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b178:	2300      	movs	r3, #0
 800b17a:	60fb      	str	r3, [r7, #12]
 800b17c:	e011      	b.n	800b1a2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	68ba      	ldr	r2, [r7, #8]
 800b18e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	881b      	ldrh	r3, [r3, #0]
 800b194:	461a      	mov	r2, r3
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	4413      	add	r3, r2
 800b19a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	60fb      	str	r3, [r7, #12]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	885b      	ldrh	r3, [r3, #2]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	dbe7      	blt.n	800b17e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b1ae:	bf00      	nop
 800b1b0:	bf00      	nop
 800b1b2:	3714      	adds	r7, #20
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	80fb      	strh	r3, [r7, #6]
 800b1c6:	e009      	b.n	800b1dc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b1c8:	88fb      	ldrh	r3, [r7, #6]
 800b1ca:	4a08      	ldr	r2, [pc, #32]	@ (800b1ec <memp_init+0x30>)
 800b1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7ff ffc3 	bl	800b15c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b1d6:	88fb      	ldrh	r3, [r7, #6]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	80fb      	strh	r3, [r7, #6]
 800b1dc:	88fb      	ldrh	r3, [r7, #6]
 800b1de:	2b08      	cmp	r3, #8
 800b1e0:	d9f2      	bls.n	800b1c8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b1e2:	bf00      	nop
 800b1e4:	bf00      	nop
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	080185d0 	.word	0x080185d0

0800b1f0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d012      	beq.n	800b22c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	6812      	ldr	r2, [r2, #0]
 800b20e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f003 0303 	and.w	r3, r3, #3
 800b216:	2b00      	cmp	r3, #0
 800b218:	d006      	beq.n	800b228 <do_memp_malloc_pool+0x38>
 800b21a:	4b07      	ldr	r3, [pc, #28]	@ (800b238 <do_memp_malloc_pool+0x48>)
 800b21c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800b220:	4906      	ldr	r1, [pc, #24]	@ (800b23c <do_memp_malloc_pool+0x4c>)
 800b222:	4807      	ldr	r0, [pc, #28]	@ (800b240 <do_memp_malloc_pool+0x50>)
 800b224:	f009 fd84 	bl	8014d30 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	e000      	b.n	800b22e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	08015e08 	.word	0x08015e08
 800b23c:	08015e38 	.word	0x08015e38
 800b240:	08015e5c 	.word	0x08015e5c

0800b244 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d106      	bne.n	800b260 <memp_malloc_pool+0x1c>
 800b252:	4b0a      	ldr	r3, [pc, #40]	@ (800b27c <memp_malloc_pool+0x38>)
 800b254:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800b258:	4909      	ldr	r1, [pc, #36]	@ (800b280 <memp_malloc_pool+0x3c>)
 800b25a:	480a      	ldr	r0, [pc, #40]	@ (800b284 <memp_malloc_pool+0x40>)
 800b25c:	f009 fd68 	bl	8014d30 <iprintf>
  if (desc == NULL) {
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d101      	bne.n	800b26a <memp_malloc_pool+0x26>
    return NULL;
 800b266:	2300      	movs	r3, #0
 800b268:	e003      	b.n	800b272 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f7ff ffc0 	bl	800b1f0 <do_memp_malloc_pool>
 800b270:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b272:	4618      	mov	r0, r3
 800b274:	3708      	adds	r7, #8
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	08015e08 	.word	0x08015e08
 800b280:	08015e84 	.word	0x08015e84
 800b284:	08015e5c 	.word	0x08015e5c

0800b288 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	4603      	mov	r3, r0
 800b290:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b292:	79fb      	ldrb	r3, [r7, #7]
 800b294:	2b08      	cmp	r3, #8
 800b296:	d908      	bls.n	800b2aa <memp_malloc+0x22>
 800b298:	4b0a      	ldr	r3, [pc, #40]	@ (800b2c4 <memp_malloc+0x3c>)
 800b29a:	f240 1257 	movw	r2, #343	@ 0x157
 800b29e:	490a      	ldr	r1, [pc, #40]	@ (800b2c8 <memp_malloc+0x40>)
 800b2a0:	480a      	ldr	r0, [pc, #40]	@ (800b2cc <memp_malloc+0x44>)
 800b2a2:	f009 fd45 	bl	8014d30 <iprintf>
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	e008      	b.n	800b2bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b2aa:	79fb      	ldrb	r3, [r7, #7]
 800b2ac:	4a08      	ldr	r2, [pc, #32]	@ (800b2d0 <memp_malloc+0x48>)
 800b2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7ff ff9c 	bl	800b1f0 <do_memp_malloc_pool>
 800b2b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	08015e08 	.word	0x08015e08
 800b2c8:	08015e98 	.word	0x08015e98
 800b2cc:	08015e5c 	.word	0x08015e5c
 800b2d0:	080185d0 	.word	0x080185d0

0800b2d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	f003 0303 	and.w	r3, r3, #3
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d006      	beq.n	800b2f6 <do_memp_free_pool+0x22>
 800b2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800b314 <do_memp_free_pool+0x40>)
 800b2ea:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800b2ee:	490a      	ldr	r1, [pc, #40]	@ (800b318 <do_memp_free_pool+0x44>)
 800b2f0:	480a      	ldr	r0, [pc, #40]	@ (800b31c <do_memp_free_pool+0x48>)
 800b2f2:	f009 fd1d 	bl	8014d30 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b30c:	bf00      	nop
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	08015e08 	.word	0x08015e08
 800b318:	08015eb8 	.word	0x08015eb8
 800b31c:	08015e5c 	.word	0x08015e5c

0800b320 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d106      	bne.n	800b33e <memp_free_pool+0x1e>
 800b330:	4b0a      	ldr	r3, [pc, #40]	@ (800b35c <memp_free_pool+0x3c>)
 800b332:	f240 1295 	movw	r2, #405	@ 0x195
 800b336:	490a      	ldr	r1, [pc, #40]	@ (800b360 <memp_free_pool+0x40>)
 800b338:	480a      	ldr	r0, [pc, #40]	@ (800b364 <memp_free_pool+0x44>)
 800b33a:	f009 fcf9 	bl	8014d30 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d007      	beq.n	800b354 <memp_free_pool+0x34>
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d004      	beq.n	800b354 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b34a:	6839      	ldr	r1, [r7, #0]
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f7ff ffc1 	bl	800b2d4 <do_memp_free_pool>
 800b352:	e000      	b.n	800b356 <memp_free_pool+0x36>
    return;
 800b354:	bf00      	nop
}
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	08015e08 	.word	0x08015e08
 800b360:	08015e84 	.word	0x08015e84
 800b364:	08015e5c 	.word	0x08015e5c

0800b368 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	4603      	mov	r3, r0
 800b370:	6039      	str	r1, [r7, #0]
 800b372:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b374:	79fb      	ldrb	r3, [r7, #7]
 800b376:	2b08      	cmp	r3, #8
 800b378:	d907      	bls.n	800b38a <memp_free+0x22>
 800b37a:	4b0c      	ldr	r3, [pc, #48]	@ (800b3ac <memp_free+0x44>)
 800b37c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800b380:	490b      	ldr	r1, [pc, #44]	@ (800b3b0 <memp_free+0x48>)
 800b382:	480c      	ldr	r0, [pc, #48]	@ (800b3b4 <memp_free+0x4c>)
 800b384:	f009 fcd4 	bl	8014d30 <iprintf>
 800b388:	e00c      	b.n	800b3a4 <memp_free+0x3c>

  if (mem == NULL) {
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d008      	beq.n	800b3a2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b390:	79fb      	ldrb	r3, [r7, #7]
 800b392:	4a09      	ldr	r2, [pc, #36]	@ (800b3b8 <memp_free+0x50>)
 800b394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b398:	6839      	ldr	r1, [r7, #0]
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7ff ff9a 	bl	800b2d4 <do_memp_free_pool>
 800b3a0:	e000      	b.n	800b3a4 <memp_free+0x3c>
    return;
 800b3a2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b3a4:	3708      	adds	r7, #8
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	08015e08 	.word	0x08015e08
 800b3b0:	08015ed8 	.word	0x08015ed8
 800b3b4:	08015e5c 	.word	0x08015e5c
 800b3b8:	080185d0 	.word	0x080185d0

0800b3bc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b3c0:	bf00      	nop
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
	...

0800b3cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
 800b3d8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d108      	bne.n	800b3f2 <netif_add+0x26>
 800b3e0:	4b57      	ldr	r3, [pc, #348]	@ (800b540 <netif_add+0x174>)
 800b3e2:	f240 1227 	movw	r2, #295	@ 0x127
 800b3e6:	4957      	ldr	r1, [pc, #348]	@ (800b544 <netif_add+0x178>)
 800b3e8:	4857      	ldr	r0, [pc, #348]	@ (800b548 <netif_add+0x17c>)
 800b3ea:	f009 fca1 	bl	8014d30 <iprintf>
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	e0a2      	b.n	800b538 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d108      	bne.n	800b40a <netif_add+0x3e>
 800b3f8:	4b51      	ldr	r3, [pc, #324]	@ (800b540 <netif_add+0x174>)
 800b3fa:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800b3fe:	4953      	ldr	r1, [pc, #332]	@ (800b54c <netif_add+0x180>)
 800b400:	4851      	ldr	r0, [pc, #324]	@ (800b548 <netif_add+0x17c>)
 800b402:	f009 fc95 	bl	8014d30 <iprintf>
 800b406:	2300      	movs	r3, #0
 800b408:	e096      	b.n	800b538 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d101      	bne.n	800b414 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b410:	4b4f      	ldr	r3, [pc, #316]	@ (800b550 <netif_add+0x184>)
 800b412:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d101      	bne.n	800b41e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b41a:	4b4d      	ldr	r3, [pc, #308]	@ (800b550 <netif_add+0x184>)
 800b41c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d101      	bne.n	800b428 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b424:	4b4a      	ldr	r3, [pc, #296]	@ (800b550 <netif_add+0x184>)
 800b426:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2200      	movs	r2, #0
 800b42c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	4a45      	ldr	r2, [pc, #276]	@ (800b554 <netif_add+0x188>)
 800b43e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2200      	movs	r2, #0
 800b452:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6a3a      	ldr	r2, [r7, #32]
 800b458:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b45a:	4b3f      	ldr	r3, [pc, #252]	@ (800b558 <netif_add+0x18c>)
 800b45c:	781a      	ldrb	r2, [r3, #0]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b468:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	68b9      	ldr	r1, [r7, #8]
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f000 f913 	bl	800b69c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	4798      	blx	r3
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <netif_add+0xba>
    return NULL;
 800b482:	2300      	movs	r3, #0
 800b484:	e058      	b.n	800b538 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b48c:	2bff      	cmp	r3, #255	@ 0xff
 800b48e:	d103      	bne.n	800b498 <netif_add+0xcc>
        netif->num = 0;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b49c:	4b2f      	ldr	r3, [pc, #188]	@ (800b55c <netif_add+0x190>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	617b      	str	r3, [r7, #20]
 800b4a2:	e02b      	b.n	800b4fc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b4a4:	697a      	ldr	r2, [r7, #20]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d106      	bne.n	800b4ba <netif_add+0xee>
 800b4ac:	4b24      	ldr	r3, [pc, #144]	@ (800b540 <netif_add+0x174>)
 800b4ae:	f240 128b 	movw	r2, #395	@ 0x18b
 800b4b2:	492b      	ldr	r1, [pc, #172]	@ (800b560 <netif_add+0x194>)
 800b4b4:	4824      	ldr	r0, [pc, #144]	@ (800b548 <netif_add+0x17c>)
 800b4b6:	f009 fc3b 	bl	8014d30 <iprintf>
        num_netifs++;
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	2bff      	cmp	r3, #255	@ 0xff
 800b4c4:	dd06      	ble.n	800b4d4 <netif_add+0x108>
 800b4c6:	4b1e      	ldr	r3, [pc, #120]	@ (800b540 <netif_add+0x174>)
 800b4c8:	f240 128d 	movw	r2, #397	@ 0x18d
 800b4cc:	4925      	ldr	r1, [pc, #148]	@ (800b564 <netif_add+0x198>)
 800b4ce:	481e      	ldr	r0, [pc, #120]	@ (800b548 <netif_add+0x17c>)
 800b4d0:	f009 fc2e 	bl	8014d30 <iprintf>
        if (netif2->num == netif->num) {
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d108      	bne.n	800b4f6 <netif_add+0x12a>
          netif->num++;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	b2da      	uxtb	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800b4f4:	e005      	b.n	800b502 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	617b      	str	r3, [r7, #20]
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d1d0      	bne.n	800b4a4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1be      	bne.n	800b486 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b50e:	2bfe      	cmp	r3, #254	@ 0xfe
 800b510:	d103      	bne.n	800b51a <netif_add+0x14e>
    netif_num = 0;
 800b512:	4b11      	ldr	r3, [pc, #68]	@ (800b558 <netif_add+0x18c>)
 800b514:	2200      	movs	r2, #0
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	e006      	b.n	800b528 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b520:	3301      	adds	r3, #1
 800b522:	b2da      	uxtb	r2, r3
 800b524:	4b0c      	ldr	r3, [pc, #48]	@ (800b558 <netif_add+0x18c>)
 800b526:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b528:	4b0c      	ldr	r3, [pc, #48]	@ (800b55c <netif_add+0x190>)
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b530:	4a0a      	ldr	r2, [pc, #40]	@ (800b55c <netif_add+0x190>)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b536:	68fb      	ldr	r3, [r7, #12]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3718      	adds	r7, #24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	08015ef4 	.word	0x08015ef4
 800b544:	08015f88 	.word	0x08015f88
 800b548:	08015f44 	.word	0x08015f44
 800b54c:	08015fa4 	.word	0x08015fa4
 800b550:	08018634 	.word	0x08018634
 800b554:	0800b977 	.word	0x0800b977
 800b558:	2000b260 	.word	0x2000b260
 800b55c:	2000b258 	.word	0x2000b258
 800b560:	08015fc8 	.word	0x08015fc8
 800b564:	08015fdc 	.word	0x08015fdc

0800b568 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f002 fbe7 	bl	800dd48 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f006 ffe1 	bl	8012544 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b582:	bf00      	nop
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
	...

0800b58c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b086      	sub	sp, #24
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d106      	bne.n	800b5ac <netif_do_set_ipaddr+0x20>
 800b59e:	4b1d      	ldr	r3, [pc, #116]	@ (800b614 <netif_do_set_ipaddr+0x88>)
 800b5a0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800b5a4:	491c      	ldr	r1, [pc, #112]	@ (800b618 <netif_do_set_ipaddr+0x8c>)
 800b5a6:	481d      	ldr	r0, [pc, #116]	@ (800b61c <netif_do_set_ipaddr+0x90>)
 800b5a8:	f009 fbc2 	bl	8014d30 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d106      	bne.n	800b5c0 <netif_do_set_ipaddr+0x34>
 800b5b2:	4b18      	ldr	r3, [pc, #96]	@ (800b614 <netif_do_set_ipaddr+0x88>)
 800b5b4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800b5b8:	4917      	ldr	r1, [pc, #92]	@ (800b618 <netif_do_set_ipaddr+0x8c>)
 800b5ba:	4818      	ldr	r0, [pc, #96]	@ (800b61c <netif_do_set_ipaddr+0x90>)
 800b5bc:	f009 fbb8 	bl	8014d30 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d01c      	beq.n	800b608 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	3304      	adds	r3, #4
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b5de:	f107 0314 	add.w	r3, r7, #20
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7ff ffbf 	bl	800b568 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d002      	beq.n	800b5f6 <netif_do_set_ipaddr+0x6a>
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	e000      	b.n	800b5f8 <netif_do_set_ipaddr+0x6c>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	f000 f8d2 	bl	800b7a8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b604:	2301      	movs	r3, #1
 800b606:	e000      	b.n	800b60a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3718      	adds	r7, #24
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	08015ef4 	.word	0x08015ef4
 800b618:	0801600c 	.word	0x0801600c
 800b61c:	08015f44 	.word	0x08015f44

0800b620 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	3308      	adds	r3, #8
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	429a      	cmp	r2, r3
 800b638:	d00a      	beq.n	800b650 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <netif_do_set_netmask+0x26>
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	e000      	b.n	800b648 <netif_do_set_netmask+0x28>
 800b646:	2300      	movs	r3, #0
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b64c:	2301      	movs	r3, #1
 800b64e:	e000      	b.n	800b652 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	3714      	adds	r7, #20
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr

0800b65e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b65e:	b480      	push	{r7}
 800b660:	b085      	sub	sp, #20
 800b662:	af00      	add	r7, sp, #0
 800b664:	60f8      	str	r0, [r7, #12]
 800b666:	60b9      	str	r1, [r7, #8]
 800b668:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	330c      	adds	r3, #12
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	429a      	cmp	r2, r3
 800b676:	d00a      	beq.n	800b68e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d002      	beq.n	800b684 <netif_do_set_gw+0x26>
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	e000      	b.n	800b686 <netif_do_set_gw+0x28>
 800b684:	2300      	movs	r3, #0
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b68a:	2301      	movs	r3, #1
 800b68c:	e000      	b.n	800b690 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3714      	adds	r7, #20
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b088      	sub	sp, #32
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	607a      	str	r2, [r7, #4]
 800b6a8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d101      	bne.n	800b6bc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b6b8:	4b1c      	ldr	r3, [pc, #112]	@ (800b72c <netif_set_addr+0x90>)
 800b6ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d101      	bne.n	800b6c6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b6c2:	4b1a      	ldr	r3, [pc, #104]	@ (800b72c <netif_set_addr+0x90>)
 800b6c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d101      	bne.n	800b6d0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b6cc:	4b17      	ldr	r3, [pc, #92]	@ (800b72c <netif_set_addr+0x90>)
 800b6ce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d003      	beq.n	800b6de <netif_set_addr+0x42>
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <netif_set_addr+0x46>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e000      	b.n	800b6e4 <netif_set_addr+0x48>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d006      	beq.n	800b6fa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b6ec:	f107 0310 	add.w	r3, r7, #16
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	68b9      	ldr	r1, [r7, #8]
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f7ff ff49 	bl	800b58c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b6fa:	69fa      	ldr	r2, [r7, #28]
 800b6fc:	6879      	ldr	r1, [r7, #4]
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	f7ff ff8e 	bl	800b620 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b704:	69ba      	ldr	r2, [r7, #24]
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	f7ff ffa8 	bl	800b65e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d106      	bne.n	800b722 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b714:	f107 0310 	add.w	r3, r7, #16
 800b718:	461a      	mov	r2, r3
 800b71a:	68b9      	ldr	r1, [r7, #8]
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f7ff ff35 	bl	800b58c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b722:	bf00      	nop
 800b724:	3720      	adds	r7, #32
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	08018634 	.word	0x08018634

0800b730 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b738:	4a04      	ldr	r2, [pc, #16]	@ (800b74c <netif_set_default+0x1c>)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b73e:	bf00      	nop
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	2000b25c 	.word	0x2000b25c

0800b750 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d107      	bne.n	800b76e <netif_set_up+0x1e>
 800b75e:	4b0f      	ldr	r3, [pc, #60]	@ (800b79c <netif_set_up+0x4c>)
 800b760:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800b764:	490e      	ldr	r1, [pc, #56]	@ (800b7a0 <netif_set_up+0x50>)
 800b766:	480f      	ldr	r0, [pc, #60]	@ (800b7a4 <netif_set_up+0x54>)
 800b768:	f009 fae2 	bl	8014d30 <iprintf>
 800b76c:	e013      	b.n	800b796 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b774:	f003 0301 	and.w	r3, r3, #1
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d10c      	bne.n	800b796 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b782:	f043 0301 	orr.w	r3, r3, #1
 800b786:	b2da      	uxtb	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b78e:	2103      	movs	r1, #3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 f809 	bl	800b7a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	08015ef4 	.word	0x08015ef4
 800b7a0:	0801607c 	.word	0x0801607c
 800b7a4:	08015f44 	.word	0x08015f44

0800b7a8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d106      	bne.n	800b7c8 <netif_issue_reports+0x20>
 800b7ba:	4b18      	ldr	r3, [pc, #96]	@ (800b81c <netif_issue_reports+0x74>)
 800b7bc:	f240 326d 	movw	r2, #877	@ 0x36d
 800b7c0:	4917      	ldr	r1, [pc, #92]	@ (800b820 <netif_issue_reports+0x78>)
 800b7c2:	4818      	ldr	r0, [pc, #96]	@ (800b824 <netif_issue_reports+0x7c>)
 800b7c4:	f009 fab4 	bl	8014d30 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b7ce:	f003 0304 	and.w	r3, r3, #4
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d01e      	beq.n	800b814 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b7dc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d017      	beq.n	800b814 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b7e4:	78fb      	ldrb	r3, [r7, #3]
 800b7e6:	f003 0301 	and.w	r3, r3, #1
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d013      	beq.n	800b816 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00e      	beq.n	800b816 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b7fe:	f003 0308 	and.w	r3, r3, #8
 800b802:	2b00      	cmp	r3, #0
 800b804:	d007      	beq.n	800b816 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	3304      	adds	r3, #4
 800b80a:	4619      	mov	r1, r3
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f007 fe03 	bl	8013418 <etharp_request>
 800b812:	e000      	b.n	800b816 <netif_issue_reports+0x6e>
    return;
 800b814:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	08015ef4 	.word	0x08015ef4
 800b820:	08016098 	.word	0x08016098
 800b824:	08015f44 	.word	0x08015f44

0800b828 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d107      	bne.n	800b846 <netif_set_down+0x1e>
 800b836:	4b12      	ldr	r3, [pc, #72]	@ (800b880 <netif_set_down+0x58>)
 800b838:	f240 329b 	movw	r2, #923	@ 0x39b
 800b83c:	4911      	ldr	r1, [pc, #68]	@ (800b884 <netif_set_down+0x5c>)
 800b83e:	4812      	ldr	r0, [pc, #72]	@ (800b888 <netif_set_down+0x60>)
 800b840:	f009 fa76 	bl	8014d30 <iprintf>
 800b844:	e019      	b.n	800b87a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b84c:	f003 0301 	and.w	r3, r3, #1
 800b850:	2b00      	cmp	r3, #0
 800b852:	d012      	beq.n	800b87a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b85a:	f023 0301 	bic.w	r3, r3, #1
 800b85e:	b2da      	uxtb	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b86c:	f003 0308 	and.w	r3, r3, #8
 800b870:	2b00      	cmp	r3, #0
 800b872:	d002      	beq.n	800b87a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f007 f98d 	bl	8012b94 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	08015ef4 	.word	0x08015ef4
 800b884:	080160bc 	.word	0x080160bc
 800b888:	08015f44 	.word	0x08015f44

0800b88c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d107      	bne.n	800b8aa <netif_set_link_up+0x1e>
 800b89a:	4b13      	ldr	r3, [pc, #76]	@ (800b8e8 <netif_set_link_up+0x5c>)
 800b89c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800b8a0:	4912      	ldr	r1, [pc, #72]	@ (800b8ec <netif_set_link_up+0x60>)
 800b8a2:	4813      	ldr	r0, [pc, #76]	@ (800b8f0 <netif_set_link_up+0x64>)
 800b8a4:	f009 fa44 	bl	8014d30 <iprintf>
 800b8a8:	e01b      	b.n	800b8e2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b8b0:	f003 0304 	and.w	r3, r3, #4
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d114      	bne.n	800b8e2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b8be:	f043 0304 	orr.w	r3, r3, #4
 800b8c2:	b2da      	uxtb	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b8ca:	2103      	movs	r1, #3
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f7ff ff6b 	bl	800b7a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	69db      	ldr	r3, [r3, #28]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d003      	beq.n	800b8e2 <netif_set_link_up+0x56>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	69db      	ldr	r3, [r3, #28]
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	08015ef4 	.word	0x08015ef4
 800b8ec:	080160dc 	.word	0x080160dc
 800b8f0:	08015f44 	.word	0x08015f44

0800b8f4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d107      	bne.n	800b912 <netif_set_link_down+0x1e>
 800b902:	4b11      	ldr	r3, [pc, #68]	@ (800b948 <netif_set_link_down+0x54>)
 800b904:	f240 4206 	movw	r2, #1030	@ 0x406
 800b908:	4910      	ldr	r1, [pc, #64]	@ (800b94c <netif_set_link_down+0x58>)
 800b90a:	4811      	ldr	r0, [pc, #68]	@ (800b950 <netif_set_link_down+0x5c>)
 800b90c:	f009 fa10 	bl	8014d30 <iprintf>
 800b910:	e017      	b.n	800b942 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b918:	f003 0304 	and.w	r3, r3, #4
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d010      	beq.n	800b942 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b926:	f023 0304 	bic.w	r3, r3, #4
 800b92a:	b2da      	uxtb	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	69db      	ldr	r3, [r3, #28]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d003      	beq.n	800b942 <netif_set_link_down+0x4e>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	69db      	ldr	r3, [r3, #28]
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	08015ef4 	.word	0x08015ef4
 800b94c:	08016100 	.word	0x08016100
 800b950:	08015f44 	.word	0x08015f44

0800b954 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	683a      	ldr	r2, [r7, #0]
 800b968:	61da      	str	r2, [r3, #28]
  }
}
 800b96a:	bf00      	nop
 800b96c:	370c      	adds	r7, #12
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b976:	b480      	push	{r7}
 800b978:	b085      	sub	sp, #20
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	60f8      	str	r0, [r7, #12]
 800b97e:	60b9      	str	r1, [r7, #8]
 800b980:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b982:	f06f 030b 	mvn.w	r3, #11
}
 800b986:	4618      	mov	r0, r3
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
	...

0800b994 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	4603      	mov	r3, r0
 800b99c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b99e:	79fb      	ldrb	r3, [r7, #7]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d013      	beq.n	800b9cc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b9a4:	4b0d      	ldr	r3, [pc, #52]	@ (800b9dc <netif_get_by_index+0x48>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	60fb      	str	r3, [r7, #12]
 800b9aa:	e00c      	b.n	800b9c6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	79fa      	ldrb	r2, [r7, #7]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d101      	bne.n	800b9c0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	e006      	b.n	800b9ce <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	60fb      	str	r3, [r7, #12]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1ef      	bne.n	800b9ac <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	2000b258 	.word	0x2000b258

0800b9e0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b9e6:	4b0c      	ldr	r3, [pc, #48]	@ (800ba18 <pbuf_free_ooseq+0x38>)
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b9ec:	4b0b      	ldr	r3, [pc, #44]	@ (800ba1c <pbuf_free_ooseq+0x3c>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	607b      	str	r3, [r7, #4]
 800b9f2:	e00a      	b.n	800ba0a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d003      	beq.n	800ba04 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f002 f9e1 	bl	800ddc4 <tcp_free_ooseq>
      return;
 800ba02:	e005      	b.n	800ba10 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	607b      	str	r3, [r7, #4]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1f1      	bne.n	800b9f4 <pbuf_free_ooseq+0x14>
    }
  }
}
 800ba10:	3708      	adds	r7, #8
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	2000b261 	.word	0x2000b261
 800ba1c:	2000b270 	.word	0x2000b270

0800ba20 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ba20:	b480      	push	{r7}
 800ba22:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800ba24:	4b03      	ldr	r3, [pc, #12]	@ (800ba34 <pbuf_pool_is_empty+0x14>)
 800ba26:	2201      	movs	r2, #1
 800ba28:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ba2a:	bf00      	nop
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr
 800ba34:	2000b261 	.word	0x2000b261

0800ba38 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	4611      	mov	r1, r2
 800ba44:	461a      	mov	r2, r3
 800ba46:	460b      	mov	r3, r1
 800ba48:	80fb      	strh	r3, [r7, #6]
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2200      	movs	r2, #0
 800ba52:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	88fa      	ldrh	r2, [r7, #6]
 800ba5e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	88ba      	ldrh	r2, [r7, #4]
 800ba64:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ba66:	8b3b      	ldrh	r3, [r7, #24]
 800ba68:	b2da      	uxtb	r2, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	7f3a      	ldrb	r2, [r7, #28]
 800ba72:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2201      	movs	r2, #1
 800ba78:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	73da      	strb	r2, [r3, #15]
}
 800ba80:	bf00      	nop
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b08c      	sub	sp, #48	@ 0x30
 800ba90:	af02      	add	r7, sp, #8
 800ba92:	4603      	mov	r3, r0
 800ba94:	71fb      	strb	r3, [r7, #7]
 800ba96:	460b      	mov	r3, r1
 800ba98:	80bb      	strh	r3, [r7, #4]
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ba9e:	79fb      	ldrb	r3, [r7, #7]
 800baa0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800baa2:	887b      	ldrh	r3, [r7, #2]
 800baa4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800baa8:	d07f      	beq.n	800bbaa <pbuf_alloc+0x11e>
 800baaa:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800baae:	f300 80c8 	bgt.w	800bc42 <pbuf_alloc+0x1b6>
 800bab2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800bab6:	d010      	beq.n	800bada <pbuf_alloc+0x4e>
 800bab8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800babc:	f300 80c1 	bgt.w	800bc42 <pbuf_alloc+0x1b6>
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d002      	beq.n	800baca <pbuf_alloc+0x3e>
 800bac4:	2b41      	cmp	r3, #65	@ 0x41
 800bac6:	f040 80bc 	bne.w	800bc42 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800baca:	887a      	ldrh	r2, [r7, #2]
 800bacc:	88bb      	ldrh	r3, [r7, #4]
 800bace:	4619      	mov	r1, r3
 800bad0:	2000      	movs	r0, #0
 800bad2:	f000 f8d1 	bl	800bc78 <pbuf_alloc_reference>
 800bad6:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800bad8:	e0bd      	b.n	800bc56 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bada:	2300      	movs	r3, #0
 800badc:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800bade:	2300      	movs	r3, #0
 800bae0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bae2:	88bb      	ldrh	r3, [r7, #4]
 800bae4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bae6:	2008      	movs	r0, #8
 800bae8:	f7ff fbce 	bl	800b288 <memp_malloc>
 800baec:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d109      	bne.n	800bb08 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800baf4:	f7ff ff94 	bl	800ba20 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800baf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d002      	beq.n	800bb04 <pbuf_alloc+0x78>
            pbuf_free(p);
 800bafe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bb00:	f000 faa8 	bl	800c054 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bb04:	2300      	movs	r3, #0
 800bb06:	e0a7      	b.n	800bc58 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bb08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bb0a:	3303      	adds	r3, #3
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	f023 0303 	bic.w	r3, r3, #3
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	8b7a      	ldrh	r2, [r7, #26]
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	bf28      	it	cs
 800bb20:	4613      	movcs	r3, r2
 800bb22:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bb24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bb26:	3310      	adds	r3, #16
 800bb28:	693a      	ldr	r2, [r7, #16]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	3303      	adds	r3, #3
 800bb2e:	f023 0303 	bic.w	r3, r3, #3
 800bb32:	4618      	mov	r0, r3
 800bb34:	89f9      	ldrh	r1, [r7, #14]
 800bb36:	8b7a      	ldrh	r2, [r7, #26]
 800bb38:	2300      	movs	r3, #0
 800bb3a:	9301      	str	r3, [sp, #4]
 800bb3c:	887b      	ldrh	r3, [r7, #2]
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	460b      	mov	r3, r1
 800bb42:	4601      	mov	r1, r0
 800bb44:	6938      	ldr	r0, [r7, #16]
 800bb46:	f7ff ff77 	bl	800ba38 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	f003 0303 	and.w	r3, r3, #3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d006      	beq.n	800bb64 <pbuf_alloc+0xd8>
 800bb56:	4b42      	ldr	r3, [pc, #264]	@ (800bc60 <pbuf_alloc+0x1d4>)
 800bb58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb5c:	4941      	ldr	r1, [pc, #260]	@ (800bc64 <pbuf_alloc+0x1d8>)
 800bb5e:	4842      	ldr	r0, [pc, #264]	@ (800bc68 <pbuf_alloc+0x1dc>)
 800bb60:	f009 f8e6 	bl	8014d30 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bb64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bb66:	3303      	adds	r3, #3
 800bb68:	f023 0303 	bic.w	r3, r3, #3
 800bb6c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800bb70:	d106      	bne.n	800bb80 <pbuf_alloc+0xf4>
 800bb72:	4b3b      	ldr	r3, [pc, #236]	@ (800bc60 <pbuf_alloc+0x1d4>)
 800bb74:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800bb78:	493c      	ldr	r1, [pc, #240]	@ (800bc6c <pbuf_alloc+0x1e0>)
 800bb7a:	483b      	ldr	r0, [pc, #236]	@ (800bc68 <pbuf_alloc+0x1dc>)
 800bb7c:	f009 f8d8 	bl	8014d30 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d102      	bne.n	800bb8c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb8a:	e002      	b.n	800bb92 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	693a      	ldr	r2, [r7, #16]
 800bb90:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bb96:	8b7a      	ldrh	r2, [r7, #26]
 800bb98:	89fb      	ldrh	r3, [r7, #14]
 800bb9a:	1ad3      	subs	r3, r2, r3
 800bb9c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800bba2:	8b7b      	ldrh	r3, [r7, #26]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d19e      	bne.n	800bae6 <pbuf_alloc+0x5a>
      break;
 800bba8:	e055      	b.n	800bc56 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bbaa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bbac:	3303      	adds	r3, #3
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	f023 0303 	bic.w	r3, r3, #3
 800bbb4:	b29a      	uxth	r2, r3
 800bbb6:	88bb      	ldrh	r3, [r7, #4]
 800bbb8:	3303      	adds	r3, #3
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	f023 0303 	bic.w	r3, r3, #3
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	4413      	add	r3, r2
 800bbc4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bbc6:	8b3b      	ldrh	r3, [r7, #24]
 800bbc8:	3310      	adds	r3, #16
 800bbca:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bbcc:	8b3a      	ldrh	r2, [r7, #24]
 800bbce:	88bb      	ldrh	r3, [r7, #4]
 800bbd0:	3303      	adds	r3, #3
 800bbd2:	f023 0303 	bic.w	r3, r3, #3
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d306      	bcc.n	800bbe8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bbda:	8afa      	ldrh	r2, [r7, #22]
 800bbdc:	88bb      	ldrh	r3, [r7, #4]
 800bbde:	3303      	adds	r3, #3
 800bbe0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d201      	bcs.n	800bbec <pbuf_alloc+0x160>
        return NULL;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	e035      	b.n	800bc58 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bbec:	8afb      	ldrh	r3, [r7, #22]
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7ff f9ba 	bl	800af68 <mem_malloc>
 800bbf4:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <pbuf_alloc+0x174>
        return NULL;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	e02b      	b.n	800bc58 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bc00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bc02:	3310      	adds	r3, #16
 800bc04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc06:	4413      	add	r3, r2
 800bc08:	3303      	adds	r3, #3
 800bc0a:	f023 0303 	bic.w	r3, r3, #3
 800bc0e:	4618      	mov	r0, r3
 800bc10:	88b9      	ldrh	r1, [r7, #4]
 800bc12:	88ba      	ldrh	r2, [r7, #4]
 800bc14:	2300      	movs	r3, #0
 800bc16:	9301      	str	r3, [sp, #4]
 800bc18:	887b      	ldrh	r3, [r7, #2]
 800bc1a:	9300      	str	r3, [sp, #0]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	4601      	mov	r1, r0
 800bc20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc22:	f7ff ff09 	bl	800ba38 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	f003 0303 	and.w	r3, r3, #3
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d010      	beq.n	800bc54 <pbuf_alloc+0x1c8>
 800bc32:	4b0b      	ldr	r3, [pc, #44]	@ (800bc60 <pbuf_alloc+0x1d4>)
 800bc34:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800bc38:	490d      	ldr	r1, [pc, #52]	@ (800bc70 <pbuf_alloc+0x1e4>)
 800bc3a:	480b      	ldr	r0, [pc, #44]	@ (800bc68 <pbuf_alloc+0x1dc>)
 800bc3c:	f009 f878 	bl	8014d30 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bc40:	e008      	b.n	800bc54 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bc42:	4b07      	ldr	r3, [pc, #28]	@ (800bc60 <pbuf_alloc+0x1d4>)
 800bc44:	f240 1227 	movw	r2, #295	@ 0x127
 800bc48:	490a      	ldr	r1, [pc, #40]	@ (800bc74 <pbuf_alloc+0x1e8>)
 800bc4a:	4807      	ldr	r0, [pc, #28]	@ (800bc68 <pbuf_alloc+0x1dc>)
 800bc4c:	f009 f870 	bl	8014d30 <iprintf>
      return NULL;
 800bc50:	2300      	movs	r3, #0
 800bc52:	e001      	b.n	800bc58 <pbuf_alloc+0x1cc>
      break;
 800bc54:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3728      	adds	r7, #40	@ 0x28
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	08016124 	.word	0x08016124
 800bc64:	08016154 	.word	0x08016154
 800bc68:	08016184 	.word	0x08016184
 800bc6c:	080161ac 	.word	0x080161ac
 800bc70:	080161e0 	.word	0x080161e0
 800bc74:	0801620c 	.word	0x0801620c

0800bc78 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b086      	sub	sp, #24
 800bc7c:	af02      	add	r7, sp, #8
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	460b      	mov	r3, r1
 800bc82:	807b      	strh	r3, [r7, #2]
 800bc84:	4613      	mov	r3, r2
 800bc86:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bc88:	883b      	ldrh	r3, [r7, #0]
 800bc8a:	2b41      	cmp	r3, #65	@ 0x41
 800bc8c:	d009      	beq.n	800bca2 <pbuf_alloc_reference+0x2a>
 800bc8e:	883b      	ldrh	r3, [r7, #0]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d006      	beq.n	800bca2 <pbuf_alloc_reference+0x2a>
 800bc94:	4b0f      	ldr	r3, [pc, #60]	@ (800bcd4 <pbuf_alloc_reference+0x5c>)
 800bc96:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800bc9a:	490f      	ldr	r1, [pc, #60]	@ (800bcd8 <pbuf_alloc_reference+0x60>)
 800bc9c:	480f      	ldr	r0, [pc, #60]	@ (800bcdc <pbuf_alloc_reference+0x64>)
 800bc9e:	f009 f847 	bl	8014d30 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bca2:	2007      	movs	r0, #7
 800bca4:	f7ff faf0 	bl	800b288 <memp_malloc>
 800bca8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d101      	bne.n	800bcb4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	e00b      	b.n	800bccc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bcb4:	8879      	ldrh	r1, [r7, #2]
 800bcb6:	887a      	ldrh	r2, [r7, #2]
 800bcb8:	2300      	movs	r3, #0
 800bcba:	9301      	str	r3, [sp, #4]
 800bcbc:	883b      	ldrh	r3, [r7, #0]
 800bcbe:	9300      	str	r3, [sp, #0]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	6879      	ldr	r1, [r7, #4]
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f7ff feb7 	bl	800ba38 <pbuf_init_alloced_pbuf>
  return p;
 800bcca:	68fb      	ldr	r3, [r7, #12]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	08016124 	.word	0x08016124
 800bcd8:	08016228 	.word	0x08016228
 800bcdc:	08016184 	.word	0x08016184

0800bce0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b088      	sub	sp, #32
 800bce4:	af02      	add	r7, sp, #8
 800bce6:	607b      	str	r3, [r7, #4]
 800bce8:	4603      	mov	r3, r0
 800bcea:	73fb      	strb	r3, [r7, #15]
 800bcec:	460b      	mov	r3, r1
 800bcee:	81bb      	strh	r3, [r7, #12]
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bcf4:	7bfb      	ldrb	r3, [r7, #15]
 800bcf6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bcf8:	8a7b      	ldrh	r3, [r7, #18]
 800bcfa:	3303      	adds	r3, #3
 800bcfc:	f023 0203 	bic.w	r2, r3, #3
 800bd00:	89bb      	ldrh	r3, [r7, #12]
 800bd02:	441a      	add	r2, r3
 800bd04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d901      	bls.n	800bd0e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	e018      	b.n	800bd40 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d007      	beq.n	800bd24 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bd14:	8a7b      	ldrh	r3, [r7, #18]
 800bd16:	3303      	adds	r3, #3
 800bd18:	f023 0303 	bic.w	r3, r3, #3
 800bd1c:	6a3a      	ldr	r2, [r7, #32]
 800bd1e:	4413      	add	r3, r2
 800bd20:	617b      	str	r3, [r7, #20]
 800bd22:	e001      	b.n	800bd28 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	89b9      	ldrh	r1, [r7, #12]
 800bd2c:	89ba      	ldrh	r2, [r7, #12]
 800bd2e:	2302      	movs	r3, #2
 800bd30:	9301      	str	r3, [sp, #4]
 800bd32:	897b      	ldrh	r3, [r7, #10]
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	460b      	mov	r3, r1
 800bd38:	6979      	ldr	r1, [r7, #20]
 800bd3a:	f7ff fe7d 	bl	800ba38 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bd3e:	687b      	ldr	r3, [r7, #4]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3718      	adds	r7, #24
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	460b      	mov	r3, r1
 800bd52:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d106      	bne.n	800bd68 <pbuf_realloc+0x20>
 800bd5a:	4b3a      	ldr	r3, [pc, #232]	@ (800be44 <pbuf_realloc+0xfc>)
 800bd5c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800bd60:	4939      	ldr	r1, [pc, #228]	@ (800be48 <pbuf_realloc+0x100>)
 800bd62:	483a      	ldr	r0, [pc, #232]	@ (800be4c <pbuf_realloc+0x104>)
 800bd64:	f008 ffe4 	bl	8014d30 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	891b      	ldrh	r3, [r3, #8]
 800bd6c:	887a      	ldrh	r2, [r7, #2]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d263      	bcs.n	800be3a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	891a      	ldrh	r2, [r3, #8]
 800bd76:	887b      	ldrh	r3, [r7, #2]
 800bd78:	1ad3      	subs	r3, r2, r3
 800bd7a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bd7c:	887b      	ldrh	r3, [r7, #2]
 800bd7e:	817b      	strh	r3, [r7, #10]
  q = p;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bd84:	e018      	b.n	800bdb8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	895b      	ldrh	r3, [r3, #10]
 800bd8a:	897a      	ldrh	r2, [r7, #10]
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	891a      	ldrh	r2, [r3, #8]
 800bd94:	893b      	ldrh	r3, [r7, #8]
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d106      	bne.n	800bdb8 <pbuf_realloc+0x70>
 800bdaa:	4b26      	ldr	r3, [pc, #152]	@ (800be44 <pbuf_realloc+0xfc>)
 800bdac:	f240 12af 	movw	r2, #431	@ 0x1af
 800bdb0:	4927      	ldr	r1, [pc, #156]	@ (800be50 <pbuf_realloc+0x108>)
 800bdb2:	4826      	ldr	r0, [pc, #152]	@ (800be4c <pbuf_realloc+0x104>)
 800bdb4:	f008 ffbc 	bl	8014d30 <iprintf>
  while (rem_len > q->len) {
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	895b      	ldrh	r3, [r3, #10]
 800bdbc:	897a      	ldrh	r2, [r7, #10]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d8e1      	bhi.n	800bd86 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	7b1b      	ldrb	r3, [r3, #12]
 800bdc6:	f003 030f 	and.w	r3, r3, #15
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d121      	bne.n	800be12 <pbuf_realloc+0xca>
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	895b      	ldrh	r3, [r3, #10]
 800bdd2:	897a      	ldrh	r2, [r7, #10]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d01c      	beq.n	800be12 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	7b5b      	ldrb	r3, [r3, #13]
 800bddc:	f003 0302 	and.w	r3, r3, #2
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d116      	bne.n	800be12 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	897b      	ldrh	r3, [r7, #10]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f7fe ffba 	bl	800ad70 <mem_trim>
 800bdfc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d106      	bne.n	800be12 <pbuf_realloc+0xca>
 800be04:	4b0f      	ldr	r3, [pc, #60]	@ (800be44 <pbuf_realloc+0xfc>)
 800be06:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800be0a:	4912      	ldr	r1, [pc, #72]	@ (800be54 <pbuf_realloc+0x10c>)
 800be0c:	480f      	ldr	r0, [pc, #60]	@ (800be4c <pbuf_realloc+0x104>)
 800be0e:	f008 ff8f 	bl	8014d30 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	897a      	ldrh	r2, [r7, #10]
 800be16:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	895a      	ldrh	r2, [r3, #10]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d004      	beq.n	800be32 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 f911 	bl	800c054 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2200      	movs	r2, #0
 800be36:	601a      	str	r2, [r3, #0]
 800be38:	e000      	b.n	800be3c <pbuf_realloc+0xf4>
    return;
 800be3a:	bf00      	nop

}
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	08016124 	.word	0x08016124
 800be48:	0801623c 	.word	0x0801623c
 800be4c:	08016184 	.word	0x08016184
 800be50:	08016254 	.word	0x08016254
 800be54:	0801626c 	.word	0x0801626c

0800be58 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b086      	sub	sp, #24
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	4613      	mov	r3, r2
 800be64:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d106      	bne.n	800be7a <pbuf_add_header_impl+0x22>
 800be6c:	4b2b      	ldr	r3, [pc, #172]	@ (800bf1c <pbuf_add_header_impl+0xc4>)
 800be6e:	f240 12df 	movw	r2, #479	@ 0x1df
 800be72:	492b      	ldr	r1, [pc, #172]	@ (800bf20 <pbuf_add_header_impl+0xc8>)
 800be74:	482b      	ldr	r0, [pc, #172]	@ (800bf24 <pbuf_add_header_impl+0xcc>)
 800be76:	f008 ff5b 	bl	8014d30 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d003      	beq.n	800be88 <pbuf_add_header_impl+0x30>
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be86:	d301      	bcc.n	800be8c <pbuf_add_header_impl+0x34>
    return 1;
 800be88:	2301      	movs	r3, #1
 800be8a:	e043      	b.n	800bf14 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d101      	bne.n	800be96 <pbuf_add_header_impl+0x3e>
    return 0;
 800be92:	2300      	movs	r3, #0
 800be94:	e03e      	b.n	800bf14 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	891a      	ldrh	r2, [r3, #8]
 800be9e:	8a7b      	ldrh	r3, [r7, #18]
 800bea0:	4413      	add	r3, r2
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	8a7a      	ldrh	r2, [r7, #18]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d901      	bls.n	800beae <pbuf_add_header_impl+0x56>
    return 1;
 800beaa:	2301      	movs	r3, #1
 800beac:	e032      	b.n	800bf14 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	7b1b      	ldrb	r3, [r3, #12]
 800beb2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800beb4:	8a3b      	ldrh	r3, [r7, #16]
 800beb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00c      	beq.n	800bed8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	685a      	ldr	r2, [r3, #4]
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	425b      	negs	r3, r3
 800bec6:	4413      	add	r3, r2
 800bec8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	3310      	adds	r3, #16
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d20d      	bcs.n	800bef0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bed4:	2301      	movs	r3, #1
 800bed6:	e01d      	b.n	800bf14 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bed8:	79fb      	ldrb	r3, [r7, #7]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d006      	beq.n	800beec <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	685a      	ldr	r2, [r3, #4]
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	425b      	negs	r3, r3
 800bee6:	4413      	add	r3, r2
 800bee8:	617b      	str	r3, [r7, #20]
 800beea:	e001      	b.n	800bef0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800beec:	2301      	movs	r3, #1
 800beee:	e011      	b.n	800bf14 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	697a      	ldr	r2, [r7, #20]
 800bef4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	895a      	ldrh	r2, [r3, #10]
 800befa:	8a7b      	ldrh	r3, [r7, #18]
 800befc:	4413      	add	r3, r2
 800befe:	b29a      	uxth	r2, r3
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	891a      	ldrh	r2, [r3, #8]
 800bf08:	8a7b      	ldrh	r3, [r7, #18]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	811a      	strh	r2, [r3, #8]


  return 0;
 800bf12:	2300      	movs	r3, #0
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3718      	adds	r7, #24
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	08016124 	.word	0x08016124
 800bf20:	08016288 	.word	0x08016288
 800bf24:	08016184 	.word	0x08016184

0800bf28 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bf32:	2200      	movs	r2, #0
 800bf34:	6839      	ldr	r1, [r7, #0]
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7ff ff8e 	bl	800be58 <pbuf_add_header_impl>
 800bf3c:	4603      	mov	r3, r0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3708      	adds	r7, #8
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
	...

0800bf48 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d106      	bne.n	800bf66 <pbuf_remove_header+0x1e>
 800bf58:	4b20      	ldr	r3, [pc, #128]	@ (800bfdc <pbuf_remove_header+0x94>)
 800bf5a:	f240 224b 	movw	r2, #587	@ 0x24b
 800bf5e:	4920      	ldr	r1, [pc, #128]	@ (800bfe0 <pbuf_remove_header+0x98>)
 800bf60:	4820      	ldr	r0, [pc, #128]	@ (800bfe4 <pbuf_remove_header+0x9c>)
 800bf62:	f008 fee5 	bl	8014d30 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d003      	beq.n	800bf74 <pbuf_remove_header+0x2c>
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf72:	d301      	bcc.n	800bf78 <pbuf_remove_header+0x30>
    return 1;
 800bf74:	2301      	movs	r3, #1
 800bf76:	e02c      	b.n	800bfd2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d101      	bne.n	800bf82 <pbuf_remove_header+0x3a>
    return 0;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	e027      	b.n	800bfd2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	895b      	ldrh	r3, [r3, #10]
 800bf8a:	89fa      	ldrh	r2, [r7, #14]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d908      	bls.n	800bfa2 <pbuf_remove_header+0x5a>
 800bf90:	4b12      	ldr	r3, [pc, #72]	@ (800bfdc <pbuf_remove_header+0x94>)
 800bf92:	f240 2255 	movw	r2, #597	@ 0x255
 800bf96:	4914      	ldr	r1, [pc, #80]	@ (800bfe8 <pbuf_remove_header+0xa0>)
 800bf98:	4812      	ldr	r0, [pc, #72]	@ (800bfe4 <pbuf_remove_header+0x9c>)
 800bf9a:	f008 fec9 	bl	8014d30 <iprintf>
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e017      	b.n	800bfd2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	685a      	ldr	r2, [r3, #4]
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	441a      	add	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	895a      	ldrh	r2, [r3, #10]
 800bfb8:	89fb      	ldrh	r3, [r7, #14]
 800bfba:	1ad3      	subs	r3, r2, r3
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	891a      	ldrh	r2, [r3, #8]
 800bfc6:	89fb      	ldrh	r3, [r7, #14]
 800bfc8:	1ad3      	subs	r3, r2, r3
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	08016124 	.word	0x08016124
 800bfe0:	08016288 	.word	0x08016288
 800bfe4:	08016184 	.word	0x08016184
 800bfe8:	08016294 	.word	0x08016294

0800bfec <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	460b      	mov	r3, r1
 800bff6:	807b      	strh	r3, [r7, #2]
 800bff8:	4613      	mov	r3, r2
 800bffa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bffc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c000:	2b00      	cmp	r3, #0
 800c002:	da08      	bge.n	800c016 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c004:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c008:	425b      	negs	r3, r3
 800c00a:	4619      	mov	r1, r3
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f7ff ff9b 	bl	800bf48 <pbuf_remove_header>
 800c012:	4603      	mov	r3, r0
 800c014:	e007      	b.n	800c026 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c016:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c01a:	787a      	ldrb	r2, [r7, #1]
 800c01c:	4619      	mov	r1, r3
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7ff ff1a 	bl	800be58 <pbuf_add_header_impl>
 800c024:	4603      	mov	r3, r0
  }
}
 800c026:	4618      	mov	r0, r3
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b082      	sub	sp, #8
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
 800c036:	460b      	mov	r3, r1
 800c038:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c03a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c03e:	2201      	movs	r2, #1
 800c040:	4619      	mov	r1, r3
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f7ff ffd2 	bl	800bfec <pbuf_header_impl>
 800c048:	4603      	mov	r3, r0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
	...

0800c054 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10b      	bne.n	800c07a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d106      	bne.n	800c076 <pbuf_free+0x22>
 800c068:	4b38      	ldr	r3, [pc, #224]	@ (800c14c <pbuf_free+0xf8>)
 800c06a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c06e:	4938      	ldr	r1, [pc, #224]	@ (800c150 <pbuf_free+0xfc>)
 800c070:	4838      	ldr	r0, [pc, #224]	@ (800c154 <pbuf_free+0x100>)
 800c072:	f008 fe5d 	bl	8014d30 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c076:	2300      	movs	r3, #0
 800c078:	e063      	b.n	800c142 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c07a:	2300      	movs	r3, #0
 800c07c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c07e:	e05c      	b.n	800c13a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	7b9b      	ldrb	r3, [r3, #14]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d106      	bne.n	800c096 <pbuf_free+0x42>
 800c088:	4b30      	ldr	r3, [pc, #192]	@ (800c14c <pbuf_free+0xf8>)
 800c08a:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800c08e:	4932      	ldr	r1, [pc, #200]	@ (800c158 <pbuf_free+0x104>)
 800c090:	4830      	ldr	r0, [pc, #192]	@ (800c154 <pbuf_free+0x100>)
 800c092:	f008 fe4d 	bl	8014d30 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	7b9b      	ldrb	r3, [r3, #14]
 800c09a:	3b01      	subs	r3, #1
 800c09c:	b2da      	uxtb	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	739a      	strb	r2, [r3, #14]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	7b9b      	ldrb	r3, [r3, #14]
 800c0a6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c0a8:	7dbb      	ldrb	r3, [r7, #22]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d143      	bne.n	800c136 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	7b1b      	ldrb	r3, [r3, #12]
 800c0b8:	f003 030f 	and.w	r3, r3, #15
 800c0bc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	7b5b      	ldrb	r3, [r3, #13]
 800c0c2:	f003 0302 	and.w	r3, r3, #2
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d011      	beq.n	800c0ee <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	691b      	ldr	r3, [r3, #16]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d106      	bne.n	800c0e4 <pbuf_free+0x90>
 800c0d6:	4b1d      	ldr	r3, [pc, #116]	@ (800c14c <pbuf_free+0xf8>)
 800c0d8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c0dc:	491f      	ldr	r1, [pc, #124]	@ (800c15c <pbuf_free+0x108>)
 800c0de:	481d      	ldr	r0, [pc, #116]	@ (800c154 <pbuf_free+0x100>)
 800c0e0:	f008 fe26 	bl	8014d30 <iprintf>
        pc->custom_free_function(p);
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	4798      	blx	r3
 800c0ec:	e01d      	b.n	800c12a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d104      	bne.n	800c0fe <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c0f4:	6879      	ldr	r1, [r7, #4]
 800c0f6:	2008      	movs	r0, #8
 800c0f8:	f7ff f936 	bl	800b368 <memp_free>
 800c0fc:	e015      	b.n	800c12a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c0fe:	7bfb      	ldrb	r3, [r7, #15]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d104      	bne.n	800c10e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c104:	6879      	ldr	r1, [r7, #4]
 800c106:	2007      	movs	r0, #7
 800c108:	f7ff f92e 	bl	800b368 <memp_free>
 800c10c:	e00d      	b.n	800c12a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c10e:	7bfb      	ldrb	r3, [r7, #15]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d103      	bne.n	800c11c <pbuf_free+0xc8>
          mem_free(p);
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7fe fdc1 	bl	800ac9c <mem_free>
 800c11a:	e006      	b.n	800c12a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c11c:	4b0b      	ldr	r3, [pc, #44]	@ (800c14c <pbuf_free+0xf8>)
 800c11e:	f240 320f 	movw	r2, #783	@ 0x30f
 800c122:	490f      	ldr	r1, [pc, #60]	@ (800c160 <pbuf_free+0x10c>)
 800c124:	480b      	ldr	r0, [pc, #44]	@ (800c154 <pbuf_free+0x100>)
 800c126:	f008 fe03 	bl	8014d30 <iprintf>
        }
      }
      count++;
 800c12a:	7dfb      	ldrb	r3, [r7, #23]
 800c12c:	3301      	adds	r3, #1
 800c12e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	607b      	str	r3, [r7, #4]
 800c134:	e001      	b.n	800c13a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c136:	2300      	movs	r3, #0
 800c138:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d19f      	bne.n	800c080 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c140:	7dfb      	ldrb	r3, [r7, #23]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3718      	adds	r7, #24
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	08016124 	.word	0x08016124
 800c150:	08016288 	.word	0x08016288
 800c154:	08016184 	.word	0x08016184
 800c158:	080162b4 	.word	0x080162b4
 800c15c:	080162cc 	.word	0x080162cc
 800c160:	080162f0 	.word	0x080162f0

0800c164 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c164:	b480      	push	{r7}
 800c166:	b085      	sub	sp, #20
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c16c:	2300      	movs	r3, #0
 800c16e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c170:	e005      	b.n	800c17e <pbuf_clen+0x1a>
    ++len;
 800c172:	89fb      	ldrh	r3, [r7, #14]
 800c174:	3301      	adds	r3, #1
 800c176:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1f6      	bne.n	800c172 <pbuf_clen+0xe>
  }
  return len;
 800c184:	89fb      	ldrh	r3, [r7, #14]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3714      	adds	r7, #20
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
	...

0800c194 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d010      	beq.n	800c1c4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	7b9b      	ldrb	r3, [r3, #14]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	7b9b      	ldrb	r3, [r3, #14]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d106      	bne.n	800c1c4 <pbuf_ref+0x30>
 800c1b6:	4b05      	ldr	r3, [pc, #20]	@ (800c1cc <pbuf_ref+0x38>)
 800c1b8:	f240 3242 	movw	r2, #834	@ 0x342
 800c1bc:	4904      	ldr	r1, [pc, #16]	@ (800c1d0 <pbuf_ref+0x3c>)
 800c1be:	4805      	ldr	r0, [pc, #20]	@ (800c1d4 <pbuf_ref+0x40>)
 800c1c0:	f008 fdb6 	bl	8014d30 <iprintf>
  }
}
 800c1c4:	bf00      	nop
 800c1c6:	3708      	adds	r7, #8
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	08016124 	.word	0x08016124
 800c1d0:	08016304 	.word	0x08016304
 800c1d4:	08016184 	.word	0x08016184

0800c1d8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <pbuf_cat+0x16>
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d107      	bne.n	800c1fe <pbuf_cat+0x26>
 800c1ee:	4b20      	ldr	r3, [pc, #128]	@ (800c270 <pbuf_cat+0x98>)
 800c1f0:	f240 3259 	movw	r2, #857	@ 0x359
 800c1f4:	491f      	ldr	r1, [pc, #124]	@ (800c274 <pbuf_cat+0x9c>)
 800c1f6:	4820      	ldr	r0, [pc, #128]	@ (800c278 <pbuf_cat+0xa0>)
 800c1f8:	f008 fd9a 	bl	8014d30 <iprintf>
 800c1fc:	e034      	b.n	800c268 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	60fb      	str	r3, [r7, #12]
 800c202:	e00a      	b.n	800c21a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	891a      	ldrh	r2, [r3, #8]
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	891b      	ldrh	r3, [r3, #8]
 800c20c:	4413      	add	r3, r2
 800c20e:	b29a      	uxth	r2, r3
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	60fb      	str	r3, [r7, #12]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1f0      	bne.n	800c204 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	891a      	ldrh	r2, [r3, #8]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	895b      	ldrh	r3, [r3, #10]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d006      	beq.n	800c23c <pbuf_cat+0x64>
 800c22e:	4b10      	ldr	r3, [pc, #64]	@ (800c270 <pbuf_cat+0x98>)
 800c230:	f240 3262 	movw	r2, #866	@ 0x362
 800c234:	4911      	ldr	r1, [pc, #68]	@ (800c27c <pbuf_cat+0xa4>)
 800c236:	4810      	ldr	r0, [pc, #64]	@ (800c278 <pbuf_cat+0xa0>)
 800c238:	f008 fd7a 	bl	8014d30 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d006      	beq.n	800c252 <pbuf_cat+0x7a>
 800c244:	4b0a      	ldr	r3, [pc, #40]	@ (800c270 <pbuf_cat+0x98>)
 800c246:	f240 3263 	movw	r2, #867	@ 0x363
 800c24a:	490d      	ldr	r1, [pc, #52]	@ (800c280 <pbuf_cat+0xa8>)
 800c24c:	480a      	ldr	r0, [pc, #40]	@ (800c278 <pbuf_cat+0xa0>)
 800c24e:	f008 fd6f 	bl	8014d30 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	891a      	ldrh	r2, [r3, #8]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	891b      	ldrh	r3, [r3, #8]
 800c25a:	4413      	add	r3, r2
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	683a      	ldr	r2, [r7, #0]
 800c266:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	08016124 	.word	0x08016124
 800c274:	08016318 	.word	0x08016318
 800c278:	08016184 	.word	0x08016184
 800c27c:	08016350 	.word	0x08016350
 800c280:	08016380 	.word	0x08016380

0800c284 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f7ff ffa1 	bl	800c1d8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c296:	6838      	ldr	r0, [r7, #0]
 800c298:	f7ff ff7c 	bl	800c194 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c29c:	bf00      	nop
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b086      	sub	sp, #24
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	617b      	str	r3, [r7, #20]
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d008      	beq.n	800c2ce <pbuf_copy+0x2a>
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d005      	beq.n	800c2ce <pbuf_copy+0x2a>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	891a      	ldrh	r2, [r3, #8]
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	891b      	ldrh	r3, [r3, #8]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d209      	bcs.n	800c2e2 <pbuf_copy+0x3e>
 800c2ce:	4b57      	ldr	r3, [pc, #348]	@ (800c42c <pbuf_copy+0x188>)
 800c2d0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800c2d4:	4956      	ldr	r1, [pc, #344]	@ (800c430 <pbuf_copy+0x18c>)
 800c2d6:	4857      	ldr	r0, [pc, #348]	@ (800c434 <pbuf_copy+0x190>)
 800c2d8:	f008 fd2a 	bl	8014d30 <iprintf>
 800c2dc:	f06f 030f 	mvn.w	r3, #15
 800c2e0:	e09f      	b.n	800c422 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	895b      	ldrh	r3, [r3, #10]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	1ad2      	subs	r2, r2, r3
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	895b      	ldrh	r3, [r3, #10]
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	1acb      	subs	r3, r1, r3
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d306      	bcc.n	800c308 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	895b      	ldrh	r3, [r3, #10]
 800c2fe:	461a      	mov	r2, r3
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	1ad3      	subs	r3, r2, r3
 800c304:	60fb      	str	r3, [r7, #12]
 800c306:	e005      	b.n	800c314 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	895b      	ldrh	r3, [r3, #10]
 800c30c:	461a      	mov	r2, r3
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	685a      	ldr	r2, [r3, #4]
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	18d0      	adds	r0, r2, r3
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	4413      	add	r3, r2
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	4619      	mov	r1, r3
 800c328:	f008 fddd 	bl	8014ee6 <memcpy>
    offset_to += len;
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	4413      	add	r3, r2
 800c332:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c334:	693a      	ldr	r2, [r7, #16]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	4413      	add	r3, r2
 800c33a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	895b      	ldrh	r3, [r3, #10]
 800c340:	461a      	mov	r2, r3
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	4293      	cmp	r3, r2
 800c346:	d906      	bls.n	800c356 <pbuf_copy+0xb2>
 800c348:	4b38      	ldr	r3, [pc, #224]	@ (800c42c <pbuf_copy+0x188>)
 800c34a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800c34e:	493a      	ldr	r1, [pc, #232]	@ (800c438 <pbuf_copy+0x194>)
 800c350:	4838      	ldr	r0, [pc, #224]	@ (800c434 <pbuf_copy+0x190>)
 800c352:	f008 fced 	bl	8014d30 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	895b      	ldrh	r3, [r3, #10]
 800c35a:	461a      	mov	r2, r3
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	4293      	cmp	r3, r2
 800c360:	d906      	bls.n	800c370 <pbuf_copy+0xcc>
 800c362:	4b32      	ldr	r3, [pc, #200]	@ (800c42c <pbuf_copy+0x188>)
 800c364:	f240 32da 	movw	r2, #986	@ 0x3da
 800c368:	4934      	ldr	r1, [pc, #208]	@ (800c43c <pbuf_copy+0x198>)
 800c36a:	4832      	ldr	r0, [pc, #200]	@ (800c434 <pbuf_copy+0x190>)
 800c36c:	f008 fce0 	bl	8014d30 <iprintf>
    if (offset_from >= p_from->len) {
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	895b      	ldrh	r3, [r3, #10]
 800c374:	461a      	mov	r2, r3
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	4293      	cmp	r3, r2
 800c37a:	d304      	bcc.n	800c386 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c37c:	2300      	movs	r3, #0
 800c37e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	895b      	ldrh	r3, [r3, #10]
 800c38a:	461a      	mov	r2, r3
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	4293      	cmp	r3, r2
 800c390:	d114      	bne.n	800c3bc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c392:	2300      	movs	r3, #0
 800c394:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10c      	bne.n	800c3bc <pbuf_copy+0x118>
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d009      	beq.n	800c3bc <pbuf_copy+0x118>
 800c3a8:	4b20      	ldr	r3, [pc, #128]	@ (800c42c <pbuf_copy+0x188>)
 800c3aa:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800c3ae:	4924      	ldr	r1, [pc, #144]	@ (800c440 <pbuf_copy+0x19c>)
 800c3b0:	4820      	ldr	r0, [pc, #128]	@ (800c434 <pbuf_copy+0x190>)
 800c3b2:	f008 fcbd 	bl	8014d30 <iprintf>
 800c3b6:	f06f 030f 	mvn.w	r3, #15
 800c3ba:	e032      	b.n	800c422 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d013      	beq.n	800c3ea <pbuf_copy+0x146>
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	895a      	ldrh	r2, [r3, #10]
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	891b      	ldrh	r3, [r3, #8]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d10d      	bne.n	800c3ea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d009      	beq.n	800c3ea <pbuf_copy+0x146>
 800c3d6:	4b15      	ldr	r3, [pc, #84]	@ (800c42c <pbuf_copy+0x188>)
 800c3d8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800c3dc:	4919      	ldr	r1, [pc, #100]	@ (800c444 <pbuf_copy+0x1a0>)
 800c3de:	4815      	ldr	r0, [pc, #84]	@ (800c434 <pbuf_copy+0x190>)
 800c3e0:	f008 fca6 	bl	8014d30 <iprintf>
 800c3e4:	f06f 0305 	mvn.w	r3, #5
 800c3e8:	e01b      	b.n	800c422 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d013      	beq.n	800c418 <pbuf_copy+0x174>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	895a      	ldrh	r2, [r3, #10]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	891b      	ldrh	r3, [r3, #8]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d10d      	bne.n	800c418 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d009      	beq.n	800c418 <pbuf_copy+0x174>
 800c404:	4b09      	ldr	r3, [pc, #36]	@ (800c42c <pbuf_copy+0x188>)
 800c406:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c40a:	490e      	ldr	r1, [pc, #56]	@ (800c444 <pbuf_copy+0x1a0>)
 800c40c:	4809      	ldr	r0, [pc, #36]	@ (800c434 <pbuf_copy+0x190>)
 800c40e:	f008 fc8f 	bl	8014d30 <iprintf>
 800c412:	f06f 0305 	mvn.w	r3, #5
 800c416:	e004      	b.n	800c422 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f47f af61 	bne.w	800c2e2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3718      	adds	r7, #24
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	08016124 	.word	0x08016124
 800c430:	080163cc 	.word	0x080163cc
 800c434:	08016184 	.word	0x08016184
 800c438:	080163fc 	.word	0x080163fc
 800c43c:	08016414 	.word	0x08016414
 800c440:	08016430 	.word	0x08016430
 800c444:	08016440 	.word	0x08016440

0800c448 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b088      	sub	sp, #32
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	4611      	mov	r1, r2
 800c454:	461a      	mov	r2, r3
 800c456:	460b      	mov	r3, r1
 800c458:	80fb      	strh	r3, [r7, #6]
 800c45a:	4613      	mov	r3, r2
 800c45c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c45e:	2300      	movs	r3, #0
 800c460:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c462:	2300      	movs	r3, #0
 800c464:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d108      	bne.n	800c47e <pbuf_copy_partial+0x36>
 800c46c:	4b2b      	ldr	r3, [pc, #172]	@ (800c51c <pbuf_copy_partial+0xd4>)
 800c46e:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c472:	492b      	ldr	r1, [pc, #172]	@ (800c520 <pbuf_copy_partial+0xd8>)
 800c474:	482b      	ldr	r0, [pc, #172]	@ (800c524 <pbuf_copy_partial+0xdc>)
 800c476:	f008 fc5b 	bl	8014d30 <iprintf>
 800c47a:	2300      	movs	r3, #0
 800c47c:	e04a      	b.n	800c514 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d108      	bne.n	800c496 <pbuf_copy_partial+0x4e>
 800c484:	4b25      	ldr	r3, [pc, #148]	@ (800c51c <pbuf_copy_partial+0xd4>)
 800c486:	f240 420b 	movw	r2, #1035	@ 0x40b
 800c48a:	4927      	ldr	r1, [pc, #156]	@ (800c528 <pbuf_copy_partial+0xe0>)
 800c48c:	4825      	ldr	r0, [pc, #148]	@ (800c524 <pbuf_copy_partial+0xdc>)
 800c48e:	f008 fc4f 	bl	8014d30 <iprintf>
 800c492:	2300      	movs	r3, #0
 800c494:	e03e      	b.n	800c514 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	61fb      	str	r3, [r7, #28]
 800c49a:	e034      	b.n	800c506 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c49c:	88bb      	ldrh	r3, [r7, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00a      	beq.n	800c4b8 <pbuf_copy_partial+0x70>
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	895b      	ldrh	r3, [r3, #10]
 800c4a6:	88ba      	ldrh	r2, [r7, #4]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d305      	bcc.n	800c4b8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	895b      	ldrh	r3, [r3, #10]
 800c4b0:	88ba      	ldrh	r2, [r7, #4]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	80bb      	strh	r3, [r7, #4]
 800c4b6:	e023      	b.n	800c500 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	895a      	ldrh	r2, [r3, #10]
 800c4bc:	88bb      	ldrh	r3, [r7, #4]
 800c4be:	1ad3      	subs	r3, r2, r3
 800c4c0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c4c2:	8b3a      	ldrh	r2, [r7, #24]
 800c4c4:	88fb      	ldrh	r3, [r7, #6]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d901      	bls.n	800c4ce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c4ca:	88fb      	ldrh	r3, [r7, #6]
 800c4cc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c4ce:	8b7b      	ldrh	r3, [r7, #26]
 800c4d0:	68ba      	ldr	r2, [r7, #8]
 800c4d2:	18d0      	adds	r0, r2, r3
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	685a      	ldr	r2, [r3, #4]
 800c4d8:	88bb      	ldrh	r3, [r7, #4]
 800c4da:	4413      	add	r3, r2
 800c4dc:	8b3a      	ldrh	r2, [r7, #24]
 800c4de:	4619      	mov	r1, r3
 800c4e0:	f008 fd01 	bl	8014ee6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c4e4:	8afa      	ldrh	r2, [r7, #22]
 800c4e6:	8b3b      	ldrh	r3, [r7, #24]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c4ec:	8b7a      	ldrh	r2, [r7, #26]
 800c4ee:	8b3b      	ldrh	r3, [r7, #24]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c4f4:	88fa      	ldrh	r2, [r7, #6]
 800c4f6:	8b3b      	ldrh	r3, [r7, #24]
 800c4f8:	1ad3      	subs	r3, r2, r3
 800c4fa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	61fb      	str	r3, [r7, #28]
 800c506:	88fb      	ldrh	r3, [r7, #6]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d002      	beq.n	800c512 <pbuf_copy_partial+0xca>
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1c4      	bne.n	800c49c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c512:	8afb      	ldrh	r3, [r7, #22]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3720      	adds	r7, #32
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	08016124 	.word	0x08016124
 800c520:	0801646c 	.word	0x0801646c
 800c524:	08016184 	.word	0x08016184
 800c528:	0801648c 	.word	0x0801648c

0800c52c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b088      	sub	sp, #32
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	4613      	mov	r3, r2
 800c538:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800c53a:	88fb      	ldrh	r3, [r7, #6]
 800c53c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800c53e:	2300      	movs	r3, #0
 800c540:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d109      	bne.n	800c55c <pbuf_take+0x30>
 800c548:	4b3a      	ldr	r3, [pc, #232]	@ (800c634 <pbuf_take+0x108>)
 800c54a:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800c54e:	493a      	ldr	r1, [pc, #232]	@ (800c638 <pbuf_take+0x10c>)
 800c550:	483a      	ldr	r0, [pc, #232]	@ (800c63c <pbuf_take+0x110>)
 800c552:	f008 fbed 	bl	8014d30 <iprintf>
 800c556:	f06f 030f 	mvn.w	r3, #15
 800c55a:	e067      	b.n	800c62c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d109      	bne.n	800c576 <pbuf_take+0x4a>
 800c562:	4b34      	ldr	r3, [pc, #208]	@ (800c634 <pbuf_take+0x108>)
 800c564:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800c568:	4935      	ldr	r1, [pc, #212]	@ (800c640 <pbuf_take+0x114>)
 800c56a:	4834      	ldr	r0, [pc, #208]	@ (800c63c <pbuf_take+0x110>)
 800c56c:	f008 fbe0 	bl	8014d30 <iprintf>
 800c570:	f06f 030f 	mvn.w	r3, #15
 800c574:	e05a      	b.n	800c62c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	891b      	ldrh	r3, [r3, #8]
 800c57a:	88fa      	ldrh	r2, [r7, #6]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d909      	bls.n	800c594 <pbuf_take+0x68>
 800c580:	4b2c      	ldr	r3, [pc, #176]	@ (800c634 <pbuf_take+0x108>)
 800c582:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800c586:	492f      	ldr	r1, [pc, #188]	@ (800c644 <pbuf_take+0x118>)
 800c588:	482c      	ldr	r0, [pc, #176]	@ (800c63c <pbuf_take+0x110>)
 800c58a:	f008 fbd1 	bl	8014d30 <iprintf>
 800c58e:	f04f 33ff 	mov.w	r3, #4294967295
 800c592:	e04b      	b.n	800c62c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d007      	beq.n	800c5aa <pbuf_take+0x7e>
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d004      	beq.n	800c5aa <pbuf_take+0x7e>
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	891b      	ldrh	r3, [r3, #8]
 800c5a4:	88fa      	ldrh	r2, [r7, #6]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d902      	bls.n	800c5b0 <pbuf_take+0x84>
    return ERR_ARG;
 800c5aa:	f06f 030f 	mvn.w	r3, #15
 800c5ae:	e03d      	b.n	800c62c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	61fb      	str	r3, [r7, #28]
 800c5b4:	e028      	b.n	800c608 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d106      	bne.n	800c5ca <pbuf_take+0x9e>
 800c5bc:	4b1d      	ldr	r3, [pc, #116]	@ (800c634 <pbuf_take+0x108>)
 800c5be:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800c5c2:	4921      	ldr	r1, [pc, #132]	@ (800c648 <pbuf_take+0x11c>)
 800c5c4:	481d      	ldr	r0, [pc, #116]	@ (800c63c <pbuf_take+0x110>)
 800c5c6:	f008 fbb3 	bl	8014d30 <iprintf>
    buf_copy_len = total_copy_len;
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	895b      	ldrh	r3, [r3, #10]
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d902      	bls.n	800c5e0 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	895b      	ldrh	r3, [r3, #10]
 800c5de:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	6858      	ldr	r0, [r3, #4]
 800c5e4:	68ba      	ldr	r2, [r7, #8]
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	69ba      	ldr	r2, [r7, #24]
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	f008 fc7a 	bl	8014ee6 <memcpy>
    total_copy_len -= buf_copy_len;
 800c5f2:	697a      	ldr	r2, [r7, #20]
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	1ad3      	subs	r3, r2, r3
 800c5f8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800c5fa:	693a      	ldr	r2, [r7, #16]
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	4413      	add	r3, r2
 800c600:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800c602:	69fb      	ldr	r3, [r7, #28]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	61fb      	str	r3, [r7, #28]
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1d3      	bne.n	800c5b6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d103      	bne.n	800c61c <pbuf_take+0xf0>
 800c614:	88fb      	ldrh	r3, [r7, #6]
 800c616:	693a      	ldr	r2, [r7, #16]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d006      	beq.n	800c62a <pbuf_take+0xfe>
 800c61c:	4b05      	ldr	r3, [pc, #20]	@ (800c634 <pbuf_take+0x108>)
 800c61e:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800c622:	490a      	ldr	r1, [pc, #40]	@ (800c64c <pbuf_take+0x120>)
 800c624:	4805      	ldr	r0, [pc, #20]	@ (800c63c <pbuf_take+0x110>)
 800c626:	f008 fb83 	bl	8014d30 <iprintf>
  return ERR_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3720      	adds	r7, #32
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	08016124 	.word	0x08016124
 800c638:	080164fc 	.word	0x080164fc
 800c63c:	08016184 	.word	0x08016184
 800c640:	08016514 	.word	0x08016514
 800c644:	08016530 	.word	0x08016530
 800c648:	08016550 	.word	0x08016550
 800c64c:	08016568 	.word	0x08016568

0800c650 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	4603      	mov	r3, r0
 800c658:	603a      	str	r2, [r7, #0]
 800c65a:	71fb      	strb	r3, [r7, #7]
 800c65c:	460b      	mov	r3, r1
 800c65e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	8919      	ldrh	r1, [r3, #8]
 800c664:	88ba      	ldrh	r2, [r7, #4]
 800c666:	79fb      	ldrb	r3, [r7, #7]
 800c668:	4618      	mov	r0, r3
 800c66a:	f7ff fa0f 	bl	800ba8c <pbuf_alloc>
 800c66e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d101      	bne.n	800c67a <pbuf_clone+0x2a>
    return NULL;
 800c676:	2300      	movs	r3, #0
 800c678:	e011      	b.n	800c69e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c67a:	6839      	ldr	r1, [r7, #0]
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f7ff fe11 	bl	800c2a4 <pbuf_copy>
 800c682:	4603      	mov	r3, r0
 800c684:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c686:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d006      	beq.n	800c69c <pbuf_clone+0x4c>
 800c68e:	4b06      	ldr	r3, [pc, #24]	@ (800c6a8 <pbuf_clone+0x58>)
 800c690:	f240 5224 	movw	r2, #1316	@ 0x524
 800c694:	4905      	ldr	r1, [pc, #20]	@ (800c6ac <pbuf_clone+0x5c>)
 800c696:	4806      	ldr	r0, [pc, #24]	@ (800c6b0 <pbuf_clone+0x60>)
 800c698:	f008 fb4a 	bl	8014d30 <iprintf>
  return q;
 800c69c:	68fb      	ldr	r3, [r7, #12]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	08016124 	.word	0x08016124
 800c6ac:	08016598 	.word	0x08016598
 800c6b0:	08016184 	.word	0x08016184

0800c6b4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c6b8:	f008 fa3a 	bl	8014b30 <rand>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	4b01      	ldr	r3, [pc, #4]	@ (800c6d4 <tcp_init+0x20>)
 800c6ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c6d0:	bf00      	nop
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	200000c0 	.word	0x200000c0

0800c6d8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	7d1b      	ldrb	r3, [r3, #20]
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d105      	bne.n	800c6f4 <tcp_free+0x1c>
 800c6e8:	4b06      	ldr	r3, [pc, #24]	@ (800c704 <tcp_free+0x2c>)
 800c6ea:	22d4      	movs	r2, #212	@ 0xd4
 800c6ec:	4906      	ldr	r1, [pc, #24]	@ (800c708 <tcp_free+0x30>)
 800c6ee:	4807      	ldr	r0, [pc, #28]	@ (800c70c <tcp_free+0x34>)
 800c6f0:	f008 fb1e 	bl	8014d30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c6f4:	6879      	ldr	r1, [r7, #4]
 800c6f6:	2001      	movs	r0, #1
 800c6f8:	f7fe fe36 	bl	800b368 <memp_free>
}
 800c6fc:	bf00      	nop
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	08016624 	.word	0x08016624
 800c708:	08016654 	.word	0x08016654
 800c70c:	08016668 	.word	0x08016668

0800c710 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	7d1b      	ldrb	r3, [r3, #20]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d105      	bne.n	800c72c <tcp_free_listen+0x1c>
 800c720:	4b06      	ldr	r3, [pc, #24]	@ (800c73c <tcp_free_listen+0x2c>)
 800c722:	22df      	movs	r2, #223	@ 0xdf
 800c724:	4906      	ldr	r1, [pc, #24]	@ (800c740 <tcp_free_listen+0x30>)
 800c726:	4807      	ldr	r0, [pc, #28]	@ (800c744 <tcp_free_listen+0x34>)
 800c728:	f008 fb02 	bl	8014d30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c72c:	6879      	ldr	r1, [r7, #4]
 800c72e:	2002      	movs	r0, #2
 800c730:	f7fe fe1a 	bl	800b368 <memp_free>
}
 800c734:	bf00      	nop
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	08016624 	.word	0x08016624
 800c740:	08016690 	.word	0x08016690
 800c744:	08016668 	.word	0x08016668

0800c748 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c74c:	f000 fea4 	bl	800d498 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c750:	4b07      	ldr	r3, [pc, #28]	@ (800c770 <tcp_tmr+0x28>)
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	3301      	adds	r3, #1
 800c756:	b2da      	uxtb	r2, r3
 800c758:	4b05      	ldr	r3, [pc, #20]	@ (800c770 <tcp_tmr+0x28>)
 800c75a:	701a      	strb	r2, [r3, #0]
 800c75c:	4b04      	ldr	r3, [pc, #16]	@ (800c770 <tcp_tmr+0x28>)
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	f003 0301 	and.w	r3, r3, #1
 800c764:	2b00      	cmp	r3, #0
 800c766:	d001      	beq.n	800c76c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c768:	f000 fb54 	bl	800ce14 <tcp_slowtmr>
  }
}
 800c76c:	bf00      	nop
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	2000b279 	.word	0x2000b279

0800c774 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d105      	bne.n	800c790 <tcp_remove_listener+0x1c>
 800c784:	4b0d      	ldr	r3, [pc, #52]	@ (800c7bc <tcp_remove_listener+0x48>)
 800c786:	22ff      	movs	r2, #255	@ 0xff
 800c788:	490d      	ldr	r1, [pc, #52]	@ (800c7c0 <tcp_remove_listener+0x4c>)
 800c78a:	480e      	ldr	r0, [pc, #56]	@ (800c7c4 <tcp_remove_listener+0x50>)
 800c78c:	f008 fad0 	bl	8014d30 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	60fb      	str	r3, [r7, #12]
 800c794:	e00a      	b.n	800c7ac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c79a:	683a      	ldr	r2, [r7, #0]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d102      	bne.n	800c7a6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	60fb      	str	r3, [r7, #12]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d1f1      	bne.n	800c796 <tcp_remove_listener+0x22>
    }
  }
}
 800c7b2:	bf00      	nop
 800c7b4:	bf00      	nop
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	08016624 	.word	0x08016624
 800c7c0:	080166ac 	.word	0x080166ac
 800c7c4:	08016668 	.word	0x08016668

0800c7c8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d106      	bne.n	800c7e4 <tcp_listen_closed+0x1c>
 800c7d6:	4b14      	ldr	r3, [pc, #80]	@ (800c828 <tcp_listen_closed+0x60>)
 800c7d8:	f240 1211 	movw	r2, #273	@ 0x111
 800c7dc:	4913      	ldr	r1, [pc, #76]	@ (800c82c <tcp_listen_closed+0x64>)
 800c7de:	4814      	ldr	r0, [pc, #80]	@ (800c830 <tcp_listen_closed+0x68>)
 800c7e0:	f008 faa6 	bl	8014d30 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	7d1b      	ldrb	r3, [r3, #20]
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d006      	beq.n	800c7fa <tcp_listen_closed+0x32>
 800c7ec:	4b0e      	ldr	r3, [pc, #56]	@ (800c828 <tcp_listen_closed+0x60>)
 800c7ee:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c7f2:	4910      	ldr	r1, [pc, #64]	@ (800c834 <tcp_listen_closed+0x6c>)
 800c7f4:	480e      	ldr	r0, [pc, #56]	@ (800c830 <tcp_listen_closed+0x68>)
 800c7f6:	f008 fa9b 	bl	8014d30 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	60fb      	str	r3, [r7, #12]
 800c7fe:	e00b      	b.n	800c818 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c800:	4a0d      	ldr	r2, [pc, #52]	@ (800c838 <tcp_listen_closed+0x70>)
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	6879      	ldr	r1, [r7, #4]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7ff ffb1 	bl	800c774 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	3301      	adds	r3, #1
 800c816:	60fb      	str	r3, [r7, #12]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2b03      	cmp	r3, #3
 800c81c:	d9f0      	bls.n	800c800 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c81e:	bf00      	nop
 800c820:	bf00      	nop
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	08016624 	.word	0x08016624
 800c82c:	080166d4 	.word	0x080166d4
 800c830:	08016668 	.word	0x08016668
 800c834:	080166e0 	.word	0x080166e0
 800c838:	0801860c 	.word	0x0801860c

0800c83c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c83c:	b5b0      	push	{r4, r5, r7, lr}
 800c83e:	b088      	sub	sp, #32
 800c840:	af04      	add	r7, sp, #16
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	460b      	mov	r3, r1
 800c846:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d106      	bne.n	800c85c <tcp_close_shutdown+0x20>
 800c84e:	4b63      	ldr	r3, [pc, #396]	@ (800c9dc <tcp_close_shutdown+0x1a0>)
 800c850:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c854:	4962      	ldr	r1, [pc, #392]	@ (800c9e0 <tcp_close_shutdown+0x1a4>)
 800c856:	4863      	ldr	r0, [pc, #396]	@ (800c9e4 <tcp_close_shutdown+0x1a8>)
 800c858:	f008 fa6a 	bl	8014d30 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c85c:	78fb      	ldrb	r3, [r7, #3]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d066      	beq.n	800c930 <tcp_close_shutdown+0xf4>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	7d1b      	ldrb	r3, [r3, #20]
 800c866:	2b04      	cmp	r3, #4
 800c868:	d003      	beq.n	800c872 <tcp_close_shutdown+0x36>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	7d1b      	ldrb	r3, [r3, #20]
 800c86e:	2b07      	cmp	r3, #7
 800c870:	d15e      	bne.n	800c930 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c876:	2b00      	cmp	r3, #0
 800c878:	d104      	bne.n	800c884 <tcp_close_shutdown+0x48>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c87e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c882:	d055      	beq.n	800c930 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	8b5b      	ldrh	r3, [r3, #26]
 800c888:	f003 0310 	and.w	r3, r3, #16
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d106      	bne.n	800c89e <tcp_close_shutdown+0x62>
 800c890:	4b52      	ldr	r3, [pc, #328]	@ (800c9dc <tcp_close_shutdown+0x1a0>)
 800c892:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800c896:	4954      	ldr	r1, [pc, #336]	@ (800c9e8 <tcp_close_shutdown+0x1ac>)
 800c898:	4852      	ldr	r0, [pc, #328]	@ (800c9e4 <tcp_close_shutdown+0x1a8>)
 800c89a:	f008 fa49 	bl	8014d30 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c8a6:	687d      	ldr	r5, [r7, #4]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	8ad2      	ldrh	r2, [r2, #22]
 800c8b0:	6879      	ldr	r1, [r7, #4]
 800c8b2:	8b09      	ldrh	r1, [r1, #24]
 800c8b4:	9102      	str	r1, [sp, #8]
 800c8b6:	9201      	str	r2, [sp, #4]
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	462b      	mov	r3, r5
 800c8bc:	4622      	mov	r2, r4
 800c8be:	4601      	mov	r1, r0
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f004 fe8d 	bl	80115e0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f001 f8c8 	bl	800da5c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c8cc:	4b47      	ldr	r3, [pc, #284]	@ (800c9ec <tcp_close_shutdown+0x1b0>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d105      	bne.n	800c8e2 <tcp_close_shutdown+0xa6>
 800c8d6:	4b45      	ldr	r3, [pc, #276]	@ (800c9ec <tcp_close_shutdown+0x1b0>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	4a43      	ldr	r2, [pc, #268]	@ (800c9ec <tcp_close_shutdown+0x1b0>)
 800c8de:	6013      	str	r3, [r2, #0]
 800c8e0:	e013      	b.n	800c90a <tcp_close_shutdown+0xce>
 800c8e2:	4b42      	ldr	r3, [pc, #264]	@ (800c9ec <tcp_close_shutdown+0x1b0>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	60fb      	str	r3, [r7, #12]
 800c8e8:	e00c      	b.n	800c904 <tcp_close_shutdown+0xc8>
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d104      	bne.n	800c8fe <tcp_close_shutdown+0xc2>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	68da      	ldr	r2, [r3, #12]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	60da      	str	r2, [r3, #12]
 800c8fc:	e005      	b.n	800c90a <tcp_close_shutdown+0xce>
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d1ef      	bne.n	800c8ea <tcp_close_shutdown+0xae>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2200      	movs	r2, #0
 800c90e:	60da      	str	r2, [r3, #12]
 800c910:	4b37      	ldr	r3, [pc, #220]	@ (800c9f0 <tcp_close_shutdown+0x1b4>)
 800c912:	2201      	movs	r2, #1
 800c914:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c916:	4b37      	ldr	r3, [pc, #220]	@ (800c9f4 <tcp_close_shutdown+0x1b8>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d102      	bne.n	800c926 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c920:	f003 fd5c 	bl	80103dc <tcp_trigger_input_pcb_close>
 800c924:	e002      	b.n	800c92c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7ff fed6 	bl	800c6d8 <tcp_free>
      }
      return ERR_OK;
 800c92c:	2300      	movs	r3, #0
 800c92e:	e050      	b.n	800c9d2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	7d1b      	ldrb	r3, [r3, #20]
 800c934:	2b02      	cmp	r3, #2
 800c936:	d03b      	beq.n	800c9b0 <tcp_close_shutdown+0x174>
 800c938:	2b02      	cmp	r3, #2
 800c93a:	dc44      	bgt.n	800c9c6 <tcp_close_shutdown+0x18a>
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d002      	beq.n	800c946 <tcp_close_shutdown+0x10a>
 800c940:	2b01      	cmp	r3, #1
 800c942:	d02a      	beq.n	800c99a <tcp_close_shutdown+0x15e>
 800c944:	e03f      	b.n	800c9c6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	8adb      	ldrh	r3, [r3, #22]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d021      	beq.n	800c992 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c94e:	4b2a      	ldr	r3, [pc, #168]	@ (800c9f8 <tcp_close_shutdown+0x1bc>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	429a      	cmp	r2, r3
 800c956:	d105      	bne.n	800c964 <tcp_close_shutdown+0x128>
 800c958:	4b27      	ldr	r3, [pc, #156]	@ (800c9f8 <tcp_close_shutdown+0x1bc>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68db      	ldr	r3, [r3, #12]
 800c95e:	4a26      	ldr	r2, [pc, #152]	@ (800c9f8 <tcp_close_shutdown+0x1bc>)
 800c960:	6013      	str	r3, [r2, #0]
 800c962:	e013      	b.n	800c98c <tcp_close_shutdown+0x150>
 800c964:	4b24      	ldr	r3, [pc, #144]	@ (800c9f8 <tcp_close_shutdown+0x1bc>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	60bb      	str	r3, [r7, #8]
 800c96a:	e00c      	b.n	800c986 <tcp_close_shutdown+0x14a>
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	429a      	cmp	r2, r3
 800c974:	d104      	bne.n	800c980 <tcp_close_shutdown+0x144>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	68da      	ldr	r2, [r3, #12]
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	60da      	str	r2, [r3, #12]
 800c97e:	e005      	b.n	800c98c <tcp_close_shutdown+0x150>
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	60bb      	str	r3, [r7, #8]
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d1ef      	bne.n	800c96c <tcp_close_shutdown+0x130>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2200      	movs	r2, #0
 800c990:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f7ff fea0 	bl	800c6d8 <tcp_free>
      break;
 800c998:	e01a      	b.n	800c9d0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7ff ff14 	bl	800c7c8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c9a0:	6879      	ldr	r1, [r7, #4]
 800c9a2:	4816      	ldr	r0, [pc, #88]	@ (800c9fc <tcp_close_shutdown+0x1c0>)
 800c9a4:	f001 f8aa 	bl	800dafc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7ff feb1 	bl	800c710 <tcp_free_listen>
      break;
 800c9ae:	e00f      	b.n	800c9d0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c9b0:	6879      	ldr	r1, [r7, #4]
 800c9b2:	480e      	ldr	r0, [pc, #56]	@ (800c9ec <tcp_close_shutdown+0x1b0>)
 800c9b4:	f001 f8a2 	bl	800dafc <tcp_pcb_remove>
 800c9b8:	4b0d      	ldr	r3, [pc, #52]	@ (800c9f0 <tcp_close_shutdown+0x1b4>)
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f7ff fe8a 	bl	800c6d8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c9c4:	e004      	b.n	800c9d0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 f81a 	bl	800ca00 <tcp_close_shutdown_fin>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	e000      	b.n	800c9d2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c9d0:	2300      	movs	r3, #0
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bdb0      	pop	{r4, r5, r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	08016624 	.word	0x08016624
 800c9e0:	080166f8 	.word	0x080166f8
 800c9e4:	08016668 	.word	0x08016668
 800c9e8:	08016718 	.word	0x08016718
 800c9ec:	2000b270 	.word	0x2000b270
 800c9f0:	2000b278 	.word	0x2000b278
 800c9f4:	2000b2b0 	.word	0x2000b2b0
 800c9f8:	2000b268 	.word	0x2000b268
 800c9fc:	2000b26c 	.word	0x2000b26c

0800ca00 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d106      	bne.n	800ca1c <tcp_close_shutdown_fin+0x1c>
 800ca0e:	4b2e      	ldr	r3, [pc, #184]	@ (800cac8 <tcp_close_shutdown_fin+0xc8>)
 800ca10:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800ca14:	492d      	ldr	r1, [pc, #180]	@ (800cacc <tcp_close_shutdown_fin+0xcc>)
 800ca16:	482e      	ldr	r0, [pc, #184]	@ (800cad0 <tcp_close_shutdown_fin+0xd0>)
 800ca18:	f008 f98a 	bl	8014d30 <iprintf>

  switch (pcb->state) {
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	7d1b      	ldrb	r3, [r3, #20]
 800ca20:	2b07      	cmp	r3, #7
 800ca22:	d020      	beq.n	800ca66 <tcp_close_shutdown_fin+0x66>
 800ca24:	2b07      	cmp	r3, #7
 800ca26:	dc2b      	bgt.n	800ca80 <tcp_close_shutdown_fin+0x80>
 800ca28:	2b03      	cmp	r3, #3
 800ca2a:	d002      	beq.n	800ca32 <tcp_close_shutdown_fin+0x32>
 800ca2c:	2b04      	cmp	r3, #4
 800ca2e:	d00d      	beq.n	800ca4c <tcp_close_shutdown_fin+0x4c>
 800ca30:	e026      	b.n	800ca80 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f003 fee2 	bl	80107fc <tcp_send_fin>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d11f      	bne.n	800ca84 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2205      	movs	r2, #5
 800ca48:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca4a:	e01b      	b.n	800ca84 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f003 fed5 	bl	80107fc <tcp_send_fin>
 800ca52:	4603      	mov	r3, r0
 800ca54:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d114      	bne.n	800ca88 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2205      	movs	r2, #5
 800ca62:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca64:	e010      	b.n	800ca88 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f003 fec8 	bl	80107fc <tcp_send_fin>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d109      	bne.n	800ca8c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2209      	movs	r2, #9
 800ca7c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca7e:	e005      	b.n	800ca8c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ca80:	2300      	movs	r3, #0
 800ca82:	e01c      	b.n	800cabe <tcp_close_shutdown_fin+0xbe>
      break;
 800ca84:	bf00      	nop
 800ca86:	e002      	b.n	800ca8e <tcp_close_shutdown_fin+0x8e>
      break;
 800ca88:	bf00      	nop
 800ca8a:	e000      	b.n	800ca8e <tcp_close_shutdown_fin+0x8e>
      break;
 800ca8c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ca8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d103      	bne.n	800ca9e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f003 ffee 	bl	8010a78 <tcp_output>
 800ca9c:	e00d      	b.n	800caba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ca9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa6:	d108      	bne.n	800caba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	8b5b      	ldrh	r3, [r3, #26]
 800caac:	f043 0308 	orr.w	r3, r3, #8
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cab6:	2300      	movs	r3, #0
 800cab8:	e001      	b.n	800cabe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800caba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	08016624 	.word	0x08016624
 800cacc:	080166d4 	.word	0x080166d4
 800cad0:	08016668 	.word	0x08016668

0800cad4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d109      	bne.n	800caf6 <tcp_close+0x22>
 800cae2:	4b0f      	ldr	r3, [pc, #60]	@ (800cb20 <tcp_close+0x4c>)
 800cae4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800cae8:	490e      	ldr	r1, [pc, #56]	@ (800cb24 <tcp_close+0x50>)
 800caea:	480f      	ldr	r0, [pc, #60]	@ (800cb28 <tcp_close+0x54>)
 800caec:	f008 f920 	bl	8014d30 <iprintf>
 800caf0:	f06f 030f 	mvn.w	r3, #15
 800caf4:	e00f      	b.n	800cb16 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	7d1b      	ldrb	r3, [r3, #20]
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d006      	beq.n	800cb0c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	8b5b      	ldrh	r3, [r3, #26]
 800cb02:	f043 0310 	orr.w	r3, r3, #16
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cb0c:	2101      	movs	r1, #1
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f7ff fe94 	bl	800c83c <tcp_close_shutdown>
 800cb14:	4603      	mov	r3, r0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3708      	adds	r7, #8
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	08016624 	.word	0x08016624
 800cb24:	08016734 	.word	0x08016734
 800cb28:	08016668 	.word	0x08016668

0800cb2c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b08e      	sub	sp, #56	@ 0x38
 800cb30:	af04      	add	r7, sp, #16
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d107      	bne.n	800cb4c <tcp_abandon+0x20>
 800cb3c:	4b52      	ldr	r3, [pc, #328]	@ (800cc88 <tcp_abandon+0x15c>)
 800cb3e:	f240 223d 	movw	r2, #573	@ 0x23d
 800cb42:	4952      	ldr	r1, [pc, #328]	@ (800cc8c <tcp_abandon+0x160>)
 800cb44:	4852      	ldr	r0, [pc, #328]	@ (800cc90 <tcp_abandon+0x164>)
 800cb46:	f008 f8f3 	bl	8014d30 <iprintf>
 800cb4a:	e099      	b.n	800cc80 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	7d1b      	ldrb	r3, [r3, #20]
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d106      	bne.n	800cb62 <tcp_abandon+0x36>
 800cb54:	4b4c      	ldr	r3, [pc, #304]	@ (800cc88 <tcp_abandon+0x15c>)
 800cb56:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800cb5a:	494e      	ldr	r1, [pc, #312]	@ (800cc94 <tcp_abandon+0x168>)
 800cb5c:	484c      	ldr	r0, [pc, #304]	@ (800cc90 <tcp_abandon+0x164>)
 800cb5e:	f008 f8e7 	bl	8014d30 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	7d1b      	ldrb	r3, [r3, #20]
 800cb66:	2b0a      	cmp	r3, #10
 800cb68:	d107      	bne.n	800cb7a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cb6a:	6879      	ldr	r1, [r7, #4]
 800cb6c:	484a      	ldr	r0, [pc, #296]	@ (800cc98 <tcp_abandon+0x16c>)
 800cb6e:	f000 ffc5 	bl	800dafc <tcp_pcb_remove>
    tcp_free(pcb);
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f7ff fdb0 	bl	800c6d8 <tcp_free>
 800cb78:	e082      	b.n	800cc80 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb86:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb8c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb94:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	7d1b      	ldrb	r3, [r3, #20]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d126      	bne.n	800cbf2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	8adb      	ldrh	r3, [r3, #22]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d02e      	beq.n	800cc0a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cbac:	4b3b      	ldr	r3, [pc, #236]	@ (800cc9c <tcp_abandon+0x170>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d105      	bne.n	800cbc2 <tcp_abandon+0x96>
 800cbb6:	4b39      	ldr	r3, [pc, #228]	@ (800cc9c <tcp_abandon+0x170>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	4a37      	ldr	r2, [pc, #220]	@ (800cc9c <tcp_abandon+0x170>)
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	e013      	b.n	800cbea <tcp_abandon+0xbe>
 800cbc2:	4b36      	ldr	r3, [pc, #216]	@ (800cc9c <tcp_abandon+0x170>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	61fb      	str	r3, [r7, #28]
 800cbc8:	e00c      	b.n	800cbe4 <tcp_abandon+0xb8>
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d104      	bne.n	800cbde <tcp_abandon+0xb2>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	68da      	ldr	r2, [r3, #12]
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	60da      	str	r2, [r3, #12]
 800cbdc:	e005      	b.n	800cbea <tcp_abandon+0xbe>
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	61fb      	str	r3, [r7, #28]
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1ef      	bne.n	800cbca <tcp_abandon+0x9e>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	60da      	str	r2, [r3, #12]
 800cbf0:	e00b      	b.n	800cc0a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	8adb      	ldrh	r3, [r3, #22]
 800cbfa:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cbfc:	6879      	ldr	r1, [r7, #4]
 800cbfe:	4828      	ldr	r0, [pc, #160]	@ (800cca0 <tcp_abandon+0x174>)
 800cc00:	f000 ff7c 	bl	800dafc <tcp_pcb_remove>
 800cc04:	4b27      	ldr	r3, [pc, #156]	@ (800cca4 <tcp_abandon+0x178>)
 800cc06:	2201      	movs	r2, #1
 800cc08:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d004      	beq.n	800cc1c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc16:	4618      	mov	r0, r3
 800cc18:	f000 fd1e 	bl	800d658 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d004      	beq.n	800cc2e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f000 fd15 	bl	800d658 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d004      	beq.n	800cc40 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f000 fd0c 	bl	800d658 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cc40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00e      	beq.n	800cc64 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cc46:	6879      	ldr	r1, [r7, #4]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	3304      	adds	r3, #4
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	8b12      	ldrh	r2, [r2, #24]
 800cc50:	9202      	str	r2, [sp, #8]
 800cc52:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cc54:	9201      	str	r2, [sp, #4]
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	460b      	mov	r3, r1
 800cc5a:	697a      	ldr	r2, [r7, #20]
 800cc5c:	69b9      	ldr	r1, [r7, #24]
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f004 fcbe 	bl	80115e0 <tcp_rst>
    }
    last_state = pcb->state;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	7d1b      	ldrb	r3, [r3, #20]
 800cc68:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f7ff fd34 	bl	800c6d8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d004      	beq.n	800cc80 <tcp_abandon+0x154>
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	f06f 010c 	mvn.w	r1, #12
 800cc7c:	68f8      	ldr	r0, [r7, #12]
 800cc7e:	4798      	blx	r3
  }
}
 800cc80:	3728      	adds	r7, #40	@ 0x28
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	08016624 	.word	0x08016624
 800cc8c:	08016768 	.word	0x08016768
 800cc90:	08016668 	.word	0x08016668
 800cc94:	08016784 	.word	0x08016784
 800cc98:	2000b274 	.word	0x2000b274
 800cc9c:	2000b268 	.word	0x2000b268
 800cca0:	2000b270 	.word	0x2000b270
 800cca4:	2000b278 	.word	0x2000b278

0800cca8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ccb0:	2101      	movs	r1, #1
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f7ff ff3a 	bl	800cb2c <tcp_abandon>
}
 800ccb8:	bf00      	nop
 800ccba:	3708      	adds	r7, #8
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d106      	bne.n	800ccdc <tcp_update_rcv_ann_wnd+0x1c>
 800ccce:	4b25      	ldr	r3, [pc, #148]	@ (800cd64 <tcp_update_rcv_ann_wnd+0xa4>)
 800ccd0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800ccd4:	4924      	ldr	r1, [pc, #144]	@ (800cd68 <tcp_update_rcv_ann_wnd+0xa8>)
 800ccd6:	4825      	ldr	r0, [pc, #148]	@ (800cd6c <tcp_update_rcv_ann_wnd+0xac>)
 800ccd8:	f008 f82a 	bl	8014d30 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800cce4:	4413      	add	r3, r2
 800cce6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800ccf0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800ccf4:	bf28      	it	cs
 800ccf6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800ccfa:	b292      	uxth	r2, r2
 800ccfc:	4413      	add	r3, r2
 800ccfe:	68fa      	ldr	r2, [r7, #12]
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	db08      	blt.n	800cd18 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd12:	68fa      	ldr	r2, [r7, #12]
 800cd14:	1ad3      	subs	r3, r2, r3
 800cd16:	e020      	b.n	800cd5a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd20:	1ad3      	subs	r3, r2, r3
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	dd03      	ble.n	800cd2e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cd2c:	e014      	b.n	800cd58 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd36:	1ad3      	subs	r3, r2, r3
 800cd38:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd40:	d306      	bcc.n	800cd50 <tcp_update_rcv_ann_wnd+0x90>
 800cd42:	4b08      	ldr	r3, [pc, #32]	@ (800cd64 <tcp_update_rcv_ann_wnd+0xa4>)
 800cd44:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800cd48:	4909      	ldr	r1, [pc, #36]	@ (800cd70 <tcp_update_rcv_ann_wnd+0xb0>)
 800cd4a:	4808      	ldr	r0, [pc, #32]	@ (800cd6c <tcp_update_rcv_ann_wnd+0xac>)
 800cd4c:	f007 fff0 	bl	8014d30 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	b29a      	uxth	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800cd58:	2300      	movs	r3, #0
  }
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	08016624 	.word	0x08016624
 800cd68:	08016880 	.word	0x08016880
 800cd6c:	08016668 	.word	0x08016668
 800cd70:	080168a4 	.word	0x080168a4

0800cd74 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d107      	bne.n	800cd96 <tcp_recved+0x22>
 800cd86:	4b1f      	ldr	r3, [pc, #124]	@ (800ce04 <tcp_recved+0x90>)
 800cd88:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800cd8c:	491e      	ldr	r1, [pc, #120]	@ (800ce08 <tcp_recved+0x94>)
 800cd8e:	481f      	ldr	r0, [pc, #124]	@ (800ce0c <tcp_recved+0x98>)
 800cd90:	f007 ffce 	bl	8014d30 <iprintf>
 800cd94:	e032      	b.n	800cdfc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	7d1b      	ldrb	r3, [r3, #20]
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d106      	bne.n	800cdac <tcp_recved+0x38>
 800cd9e:	4b19      	ldr	r3, [pc, #100]	@ (800ce04 <tcp_recved+0x90>)
 800cda0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800cda4:	491a      	ldr	r1, [pc, #104]	@ (800ce10 <tcp_recved+0x9c>)
 800cda6:	4819      	ldr	r0, [pc, #100]	@ (800ce0c <tcp_recved+0x98>)
 800cda8:	f007 ffc2 	bl	8014d30 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cdb0:	887b      	ldrh	r3, [r7, #2]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cdb6:	89fb      	ldrh	r3, [r7, #14]
 800cdb8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cdbc:	d804      	bhi.n	800cdc8 <tcp_recved+0x54>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cdc2:	89fa      	ldrh	r2, [r7, #14]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d204      	bcs.n	800cdd2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800cdce:	851a      	strh	r2, [r3, #40]	@ 0x28
 800cdd0:	e002      	b.n	800cdd8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	89fa      	ldrh	r2, [r7, #14]
 800cdd6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f7ff ff71 	bl	800ccc0 <tcp_update_rcv_ann_wnd>
 800cdde:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800cde6:	d309      	bcc.n	800cdfc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	8b5b      	ldrh	r3, [r3, #26]
 800cdec:	f043 0302 	orr.w	r3, r3, #2
 800cdf0:	b29a      	uxth	r2, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f003 fe3e 	bl	8010a78 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	08016624 	.word	0x08016624
 800ce08:	080168c0 	.word	0x080168c0
 800ce0c:	08016668 	.word	0x08016668
 800ce10:	080168d8 	.word	0x080168d8

0800ce14 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ce14:	b5b0      	push	{r4, r5, r7, lr}
 800ce16:	b090      	sub	sp, #64	@ 0x40
 800ce18:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800ce20:	4b95      	ldr	r3, [pc, #596]	@ (800d078 <tcp_slowtmr+0x264>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	3301      	adds	r3, #1
 800ce26:	4a94      	ldr	r2, [pc, #592]	@ (800d078 <tcp_slowtmr+0x264>)
 800ce28:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ce2a:	4b94      	ldr	r3, [pc, #592]	@ (800d07c <tcp_slowtmr+0x268>)
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	4b92      	ldr	r3, [pc, #584]	@ (800d07c <tcp_slowtmr+0x268>)
 800ce34:	701a      	strb	r2, [r3, #0]
 800ce36:	e000      	b.n	800ce3a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800ce38:	bf00      	nop
  prev = NULL;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800ce3e:	4b90      	ldr	r3, [pc, #576]	@ (800d080 <tcp_slowtmr+0x26c>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ce44:	e29f      	b.n	800d386 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ce46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce48:	7d1b      	ldrb	r3, [r3, #20]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d106      	bne.n	800ce5c <tcp_slowtmr+0x48>
 800ce4e:	4b8d      	ldr	r3, [pc, #564]	@ (800d084 <tcp_slowtmr+0x270>)
 800ce50:	f240 42be 	movw	r2, #1214	@ 0x4be
 800ce54:	498c      	ldr	r1, [pc, #560]	@ (800d088 <tcp_slowtmr+0x274>)
 800ce56:	488d      	ldr	r0, [pc, #564]	@ (800d08c <tcp_slowtmr+0x278>)
 800ce58:	f007 ff6a 	bl	8014d30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ce5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce5e:	7d1b      	ldrb	r3, [r3, #20]
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d106      	bne.n	800ce72 <tcp_slowtmr+0x5e>
 800ce64:	4b87      	ldr	r3, [pc, #540]	@ (800d084 <tcp_slowtmr+0x270>)
 800ce66:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800ce6a:	4989      	ldr	r1, [pc, #548]	@ (800d090 <tcp_slowtmr+0x27c>)
 800ce6c:	4887      	ldr	r0, [pc, #540]	@ (800d08c <tcp_slowtmr+0x278>)
 800ce6e:	f007 ff5f 	bl	8014d30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ce72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce74:	7d1b      	ldrb	r3, [r3, #20]
 800ce76:	2b0a      	cmp	r3, #10
 800ce78:	d106      	bne.n	800ce88 <tcp_slowtmr+0x74>
 800ce7a:	4b82      	ldr	r3, [pc, #520]	@ (800d084 <tcp_slowtmr+0x270>)
 800ce7c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800ce80:	4984      	ldr	r1, [pc, #528]	@ (800d094 <tcp_slowtmr+0x280>)
 800ce82:	4882      	ldr	r0, [pc, #520]	@ (800d08c <tcp_slowtmr+0x278>)
 800ce84:	f007 ff54 	bl	8014d30 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ce88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce8a:	7f9a      	ldrb	r2, [r3, #30]
 800ce8c:	4b7b      	ldr	r3, [pc, #492]	@ (800d07c <tcp_slowtmr+0x268>)
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d105      	bne.n	800cea0 <tcp_slowtmr+0x8c>
      prev = pcb;
 800ce94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce96:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ce98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800ce9e:	e272      	b.n	800d386 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800cea0:	4b76      	ldr	r3, [pc, #472]	@ (800d07c <tcp_slowtmr+0x268>)
 800cea2:	781a      	ldrb	r2, [r3, #0]
 800cea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cea6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ceb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb6:	7d1b      	ldrb	r3, [r3, #20]
 800ceb8:	2b02      	cmp	r3, #2
 800ceba:	d10a      	bne.n	800ced2 <tcp_slowtmr+0xbe>
 800cebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cebe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cec2:	2b05      	cmp	r3, #5
 800cec4:	d905      	bls.n	800ced2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800cec6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ceca:	3301      	adds	r3, #1
 800cecc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ced0:	e11e      	b.n	800d110 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ced2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ced8:	2b0b      	cmp	r3, #11
 800ceda:	d905      	bls.n	800cee8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800cedc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cee0:	3301      	adds	r3, #1
 800cee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cee6:	e113      	b.n	800d110 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800cee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceea:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d075      	beq.n	800cfde <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d006      	beq.n	800cf08 <tcp_slowtmr+0xf4>
 800cefa:	4b62      	ldr	r3, [pc, #392]	@ (800d084 <tcp_slowtmr+0x270>)
 800cefc:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800cf00:	4965      	ldr	r1, [pc, #404]	@ (800d098 <tcp_slowtmr+0x284>)
 800cf02:	4862      	ldr	r0, [pc, #392]	@ (800d08c <tcp_slowtmr+0x278>)
 800cf04:	f007 ff14 	bl	8014d30 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cf08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d106      	bne.n	800cf1e <tcp_slowtmr+0x10a>
 800cf10:	4b5c      	ldr	r3, [pc, #368]	@ (800d084 <tcp_slowtmr+0x270>)
 800cf12:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800cf16:	4961      	ldr	r1, [pc, #388]	@ (800d09c <tcp_slowtmr+0x288>)
 800cf18:	485c      	ldr	r0, [pc, #368]	@ (800d08c <tcp_slowtmr+0x278>)
 800cf1a:	f007 ff09 	bl	8014d30 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cf1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf20:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800cf24:	2b0b      	cmp	r3, #11
 800cf26:	d905      	bls.n	800cf34 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800cf28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cf32:	e0ed      	b.n	800d110 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cf34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf36:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cf3a:	3b01      	subs	r3, #1
 800cf3c:	4a58      	ldr	r2, [pc, #352]	@ (800d0a0 <tcp_slowtmr+0x28c>)
 800cf3e:	5cd3      	ldrb	r3, [r2, r3]
 800cf40:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cf42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf44:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800cf48:	7c7a      	ldrb	r2, [r7, #17]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d907      	bls.n	800cf5e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800cf4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf50:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800cf54:	3301      	adds	r3, #1
 800cf56:	b2da      	uxtb	r2, r3
 800cf58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf5a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800cf5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf60:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800cf64:	7c7a      	ldrb	r2, [r7, #17]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	f200 80d2 	bhi.w	800d110 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800cf70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d108      	bne.n	800cf8c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cf7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf7c:	f004 fc24 	bl	80117c8 <tcp_zero_window_probe>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d014      	beq.n	800cfb0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800cf86:	2300      	movs	r3, #0
 800cf88:	623b      	str	r3, [r7, #32]
 800cf8a:	e011      	b.n	800cfb0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cf8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cf92:	4619      	mov	r1, r3
 800cf94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf96:	f003 fae9 	bl	801056c <tcp_split_unsent_seg>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d107      	bne.n	800cfb0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800cfa0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cfa2:	f003 fd69 	bl	8010a78 <tcp_output>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d101      	bne.n	800cfb0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800cfac:	2300      	movs	r3, #0
 800cfae:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800cfb0:	6a3b      	ldr	r3, [r7, #32]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f000 80ac 	beq.w	800d110 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800cfb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cfc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cfc6:	2b06      	cmp	r3, #6
 800cfc8:	f200 80a2 	bhi.w	800d110 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800cfcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfce:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	b2da      	uxtb	r2, r3
 800cfd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800cfdc:	e098      	b.n	800d110 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cfde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	db0f      	blt.n	800d008 <tcp_slowtmr+0x1f4>
 800cfe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cfee:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d008      	beq.n	800d008 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800cff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cff8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	3301      	adds	r3, #1
 800d000:	b29b      	uxth	r3, r3
 800d002:	b21a      	sxth	r2, r3
 800d004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d006:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d00a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800d00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d010:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d014:	429a      	cmp	r2, r3
 800d016:	db7b      	blt.n	800d110 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d018:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d01a:	f004 f821 	bl	8011060 <tcp_rexmit_rto_prepare>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d007      	beq.n	800d034 <tcp_slowtmr+0x220>
 800d024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d171      	bne.n	800d110 <tcp_slowtmr+0x2fc>
 800d02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d02e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d030:	2b00      	cmp	r3, #0
 800d032:	d06d      	beq.n	800d110 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800d034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d036:	7d1b      	ldrb	r3, [r3, #20]
 800d038:	2b02      	cmp	r3, #2
 800d03a:	d03a      	beq.n	800d0b2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d03e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d042:	2b0c      	cmp	r3, #12
 800d044:	bf28      	it	cs
 800d046:	230c      	movcs	r3, #12
 800d048:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d04c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d050:	10db      	asrs	r3, r3, #3
 800d052:	b21b      	sxth	r3, r3
 800d054:	461a      	mov	r2, r3
 800d056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d058:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d05c:	4413      	add	r3, r2
 800d05e:	7efa      	ldrb	r2, [r7, #27]
 800d060:	4910      	ldr	r1, [pc, #64]	@ (800d0a4 <tcp_slowtmr+0x290>)
 800d062:	5c8a      	ldrb	r2, [r1, r2]
 800d064:	4093      	lsls	r3, r2
 800d066:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800d06e:	4293      	cmp	r3, r2
 800d070:	dc1a      	bgt.n	800d0a8 <tcp_slowtmr+0x294>
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	b21a      	sxth	r2, r3
 800d076:	e019      	b.n	800d0ac <tcp_slowtmr+0x298>
 800d078:	2000b264 	.word	0x2000b264
 800d07c:	2000b27a 	.word	0x2000b27a
 800d080:	2000b270 	.word	0x2000b270
 800d084:	08016624 	.word	0x08016624
 800d088:	08016968 	.word	0x08016968
 800d08c:	08016668 	.word	0x08016668
 800d090:	08016994 	.word	0x08016994
 800d094:	080169c0 	.word	0x080169c0
 800d098:	080169f0 	.word	0x080169f0
 800d09c:	08016a24 	.word	0x08016a24
 800d0a0:	08018604 	.word	0x08018604
 800d0a4:	080185f4 	.word	0x080185f4
 800d0a8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800d0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	bf28      	it	cs
 800d0c8:	4613      	movcs	r3, r2
 800d0ca:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d0cc:	8a7b      	ldrh	r3, [r7, #18]
 800d0ce:	085b      	lsrs	r3, r3, #1
 800d0d0:	b29a      	uxth	r2, r3
 800d0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d0e2:	005b      	lsls	r3, r3, #1
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d206      	bcs.n	800d0f8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d0ee:	005b      	lsls	r3, r3, #1
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800d0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fa:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800d0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800d102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d104:	2200      	movs	r2, #0
 800d106:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d10a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d10c:	f004 f818 	bl	8011140 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800d110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d112:	7d1b      	ldrb	r3, [r3, #20]
 800d114:	2b06      	cmp	r3, #6
 800d116:	d111      	bne.n	800d13c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800d118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d11a:	8b5b      	ldrh	r3, [r3, #26]
 800d11c:	f003 0310 	and.w	r3, r3, #16
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00b      	beq.n	800d13c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d124:	4b9d      	ldr	r3, [pc, #628]	@ (800d39c <tcp_slowtmr+0x588>)
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d12a:	6a1b      	ldr	r3, [r3, #32]
 800d12c:	1ad3      	subs	r3, r2, r3
 800d12e:	2b28      	cmp	r3, #40	@ 0x28
 800d130:	d904      	bls.n	800d13c <tcp_slowtmr+0x328>
          ++pcb_remove;
 800d132:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d136:	3301      	adds	r3, #1
 800d138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d13e:	7a5b      	ldrb	r3, [r3, #9]
 800d140:	f003 0308 	and.w	r3, r3, #8
 800d144:	2b00      	cmp	r3, #0
 800d146:	d04c      	beq.n	800d1e2 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800d148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d14a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d14c:	2b04      	cmp	r3, #4
 800d14e:	d003      	beq.n	800d158 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800d150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d152:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d154:	2b07      	cmp	r3, #7
 800d156:	d144      	bne.n	800d1e2 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d158:	4b90      	ldr	r3, [pc, #576]	@ (800d39c <tcp_slowtmr+0x588>)
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15e:	6a1b      	ldr	r3, [r3, #32]
 800d160:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d168:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800d16c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800d170:	498b      	ldr	r1, [pc, #556]	@ (800d3a0 <tcp_slowtmr+0x58c>)
 800d172:	fba1 1303 	umull	r1, r3, r1, r3
 800d176:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d178:	429a      	cmp	r2, r3
 800d17a:	d90a      	bls.n	800d192 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800d17c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d180:	3301      	adds	r3, #1
 800d182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800d186:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d18a:	3301      	adds	r3, #1
 800d18c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d190:	e027      	b.n	800d1e2 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d192:	4b82      	ldr	r3, [pc, #520]	@ (800d39c <tcp_slowtmr+0x588>)
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d198:	6a1b      	ldr	r3, [r3, #32]
 800d19a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	4b7e      	ldr	r3, [pc, #504]	@ (800d3a4 <tcp_slowtmr+0x590>)
 800d1ac:	fb00 f303 	mul.w	r3, r0, r3
 800d1b0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d1b2:	497b      	ldr	r1, [pc, #492]	@ (800d3a0 <tcp_slowtmr+0x58c>)
 800d1b4:	fba1 1303 	umull	r1, r3, r1, r3
 800d1b8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d911      	bls.n	800d1e2 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800d1be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1c0:	f004 fac2 	bl	8011748 <tcp_keepalive>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800d1ca:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d107      	bne.n	800d1e2 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800d1d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d1d8:	3301      	adds	r3, #1
 800d1da:	b2da      	uxtb	r2, r3
 800d1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1de:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800d1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d011      	beq.n	800d20e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d1ea:	4b6c      	ldr	r3, [pc, #432]	@ (800d39c <tcp_slowtmr+0x588>)
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f0:	6a1b      	ldr	r3, [r3, #32]
 800d1f2:	1ad2      	subs	r2, r2, r3
 800d1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	005b      	lsls	r3, r3, #1
 800d200:	440b      	add	r3, r1
 800d202:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d204:	429a      	cmp	r2, r3
 800d206:	d302      	bcc.n	800d20e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800d208:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d20a:	f000 fddb 	bl	800ddc4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800d20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d210:	7d1b      	ldrb	r3, [r3, #20]
 800d212:	2b03      	cmp	r3, #3
 800d214:	d10b      	bne.n	800d22e <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d216:	4b61      	ldr	r3, [pc, #388]	@ (800d39c <tcp_slowtmr+0x588>)
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d21c:	6a1b      	ldr	r3, [r3, #32]
 800d21e:	1ad3      	subs	r3, r2, r3
 800d220:	2b28      	cmp	r3, #40	@ 0x28
 800d222:	d904      	bls.n	800d22e <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800d224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d228:	3301      	adds	r3, #1
 800d22a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800d22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d230:	7d1b      	ldrb	r3, [r3, #20]
 800d232:	2b09      	cmp	r3, #9
 800d234:	d10b      	bne.n	800d24e <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d236:	4b59      	ldr	r3, [pc, #356]	@ (800d39c <tcp_slowtmr+0x588>)
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23c:	6a1b      	ldr	r3, [r3, #32]
 800d23e:	1ad3      	subs	r3, r2, r3
 800d240:	2bf0      	cmp	r3, #240	@ 0xf0
 800d242:	d904      	bls.n	800d24e <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800d244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d248:	3301      	adds	r3, #1
 800d24a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800d24e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d252:	2b00      	cmp	r3, #0
 800d254:	d060      	beq.n	800d318 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800d256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d25c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800d25e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d260:	f000 fbfc 	bl	800da5c <tcp_pcb_purge>
      if (prev != NULL) {
 800d264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d266:	2b00      	cmp	r3, #0
 800d268:	d010      	beq.n	800d28c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d26a:	4b4f      	ldr	r3, [pc, #316]	@ (800d3a8 <tcp_slowtmr+0x594>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d270:	429a      	cmp	r2, r3
 800d272:	d106      	bne.n	800d282 <tcp_slowtmr+0x46e>
 800d274:	4b4d      	ldr	r3, [pc, #308]	@ (800d3ac <tcp_slowtmr+0x598>)
 800d276:	f240 526d 	movw	r2, #1389	@ 0x56d
 800d27a:	494d      	ldr	r1, [pc, #308]	@ (800d3b0 <tcp_slowtmr+0x59c>)
 800d27c:	484d      	ldr	r0, [pc, #308]	@ (800d3b4 <tcp_slowtmr+0x5a0>)
 800d27e:	f007 fd57 	bl	8014d30 <iprintf>
        prev->next = pcb->next;
 800d282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d284:	68da      	ldr	r2, [r3, #12]
 800d286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d288:	60da      	str	r2, [r3, #12]
 800d28a:	e00f      	b.n	800d2ac <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d28c:	4b46      	ldr	r3, [pc, #280]	@ (800d3a8 <tcp_slowtmr+0x594>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d292:	429a      	cmp	r2, r3
 800d294:	d006      	beq.n	800d2a4 <tcp_slowtmr+0x490>
 800d296:	4b45      	ldr	r3, [pc, #276]	@ (800d3ac <tcp_slowtmr+0x598>)
 800d298:	f240 5271 	movw	r2, #1393	@ 0x571
 800d29c:	4946      	ldr	r1, [pc, #280]	@ (800d3b8 <tcp_slowtmr+0x5a4>)
 800d29e:	4845      	ldr	r0, [pc, #276]	@ (800d3b4 <tcp_slowtmr+0x5a0>)
 800d2a0:	f007 fd46 	bl	8014d30 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	4a3f      	ldr	r2, [pc, #252]	@ (800d3a8 <tcp_slowtmr+0x594>)
 800d2aa:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800d2ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d013      	beq.n	800d2dc <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ba:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d2bc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800d2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c0:	3304      	adds	r3, #4
 800d2c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2c4:	8ad2      	ldrh	r2, [r2, #22]
 800d2c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2c8:	8b09      	ldrh	r1, [r1, #24]
 800d2ca:	9102      	str	r1, [sp, #8]
 800d2cc:	9201      	str	r2, [sp, #4]
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	462b      	mov	r3, r5
 800d2d2:	4622      	mov	r2, r4
 800d2d4:	4601      	mov	r1, r0
 800d2d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2d8:	f004 f982 	bl	80115e0 <tcp_rst>
      err_arg = pcb->callback_arg;
 800d2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2de:	691b      	ldr	r3, [r3, #16]
 800d2e0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e4:	7d1b      	ldrb	r3, [r3, #20]
 800d2e6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ea:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d2f2:	6838      	ldr	r0, [r7, #0]
 800d2f4:	f7ff f9f0 	bl	800c6d8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d2f8:	4b30      	ldr	r3, [pc, #192]	@ (800d3bc <tcp_slowtmr+0x5a8>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d004      	beq.n	800d30e <tcp_slowtmr+0x4fa>
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f06f 010c 	mvn.w	r1, #12
 800d30a:	68b8      	ldr	r0, [r7, #8]
 800d30c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d30e:	4b2b      	ldr	r3, [pc, #172]	@ (800d3bc <tcp_slowtmr+0x5a8>)
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d037      	beq.n	800d386 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800d316:	e590      	b.n	800ce3a <tcp_slowtmr+0x26>
      prev = pcb;
 800d318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d31a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800d322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d324:	7f1b      	ldrb	r3, [r3, #28]
 800d326:	3301      	adds	r3, #1
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d32c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d330:	7f1a      	ldrb	r2, [r3, #28]
 800d332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d334:	7f5b      	ldrb	r3, [r3, #29]
 800d336:	429a      	cmp	r2, r3
 800d338:	d325      	bcc.n	800d386 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800d33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d33c:	2200      	movs	r2, #0
 800d33e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800d340:	4b1e      	ldr	r3, [pc, #120]	@ (800d3bc <tcp_slowtmr+0x5a8>)
 800d342:	2200      	movs	r2, #0
 800d344:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00b      	beq.n	800d368 <tcp_slowtmr+0x554>
 800d350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d352:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d356:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d358:	6912      	ldr	r2, [r2, #16]
 800d35a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d35c:	4610      	mov	r0, r2
 800d35e:	4798      	blx	r3
 800d360:	4603      	mov	r3, r0
 800d362:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d366:	e002      	b.n	800d36e <tcp_slowtmr+0x55a>
 800d368:	2300      	movs	r3, #0
 800d36a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800d36e:	4b13      	ldr	r3, [pc, #76]	@ (800d3bc <tcp_slowtmr+0x5a8>)
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	f47f ad60 	bne.w	800ce38 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d378:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d102      	bne.n	800d386 <tcp_slowtmr+0x572>
          tcp_output(prev);
 800d380:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d382:	f003 fb79 	bl	8010a78 <tcp_output>
  while (pcb != NULL) {
 800d386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d388:	2b00      	cmp	r3, #0
 800d38a:	f47f ad5c 	bne.w	800ce46 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d38e:	2300      	movs	r3, #0
 800d390:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800d392:	4b0b      	ldr	r3, [pc, #44]	@ (800d3c0 <tcp_slowtmr+0x5ac>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d398:	e067      	b.n	800d46a <tcp_slowtmr+0x656>
 800d39a:	bf00      	nop
 800d39c:	2000b264 	.word	0x2000b264
 800d3a0:	10624dd3 	.word	0x10624dd3
 800d3a4:	000124f8 	.word	0x000124f8
 800d3a8:	2000b270 	.word	0x2000b270
 800d3ac:	08016624 	.word	0x08016624
 800d3b0:	08016a5c 	.word	0x08016a5c
 800d3b4:	08016668 	.word	0x08016668
 800d3b8:	08016a88 	.word	0x08016a88
 800d3bc:	2000b278 	.word	0x2000b278
 800d3c0:	2000b274 	.word	0x2000b274
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c6:	7d1b      	ldrb	r3, [r3, #20]
 800d3c8:	2b0a      	cmp	r3, #10
 800d3ca:	d006      	beq.n	800d3da <tcp_slowtmr+0x5c6>
 800d3cc:	4b2b      	ldr	r3, [pc, #172]	@ (800d47c <tcp_slowtmr+0x668>)
 800d3ce:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800d3d2:	492b      	ldr	r1, [pc, #172]	@ (800d480 <tcp_slowtmr+0x66c>)
 800d3d4:	482b      	ldr	r0, [pc, #172]	@ (800d484 <tcp_slowtmr+0x670>)
 800d3d6:	f007 fcab 	bl	8014d30 <iprintf>
    pcb_remove = 0;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d3e0:	4b29      	ldr	r3, [pc, #164]	@ (800d488 <tcp_slowtmr+0x674>)
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e6:	6a1b      	ldr	r3, [r3, #32]
 800d3e8:	1ad3      	subs	r3, r2, r3
 800d3ea:	2bf0      	cmp	r3, #240	@ 0xf0
 800d3ec:	d904      	bls.n	800d3f8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800d3ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d02f      	beq.n	800d460 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d400:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d402:	f000 fb2b 	bl	800da5c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d010      	beq.n	800d42e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d40c:	4b1f      	ldr	r3, [pc, #124]	@ (800d48c <tcp_slowtmr+0x678>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d412:	429a      	cmp	r2, r3
 800d414:	d106      	bne.n	800d424 <tcp_slowtmr+0x610>
 800d416:	4b19      	ldr	r3, [pc, #100]	@ (800d47c <tcp_slowtmr+0x668>)
 800d418:	f240 52af 	movw	r2, #1455	@ 0x5af
 800d41c:	491c      	ldr	r1, [pc, #112]	@ (800d490 <tcp_slowtmr+0x67c>)
 800d41e:	4819      	ldr	r0, [pc, #100]	@ (800d484 <tcp_slowtmr+0x670>)
 800d420:	f007 fc86 	bl	8014d30 <iprintf>
        prev->next = pcb->next;
 800d424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d426:	68da      	ldr	r2, [r3, #12]
 800d428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d42a:	60da      	str	r2, [r3, #12]
 800d42c:	e00f      	b.n	800d44e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d42e:	4b17      	ldr	r3, [pc, #92]	@ (800d48c <tcp_slowtmr+0x678>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d434:	429a      	cmp	r2, r3
 800d436:	d006      	beq.n	800d446 <tcp_slowtmr+0x632>
 800d438:	4b10      	ldr	r3, [pc, #64]	@ (800d47c <tcp_slowtmr+0x668>)
 800d43a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d43e:	4915      	ldr	r1, [pc, #84]	@ (800d494 <tcp_slowtmr+0x680>)
 800d440:	4810      	ldr	r0, [pc, #64]	@ (800d484 <tcp_slowtmr+0x670>)
 800d442:	f007 fc75 	bl	8014d30 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	4a10      	ldr	r2, [pc, #64]	@ (800d48c <tcp_slowtmr+0x678>)
 800d44c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d450:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d454:	68db      	ldr	r3, [r3, #12]
 800d456:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d458:	69f8      	ldr	r0, [r7, #28]
 800d45a:	f7ff f93d 	bl	800c6d8 <tcp_free>
 800d45e:	e004      	b.n	800d46a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800d460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d462:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d466:	68db      	ldr	r3, [r3, #12]
 800d468:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d1a9      	bne.n	800d3c4 <tcp_slowtmr+0x5b0>
    }
  }
}
 800d470:	bf00      	nop
 800d472:	bf00      	nop
 800d474:	3730      	adds	r7, #48	@ 0x30
 800d476:	46bd      	mov	sp, r7
 800d478:	bdb0      	pop	{r4, r5, r7, pc}
 800d47a:	bf00      	nop
 800d47c:	08016624 	.word	0x08016624
 800d480:	08016ab4 	.word	0x08016ab4
 800d484:	08016668 	.word	0x08016668
 800d488:	2000b264 	.word	0x2000b264
 800d48c:	2000b274 	.word	0x2000b274
 800d490:	08016ae4 	.word	0x08016ae4
 800d494:	08016b0c 	.word	0x08016b0c

0800d498 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d49e:	4b2d      	ldr	r3, [pc, #180]	@ (800d554 <tcp_fasttmr+0xbc>)
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	b2da      	uxtb	r2, r3
 800d4a6:	4b2b      	ldr	r3, [pc, #172]	@ (800d554 <tcp_fasttmr+0xbc>)
 800d4a8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d4aa:	4b2b      	ldr	r3, [pc, #172]	@ (800d558 <tcp_fasttmr+0xc0>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d4b0:	e048      	b.n	800d544 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	7f9a      	ldrb	r2, [r3, #30]
 800d4b6:	4b27      	ldr	r3, [pc, #156]	@ (800d554 <tcp_fasttmr+0xbc>)
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d03f      	beq.n	800d53e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d4be:	4b25      	ldr	r3, [pc, #148]	@ (800d554 <tcp_fasttmr+0xbc>)
 800d4c0:	781a      	ldrb	r2, [r3, #0]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	8b5b      	ldrh	r3, [r3, #26]
 800d4ca:	f003 0301 	and.w	r3, r3, #1
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d010      	beq.n	800d4f4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	8b5b      	ldrh	r3, [r3, #26]
 800d4d6:	f043 0302 	orr.w	r3, r3, #2
 800d4da:	b29a      	uxth	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f003 fac9 	bl	8010a78 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	8b5b      	ldrh	r3, [r3, #26]
 800d4ea:	f023 0303 	bic.w	r3, r3, #3
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	8b5b      	ldrh	r3, [r3, #26]
 800d4f8:	f003 0308 	and.w	r3, r3, #8
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d009      	beq.n	800d514 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	8b5b      	ldrh	r3, [r3, #26]
 800d504:	f023 0308 	bic.w	r3, r3, #8
 800d508:	b29a      	uxth	r2, r3
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7ff fa76 	bl	800ca00 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	68db      	ldr	r3, [r3, #12]
 800d518:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00a      	beq.n	800d538 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d522:	4b0e      	ldr	r3, [pc, #56]	@ (800d55c <tcp_fasttmr+0xc4>)
 800d524:	2200      	movs	r2, #0
 800d526:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f000 f819 	bl	800d560 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d52e:	4b0b      	ldr	r3, [pc, #44]	@ (800d55c <tcp_fasttmr+0xc4>)
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d000      	beq.n	800d538 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d536:	e7b8      	b.n	800d4aa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	607b      	str	r3, [r7, #4]
 800d53c:	e002      	b.n	800d544 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1b3      	bne.n	800d4b2 <tcp_fasttmr+0x1a>
    }
  }
}
 800d54a:	bf00      	nop
 800d54c:	bf00      	nop
 800d54e:	3708      	adds	r7, #8
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	2000b27a 	.word	0x2000b27a
 800d558:	2000b270 	.word	0x2000b270
 800d55c:	2000b278 	.word	0x2000b278

0800d560 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d560:	b590      	push	{r4, r7, lr}
 800d562:	b085      	sub	sp, #20
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d109      	bne.n	800d582 <tcp_process_refused_data+0x22>
 800d56e:	4b37      	ldr	r3, [pc, #220]	@ (800d64c <tcp_process_refused_data+0xec>)
 800d570:	f240 6209 	movw	r2, #1545	@ 0x609
 800d574:	4936      	ldr	r1, [pc, #216]	@ (800d650 <tcp_process_refused_data+0xf0>)
 800d576:	4837      	ldr	r0, [pc, #220]	@ (800d654 <tcp_process_refused_data+0xf4>)
 800d578:	f007 fbda 	bl	8014d30 <iprintf>
 800d57c:	f06f 030f 	mvn.w	r3, #15
 800d580:	e060      	b.n	800d644 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d586:	7b5b      	ldrb	r3, [r3, #13]
 800d588:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d58e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00b      	beq.n	800d5b8 <tcp_process_refused_data+0x58>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6918      	ldr	r0, [r3, #16]
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	68ba      	ldr	r2, [r7, #8]
 800d5ae:	6879      	ldr	r1, [r7, #4]
 800d5b0:	47a0      	blx	r4
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	73fb      	strb	r3, [r7, #15]
 800d5b6:	e007      	b.n	800d5c8 <tcp_process_refused_data+0x68>
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	68ba      	ldr	r2, [r7, #8]
 800d5bc:	6879      	ldr	r1, [r7, #4]
 800d5be:	2000      	movs	r0, #0
 800d5c0:	f000 f8a4 	bl	800d70c <tcp_recv_null>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d5c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d12a      	bne.n	800d626 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d5d0:	7bbb      	ldrb	r3, [r7, #14]
 800d5d2:	f003 0320 	and.w	r3, r3, #32
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d033      	beq.n	800d642 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5de:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d5e2:	d005      	beq.n	800d5f0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	b29a      	uxth	r2, r3
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d00b      	beq.n	800d612 <tcp_process_refused_data+0xb2>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6918      	ldr	r0, [r3, #16]
 800d604:	2300      	movs	r3, #0
 800d606:	2200      	movs	r2, #0
 800d608:	6879      	ldr	r1, [r7, #4]
 800d60a:	47a0      	blx	r4
 800d60c:	4603      	mov	r3, r0
 800d60e:	73fb      	strb	r3, [r7, #15]
 800d610:	e001      	b.n	800d616 <tcp_process_refused_data+0xb6>
 800d612:	2300      	movs	r3, #0
 800d614:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d61a:	f113 0f0d 	cmn.w	r3, #13
 800d61e:	d110      	bne.n	800d642 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d620:	f06f 030c 	mvn.w	r3, #12
 800d624:	e00e      	b.n	800d644 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d62a:	f113 0f0d 	cmn.w	r3, #13
 800d62e:	d102      	bne.n	800d636 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d630:	f06f 030c 	mvn.w	r3, #12
 800d634:	e006      	b.n	800d644 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	68ba      	ldr	r2, [r7, #8]
 800d63a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800d63c:	f06f 0304 	mvn.w	r3, #4
 800d640:	e000      	b.n	800d644 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d642:	2300      	movs	r3, #0
}
 800d644:	4618      	mov	r0, r3
 800d646:	3714      	adds	r7, #20
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd90      	pop	{r4, r7, pc}
 800d64c:	08016624 	.word	0x08016624
 800d650:	08016b34 	.word	0x08016b34
 800d654:	08016668 	.word	0x08016668

0800d658 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d660:	e007      	b.n	800d672 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 f80a 	bl	800d682 <tcp_seg_free>
    seg = next;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1f4      	bne.n	800d662 <tcp_segs_free+0xa>
  }
}
 800d678:	bf00      	nop
 800d67a:	bf00      	nop
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b082      	sub	sp, #8
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d00c      	beq.n	800d6aa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d004      	beq.n	800d6a2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7fe fcd9 	bl	800c054 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d6a2:	6879      	ldr	r1, [r7, #4]
 800d6a4:	2003      	movs	r0, #3
 800d6a6:	f7fd fe5f 	bl	800b368 <memp_free>
  }
}
 800d6aa:	bf00      	nop
 800d6ac:	3708      	adds	r7, #8
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
	...

0800d6b4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d106      	bne.n	800d6d0 <tcp_seg_copy+0x1c>
 800d6c2:	4b0f      	ldr	r3, [pc, #60]	@ (800d700 <tcp_seg_copy+0x4c>)
 800d6c4:	f240 6282 	movw	r2, #1666	@ 0x682
 800d6c8:	490e      	ldr	r1, [pc, #56]	@ (800d704 <tcp_seg_copy+0x50>)
 800d6ca:	480f      	ldr	r0, [pc, #60]	@ (800d708 <tcp_seg_copy+0x54>)
 800d6cc:	f007 fb30 	bl	8014d30 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d6d0:	2003      	movs	r0, #3
 800d6d2:	f7fd fdd9 	bl	800b288 <memp_malloc>
 800d6d6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d101      	bne.n	800d6e2 <tcp_seg_copy+0x2e>
    return NULL;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	e00a      	b.n	800d6f8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d6e2:	2210      	movs	r2, #16
 800d6e4:	6879      	ldr	r1, [r7, #4]
 800d6e6:	68f8      	ldr	r0, [r7, #12]
 800d6e8:	f007 fbfd 	bl	8014ee6 <memcpy>
  pbuf_ref(cseg->p);
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fe fd4f 	bl	800c194 <pbuf_ref>
  return cseg;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3710      	adds	r7, #16
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	08016624 	.word	0x08016624
 800d704:	08016b78 	.word	0x08016b78
 800d708:	08016668 	.word	0x08016668

0800d70c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
 800d718:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d109      	bne.n	800d734 <tcp_recv_null+0x28>
 800d720:	4b12      	ldr	r3, [pc, #72]	@ (800d76c <tcp_recv_null+0x60>)
 800d722:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d726:	4912      	ldr	r1, [pc, #72]	@ (800d770 <tcp_recv_null+0x64>)
 800d728:	4812      	ldr	r0, [pc, #72]	@ (800d774 <tcp_recv_null+0x68>)
 800d72a:	f007 fb01 	bl	8014d30 <iprintf>
 800d72e:	f06f 030f 	mvn.w	r3, #15
 800d732:	e016      	b.n	800d762 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d009      	beq.n	800d74e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	891b      	ldrh	r3, [r3, #8]
 800d73e:	4619      	mov	r1, r3
 800d740:	68b8      	ldr	r0, [r7, #8]
 800d742:	f7ff fb17 	bl	800cd74 <tcp_recved>
    pbuf_free(p);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7fe fc84 	bl	800c054 <pbuf_free>
 800d74c:	e008      	b.n	800d760 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d74e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d104      	bne.n	800d760 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d756:	68b8      	ldr	r0, [r7, #8]
 800d758:	f7ff f9bc 	bl	800cad4 <tcp_close>
 800d75c:	4603      	mov	r3, r0
 800d75e:	e000      	b.n	800d762 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d760:	2300      	movs	r3, #0
}
 800d762:	4618      	mov	r0, r3
 800d764:	3710      	adds	r7, #16
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	08016624 	.word	0x08016624
 800d770:	08016b94 	.word	0x08016b94
 800d774:	08016668 	.word	0x08016668

0800d778 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b086      	sub	sp, #24
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	4603      	mov	r3, r0
 800d780:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d786:	2b00      	cmp	r3, #0
 800d788:	db01      	blt.n	800d78e <tcp_kill_prio+0x16>
 800d78a:	79fb      	ldrb	r3, [r7, #7]
 800d78c:	e000      	b.n	800d790 <tcp_kill_prio+0x18>
 800d78e:	237f      	movs	r3, #127	@ 0x7f
 800d790:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d792:	7afb      	ldrb	r3, [r7, #11]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d034      	beq.n	800d802 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d798:	7afb      	ldrb	r3, [r7, #11]
 800d79a:	3b01      	subs	r3, #1
 800d79c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7a6:	4b19      	ldr	r3, [pc, #100]	@ (800d80c <tcp_kill_prio+0x94>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	617b      	str	r3, [r7, #20]
 800d7ac:	e01f      	b.n	800d7ee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	7d5b      	ldrb	r3, [r3, #21]
 800d7b2:	7afa      	ldrb	r2, [r7, #11]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d80c      	bhi.n	800d7d2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d7bc:	7afa      	ldrb	r2, [r7, #11]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d112      	bne.n	800d7e8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d7c2:	4b13      	ldr	r3, [pc, #76]	@ (800d810 <tcp_kill_prio+0x98>)
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	6a1b      	ldr	r3, [r3, #32]
 800d7ca:	1ad3      	subs	r3, r2, r3
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d80a      	bhi.n	800d7e8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d7d2:	4b0f      	ldr	r3, [pc, #60]	@ (800d810 <tcp_kill_prio+0x98>)
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	6a1b      	ldr	r3, [r3, #32]
 800d7da:	1ad3      	subs	r3, r2, r3
 800d7dc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	7d5b      	ldrb	r3, [r3, #21]
 800d7e6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	617b      	str	r3, [r7, #20]
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d1dc      	bne.n	800d7ae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d004      	beq.n	800d804 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d7fa:	6938      	ldr	r0, [r7, #16]
 800d7fc:	f7ff fa54 	bl	800cca8 <tcp_abort>
 800d800:	e000      	b.n	800d804 <tcp_kill_prio+0x8c>
    return;
 800d802:	bf00      	nop
  }
}
 800d804:	3718      	adds	r7, #24
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	2000b270 	.word	0x2000b270
 800d810:	2000b264 	.word	0x2000b264

0800d814 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b086      	sub	sp, #24
 800d818:	af00      	add	r7, sp, #0
 800d81a:	4603      	mov	r3, r0
 800d81c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d81e:	79fb      	ldrb	r3, [r7, #7]
 800d820:	2b08      	cmp	r3, #8
 800d822:	d009      	beq.n	800d838 <tcp_kill_state+0x24>
 800d824:	79fb      	ldrb	r3, [r7, #7]
 800d826:	2b09      	cmp	r3, #9
 800d828:	d006      	beq.n	800d838 <tcp_kill_state+0x24>
 800d82a:	4b1a      	ldr	r3, [pc, #104]	@ (800d894 <tcp_kill_state+0x80>)
 800d82c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800d830:	4919      	ldr	r1, [pc, #100]	@ (800d898 <tcp_kill_state+0x84>)
 800d832:	481a      	ldr	r0, [pc, #104]	@ (800d89c <tcp_kill_state+0x88>)
 800d834:	f007 fa7c 	bl	8014d30 <iprintf>

  inactivity = 0;
 800d838:	2300      	movs	r3, #0
 800d83a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d83c:	2300      	movs	r3, #0
 800d83e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d840:	4b17      	ldr	r3, [pc, #92]	@ (800d8a0 <tcp_kill_state+0x8c>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	617b      	str	r3, [r7, #20]
 800d846:	e017      	b.n	800d878 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	7d1b      	ldrb	r3, [r3, #20]
 800d84c:	79fa      	ldrb	r2, [r7, #7]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d10f      	bne.n	800d872 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d852:	4b14      	ldr	r3, [pc, #80]	@ (800d8a4 <tcp_kill_state+0x90>)
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	6a1b      	ldr	r3, [r3, #32]
 800d85a:	1ad3      	subs	r3, r2, r3
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d807      	bhi.n	800d872 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d862:	4b10      	ldr	r3, [pc, #64]	@ (800d8a4 <tcp_kill_state+0x90>)
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	6a1b      	ldr	r3, [r3, #32]
 800d86a:	1ad3      	subs	r3, r2, r3
 800d86c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	617b      	str	r3, [r7, #20]
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1e4      	bne.n	800d848 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d003      	beq.n	800d88c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d884:	2100      	movs	r1, #0
 800d886:	6938      	ldr	r0, [r7, #16]
 800d888:	f7ff f950 	bl	800cb2c <tcp_abandon>
  }
}
 800d88c:	bf00      	nop
 800d88e:	3718      	adds	r7, #24
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	08016624 	.word	0x08016624
 800d898:	08016bb0 	.word	0x08016bb0
 800d89c:	08016668 	.word	0x08016668
 800d8a0:	2000b270 	.word	0x2000b270
 800d8a4:	2000b264 	.word	0x2000b264

0800d8a8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8b6:	4b12      	ldr	r3, [pc, #72]	@ (800d900 <tcp_kill_timewait+0x58>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	60fb      	str	r3, [r7, #12]
 800d8bc:	e012      	b.n	800d8e4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d8be:	4b11      	ldr	r3, [pc, #68]	@ (800d904 <tcp_kill_timewait+0x5c>)
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	6a1b      	ldr	r3, [r3, #32]
 800d8c6:	1ad3      	subs	r3, r2, r3
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d807      	bhi.n	800d8de <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d8ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d904 <tcp_kill_timewait+0x5c>)
 800d8d0:	681a      	ldr	r2, [r3, #0]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	6a1b      	ldr	r3, [r3, #32]
 800d8d6:	1ad3      	subs	r3, r2, r3
 800d8d8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	60fb      	str	r3, [r7, #12]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d1e9      	bne.n	800d8be <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d002      	beq.n	800d8f6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d8f0:	68b8      	ldr	r0, [r7, #8]
 800d8f2:	f7ff f9d9 	bl	800cca8 <tcp_abort>
  }
}
 800d8f6:	bf00      	nop
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	2000b274 	.word	0x2000b274
 800d904:	2000b264 	.word	0x2000b264

0800d908 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d90e:	4b10      	ldr	r3, [pc, #64]	@ (800d950 <tcp_handle_closepend+0x48>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d914:	e014      	b.n	800d940 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	68db      	ldr	r3, [r3, #12]
 800d91a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	8b5b      	ldrh	r3, [r3, #26]
 800d920:	f003 0308 	and.w	r3, r3, #8
 800d924:	2b00      	cmp	r3, #0
 800d926:	d009      	beq.n	800d93c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	8b5b      	ldrh	r3, [r3, #26]
 800d92c:	f023 0308 	bic.w	r3, r3, #8
 800d930:	b29a      	uxth	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f7ff f862 	bl	800ca00 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d1e7      	bne.n	800d916 <tcp_handle_closepend+0xe>
  }
}
 800d946:	bf00      	nop
 800d948:	bf00      	nop
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	2000b270 	.word	0x2000b270

0800d954 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	4603      	mov	r3, r0
 800d95c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d95e:	2001      	movs	r0, #1
 800d960:	f7fd fc92 	bl	800b288 <memp_malloc>
 800d964:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d126      	bne.n	800d9ba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d96c:	f7ff ffcc 	bl	800d908 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d970:	f7ff ff9a 	bl	800d8a8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d974:	2001      	movs	r0, #1
 800d976:	f7fd fc87 	bl	800b288 <memp_malloc>
 800d97a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d11b      	bne.n	800d9ba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d982:	2009      	movs	r0, #9
 800d984:	f7ff ff46 	bl	800d814 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d988:	2001      	movs	r0, #1
 800d98a:	f7fd fc7d 	bl	800b288 <memp_malloc>
 800d98e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d111      	bne.n	800d9ba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d996:	2008      	movs	r0, #8
 800d998:	f7ff ff3c 	bl	800d814 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d99c:	2001      	movs	r0, #1
 800d99e:	f7fd fc73 	bl	800b288 <memp_malloc>
 800d9a2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d107      	bne.n	800d9ba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d9aa:	79fb      	ldrb	r3, [r7, #7]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7ff fee3 	bl	800d778 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d9b2:	2001      	movs	r0, #1
 800d9b4:	f7fd fc68 	bl	800b288 <memp_malloc>
 800d9b8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d03f      	beq.n	800da40 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d9c0:	229c      	movs	r2, #156	@ 0x9c
 800d9c2:	2100      	movs	r1, #0
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	f007 fa18 	bl	8014dfa <memset>
    pcb->prio = prio;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	79fa      	ldrb	r2, [r7, #7]
 800d9ce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d9d6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d9e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	22ff      	movs	r2, #255	@ 0xff
 800d9ee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d9f6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2206      	movs	r2, #6
 800d9fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2206      	movs	r2, #6
 800da04:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da0c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2201      	movs	r2, #1
 800da12:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800da16:	4b0d      	ldr	r3, [pc, #52]	@ (800da4c <tcp_alloc+0xf8>)
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800da1e:	4b0c      	ldr	r3, [pc, #48]	@ (800da50 <tcp_alloc+0xfc>)
 800da20:	781a      	ldrb	r2, [r3, #0]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800da2c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	4a08      	ldr	r2, [pc, #32]	@ (800da54 <tcp_alloc+0x100>)
 800da34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	4a07      	ldr	r2, [pc, #28]	@ (800da58 <tcp_alloc+0x104>)
 800da3c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800da40:	68fb      	ldr	r3, [r7, #12]
}
 800da42:	4618      	mov	r0, r3
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	2000b264 	.word	0x2000b264
 800da50:	2000b27a 	.word	0x2000b27a
 800da54:	0800d70d 	.word	0x0800d70d
 800da58:	006ddd00 	.word	0x006ddd00

0800da5c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d107      	bne.n	800da7a <tcp_pcb_purge+0x1e>
 800da6a:	4b21      	ldr	r3, [pc, #132]	@ (800daf0 <tcp_pcb_purge+0x94>)
 800da6c:	f640 0251 	movw	r2, #2129	@ 0x851
 800da70:	4920      	ldr	r1, [pc, #128]	@ (800daf4 <tcp_pcb_purge+0x98>)
 800da72:	4821      	ldr	r0, [pc, #132]	@ (800daf8 <tcp_pcb_purge+0x9c>)
 800da74:	f007 f95c 	bl	8014d30 <iprintf>
 800da78:	e037      	b.n	800daea <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	7d1b      	ldrb	r3, [r3, #20]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d033      	beq.n	800daea <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800da86:	2b0a      	cmp	r3, #10
 800da88:	d02f      	beq.n	800daea <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d02b      	beq.n	800daea <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da96:	2b00      	cmp	r3, #0
 800da98:	d007      	beq.n	800daaa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7fe fad8 	bl	800c054 <pbuf_free>
      pcb->refused_data = NULL;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2200      	movs	r2, #0
 800daa8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d002      	beq.n	800dab8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 f986 	bl	800ddc4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dabe:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7ff fdc7 	bl	800d658 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dace:	4618      	mov	r0, r3
 800dad0:	f7ff fdc2 	bl	800d658 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800daea:	3708      	adds	r7, #8
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	08016624 	.word	0x08016624
 800daf4:	08016c70 	.word	0x08016c70
 800daf8:	08016668 	.word	0x08016668

0800dafc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d106      	bne.n	800db1a <tcp_pcb_remove+0x1e>
 800db0c:	4b3e      	ldr	r3, [pc, #248]	@ (800dc08 <tcp_pcb_remove+0x10c>)
 800db0e:	f640 0283 	movw	r2, #2179	@ 0x883
 800db12:	493e      	ldr	r1, [pc, #248]	@ (800dc0c <tcp_pcb_remove+0x110>)
 800db14:	483e      	ldr	r0, [pc, #248]	@ (800dc10 <tcp_pcb_remove+0x114>)
 800db16:	f007 f90b 	bl	8014d30 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d106      	bne.n	800db2e <tcp_pcb_remove+0x32>
 800db20:	4b39      	ldr	r3, [pc, #228]	@ (800dc08 <tcp_pcb_remove+0x10c>)
 800db22:	f640 0284 	movw	r2, #2180	@ 0x884
 800db26:	493b      	ldr	r1, [pc, #236]	@ (800dc14 <tcp_pcb_remove+0x118>)
 800db28:	4839      	ldr	r0, [pc, #228]	@ (800dc10 <tcp_pcb_remove+0x114>)
 800db2a:	f007 f901 	bl	8014d30 <iprintf>

  TCP_RMV(pcblist, pcb);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	683a      	ldr	r2, [r7, #0]
 800db34:	429a      	cmp	r2, r3
 800db36:	d105      	bne.n	800db44 <tcp_pcb_remove+0x48>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	68da      	ldr	r2, [r3, #12]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	601a      	str	r2, [r3, #0]
 800db42:	e013      	b.n	800db6c <tcp_pcb_remove+0x70>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	60fb      	str	r3, [r7, #12]
 800db4a:	e00c      	b.n	800db66 <tcp_pcb_remove+0x6a>
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	683a      	ldr	r2, [r7, #0]
 800db52:	429a      	cmp	r2, r3
 800db54:	d104      	bne.n	800db60 <tcp_pcb_remove+0x64>
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	68da      	ldr	r2, [r3, #12]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	60da      	str	r2, [r3, #12]
 800db5e:	e005      	b.n	800db6c <tcp_pcb_remove+0x70>
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	60fb      	str	r3, [r7, #12]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1ef      	bne.n	800db4c <tcp_pcb_remove+0x50>
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	2200      	movs	r2, #0
 800db70:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800db72:	6838      	ldr	r0, [r7, #0]
 800db74:	f7ff ff72 	bl	800da5c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	7d1b      	ldrb	r3, [r3, #20]
 800db7c:	2b0a      	cmp	r3, #10
 800db7e:	d013      	beq.n	800dba8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800db84:	2b01      	cmp	r3, #1
 800db86:	d00f      	beq.n	800dba8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	8b5b      	ldrh	r3, [r3, #26]
 800db8c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800db90:	2b00      	cmp	r3, #0
 800db92:	d009      	beq.n	800dba8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	8b5b      	ldrh	r3, [r3, #26]
 800db98:	f043 0302 	orr.w	r3, r3, #2
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dba2:	6838      	ldr	r0, [r7, #0]
 800dba4:	f002 ff68 	bl	8010a78 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	7d1b      	ldrb	r3, [r3, #20]
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d020      	beq.n	800dbf2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d006      	beq.n	800dbc6 <tcp_pcb_remove+0xca>
 800dbb8:	4b13      	ldr	r3, [pc, #76]	@ (800dc08 <tcp_pcb_remove+0x10c>)
 800dbba:	f640 0293 	movw	r2, #2195	@ 0x893
 800dbbe:	4916      	ldr	r1, [pc, #88]	@ (800dc18 <tcp_pcb_remove+0x11c>)
 800dbc0:	4813      	ldr	r0, [pc, #76]	@ (800dc10 <tcp_pcb_remove+0x114>)
 800dbc2:	f007 f8b5 	bl	8014d30 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d006      	beq.n	800dbdc <tcp_pcb_remove+0xe0>
 800dbce:	4b0e      	ldr	r3, [pc, #56]	@ (800dc08 <tcp_pcb_remove+0x10c>)
 800dbd0:	f640 0294 	movw	r2, #2196	@ 0x894
 800dbd4:	4911      	ldr	r1, [pc, #68]	@ (800dc1c <tcp_pcb_remove+0x120>)
 800dbd6:	480e      	ldr	r0, [pc, #56]	@ (800dc10 <tcp_pcb_remove+0x114>)
 800dbd8:	f007 f8aa 	bl	8014d30 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d006      	beq.n	800dbf2 <tcp_pcb_remove+0xf6>
 800dbe4:	4b08      	ldr	r3, [pc, #32]	@ (800dc08 <tcp_pcb_remove+0x10c>)
 800dbe6:	f640 0296 	movw	r2, #2198	@ 0x896
 800dbea:	490d      	ldr	r1, [pc, #52]	@ (800dc20 <tcp_pcb_remove+0x124>)
 800dbec:	4808      	ldr	r0, [pc, #32]	@ (800dc10 <tcp_pcb_remove+0x114>)
 800dbee:	f007 f89f 	bl	8014d30 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dbfe:	bf00      	nop
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	08016624 	.word	0x08016624
 800dc0c:	08016c8c 	.word	0x08016c8c
 800dc10:	08016668 	.word	0x08016668
 800dc14:	08016ca8 	.word	0x08016ca8
 800dc18:	08016cc8 	.word	0x08016cc8
 800dc1c:	08016ce0 	.word	0x08016ce0
 800dc20:	08016cfc 	.word	0x08016cfc

0800dc24 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d106      	bne.n	800dc40 <tcp_next_iss+0x1c>
 800dc32:	4b0a      	ldr	r3, [pc, #40]	@ (800dc5c <tcp_next_iss+0x38>)
 800dc34:	f640 02af 	movw	r2, #2223	@ 0x8af
 800dc38:	4909      	ldr	r1, [pc, #36]	@ (800dc60 <tcp_next_iss+0x3c>)
 800dc3a:	480a      	ldr	r0, [pc, #40]	@ (800dc64 <tcp_next_iss+0x40>)
 800dc3c:	f007 f878 	bl	8014d30 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dc40:	4b09      	ldr	r3, [pc, #36]	@ (800dc68 <tcp_next_iss+0x44>)
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	4b09      	ldr	r3, [pc, #36]	@ (800dc6c <tcp_next_iss+0x48>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4413      	add	r3, r2
 800dc4a:	4a07      	ldr	r2, [pc, #28]	@ (800dc68 <tcp_next_iss+0x44>)
 800dc4c:	6013      	str	r3, [r2, #0]
  return iss;
 800dc4e:	4b06      	ldr	r3, [pc, #24]	@ (800dc68 <tcp_next_iss+0x44>)
 800dc50:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3708      	adds	r7, #8
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	08016624 	.word	0x08016624
 800dc60:	08016d14 	.word	0x08016d14
 800dc64:	08016668 	.word	0x08016668
 800dc68:	200000c4 	.word	0x200000c4
 800dc6c:	2000b264 	.word	0x2000b264

0800dc70 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b086      	sub	sp, #24
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	4603      	mov	r3, r0
 800dc78:	60b9      	str	r1, [r7, #8]
 800dc7a:	607a      	str	r2, [r7, #4]
 800dc7c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d106      	bne.n	800dc92 <tcp_eff_send_mss_netif+0x22>
 800dc84:	4b14      	ldr	r3, [pc, #80]	@ (800dcd8 <tcp_eff_send_mss_netif+0x68>)
 800dc86:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800dc8a:	4914      	ldr	r1, [pc, #80]	@ (800dcdc <tcp_eff_send_mss_netif+0x6c>)
 800dc8c:	4814      	ldr	r0, [pc, #80]	@ (800dce0 <tcp_eff_send_mss_netif+0x70>)
 800dc8e:	f007 f84f 	bl	8014d30 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d101      	bne.n	800dc9c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dc98:	89fb      	ldrh	r3, [r7, #14]
 800dc9a:	e019      	b.n	800dcd0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dca0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dca2:	8afb      	ldrh	r3, [r7, #22]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d012      	beq.n	800dcce <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dca8:	2328      	movs	r3, #40	@ 0x28
 800dcaa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dcac:	8afa      	ldrh	r2, [r7, #22]
 800dcae:	8abb      	ldrh	r3, [r7, #20]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d904      	bls.n	800dcbe <tcp_eff_send_mss_netif+0x4e>
 800dcb4:	8afa      	ldrh	r2, [r7, #22]
 800dcb6:	8abb      	ldrh	r3, [r7, #20]
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	e000      	b.n	800dcc0 <tcp_eff_send_mss_netif+0x50>
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dcc2:	8a7a      	ldrh	r2, [r7, #18]
 800dcc4:	89fb      	ldrh	r3, [r7, #14]
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	bf28      	it	cs
 800dcca:	4613      	movcs	r3, r2
 800dccc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dcce:	89fb      	ldrh	r3, [r7, #14]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3718      	adds	r7, #24
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	08016624 	.word	0x08016624
 800dcdc:	08016d30 	.word	0x08016d30
 800dce0:	08016668 	.word	0x08016668

0800dce4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b084      	sub	sp, #16
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d119      	bne.n	800dd2c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dcf8:	4b10      	ldr	r3, [pc, #64]	@ (800dd3c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dcfa:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800dcfe:	4910      	ldr	r1, [pc, #64]	@ (800dd40 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dd00:	4810      	ldr	r0, [pc, #64]	@ (800dd44 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dd02:	f007 f815 	bl	8014d30 <iprintf>

  while (pcb != NULL) {
 800dd06:	e011      	b.n	800dd2c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d108      	bne.n	800dd26 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	68db      	ldr	r3, [r3, #12]
 800dd18:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f7fe ffc4 	bl	800cca8 <tcp_abort>
      pcb = next;
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	60fb      	str	r3, [r7, #12]
 800dd24:	e002      	b.n	800dd2c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	68db      	ldr	r3, [r3, #12]
 800dd2a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1ea      	bne.n	800dd08 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dd32:	bf00      	nop
 800dd34:	bf00      	nop
 800dd36:	3710      	adds	r7, #16
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	08016624 	.word	0x08016624
 800dd40:	08016d58 	.word	0x08016d58
 800dd44:	08016668 	.word	0x08016668

0800dd48 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d02a      	beq.n	800ddae <tcp_netif_ip_addr_changed+0x66>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d026      	beq.n	800ddae <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dd60:	4b15      	ldr	r3, [pc, #84]	@ (800ddb8 <tcp_netif_ip_addr_changed+0x70>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4619      	mov	r1, r3
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f7ff ffbc 	bl	800dce4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dd6c:	4b13      	ldr	r3, [pc, #76]	@ (800ddbc <tcp_netif_ip_addr_changed+0x74>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4619      	mov	r1, r3
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7ff ffb6 	bl	800dce4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d017      	beq.n	800ddae <tcp_netif_ip_addr_changed+0x66>
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d013      	beq.n	800ddae <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd86:	4b0e      	ldr	r3, [pc, #56]	@ (800ddc0 <tcp_netif_ip_addr_changed+0x78>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	60fb      	str	r3, [r7, #12]
 800dd8c:	e00c      	b.n	800dda8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d103      	bne.n	800dda2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	60fb      	str	r3, [r7, #12]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d1ef      	bne.n	800dd8e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ddae:	bf00      	nop
 800ddb0:	3710      	adds	r7, #16
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	2000b270 	.word	0x2000b270
 800ddbc:	2000b268 	.word	0x2000b268
 800ddc0:	2000b26c 	.word	0x2000b26c

0800ddc4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d007      	beq.n	800dde4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7ff fc3d 	bl	800d658 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dde4:	bf00      	nop
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ddec:	b590      	push	{r4, r7, lr}
 800ddee:	b08d      	sub	sp, #52	@ 0x34
 800ddf0:	af04      	add	r7, sp, #16
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d105      	bne.n	800de08 <tcp_input+0x1c>
 800ddfc:	4b9b      	ldr	r3, [pc, #620]	@ (800e06c <tcp_input+0x280>)
 800ddfe:	2283      	movs	r2, #131	@ 0x83
 800de00:	499b      	ldr	r1, [pc, #620]	@ (800e070 <tcp_input+0x284>)
 800de02:	489c      	ldr	r0, [pc, #624]	@ (800e074 <tcp_input+0x288>)
 800de04:	f006 ff94 	bl	8014d30 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	4a9a      	ldr	r2, [pc, #616]	@ (800e078 <tcp_input+0x28c>)
 800de0e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	895b      	ldrh	r3, [r3, #10]
 800de14:	2b13      	cmp	r3, #19
 800de16:	f240 83d1 	bls.w	800e5bc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800de1a:	4b98      	ldr	r3, [pc, #608]	@ (800e07c <tcp_input+0x290>)
 800de1c:	695b      	ldr	r3, [r3, #20]
 800de1e:	4a97      	ldr	r2, [pc, #604]	@ (800e07c <tcp_input+0x290>)
 800de20:	6812      	ldr	r2, [r2, #0]
 800de22:	4611      	mov	r1, r2
 800de24:	4618      	mov	r0, r3
 800de26:	f005 ff2d 	bl	8013c84 <ip4_addr_isbroadcast_u32>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f040 83c7 	bne.w	800e5c0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800de32:	4b92      	ldr	r3, [pc, #584]	@ (800e07c <tcp_input+0x290>)
 800de34:	695b      	ldr	r3, [r3, #20]
 800de36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800de3a:	2be0      	cmp	r3, #224	@ 0xe0
 800de3c:	f000 83c0 	beq.w	800e5c0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800de40:	4b8d      	ldr	r3, [pc, #564]	@ (800e078 <tcp_input+0x28c>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	899b      	ldrh	r3, [r3, #12]
 800de46:	b29b      	uxth	r3, r3
 800de48:	4618      	mov	r0, r3
 800de4a:	f7fc fda5 	bl	800a998 <lwip_htons>
 800de4e:	4603      	mov	r3, r0
 800de50:	0b1b      	lsrs	r3, r3, #12
 800de52:	b29b      	uxth	r3, r3
 800de54:	b2db      	uxtb	r3, r3
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800de5a:	7cbb      	ldrb	r3, [r7, #18]
 800de5c:	2b13      	cmp	r3, #19
 800de5e:	f240 83b1 	bls.w	800e5c4 <tcp_input+0x7d8>
 800de62:	7cbb      	ldrb	r3, [r7, #18]
 800de64:	b29a      	uxth	r2, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	891b      	ldrh	r3, [r3, #8]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	f200 83aa 	bhi.w	800e5c4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800de70:	7cbb      	ldrb	r3, [r7, #18]
 800de72:	b29b      	uxth	r3, r3
 800de74:	3b14      	subs	r3, #20
 800de76:	b29a      	uxth	r2, r3
 800de78:	4b81      	ldr	r3, [pc, #516]	@ (800e080 <tcp_input+0x294>)
 800de7a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800de7c:	4b81      	ldr	r3, [pc, #516]	@ (800e084 <tcp_input+0x298>)
 800de7e:	2200      	movs	r2, #0
 800de80:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	895a      	ldrh	r2, [r3, #10]
 800de86:	7cbb      	ldrb	r3, [r7, #18]
 800de88:	b29b      	uxth	r3, r3
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d309      	bcc.n	800dea2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800de8e:	4b7c      	ldr	r3, [pc, #496]	@ (800e080 <tcp_input+0x294>)
 800de90:	881a      	ldrh	r2, [r3, #0]
 800de92:	4b7d      	ldr	r3, [pc, #500]	@ (800e088 <tcp_input+0x29c>)
 800de94:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800de96:	7cbb      	ldrb	r3, [r7, #18]
 800de98:	4619      	mov	r1, r3
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f7fe f854 	bl	800bf48 <pbuf_remove_header>
 800dea0:	e04e      	b.n	800df40 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d105      	bne.n	800deb6 <tcp_input+0xca>
 800deaa:	4b70      	ldr	r3, [pc, #448]	@ (800e06c <tcp_input+0x280>)
 800deac:	22c2      	movs	r2, #194	@ 0xc2
 800deae:	4977      	ldr	r1, [pc, #476]	@ (800e08c <tcp_input+0x2a0>)
 800deb0:	4870      	ldr	r0, [pc, #448]	@ (800e074 <tcp_input+0x288>)
 800deb2:	f006 ff3d 	bl	8014d30 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800deb6:	2114      	movs	r1, #20
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f7fe f845 	bl	800bf48 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	895a      	ldrh	r2, [r3, #10]
 800dec2:	4b71      	ldr	r3, [pc, #452]	@ (800e088 <tcp_input+0x29c>)
 800dec4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800dec6:	4b6e      	ldr	r3, [pc, #440]	@ (800e080 <tcp_input+0x294>)
 800dec8:	881a      	ldrh	r2, [r3, #0]
 800deca:	4b6f      	ldr	r3, [pc, #444]	@ (800e088 <tcp_input+0x29c>)
 800decc:	881b      	ldrh	r3, [r3, #0]
 800dece:	1ad3      	subs	r3, r2, r3
 800ded0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ded2:	4b6d      	ldr	r3, [pc, #436]	@ (800e088 <tcp_input+0x29c>)
 800ded4:	881b      	ldrh	r3, [r3, #0]
 800ded6:	4619      	mov	r1, r3
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f7fe f835 	bl	800bf48 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	895b      	ldrh	r3, [r3, #10]
 800dee4:	8a3a      	ldrh	r2, [r7, #16]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	f200 836e 	bhi.w	800e5c8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	4a64      	ldr	r2, [pc, #400]	@ (800e084 <tcp_input+0x298>)
 800def4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	8a3a      	ldrh	r2, [r7, #16]
 800defc:	4611      	mov	r1, r2
 800defe:	4618      	mov	r0, r3
 800df00:	f7fe f822 	bl	800bf48 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	891a      	ldrh	r2, [r3, #8]
 800df08:	8a3b      	ldrh	r3, [r7, #16]
 800df0a:	1ad3      	subs	r3, r2, r3
 800df0c:	b29a      	uxth	r2, r3
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	895b      	ldrh	r3, [r3, #10]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d005      	beq.n	800df26 <tcp_input+0x13a>
 800df1a:	4b54      	ldr	r3, [pc, #336]	@ (800e06c <tcp_input+0x280>)
 800df1c:	22df      	movs	r2, #223	@ 0xdf
 800df1e:	495c      	ldr	r1, [pc, #368]	@ (800e090 <tcp_input+0x2a4>)
 800df20:	4854      	ldr	r0, [pc, #336]	@ (800e074 <tcp_input+0x288>)
 800df22:	f006 ff05 	bl	8014d30 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	891a      	ldrh	r2, [r3, #8]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	891b      	ldrh	r3, [r3, #8]
 800df30:	429a      	cmp	r2, r3
 800df32:	d005      	beq.n	800df40 <tcp_input+0x154>
 800df34:	4b4d      	ldr	r3, [pc, #308]	@ (800e06c <tcp_input+0x280>)
 800df36:	22e0      	movs	r2, #224	@ 0xe0
 800df38:	4956      	ldr	r1, [pc, #344]	@ (800e094 <tcp_input+0x2a8>)
 800df3a:	484e      	ldr	r0, [pc, #312]	@ (800e074 <tcp_input+0x288>)
 800df3c:	f006 fef8 	bl	8014d30 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800df40:	4b4d      	ldr	r3, [pc, #308]	@ (800e078 <tcp_input+0x28c>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	881b      	ldrh	r3, [r3, #0]
 800df46:	b29b      	uxth	r3, r3
 800df48:	4a4b      	ldr	r2, [pc, #300]	@ (800e078 <tcp_input+0x28c>)
 800df4a:	6814      	ldr	r4, [r2, #0]
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fc fd23 	bl	800a998 <lwip_htons>
 800df52:	4603      	mov	r3, r0
 800df54:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800df56:	4b48      	ldr	r3, [pc, #288]	@ (800e078 <tcp_input+0x28c>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	885b      	ldrh	r3, [r3, #2]
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	4a46      	ldr	r2, [pc, #280]	@ (800e078 <tcp_input+0x28c>)
 800df60:	6814      	ldr	r4, [r2, #0]
 800df62:	4618      	mov	r0, r3
 800df64:	f7fc fd18 	bl	800a998 <lwip_htons>
 800df68:	4603      	mov	r3, r0
 800df6a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800df6c:	4b42      	ldr	r3, [pc, #264]	@ (800e078 <tcp_input+0x28c>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	4a41      	ldr	r2, [pc, #260]	@ (800e078 <tcp_input+0x28c>)
 800df74:	6814      	ldr	r4, [r2, #0]
 800df76:	4618      	mov	r0, r3
 800df78:	f7fc fd24 	bl	800a9c4 <lwip_htonl>
 800df7c:	4603      	mov	r3, r0
 800df7e:	6063      	str	r3, [r4, #4]
 800df80:	6863      	ldr	r3, [r4, #4]
 800df82:	4a45      	ldr	r2, [pc, #276]	@ (800e098 <tcp_input+0x2ac>)
 800df84:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800df86:	4b3c      	ldr	r3, [pc, #240]	@ (800e078 <tcp_input+0x28c>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	4a3a      	ldr	r2, [pc, #232]	@ (800e078 <tcp_input+0x28c>)
 800df8e:	6814      	ldr	r4, [r2, #0]
 800df90:	4618      	mov	r0, r3
 800df92:	f7fc fd17 	bl	800a9c4 <lwip_htonl>
 800df96:	4603      	mov	r3, r0
 800df98:	60a3      	str	r3, [r4, #8]
 800df9a:	68a3      	ldr	r3, [r4, #8]
 800df9c:	4a3f      	ldr	r2, [pc, #252]	@ (800e09c <tcp_input+0x2b0>)
 800df9e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dfa0:	4b35      	ldr	r3, [pc, #212]	@ (800e078 <tcp_input+0x28c>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	89db      	ldrh	r3, [r3, #14]
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	4a33      	ldr	r2, [pc, #204]	@ (800e078 <tcp_input+0x28c>)
 800dfaa:	6814      	ldr	r4, [r2, #0]
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fc fcf3 	bl	800a998 <lwip_htons>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dfb6:	4b30      	ldr	r3, [pc, #192]	@ (800e078 <tcp_input+0x28c>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	899b      	ldrh	r3, [r3, #12]
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fc fcea 	bl	800a998 <lwip_htons>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dfcc:	b2da      	uxtb	r2, r3
 800dfce:	4b34      	ldr	r3, [pc, #208]	@ (800e0a0 <tcp_input+0x2b4>)
 800dfd0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	891a      	ldrh	r2, [r3, #8]
 800dfd6:	4b33      	ldr	r3, [pc, #204]	@ (800e0a4 <tcp_input+0x2b8>)
 800dfd8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dfda:	4b31      	ldr	r3, [pc, #196]	@ (800e0a0 <tcp_input+0x2b4>)
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	f003 0303 	and.w	r3, r3, #3
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d00c      	beq.n	800e000 <tcp_input+0x214>
    tcplen++;
 800dfe6:	4b2f      	ldr	r3, [pc, #188]	@ (800e0a4 <tcp_input+0x2b8>)
 800dfe8:	881b      	ldrh	r3, [r3, #0]
 800dfea:	3301      	adds	r3, #1
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	4b2d      	ldr	r3, [pc, #180]	@ (800e0a4 <tcp_input+0x2b8>)
 800dff0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	891a      	ldrh	r2, [r3, #8]
 800dff6:	4b2b      	ldr	r3, [pc, #172]	@ (800e0a4 <tcp_input+0x2b8>)
 800dff8:	881b      	ldrh	r3, [r3, #0]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	f200 82e6 	bhi.w	800e5cc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e000:	2300      	movs	r3, #0
 800e002:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e004:	4b28      	ldr	r3, [pc, #160]	@ (800e0a8 <tcp_input+0x2bc>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	61fb      	str	r3, [r7, #28]
 800e00a:	e09d      	b.n	800e148 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	7d1b      	ldrb	r3, [r3, #20]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d105      	bne.n	800e020 <tcp_input+0x234>
 800e014:	4b15      	ldr	r3, [pc, #84]	@ (800e06c <tcp_input+0x280>)
 800e016:	22fb      	movs	r2, #251	@ 0xfb
 800e018:	4924      	ldr	r1, [pc, #144]	@ (800e0ac <tcp_input+0x2c0>)
 800e01a:	4816      	ldr	r0, [pc, #88]	@ (800e074 <tcp_input+0x288>)
 800e01c:	f006 fe88 	bl	8014d30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	7d1b      	ldrb	r3, [r3, #20]
 800e024:	2b0a      	cmp	r3, #10
 800e026:	d105      	bne.n	800e034 <tcp_input+0x248>
 800e028:	4b10      	ldr	r3, [pc, #64]	@ (800e06c <tcp_input+0x280>)
 800e02a:	22fc      	movs	r2, #252	@ 0xfc
 800e02c:	4920      	ldr	r1, [pc, #128]	@ (800e0b0 <tcp_input+0x2c4>)
 800e02e:	4811      	ldr	r0, [pc, #68]	@ (800e074 <tcp_input+0x288>)
 800e030:	f006 fe7e 	bl	8014d30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	7d1b      	ldrb	r3, [r3, #20]
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d105      	bne.n	800e048 <tcp_input+0x25c>
 800e03c:	4b0b      	ldr	r3, [pc, #44]	@ (800e06c <tcp_input+0x280>)
 800e03e:	22fd      	movs	r2, #253	@ 0xfd
 800e040:	491c      	ldr	r1, [pc, #112]	@ (800e0b4 <tcp_input+0x2c8>)
 800e042:	480c      	ldr	r0, [pc, #48]	@ (800e074 <tcp_input+0x288>)
 800e044:	f006 fe74 	bl	8014d30 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	7a1b      	ldrb	r3, [r3, #8]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d033      	beq.n	800e0b8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	7a1a      	ldrb	r2, [r3, #8]
 800e054:	4b09      	ldr	r3, [pc, #36]	@ (800e07c <tcp_input+0x290>)
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e05c:	3301      	adds	r3, #1
 800e05e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e060:	429a      	cmp	r2, r3
 800e062:	d029      	beq.n	800e0b8 <tcp_input+0x2cc>
      prev = pcb;
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	61bb      	str	r3, [r7, #24]
      continue;
 800e068:	e06b      	b.n	800e142 <tcp_input+0x356>
 800e06a:	bf00      	nop
 800e06c:	08016d8c 	.word	0x08016d8c
 800e070:	08016dc0 	.word	0x08016dc0
 800e074:	08016dd8 	.word	0x08016dd8
 800e078:	2000b28c 	.word	0x2000b28c
 800e07c:	20005b34 	.word	0x20005b34
 800e080:	2000b290 	.word	0x2000b290
 800e084:	2000b294 	.word	0x2000b294
 800e088:	2000b292 	.word	0x2000b292
 800e08c:	08016e00 	.word	0x08016e00
 800e090:	08016e10 	.word	0x08016e10
 800e094:	08016e1c 	.word	0x08016e1c
 800e098:	2000b29c 	.word	0x2000b29c
 800e09c:	2000b2a0 	.word	0x2000b2a0
 800e0a0:	2000b2a8 	.word	0x2000b2a8
 800e0a4:	2000b2a6 	.word	0x2000b2a6
 800e0a8:	2000b270 	.word	0x2000b270
 800e0ac:	08016e3c 	.word	0x08016e3c
 800e0b0:	08016e64 	.word	0x08016e64
 800e0b4:	08016e90 	.word	0x08016e90
    }

    if (pcb->remote_port == tcphdr->src &&
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	8b1a      	ldrh	r2, [r3, #24]
 800e0bc:	4b72      	ldr	r3, [pc, #456]	@ (800e288 <tcp_input+0x49c>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	881b      	ldrh	r3, [r3, #0]
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d13a      	bne.n	800e13e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	8ada      	ldrh	r2, [r3, #22]
 800e0cc:	4b6e      	ldr	r3, [pc, #440]	@ (800e288 <tcp_input+0x49c>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	885b      	ldrh	r3, [r3, #2]
 800e0d2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d132      	bne.n	800e13e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	685a      	ldr	r2, [r3, #4]
 800e0dc:	4b6b      	ldr	r3, [pc, #428]	@ (800e28c <tcp_input+0x4a0>)
 800e0de:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d12c      	bne.n	800e13e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	4b68      	ldr	r3, [pc, #416]	@ (800e28c <tcp_input+0x4a0>)
 800e0ea:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d126      	bne.n	800e13e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	69fa      	ldr	r2, [r7, #28]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d106      	bne.n	800e108 <tcp_input+0x31c>
 800e0fa:	4b65      	ldr	r3, [pc, #404]	@ (800e290 <tcp_input+0x4a4>)
 800e0fc:	f240 120d 	movw	r2, #269	@ 0x10d
 800e100:	4964      	ldr	r1, [pc, #400]	@ (800e294 <tcp_input+0x4a8>)
 800e102:	4865      	ldr	r0, [pc, #404]	@ (800e298 <tcp_input+0x4ac>)
 800e104:	f006 fe14 	bl	8014d30 <iprintf>
      if (prev != NULL) {
 800e108:	69bb      	ldr	r3, [r7, #24]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d00a      	beq.n	800e124 <tcp_input+0x338>
        prev->next = pcb->next;
 800e10e:	69fb      	ldr	r3, [r7, #28]
 800e110:	68da      	ldr	r2, [r3, #12]
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e116:	4b61      	ldr	r3, [pc, #388]	@ (800e29c <tcp_input+0x4b0>)
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	69fb      	ldr	r3, [r7, #28]
 800e11c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e11e:	4a5f      	ldr	r2, [pc, #380]	@ (800e29c <tcp_input+0x4b0>)
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	69fa      	ldr	r2, [r7, #28]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d111      	bne.n	800e152 <tcp_input+0x366>
 800e12e:	4b58      	ldr	r3, [pc, #352]	@ (800e290 <tcp_input+0x4a4>)
 800e130:	f240 1215 	movw	r2, #277	@ 0x115
 800e134:	495a      	ldr	r1, [pc, #360]	@ (800e2a0 <tcp_input+0x4b4>)
 800e136:	4858      	ldr	r0, [pc, #352]	@ (800e298 <tcp_input+0x4ac>)
 800e138:	f006 fdfa 	bl	8014d30 <iprintf>
      break;
 800e13c:	e009      	b.n	800e152 <tcp_input+0x366>
    }
    prev = pcb;
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	68db      	ldr	r3, [r3, #12]
 800e146:	61fb      	str	r3, [r7, #28]
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	f47f af5e 	bne.w	800e00c <tcp_input+0x220>
 800e150:	e000      	b.n	800e154 <tcp_input+0x368>
      break;
 800e152:	bf00      	nop
  }

  if (pcb == NULL) {
 800e154:	69fb      	ldr	r3, [r7, #28]
 800e156:	2b00      	cmp	r3, #0
 800e158:	f040 80aa 	bne.w	800e2b0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e15c:	4b51      	ldr	r3, [pc, #324]	@ (800e2a4 <tcp_input+0x4b8>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	61fb      	str	r3, [r7, #28]
 800e162:	e03f      	b.n	800e1e4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	7d1b      	ldrb	r3, [r3, #20]
 800e168:	2b0a      	cmp	r3, #10
 800e16a:	d006      	beq.n	800e17a <tcp_input+0x38e>
 800e16c:	4b48      	ldr	r3, [pc, #288]	@ (800e290 <tcp_input+0x4a4>)
 800e16e:	f240 121f 	movw	r2, #287	@ 0x11f
 800e172:	494d      	ldr	r1, [pc, #308]	@ (800e2a8 <tcp_input+0x4bc>)
 800e174:	4848      	ldr	r0, [pc, #288]	@ (800e298 <tcp_input+0x4ac>)
 800e176:	f006 fddb 	bl	8014d30 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	7a1b      	ldrb	r3, [r3, #8]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d009      	beq.n	800e196 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	7a1a      	ldrb	r2, [r3, #8]
 800e186:	4b41      	ldr	r3, [pc, #260]	@ (800e28c <tcp_input+0x4a0>)
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e18e:	3301      	adds	r3, #1
 800e190:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e192:	429a      	cmp	r2, r3
 800e194:	d122      	bne.n	800e1dc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	8b1a      	ldrh	r2, [r3, #24]
 800e19a:	4b3b      	ldr	r3, [pc, #236]	@ (800e288 <tcp_input+0x49c>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	881b      	ldrh	r3, [r3, #0]
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d11b      	bne.n	800e1de <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	8ada      	ldrh	r2, [r3, #22]
 800e1aa:	4b37      	ldr	r3, [pc, #220]	@ (800e288 <tcp_input+0x49c>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	885b      	ldrh	r3, [r3, #2]
 800e1b0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d113      	bne.n	800e1de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	685a      	ldr	r2, [r3, #4]
 800e1ba:	4b34      	ldr	r3, [pc, #208]	@ (800e28c <tcp_input+0x4a0>)
 800e1bc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d10d      	bne.n	800e1de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	681a      	ldr	r2, [r3, #0]
 800e1c6:	4b31      	ldr	r3, [pc, #196]	@ (800e28c <tcp_input+0x4a0>)
 800e1c8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d107      	bne.n	800e1de <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e1ce:	69f8      	ldr	r0, [r7, #28]
 800e1d0:	f000 fb56 	bl	800e880 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f7fd ff3d 	bl	800c054 <pbuf_free>
        return;
 800e1da:	e1fd      	b.n	800e5d8 <tcp_input+0x7ec>
        continue;
 800e1dc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	61fb      	str	r3, [r7, #28]
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d1bc      	bne.n	800e164 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e1ee:	4b2f      	ldr	r3, [pc, #188]	@ (800e2ac <tcp_input+0x4c0>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	617b      	str	r3, [r7, #20]
 800e1f4:	e02a      	b.n	800e24c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	7a1b      	ldrb	r3, [r3, #8]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d00c      	beq.n	800e218 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	7a1a      	ldrb	r2, [r3, #8]
 800e202:	4b22      	ldr	r3, [pc, #136]	@ (800e28c <tcp_input+0x4a0>)
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e20a:	3301      	adds	r3, #1
 800e20c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e20e:	429a      	cmp	r2, r3
 800e210:	d002      	beq.n	800e218 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	61bb      	str	r3, [r7, #24]
        continue;
 800e216:	e016      	b.n	800e246 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	8ada      	ldrh	r2, [r3, #22]
 800e21c:	4b1a      	ldr	r3, [pc, #104]	@ (800e288 <tcp_input+0x49c>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	885b      	ldrh	r3, [r3, #2]
 800e222:	b29b      	uxth	r3, r3
 800e224:	429a      	cmp	r2, r3
 800e226:	d10c      	bne.n	800e242 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	4b17      	ldr	r3, [pc, #92]	@ (800e28c <tcp_input+0x4a0>)
 800e22e:	695b      	ldr	r3, [r3, #20]
 800e230:	429a      	cmp	r2, r3
 800e232:	d00f      	beq.n	800e254 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d00d      	beq.n	800e256 <tcp_input+0x46a>
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d009      	beq.n	800e256 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	68db      	ldr	r3, [r3, #12]
 800e24a:	617b      	str	r3, [r7, #20]
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d1d1      	bne.n	800e1f6 <tcp_input+0x40a>
 800e252:	e000      	b.n	800e256 <tcp_input+0x46a>
            break;
 800e254:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d029      	beq.n	800e2b0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e25c:	69bb      	ldr	r3, [r7, #24]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d00a      	beq.n	800e278 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	68da      	ldr	r2, [r3, #12]
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e26a:	4b10      	ldr	r3, [pc, #64]	@ (800e2ac <tcp_input+0x4c0>)
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e272:	4a0e      	ldr	r2, [pc, #56]	@ (800e2ac <tcp_input+0x4c0>)
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e278:	6978      	ldr	r0, [r7, #20]
 800e27a:	f000 fa03 	bl	800e684 <tcp_listen_input>
      }
      pbuf_free(p);
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f7fd fee8 	bl	800c054 <pbuf_free>
      return;
 800e284:	e1a8      	b.n	800e5d8 <tcp_input+0x7ec>
 800e286:	bf00      	nop
 800e288:	2000b28c 	.word	0x2000b28c
 800e28c:	20005b34 	.word	0x20005b34
 800e290:	08016d8c 	.word	0x08016d8c
 800e294:	08016eb8 	.word	0x08016eb8
 800e298:	08016dd8 	.word	0x08016dd8
 800e29c:	2000b270 	.word	0x2000b270
 800e2a0:	08016ee4 	.word	0x08016ee4
 800e2a4:	2000b274 	.word	0x2000b274
 800e2a8:	08016f10 	.word	0x08016f10
 800e2ac:	2000b26c 	.word	0x2000b26c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	f000 8158 	beq.w	800e568 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e2b8:	4b95      	ldr	r3, [pc, #596]	@ (800e510 <tcp_input+0x724>)
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	891a      	ldrh	r2, [r3, #8]
 800e2c2:	4b93      	ldr	r3, [pc, #588]	@ (800e510 <tcp_input+0x724>)
 800e2c4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e2c6:	4a92      	ldr	r2, [pc, #584]	@ (800e510 <tcp_input+0x724>)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e2cc:	4b91      	ldr	r3, [pc, #580]	@ (800e514 <tcp_input+0x728>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a8f      	ldr	r2, [pc, #572]	@ (800e510 <tcp_input+0x724>)
 800e2d2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e2d4:	4b90      	ldr	r3, [pc, #576]	@ (800e518 <tcp_input+0x72c>)
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e2da:	4b90      	ldr	r3, [pc, #576]	@ (800e51c <tcp_input+0x730>)
 800e2dc:	2200      	movs	r2, #0
 800e2de:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e2e0:	4b8f      	ldr	r3, [pc, #572]	@ (800e520 <tcp_input+0x734>)
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e2e6:	4b8f      	ldr	r3, [pc, #572]	@ (800e524 <tcp_input+0x738>)
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	f003 0308 	and.w	r3, r3, #8
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d006      	beq.n	800e300 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	7b5b      	ldrb	r3, [r3, #13]
 800e2f6:	f043 0301 	orr.w	r3, r3, #1
 800e2fa:	b2da      	uxtb	r2, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e304:	2b00      	cmp	r3, #0
 800e306:	d017      	beq.n	800e338 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e308:	69f8      	ldr	r0, [r7, #28]
 800e30a:	f7ff f929 	bl	800d560 <tcp_process_refused_data>
 800e30e:	4603      	mov	r3, r0
 800e310:	f113 0f0d 	cmn.w	r3, #13
 800e314:	d007      	beq.n	800e326 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e316:	69fb      	ldr	r3, [r7, #28]
 800e318:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00c      	beq.n	800e338 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e31e:	4b82      	ldr	r3, [pc, #520]	@ (800e528 <tcp_input+0x73c>)
 800e320:	881b      	ldrh	r3, [r3, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d008      	beq.n	800e338 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e326:	69fb      	ldr	r3, [r7, #28]
 800e328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f040 80e3 	bne.w	800e4f6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e330:	69f8      	ldr	r0, [r7, #28]
 800e332:	f003 f9a7 	bl	8011684 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e336:	e0de      	b.n	800e4f6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e338:	4a7c      	ldr	r2, [pc, #496]	@ (800e52c <tcp_input+0x740>)
 800e33a:	69fb      	ldr	r3, [r7, #28]
 800e33c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e33e:	69f8      	ldr	r0, [r7, #28]
 800e340:	f000 fb18 	bl	800e974 <tcp_process>
 800e344:	4603      	mov	r3, r0
 800e346:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e348:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e34c:	f113 0f0d 	cmn.w	r3, #13
 800e350:	f000 80d3 	beq.w	800e4fa <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e354:	4b71      	ldr	r3, [pc, #452]	@ (800e51c <tcp_input+0x730>)
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	f003 0308 	and.w	r3, r3, #8
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d015      	beq.n	800e38c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e366:	2b00      	cmp	r3, #0
 800e368:	d008      	beq.n	800e37c <tcp_input+0x590>
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e370:	69fa      	ldr	r2, [r7, #28]
 800e372:	6912      	ldr	r2, [r2, #16]
 800e374:	f06f 010d 	mvn.w	r1, #13
 800e378:	4610      	mov	r0, r2
 800e37a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e37c:	69f9      	ldr	r1, [r7, #28]
 800e37e:	486c      	ldr	r0, [pc, #432]	@ (800e530 <tcp_input+0x744>)
 800e380:	f7ff fbbc 	bl	800dafc <tcp_pcb_remove>
        tcp_free(pcb);
 800e384:	69f8      	ldr	r0, [r7, #28]
 800e386:	f7fe f9a7 	bl	800c6d8 <tcp_free>
 800e38a:	e0da      	b.n	800e542 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e38c:	2300      	movs	r3, #0
 800e38e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e390:	4b63      	ldr	r3, [pc, #396]	@ (800e520 <tcp_input+0x734>)
 800e392:	881b      	ldrh	r3, [r3, #0]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d01d      	beq.n	800e3d4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e398:	4b61      	ldr	r3, [pc, #388]	@ (800e520 <tcp_input+0x734>)
 800e39a:	881b      	ldrh	r3, [r3, #0]
 800e39c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d00a      	beq.n	800e3be <tcp_input+0x5d2>
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3ae:	69fa      	ldr	r2, [r7, #28]
 800e3b0:	6910      	ldr	r0, [r2, #16]
 800e3b2:	89fa      	ldrh	r2, [r7, #14]
 800e3b4:	69f9      	ldr	r1, [r7, #28]
 800e3b6:	4798      	blx	r3
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	74fb      	strb	r3, [r7, #19]
 800e3bc:	e001      	b.n	800e3c2 <tcp_input+0x5d6>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e3c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3c6:	f113 0f0d 	cmn.w	r3, #13
 800e3ca:	f000 8098 	beq.w	800e4fe <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e3ce:	4b54      	ldr	r3, [pc, #336]	@ (800e520 <tcp_input+0x734>)
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e3d4:	69f8      	ldr	r0, [r7, #28]
 800e3d6:	f000 f915 	bl	800e604 <tcp_input_delayed_close>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	f040 8090 	bne.w	800e502 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e3e2:	4b4d      	ldr	r3, [pc, #308]	@ (800e518 <tcp_input+0x72c>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d041      	beq.n	800e46e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d006      	beq.n	800e400 <tcp_input+0x614>
 800e3f2:	4b50      	ldr	r3, [pc, #320]	@ (800e534 <tcp_input+0x748>)
 800e3f4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800e3f8:	494f      	ldr	r1, [pc, #316]	@ (800e538 <tcp_input+0x74c>)
 800e3fa:	4850      	ldr	r0, [pc, #320]	@ (800e53c <tcp_input+0x750>)
 800e3fc:	f006 fc98 	bl	8014d30 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	8b5b      	ldrh	r3, [r3, #26]
 800e404:	f003 0310 	and.w	r3, r3, #16
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d008      	beq.n	800e41e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e40c:	4b42      	ldr	r3, [pc, #264]	@ (800e518 <tcp_input+0x72c>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	4618      	mov	r0, r3
 800e412:	f7fd fe1f 	bl	800c054 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e416:	69f8      	ldr	r0, [r7, #28]
 800e418:	f7fe fc46 	bl	800cca8 <tcp_abort>
            goto aborted;
 800e41c:	e091      	b.n	800e542 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e424:	2b00      	cmp	r3, #0
 800e426:	d00c      	beq.n	800e442 <tcp_input+0x656>
 800e428:	69fb      	ldr	r3, [r7, #28]
 800e42a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	6918      	ldr	r0, [r3, #16]
 800e432:	4b39      	ldr	r3, [pc, #228]	@ (800e518 <tcp_input+0x72c>)
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	2300      	movs	r3, #0
 800e438:	69f9      	ldr	r1, [r7, #28]
 800e43a:	47a0      	blx	r4
 800e43c:	4603      	mov	r3, r0
 800e43e:	74fb      	strb	r3, [r7, #19]
 800e440:	e008      	b.n	800e454 <tcp_input+0x668>
 800e442:	4b35      	ldr	r3, [pc, #212]	@ (800e518 <tcp_input+0x72c>)
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	2300      	movs	r3, #0
 800e448:	69f9      	ldr	r1, [r7, #28]
 800e44a:	2000      	movs	r0, #0
 800e44c:	f7ff f95e 	bl	800d70c <tcp_recv_null>
 800e450:	4603      	mov	r3, r0
 800e452:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e454:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e458:	f113 0f0d 	cmn.w	r3, #13
 800e45c:	d053      	beq.n	800e506 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e45e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d003      	beq.n	800e46e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e466:	4b2c      	ldr	r3, [pc, #176]	@ (800e518 <tcp_input+0x72c>)
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	69fb      	ldr	r3, [r7, #28]
 800e46c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e46e:	4b2b      	ldr	r3, [pc, #172]	@ (800e51c <tcp_input+0x730>)
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	f003 0320 	and.w	r3, r3, #32
 800e476:	2b00      	cmp	r3, #0
 800e478:	d030      	beq.n	800e4dc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d009      	beq.n	800e496 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e486:	7b5a      	ldrb	r2, [r3, #13]
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e48c:	f042 0220 	orr.w	r2, r2, #32
 800e490:	b2d2      	uxtb	r2, r2
 800e492:	735a      	strb	r2, [r3, #13]
 800e494:	e022      	b.n	800e4dc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e49a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e49e:	d005      	beq.n	800e4ac <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	b29a      	uxth	r2, r3
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d00b      	beq.n	800e4ce <tcp_input+0x6e2>
 800e4b6:	69fb      	ldr	r3, [r7, #28]
 800e4b8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e4bc:	69fb      	ldr	r3, [r7, #28]
 800e4be:	6918      	ldr	r0, [r3, #16]
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	69f9      	ldr	r1, [r7, #28]
 800e4c6:	47a0      	blx	r4
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	74fb      	strb	r3, [r7, #19]
 800e4cc:	e001      	b.n	800e4d2 <tcp_input+0x6e6>
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e4d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e4d6:	f113 0f0d 	cmn.w	r3, #13
 800e4da:	d016      	beq.n	800e50a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e4dc:	4b13      	ldr	r3, [pc, #76]	@ (800e52c <tcp_input+0x740>)
 800e4de:	2200      	movs	r2, #0
 800e4e0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e4e2:	69f8      	ldr	r0, [r7, #28]
 800e4e4:	f000 f88e 	bl	800e604 <tcp_input_delayed_close>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d128      	bne.n	800e540 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e4ee:	69f8      	ldr	r0, [r7, #28]
 800e4f0:	f002 fac2 	bl	8010a78 <tcp_output>
 800e4f4:	e025      	b.n	800e542 <tcp_input+0x756>
        goto aborted;
 800e4f6:	bf00      	nop
 800e4f8:	e023      	b.n	800e542 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e4fa:	bf00      	nop
 800e4fc:	e021      	b.n	800e542 <tcp_input+0x756>
              goto aborted;
 800e4fe:	bf00      	nop
 800e500:	e01f      	b.n	800e542 <tcp_input+0x756>
          goto aborted;
 800e502:	bf00      	nop
 800e504:	e01d      	b.n	800e542 <tcp_input+0x756>
            goto aborted;
 800e506:	bf00      	nop
 800e508:	e01b      	b.n	800e542 <tcp_input+0x756>
              goto aborted;
 800e50a:	bf00      	nop
 800e50c:	e019      	b.n	800e542 <tcp_input+0x756>
 800e50e:	bf00      	nop
 800e510:	2000b27c 	.word	0x2000b27c
 800e514:	2000b28c 	.word	0x2000b28c
 800e518:	2000b2ac 	.word	0x2000b2ac
 800e51c:	2000b2a9 	.word	0x2000b2a9
 800e520:	2000b2a4 	.word	0x2000b2a4
 800e524:	2000b2a8 	.word	0x2000b2a8
 800e528:	2000b2a6 	.word	0x2000b2a6
 800e52c:	2000b2b0 	.word	0x2000b2b0
 800e530:	2000b270 	.word	0x2000b270
 800e534:	08016d8c 	.word	0x08016d8c
 800e538:	08016f40 	.word	0x08016f40
 800e53c:	08016dd8 	.word	0x08016dd8
          goto aborted;
 800e540:	bf00      	nop
    tcp_input_pcb = NULL;
 800e542:	4b27      	ldr	r3, [pc, #156]	@ (800e5e0 <tcp_input+0x7f4>)
 800e544:	2200      	movs	r2, #0
 800e546:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e548:	4b26      	ldr	r3, [pc, #152]	@ (800e5e4 <tcp_input+0x7f8>)
 800e54a:	2200      	movs	r2, #0
 800e54c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e54e:	4b26      	ldr	r3, [pc, #152]	@ (800e5e8 <tcp_input+0x7fc>)
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d03f      	beq.n	800e5d6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e556:	4b24      	ldr	r3, [pc, #144]	@ (800e5e8 <tcp_input+0x7fc>)
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fd fd7a 	bl	800c054 <pbuf_free>
      inseg.p = NULL;
 800e560:	4b21      	ldr	r3, [pc, #132]	@ (800e5e8 <tcp_input+0x7fc>)
 800e562:	2200      	movs	r2, #0
 800e564:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e566:	e036      	b.n	800e5d6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e568:	4b20      	ldr	r3, [pc, #128]	@ (800e5ec <tcp_input+0x800>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	899b      	ldrh	r3, [r3, #12]
 800e56e:	b29b      	uxth	r3, r3
 800e570:	4618      	mov	r0, r3
 800e572:	f7fc fa11 	bl	800a998 <lwip_htons>
 800e576:	4603      	mov	r3, r0
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	f003 0304 	and.w	r3, r3, #4
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d118      	bne.n	800e5b4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e582:	4b1b      	ldr	r3, [pc, #108]	@ (800e5f0 <tcp_input+0x804>)
 800e584:	6819      	ldr	r1, [r3, #0]
 800e586:	4b1b      	ldr	r3, [pc, #108]	@ (800e5f4 <tcp_input+0x808>)
 800e588:	881b      	ldrh	r3, [r3, #0]
 800e58a:	461a      	mov	r2, r3
 800e58c:	4b1a      	ldr	r3, [pc, #104]	@ (800e5f8 <tcp_input+0x80c>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e592:	4b16      	ldr	r3, [pc, #88]	@ (800e5ec <tcp_input+0x800>)
 800e594:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e596:	885b      	ldrh	r3, [r3, #2]
 800e598:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e59a:	4a14      	ldr	r2, [pc, #80]	@ (800e5ec <tcp_input+0x800>)
 800e59c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e59e:	8812      	ldrh	r2, [r2, #0]
 800e5a0:	b292      	uxth	r2, r2
 800e5a2:	9202      	str	r2, [sp, #8]
 800e5a4:	9301      	str	r3, [sp, #4]
 800e5a6:	4b15      	ldr	r3, [pc, #84]	@ (800e5fc <tcp_input+0x810>)
 800e5a8:	9300      	str	r3, [sp, #0]
 800e5aa:	4b15      	ldr	r3, [pc, #84]	@ (800e600 <tcp_input+0x814>)
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	2000      	movs	r0, #0
 800e5b0:	f003 f816 	bl	80115e0 <tcp_rst>
    pbuf_free(p);
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7fd fd4d 	bl	800c054 <pbuf_free>
  return;
 800e5ba:	e00c      	b.n	800e5d6 <tcp_input+0x7ea>
    goto dropped;
 800e5bc:	bf00      	nop
 800e5be:	e006      	b.n	800e5ce <tcp_input+0x7e2>
    goto dropped;
 800e5c0:	bf00      	nop
 800e5c2:	e004      	b.n	800e5ce <tcp_input+0x7e2>
    goto dropped;
 800e5c4:	bf00      	nop
 800e5c6:	e002      	b.n	800e5ce <tcp_input+0x7e2>
      goto dropped;
 800e5c8:	bf00      	nop
 800e5ca:	e000      	b.n	800e5ce <tcp_input+0x7e2>
      goto dropped;
 800e5cc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7fd fd40 	bl	800c054 <pbuf_free>
 800e5d4:	e000      	b.n	800e5d8 <tcp_input+0x7ec>
  return;
 800e5d6:	bf00      	nop
}
 800e5d8:	3724      	adds	r7, #36	@ 0x24
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd90      	pop	{r4, r7, pc}
 800e5de:	bf00      	nop
 800e5e0:	2000b2b0 	.word	0x2000b2b0
 800e5e4:	2000b2ac 	.word	0x2000b2ac
 800e5e8:	2000b27c 	.word	0x2000b27c
 800e5ec:	2000b28c 	.word	0x2000b28c
 800e5f0:	2000b2a0 	.word	0x2000b2a0
 800e5f4:	2000b2a6 	.word	0x2000b2a6
 800e5f8:	2000b29c 	.word	0x2000b29c
 800e5fc:	20005b44 	.word	0x20005b44
 800e600:	20005b48 	.word	0x20005b48

0800e604 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d106      	bne.n	800e620 <tcp_input_delayed_close+0x1c>
 800e612:	4b17      	ldr	r3, [pc, #92]	@ (800e670 <tcp_input_delayed_close+0x6c>)
 800e614:	f240 225a 	movw	r2, #602	@ 0x25a
 800e618:	4916      	ldr	r1, [pc, #88]	@ (800e674 <tcp_input_delayed_close+0x70>)
 800e61a:	4817      	ldr	r0, [pc, #92]	@ (800e678 <tcp_input_delayed_close+0x74>)
 800e61c:	f006 fb88 	bl	8014d30 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e620:	4b16      	ldr	r3, [pc, #88]	@ (800e67c <tcp_input_delayed_close+0x78>)
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	f003 0310 	and.w	r3, r3, #16
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d01c      	beq.n	800e666 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	8b5b      	ldrh	r3, [r3, #26]
 800e630:	f003 0310 	and.w	r3, r3, #16
 800e634:	2b00      	cmp	r3, #0
 800e636:	d10d      	bne.n	800e654 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d008      	beq.n	800e654 <tcp_input_delayed_close+0x50>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	6912      	ldr	r2, [r2, #16]
 800e64c:	f06f 010e 	mvn.w	r1, #14
 800e650:	4610      	mov	r0, r2
 800e652:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e654:	6879      	ldr	r1, [r7, #4]
 800e656:	480a      	ldr	r0, [pc, #40]	@ (800e680 <tcp_input_delayed_close+0x7c>)
 800e658:	f7ff fa50 	bl	800dafc <tcp_pcb_remove>
    tcp_free(pcb);
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f7fe f83b 	bl	800c6d8 <tcp_free>
    return 1;
 800e662:	2301      	movs	r3, #1
 800e664:	e000      	b.n	800e668 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3708      	adds	r7, #8
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	08016d8c 	.word	0x08016d8c
 800e674:	08016f5c 	.word	0x08016f5c
 800e678:	08016dd8 	.word	0x08016dd8
 800e67c:	2000b2a9 	.word	0x2000b2a9
 800e680:	2000b270 	.word	0x2000b270

0800e684 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e684:	b590      	push	{r4, r7, lr}
 800e686:	b08b      	sub	sp, #44	@ 0x2c
 800e688:	af04      	add	r7, sp, #16
 800e68a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e68c:	4b6f      	ldr	r3, [pc, #444]	@ (800e84c <tcp_listen_input+0x1c8>)
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	f003 0304 	and.w	r3, r3, #4
 800e694:	2b00      	cmp	r3, #0
 800e696:	f040 80d2 	bne.w	800e83e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d106      	bne.n	800e6ae <tcp_listen_input+0x2a>
 800e6a0:	4b6b      	ldr	r3, [pc, #428]	@ (800e850 <tcp_listen_input+0x1cc>)
 800e6a2:	f240 2281 	movw	r2, #641	@ 0x281
 800e6a6:	496b      	ldr	r1, [pc, #428]	@ (800e854 <tcp_listen_input+0x1d0>)
 800e6a8:	486b      	ldr	r0, [pc, #428]	@ (800e858 <tcp_listen_input+0x1d4>)
 800e6aa:	f006 fb41 	bl	8014d30 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e6ae:	4b67      	ldr	r3, [pc, #412]	@ (800e84c <tcp_listen_input+0x1c8>)
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	f003 0310 	and.w	r3, r3, #16
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d019      	beq.n	800e6ee <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6ba:	4b68      	ldr	r3, [pc, #416]	@ (800e85c <tcp_listen_input+0x1d8>)
 800e6bc:	6819      	ldr	r1, [r3, #0]
 800e6be:	4b68      	ldr	r3, [pc, #416]	@ (800e860 <tcp_listen_input+0x1dc>)
 800e6c0:	881b      	ldrh	r3, [r3, #0]
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	4b67      	ldr	r3, [pc, #412]	@ (800e864 <tcp_listen_input+0x1e0>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6ca:	4b67      	ldr	r3, [pc, #412]	@ (800e868 <tcp_listen_input+0x1e4>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6ce:	885b      	ldrh	r3, [r3, #2]
 800e6d0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6d2:	4a65      	ldr	r2, [pc, #404]	@ (800e868 <tcp_listen_input+0x1e4>)
 800e6d4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6d6:	8812      	ldrh	r2, [r2, #0]
 800e6d8:	b292      	uxth	r2, r2
 800e6da:	9202      	str	r2, [sp, #8]
 800e6dc:	9301      	str	r3, [sp, #4]
 800e6de:	4b63      	ldr	r3, [pc, #396]	@ (800e86c <tcp_listen_input+0x1e8>)
 800e6e0:	9300      	str	r3, [sp, #0]
 800e6e2:	4b63      	ldr	r3, [pc, #396]	@ (800e870 <tcp_listen_input+0x1ec>)
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f002 ff7a 	bl	80115e0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e6ec:	e0a9      	b.n	800e842 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e6ee:	4b57      	ldr	r3, [pc, #348]	@ (800e84c <tcp_listen_input+0x1c8>)
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	f003 0302 	and.w	r3, r3, #2
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	f000 80a3 	beq.w	800e842 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	7d5b      	ldrb	r3, [r3, #21]
 800e700:	4618      	mov	r0, r3
 800e702:	f7ff f927 	bl	800d954 <tcp_alloc>
 800e706:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d111      	bne.n	800e732 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	699b      	ldr	r3, [r3, #24]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00a      	beq.n	800e72c <tcp_listen_input+0xa8>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	699b      	ldr	r3, [r3, #24]
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	6910      	ldr	r0, [r2, #16]
 800e71e:	f04f 32ff 	mov.w	r2, #4294967295
 800e722:	2100      	movs	r1, #0
 800e724:	4798      	blx	r3
 800e726:	4603      	mov	r3, r0
 800e728:	73bb      	strb	r3, [r7, #14]
      return;
 800e72a:	e08b      	b.n	800e844 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e72c:	23f0      	movs	r3, #240	@ 0xf0
 800e72e:	73bb      	strb	r3, [r7, #14]
      return;
 800e730:	e088      	b.n	800e844 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e732:	4b50      	ldr	r3, [pc, #320]	@ (800e874 <tcp_listen_input+0x1f0>)
 800e734:	695a      	ldr	r2, [r3, #20]
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e73a:	4b4e      	ldr	r3, [pc, #312]	@ (800e874 <tcp_listen_input+0x1f0>)
 800e73c:	691a      	ldr	r2, [r3, #16]
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	8ada      	ldrh	r2, [r3, #22]
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e74a:	4b47      	ldr	r3, [pc, #284]	@ (800e868 <tcp_listen_input+0x1e4>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	881b      	ldrh	r3, [r3, #0]
 800e750:	b29a      	uxth	r2, r3
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	2203      	movs	r2, #3
 800e75a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e75c:	4b41      	ldr	r3, [pc, #260]	@ (800e864 <tcp_listen_input+0x1e0>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	1c5a      	adds	r2, r3, #1
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e76e:	6978      	ldr	r0, [r7, #20]
 800e770:	f7ff fa58 	bl	800dc24 <tcp_next_iss>
 800e774:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	693a      	ldr	r2, [r7, #16]
 800e77a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	693a      	ldr	r2, [r7, #16]
 800e780:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	693a      	ldr	r2, [r7, #16]
 800e786:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	693a      	ldr	r2, [r7, #16]
 800e78c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e78e:	4b35      	ldr	r3, [pc, #212]	@ (800e864 <tcp_listen_input+0x1e0>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	1e5a      	subs	r2, r3, #1
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	691a      	ldr	r2, [r3, #16]
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	7a5b      	ldrb	r3, [r3, #9]
 800e7aa:	f003 030c 	and.w	r3, r3, #12
 800e7ae:	b2da      	uxtb	r2, r3
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	7a1a      	ldrb	r2, [r3, #8]
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e7bc:	4b2e      	ldr	r3, [pc, #184]	@ (800e878 <tcp_listen_input+0x1f4>)
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	60da      	str	r2, [r3, #12]
 800e7c4:	4a2c      	ldr	r2, [pc, #176]	@ (800e878 <tcp_listen_input+0x1f4>)
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	6013      	str	r3, [r2, #0]
 800e7ca:	f003 f8cb 	bl	8011964 <tcp_timer_needed>
 800e7ce:	4b2b      	ldr	r3, [pc, #172]	@ (800e87c <tcp_listen_input+0x1f8>)
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e7d4:	6978      	ldr	r0, [r7, #20]
 800e7d6:	f001 fd8b 	bl	80102f0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e7da:	4b23      	ldr	r3, [pc, #140]	@ (800e868 <tcp_listen_input+0x1e4>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	89db      	ldrh	r3, [r3, #14]
 800e7e0:	b29a      	uxth	r2, r3
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	3304      	adds	r3, #4
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f004 ffab 	bl	8013758 <ip4_route>
 800e802:	4601      	mov	r1, r0
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	3304      	adds	r3, #4
 800e808:	461a      	mov	r2, r3
 800e80a:	4620      	mov	r0, r4
 800e80c:	f7ff fa30 	bl	800dc70 <tcp_eff_send_mss_netif>
 800e810:	4603      	mov	r3, r0
 800e812:	461a      	mov	r2, r3
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e818:	2112      	movs	r1, #18
 800e81a:	6978      	ldr	r0, [r7, #20]
 800e81c:	f002 f83e 	bl	801089c <tcp_enqueue_flags>
 800e820:	4603      	mov	r3, r0
 800e822:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d004      	beq.n	800e836 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e82c:	2100      	movs	r1, #0
 800e82e:	6978      	ldr	r0, [r7, #20]
 800e830:	f7fe f97c 	bl	800cb2c <tcp_abandon>
      return;
 800e834:	e006      	b.n	800e844 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e836:	6978      	ldr	r0, [r7, #20]
 800e838:	f002 f91e 	bl	8010a78 <tcp_output>
  return;
 800e83c:	e001      	b.n	800e842 <tcp_listen_input+0x1be>
    return;
 800e83e:	bf00      	nop
 800e840:	e000      	b.n	800e844 <tcp_listen_input+0x1c0>
  return;
 800e842:	bf00      	nop
}
 800e844:	371c      	adds	r7, #28
 800e846:	46bd      	mov	sp, r7
 800e848:	bd90      	pop	{r4, r7, pc}
 800e84a:	bf00      	nop
 800e84c:	2000b2a8 	.word	0x2000b2a8
 800e850:	08016d8c 	.word	0x08016d8c
 800e854:	08016f84 	.word	0x08016f84
 800e858:	08016dd8 	.word	0x08016dd8
 800e85c:	2000b2a0 	.word	0x2000b2a0
 800e860:	2000b2a6 	.word	0x2000b2a6
 800e864:	2000b29c 	.word	0x2000b29c
 800e868:	2000b28c 	.word	0x2000b28c
 800e86c:	20005b44 	.word	0x20005b44
 800e870:	20005b48 	.word	0x20005b48
 800e874:	20005b34 	.word	0x20005b34
 800e878:	2000b270 	.word	0x2000b270
 800e87c:	2000b278 	.word	0x2000b278

0800e880 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b086      	sub	sp, #24
 800e884:	af04      	add	r7, sp, #16
 800e886:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e888:	4b2f      	ldr	r3, [pc, #188]	@ (800e948 <tcp_timewait_input+0xc8>)
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	f003 0304 	and.w	r3, r3, #4
 800e890:	2b00      	cmp	r3, #0
 800e892:	d153      	bne.n	800e93c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d106      	bne.n	800e8a8 <tcp_timewait_input+0x28>
 800e89a:	4b2c      	ldr	r3, [pc, #176]	@ (800e94c <tcp_timewait_input+0xcc>)
 800e89c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e8a0:	492b      	ldr	r1, [pc, #172]	@ (800e950 <tcp_timewait_input+0xd0>)
 800e8a2:	482c      	ldr	r0, [pc, #176]	@ (800e954 <tcp_timewait_input+0xd4>)
 800e8a4:	f006 fa44 	bl	8014d30 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e8a8:	4b27      	ldr	r3, [pc, #156]	@ (800e948 <tcp_timewait_input+0xc8>)
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	f003 0302 	and.w	r3, r3, #2
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d02a      	beq.n	800e90a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e8b4:	4b28      	ldr	r3, [pc, #160]	@ (800e958 <tcp_timewait_input+0xd8>)
 800e8b6:	681a      	ldr	r2, [r3, #0]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8bc:	1ad3      	subs	r3, r2, r3
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	db2d      	blt.n	800e91e <tcp_timewait_input+0x9e>
 800e8c2:	4b25      	ldr	r3, [pc, #148]	@ (800e958 <tcp_timewait_input+0xd8>)
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8ca:	6879      	ldr	r1, [r7, #4]
 800e8cc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e8ce:	440b      	add	r3, r1
 800e8d0:	1ad3      	subs	r3, r2, r3
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	dc23      	bgt.n	800e91e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8d6:	4b21      	ldr	r3, [pc, #132]	@ (800e95c <tcp_timewait_input+0xdc>)
 800e8d8:	6819      	ldr	r1, [r3, #0]
 800e8da:	4b21      	ldr	r3, [pc, #132]	@ (800e960 <tcp_timewait_input+0xe0>)
 800e8dc:	881b      	ldrh	r3, [r3, #0]
 800e8de:	461a      	mov	r2, r3
 800e8e0:	4b1d      	ldr	r3, [pc, #116]	@ (800e958 <tcp_timewait_input+0xd8>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e8e6:	4b1f      	ldr	r3, [pc, #124]	@ (800e964 <tcp_timewait_input+0xe4>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8ea:	885b      	ldrh	r3, [r3, #2]
 800e8ec:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e8ee:	4a1d      	ldr	r2, [pc, #116]	@ (800e964 <tcp_timewait_input+0xe4>)
 800e8f0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8f2:	8812      	ldrh	r2, [r2, #0]
 800e8f4:	b292      	uxth	r2, r2
 800e8f6:	9202      	str	r2, [sp, #8]
 800e8f8:	9301      	str	r3, [sp, #4]
 800e8fa:	4b1b      	ldr	r3, [pc, #108]	@ (800e968 <tcp_timewait_input+0xe8>)
 800e8fc:	9300      	str	r3, [sp, #0]
 800e8fe:	4b1b      	ldr	r3, [pc, #108]	@ (800e96c <tcp_timewait_input+0xec>)
 800e900:	4602      	mov	r2, r0
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f002 fe6c 	bl	80115e0 <tcp_rst>
      return;
 800e908:	e01b      	b.n	800e942 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e90a:	4b0f      	ldr	r3, [pc, #60]	@ (800e948 <tcp_timewait_input+0xc8>)
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	f003 0301 	and.w	r3, r3, #1
 800e912:	2b00      	cmp	r3, #0
 800e914:	d003      	beq.n	800e91e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e916:	4b16      	ldr	r3, [pc, #88]	@ (800e970 <tcp_timewait_input+0xf0>)
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e91e:	4b10      	ldr	r3, [pc, #64]	@ (800e960 <tcp_timewait_input+0xe0>)
 800e920:	881b      	ldrh	r3, [r3, #0]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00c      	beq.n	800e940 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	8b5b      	ldrh	r3, [r3, #26]
 800e92a:	f043 0302 	orr.w	r3, r3, #2
 800e92e:	b29a      	uxth	r2, r3
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f002 f89f 	bl	8010a78 <tcp_output>
  }
  return;
 800e93a:	e001      	b.n	800e940 <tcp_timewait_input+0xc0>
    return;
 800e93c:	bf00      	nop
 800e93e:	e000      	b.n	800e942 <tcp_timewait_input+0xc2>
  return;
 800e940:	bf00      	nop
}
 800e942:	3708      	adds	r7, #8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}
 800e948:	2000b2a8 	.word	0x2000b2a8
 800e94c:	08016d8c 	.word	0x08016d8c
 800e950:	08016fa4 	.word	0x08016fa4
 800e954:	08016dd8 	.word	0x08016dd8
 800e958:	2000b29c 	.word	0x2000b29c
 800e95c:	2000b2a0 	.word	0x2000b2a0
 800e960:	2000b2a6 	.word	0x2000b2a6
 800e964:	2000b28c 	.word	0x2000b28c
 800e968:	20005b44 	.word	0x20005b44
 800e96c:	20005b48 	.word	0x20005b48
 800e970:	2000b264 	.word	0x2000b264

0800e974 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e974:	b590      	push	{r4, r7, lr}
 800e976:	b08d      	sub	sp, #52	@ 0x34
 800e978:	af04      	add	r7, sp, #16
 800e97a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e97c:	2300      	movs	r3, #0
 800e97e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e980:	2300      	movs	r3, #0
 800e982:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d106      	bne.n	800e998 <tcp_process+0x24>
 800e98a:	4b9d      	ldr	r3, [pc, #628]	@ (800ec00 <tcp_process+0x28c>)
 800e98c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800e990:	499c      	ldr	r1, [pc, #624]	@ (800ec04 <tcp_process+0x290>)
 800e992:	489d      	ldr	r0, [pc, #628]	@ (800ec08 <tcp_process+0x294>)
 800e994:	f006 f9cc 	bl	8014d30 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e998:	4b9c      	ldr	r3, [pc, #624]	@ (800ec0c <tcp_process+0x298>)
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	f003 0304 	and.w	r3, r3, #4
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d04e      	beq.n	800ea42 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	7d1b      	ldrb	r3, [r3, #20]
 800e9a8:	2b02      	cmp	r3, #2
 800e9aa:	d108      	bne.n	800e9be <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e9b0:	4b97      	ldr	r3, [pc, #604]	@ (800ec10 <tcp_process+0x29c>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d123      	bne.n	800ea00 <tcp_process+0x8c>
        acceptable = 1;
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	76fb      	strb	r3, [r7, #27]
 800e9bc:	e020      	b.n	800ea00 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e9c2:	4b94      	ldr	r3, [pc, #592]	@ (800ec14 <tcp_process+0x2a0>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d102      	bne.n	800e9d0 <tcp_process+0x5c>
        acceptable = 1;
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	76fb      	strb	r3, [r7, #27]
 800e9ce:	e017      	b.n	800ea00 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e9d0:	4b90      	ldr	r3, [pc, #576]	@ (800ec14 <tcp_process+0x2a0>)
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9d8:	1ad3      	subs	r3, r2, r3
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	db10      	blt.n	800ea00 <tcp_process+0x8c>
 800e9de:	4b8d      	ldr	r3, [pc, #564]	@ (800ec14 <tcp_process+0x2a0>)
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9e6:	6879      	ldr	r1, [r7, #4]
 800e9e8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e9ea:	440b      	add	r3, r1
 800e9ec:	1ad3      	subs	r3, r2, r3
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	dc06      	bgt.n	800ea00 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	8b5b      	ldrh	r3, [r3, #26]
 800e9f6:	f043 0302 	orr.w	r3, r3, #2
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ea00:	7efb      	ldrb	r3, [r7, #27]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d01b      	beq.n	800ea3e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	7d1b      	ldrb	r3, [r3, #20]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d106      	bne.n	800ea1c <tcp_process+0xa8>
 800ea0e:	4b7c      	ldr	r3, [pc, #496]	@ (800ec00 <tcp_process+0x28c>)
 800ea10:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800ea14:	4980      	ldr	r1, [pc, #512]	@ (800ec18 <tcp_process+0x2a4>)
 800ea16:	487c      	ldr	r0, [pc, #496]	@ (800ec08 <tcp_process+0x294>)
 800ea18:	f006 f98a 	bl	8014d30 <iprintf>
      recv_flags |= TF_RESET;
 800ea1c:	4b7f      	ldr	r3, [pc, #508]	@ (800ec1c <tcp_process+0x2a8>)
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	f043 0308 	orr.w	r3, r3, #8
 800ea24:	b2da      	uxtb	r2, r3
 800ea26:	4b7d      	ldr	r3, [pc, #500]	@ (800ec1c <tcp_process+0x2a8>)
 800ea28:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	8b5b      	ldrh	r3, [r3, #26]
 800ea2e:	f023 0301 	bic.w	r3, r3, #1
 800ea32:	b29a      	uxth	r2, r3
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ea38:	f06f 030d 	mvn.w	r3, #13
 800ea3c:	e37a      	b.n	800f134 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	e378      	b.n	800f134 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ea42:	4b72      	ldr	r3, [pc, #456]	@ (800ec0c <tcp_process+0x298>)
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	f003 0302 	and.w	r3, r3, #2
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d010      	beq.n	800ea70 <tcp_process+0xfc>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	7d1b      	ldrb	r3, [r3, #20]
 800ea52:	2b02      	cmp	r3, #2
 800ea54:	d00c      	beq.n	800ea70 <tcp_process+0xfc>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	7d1b      	ldrb	r3, [r3, #20]
 800ea5a:	2b03      	cmp	r3, #3
 800ea5c:	d008      	beq.n	800ea70 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	8b5b      	ldrh	r3, [r3, #26]
 800ea62:	f043 0302 	orr.w	r3, r3, #2
 800ea66:	b29a      	uxth	r2, r3
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	e361      	b.n	800f134 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	8b5b      	ldrh	r3, [r3, #26]
 800ea74:	f003 0310 	and.w	r3, r3, #16
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d103      	bne.n	800ea84 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ea7c:	4b68      	ldr	r3, [pc, #416]	@ (800ec20 <tcp_process+0x2ac>)
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2200      	movs	r2, #0
 800ea88:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f001 fc2b 	bl	80102f0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	7d1b      	ldrb	r3, [r3, #20]
 800ea9e:	3b02      	subs	r3, #2
 800eaa0:	2b07      	cmp	r3, #7
 800eaa2:	f200 8337 	bhi.w	800f114 <tcp_process+0x7a0>
 800eaa6:	a201      	add	r2, pc, #4	@ (adr r2, 800eaac <tcp_process+0x138>)
 800eaa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaac:	0800eacd 	.word	0x0800eacd
 800eab0:	0800ecfd 	.word	0x0800ecfd
 800eab4:	0800ee75 	.word	0x0800ee75
 800eab8:	0800ee9f 	.word	0x0800ee9f
 800eabc:	0800efc3 	.word	0x0800efc3
 800eac0:	0800ee75 	.word	0x0800ee75
 800eac4:	0800f04f 	.word	0x0800f04f
 800eac8:	0800f0df 	.word	0x0800f0df
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800eacc:	4b4f      	ldr	r3, [pc, #316]	@ (800ec0c <tcp_process+0x298>)
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	f003 0310 	and.w	r3, r3, #16
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	f000 80e4 	beq.w	800eca2 <tcp_process+0x32e>
 800eada:	4b4c      	ldr	r3, [pc, #304]	@ (800ec0c <tcp_process+0x298>)
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	f003 0302 	and.w	r3, r3, #2
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	f000 80dd 	beq.w	800eca2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eaec:	1c5a      	adds	r2, r3, #1
 800eaee:	4b48      	ldr	r3, [pc, #288]	@ (800ec10 <tcp_process+0x29c>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	f040 80d5 	bne.w	800eca2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800eaf8:	4b46      	ldr	r3, [pc, #280]	@ (800ec14 <tcp_process+0x2a0>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	1c5a      	adds	r2, r3, #1
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800eb0a:	4b41      	ldr	r3, [pc, #260]	@ (800ec10 <tcp_process+0x29c>)
 800eb0c:	681a      	ldr	r2, [r3, #0]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800eb12:	4b44      	ldr	r3, [pc, #272]	@ (800ec24 <tcp_process+0x2b0>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	89db      	ldrh	r3, [r3, #14]
 800eb18:	b29a      	uxth	r2, r3
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800eb2c:	4b39      	ldr	r3, [pc, #228]	@ (800ec14 <tcp_process+0x2a0>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	1e5a      	subs	r2, r3, #1
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2204      	movs	r2, #4
 800eb3a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	3304      	adds	r3, #4
 800eb44:	4618      	mov	r0, r3
 800eb46:	f004 fe07 	bl	8013758 <ip4_route>
 800eb4a:	4601      	mov	r1, r0
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	3304      	adds	r3, #4
 800eb50:	461a      	mov	r2, r3
 800eb52:	4620      	mov	r0, r4
 800eb54:	f7ff f88c 	bl	800dc70 <tcp_eff_send_mss_netif>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb64:	009a      	lsls	r2, r3, #2
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb6a:	005b      	lsls	r3, r3, #1
 800eb6c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800eb70:	428b      	cmp	r3, r1
 800eb72:	bf38      	it	cc
 800eb74:	460b      	movcc	r3, r1
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d204      	bcs.n	800eb84 <tcp_process+0x210>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb7e:	009b      	lsls	r3, r3, #2
 800eb80:	b29b      	uxth	r3, r3
 800eb82:	e00d      	b.n	800eba0 <tcp_process+0x22c>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb88:	005b      	lsls	r3, r3, #1
 800eb8a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d904      	bls.n	800eb9c <tcp_process+0x228>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb96:	005b      	lsls	r3, r3, #1
 800eb98:	b29b      	uxth	r3, r3
 800eb9a:	e001      	b.n	800eba0 <tcp_process+0x22c>
 800eb9c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800eba0:	687a      	ldr	r2, [r7, #4]
 800eba2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d106      	bne.n	800ebbe <tcp_process+0x24a>
 800ebb0:	4b13      	ldr	r3, [pc, #76]	@ (800ec00 <tcp_process+0x28c>)
 800ebb2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800ebb6:	491c      	ldr	r1, [pc, #112]	@ (800ec28 <tcp_process+0x2b4>)
 800ebb8:	4813      	ldr	r0, [pc, #76]	@ (800ec08 <tcp_process+0x294>)
 800ebba:	f006 f8b9 	bl	8014d30 <iprintf>
        --pcb->snd_queuelen;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ebc4:	3b01      	subs	r3, #1
 800ebc6:	b29a      	uxth	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebd2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ebd4:	69fb      	ldr	r3, [r7, #28]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d12a      	bne.n	800ec30 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebde:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d106      	bne.n	800ebf4 <tcp_process+0x280>
 800ebe6:	4b06      	ldr	r3, [pc, #24]	@ (800ec00 <tcp_process+0x28c>)
 800ebe8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800ebec:	490f      	ldr	r1, [pc, #60]	@ (800ec2c <tcp_process+0x2b8>)
 800ebee:	4806      	ldr	r0, [pc, #24]	@ (800ec08 <tcp_process+0x294>)
 800ebf0:	f006 f89e 	bl	8014d30 <iprintf>
          pcb->unsent = rseg->next;
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ebfc:	e01c      	b.n	800ec38 <tcp_process+0x2c4>
 800ebfe:	bf00      	nop
 800ec00:	08016d8c 	.word	0x08016d8c
 800ec04:	08016fc4 	.word	0x08016fc4
 800ec08:	08016dd8 	.word	0x08016dd8
 800ec0c:	2000b2a8 	.word	0x2000b2a8
 800ec10:	2000b2a0 	.word	0x2000b2a0
 800ec14:	2000b29c 	.word	0x2000b29c
 800ec18:	08016fe0 	.word	0x08016fe0
 800ec1c:	2000b2a9 	.word	0x2000b2a9
 800ec20:	2000b264 	.word	0x2000b264
 800ec24:	2000b28c 	.word	0x2000b28c
 800ec28:	08017000 	.word	0x08017000
 800ec2c:	08017018 	.word	0x08017018
        } else {
          pcb->unacked = rseg->next;
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800ec38:	69f8      	ldr	r0, [r7, #28]
 800ec3a:	f7fe fd22 	bl	800d682 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d104      	bne.n	800ec50 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ec4c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ec4e:	e006      	b.n	800ec5e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2200      	movs	r2, #0
 800ec54:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d00a      	beq.n	800ec7e <tcp_process+0x30a>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	6910      	ldr	r0, [r2, #16]
 800ec72:	2200      	movs	r2, #0
 800ec74:	6879      	ldr	r1, [r7, #4]
 800ec76:	4798      	blx	r3
 800ec78:	4603      	mov	r3, r0
 800ec7a:	76bb      	strb	r3, [r7, #26]
 800ec7c:	e001      	b.n	800ec82 <tcp_process+0x30e>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ec82:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec86:	f113 0f0d 	cmn.w	r3, #13
 800ec8a:	d102      	bne.n	800ec92 <tcp_process+0x31e>
          return ERR_ABRT;
 800ec8c:	f06f 030c 	mvn.w	r3, #12
 800ec90:	e250      	b.n	800f134 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	8b5b      	ldrh	r3, [r3, #26]
 800ec96:	f043 0302 	orr.w	r3, r3, #2
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800eca0:	e23a      	b.n	800f118 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800eca2:	4b98      	ldr	r3, [pc, #608]	@ (800ef04 <tcp_process+0x590>)
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	f003 0310 	and.w	r3, r3, #16
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	f000 8234 	beq.w	800f118 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecb0:	4b95      	ldr	r3, [pc, #596]	@ (800ef08 <tcp_process+0x594>)
 800ecb2:	6819      	ldr	r1, [r3, #0]
 800ecb4:	4b95      	ldr	r3, [pc, #596]	@ (800ef0c <tcp_process+0x598>)
 800ecb6:	881b      	ldrh	r3, [r3, #0]
 800ecb8:	461a      	mov	r2, r3
 800ecba:	4b95      	ldr	r3, [pc, #596]	@ (800ef10 <tcp_process+0x59c>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecc0:	4b94      	ldr	r3, [pc, #592]	@ (800ef14 <tcp_process+0x5a0>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecc4:	885b      	ldrh	r3, [r3, #2]
 800ecc6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecc8:	4a92      	ldr	r2, [pc, #584]	@ (800ef14 <tcp_process+0x5a0>)
 800ecca:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eccc:	8812      	ldrh	r2, [r2, #0]
 800ecce:	b292      	uxth	r2, r2
 800ecd0:	9202      	str	r2, [sp, #8]
 800ecd2:	9301      	str	r3, [sp, #4]
 800ecd4:	4b90      	ldr	r3, [pc, #576]	@ (800ef18 <tcp_process+0x5a4>)
 800ecd6:	9300      	str	r3, [sp, #0]
 800ecd8:	4b90      	ldr	r3, [pc, #576]	@ (800ef1c <tcp_process+0x5a8>)
 800ecda:	4602      	mov	r2, r0
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f002 fc7f 	bl	80115e0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ece8:	2b05      	cmp	r3, #5
 800ecea:	f200 8215 	bhi.w	800f118 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f002 fa4b 	bl	8011190 <tcp_rexmit_rto>
      break;
 800ecfa:	e20d      	b.n	800f118 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ecfc:	4b81      	ldr	r3, [pc, #516]	@ (800ef04 <tcp_process+0x590>)
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	f003 0310 	and.w	r3, r3, #16
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f000 80a1 	beq.w	800ee4c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ed0a:	4b7f      	ldr	r3, [pc, #508]	@ (800ef08 <tcp_process+0x594>)
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed12:	1ad3      	subs	r3, r2, r3
 800ed14:	3b01      	subs	r3, #1
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	db7e      	blt.n	800ee18 <tcp_process+0x4a4>
 800ed1a:	4b7b      	ldr	r3, [pc, #492]	@ (800ef08 <tcp_process+0x594>)
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed22:	1ad3      	subs	r3, r2, r3
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	dc77      	bgt.n	800ee18 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2204      	movs	r2, #4
 800ed2c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d102      	bne.n	800ed3c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ed36:	23fa      	movs	r3, #250	@ 0xfa
 800ed38:	76bb      	strb	r3, [r7, #26]
 800ed3a:	e01d      	b.n	800ed78 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed40:	699b      	ldr	r3, [r3, #24]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d106      	bne.n	800ed54 <tcp_process+0x3e0>
 800ed46:	4b76      	ldr	r3, [pc, #472]	@ (800ef20 <tcp_process+0x5ac>)
 800ed48:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800ed4c:	4975      	ldr	r1, [pc, #468]	@ (800ef24 <tcp_process+0x5b0>)
 800ed4e:	4876      	ldr	r0, [pc, #472]	@ (800ef28 <tcp_process+0x5b4>)
 800ed50:	f005 ffee 	bl	8014d30 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed58:	699b      	ldr	r3, [r3, #24]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d00a      	beq.n	800ed74 <tcp_process+0x400>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed62:	699b      	ldr	r3, [r3, #24]
 800ed64:	687a      	ldr	r2, [r7, #4]
 800ed66:	6910      	ldr	r0, [r2, #16]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	6879      	ldr	r1, [r7, #4]
 800ed6c:	4798      	blx	r3
 800ed6e:	4603      	mov	r3, r0
 800ed70:	76bb      	strb	r3, [r7, #26]
 800ed72:	e001      	b.n	800ed78 <tcp_process+0x404>
 800ed74:	23f0      	movs	r3, #240	@ 0xf0
 800ed76:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ed78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d00a      	beq.n	800ed96 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ed80:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed84:	f113 0f0d 	cmn.w	r3, #13
 800ed88:	d002      	beq.n	800ed90 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f7fd ff8c 	bl	800cca8 <tcp_abort>
            }
            return ERR_ABRT;
 800ed90:	f06f 030c 	mvn.w	r3, #12
 800ed94:	e1ce      	b.n	800f134 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 fae0 	bl	800f35c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ed9c:	4b63      	ldr	r3, [pc, #396]	@ (800ef2c <tcp_process+0x5b8>)
 800ed9e:	881b      	ldrh	r3, [r3, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d005      	beq.n	800edb0 <tcp_process+0x43c>
            recv_acked--;
 800eda4:	4b61      	ldr	r3, [pc, #388]	@ (800ef2c <tcp_process+0x5b8>)
 800eda6:	881b      	ldrh	r3, [r3, #0]
 800eda8:	3b01      	subs	r3, #1
 800edaa:	b29a      	uxth	r2, r3
 800edac:	4b5f      	ldr	r3, [pc, #380]	@ (800ef2c <tcp_process+0x5b8>)
 800edae:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800edb4:	009a      	lsls	r2, r3, #2
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800edba:	005b      	lsls	r3, r3, #1
 800edbc:	f241 111c 	movw	r1, #4380	@ 0x111c
 800edc0:	428b      	cmp	r3, r1
 800edc2:	bf38      	it	cc
 800edc4:	460b      	movcc	r3, r1
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d204      	bcs.n	800edd4 <tcp_process+0x460>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800edce:	009b      	lsls	r3, r3, #2
 800edd0:	b29b      	uxth	r3, r3
 800edd2:	e00d      	b.n	800edf0 <tcp_process+0x47c>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800edd8:	005b      	lsls	r3, r3, #1
 800edda:	f241 121c 	movw	r2, #4380	@ 0x111c
 800edde:	4293      	cmp	r3, r2
 800ede0:	d904      	bls.n	800edec <tcp_process+0x478>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ede6:	005b      	lsls	r3, r3, #1
 800ede8:	b29b      	uxth	r3, r3
 800edea:	e001      	b.n	800edf0 <tcp_process+0x47c>
 800edec:	f241 131c 	movw	r3, #4380	@ 0x111c
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800edf6:	4b4e      	ldr	r3, [pc, #312]	@ (800ef30 <tcp_process+0x5bc>)
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	f003 0320 	and.w	r3, r3, #32
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d037      	beq.n	800ee72 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	8b5b      	ldrh	r3, [r3, #26]
 800ee06:	f043 0302 	orr.w	r3, r3, #2
 800ee0a:	b29a      	uxth	r2, r3
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2207      	movs	r2, #7
 800ee14:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ee16:	e02c      	b.n	800ee72 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee18:	4b3b      	ldr	r3, [pc, #236]	@ (800ef08 <tcp_process+0x594>)
 800ee1a:	6819      	ldr	r1, [r3, #0]
 800ee1c:	4b3b      	ldr	r3, [pc, #236]	@ (800ef0c <tcp_process+0x598>)
 800ee1e:	881b      	ldrh	r3, [r3, #0]
 800ee20:	461a      	mov	r2, r3
 800ee22:	4b3b      	ldr	r3, [pc, #236]	@ (800ef10 <tcp_process+0x59c>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee28:	4b3a      	ldr	r3, [pc, #232]	@ (800ef14 <tcp_process+0x5a0>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee2c:	885b      	ldrh	r3, [r3, #2]
 800ee2e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee30:	4a38      	ldr	r2, [pc, #224]	@ (800ef14 <tcp_process+0x5a0>)
 800ee32:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee34:	8812      	ldrh	r2, [r2, #0]
 800ee36:	b292      	uxth	r2, r2
 800ee38:	9202      	str	r2, [sp, #8]
 800ee3a:	9301      	str	r3, [sp, #4]
 800ee3c:	4b36      	ldr	r3, [pc, #216]	@ (800ef18 <tcp_process+0x5a4>)
 800ee3e:	9300      	str	r3, [sp, #0]
 800ee40:	4b36      	ldr	r3, [pc, #216]	@ (800ef1c <tcp_process+0x5a8>)
 800ee42:	4602      	mov	r2, r0
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f002 fbcb 	bl	80115e0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ee4a:	e167      	b.n	800f11c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ee4c:	4b2d      	ldr	r3, [pc, #180]	@ (800ef04 <tcp_process+0x590>)
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	f003 0302 	and.w	r3, r3, #2
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	f000 8161 	beq.w	800f11c <tcp_process+0x7a8>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee5e:	1e5a      	subs	r2, r3, #1
 800ee60:	4b2b      	ldr	r3, [pc, #172]	@ (800ef10 <tcp_process+0x59c>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	f040 8159 	bne.w	800f11c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f002 f9b2 	bl	80111d4 <tcp_rexmit>
      break;
 800ee70:	e154      	b.n	800f11c <tcp_process+0x7a8>
 800ee72:	e153      	b.n	800f11c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 fa71 	bl	800f35c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ee7a:	4b2d      	ldr	r3, [pc, #180]	@ (800ef30 <tcp_process+0x5bc>)
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	f003 0320 	and.w	r3, r3, #32
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	f000 814c 	beq.w	800f120 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	8b5b      	ldrh	r3, [r3, #26]
 800ee8c:	f043 0302 	orr.w	r3, r3, #2
 800ee90:	b29a      	uxth	r2, r3
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2207      	movs	r2, #7
 800ee9a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ee9c:	e140      	b.n	800f120 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 fa5c 	bl	800f35c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eea4:	4b22      	ldr	r3, [pc, #136]	@ (800ef30 <tcp_process+0x5bc>)
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	f003 0320 	and.w	r3, r3, #32
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d071      	beq.n	800ef94 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eeb0:	4b14      	ldr	r3, [pc, #80]	@ (800ef04 <tcp_process+0x590>)
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	f003 0310 	and.w	r3, r3, #16
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d060      	beq.n	800ef7e <tcp_process+0x60a>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eec0:	4b11      	ldr	r3, [pc, #68]	@ (800ef08 <tcp_process+0x594>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d15a      	bne.n	800ef7e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d156      	bne.n	800ef7e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	8b5b      	ldrh	r3, [r3, #26]
 800eed4:	f043 0302 	orr.w	r3, r3, #2
 800eed8:	b29a      	uxth	r2, r3
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7fe fdbc 	bl	800da5c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800eee4:	4b13      	ldr	r3, [pc, #76]	@ (800ef34 <tcp_process+0x5c0>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d105      	bne.n	800eefa <tcp_process+0x586>
 800eeee:	4b11      	ldr	r3, [pc, #68]	@ (800ef34 <tcp_process+0x5c0>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	4a0f      	ldr	r2, [pc, #60]	@ (800ef34 <tcp_process+0x5c0>)
 800eef6:	6013      	str	r3, [r2, #0]
 800eef8:	e02e      	b.n	800ef58 <tcp_process+0x5e4>
 800eefa:	4b0e      	ldr	r3, [pc, #56]	@ (800ef34 <tcp_process+0x5c0>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	617b      	str	r3, [r7, #20]
 800ef00:	e027      	b.n	800ef52 <tcp_process+0x5de>
 800ef02:	bf00      	nop
 800ef04:	2000b2a8 	.word	0x2000b2a8
 800ef08:	2000b2a0 	.word	0x2000b2a0
 800ef0c:	2000b2a6 	.word	0x2000b2a6
 800ef10:	2000b29c 	.word	0x2000b29c
 800ef14:	2000b28c 	.word	0x2000b28c
 800ef18:	20005b44 	.word	0x20005b44
 800ef1c:	20005b48 	.word	0x20005b48
 800ef20:	08016d8c 	.word	0x08016d8c
 800ef24:	0801702c 	.word	0x0801702c
 800ef28:	08016dd8 	.word	0x08016dd8
 800ef2c:	2000b2a4 	.word	0x2000b2a4
 800ef30:	2000b2a9 	.word	0x2000b2a9
 800ef34:	2000b270 	.word	0x2000b270
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d104      	bne.n	800ef4c <tcp_process+0x5d8>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	68da      	ldr	r2, [r3, #12]
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	60da      	str	r2, [r3, #12]
 800ef4a:	e005      	b.n	800ef58 <tcp_process+0x5e4>
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	68db      	ldr	r3, [r3, #12]
 800ef50:	617b      	str	r3, [r7, #20]
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d1ef      	bne.n	800ef38 <tcp_process+0x5c4>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	60da      	str	r2, [r3, #12]
 800ef5e:	4b77      	ldr	r3, [pc, #476]	@ (800f13c <tcp_process+0x7c8>)
 800ef60:	2201      	movs	r2, #1
 800ef62:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	220a      	movs	r2, #10
 800ef68:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ef6a:	4b75      	ldr	r3, [pc, #468]	@ (800f140 <tcp_process+0x7cc>)
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	60da      	str	r2, [r3, #12]
 800ef72:	4a73      	ldr	r2, [pc, #460]	@ (800f140 <tcp_process+0x7cc>)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6013      	str	r3, [r2, #0]
 800ef78:	f002 fcf4 	bl	8011964 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ef7c:	e0d2      	b.n	800f124 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	8b5b      	ldrh	r3, [r3, #26]
 800ef82:	f043 0302 	orr.w	r3, r3, #2
 800ef86:	b29a      	uxth	r2, r3
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2208      	movs	r2, #8
 800ef90:	751a      	strb	r2, [r3, #20]
      break;
 800ef92:	e0c7      	b.n	800f124 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef94:	4b6b      	ldr	r3, [pc, #428]	@ (800f144 <tcp_process+0x7d0>)
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	f003 0310 	and.w	r3, r3, #16
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	f000 80c1 	beq.w	800f124 <tcp_process+0x7b0>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efa6:	4b68      	ldr	r3, [pc, #416]	@ (800f148 <tcp_process+0x7d4>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	429a      	cmp	r2, r3
 800efac:	f040 80ba 	bne.w	800f124 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	f040 80b5 	bne.w	800f124 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2206      	movs	r2, #6
 800efbe:	751a      	strb	r2, [r3, #20]
      break;
 800efc0:	e0b0      	b.n	800f124 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f000 f9ca 	bl	800f35c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800efc8:	4b60      	ldr	r3, [pc, #384]	@ (800f14c <tcp_process+0x7d8>)
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	f003 0320 	and.w	r3, r3, #32
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	f000 80a9 	beq.w	800f128 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	8b5b      	ldrh	r3, [r3, #26]
 800efda:	f043 0302 	orr.w	r3, r3, #2
 800efde:	b29a      	uxth	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f7fe fd39 	bl	800da5c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800efea:	4b59      	ldr	r3, [pc, #356]	@ (800f150 <tcp_process+0x7dc>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d105      	bne.n	800f000 <tcp_process+0x68c>
 800eff4:	4b56      	ldr	r3, [pc, #344]	@ (800f150 <tcp_process+0x7dc>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	68db      	ldr	r3, [r3, #12]
 800effa:	4a55      	ldr	r2, [pc, #340]	@ (800f150 <tcp_process+0x7dc>)
 800effc:	6013      	str	r3, [r2, #0]
 800effe:	e013      	b.n	800f028 <tcp_process+0x6b4>
 800f000:	4b53      	ldr	r3, [pc, #332]	@ (800f150 <tcp_process+0x7dc>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	613b      	str	r3, [r7, #16]
 800f006:	e00c      	b.n	800f022 <tcp_process+0x6ae>
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d104      	bne.n	800f01c <tcp_process+0x6a8>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	68da      	ldr	r2, [r3, #12]
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	60da      	str	r2, [r3, #12]
 800f01a:	e005      	b.n	800f028 <tcp_process+0x6b4>
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	613b      	str	r3, [r7, #16]
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d1ef      	bne.n	800f008 <tcp_process+0x694>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2200      	movs	r2, #0
 800f02c:	60da      	str	r2, [r3, #12]
 800f02e:	4b43      	ldr	r3, [pc, #268]	@ (800f13c <tcp_process+0x7c8>)
 800f030:	2201      	movs	r2, #1
 800f032:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	220a      	movs	r2, #10
 800f038:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f03a:	4b41      	ldr	r3, [pc, #260]	@ (800f140 <tcp_process+0x7cc>)
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	60da      	str	r2, [r3, #12]
 800f042:	4a3f      	ldr	r2, [pc, #252]	@ (800f140 <tcp_process+0x7cc>)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6013      	str	r3, [r2, #0]
 800f048:	f002 fc8c 	bl	8011964 <tcp_timer_needed>
      }
      break;
 800f04c:	e06c      	b.n	800f128 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 f984 	bl	800f35c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f054:	4b3b      	ldr	r3, [pc, #236]	@ (800f144 <tcp_process+0x7d0>)
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	f003 0310 	and.w	r3, r3, #16
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d065      	beq.n	800f12c <tcp_process+0x7b8>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f064:	4b38      	ldr	r3, [pc, #224]	@ (800f148 <tcp_process+0x7d4>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d15f      	bne.n	800f12c <tcp_process+0x7b8>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f070:	2b00      	cmp	r3, #0
 800f072:	d15b      	bne.n	800f12c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f7fe fcf1 	bl	800da5c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f07a:	4b35      	ldr	r3, [pc, #212]	@ (800f150 <tcp_process+0x7dc>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	429a      	cmp	r2, r3
 800f082:	d105      	bne.n	800f090 <tcp_process+0x71c>
 800f084:	4b32      	ldr	r3, [pc, #200]	@ (800f150 <tcp_process+0x7dc>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	68db      	ldr	r3, [r3, #12]
 800f08a:	4a31      	ldr	r2, [pc, #196]	@ (800f150 <tcp_process+0x7dc>)
 800f08c:	6013      	str	r3, [r2, #0]
 800f08e:	e013      	b.n	800f0b8 <tcp_process+0x744>
 800f090:	4b2f      	ldr	r3, [pc, #188]	@ (800f150 <tcp_process+0x7dc>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	60fb      	str	r3, [r7, #12]
 800f096:	e00c      	b.n	800f0b2 <tcp_process+0x73e>
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d104      	bne.n	800f0ac <tcp_process+0x738>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	68da      	ldr	r2, [r3, #12]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	60da      	str	r2, [r3, #12]
 800f0aa:	e005      	b.n	800f0b8 <tcp_process+0x744>
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	60fb      	str	r3, [r7, #12]
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d1ef      	bne.n	800f098 <tcp_process+0x724>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	60da      	str	r2, [r3, #12]
 800f0be:	4b1f      	ldr	r3, [pc, #124]	@ (800f13c <tcp_process+0x7c8>)
 800f0c0:	2201      	movs	r2, #1
 800f0c2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	220a      	movs	r2, #10
 800f0c8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f0ca:	4b1d      	ldr	r3, [pc, #116]	@ (800f140 <tcp_process+0x7cc>)
 800f0cc:	681a      	ldr	r2, [r3, #0]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	60da      	str	r2, [r3, #12]
 800f0d2:	4a1b      	ldr	r2, [pc, #108]	@ (800f140 <tcp_process+0x7cc>)
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6013      	str	r3, [r2, #0]
 800f0d8:	f002 fc44 	bl	8011964 <tcp_timer_needed>
      }
      break;
 800f0dc:	e026      	b.n	800f12c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 f93c 	bl	800f35c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f0e4:	4b17      	ldr	r3, [pc, #92]	@ (800f144 <tcp_process+0x7d0>)
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	f003 0310 	and.w	r3, r3, #16
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d01f      	beq.n	800f130 <tcp_process+0x7bc>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f0f4:	4b14      	ldr	r3, [pc, #80]	@ (800f148 <tcp_process+0x7d4>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d119      	bne.n	800f130 <tcp_process+0x7bc>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f100:	2b00      	cmp	r3, #0
 800f102:	d115      	bne.n	800f130 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f104:	4b11      	ldr	r3, [pc, #68]	@ (800f14c <tcp_process+0x7d8>)
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	f043 0310 	orr.w	r3, r3, #16
 800f10c:	b2da      	uxtb	r2, r3
 800f10e:	4b0f      	ldr	r3, [pc, #60]	@ (800f14c <tcp_process+0x7d8>)
 800f110:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f112:	e00d      	b.n	800f130 <tcp_process+0x7bc>
    default:
      break;
 800f114:	bf00      	nop
 800f116:	e00c      	b.n	800f132 <tcp_process+0x7be>
      break;
 800f118:	bf00      	nop
 800f11a:	e00a      	b.n	800f132 <tcp_process+0x7be>
      break;
 800f11c:	bf00      	nop
 800f11e:	e008      	b.n	800f132 <tcp_process+0x7be>
      break;
 800f120:	bf00      	nop
 800f122:	e006      	b.n	800f132 <tcp_process+0x7be>
      break;
 800f124:	bf00      	nop
 800f126:	e004      	b.n	800f132 <tcp_process+0x7be>
      break;
 800f128:	bf00      	nop
 800f12a:	e002      	b.n	800f132 <tcp_process+0x7be>
      break;
 800f12c:	bf00      	nop
 800f12e:	e000      	b.n	800f132 <tcp_process+0x7be>
      break;
 800f130:	bf00      	nop
  }
  return ERR_OK;
 800f132:	2300      	movs	r3, #0
}
 800f134:	4618      	mov	r0, r3
 800f136:	3724      	adds	r7, #36	@ 0x24
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd90      	pop	{r4, r7, pc}
 800f13c:	2000b278 	.word	0x2000b278
 800f140:	2000b274 	.word	0x2000b274
 800f144:	2000b2a8 	.word	0x2000b2a8
 800f148:	2000b2a0 	.word	0x2000b2a0
 800f14c:	2000b2a9 	.word	0x2000b2a9
 800f150:	2000b270 	.word	0x2000b270

0800f154 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f154:	b590      	push	{r4, r7, lr}
 800f156:	b085      	sub	sp, #20
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d106      	bne.n	800f172 <tcp_oos_insert_segment+0x1e>
 800f164:	4b3b      	ldr	r3, [pc, #236]	@ (800f254 <tcp_oos_insert_segment+0x100>)
 800f166:	f240 421f 	movw	r2, #1055	@ 0x41f
 800f16a:	493b      	ldr	r1, [pc, #236]	@ (800f258 <tcp_oos_insert_segment+0x104>)
 800f16c:	483b      	ldr	r0, [pc, #236]	@ (800f25c <tcp_oos_insert_segment+0x108>)
 800f16e:	f005 fddf 	bl	8014d30 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	68db      	ldr	r3, [r3, #12]
 800f176:	899b      	ldrh	r3, [r3, #12]
 800f178:	b29b      	uxth	r3, r3
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7fb fc0c 	bl	800a998 <lwip_htons>
 800f180:	4603      	mov	r3, r0
 800f182:	b2db      	uxtb	r3, r3
 800f184:	f003 0301 	and.w	r3, r3, #1
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d028      	beq.n	800f1de <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f18c:	6838      	ldr	r0, [r7, #0]
 800f18e:	f7fe fa63 	bl	800d658 <tcp_segs_free>
    next = NULL;
 800f192:	2300      	movs	r3, #0
 800f194:	603b      	str	r3, [r7, #0]
 800f196:	e056      	b.n	800f246 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	68db      	ldr	r3, [r3, #12]
 800f19c:	899b      	ldrh	r3, [r3, #12]
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7fb fbf9 	bl	800a998 <lwip_htons>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	b2db      	uxtb	r3, r3
 800f1aa:	f003 0301 	and.w	r3, r3, #1
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d00d      	beq.n	800f1ce <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	899b      	ldrh	r3, [r3, #12]
 800f1b8:	b29c      	uxth	r4, r3
 800f1ba:	2001      	movs	r0, #1
 800f1bc:	f7fb fbec 	bl	800a998 <lwip_htons>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	461a      	mov	r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	68db      	ldr	r3, [r3, #12]
 800f1c8:	4322      	orrs	r2, r4
 800f1ca:	b292      	uxth	r2, r2
 800f1cc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	f7fe fa52 	bl	800d682 <tcp_seg_free>
    while (next &&
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d00e      	beq.n	800f202 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	891b      	ldrh	r3, [r3, #8]
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	4b1d      	ldr	r3, [pc, #116]	@ (800f260 <tcp_oos_insert_segment+0x10c>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	441a      	add	r2, r3
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	68db      	ldr	r3, [r3, #12]
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	6839      	ldr	r1, [r7, #0]
 800f1f8:	8909      	ldrh	r1, [r1, #8]
 800f1fa:	440b      	add	r3, r1
 800f1fc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	daca      	bge.n	800f198 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d01e      	beq.n	800f246 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	891b      	ldrh	r3, [r3, #8]
 800f20c:	461a      	mov	r2, r3
 800f20e:	4b14      	ldr	r3, [pc, #80]	@ (800f260 <tcp_oos_insert_segment+0x10c>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	441a      	add	r2, r3
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	685b      	ldr	r3, [r3, #4]
 800f21a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	dd12      	ble.n	800f246 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	68db      	ldr	r3, [r3, #12]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	b29a      	uxth	r2, r3
 800f228:	4b0d      	ldr	r3, [pc, #52]	@ (800f260 <tcp_oos_insert_segment+0x10c>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	1ad3      	subs	r3, r2, r3
 800f230:	b29a      	uxth	r2, r3
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	685a      	ldr	r2, [r3, #4]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	891b      	ldrh	r3, [r3, #8]
 800f23e:	4619      	mov	r1, r3
 800f240:	4610      	mov	r0, r2
 800f242:	f7fc fd81 	bl	800bd48 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	683a      	ldr	r2, [r7, #0]
 800f24a:	601a      	str	r2, [r3, #0]
}
 800f24c:	bf00      	nop
 800f24e:	3714      	adds	r7, #20
 800f250:	46bd      	mov	sp, r7
 800f252:	bd90      	pop	{r4, r7, pc}
 800f254:	08016d8c 	.word	0x08016d8c
 800f258:	0801704c 	.word	0x0801704c
 800f25c:	08016dd8 	.word	0x08016dd8
 800f260:	2000b29c 	.word	0x2000b29c

0800f264 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f264:	b5b0      	push	{r4, r5, r7, lr}
 800f266:	b086      	sub	sp, #24
 800f268:	af00      	add	r7, sp, #0
 800f26a:	60f8      	str	r0, [r7, #12]
 800f26c:	60b9      	str	r1, [r7, #8]
 800f26e:	607a      	str	r2, [r7, #4]
 800f270:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f272:	e03e      	b.n	800f2f2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	4618      	mov	r0, r3
 800f284:	f7fc ff6e 	bl	800c164 <pbuf_clen>
 800f288:	4603      	mov	r3, r0
 800f28a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f292:	8a7a      	ldrh	r2, [r7, #18]
 800f294:	429a      	cmp	r2, r3
 800f296:	d906      	bls.n	800f2a6 <tcp_free_acked_segments+0x42>
 800f298:	4b2a      	ldr	r3, [pc, #168]	@ (800f344 <tcp_free_acked_segments+0xe0>)
 800f29a:	f240 4257 	movw	r2, #1111	@ 0x457
 800f29e:	492a      	ldr	r1, [pc, #168]	@ (800f348 <tcp_free_acked_segments+0xe4>)
 800f2a0:	482a      	ldr	r0, [pc, #168]	@ (800f34c <tcp_free_acked_segments+0xe8>)
 800f2a2:	f005 fd45 	bl	8014d30 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800f2ac:	8a7b      	ldrh	r3, [r7, #18]
 800f2ae:	1ad3      	subs	r3, r2, r3
 800f2b0:	b29a      	uxth	r2, r3
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	891a      	ldrh	r2, [r3, #8]
 800f2bc:	4b24      	ldr	r3, [pc, #144]	@ (800f350 <tcp_free_acked_segments+0xec>)
 800f2be:	881b      	ldrh	r3, [r3, #0]
 800f2c0:	4413      	add	r3, r2
 800f2c2:	b29a      	uxth	r2, r3
 800f2c4:	4b22      	ldr	r3, [pc, #136]	@ (800f350 <tcp_free_acked_segments+0xec>)
 800f2c6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f2c8:	6978      	ldr	r0, [r7, #20]
 800f2ca:	f7fe f9da 	bl	800d682 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d00c      	beq.n	800f2f2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d109      	bne.n	800f2f2 <tcp_free_acked_segments+0x8e>
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d106      	bne.n	800f2f2 <tcp_free_acked_segments+0x8e>
 800f2e4:	4b17      	ldr	r3, [pc, #92]	@ (800f344 <tcp_free_acked_segments+0xe0>)
 800f2e6:	f240 4261 	movw	r2, #1121	@ 0x461
 800f2ea:	491a      	ldr	r1, [pc, #104]	@ (800f354 <tcp_free_acked_segments+0xf0>)
 800f2ec:	4817      	ldr	r0, [pc, #92]	@ (800f34c <tcp_free_acked_segments+0xe8>)
 800f2ee:	f005 fd1f 	bl	8014d30 <iprintf>
  while (seg_list != NULL &&
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d020      	beq.n	800f33a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	68db      	ldr	r3, [r3, #12]
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fb fb60 	bl	800a9c4 <lwip_htonl>
 800f304:	4604      	mov	r4, r0
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	891b      	ldrh	r3, [r3, #8]
 800f30a:	461d      	mov	r5, r3
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	899b      	ldrh	r3, [r3, #12]
 800f312:	b29b      	uxth	r3, r3
 800f314:	4618      	mov	r0, r3
 800f316:	f7fb fb3f 	bl	800a998 <lwip_htons>
 800f31a:	4603      	mov	r3, r0
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	f003 0303 	and.w	r3, r3, #3
 800f322:	2b00      	cmp	r3, #0
 800f324:	d001      	beq.n	800f32a <tcp_free_acked_segments+0xc6>
 800f326:	2301      	movs	r3, #1
 800f328:	e000      	b.n	800f32c <tcp_free_acked_segments+0xc8>
 800f32a:	2300      	movs	r3, #0
 800f32c:	442b      	add	r3, r5
 800f32e:	18e2      	adds	r2, r4, r3
 800f330:	4b09      	ldr	r3, [pc, #36]	@ (800f358 <tcp_free_acked_segments+0xf4>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f336:	2b00      	cmp	r3, #0
 800f338:	dd9c      	ble.n	800f274 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f33a:	68bb      	ldr	r3, [r7, #8]
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3718      	adds	r7, #24
 800f340:	46bd      	mov	sp, r7
 800f342:	bdb0      	pop	{r4, r5, r7, pc}
 800f344:	08016d8c 	.word	0x08016d8c
 800f348:	08017074 	.word	0x08017074
 800f34c:	08016dd8 	.word	0x08016dd8
 800f350:	2000b2a4 	.word	0x2000b2a4
 800f354:	0801709c 	.word	0x0801709c
 800f358:	2000b2a0 	.word	0x2000b2a0

0800f35c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f35c:	b5b0      	push	{r4, r5, r7, lr}
 800f35e:	b094      	sub	sp, #80	@ 0x50
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f364:	2300      	movs	r3, #0
 800f366:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d106      	bne.n	800f37c <tcp_receive+0x20>
 800f36e:	4b91      	ldr	r3, [pc, #580]	@ (800f5b4 <tcp_receive+0x258>)
 800f370:	f240 427b 	movw	r2, #1147	@ 0x47b
 800f374:	4990      	ldr	r1, [pc, #576]	@ (800f5b8 <tcp_receive+0x25c>)
 800f376:	4891      	ldr	r0, [pc, #580]	@ (800f5bc <tcp_receive+0x260>)
 800f378:	f005 fcda 	bl	8014d30 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	7d1b      	ldrb	r3, [r3, #20]
 800f380:	2b03      	cmp	r3, #3
 800f382:	d806      	bhi.n	800f392 <tcp_receive+0x36>
 800f384:	4b8b      	ldr	r3, [pc, #556]	@ (800f5b4 <tcp_receive+0x258>)
 800f386:	f240 427c 	movw	r2, #1148	@ 0x47c
 800f38a:	498d      	ldr	r1, [pc, #564]	@ (800f5c0 <tcp_receive+0x264>)
 800f38c:	488b      	ldr	r0, [pc, #556]	@ (800f5bc <tcp_receive+0x260>)
 800f38e:	f005 fccf 	bl	8014d30 <iprintf>

  if (flags & TCP_ACK) {
 800f392:	4b8c      	ldr	r3, [pc, #560]	@ (800f5c4 <tcp_receive+0x268>)
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	f003 0310 	and.w	r3, r3, #16
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	f000 8264 	beq.w	800f868 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3ac:	4413      	add	r3, r2
 800f3ae:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f3b4:	4b84      	ldr	r3, [pc, #528]	@ (800f5c8 <tcp_receive+0x26c>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	1ad3      	subs	r3, r2, r3
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	db1b      	blt.n	800f3f6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f3c2:	4b81      	ldr	r3, [pc, #516]	@ (800f5c8 <tcp_receive+0x26c>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d106      	bne.n	800f3d8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f3ce:	4b7f      	ldr	r3, [pc, #508]	@ (800f5cc <tcp_receive+0x270>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	1ad3      	subs	r3, r2, r3
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	db0e      	blt.n	800f3f6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f3dc:	4b7b      	ldr	r3, [pc, #492]	@ (800f5cc <tcp_receive+0x270>)
 800f3de:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d125      	bne.n	800f430 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f3e4:	4b7a      	ldr	r3, [pc, #488]	@ (800f5d0 <tcp_receive+0x274>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	89db      	ldrh	r3, [r3, #14]
 800f3ea:	b29a      	uxth	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d91c      	bls.n	800f430 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f3f6:	4b76      	ldr	r3, [pc, #472]	@ (800f5d0 <tcp_receive+0x274>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	89db      	ldrh	r3, [r3, #14]
 800f3fc:	b29a      	uxth	r2, r3
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f410:	429a      	cmp	r2, r3
 800f412:	d205      	bcs.n	800f420 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800f420:	4b69      	ldr	r3, [pc, #420]	@ (800f5c8 <tcp_receive+0x26c>)
 800f422:	681a      	ldr	r2, [r3, #0]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800f428:	4b68      	ldr	r3, [pc, #416]	@ (800f5cc <tcp_receive+0x270>)
 800f42a:	681a      	ldr	r2, [r3, #0]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f430:	4b66      	ldr	r3, [pc, #408]	@ (800f5cc <tcp_receive+0x270>)
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f438:	1ad3      	subs	r3, r2, r3
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	dc58      	bgt.n	800f4f0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f43e:	4b65      	ldr	r3, [pc, #404]	@ (800f5d4 <tcp_receive+0x278>)
 800f440:	881b      	ldrh	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d14b      	bne.n	800f4de <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f44a:	687a      	ldr	r2, [r7, #4]
 800f44c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800f450:	4413      	add	r3, r2
 800f452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f454:	429a      	cmp	r2, r3
 800f456:	d142      	bne.n	800f4de <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f45e:	2b00      	cmp	r3, #0
 800f460:	db3d      	blt.n	800f4de <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f466:	4b59      	ldr	r3, [pc, #356]	@ (800f5cc <tcp_receive+0x270>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d137      	bne.n	800f4de <tcp_receive+0x182>
              found_dupack = 1;
 800f46e:	2301      	movs	r3, #1
 800f470:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f478:	2bff      	cmp	r3, #255	@ 0xff
 800f47a:	d007      	beq.n	800f48c <tcp_receive+0x130>
                ++pcb->dupacks;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f482:	3301      	adds	r3, #1
 800f484:	b2da      	uxtb	r2, r3
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f492:	2b03      	cmp	r3, #3
 800f494:	d91b      	bls.n	800f4ce <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f4a0:	4413      	add	r3, r2
 800f4a2:	b29a      	uxth	r2, r3
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d30a      	bcc.n	800f4c4 <tcp_receive+0x168>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f4b8:	4413      	add	r3, r2
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f4c2:	e004      	b.n	800f4ce <tcp_receive+0x172>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f4ca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f4d4:	2b02      	cmp	r3, #2
 800f4d6:	d902      	bls.n	800f4de <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f001 fee7 	bl	80112ac <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f4de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f040 8161 	bne.w	800f7a8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f4ee:	e15b      	b.n	800f7a8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f4f0:	4b36      	ldr	r3, [pc, #216]	@ (800f5cc <tcp_receive+0x270>)
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4f8:	1ad3      	subs	r3, r2, r3
 800f4fa:	3b01      	subs	r3, #1
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	f2c0 814e 	blt.w	800f79e <tcp_receive+0x442>
 800f502:	4b32      	ldr	r3, [pc, #200]	@ (800f5cc <tcp_receive+0x270>)
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f50a:	1ad3      	subs	r3, r2, r3
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f300 8146 	bgt.w	800f79e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	8b5b      	ldrh	r3, [r3, #26]
 800f516:	f003 0304 	and.w	r3, r3, #4
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d010      	beq.n	800f540 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	8b5b      	ldrh	r3, [r3, #26]
 800f522:	f023 0304 	bic.w	r3, r3, #4
 800f526:	b29a      	uxth	r2, r3
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2200      	movs	r2, #0
 800f53c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2200      	movs	r2, #0
 800f544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f54e:	10db      	asrs	r3, r3, #3
 800f550:	b21b      	sxth	r3, r3
 800f552:	b29a      	uxth	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	4413      	add	r3, r2
 800f55e:	b29b      	uxth	r3, r3
 800f560:	b21a      	sxth	r2, r3
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f568:	4b18      	ldr	r3, [pc, #96]	@ (800f5cc <tcp_receive+0x270>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	b29a      	uxth	r2, r3
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f572:	b29b      	uxth	r3, r3
 800f574:	1ad3      	subs	r3, r2, r3
 800f576:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800f580:	4b12      	ldr	r3, [pc, #72]	@ (800f5cc <tcp_receive+0x270>)
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	7d1b      	ldrb	r3, [r3, #20]
 800f58c:	2b03      	cmp	r3, #3
 800f58e:	f240 8097 	bls.w	800f6c0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d245      	bcs.n	800f62e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	8b5b      	ldrh	r3, [r3, #26]
 800f5a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d014      	beq.n	800f5d8 <tcp_receive+0x27c>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e013      	b.n	800f5da <tcp_receive+0x27e>
 800f5b2:	bf00      	nop
 800f5b4:	08016d8c 	.word	0x08016d8c
 800f5b8:	080170bc 	.word	0x080170bc
 800f5bc:	08016dd8 	.word	0x08016dd8
 800f5c0:	080170d8 	.word	0x080170d8
 800f5c4:	2000b2a8 	.word	0x2000b2a8
 800f5c8:	2000b29c 	.word	0x2000b29c
 800f5cc:	2000b2a0 	.word	0x2000b2a0
 800f5d0:	2000b28c 	.word	0x2000b28c
 800f5d4:	2000b2a6 	.word	0x2000b2a6
 800f5d8:	2302      	movs	r3, #2
 800f5da:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f5de:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f5e2:	b29a      	uxth	r2, r3
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f5e8:	fb12 f303 	smulbb	r3, r2, r3
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	bf28      	it	cs
 800f5f4:	4613      	movcs	r3, r2
 800f5f6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f5fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f600:	4413      	add	r3, r2
 800f602:	b29a      	uxth	r2, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d309      	bcc.n	800f622 <tcp_receive+0x2c6>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f614:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f616:	4413      	add	r3, r2
 800f618:	b29a      	uxth	r2, r3
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f620:	e04e      	b.n	800f6c0 <tcp_receive+0x364>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f628:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f62c:	e048      	b.n	800f6c0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f634:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f636:	4413      	add	r3, r2
 800f638:	b29a      	uxth	r2, r3
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f640:	429a      	cmp	r2, r3
 800f642:	d309      	bcc.n	800f658 <tcp_receive+0x2fc>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f64a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f64c:	4413      	add	r3, r2
 800f64e:	b29a      	uxth	r2, r3
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f656:	e004      	b.n	800f662 <tcp_receive+0x306>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f65e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f66e:	429a      	cmp	r2, r3
 800f670:	d326      	bcc.n	800f6c0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	b29a      	uxth	r2, r3
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f692:	4413      	add	r3, r2
 800f694:	b29a      	uxth	r2, r3
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d30a      	bcc.n	800f6b6 <tcp_receive+0x35a>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f6aa:	4413      	add	r3, r2
 800f6ac:	b29a      	uxth	r2, r3
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f6b4:	e004      	b.n	800f6c0 <tcp_receive+0x364>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f6bc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6c8:	4a98      	ldr	r2, [pc, #608]	@ (800f92c <tcp_receive+0x5d0>)
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f7ff fdca 	bl	800f264 <tcp_free_acked_segments>
 800f6d0:	4602      	mov	r2, r0
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f6de:	4a94      	ldr	r2, [pc, #592]	@ (800f930 <tcp_receive+0x5d4>)
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f7ff fdbf 	bl	800f264 <tcp_free_acked_segments>
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d104      	bne.n	800f6fe <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f6fa:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f6fc:	e002      	b.n	800f704 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2200      	movs	r2, #0
 800f702:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2200      	movs	r2, #0
 800f708:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d103      	bne.n	800f71a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2200      	movs	r2, #0
 800f716:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f720:	4b84      	ldr	r3, [pc, #528]	@ (800f934 <tcp_receive+0x5d8>)
 800f722:	881b      	ldrh	r3, [r3, #0]
 800f724:	4413      	add	r3, r2
 800f726:	b29a      	uxth	r2, r3
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	8b5b      	ldrh	r3, [r3, #26]
 800f732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f736:	2b00      	cmp	r3, #0
 800f738:	d035      	beq.n	800f7a6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d118      	bne.n	800f774 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f746:	2b00      	cmp	r3, #0
 800f748:	d00c      	beq.n	800f764 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f752:	68db      	ldr	r3, [r3, #12]
 800f754:	685b      	ldr	r3, [r3, #4]
 800f756:	4618      	mov	r0, r3
 800f758:	f7fb f934 	bl	800a9c4 <lwip_htonl>
 800f75c:	4603      	mov	r3, r0
 800f75e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f760:	2b00      	cmp	r3, #0
 800f762:	dc20      	bgt.n	800f7a6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	8b5b      	ldrh	r3, [r3, #26]
 800f768:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f76c:	b29a      	uxth	r2, r3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f772:	e018      	b.n	800f7a6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	4618      	mov	r0, r3
 800f782:	f7fb f91f 	bl	800a9c4 <lwip_htonl>
 800f786:	4603      	mov	r3, r0
 800f788:	1ae3      	subs	r3, r4, r3
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	dc0b      	bgt.n	800f7a6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	8b5b      	ldrh	r3, [r3, #26]
 800f792:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f796:	b29a      	uxth	r2, r3
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f79c:	e003      	b.n	800f7a6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f001 ff70 	bl	8011684 <tcp_send_empty_ack>
 800f7a4:	e000      	b.n	800f7a8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f7a6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d05b      	beq.n	800f868 <tcp_receive+0x50c>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f7b4:	4b60      	ldr	r3, [pc, #384]	@ (800f938 <tcp_receive+0x5dc>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	1ad3      	subs	r3, r2, r3
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	da54      	bge.n	800f868 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f7be:	4b5f      	ldr	r3, [pc, #380]	@ (800f93c <tcp_receive+0x5e0>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	b29a      	uxth	r2, r3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	1ad3      	subs	r3, r2, r3
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f7d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f7dc:	10db      	asrs	r3, r3, #3
 800f7de:	b21b      	sxth	r3, r3
 800f7e0:	b29b      	uxth	r3, r3
 800f7e2:	1ad3      	subs	r3, r2, r3
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f7f0:	b29a      	uxth	r2, r3
 800f7f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f7f6:	4413      	add	r3, r2
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	b21a      	sxth	r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f800:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800f804:	2b00      	cmp	r3, #0
 800f806:	da05      	bge.n	800f814 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f808:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f80c:	425b      	negs	r3, r3
 800f80e:	b29b      	uxth	r3, r3
 800f810:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f814:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f81e:	109b      	asrs	r3, r3, #2
 800f820:	b21b      	sxth	r3, r3
 800f822:	b29b      	uxth	r3, r3
 800f824:	1ad3      	subs	r3, r2, r3
 800f826:	b29b      	uxth	r3, r3
 800f828:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f832:	b29a      	uxth	r2, r3
 800f834:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f838:	4413      	add	r3, r2
 800f83a:	b29b      	uxth	r3, r3
 800f83c:	b21a      	sxth	r2, r3
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f848:	10db      	asrs	r3, r3, #3
 800f84a:	b21b      	sxth	r3, r3
 800f84c:	b29a      	uxth	r2, r3
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f854:	b29b      	uxth	r3, r3
 800f856:	4413      	add	r3, r2
 800f858:	b29b      	uxth	r3, r3
 800f85a:	b21a      	sxth	r2, r3
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2200      	movs	r2, #0
 800f866:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f868:	4b35      	ldr	r3, [pc, #212]	@ (800f940 <tcp_receive+0x5e4>)
 800f86a:	881b      	ldrh	r3, [r3, #0]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	f000 84df 	beq.w	8010230 <tcp_receive+0xed4>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	7d1b      	ldrb	r3, [r3, #20]
 800f876:	2b06      	cmp	r3, #6
 800f878:	f200 84da 	bhi.w	8010230 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f880:	4b30      	ldr	r3, [pc, #192]	@ (800f944 <tcp_receive+0x5e8>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	1ad3      	subs	r3, r2, r3
 800f886:	3b01      	subs	r3, #1
 800f888:	2b00      	cmp	r3, #0
 800f88a:	f2c0 808f 	blt.w	800f9ac <tcp_receive+0x650>
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f892:	4b2b      	ldr	r3, [pc, #172]	@ (800f940 <tcp_receive+0x5e4>)
 800f894:	881b      	ldrh	r3, [r3, #0]
 800f896:	4619      	mov	r1, r3
 800f898:	4b2a      	ldr	r3, [pc, #168]	@ (800f944 <tcp_receive+0x5e8>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	440b      	add	r3, r1
 800f89e:	1ad3      	subs	r3, r2, r3
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	f300 8082 	bgt.w	800f9ac <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f8a8:	4b27      	ldr	r3, [pc, #156]	@ (800f948 <tcp_receive+0x5ec>)
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f8b2:	4b24      	ldr	r3, [pc, #144]	@ (800f944 <tcp_receive+0x5e8>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	1ad3      	subs	r3, r2, r3
 800f8b8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f8ba:	4b23      	ldr	r3, [pc, #140]	@ (800f948 <tcp_receive+0x5ec>)
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d106      	bne.n	800f8d0 <tcp_receive+0x574>
 800f8c2:	4b22      	ldr	r3, [pc, #136]	@ (800f94c <tcp_receive+0x5f0>)
 800f8c4:	f240 5294 	movw	r2, #1428	@ 0x594
 800f8c8:	4921      	ldr	r1, [pc, #132]	@ (800f950 <tcp_receive+0x5f4>)
 800f8ca:	4822      	ldr	r0, [pc, #136]	@ (800f954 <tcp_receive+0x5f8>)
 800f8cc:	f005 fa30 	bl	8014d30 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8d2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d906      	bls.n	800f8e8 <tcp_receive+0x58c>
 800f8da:	4b1c      	ldr	r3, [pc, #112]	@ (800f94c <tcp_receive+0x5f0>)
 800f8dc:	f240 5295 	movw	r2, #1429	@ 0x595
 800f8e0:	491d      	ldr	r1, [pc, #116]	@ (800f958 <tcp_receive+0x5fc>)
 800f8e2:	481c      	ldr	r0, [pc, #112]	@ (800f954 <tcp_receive+0x5f8>)
 800f8e4:	f005 fa24 	bl	8014d30 <iprintf>
      off = (u16_t)off32;
 800f8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f8ee:	4b16      	ldr	r3, [pc, #88]	@ (800f948 <tcp_receive+0x5ec>)
 800f8f0:	685b      	ldr	r3, [r3, #4]
 800f8f2:	891b      	ldrh	r3, [r3, #8]
 800f8f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d906      	bls.n	800f90a <tcp_receive+0x5ae>
 800f8fc:	4b13      	ldr	r3, [pc, #76]	@ (800f94c <tcp_receive+0x5f0>)
 800f8fe:	f240 5297 	movw	r2, #1431	@ 0x597
 800f902:	4916      	ldr	r1, [pc, #88]	@ (800f95c <tcp_receive+0x600>)
 800f904:	4813      	ldr	r0, [pc, #76]	@ (800f954 <tcp_receive+0x5f8>)
 800f906:	f005 fa13 	bl	8014d30 <iprintf>
      inseg.len -= off;
 800f90a:	4b0f      	ldr	r3, [pc, #60]	@ (800f948 <tcp_receive+0x5ec>)
 800f90c:	891a      	ldrh	r2, [r3, #8]
 800f90e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f912:	1ad3      	subs	r3, r2, r3
 800f914:	b29a      	uxth	r2, r3
 800f916:	4b0c      	ldr	r3, [pc, #48]	@ (800f948 <tcp_receive+0x5ec>)
 800f918:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f91a:	4b0b      	ldr	r3, [pc, #44]	@ (800f948 <tcp_receive+0x5ec>)
 800f91c:	685b      	ldr	r3, [r3, #4]
 800f91e:	891a      	ldrh	r2, [r3, #8]
 800f920:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f924:	1ad3      	subs	r3, r2, r3
 800f926:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f928:	e02a      	b.n	800f980 <tcp_receive+0x624>
 800f92a:	bf00      	nop
 800f92c:	080170f4 	.word	0x080170f4
 800f930:	080170fc 	.word	0x080170fc
 800f934:	2000b2a4 	.word	0x2000b2a4
 800f938:	2000b2a0 	.word	0x2000b2a0
 800f93c:	2000b264 	.word	0x2000b264
 800f940:	2000b2a6 	.word	0x2000b2a6
 800f944:	2000b29c 	.word	0x2000b29c
 800f948:	2000b27c 	.word	0x2000b27c
 800f94c:	08016d8c 	.word	0x08016d8c
 800f950:	08017104 	.word	0x08017104
 800f954:	08016dd8 	.word	0x08016dd8
 800f958:	08017114 	.word	0x08017114
 800f95c:	08017124 	.word	0x08017124
        off -= p->len;
 800f960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f962:	895b      	ldrh	r3, [r3, #10]
 800f964:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f968:	1ad3      	subs	r3, r2, r3
 800f96a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f96e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f970:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f972:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f976:	2200      	movs	r2, #0
 800f978:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f97a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800f980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f982:	895b      	ldrh	r3, [r3, #10]
 800f984:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f988:	429a      	cmp	r2, r3
 800f98a:	d8e9      	bhi.n	800f960 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f98c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f990:	4619      	mov	r1, r3
 800f992:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f994:	f7fc fad8 	bl	800bf48 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f99c:	4a90      	ldr	r2, [pc, #576]	@ (800fbe0 <tcp_receive+0x884>)
 800f99e:	6013      	str	r3, [r2, #0]
 800f9a0:	4b90      	ldr	r3, [pc, #576]	@ (800fbe4 <tcp_receive+0x888>)
 800f9a2:	68db      	ldr	r3, [r3, #12]
 800f9a4:	4a8e      	ldr	r2, [pc, #568]	@ (800fbe0 <tcp_receive+0x884>)
 800f9a6:	6812      	ldr	r2, [r2, #0]
 800f9a8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f9aa:	e00d      	b.n	800f9c8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f9ac:	4b8c      	ldr	r3, [pc, #560]	@ (800fbe0 <tcp_receive+0x884>)
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9b4:	1ad3      	subs	r3, r2, r3
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	da06      	bge.n	800f9c8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	8b5b      	ldrh	r3, [r3, #26]
 800f9be:	f043 0302 	orr.w	r3, r3, #2
 800f9c2:	b29a      	uxth	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f9c8:	4b85      	ldr	r3, [pc, #532]	@ (800fbe0 <tcp_receive+0x884>)
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9d0:	1ad3      	subs	r3, r2, r3
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	f2c0 8427 	blt.w	8010226 <tcp_receive+0xeca>
 800f9d8:	4b81      	ldr	r3, [pc, #516]	@ (800fbe0 <tcp_receive+0x884>)
 800f9da:	681a      	ldr	r2, [r3, #0]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9e0:	6879      	ldr	r1, [r7, #4]
 800f9e2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f9e4:	440b      	add	r3, r1
 800f9e6:	1ad3      	subs	r3, r2, r3
 800f9e8:	3301      	adds	r3, #1
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	f300 841b 	bgt.w	8010226 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f9f4:	4b7a      	ldr	r3, [pc, #488]	@ (800fbe0 <tcp_receive+0x884>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	f040 8298 	bne.w	800ff2e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f9fe:	4b79      	ldr	r3, [pc, #484]	@ (800fbe4 <tcp_receive+0x888>)
 800fa00:	891c      	ldrh	r4, [r3, #8]
 800fa02:	4b78      	ldr	r3, [pc, #480]	@ (800fbe4 <tcp_receive+0x888>)
 800fa04:	68db      	ldr	r3, [r3, #12]
 800fa06:	899b      	ldrh	r3, [r3, #12]
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fa ffc4 	bl	800a998 <lwip_htons>
 800fa10:	4603      	mov	r3, r0
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	f003 0303 	and.w	r3, r3, #3
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d001      	beq.n	800fa20 <tcp_receive+0x6c4>
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	e000      	b.n	800fa22 <tcp_receive+0x6c6>
 800fa20:	2300      	movs	r3, #0
 800fa22:	4423      	add	r3, r4
 800fa24:	b29a      	uxth	r2, r3
 800fa26:	4b70      	ldr	r3, [pc, #448]	@ (800fbe8 <tcp_receive+0x88c>)
 800fa28:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fa2e:	4b6e      	ldr	r3, [pc, #440]	@ (800fbe8 <tcp_receive+0x88c>)
 800fa30:	881b      	ldrh	r3, [r3, #0]
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d274      	bcs.n	800fb20 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fa36:	4b6b      	ldr	r3, [pc, #428]	@ (800fbe4 <tcp_receive+0x888>)
 800fa38:	68db      	ldr	r3, [r3, #12]
 800fa3a:	899b      	ldrh	r3, [r3, #12]
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f7fa ffaa 	bl	800a998 <lwip_htons>
 800fa44:	4603      	mov	r3, r0
 800fa46:	b2db      	uxtb	r3, r3
 800fa48:	f003 0301 	and.w	r3, r3, #1
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d01e      	beq.n	800fa8e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fa50:	4b64      	ldr	r3, [pc, #400]	@ (800fbe4 <tcp_receive+0x888>)
 800fa52:	68db      	ldr	r3, [r3, #12]
 800fa54:	899b      	ldrh	r3, [r3, #12]
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	b21b      	sxth	r3, r3
 800fa5a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fa5e:	b21c      	sxth	r4, r3
 800fa60:	4b60      	ldr	r3, [pc, #384]	@ (800fbe4 <tcp_receive+0x888>)
 800fa62:	68db      	ldr	r3, [r3, #12]
 800fa64:	899b      	ldrh	r3, [r3, #12]
 800fa66:	b29b      	uxth	r3, r3
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7fa ff95 	bl	800a998 <lwip_htons>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7fa ff8d 	bl	800a998 <lwip_htons>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	b21b      	sxth	r3, r3
 800fa82:	4323      	orrs	r3, r4
 800fa84:	b21a      	sxth	r2, r3
 800fa86:	4b57      	ldr	r3, [pc, #348]	@ (800fbe4 <tcp_receive+0x888>)
 800fa88:	68db      	ldr	r3, [r3, #12]
 800fa8a:	b292      	uxth	r2, r2
 800fa8c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fa92:	4b54      	ldr	r3, [pc, #336]	@ (800fbe4 <tcp_receive+0x888>)
 800fa94:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fa96:	4b53      	ldr	r3, [pc, #332]	@ (800fbe4 <tcp_receive+0x888>)
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	899b      	ldrh	r3, [r3, #12]
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fa ff7a 	bl	800a998 <lwip_htons>
 800faa4:	4603      	mov	r3, r0
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	f003 0302 	and.w	r3, r3, #2
 800faac:	2b00      	cmp	r3, #0
 800faae:	d005      	beq.n	800fabc <tcp_receive+0x760>
            inseg.len -= 1;
 800fab0:	4b4c      	ldr	r3, [pc, #304]	@ (800fbe4 <tcp_receive+0x888>)
 800fab2:	891b      	ldrh	r3, [r3, #8]
 800fab4:	3b01      	subs	r3, #1
 800fab6:	b29a      	uxth	r2, r3
 800fab8:	4b4a      	ldr	r3, [pc, #296]	@ (800fbe4 <tcp_receive+0x888>)
 800faba:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fabc:	4b49      	ldr	r3, [pc, #292]	@ (800fbe4 <tcp_receive+0x888>)
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	4a48      	ldr	r2, [pc, #288]	@ (800fbe4 <tcp_receive+0x888>)
 800fac2:	8912      	ldrh	r2, [r2, #8]
 800fac4:	4611      	mov	r1, r2
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7fc f93e 	bl	800bd48 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800facc:	4b45      	ldr	r3, [pc, #276]	@ (800fbe4 <tcp_receive+0x888>)
 800face:	891c      	ldrh	r4, [r3, #8]
 800fad0:	4b44      	ldr	r3, [pc, #272]	@ (800fbe4 <tcp_receive+0x888>)
 800fad2:	68db      	ldr	r3, [r3, #12]
 800fad4:	899b      	ldrh	r3, [r3, #12]
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	4618      	mov	r0, r3
 800fada:	f7fa ff5d 	bl	800a998 <lwip_htons>
 800fade:	4603      	mov	r3, r0
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	f003 0303 	and.w	r3, r3, #3
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d001      	beq.n	800faee <tcp_receive+0x792>
 800faea:	2301      	movs	r3, #1
 800faec:	e000      	b.n	800faf0 <tcp_receive+0x794>
 800faee:	2300      	movs	r3, #0
 800faf0:	4423      	add	r3, r4
 800faf2:	b29a      	uxth	r2, r3
 800faf4:	4b3c      	ldr	r3, [pc, #240]	@ (800fbe8 <tcp_receive+0x88c>)
 800faf6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800faf8:	4b3b      	ldr	r3, [pc, #236]	@ (800fbe8 <tcp_receive+0x88c>)
 800fafa:	881b      	ldrh	r3, [r3, #0]
 800fafc:	461a      	mov	r2, r3
 800fafe:	4b38      	ldr	r3, [pc, #224]	@ (800fbe0 <tcp_receive+0x884>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	441a      	add	r2, r3
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb08:	6879      	ldr	r1, [r7, #4]
 800fb0a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fb0c:	440b      	add	r3, r1
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d006      	beq.n	800fb20 <tcp_receive+0x7c4>
 800fb12:	4b36      	ldr	r3, [pc, #216]	@ (800fbec <tcp_receive+0x890>)
 800fb14:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800fb18:	4935      	ldr	r1, [pc, #212]	@ (800fbf0 <tcp_receive+0x894>)
 800fb1a:	4836      	ldr	r0, [pc, #216]	@ (800fbf4 <tcp_receive+0x898>)
 800fb1c:	f005 f908 	bl	8014d30 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	f000 80e6 	beq.w	800fcf6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fb2a:	4b2e      	ldr	r3, [pc, #184]	@ (800fbe4 <tcp_receive+0x888>)
 800fb2c:	68db      	ldr	r3, [r3, #12]
 800fb2e:	899b      	ldrh	r3, [r3, #12]
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fa ff30 	bl	800a998 <lwip_htons>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	b2db      	uxtb	r3, r3
 800fb3c:	f003 0301 	and.w	r3, r3, #1
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d010      	beq.n	800fb66 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fb44:	e00a      	b.n	800fb5c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb4a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb50:	681a      	ldr	r2, [r3, #0]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800fb56:	68f8      	ldr	r0, [r7, #12]
 800fb58:	f7fd fd93 	bl	800d682 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d1f0      	bne.n	800fb46 <tcp_receive+0x7ea>
 800fb64:	e0c7      	b.n	800fcf6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fb6c:	e051      	b.n	800fc12 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb70:	68db      	ldr	r3, [r3, #12]
 800fb72:	899b      	ldrh	r3, [r3, #12]
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7fa ff0e 	bl	800a998 <lwip_htons>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	f003 0301 	and.w	r3, r3, #1
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d03c      	beq.n	800fc02 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fb88:	4b16      	ldr	r3, [pc, #88]	@ (800fbe4 <tcp_receive+0x888>)
 800fb8a:	68db      	ldr	r3, [r3, #12]
 800fb8c:	899b      	ldrh	r3, [r3, #12]
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7fa ff01 	bl	800a998 <lwip_htons>
 800fb96:	4603      	mov	r3, r0
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d12f      	bne.n	800fc02 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fba2:	4b10      	ldr	r3, [pc, #64]	@ (800fbe4 <tcp_receive+0x888>)
 800fba4:	68db      	ldr	r3, [r3, #12]
 800fba6:	899b      	ldrh	r3, [r3, #12]
 800fba8:	b29c      	uxth	r4, r3
 800fbaa:	2001      	movs	r0, #1
 800fbac:	f7fa fef4 	bl	800a998 <lwip_htons>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	4b0b      	ldr	r3, [pc, #44]	@ (800fbe4 <tcp_receive+0x888>)
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	4322      	orrs	r2, r4
 800fbba:	b292      	uxth	r2, r2
 800fbbc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fbbe:	4b09      	ldr	r3, [pc, #36]	@ (800fbe4 <tcp_receive+0x888>)
 800fbc0:	891c      	ldrh	r4, [r3, #8]
 800fbc2:	4b08      	ldr	r3, [pc, #32]	@ (800fbe4 <tcp_receive+0x888>)
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	899b      	ldrh	r3, [r3, #12]
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7fa fee4 	bl	800a998 <lwip_htons>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	f003 0303 	and.w	r3, r3, #3
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d00d      	beq.n	800fbf8 <tcp_receive+0x89c>
 800fbdc:	2301      	movs	r3, #1
 800fbde:	e00c      	b.n	800fbfa <tcp_receive+0x89e>
 800fbe0:	2000b29c 	.word	0x2000b29c
 800fbe4:	2000b27c 	.word	0x2000b27c
 800fbe8:	2000b2a6 	.word	0x2000b2a6
 800fbec:	08016d8c 	.word	0x08016d8c
 800fbf0:	08017134 	.word	0x08017134
 800fbf4:	08016dd8 	.word	0x08016dd8
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	4423      	add	r3, r4
 800fbfc:	b29a      	uxth	r2, r3
 800fbfe:	4b98      	ldr	r3, [pc, #608]	@ (800fe60 <tcp_receive+0xb04>)
 800fc00:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fc02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc04:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fc06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800fc0c:	6938      	ldr	r0, [r7, #16]
 800fc0e:	f7fd fd38 	bl	800d682 <tcp_seg_free>
            while (next &&
 800fc12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d00e      	beq.n	800fc36 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fc18:	4b91      	ldr	r3, [pc, #580]	@ (800fe60 <tcp_receive+0xb04>)
 800fc1a:	881b      	ldrh	r3, [r3, #0]
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	4b91      	ldr	r3, [pc, #580]	@ (800fe64 <tcp_receive+0xb08>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	441a      	add	r2, r3
 800fc24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc26:	68db      	ldr	r3, [r3, #12]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fc2c:	8909      	ldrh	r1, [r1, #8]
 800fc2e:	440b      	add	r3, r1
 800fc30:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	da9b      	bge.n	800fb6e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fc36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d059      	beq.n	800fcf0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fc3c:	4b88      	ldr	r3, [pc, #544]	@ (800fe60 <tcp_receive+0xb04>)
 800fc3e:	881b      	ldrh	r3, [r3, #0]
 800fc40:	461a      	mov	r2, r3
 800fc42:	4b88      	ldr	r3, [pc, #544]	@ (800fe64 <tcp_receive+0xb08>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	441a      	add	r2, r3
 800fc48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	dd4d      	ble.n	800fcf0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fc54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc56:	68db      	ldr	r3, [r3, #12]
 800fc58:	685b      	ldr	r3, [r3, #4]
 800fc5a:	b29a      	uxth	r2, r3
 800fc5c:	4b81      	ldr	r3, [pc, #516]	@ (800fe64 <tcp_receive+0xb08>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	1ad3      	subs	r3, r2, r3
 800fc64:	b29a      	uxth	r2, r3
 800fc66:	4b80      	ldr	r3, [pc, #512]	@ (800fe68 <tcp_receive+0xb0c>)
 800fc68:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fc6a:	4b7f      	ldr	r3, [pc, #508]	@ (800fe68 <tcp_receive+0xb0c>)
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	899b      	ldrh	r3, [r3, #12]
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7fa fe90 	bl	800a998 <lwip_htons>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	b2db      	uxtb	r3, r3
 800fc7c:	f003 0302 	and.w	r3, r3, #2
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d005      	beq.n	800fc90 <tcp_receive+0x934>
                inseg.len -= 1;
 800fc84:	4b78      	ldr	r3, [pc, #480]	@ (800fe68 <tcp_receive+0xb0c>)
 800fc86:	891b      	ldrh	r3, [r3, #8]
 800fc88:	3b01      	subs	r3, #1
 800fc8a:	b29a      	uxth	r2, r3
 800fc8c:	4b76      	ldr	r3, [pc, #472]	@ (800fe68 <tcp_receive+0xb0c>)
 800fc8e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fc90:	4b75      	ldr	r3, [pc, #468]	@ (800fe68 <tcp_receive+0xb0c>)
 800fc92:	685b      	ldr	r3, [r3, #4]
 800fc94:	4a74      	ldr	r2, [pc, #464]	@ (800fe68 <tcp_receive+0xb0c>)
 800fc96:	8912      	ldrh	r2, [r2, #8]
 800fc98:	4611      	mov	r1, r2
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7fc f854 	bl	800bd48 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fca0:	4b71      	ldr	r3, [pc, #452]	@ (800fe68 <tcp_receive+0xb0c>)
 800fca2:	891c      	ldrh	r4, [r3, #8]
 800fca4:	4b70      	ldr	r3, [pc, #448]	@ (800fe68 <tcp_receive+0xb0c>)
 800fca6:	68db      	ldr	r3, [r3, #12]
 800fca8:	899b      	ldrh	r3, [r3, #12]
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7fa fe73 	bl	800a998 <lwip_htons>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	f003 0303 	and.w	r3, r3, #3
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d001      	beq.n	800fcc2 <tcp_receive+0x966>
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	e000      	b.n	800fcc4 <tcp_receive+0x968>
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	4423      	add	r3, r4
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	4b65      	ldr	r3, [pc, #404]	@ (800fe60 <tcp_receive+0xb04>)
 800fcca:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fccc:	4b64      	ldr	r3, [pc, #400]	@ (800fe60 <tcp_receive+0xb04>)
 800fcce:	881b      	ldrh	r3, [r3, #0]
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	4b64      	ldr	r3, [pc, #400]	@ (800fe64 <tcp_receive+0xb08>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	441a      	add	r2, r3
 800fcd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcda:	68db      	ldr	r3, [r3, #12]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d006      	beq.n	800fcf0 <tcp_receive+0x994>
 800fce2:	4b62      	ldr	r3, [pc, #392]	@ (800fe6c <tcp_receive+0xb10>)
 800fce4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800fce8:	4961      	ldr	r1, [pc, #388]	@ (800fe70 <tcp_receive+0xb14>)
 800fcea:	4862      	ldr	r0, [pc, #392]	@ (800fe74 <tcp_receive+0xb18>)
 800fcec:	f005 f820 	bl	8014d30 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fcf4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fcf6:	4b5a      	ldr	r3, [pc, #360]	@ (800fe60 <tcp_receive+0xb04>)
 800fcf8:	881b      	ldrh	r3, [r3, #0]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	4b59      	ldr	r3, [pc, #356]	@ (800fe64 <tcp_receive+0xb08>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	441a      	add	r2, r3
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fd0a:	4b55      	ldr	r3, [pc, #340]	@ (800fe60 <tcp_receive+0xb04>)
 800fd0c:	881b      	ldrh	r3, [r3, #0]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d206      	bcs.n	800fd20 <tcp_receive+0x9c4>
 800fd12:	4b56      	ldr	r3, [pc, #344]	@ (800fe6c <tcp_receive+0xb10>)
 800fd14:	f240 6207 	movw	r2, #1543	@ 0x607
 800fd18:	4957      	ldr	r1, [pc, #348]	@ (800fe78 <tcp_receive+0xb1c>)
 800fd1a:	4856      	ldr	r0, [pc, #344]	@ (800fe74 <tcp_receive+0xb18>)
 800fd1c:	f005 f808 	bl	8014d30 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fd24:	4b4e      	ldr	r3, [pc, #312]	@ (800fe60 <tcp_receive+0xb04>)
 800fd26:	881b      	ldrh	r3, [r3, #0]
 800fd28:	1ad3      	subs	r3, r2, r3
 800fd2a:	b29a      	uxth	r2, r3
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f7fc ffc5 	bl	800ccc0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fd36:	4b4c      	ldr	r3, [pc, #304]	@ (800fe68 <tcp_receive+0xb0c>)
 800fd38:	685b      	ldr	r3, [r3, #4]
 800fd3a:	891b      	ldrh	r3, [r3, #8]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d006      	beq.n	800fd4e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fd40:	4b49      	ldr	r3, [pc, #292]	@ (800fe68 <tcp_receive+0xb0c>)
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	4a4d      	ldr	r2, [pc, #308]	@ (800fe7c <tcp_receive+0xb20>)
 800fd46:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fd48:	4b47      	ldr	r3, [pc, #284]	@ (800fe68 <tcp_receive+0xb0c>)
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fd4e:	4b46      	ldr	r3, [pc, #280]	@ (800fe68 <tcp_receive+0xb0c>)
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	899b      	ldrh	r3, [r3, #12]
 800fd54:	b29b      	uxth	r3, r3
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7fa fe1e 	bl	800a998 <lwip_htons>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	f003 0301 	and.w	r3, r3, #1
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	f000 80b8 	beq.w	800feda <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fd6a:	4b45      	ldr	r3, [pc, #276]	@ (800fe80 <tcp_receive+0xb24>)
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	f043 0320 	orr.w	r3, r3, #32
 800fd72:	b2da      	uxtb	r2, r3
 800fd74:	4b42      	ldr	r3, [pc, #264]	@ (800fe80 <tcp_receive+0xb24>)
 800fd76:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fd78:	e0af      	b.n	800feda <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd7e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd84:	68db      	ldr	r3, [r3, #12]
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	4a36      	ldr	r2, [pc, #216]	@ (800fe64 <tcp_receive+0xb08>)
 800fd8a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	891b      	ldrh	r3, [r3, #8]
 800fd90:	461c      	mov	r4, r3
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	68db      	ldr	r3, [r3, #12]
 800fd96:	899b      	ldrh	r3, [r3, #12]
 800fd98:	b29b      	uxth	r3, r3
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7fa fdfc 	bl	800a998 <lwip_htons>
 800fda0:	4603      	mov	r3, r0
 800fda2:	b2db      	uxtb	r3, r3
 800fda4:	f003 0303 	and.w	r3, r3, #3
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d001      	beq.n	800fdb0 <tcp_receive+0xa54>
 800fdac:	2301      	movs	r3, #1
 800fdae:	e000      	b.n	800fdb2 <tcp_receive+0xa56>
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	191a      	adds	r2, r3, r4
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdb8:	441a      	add	r2, r3
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fdc2:	461c      	mov	r4, r3
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	891b      	ldrh	r3, [r3, #8]
 800fdc8:	461d      	mov	r5, r3
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	899b      	ldrh	r3, [r3, #12]
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fa fde0 	bl	800a998 <lwip_htons>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	f003 0303 	and.w	r3, r3, #3
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d001      	beq.n	800fde8 <tcp_receive+0xa8c>
 800fde4:	2301      	movs	r3, #1
 800fde6:	e000      	b.n	800fdea <tcp_receive+0xa8e>
 800fde8:	2300      	movs	r3, #0
 800fdea:	442b      	add	r3, r5
 800fdec:	429c      	cmp	r4, r3
 800fdee:	d206      	bcs.n	800fdfe <tcp_receive+0xaa2>
 800fdf0:	4b1e      	ldr	r3, [pc, #120]	@ (800fe6c <tcp_receive+0xb10>)
 800fdf2:	f240 622b 	movw	r2, #1579	@ 0x62b
 800fdf6:	4923      	ldr	r1, [pc, #140]	@ (800fe84 <tcp_receive+0xb28>)
 800fdf8:	481e      	ldr	r0, [pc, #120]	@ (800fe74 <tcp_receive+0xb18>)
 800fdfa:	f004 ff99 	bl	8014d30 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	891b      	ldrh	r3, [r3, #8]
 800fe02:	461c      	mov	r4, r3
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	68db      	ldr	r3, [r3, #12]
 800fe08:	899b      	ldrh	r3, [r3, #12]
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7fa fdc3 	bl	800a998 <lwip_htons>
 800fe12:	4603      	mov	r3, r0
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	f003 0303 	and.w	r3, r3, #3
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d001      	beq.n	800fe22 <tcp_receive+0xac6>
 800fe1e:	2301      	movs	r3, #1
 800fe20:	e000      	b.n	800fe24 <tcp_receive+0xac8>
 800fe22:	2300      	movs	r3, #0
 800fe24:	1919      	adds	r1, r3, r4
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fe2a:	b28b      	uxth	r3, r1
 800fe2c:	1ad3      	subs	r3, r2, r3
 800fe2e:	b29a      	uxth	r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f7fc ff43 	bl	800ccc0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	891b      	ldrh	r3, [r3, #8]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d028      	beq.n	800fe96 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fe44:	4b0d      	ldr	r3, [pc, #52]	@ (800fe7c <tcp_receive+0xb20>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d01d      	beq.n	800fe88 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fe4c:	4b0b      	ldr	r3, [pc, #44]	@ (800fe7c <tcp_receive+0xb20>)
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	4619      	mov	r1, r3
 800fe56:	4610      	mov	r0, r2
 800fe58:	f7fc f9be 	bl	800c1d8 <pbuf_cat>
 800fe5c:	e018      	b.n	800fe90 <tcp_receive+0xb34>
 800fe5e:	bf00      	nop
 800fe60:	2000b2a6 	.word	0x2000b2a6
 800fe64:	2000b29c 	.word	0x2000b29c
 800fe68:	2000b27c 	.word	0x2000b27c
 800fe6c:	08016d8c 	.word	0x08016d8c
 800fe70:	0801716c 	.word	0x0801716c
 800fe74:	08016dd8 	.word	0x08016dd8
 800fe78:	080171a8 	.word	0x080171a8
 800fe7c:	2000b2ac 	.word	0x2000b2ac
 800fe80:	2000b2a9 	.word	0x2000b2a9
 800fe84:	080171c8 	.word	0x080171c8
            } else {
              recv_data = cseg->p;
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	4a70      	ldr	r2, [pc, #448]	@ (8010050 <tcp_receive+0xcf4>)
 800fe8e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	2200      	movs	r2, #0
 800fe94:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	899b      	ldrh	r3, [r3, #12]
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7fa fd7a 	bl	800a998 <lwip_htons>
 800fea4:	4603      	mov	r3, r0
 800fea6:	b2db      	uxtb	r3, r3
 800fea8:	f003 0301 	and.w	r3, r3, #1
 800feac:	2b00      	cmp	r3, #0
 800feae:	d00d      	beq.n	800fecc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800feb0:	4b68      	ldr	r3, [pc, #416]	@ (8010054 <tcp_receive+0xcf8>)
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	f043 0320 	orr.w	r3, r3, #32
 800feb8:	b2da      	uxtb	r2, r3
 800feba:	4b66      	ldr	r3, [pc, #408]	@ (8010054 <tcp_receive+0xcf8>)
 800febc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	7d1b      	ldrb	r3, [r3, #20]
 800fec2:	2b04      	cmp	r3, #4
 800fec4:	d102      	bne.n	800fecc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2207      	movs	r2, #7
 800feca:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	681a      	ldr	r2, [r3, #0]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800fed4:	68b8      	ldr	r0, [r7, #8]
 800fed6:	f7fd fbd4 	bl	800d682 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d008      	beq.n	800fef4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fee6:	68db      	ldr	r3, [r3, #12]
 800fee8:	685a      	ldr	r2, [r3, #4]
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800feee:	429a      	cmp	r2, r3
 800fef0:	f43f af43 	beq.w	800fd7a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	8b5b      	ldrh	r3, [r3, #26]
 800fef8:	f003 0301 	and.w	r3, r3, #1
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d00e      	beq.n	800ff1e <tcp_receive+0xbc2>
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	8b5b      	ldrh	r3, [r3, #26]
 800ff04:	f023 0301 	bic.w	r3, r3, #1
 800ff08:	b29a      	uxth	r2, r3
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	835a      	strh	r2, [r3, #26]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	8b5b      	ldrh	r3, [r3, #26]
 800ff12:	f043 0302 	orr.w	r3, r3, #2
 800ff16:	b29a      	uxth	r2, r3
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ff1c:	e187      	b.n	801022e <tcp_receive+0xed2>
        tcp_ack(pcb);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	8b5b      	ldrh	r3, [r3, #26]
 800ff22:	f043 0301 	orr.w	r3, r3, #1
 800ff26:	b29a      	uxth	r2, r3
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ff2c:	e17f      	b.n	801022e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d106      	bne.n	800ff44 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ff36:	4848      	ldr	r0, [pc, #288]	@ (8010058 <tcp_receive+0xcfc>)
 800ff38:	f7fd fbbc 	bl	800d6b4 <tcp_seg_copy>
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	675a      	str	r2, [r3, #116]	@ 0x74
 800ff42:	e16c      	b.n	801021e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ff44:	2300      	movs	r3, #0
 800ff46:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ff4e:	e156      	b.n	80101fe <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800ff50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff52:	68db      	ldr	r3, [r3, #12]
 800ff54:	685a      	ldr	r2, [r3, #4]
 800ff56:	4b41      	ldr	r3, [pc, #260]	@ (801005c <tcp_receive+0xd00>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d11d      	bne.n	800ff9a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ff5e:	4b3e      	ldr	r3, [pc, #248]	@ (8010058 <tcp_receive+0xcfc>)
 800ff60:	891a      	ldrh	r2, [r3, #8]
 800ff62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff64:	891b      	ldrh	r3, [r3, #8]
 800ff66:	429a      	cmp	r2, r3
 800ff68:	f240 814e 	bls.w	8010208 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff6c:	483a      	ldr	r0, [pc, #232]	@ (8010058 <tcp_receive+0xcfc>)
 800ff6e:	f7fd fba1 	bl	800d6b4 <tcp_seg_copy>
 800ff72:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	f000 8148 	beq.w	801020c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800ff7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d003      	beq.n	800ff8a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ff82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff84:	697a      	ldr	r2, [r7, #20]
 800ff86:	601a      	str	r2, [r3, #0]
 800ff88:	e002      	b.n	800ff90 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	697a      	ldr	r2, [r7, #20]
 800ff8e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ff90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ff92:	6978      	ldr	r0, [r7, #20]
 800ff94:	f7ff f8de 	bl	800f154 <tcp_oos_insert_segment>
                }
                break;
 800ff98:	e138      	b.n	801020c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ff9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d117      	bne.n	800ffd0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ffa0:	4b2e      	ldr	r3, [pc, #184]	@ (801005c <tcp_receive+0xd00>)
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	1ad3      	subs	r3, r2, r3
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	da57      	bge.n	8010060 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ffb0:	4829      	ldr	r0, [pc, #164]	@ (8010058 <tcp_receive+0xcfc>)
 800ffb2:	f7fd fb7f 	bl	800d6b4 <tcp_seg_copy>
 800ffb6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ffb8:	69bb      	ldr	r3, [r7, #24]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	f000 8128 	beq.w	8010210 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	69ba      	ldr	r2, [r7, #24]
 800ffc4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ffc6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ffc8:	69b8      	ldr	r0, [r7, #24]
 800ffca:	f7ff f8c3 	bl	800f154 <tcp_oos_insert_segment>
                  }
                  break;
 800ffce:	e11f      	b.n	8010210 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ffd0:	4b22      	ldr	r3, [pc, #136]	@ (801005c <tcp_receive+0xd00>)
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffd6:	68db      	ldr	r3, [r3, #12]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	1ad3      	subs	r3, r2, r3
 800ffdc:	3b01      	subs	r3, #1
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	db3e      	blt.n	8010060 <tcp_receive+0xd04>
 800ffe2:	4b1e      	ldr	r3, [pc, #120]	@ (801005c <tcp_receive+0xd00>)
 800ffe4:	681a      	ldr	r2, [r3, #0]
 800ffe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffe8:	68db      	ldr	r3, [r3, #12]
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	1ad3      	subs	r3, r2, r3
 800ffee:	3301      	adds	r3, #1
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	dc35      	bgt.n	8010060 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fff4:	4818      	ldr	r0, [pc, #96]	@ (8010058 <tcp_receive+0xcfc>)
 800fff6:	f7fd fb5d 	bl	800d6b4 <tcp_seg_copy>
 800fffa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	f000 8108 	beq.w	8010214 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801000c:	8912      	ldrh	r2, [r2, #8]
 801000e:	441a      	add	r2, r3
 8010010:	4b12      	ldr	r3, [pc, #72]	@ (801005c <tcp_receive+0xd00>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	1ad3      	subs	r3, r2, r3
 8010016:	2b00      	cmp	r3, #0
 8010018:	dd12      	ble.n	8010040 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801001a:	4b10      	ldr	r3, [pc, #64]	@ (801005c <tcp_receive+0xd00>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	b29a      	uxth	r2, r3
 8010020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010022:	68db      	ldr	r3, [r3, #12]
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	b29b      	uxth	r3, r3
 8010028:	1ad3      	subs	r3, r2, r3
 801002a:	b29a      	uxth	r2, r3
 801002c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801002e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010032:	685a      	ldr	r2, [r3, #4]
 8010034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010036:	891b      	ldrh	r3, [r3, #8]
 8010038:	4619      	mov	r1, r3
 801003a:	4610      	mov	r0, r2
 801003c:	f7fb fe84 	bl	800bd48 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010042:	69fa      	ldr	r2, [r7, #28]
 8010044:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010046:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010048:	69f8      	ldr	r0, [r7, #28]
 801004a:	f7ff f883 	bl	800f154 <tcp_oos_insert_segment>
                  }
                  break;
 801004e:	e0e1      	b.n	8010214 <tcp_receive+0xeb8>
 8010050:	2000b2ac 	.word	0x2000b2ac
 8010054:	2000b2a9 	.word	0x2000b2a9
 8010058:	2000b27c 	.word	0x2000b27c
 801005c:	2000b29c 	.word	0x2000b29c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010062:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	2b00      	cmp	r3, #0
 801006a:	f040 80c5 	bne.w	80101f8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801006e:	4b7f      	ldr	r3, [pc, #508]	@ (801026c <tcp_receive+0xf10>)
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010074:	68db      	ldr	r3, [r3, #12]
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801007a:	2b00      	cmp	r3, #0
 801007c:	f340 80bc 	ble.w	80101f8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010082:	68db      	ldr	r3, [r3, #12]
 8010084:	899b      	ldrh	r3, [r3, #12]
 8010086:	b29b      	uxth	r3, r3
 8010088:	4618      	mov	r0, r3
 801008a:	f7fa fc85 	bl	800a998 <lwip_htons>
 801008e:	4603      	mov	r3, r0
 8010090:	b2db      	uxtb	r3, r3
 8010092:	f003 0301 	and.w	r3, r3, #1
 8010096:	2b00      	cmp	r3, #0
 8010098:	f040 80be 	bne.w	8010218 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801009c:	4874      	ldr	r0, [pc, #464]	@ (8010270 <tcp_receive+0xf14>)
 801009e:	f7fd fb09 	bl	800d6b4 <tcp_seg_copy>
 80100a2:	4602      	mov	r2, r0
 80100a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100a6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80100a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	f000 80b5 	beq.w	801021c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80100b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100b4:	68db      	ldr	r3, [r3, #12]
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80100ba:	8912      	ldrh	r2, [r2, #8]
 80100bc:	441a      	add	r2, r3
 80100be:	4b6b      	ldr	r3, [pc, #428]	@ (801026c <tcp_receive+0xf10>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	1ad3      	subs	r3, r2, r3
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	dd12      	ble.n	80100ee <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80100c8:	4b68      	ldr	r3, [pc, #416]	@ (801026c <tcp_receive+0xf10>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	b29a      	uxth	r2, r3
 80100ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100d0:	68db      	ldr	r3, [r3, #12]
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	1ad3      	subs	r3, r2, r3
 80100d8:	b29a      	uxth	r2, r3
 80100da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100dc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80100de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100e0:	685a      	ldr	r2, [r3, #4]
 80100e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100e4:	891b      	ldrh	r3, [r3, #8]
 80100e6:	4619      	mov	r1, r3
 80100e8:	4610      	mov	r0, r2
 80100ea:	f7fb fe2d 	bl	800bd48 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80100ee:	4b61      	ldr	r3, [pc, #388]	@ (8010274 <tcp_receive+0xf18>)
 80100f0:	881b      	ldrh	r3, [r3, #0]
 80100f2:	461a      	mov	r2, r3
 80100f4:	4b5d      	ldr	r3, [pc, #372]	@ (801026c <tcp_receive+0xf10>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	441a      	add	r2, r3
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100fe:	6879      	ldr	r1, [r7, #4]
 8010100:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010102:	440b      	add	r3, r1
 8010104:	1ad3      	subs	r3, r2, r3
 8010106:	2b00      	cmp	r3, #0
 8010108:	f340 8088 	ble.w	801021c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801010c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	68db      	ldr	r3, [r3, #12]
 8010112:	899b      	ldrh	r3, [r3, #12]
 8010114:	b29b      	uxth	r3, r3
 8010116:	4618      	mov	r0, r3
 8010118:	f7fa fc3e 	bl	800a998 <lwip_htons>
 801011c:	4603      	mov	r3, r0
 801011e:	b2db      	uxtb	r3, r3
 8010120:	f003 0301 	and.w	r3, r3, #1
 8010124:	2b00      	cmp	r3, #0
 8010126:	d021      	beq.n	801016c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	68db      	ldr	r3, [r3, #12]
 801012e:	899b      	ldrh	r3, [r3, #12]
 8010130:	b29b      	uxth	r3, r3
 8010132:	b21b      	sxth	r3, r3
 8010134:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010138:	b21c      	sxth	r4, r3
 801013a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	899b      	ldrh	r3, [r3, #12]
 8010142:	b29b      	uxth	r3, r3
 8010144:	4618      	mov	r0, r3
 8010146:	f7fa fc27 	bl	800a998 <lwip_htons>
 801014a:	4603      	mov	r3, r0
 801014c:	b2db      	uxtb	r3, r3
 801014e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010152:	b29b      	uxth	r3, r3
 8010154:	4618      	mov	r0, r3
 8010156:	f7fa fc1f 	bl	800a998 <lwip_htons>
 801015a:	4603      	mov	r3, r0
 801015c:	b21b      	sxth	r3, r3
 801015e:	4323      	orrs	r3, r4
 8010160:	b21a      	sxth	r2, r3
 8010162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	b292      	uxth	r2, r2
 801016a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010170:	b29a      	uxth	r2, r3
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010176:	4413      	add	r3, r2
 8010178:	b299      	uxth	r1, r3
 801017a:	4b3c      	ldr	r3, [pc, #240]	@ (801026c <tcp_receive+0xf10>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	b29a      	uxth	r2, r3
 8010180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	1a8a      	subs	r2, r1, r2
 8010186:	b292      	uxth	r2, r2
 8010188:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801018a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	685a      	ldr	r2, [r3, #4]
 8010190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	891b      	ldrh	r3, [r3, #8]
 8010196:	4619      	mov	r1, r3
 8010198:	4610      	mov	r0, r2
 801019a:	f7fb fdd5 	bl	800bd48 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801019e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	891c      	ldrh	r4, [r3, #8]
 80101a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	68db      	ldr	r3, [r3, #12]
 80101aa:	899b      	ldrh	r3, [r3, #12]
 80101ac:	b29b      	uxth	r3, r3
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7fa fbf2 	bl	800a998 <lwip_htons>
 80101b4:	4603      	mov	r3, r0
 80101b6:	b2db      	uxtb	r3, r3
 80101b8:	f003 0303 	and.w	r3, r3, #3
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d001      	beq.n	80101c4 <tcp_receive+0xe68>
 80101c0:	2301      	movs	r3, #1
 80101c2:	e000      	b.n	80101c6 <tcp_receive+0xe6a>
 80101c4:	2300      	movs	r3, #0
 80101c6:	4423      	add	r3, r4
 80101c8:	b29a      	uxth	r2, r3
 80101ca:	4b2a      	ldr	r3, [pc, #168]	@ (8010274 <tcp_receive+0xf18>)
 80101cc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80101ce:	4b29      	ldr	r3, [pc, #164]	@ (8010274 <tcp_receive+0xf18>)
 80101d0:	881b      	ldrh	r3, [r3, #0]
 80101d2:	461a      	mov	r2, r3
 80101d4:	4b25      	ldr	r3, [pc, #148]	@ (801026c <tcp_receive+0xf10>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	441a      	add	r2, r3
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101de:	6879      	ldr	r1, [r7, #4]
 80101e0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80101e2:	440b      	add	r3, r1
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d019      	beq.n	801021c <tcp_receive+0xec0>
 80101e8:	4b23      	ldr	r3, [pc, #140]	@ (8010278 <tcp_receive+0xf1c>)
 80101ea:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80101ee:	4923      	ldr	r1, [pc, #140]	@ (801027c <tcp_receive+0xf20>)
 80101f0:	4823      	ldr	r0, [pc, #140]	@ (8010280 <tcp_receive+0xf24>)
 80101f2:	f004 fd9d 	bl	8014d30 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80101f6:	e011      	b.n	801021c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80101f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80101fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010200:	2b00      	cmp	r3, #0
 8010202:	f47f aea5 	bne.w	800ff50 <tcp_receive+0xbf4>
 8010206:	e00a      	b.n	801021e <tcp_receive+0xec2>
                break;
 8010208:	bf00      	nop
 801020a:	e008      	b.n	801021e <tcp_receive+0xec2>
                break;
 801020c:	bf00      	nop
 801020e:	e006      	b.n	801021e <tcp_receive+0xec2>
                  break;
 8010210:	bf00      	nop
 8010212:	e004      	b.n	801021e <tcp_receive+0xec2>
                  break;
 8010214:	bf00      	nop
 8010216:	e002      	b.n	801021e <tcp_receive+0xec2>
                  break;
 8010218:	bf00      	nop
 801021a:	e000      	b.n	801021e <tcp_receive+0xec2>
                break;
 801021c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f001 fa30 	bl	8011684 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010224:	e003      	b.n	801022e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f001 fa2c 	bl	8011684 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801022c:	e01a      	b.n	8010264 <tcp_receive+0xf08>
 801022e:	e019      	b.n	8010264 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010230:	4b0e      	ldr	r3, [pc, #56]	@ (801026c <tcp_receive+0xf10>)
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010238:	1ad3      	subs	r3, r2, r3
 801023a:	2b00      	cmp	r3, #0
 801023c:	db0a      	blt.n	8010254 <tcp_receive+0xef8>
 801023e:	4b0b      	ldr	r3, [pc, #44]	@ (801026c <tcp_receive+0xf10>)
 8010240:	681a      	ldr	r2, [r3, #0]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010246:	6879      	ldr	r1, [r7, #4]
 8010248:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801024a:	440b      	add	r3, r1
 801024c:	1ad3      	subs	r3, r2, r3
 801024e:	3301      	adds	r3, #1
 8010250:	2b00      	cmp	r3, #0
 8010252:	dd07      	ble.n	8010264 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	8b5b      	ldrh	r3, [r3, #26]
 8010258:	f043 0302 	orr.w	r3, r3, #2
 801025c:	b29a      	uxth	r2, r3
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010262:	e7ff      	b.n	8010264 <tcp_receive+0xf08>
 8010264:	bf00      	nop
 8010266:	3750      	adds	r7, #80	@ 0x50
 8010268:	46bd      	mov	sp, r7
 801026a:	bdb0      	pop	{r4, r5, r7, pc}
 801026c:	2000b29c 	.word	0x2000b29c
 8010270:	2000b27c 	.word	0x2000b27c
 8010274:	2000b2a6 	.word	0x2000b2a6
 8010278:	08016d8c 	.word	0x08016d8c
 801027c:	08017134 	.word	0x08017134
 8010280:	08016dd8 	.word	0x08016dd8

08010284 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010284:	b480      	push	{r7}
 8010286:	b083      	sub	sp, #12
 8010288:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801028a:	4b15      	ldr	r3, [pc, #84]	@ (80102e0 <tcp_get_next_optbyte+0x5c>)
 801028c:	881b      	ldrh	r3, [r3, #0]
 801028e:	1c5a      	adds	r2, r3, #1
 8010290:	b291      	uxth	r1, r2
 8010292:	4a13      	ldr	r2, [pc, #76]	@ (80102e0 <tcp_get_next_optbyte+0x5c>)
 8010294:	8011      	strh	r1, [r2, #0]
 8010296:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010298:	4b12      	ldr	r3, [pc, #72]	@ (80102e4 <tcp_get_next_optbyte+0x60>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d004      	beq.n	80102aa <tcp_get_next_optbyte+0x26>
 80102a0:	4b11      	ldr	r3, [pc, #68]	@ (80102e8 <tcp_get_next_optbyte+0x64>)
 80102a2:	881b      	ldrh	r3, [r3, #0]
 80102a4:	88fa      	ldrh	r2, [r7, #6]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d208      	bcs.n	80102bc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80102aa:	4b10      	ldr	r3, [pc, #64]	@ (80102ec <tcp_get_next_optbyte+0x68>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	3314      	adds	r3, #20
 80102b0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80102b2:	88fb      	ldrh	r3, [r7, #6]
 80102b4:	683a      	ldr	r2, [r7, #0]
 80102b6:	4413      	add	r3, r2
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	e00b      	b.n	80102d4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80102bc:	88fb      	ldrh	r3, [r7, #6]
 80102be:	b2da      	uxtb	r2, r3
 80102c0:	4b09      	ldr	r3, [pc, #36]	@ (80102e8 <tcp_get_next_optbyte+0x64>)
 80102c2:	881b      	ldrh	r3, [r3, #0]
 80102c4:	b2db      	uxtb	r3, r3
 80102c6:	1ad3      	subs	r3, r2, r3
 80102c8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80102ca:	4b06      	ldr	r3, [pc, #24]	@ (80102e4 <tcp_get_next_optbyte+0x60>)
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	797b      	ldrb	r3, [r7, #5]
 80102d0:	4413      	add	r3, r2
 80102d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	370c      	adds	r7, #12
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr
 80102e0:	2000b298 	.word	0x2000b298
 80102e4:	2000b294 	.word	0x2000b294
 80102e8:	2000b292 	.word	0x2000b292
 80102ec:	2000b28c 	.word	0x2000b28c

080102f0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d106      	bne.n	801030c <tcp_parseopt+0x1c>
 80102fe:	4b32      	ldr	r3, [pc, #200]	@ (80103c8 <tcp_parseopt+0xd8>)
 8010300:	f240 727d 	movw	r2, #1917	@ 0x77d
 8010304:	4931      	ldr	r1, [pc, #196]	@ (80103cc <tcp_parseopt+0xdc>)
 8010306:	4832      	ldr	r0, [pc, #200]	@ (80103d0 <tcp_parseopt+0xe0>)
 8010308:	f004 fd12 	bl	8014d30 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801030c:	4b31      	ldr	r3, [pc, #196]	@ (80103d4 <tcp_parseopt+0xe4>)
 801030e:	881b      	ldrh	r3, [r3, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d056      	beq.n	80103c2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010314:	4b30      	ldr	r3, [pc, #192]	@ (80103d8 <tcp_parseopt+0xe8>)
 8010316:	2200      	movs	r2, #0
 8010318:	801a      	strh	r2, [r3, #0]
 801031a:	e046      	b.n	80103aa <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 801031c:	f7ff ffb2 	bl	8010284 <tcp_get_next_optbyte>
 8010320:	4603      	mov	r3, r0
 8010322:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010324:	7bfb      	ldrb	r3, [r7, #15]
 8010326:	2b02      	cmp	r3, #2
 8010328:	d006      	beq.n	8010338 <tcp_parseopt+0x48>
 801032a:	2b02      	cmp	r3, #2
 801032c:	dc2a      	bgt.n	8010384 <tcp_parseopt+0x94>
 801032e:	2b00      	cmp	r3, #0
 8010330:	d042      	beq.n	80103b8 <tcp_parseopt+0xc8>
 8010332:	2b01      	cmp	r3, #1
 8010334:	d038      	beq.n	80103a8 <tcp_parseopt+0xb8>
 8010336:	e025      	b.n	8010384 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010338:	f7ff ffa4 	bl	8010284 <tcp_get_next_optbyte>
 801033c:	4603      	mov	r3, r0
 801033e:	2b04      	cmp	r3, #4
 8010340:	d13c      	bne.n	80103bc <tcp_parseopt+0xcc>
 8010342:	4b25      	ldr	r3, [pc, #148]	@ (80103d8 <tcp_parseopt+0xe8>)
 8010344:	881b      	ldrh	r3, [r3, #0]
 8010346:	3301      	adds	r3, #1
 8010348:	4a22      	ldr	r2, [pc, #136]	@ (80103d4 <tcp_parseopt+0xe4>)
 801034a:	8812      	ldrh	r2, [r2, #0]
 801034c:	4293      	cmp	r3, r2
 801034e:	da35      	bge.n	80103bc <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010350:	f7ff ff98 	bl	8010284 <tcp_get_next_optbyte>
 8010354:	4603      	mov	r3, r0
 8010356:	021b      	lsls	r3, r3, #8
 8010358:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801035a:	f7ff ff93 	bl	8010284 <tcp_get_next_optbyte>
 801035e:	4603      	mov	r3, r0
 8010360:	461a      	mov	r2, r3
 8010362:	89bb      	ldrh	r3, [r7, #12]
 8010364:	4313      	orrs	r3, r2
 8010366:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010368:	89bb      	ldrh	r3, [r7, #12]
 801036a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801036e:	d804      	bhi.n	801037a <tcp_parseopt+0x8a>
 8010370:	89bb      	ldrh	r3, [r7, #12]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d001      	beq.n	801037a <tcp_parseopt+0x8a>
 8010376:	89ba      	ldrh	r2, [r7, #12]
 8010378:	e001      	b.n	801037e <tcp_parseopt+0x8e>
 801037a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8010382:	e012      	b.n	80103aa <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010384:	f7ff ff7e 	bl	8010284 <tcp_get_next_optbyte>
 8010388:	4603      	mov	r3, r0
 801038a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801038c:	7afb      	ldrb	r3, [r7, #11]
 801038e:	2b01      	cmp	r3, #1
 8010390:	d916      	bls.n	80103c0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010392:	7afb      	ldrb	r3, [r7, #11]
 8010394:	b29a      	uxth	r2, r3
 8010396:	4b10      	ldr	r3, [pc, #64]	@ (80103d8 <tcp_parseopt+0xe8>)
 8010398:	881b      	ldrh	r3, [r3, #0]
 801039a:	4413      	add	r3, r2
 801039c:	b29b      	uxth	r3, r3
 801039e:	3b02      	subs	r3, #2
 80103a0:	b29a      	uxth	r2, r3
 80103a2:	4b0d      	ldr	r3, [pc, #52]	@ (80103d8 <tcp_parseopt+0xe8>)
 80103a4:	801a      	strh	r2, [r3, #0]
 80103a6:	e000      	b.n	80103aa <tcp_parseopt+0xba>
          break;
 80103a8:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80103aa:	4b0b      	ldr	r3, [pc, #44]	@ (80103d8 <tcp_parseopt+0xe8>)
 80103ac:	881a      	ldrh	r2, [r3, #0]
 80103ae:	4b09      	ldr	r3, [pc, #36]	@ (80103d4 <tcp_parseopt+0xe4>)
 80103b0:	881b      	ldrh	r3, [r3, #0]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d3b2      	bcc.n	801031c <tcp_parseopt+0x2c>
 80103b6:	e004      	b.n	80103c2 <tcp_parseopt+0xd2>
          return;
 80103b8:	bf00      	nop
 80103ba:	e002      	b.n	80103c2 <tcp_parseopt+0xd2>
            return;
 80103bc:	bf00      	nop
 80103be:	e000      	b.n	80103c2 <tcp_parseopt+0xd2>
            return;
 80103c0:	bf00      	nop
      }
    }
  }
}
 80103c2:	3710      	adds	r7, #16
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	08016d8c 	.word	0x08016d8c
 80103cc:	080171f0 	.word	0x080171f0
 80103d0:	08016dd8 	.word	0x08016dd8
 80103d4:	2000b290 	.word	0x2000b290
 80103d8:	2000b298 	.word	0x2000b298

080103dc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80103dc:	b480      	push	{r7}
 80103de:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80103e0:	4b05      	ldr	r3, [pc, #20]	@ (80103f8 <tcp_trigger_input_pcb_close+0x1c>)
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	f043 0310 	orr.w	r3, r3, #16
 80103e8:	b2da      	uxtb	r2, r3
 80103ea:	4b03      	ldr	r3, [pc, #12]	@ (80103f8 <tcp_trigger_input_pcb_close+0x1c>)
 80103ec:	701a      	strb	r2, [r3, #0]
}
 80103ee:	bf00      	nop
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr
 80103f8:	2000b2a9 	.word	0x2000b2a9

080103fc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b084      	sub	sp, #16
 8010400:	af00      	add	r7, sp, #0
 8010402:	60f8      	str	r0, [r7, #12]
 8010404:	60b9      	str	r1, [r7, #8]
 8010406:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d00a      	beq.n	8010424 <tcp_route+0x28>
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	7a1b      	ldrb	r3, [r3, #8]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d006      	beq.n	8010424 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	7a1b      	ldrb	r3, [r3, #8]
 801041a:	4618      	mov	r0, r3
 801041c:	f7fb faba 	bl	800b994 <netif_get_by_index>
 8010420:	4603      	mov	r3, r0
 8010422:	e003      	b.n	801042c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f003 f997 	bl	8013758 <ip4_route>
 801042a:	4603      	mov	r3, r0
  }
}
 801042c:	4618      	mov	r0, r3
 801042e:	3710      	adds	r7, #16
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010434:	b590      	push	{r4, r7, lr}
 8010436:	b087      	sub	sp, #28
 8010438:	af00      	add	r7, sp, #0
 801043a:	60f8      	str	r0, [r7, #12]
 801043c:	60b9      	str	r1, [r7, #8]
 801043e:	603b      	str	r3, [r7, #0]
 8010440:	4613      	mov	r3, r2
 8010442:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d105      	bne.n	8010456 <tcp_create_segment+0x22>
 801044a:	4b43      	ldr	r3, [pc, #268]	@ (8010558 <tcp_create_segment+0x124>)
 801044c:	22a3      	movs	r2, #163	@ 0xa3
 801044e:	4943      	ldr	r1, [pc, #268]	@ (801055c <tcp_create_segment+0x128>)
 8010450:	4843      	ldr	r0, [pc, #268]	@ (8010560 <tcp_create_segment+0x12c>)
 8010452:	f004 fc6d 	bl	8014d30 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d105      	bne.n	8010468 <tcp_create_segment+0x34>
 801045c:	4b3e      	ldr	r3, [pc, #248]	@ (8010558 <tcp_create_segment+0x124>)
 801045e:	22a4      	movs	r2, #164	@ 0xa4
 8010460:	4940      	ldr	r1, [pc, #256]	@ (8010564 <tcp_create_segment+0x130>)
 8010462:	483f      	ldr	r0, [pc, #252]	@ (8010560 <tcp_create_segment+0x12c>)
 8010464:	f004 fc64 	bl	8014d30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010468:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801046c:	009b      	lsls	r3, r3, #2
 801046e:	b2db      	uxtb	r3, r3
 8010470:	f003 0304 	and.w	r3, r3, #4
 8010474:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010476:	2003      	movs	r0, #3
 8010478:	f7fa ff06 	bl	800b288 <memp_malloc>
 801047c:	6138      	str	r0, [r7, #16]
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d104      	bne.n	801048e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010484:	68b8      	ldr	r0, [r7, #8]
 8010486:	f7fb fde5 	bl	800c054 <pbuf_free>
    return NULL;
 801048a:	2300      	movs	r3, #0
 801048c:	e060      	b.n	8010550 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010494:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	2200      	movs	r2, #0
 801049a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	68ba      	ldr	r2, [r7, #8]
 80104a0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	891a      	ldrh	r2, [r3, #8]
 80104a6:	7dfb      	ldrb	r3, [r7, #23]
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d205      	bcs.n	80104ba <tcp_create_segment+0x86>
 80104ae:	4b2a      	ldr	r3, [pc, #168]	@ (8010558 <tcp_create_segment+0x124>)
 80104b0:	22b0      	movs	r2, #176	@ 0xb0
 80104b2:	492d      	ldr	r1, [pc, #180]	@ (8010568 <tcp_create_segment+0x134>)
 80104b4:	482a      	ldr	r0, [pc, #168]	@ (8010560 <tcp_create_segment+0x12c>)
 80104b6:	f004 fc3b 	bl	8014d30 <iprintf>
  seg->len = p->tot_len - optlen;
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	891a      	ldrh	r2, [r3, #8]
 80104be:	7dfb      	ldrb	r3, [r7, #23]
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	1ad3      	subs	r3, r2, r3
 80104c4:	b29a      	uxth	r2, r3
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80104ca:	2114      	movs	r1, #20
 80104cc:	68b8      	ldr	r0, [r7, #8]
 80104ce:	f7fb fd2b 	bl	800bf28 <pbuf_add_header>
 80104d2:	4603      	mov	r3, r0
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d004      	beq.n	80104e2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80104d8:	6938      	ldr	r0, [r7, #16]
 80104da:	f7fd f8d2 	bl	800d682 <tcp_seg_free>
    return NULL;
 80104de:	2300      	movs	r3, #0
 80104e0:	e036      	b.n	8010550 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	685a      	ldr	r2, [r3, #4]
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	8ada      	ldrh	r2, [r3, #22]
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	68dc      	ldr	r4, [r3, #12]
 80104f4:	4610      	mov	r0, r2
 80104f6:	f7fa fa4f 	bl	800a998 <lwip_htons>
 80104fa:	4603      	mov	r3, r0
 80104fc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	8b1a      	ldrh	r2, [r3, #24]
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	68dc      	ldr	r4, [r3, #12]
 8010506:	4610      	mov	r0, r2
 8010508:	f7fa fa46 	bl	800a998 <lwip_htons>
 801050c:	4603      	mov	r3, r0
 801050e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	68dc      	ldr	r4, [r3, #12]
 8010514:	6838      	ldr	r0, [r7, #0]
 8010516:	f7fa fa55 	bl	800a9c4 <lwip_htonl>
 801051a:	4603      	mov	r3, r0
 801051c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801051e:	7dfb      	ldrb	r3, [r7, #23]
 8010520:	089b      	lsrs	r3, r3, #2
 8010522:	b2db      	uxtb	r3, r3
 8010524:	3305      	adds	r3, #5
 8010526:	b29b      	uxth	r3, r3
 8010528:	031b      	lsls	r3, r3, #12
 801052a:	b29a      	uxth	r2, r3
 801052c:	79fb      	ldrb	r3, [r7, #7]
 801052e:	b29b      	uxth	r3, r3
 8010530:	4313      	orrs	r3, r2
 8010532:	b29a      	uxth	r2, r3
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	68dc      	ldr	r4, [r3, #12]
 8010538:	4610      	mov	r0, r2
 801053a:	f7fa fa2d 	bl	800a998 <lwip_htons>
 801053e:	4603      	mov	r3, r0
 8010540:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	68db      	ldr	r3, [r3, #12]
 8010546:	2200      	movs	r2, #0
 8010548:	749a      	strb	r2, [r3, #18]
 801054a:	2200      	movs	r2, #0
 801054c:	74da      	strb	r2, [r3, #19]
  return seg;
 801054e:	693b      	ldr	r3, [r7, #16]
}
 8010550:	4618      	mov	r0, r3
 8010552:	371c      	adds	r7, #28
 8010554:	46bd      	mov	sp, r7
 8010556:	bd90      	pop	{r4, r7, pc}
 8010558:	0801720c 	.word	0x0801720c
 801055c:	08017240 	.word	0x08017240
 8010560:	08017260 	.word	0x08017260
 8010564:	08017288 	.word	0x08017288
 8010568:	080172ac 	.word	0x080172ac

0801056c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801056c:	b590      	push	{r4, r7, lr}
 801056e:	b08b      	sub	sp, #44	@ 0x2c
 8010570:	af02      	add	r7, sp, #8
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	460b      	mov	r3, r1
 8010576:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010578:	2300      	movs	r3, #0
 801057a:	61fb      	str	r3, [r7, #28]
 801057c:	2300      	movs	r3, #0
 801057e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010580:	2300      	movs	r3, #0
 8010582:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d106      	bne.n	8010598 <tcp_split_unsent_seg+0x2c>
 801058a:	4b95      	ldr	r3, [pc, #596]	@ (80107e0 <tcp_split_unsent_seg+0x274>)
 801058c:	f240 324b 	movw	r2, #843	@ 0x34b
 8010590:	4994      	ldr	r1, [pc, #592]	@ (80107e4 <tcp_split_unsent_seg+0x278>)
 8010592:	4895      	ldr	r0, [pc, #596]	@ (80107e8 <tcp_split_unsent_seg+0x27c>)
 8010594:	f004 fbcc 	bl	8014d30 <iprintf>

  useg = pcb->unsent;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801059c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d102      	bne.n	80105aa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80105a4:	f04f 33ff 	mov.w	r3, #4294967295
 80105a8:	e116      	b.n	80107d8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80105aa:	887b      	ldrh	r3, [r7, #2]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d109      	bne.n	80105c4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80105b0:	4b8b      	ldr	r3, [pc, #556]	@ (80107e0 <tcp_split_unsent_seg+0x274>)
 80105b2:	f240 3253 	movw	r2, #851	@ 0x353
 80105b6:	498d      	ldr	r1, [pc, #564]	@ (80107ec <tcp_split_unsent_seg+0x280>)
 80105b8:	488b      	ldr	r0, [pc, #556]	@ (80107e8 <tcp_split_unsent_seg+0x27c>)
 80105ba:	f004 fbb9 	bl	8014d30 <iprintf>
    return ERR_VAL;
 80105be:	f06f 0305 	mvn.w	r3, #5
 80105c2:	e109      	b.n	80107d8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	891b      	ldrh	r3, [r3, #8]
 80105c8:	887a      	ldrh	r2, [r7, #2]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d301      	bcc.n	80105d2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80105ce:	2300      	movs	r3, #0
 80105d0:	e102      	b.n	80107d8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80105d6:	887a      	ldrh	r2, [r7, #2]
 80105d8:	429a      	cmp	r2, r3
 80105da:	d906      	bls.n	80105ea <tcp_split_unsent_seg+0x7e>
 80105dc:	4b80      	ldr	r3, [pc, #512]	@ (80107e0 <tcp_split_unsent_seg+0x274>)
 80105de:	f240 325b 	movw	r2, #859	@ 0x35b
 80105e2:	4983      	ldr	r1, [pc, #524]	@ (80107f0 <tcp_split_unsent_seg+0x284>)
 80105e4:	4880      	ldr	r0, [pc, #512]	@ (80107e8 <tcp_split_unsent_seg+0x27c>)
 80105e6:	f004 fba3 	bl	8014d30 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	891b      	ldrh	r3, [r3, #8]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d106      	bne.n	8010600 <tcp_split_unsent_seg+0x94>
 80105f2:	4b7b      	ldr	r3, [pc, #492]	@ (80107e0 <tcp_split_unsent_seg+0x274>)
 80105f4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80105f8:	497e      	ldr	r1, [pc, #504]	@ (80107f4 <tcp_split_unsent_seg+0x288>)
 80105fa:	487b      	ldr	r0, [pc, #492]	@ (80107e8 <tcp_split_unsent_seg+0x27c>)
 80105fc:	f004 fb98 	bl	8014d30 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	7a9b      	ldrb	r3, [r3, #10]
 8010604:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010606:	7bfb      	ldrb	r3, [r7, #15]
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	b2db      	uxtb	r3, r3
 801060c:	f003 0304 	and.w	r3, r3, #4
 8010610:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010612:	697b      	ldr	r3, [r7, #20]
 8010614:	891a      	ldrh	r2, [r3, #8]
 8010616:	887b      	ldrh	r3, [r7, #2]
 8010618:	1ad3      	subs	r3, r2, r3
 801061a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801061c:	7bbb      	ldrb	r3, [r7, #14]
 801061e:	b29a      	uxth	r2, r3
 8010620:	89bb      	ldrh	r3, [r7, #12]
 8010622:	4413      	add	r3, r2
 8010624:	b29b      	uxth	r3, r3
 8010626:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801062a:	4619      	mov	r1, r3
 801062c:	2036      	movs	r0, #54	@ 0x36
 801062e:	f7fb fa2d 	bl	800ba8c <pbuf_alloc>
 8010632:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010634:	693b      	ldr	r3, [r7, #16]
 8010636:	2b00      	cmp	r3, #0
 8010638:	f000 80b7 	beq.w	80107aa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801063c:	697b      	ldr	r3, [r7, #20]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	891a      	ldrh	r2, [r3, #8]
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	891b      	ldrh	r3, [r3, #8]
 8010646:	1ad3      	subs	r3, r2, r3
 8010648:	b29a      	uxth	r2, r3
 801064a:	887b      	ldrh	r3, [r7, #2]
 801064c:	4413      	add	r3, r2
 801064e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	6858      	ldr	r0, [r3, #4]
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	685a      	ldr	r2, [r3, #4]
 8010658:	7bbb      	ldrb	r3, [r7, #14]
 801065a:	18d1      	adds	r1, r2, r3
 801065c:	897b      	ldrh	r3, [r7, #10]
 801065e:	89ba      	ldrh	r2, [r7, #12]
 8010660:	f7fb fef2 	bl	800c448 <pbuf_copy_partial>
 8010664:	4603      	mov	r3, r0
 8010666:	461a      	mov	r2, r3
 8010668:	89bb      	ldrh	r3, [r7, #12]
 801066a:	4293      	cmp	r3, r2
 801066c:	f040 809f 	bne.w	80107ae <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	899b      	ldrh	r3, [r3, #12]
 8010676:	b29b      	uxth	r3, r3
 8010678:	4618      	mov	r0, r3
 801067a:	f7fa f98d 	bl	800a998 <lwip_htons>
 801067e:	4603      	mov	r3, r0
 8010680:	b2db      	uxtb	r3, r3
 8010682:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010686:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010688:	2300      	movs	r3, #0
 801068a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801068c:	7efb      	ldrb	r3, [r7, #27]
 801068e:	f003 0308 	and.w	r3, r3, #8
 8010692:	2b00      	cmp	r3, #0
 8010694:	d007      	beq.n	80106a6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010696:	7efb      	ldrb	r3, [r7, #27]
 8010698:	f023 0308 	bic.w	r3, r3, #8
 801069c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801069e:	7ebb      	ldrb	r3, [r7, #26]
 80106a0:	f043 0308 	orr.w	r3, r3, #8
 80106a4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80106a6:	7efb      	ldrb	r3, [r7, #27]
 80106a8:	f003 0301 	and.w	r3, r3, #1
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d007      	beq.n	80106c0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80106b0:	7efb      	ldrb	r3, [r7, #27]
 80106b2:	f023 0301 	bic.w	r3, r3, #1
 80106b6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80106b8:	7ebb      	ldrb	r3, [r7, #26]
 80106ba:	f043 0301 	orr.w	r3, r3, #1
 80106be:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	68db      	ldr	r3, [r3, #12]
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7fa f97c 	bl	800a9c4 <lwip_htonl>
 80106cc:	4602      	mov	r2, r0
 80106ce:	887b      	ldrh	r3, [r7, #2]
 80106d0:	18d1      	adds	r1, r2, r3
 80106d2:	7eba      	ldrb	r2, [r7, #26]
 80106d4:	7bfb      	ldrb	r3, [r7, #15]
 80106d6:	9300      	str	r3, [sp, #0]
 80106d8:	460b      	mov	r3, r1
 80106da:	6939      	ldr	r1, [r7, #16]
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f7ff fea9 	bl	8010434 <tcp_create_segment>
 80106e2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80106e4:	69fb      	ldr	r3, [r7, #28]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d063      	beq.n	80107b2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	685b      	ldr	r3, [r3, #4]
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7fb fd38 	bl	800c164 <pbuf_clen>
 80106f4:	4603      	mov	r3, r0
 80106f6:	461a      	mov	r2, r3
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80106fe:	1a9b      	subs	r3, r3, r2
 8010700:	b29a      	uxth	r2, r3
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	6858      	ldr	r0, [r3, #4]
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	891a      	ldrh	r2, [r3, #8]
 8010712:	89bb      	ldrh	r3, [r7, #12]
 8010714:	1ad3      	subs	r3, r2, r3
 8010716:	b29b      	uxth	r3, r3
 8010718:	4619      	mov	r1, r3
 801071a:	f7fb fb15 	bl	800bd48 <pbuf_realloc>
  useg->len -= remainder;
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	891a      	ldrh	r2, [r3, #8]
 8010722:	89bb      	ldrh	r3, [r7, #12]
 8010724:	1ad3      	subs	r3, r2, r3
 8010726:	b29a      	uxth	r2, r3
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	68db      	ldr	r3, [r3, #12]
 8010730:	899b      	ldrh	r3, [r3, #12]
 8010732:	b29c      	uxth	r4, r3
 8010734:	7efb      	ldrb	r3, [r7, #27]
 8010736:	b29b      	uxth	r3, r3
 8010738:	4618      	mov	r0, r3
 801073a:	f7fa f92d 	bl	800a998 <lwip_htons>
 801073e:	4603      	mov	r3, r0
 8010740:	461a      	mov	r2, r3
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	68db      	ldr	r3, [r3, #12]
 8010746:	4322      	orrs	r2, r4
 8010748:	b292      	uxth	r2, r2
 801074a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	4618      	mov	r0, r3
 8010752:	f7fb fd07 	bl	800c164 <pbuf_clen>
 8010756:	4603      	mov	r3, r0
 8010758:	461a      	mov	r2, r3
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010760:	4413      	add	r3, r2
 8010762:	b29a      	uxth	r2, r3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801076a:	69fb      	ldr	r3, [r7, #28]
 801076c:	685b      	ldr	r3, [r3, #4]
 801076e:	4618      	mov	r0, r3
 8010770:	f7fb fcf8 	bl	800c164 <pbuf_clen>
 8010774:	4603      	mov	r3, r0
 8010776:	461a      	mov	r2, r3
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801077e:	4413      	add	r3, r2
 8010780:	b29a      	uxth	r2, r3
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	681a      	ldr	r2, [r3, #0]
 801078c:	69fb      	ldr	r3, [r7, #28]
 801078e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	69fa      	ldr	r2, [r7, #28]
 8010794:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010796:	69fb      	ldr	r3, [r7, #28]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d103      	bne.n	80107a6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2200      	movs	r2, #0
 80107a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80107a6:	2300      	movs	r3, #0
 80107a8:	e016      	b.n	80107d8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80107aa:	bf00      	nop
 80107ac:	e002      	b.n	80107b4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80107ae:	bf00      	nop
 80107b0:	e000      	b.n	80107b4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80107b2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d006      	beq.n	80107c8 <tcp_split_unsent_seg+0x25c>
 80107ba:	4b09      	ldr	r3, [pc, #36]	@ (80107e0 <tcp_split_unsent_seg+0x274>)
 80107bc:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80107c0:	490d      	ldr	r1, [pc, #52]	@ (80107f8 <tcp_split_unsent_seg+0x28c>)
 80107c2:	4809      	ldr	r0, [pc, #36]	@ (80107e8 <tcp_split_unsent_seg+0x27c>)
 80107c4:	f004 fab4 	bl	8014d30 <iprintf>
  if (p != NULL) {
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d002      	beq.n	80107d4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80107ce:	6938      	ldr	r0, [r7, #16]
 80107d0:	f7fb fc40 	bl	800c054 <pbuf_free>
  }

  return ERR_MEM;
 80107d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3724      	adds	r7, #36	@ 0x24
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd90      	pop	{r4, r7, pc}
 80107e0:	0801720c 	.word	0x0801720c
 80107e4:	080175a0 	.word	0x080175a0
 80107e8:	08017260 	.word	0x08017260
 80107ec:	080175c4 	.word	0x080175c4
 80107f0:	080175e8 	.word	0x080175e8
 80107f4:	080175f8 	.word	0x080175f8
 80107f8:	08017608 	.word	0x08017608

080107fc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80107fc:	b590      	push	{r4, r7, lr}
 80107fe:	b085      	sub	sp, #20
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d106      	bne.n	8010818 <tcp_send_fin+0x1c>
 801080a:	4b21      	ldr	r3, [pc, #132]	@ (8010890 <tcp_send_fin+0x94>)
 801080c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010810:	4920      	ldr	r1, [pc, #128]	@ (8010894 <tcp_send_fin+0x98>)
 8010812:	4821      	ldr	r0, [pc, #132]	@ (8010898 <tcp_send_fin+0x9c>)
 8010814:	f004 fa8c 	bl	8014d30 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801081c:	2b00      	cmp	r3, #0
 801081e:	d02e      	beq.n	801087e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010824:	60fb      	str	r3, [r7, #12]
 8010826:	e002      	b.n	801082e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d1f8      	bne.n	8010828 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	68db      	ldr	r3, [r3, #12]
 801083a:	899b      	ldrh	r3, [r3, #12]
 801083c:	b29b      	uxth	r3, r3
 801083e:	4618      	mov	r0, r3
 8010840:	f7fa f8aa 	bl	800a998 <lwip_htons>
 8010844:	4603      	mov	r3, r0
 8010846:	b2db      	uxtb	r3, r3
 8010848:	f003 0307 	and.w	r3, r3, #7
 801084c:	2b00      	cmp	r3, #0
 801084e:	d116      	bne.n	801087e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	68db      	ldr	r3, [r3, #12]
 8010854:	899b      	ldrh	r3, [r3, #12]
 8010856:	b29c      	uxth	r4, r3
 8010858:	2001      	movs	r0, #1
 801085a:	f7fa f89d 	bl	800a998 <lwip_htons>
 801085e:	4603      	mov	r3, r0
 8010860:	461a      	mov	r2, r3
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	68db      	ldr	r3, [r3, #12]
 8010866:	4322      	orrs	r2, r4
 8010868:	b292      	uxth	r2, r2
 801086a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	8b5b      	ldrh	r3, [r3, #26]
 8010870:	f043 0320 	orr.w	r3, r3, #32
 8010874:	b29a      	uxth	r2, r3
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801087a:	2300      	movs	r3, #0
 801087c:	e004      	b.n	8010888 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801087e:	2101      	movs	r1, #1
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f000 f80b 	bl	801089c <tcp_enqueue_flags>
 8010886:	4603      	mov	r3, r0
}
 8010888:	4618      	mov	r0, r3
 801088a:	3714      	adds	r7, #20
 801088c:	46bd      	mov	sp, r7
 801088e:	bd90      	pop	{r4, r7, pc}
 8010890:	0801720c 	.word	0x0801720c
 8010894:	08017614 	.word	0x08017614
 8010898:	08017260 	.word	0x08017260

0801089c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b08a      	sub	sp, #40	@ 0x28
 80108a0:	af02      	add	r7, sp, #8
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	460b      	mov	r3, r1
 80108a6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80108a8:	2300      	movs	r3, #0
 80108aa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80108ac:	2300      	movs	r3, #0
 80108ae:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80108b0:	78fb      	ldrb	r3, [r7, #3]
 80108b2:	f003 0303 	and.w	r3, r3, #3
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d106      	bne.n	80108c8 <tcp_enqueue_flags+0x2c>
 80108ba:	4b67      	ldr	r3, [pc, #412]	@ (8010a58 <tcp_enqueue_flags+0x1bc>)
 80108bc:	f240 4211 	movw	r2, #1041	@ 0x411
 80108c0:	4966      	ldr	r1, [pc, #408]	@ (8010a5c <tcp_enqueue_flags+0x1c0>)
 80108c2:	4867      	ldr	r0, [pc, #412]	@ (8010a60 <tcp_enqueue_flags+0x1c4>)
 80108c4:	f004 fa34 	bl	8014d30 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d106      	bne.n	80108dc <tcp_enqueue_flags+0x40>
 80108ce:	4b62      	ldr	r3, [pc, #392]	@ (8010a58 <tcp_enqueue_flags+0x1bc>)
 80108d0:	f240 4213 	movw	r2, #1043	@ 0x413
 80108d4:	4963      	ldr	r1, [pc, #396]	@ (8010a64 <tcp_enqueue_flags+0x1c8>)
 80108d6:	4862      	ldr	r0, [pc, #392]	@ (8010a60 <tcp_enqueue_flags+0x1c4>)
 80108d8:	f004 fa2a 	bl	8014d30 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80108dc:	78fb      	ldrb	r3, [r7, #3]
 80108de:	f003 0302 	and.w	r3, r3, #2
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d001      	beq.n	80108ea <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80108e6:	2301      	movs	r3, #1
 80108e8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80108ea:	7ffb      	ldrb	r3, [r7, #31]
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	f003 0304 	and.w	r3, r3, #4
 80108f4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80108f6:	7dfb      	ldrb	r3, [r7, #23]
 80108f8:	b29b      	uxth	r3, r3
 80108fa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80108fe:	4619      	mov	r1, r3
 8010900:	2036      	movs	r0, #54	@ 0x36
 8010902:	f7fb f8c3 	bl	800ba8c <pbuf_alloc>
 8010906:	6138      	str	r0, [r7, #16]
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d109      	bne.n	8010922 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	8b5b      	ldrh	r3, [r3, #26]
 8010912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010916:	b29a      	uxth	r2, r3
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801091c:	f04f 33ff 	mov.w	r3, #4294967295
 8010920:	e095      	b.n	8010a4e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	895a      	ldrh	r2, [r3, #10]
 8010926:	7dfb      	ldrb	r3, [r7, #23]
 8010928:	b29b      	uxth	r3, r3
 801092a:	429a      	cmp	r2, r3
 801092c:	d206      	bcs.n	801093c <tcp_enqueue_flags+0xa0>
 801092e:	4b4a      	ldr	r3, [pc, #296]	@ (8010a58 <tcp_enqueue_flags+0x1bc>)
 8010930:	f240 4239 	movw	r2, #1081	@ 0x439
 8010934:	494c      	ldr	r1, [pc, #304]	@ (8010a68 <tcp_enqueue_flags+0x1cc>)
 8010936:	484a      	ldr	r0, [pc, #296]	@ (8010a60 <tcp_enqueue_flags+0x1c4>)
 8010938:	f004 f9fa 	bl	8014d30 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010940:	78fa      	ldrb	r2, [r7, #3]
 8010942:	7ffb      	ldrb	r3, [r7, #31]
 8010944:	9300      	str	r3, [sp, #0]
 8010946:	460b      	mov	r3, r1
 8010948:	6939      	ldr	r1, [r7, #16]
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f7ff fd72 	bl	8010434 <tcp_create_segment>
 8010950:	60f8      	str	r0, [r7, #12]
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d109      	bne.n	801096c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	8b5b      	ldrh	r3, [r3, #26]
 801095c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010960:	b29a      	uxth	r2, r3
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010966:	f04f 33ff 	mov.w	r3, #4294967295
 801096a:	e070      	b.n	8010a4e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	f003 0303 	and.w	r3, r3, #3
 8010974:	2b00      	cmp	r3, #0
 8010976:	d006      	beq.n	8010986 <tcp_enqueue_flags+0xea>
 8010978:	4b37      	ldr	r3, [pc, #220]	@ (8010a58 <tcp_enqueue_flags+0x1bc>)
 801097a:	f240 4242 	movw	r2, #1090	@ 0x442
 801097e:	493b      	ldr	r1, [pc, #236]	@ (8010a6c <tcp_enqueue_flags+0x1d0>)
 8010980:	4837      	ldr	r0, [pc, #220]	@ (8010a60 <tcp_enqueue_flags+0x1c4>)
 8010982:	f004 f9d5 	bl	8014d30 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	891b      	ldrh	r3, [r3, #8]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d006      	beq.n	801099c <tcp_enqueue_flags+0x100>
 801098e:	4b32      	ldr	r3, [pc, #200]	@ (8010a58 <tcp_enqueue_flags+0x1bc>)
 8010990:	f240 4243 	movw	r2, #1091	@ 0x443
 8010994:	4936      	ldr	r1, [pc, #216]	@ (8010a70 <tcp_enqueue_flags+0x1d4>)
 8010996:	4832      	ldr	r0, [pc, #200]	@ (8010a60 <tcp_enqueue_flags+0x1c4>)
 8010998:	f004 f9ca 	bl	8014d30 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d103      	bne.n	80109ac <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	68fa      	ldr	r2, [r7, #12]
 80109a8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80109aa:	e00d      	b.n	80109c8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109b0:	61bb      	str	r3, [r7, #24]
 80109b2:	e002      	b.n	80109ba <tcp_enqueue_flags+0x11e>
 80109b4:	69bb      	ldr	r3, [r7, #24]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	61bb      	str	r3, [r7, #24]
 80109ba:	69bb      	ldr	r3, [r7, #24]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d1f8      	bne.n	80109b4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80109c2:	69bb      	ldr	r3, [r7, #24]
 80109c4:	68fa      	ldr	r2, [r7, #12]
 80109c6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2200      	movs	r2, #0
 80109cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80109d0:	78fb      	ldrb	r3, [r7, #3]
 80109d2:	f003 0302 	and.w	r3, r3, #2
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d104      	bne.n	80109e4 <tcp_enqueue_flags+0x148>
 80109da:	78fb      	ldrb	r3, [r7, #3]
 80109dc:	f003 0301 	and.w	r3, r3, #1
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d004      	beq.n	80109ee <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80109e8:	1c5a      	adds	r2, r3, #1
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80109ee:	78fb      	ldrb	r3, [r7, #3]
 80109f0:	f003 0301 	and.w	r3, r3, #1
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d006      	beq.n	8010a06 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	8b5b      	ldrh	r3, [r3, #26]
 80109fc:	f043 0320 	orr.w	r3, r3, #32
 8010a00:	b29a      	uxth	r2, r3
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	685b      	ldr	r3, [r3, #4]
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7fb fbaa 	bl	800c164 <pbuf_clen>
 8010a10:	4603      	mov	r3, r0
 8010a12:	461a      	mov	r2, r3
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010a1a:	4413      	add	r3, r2
 8010a1c:	b29a      	uxth	r2, r3
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00e      	beq.n	8010a4c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d10a      	bne.n	8010a4c <tcp_enqueue_flags+0x1b0>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d106      	bne.n	8010a4c <tcp_enqueue_flags+0x1b0>
 8010a3e:	4b06      	ldr	r3, [pc, #24]	@ (8010a58 <tcp_enqueue_flags+0x1bc>)
 8010a40:	f240 4265 	movw	r2, #1125	@ 0x465
 8010a44:	490b      	ldr	r1, [pc, #44]	@ (8010a74 <tcp_enqueue_flags+0x1d8>)
 8010a46:	4806      	ldr	r0, [pc, #24]	@ (8010a60 <tcp_enqueue_flags+0x1c4>)
 8010a48:	f004 f972 	bl	8014d30 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010a4c:	2300      	movs	r3, #0
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3720      	adds	r7, #32
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	bf00      	nop
 8010a58:	0801720c 	.word	0x0801720c
 8010a5c:	08017630 	.word	0x08017630
 8010a60:	08017260 	.word	0x08017260
 8010a64:	08017688 	.word	0x08017688
 8010a68:	080176a8 	.word	0x080176a8
 8010a6c:	080176e4 	.word	0x080176e4
 8010a70:	080176fc 	.word	0x080176fc
 8010a74:	08017728 	.word	0x08017728

08010a78 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010a78:	b5b0      	push	{r4, r5, r7, lr}
 8010a7a:	b08a      	sub	sp, #40	@ 0x28
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d106      	bne.n	8010a94 <tcp_output+0x1c>
 8010a86:	4b8a      	ldr	r3, [pc, #552]	@ (8010cb0 <tcp_output+0x238>)
 8010a88:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010a8c:	4989      	ldr	r1, [pc, #548]	@ (8010cb4 <tcp_output+0x23c>)
 8010a8e:	488a      	ldr	r0, [pc, #552]	@ (8010cb8 <tcp_output+0x240>)
 8010a90:	f004 f94e 	bl	8014d30 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	7d1b      	ldrb	r3, [r3, #20]
 8010a98:	2b01      	cmp	r3, #1
 8010a9a:	d106      	bne.n	8010aaa <tcp_output+0x32>
 8010a9c:	4b84      	ldr	r3, [pc, #528]	@ (8010cb0 <tcp_output+0x238>)
 8010a9e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010aa2:	4986      	ldr	r1, [pc, #536]	@ (8010cbc <tcp_output+0x244>)
 8010aa4:	4884      	ldr	r0, [pc, #528]	@ (8010cb8 <tcp_output+0x240>)
 8010aa6:	f004 f943 	bl	8014d30 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010aaa:	4b85      	ldr	r3, [pc, #532]	@ (8010cc0 <tcp_output+0x248>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	d101      	bne.n	8010ab8 <tcp_output+0x40>
    return ERR_OK;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	e1ce      	b.n	8010e56 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010ac4:	4293      	cmp	r3, r2
 8010ac6:	bf28      	it	cs
 8010ac8:	4613      	movcs	r3, r2
 8010aca:	b29b      	uxth	r3, r3
 8010acc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ad2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d10b      	bne.n	8010af2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	8b5b      	ldrh	r3, [r3, #26]
 8010ade:	f003 0302 	and.w	r3, r3, #2
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	f000 81aa 	beq.w	8010e3c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f000 fdcb 	bl	8011684 <tcp_send_empty_ack>
 8010aee:	4603      	mov	r3, r0
 8010af0:	e1b1      	b.n	8010e56 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010af2:	6879      	ldr	r1, [r7, #4]
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	3304      	adds	r3, #4
 8010af8:	461a      	mov	r2, r3
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f7ff fc7e 	bl	80103fc <tcp_route>
 8010b00:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d102      	bne.n	8010b0e <tcp_output+0x96>
    return ERR_RTE;
 8010b08:	f06f 0303 	mvn.w	r3, #3
 8010b0c:	e1a3      	b.n	8010e56 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d003      	beq.n	8010b1c <tcp_output+0xa4>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d111      	bne.n	8010b40 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d002      	beq.n	8010b28 <tcp_output+0xb0>
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	3304      	adds	r3, #4
 8010b26:	e000      	b.n	8010b2a <tcp_output+0xb2>
 8010b28:	2300      	movs	r3, #0
 8010b2a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010b2c:	693b      	ldr	r3, [r7, #16]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d102      	bne.n	8010b38 <tcp_output+0xc0>
      return ERR_RTE;
 8010b32:	f06f 0303 	mvn.w	r3, #3
 8010b36:	e18e      	b.n	8010e56 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	681a      	ldr	r2, [r3, #0]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b42:	68db      	ldr	r3, [r3, #12]
 8010b44:	685b      	ldr	r3, [r3, #4]
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7f9 ff3c 	bl	800a9c4 <lwip_htonl>
 8010b4c:	4602      	mov	r2, r0
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b52:	1ad3      	subs	r3, r2, r3
 8010b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b56:	8912      	ldrh	r2, [r2, #8]
 8010b58:	4413      	add	r3, r2
 8010b5a:	69ba      	ldr	r2, [r7, #24]
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d227      	bcs.n	8010bb0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010b66:	461a      	mov	r2, r3
 8010b68:	69bb      	ldr	r3, [r7, #24]
 8010b6a:	4293      	cmp	r3, r2
 8010b6c:	d114      	bne.n	8010b98 <tcp_output+0x120>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d110      	bne.n	8010b98 <tcp_output+0x120>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d10b      	bne.n	8010b98 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2200      	movs	r2, #0
 8010b84:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2201      	movs	r2, #1
 8010b8c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2200      	movs	r2, #0
 8010b94:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	8b5b      	ldrh	r3, [r3, #26]
 8010b9c:	f003 0302 	and.w	r3, r3, #2
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	f000 814d 	beq.w	8010e40 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f000 fd6c 	bl	8011684 <tcp_send_empty_ack>
 8010bac:	4603      	mov	r3, r0
 8010bae:	e152      	b.n	8010e56 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bbc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010bbe:	6a3b      	ldr	r3, [r7, #32]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	f000 811c 	beq.w	8010dfe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010bc6:	e002      	b.n	8010bce <tcp_output+0x156>
 8010bc8:	6a3b      	ldr	r3, [r7, #32]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	623b      	str	r3, [r7, #32]
 8010bce:	6a3b      	ldr	r3, [r7, #32]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d1f8      	bne.n	8010bc8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010bd6:	e112      	b.n	8010dfe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bda:	68db      	ldr	r3, [r3, #12]
 8010bdc:	899b      	ldrh	r3, [r3, #12]
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7f9 fed9 	bl	800a998 <lwip_htons>
 8010be6:	4603      	mov	r3, r0
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	f003 0304 	and.w	r3, r3, #4
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d006      	beq.n	8010c00 <tcp_output+0x188>
 8010bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8010cb0 <tcp_output+0x238>)
 8010bf4:	f240 5236 	movw	r2, #1334	@ 0x536
 8010bf8:	4932      	ldr	r1, [pc, #200]	@ (8010cc4 <tcp_output+0x24c>)
 8010bfa:	482f      	ldr	r0, [pc, #188]	@ (8010cb8 <tcp_output+0x240>)
 8010bfc:	f004 f898 	bl	8014d30 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d01f      	beq.n	8010c48 <tcp_output+0x1d0>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	8b5b      	ldrh	r3, [r3, #26]
 8010c0c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d119      	bne.n	8010c48 <tcp_output+0x1d0>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d00b      	beq.n	8010c34 <tcp_output+0x1bc>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d110      	bne.n	8010c48 <tcp_output+0x1d0>
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c2a:	891a      	ldrh	r2, [r3, #8]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d209      	bcs.n	8010c48 <tcp_output+0x1d0>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d004      	beq.n	8010c48 <tcp_output+0x1d0>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010c44:	2b08      	cmp	r3, #8
 8010c46:	d901      	bls.n	8010c4c <tcp_output+0x1d4>
 8010c48:	2301      	movs	r3, #1
 8010c4a:	e000      	b.n	8010c4e <tcp_output+0x1d6>
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d106      	bne.n	8010c60 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	8b5b      	ldrh	r3, [r3, #26]
 8010c56:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	f000 80e4 	beq.w	8010e28 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	7d1b      	ldrb	r3, [r3, #20]
 8010c64:	2b02      	cmp	r3, #2
 8010c66:	d00d      	beq.n	8010c84 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c6a:	68db      	ldr	r3, [r3, #12]
 8010c6c:	899b      	ldrh	r3, [r3, #12]
 8010c6e:	b29c      	uxth	r4, r3
 8010c70:	2010      	movs	r0, #16
 8010c72:	f7f9 fe91 	bl	800a998 <lwip_htons>
 8010c76:	4603      	mov	r3, r0
 8010c78:	461a      	mov	r2, r3
 8010c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c7c:	68db      	ldr	r3, [r3, #12]
 8010c7e:	4322      	orrs	r2, r4
 8010c80:	b292      	uxth	r2, r2
 8010c82:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010c84:	697a      	ldr	r2, [r7, #20]
 8010c86:	6879      	ldr	r1, [r7, #4]
 8010c88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010c8a:	f000 f909 	bl	8010ea0 <tcp_output_segment>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d016      	beq.n	8010cc8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	8b5b      	ldrh	r3, [r3, #26]
 8010c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ca2:	b29a      	uxth	r2, r3
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	835a      	strh	r2, [r3, #26]
      return err;
 8010ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cac:	e0d3      	b.n	8010e56 <tcp_output+0x3de>
 8010cae:	bf00      	nop
 8010cb0:	0801720c 	.word	0x0801720c
 8010cb4:	08017750 	.word	0x08017750
 8010cb8:	08017260 	.word	0x08017260
 8010cbc:	08017768 	.word	0x08017768
 8010cc0:	2000b2b0 	.word	0x2000b2b0
 8010cc4:	08017790 	.word	0x08017790
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cca:	681a      	ldr	r2, [r3, #0]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	7d1b      	ldrb	r3, [r3, #20]
 8010cd4:	2b02      	cmp	r3, #2
 8010cd6:	d006      	beq.n	8010ce6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	8b5b      	ldrh	r3, [r3, #26]
 8010cdc:	f023 0303 	bic.w	r3, r3, #3
 8010ce0:	b29a      	uxth	r2, r3
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ce8:	68db      	ldr	r3, [r3, #12]
 8010cea:	685b      	ldr	r3, [r3, #4]
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7f9 fe69 	bl	800a9c4 <lwip_htonl>
 8010cf2:	4604      	mov	r4, r0
 8010cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cf6:	891b      	ldrh	r3, [r3, #8]
 8010cf8:	461d      	mov	r5, r3
 8010cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cfc:	68db      	ldr	r3, [r3, #12]
 8010cfe:	899b      	ldrh	r3, [r3, #12]
 8010d00:	b29b      	uxth	r3, r3
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7f9 fe48 	bl	800a998 <lwip_htons>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	b2db      	uxtb	r3, r3
 8010d0c:	f003 0303 	and.w	r3, r3, #3
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d001      	beq.n	8010d18 <tcp_output+0x2a0>
 8010d14:	2301      	movs	r3, #1
 8010d16:	e000      	b.n	8010d1a <tcp_output+0x2a2>
 8010d18:	2300      	movs	r3, #0
 8010d1a:	442b      	add	r3, r5
 8010d1c:	4423      	add	r3, r4
 8010d1e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	1ad3      	subs	r3, r2, r3
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	da02      	bge.n	8010d32 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	68ba      	ldr	r2, [r7, #8]
 8010d30:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d34:	891b      	ldrh	r3, [r3, #8]
 8010d36:	461c      	mov	r4, r3
 8010d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d3a:	68db      	ldr	r3, [r3, #12]
 8010d3c:	899b      	ldrh	r3, [r3, #12]
 8010d3e:	b29b      	uxth	r3, r3
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7f9 fe29 	bl	800a998 <lwip_htons>
 8010d46:	4603      	mov	r3, r0
 8010d48:	b2db      	uxtb	r3, r3
 8010d4a:	f003 0303 	and.w	r3, r3, #3
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d001      	beq.n	8010d56 <tcp_output+0x2de>
 8010d52:	2301      	movs	r3, #1
 8010d54:	e000      	b.n	8010d58 <tcp_output+0x2e0>
 8010d56:	2300      	movs	r3, #0
 8010d58:	4423      	add	r3, r4
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d049      	beq.n	8010df2 <tcp_output+0x37a>
      seg->next = NULL;
 8010d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d60:	2200      	movs	r2, #0
 8010d62:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d105      	bne.n	8010d78 <tcp_output+0x300>
        pcb->unacked = seg;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d70:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8010d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d74:	623b      	str	r3, [r7, #32]
 8010d76:	e03f      	b.n	8010df8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d7a:	68db      	ldr	r3, [r3, #12]
 8010d7c:	685b      	ldr	r3, [r3, #4]
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7f9 fe20 	bl	800a9c4 <lwip_htonl>
 8010d84:	4604      	mov	r4, r0
 8010d86:	6a3b      	ldr	r3, [r7, #32]
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	685b      	ldr	r3, [r3, #4]
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f7f9 fe19 	bl	800a9c4 <lwip_htonl>
 8010d92:	4603      	mov	r3, r0
 8010d94:	1ae3      	subs	r3, r4, r3
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	da24      	bge.n	8010de4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	3370      	adds	r3, #112	@ 0x70
 8010d9e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010da0:	e002      	b.n	8010da8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010da2:	69fb      	ldr	r3, [r7, #28]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010da8:	69fb      	ldr	r3, [r7, #28]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d011      	beq.n	8010dd4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010db0:	69fb      	ldr	r3, [r7, #28]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	68db      	ldr	r3, [r3, #12]
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7f9 fe03 	bl	800a9c4 <lwip_htonl>
 8010dbe:	4604      	mov	r4, r0
 8010dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	685b      	ldr	r3, [r3, #4]
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7f9 fdfc 	bl	800a9c4 <lwip_htonl>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	dbe6      	blt.n	8010da2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010dd4:	69fb      	ldr	r3, [r7, #28]
 8010dd6:	681a      	ldr	r2, [r3, #0]
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dda:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010ddc:	69fb      	ldr	r3, [r7, #28]
 8010dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010de0:	601a      	str	r2, [r3, #0]
 8010de2:	e009      	b.n	8010df8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010de4:	6a3b      	ldr	r3, [r7, #32]
 8010de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010de8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010dea:	6a3b      	ldr	r3, [r7, #32]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	623b      	str	r3, [r7, #32]
 8010df0:	e002      	b.n	8010df8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010df2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010df4:	f7fc fc45 	bl	800d682 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8010dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d012      	beq.n	8010e2a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e06:	68db      	ldr	r3, [r3, #12]
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7f9 fdda 	bl	800a9c4 <lwip_htonl>
 8010e10:	4602      	mov	r2, r0
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e16:	1ad3      	subs	r3, r2, r3
 8010e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e1a:	8912      	ldrh	r2, [r2, #8]
 8010e1c:	4413      	add	r3, r2
  while (seg != NULL &&
 8010e1e:	69ba      	ldr	r2, [r7, #24]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	f4bf aed9 	bcs.w	8010bd8 <tcp_output+0x160>
 8010e26:	e000      	b.n	8010e2a <tcp_output+0x3b2>
      break;
 8010e28:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d108      	bne.n	8010e44 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2200      	movs	r2, #0
 8010e36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8010e3a:	e004      	b.n	8010e46 <tcp_output+0x3ce>
    goto output_done;
 8010e3c:	bf00      	nop
 8010e3e:	e002      	b.n	8010e46 <tcp_output+0x3ce>
    goto output_done;
 8010e40:	bf00      	nop
 8010e42:	e000      	b.n	8010e46 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010e44:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	8b5b      	ldrh	r3, [r3, #26]
 8010e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010e4e:	b29a      	uxth	r2, r3
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010e54:	2300      	movs	r3, #0
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3728      	adds	r7, #40	@ 0x28
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8010e5e:	bf00      	nop

08010e60 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b082      	sub	sp, #8
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d106      	bne.n	8010e7c <tcp_output_segment_busy+0x1c>
 8010e6e:	4b09      	ldr	r3, [pc, #36]	@ (8010e94 <tcp_output_segment_busy+0x34>)
 8010e70:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010e74:	4908      	ldr	r1, [pc, #32]	@ (8010e98 <tcp_output_segment_busy+0x38>)
 8010e76:	4809      	ldr	r0, [pc, #36]	@ (8010e9c <tcp_output_segment_busy+0x3c>)
 8010e78:	f003 ff5a 	bl	8014d30 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	7b9b      	ldrb	r3, [r3, #14]
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d001      	beq.n	8010e8a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010e86:	2301      	movs	r3, #1
 8010e88:	e000      	b.n	8010e8c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010e8a:	2300      	movs	r3, #0
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3708      	adds	r7, #8
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}
 8010e94:	0801720c 	.word	0x0801720c
 8010e98:	080177a8 	.word	0x080177a8
 8010e9c:	08017260 	.word	0x08017260

08010ea0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010ea0:	b5b0      	push	{r4, r5, r7, lr}
 8010ea2:	b08c      	sub	sp, #48	@ 0x30
 8010ea4:	af04      	add	r7, sp, #16
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	60b9      	str	r1, [r7, #8]
 8010eaa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d106      	bne.n	8010ec0 <tcp_output_segment+0x20>
 8010eb2:	4b64      	ldr	r3, [pc, #400]	@ (8011044 <tcp_output_segment+0x1a4>)
 8010eb4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8010eb8:	4963      	ldr	r1, [pc, #396]	@ (8011048 <tcp_output_segment+0x1a8>)
 8010eba:	4864      	ldr	r0, [pc, #400]	@ (801104c <tcp_output_segment+0x1ac>)
 8010ebc:	f003 ff38 	bl	8014d30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d106      	bne.n	8010ed4 <tcp_output_segment+0x34>
 8010ec6:	4b5f      	ldr	r3, [pc, #380]	@ (8011044 <tcp_output_segment+0x1a4>)
 8010ec8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8010ecc:	4960      	ldr	r1, [pc, #384]	@ (8011050 <tcp_output_segment+0x1b0>)
 8010ece:	485f      	ldr	r0, [pc, #380]	@ (801104c <tcp_output_segment+0x1ac>)
 8010ed0:	f003 ff2e 	bl	8014d30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d106      	bne.n	8010ee8 <tcp_output_segment+0x48>
 8010eda:	4b5a      	ldr	r3, [pc, #360]	@ (8011044 <tcp_output_segment+0x1a4>)
 8010edc:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8010ee0:	495c      	ldr	r1, [pc, #368]	@ (8011054 <tcp_output_segment+0x1b4>)
 8010ee2:	485a      	ldr	r0, [pc, #360]	@ (801104c <tcp_output_segment+0x1ac>)
 8010ee4:	f003 ff24 	bl	8014d30 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010ee8:	68f8      	ldr	r0, [r7, #12]
 8010eea:	f7ff ffb9 	bl	8010e60 <tcp_output_segment_busy>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d001      	beq.n	8010ef8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	e0a1      	b.n	801103c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	68dc      	ldr	r4, [r3, #12]
 8010f00:	4610      	mov	r0, r2
 8010f02:	f7f9 fd5f 	bl	800a9c4 <lwip_htonl>
 8010f06:	4603      	mov	r3, r0
 8010f08:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	68dc      	ldr	r4, [r3, #12]
 8010f12:	4610      	mov	r0, r2
 8010f14:	f7f9 fd40 	bl	800a998 <lwip_htons>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f20:	68ba      	ldr	r2, [r7, #8]
 8010f22:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010f24:	441a      	add	r2, r3
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	68db      	ldr	r3, [r3, #12]
 8010f2e:	3314      	adds	r3, #20
 8010f30:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	7a9b      	ldrb	r3, [r3, #10]
 8010f36:	f003 0301 	and.w	r3, r3, #1
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d015      	beq.n	8010f6a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	3304      	adds	r3, #4
 8010f42:	461a      	mov	r2, r3
 8010f44:	6879      	ldr	r1, [r7, #4]
 8010f46:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8010f4a:	f7fc fe91 	bl	800dc70 <tcp_eff_send_mss_netif>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010f52:	8b7b      	ldrh	r3, [r7, #26]
 8010f54:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7f9 fd33 	bl	800a9c4 <lwip_htonl>
 8010f5e:	4602      	mov	r2, r0
 8010f60:	69fb      	ldr	r3, [r7, #28]
 8010f62:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010f64:	69fb      	ldr	r3, [r7, #28]
 8010f66:	3304      	adds	r3, #4
 8010f68:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	da02      	bge.n	8010f7a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	2200      	movs	r2, #0
 8010f78:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d10c      	bne.n	8010f9c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010f82:	4b35      	ldr	r3, [pc, #212]	@ (8011058 <tcp_output_segment+0x1b8>)
 8010f84:	681a      	ldr	r2, [r3, #0]
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	68db      	ldr	r3, [r3, #12]
 8010f8e:	685b      	ldr	r3, [r3, #4]
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7f9 fd17 	bl	800a9c4 <lwip_htonl>
 8010f96:	4602      	mov	r2, r0
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	68da      	ldr	r2, [r3, #12]
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	685b      	ldr	r3, [r3, #4]
 8010fa4:	685b      	ldr	r3, [r3, #4]
 8010fa6:	1ad3      	subs	r3, r2, r3
 8010fa8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	685b      	ldr	r3, [r3, #4]
 8010fae:	8959      	ldrh	r1, [r3, #10]
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	685b      	ldr	r3, [r3, #4]
 8010fb4:	8b3a      	ldrh	r2, [r7, #24]
 8010fb6:	1a8a      	subs	r2, r1, r2
 8010fb8:	b292      	uxth	r2, r2
 8010fba:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	8919      	ldrh	r1, [r3, #8]
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	685b      	ldr	r3, [r3, #4]
 8010fc6:	8b3a      	ldrh	r2, [r7, #24]
 8010fc8:	1a8a      	subs	r2, r1, r2
 8010fca:	b292      	uxth	r2, r2
 8010fcc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	685b      	ldr	r3, [r3, #4]
 8010fd2:	68fa      	ldr	r2, [r7, #12]
 8010fd4:	68d2      	ldr	r2, [r2, #12]
 8010fd6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	741a      	strb	r2, [r3, #16]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	68da      	ldr	r2, [r3, #12]
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	7a9b      	ldrb	r3, [r3, #10]
 8010fec:	f003 0301 	and.w	r3, r3, #1
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d001      	beq.n	8010ff8 <tcp_output_segment+0x158>
 8010ff4:	2318      	movs	r3, #24
 8010ff6:	e000      	b.n	8010ffa <tcp_output_segment+0x15a>
 8010ff8:	2314      	movs	r3, #20
 8010ffa:	4413      	add	r3, r2
 8010ffc:	69fa      	ldr	r2, [r7, #28]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d006      	beq.n	8011010 <tcp_output_segment+0x170>
 8011002:	4b10      	ldr	r3, [pc, #64]	@ (8011044 <tcp_output_segment+0x1a4>)
 8011004:	f240 621c 	movw	r2, #1564	@ 0x61c
 8011008:	4914      	ldr	r1, [pc, #80]	@ (801105c <tcp_output_segment+0x1bc>)
 801100a:	4810      	ldr	r0, [pc, #64]	@ (801104c <tcp_output_segment+0x1ac>)
 801100c:	f003 fe90 	bl	8014d30 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	6858      	ldr	r0, [r3, #4]
 8011014:	68b9      	ldr	r1, [r7, #8]
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	1d1c      	adds	r4, r3, #4
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	7add      	ldrb	r5, [r3, #11]
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	7a9b      	ldrb	r3, [r3, #10]
 8011022:	687a      	ldr	r2, [r7, #4]
 8011024:	9202      	str	r2, [sp, #8]
 8011026:	2206      	movs	r2, #6
 8011028:	9201      	str	r2, [sp, #4]
 801102a:	9300      	str	r3, [sp, #0]
 801102c:	462b      	mov	r3, r5
 801102e:	4622      	mov	r2, r4
 8011030:	f002 fd50 	bl	8013ad4 <ip4_output_if>
 8011034:	4603      	mov	r3, r0
 8011036:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011038:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801103c:	4618      	mov	r0, r3
 801103e:	3720      	adds	r7, #32
 8011040:	46bd      	mov	sp, r7
 8011042:	bdb0      	pop	{r4, r5, r7, pc}
 8011044:	0801720c 	.word	0x0801720c
 8011048:	080177d0 	.word	0x080177d0
 801104c:	08017260 	.word	0x08017260
 8011050:	080177f0 	.word	0x080177f0
 8011054:	08017810 	.word	0x08017810
 8011058:	2000b264 	.word	0x2000b264
 801105c:	08017834 	.word	0x08017834

08011060 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011060:	b5b0      	push	{r4, r5, r7, lr}
 8011062:	b084      	sub	sp, #16
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d106      	bne.n	801107c <tcp_rexmit_rto_prepare+0x1c>
 801106e:	4b31      	ldr	r3, [pc, #196]	@ (8011134 <tcp_rexmit_rto_prepare+0xd4>)
 8011070:	f240 6263 	movw	r2, #1635	@ 0x663
 8011074:	4930      	ldr	r1, [pc, #192]	@ (8011138 <tcp_rexmit_rto_prepare+0xd8>)
 8011076:	4831      	ldr	r0, [pc, #196]	@ (801113c <tcp_rexmit_rto_prepare+0xdc>)
 8011078:	f003 fe5a 	bl	8014d30 <iprintf>

  if (pcb->unacked == NULL) {
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011080:	2b00      	cmp	r3, #0
 8011082:	d102      	bne.n	801108a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011084:	f06f 0305 	mvn.w	r3, #5
 8011088:	e050      	b.n	801112c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801108e:	60fb      	str	r3, [r7, #12]
 8011090:	e00b      	b.n	80110aa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011092:	68f8      	ldr	r0, [r7, #12]
 8011094:	f7ff fee4 	bl	8010e60 <tcp_output_segment_busy>
 8011098:	4603      	mov	r3, r0
 801109a:	2b00      	cmp	r3, #0
 801109c:	d002      	beq.n	80110a4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801109e:	f06f 0305 	mvn.w	r3, #5
 80110a2:	e043      	b.n	801112c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	60fb      	str	r3, [r7, #12]
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d1ef      	bne.n	8011092 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80110b2:	68f8      	ldr	r0, [r7, #12]
 80110b4:	f7ff fed4 	bl	8010e60 <tcp_output_segment_busy>
 80110b8:	4603      	mov	r3, r0
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d002      	beq.n	80110c4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80110be:	f06f 0305 	mvn.w	r3, #5
 80110c2:	e033      	b.n	801112c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2200      	movs	r2, #0
 80110d8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	8b5b      	ldrh	r3, [r3, #26]
 80110de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80110e2:	b29a      	uxth	r2, r3
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	685b      	ldr	r3, [r3, #4]
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7f9 fc68 	bl	800a9c4 <lwip_htonl>
 80110f4:	4604      	mov	r4, r0
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	891b      	ldrh	r3, [r3, #8]
 80110fa:	461d      	mov	r5, r3
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	68db      	ldr	r3, [r3, #12]
 8011100:	899b      	ldrh	r3, [r3, #12]
 8011102:	b29b      	uxth	r3, r3
 8011104:	4618      	mov	r0, r3
 8011106:	f7f9 fc47 	bl	800a998 <lwip_htons>
 801110a:	4603      	mov	r3, r0
 801110c:	b2db      	uxtb	r3, r3
 801110e:	f003 0303 	and.w	r3, r3, #3
 8011112:	2b00      	cmp	r3, #0
 8011114:	d001      	beq.n	801111a <tcp_rexmit_rto_prepare+0xba>
 8011116:	2301      	movs	r3, #1
 8011118:	e000      	b.n	801111c <tcp_rexmit_rto_prepare+0xbc>
 801111a:	2300      	movs	r3, #0
 801111c:	442b      	add	r3, r5
 801111e:	18e2      	adds	r2, r4, r3
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2200      	movs	r2, #0
 8011128:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801112a:	2300      	movs	r3, #0
}
 801112c:	4618      	mov	r0, r3
 801112e:	3710      	adds	r7, #16
 8011130:	46bd      	mov	sp, r7
 8011132:	bdb0      	pop	{r4, r5, r7, pc}
 8011134:	0801720c 	.word	0x0801720c
 8011138:	08017848 	.word	0x08017848
 801113c:	08017260 	.word	0x08017260

08011140 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d106      	bne.n	801115c <tcp_rexmit_rto_commit+0x1c>
 801114e:	4b0d      	ldr	r3, [pc, #52]	@ (8011184 <tcp_rexmit_rto_commit+0x44>)
 8011150:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011154:	490c      	ldr	r1, [pc, #48]	@ (8011188 <tcp_rexmit_rto_commit+0x48>)
 8011156:	480d      	ldr	r0, [pc, #52]	@ (801118c <tcp_rexmit_rto_commit+0x4c>)
 8011158:	f003 fdea 	bl	8014d30 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011162:	2bff      	cmp	r3, #255	@ 0xff
 8011164:	d007      	beq.n	8011176 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801116c:	3301      	adds	r3, #1
 801116e:	b2da      	uxtb	r2, r3
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f7ff fc7e 	bl	8010a78 <tcp_output>
}
 801117c:	bf00      	nop
 801117e:	3708      	adds	r7, #8
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	0801720c 	.word	0x0801720c
 8011188:	0801786c 	.word	0x0801786c
 801118c:	08017260 	.word	0x08017260

08011190 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b082      	sub	sp, #8
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d106      	bne.n	80111ac <tcp_rexmit_rto+0x1c>
 801119e:	4b0a      	ldr	r3, [pc, #40]	@ (80111c8 <tcp_rexmit_rto+0x38>)
 80111a0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80111a4:	4909      	ldr	r1, [pc, #36]	@ (80111cc <tcp_rexmit_rto+0x3c>)
 80111a6:	480a      	ldr	r0, [pc, #40]	@ (80111d0 <tcp_rexmit_rto+0x40>)
 80111a8:	f003 fdc2 	bl	8014d30 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f7ff ff57 	bl	8011060 <tcp_rexmit_rto_prepare>
 80111b2:	4603      	mov	r3, r0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d102      	bne.n	80111be <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f7ff ffc1 	bl	8011140 <tcp_rexmit_rto_commit>
  }
}
 80111be:	bf00      	nop
 80111c0:	3708      	adds	r7, #8
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop
 80111c8:	0801720c 	.word	0x0801720c
 80111cc:	08017890 	.word	0x08017890
 80111d0:	08017260 	.word	0x08017260

080111d4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80111d4:	b590      	push	{r4, r7, lr}
 80111d6:	b085      	sub	sp, #20
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d106      	bne.n	80111f0 <tcp_rexmit+0x1c>
 80111e2:	4b2f      	ldr	r3, [pc, #188]	@ (80112a0 <tcp_rexmit+0xcc>)
 80111e4:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80111e8:	492e      	ldr	r1, [pc, #184]	@ (80112a4 <tcp_rexmit+0xd0>)
 80111ea:	482f      	ldr	r0, [pc, #188]	@ (80112a8 <tcp_rexmit+0xd4>)
 80111ec:	f003 fda0 	bl	8014d30 <iprintf>

  if (pcb->unacked == NULL) {
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d102      	bne.n	80111fe <tcp_rexmit+0x2a>
    return ERR_VAL;
 80111f8:	f06f 0305 	mvn.w	r3, #5
 80111fc:	e04c      	b.n	8011298 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011202:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011204:	68b8      	ldr	r0, [r7, #8]
 8011206:	f7ff fe2b 	bl	8010e60 <tcp_output_segment_busy>
 801120a:	4603      	mov	r3, r0
 801120c:	2b00      	cmp	r3, #0
 801120e:	d002      	beq.n	8011216 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011210:	f06f 0305 	mvn.w	r3, #5
 8011214:	e040      	b.n	8011298 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	681a      	ldr	r2, [r3, #0]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	336c      	adds	r3, #108	@ 0x6c
 8011222:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011224:	e002      	b.n	801122c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d011      	beq.n	8011258 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	68db      	ldr	r3, [r3, #12]
 801123a:	685b      	ldr	r3, [r3, #4]
 801123c:	4618      	mov	r0, r3
 801123e:	f7f9 fbc1 	bl	800a9c4 <lwip_htonl>
 8011242:	4604      	mov	r4, r0
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	68db      	ldr	r3, [r3, #12]
 8011248:	685b      	ldr	r3, [r3, #4]
 801124a:	4618      	mov	r0, r3
 801124c:	f7f9 fbba 	bl	800a9c4 <lwip_htonl>
 8011250:	4603      	mov	r3, r0
 8011252:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011254:	2b00      	cmp	r3, #0
 8011256:	dbe6      	blt.n	8011226 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681a      	ldr	r2, [r3, #0]
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	68ba      	ldr	r2, [r7, #8]
 8011264:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d103      	bne.n	8011276 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2200      	movs	r2, #0
 8011272:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801127c:	2bff      	cmp	r3, #255	@ 0xff
 801127e:	d007      	beq.n	8011290 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011286:	3301      	adds	r3, #1
 8011288:	b2da      	uxtb	r2, r3
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2200      	movs	r2, #0
 8011294:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011296:	2300      	movs	r3, #0
}
 8011298:	4618      	mov	r0, r3
 801129a:	3714      	adds	r7, #20
 801129c:	46bd      	mov	sp, r7
 801129e:	bd90      	pop	{r4, r7, pc}
 80112a0:	0801720c 	.word	0x0801720c
 80112a4:	080178ac 	.word	0x080178ac
 80112a8:	08017260 	.word	0x08017260

080112ac <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b082      	sub	sp, #8
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d106      	bne.n	80112c8 <tcp_rexmit_fast+0x1c>
 80112ba:	4b2a      	ldr	r3, [pc, #168]	@ (8011364 <tcp_rexmit_fast+0xb8>)
 80112bc:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80112c0:	4929      	ldr	r1, [pc, #164]	@ (8011368 <tcp_rexmit_fast+0xbc>)
 80112c2:	482a      	ldr	r0, [pc, #168]	@ (801136c <tcp_rexmit_fast+0xc0>)
 80112c4:	f003 fd34 	bl	8014d30 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d044      	beq.n	801135a <tcp_rexmit_fast+0xae>
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	8b5b      	ldrh	r3, [r3, #26]
 80112d4:	f003 0304 	and.w	r3, r3, #4
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d13e      	bne.n	801135a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f7ff ff79 	bl	80111d4 <tcp_rexmit>
 80112e2:	4603      	mov	r3, r0
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d138      	bne.n	801135a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80112f4:	4293      	cmp	r3, r2
 80112f6:	bf28      	it	cs
 80112f8:	4613      	movcs	r3, r2
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	0fda      	lsrs	r2, r3, #31
 80112fe:	4413      	add	r3, r2
 8011300:	105b      	asrs	r3, r3, #1
 8011302:	b29a      	uxth	r2, r3
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8011310:	461a      	mov	r2, r3
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011316:	005b      	lsls	r3, r3, #1
 8011318:	429a      	cmp	r2, r3
 801131a:	d206      	bcs.n	801132a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011320:	005b      	lsls	r3, r3, #1
 8011322:	b29a      	uxth	r2, r3
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011334:	4619      	mov	r1, r3
 8011336:	0049      	lsls	r1, r1, #1
 8011338:	440b      	add	r3, r1
 801133a:	b29b      	uxth	r3, r3
 801133c:	4413      	add	r3, r2
 801133e:	b29a      	uxth	r2, r3
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	8b5b      	ldrh	r3, [r3, #26]
 801134a:	f043 0304 	orr.w	r3, r3, #4
 801134e:	b29a      	uxth	r2, r3
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2200      	movs	r2, #0
 8011358:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801135a:	bf00      	nop
 801135c:	3708      	adds	r7, #8
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	0801720c 	.word	0x0801720c
 8011368:	080178c4 	.word	0x080178c4
 801136c:	08017260 	.word	0x08017260

08011370 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b086      	sub	sp, #24
 8011374:	af00      	add	r7, sp, #0
 8011376:	60f8      	str	r0, [r7, #12]
 8011378:	607b      	str	r3, [r7, #4]
 801137a:	460b      	mov	r3, r1
 801137c:	817b      	strh	r3, [r7, #10]
 801137e:	4613      	mov	r3, r2
 8011380:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011382:	897a      	ldrh	r2, [r7, #10]
 8011384:	893b      	ldrh	r3, [r7, #8]
 8011386:	4413      	add	r3, r2
 8011388:	b29b      	uxth	r3, r3
 801138a:	3314      	adds	r3, #20
 801138c:	b29b      	uxth	r3, r3
 801138e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011392:	4619      	mov	r1, r3
 8011394:	2022      	movs	r0, #34	@ 0x22
 8011396:	f7fa fb79 	bl	800ba8c <pbuf_alloc>
 801139a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d04d      	beq.n	801143e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80113a2:	897b      	ldrh	r3, [r7, #10]
 80113a4:	3313      	adds	r3, #19
 80113a6:	697a      	ldr	r2, [r7, #20]
 80113a8:	8952      	ldrh	r2, [r2, #10]
 80113aa:	4293      	cmp	r3, r2
 80113ac:	db06      	blt.n	80113bc <tcp_output_alloc_header_common+0x4c>
 80113ae:	4b26      	ldr	r3, [pc, #152]	@ (8011448 <tcp_output_alloc_header_common+0xd8>)
 80113b0:	f240 7223 	movw	r2, #1827	@ 0x723
 80113b4:	4925      	ldr	r1, [pc, #148]	@ (801144c <tcp_output_alloc_header_common+0xdc>)
 80113b6:	4826      	ldr	r0, [pc, #152]	@ (8011450 <tcp_output_alloc_header_common+0xe0>)
 80113b8:	f003 fcba 	bl	8014d30 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	685b      	ldr	r3, [r3, #4]
 80113c0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80113c2:	8c3b      	ldrh	r3, [r7, #32]
 80113c4:	4618      	mov	r0, r3
 80113c6:	f7f9 fae7 	bl	800a998 <lwip_htons>
 80113ca:	4603      	mov	r3, r0
 80113cc:	461a      	mov	r2, r3
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80113d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7f9 fadf 	bl	800a998 <lwip_htons>
 80113da:	4603      	mov	r3, r0
 80113dc:	461a      	mov	r2, r3
 80113de:	693b      	ldr	r3, [r7, #16]
 80113e0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80113e8:	68f8      	ldr	r0, [r7, #12]
 80113ea:	f7f9 faeb 	bl	800a9c4 <lwip_htonl>
 80113ee:	4602      	mov	r2, r0
 80113f0:	693b      	ldr	r3, [r7, #16]
 80113f2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80113f4:	897b      	ldrh	r3, [r7, #10]
 80113f6:	089b      	lsrs	r3, r3, #2
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	3305      	adds	r3, #5
 80113fc:	b29b      	uxth	r3, r3
 80113fe:	031b      	lsls	r3, r3, #12
 8011400:	b29a      	uxth	r2, r3
 8011402:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011406:	b29b      	uxth	r3, r3
 8011408:	4313      	orrs	r3, r2
 801140a:	b29b      	uxth	r3, r3
 801140c:	4618      	mov	r0, r3
 801140e:	f7f9 fac3 	bl	800a998 <lwip_htons>
 8011412:	4603      	mov	r3, r0
 8011414:	461a      	mov	r2, r3
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801141a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801141c:	4618      	mov	r0, r3
 801141e:	f7f9 fabb 	bl	800a998 <lwip_htons>
 8011422:	4603      	mov	r3, r0
 8011424:	461a      	mov	r2, r3
 8011426:	693b      	ldr	r3, [r7, #16]
 8011428:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	2200      	movs	r2, #0
 801142e:	741a      	strb	r2, [r3, #16]
 8011430:	2200      	movs	r2, #0
 8011432:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	2200      	movs	r2, #0
 8011438:	749a      	strb	r2, [r3, #18]
 801143a:	2200      	movs	r2, #0
 801143c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801143e:	697b      	ldr	r3, [r7, #20]
}
 8011440:	4618      	mov	r0, r3
 8011442:	3718      	adds	r7, #24
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}
 8011448:	0801720c 	.word	0x0801720c
 801144c:	080178e4 	.word	0x080178e4
 8011450:	08017260 	.word	0x08017260

08011454 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011454:	b5b0      	push	{r4, r5, r7, lr}
 8011456:	b08a      	sub	sp, #40	@ 0x28
 8011458:	af04      	add	r7, sp, #16
 801145a:	60f8      	str	r0, [r7, #12]
 801145c:	607b      	str	r3, [r7, #4]
 801145e:	460b      	mov	r3, r1
 8011460:	817b      	strh	r3, [r7, #10]
 8011462:	4613      	mov	r3, r2
 8011464:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d106      	bne.n	801147a <tcp_output_alloc_header+0x26>
 801146c:	4b15      	ldr	r3, [pc, #84]	@ (80114c4 <tcp_output_alloc_header+0x70>)
 801146e:	f240 7242 	movw	r2, #1858	@ 0x742
 8011472:	4915      	ldr	r1, [pc, #84]	@ (80114c8 <tcp_output_alloc_header+0x74>)
 8011474:	4815      	ldr	r0, [pc, #84]	@ (80114cc <tcp_output_alloc_header+0x78>)
 8011476:	f003 fc5b 	bl	8014d30 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	8adb      	ldrh	r3, [r3, #22]
 8011482:	68fa      	ldr	r2, [r7, #12]
 8011484:	8b12      	ldrh	r2, [r2, #24]
 8011486:	68f9      	ldr	r1, [r7, #12]
 8011488:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801148a:	893d      	ldrh	r5, [r7, #8]
 801148c:	897c      	ldrh	r4, [r7, #10]
 801148e:	9103      	str	r1, [sp, #12]
 8011490:	2110      	movs	r1, #16
 8011492:	9102      	str	r1, [sp, #8]
 8011494:	9201      	str	r2, [sp, #4]
 8011496:	9300      	str	r3, [sp, #0]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	462a      	mov	r2, r5
 801149c:	4621      	mov	r1, r4
 801149e:	f7ff ff67 	bl	8011370 <tcp_output_alloc_header_common>
 80114a2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d006      	beq.n	80114b8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114ae:	68fa      	ldr	r2, [r7, #12]
 80114b0:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80114b2:	441a      	add	r2, r3
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80114b8:	697b      	ldr	r3, [r7, #20]
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3718      	adds	r7, #24
 80114be:	46bd      	mov	sp, r7
 80114c0:	bdb0      	pop	{r4, r5, r7, pc}
 80114c2:	bf00      	nop
 80114c4:	0801720c 	.word	0x0801720c
 80114c8:	08017914 	.word	0x08017914
 80114cc:	08017260 	.word	0x08017260

080114d0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b088      	sub	sp, #32
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	60f8      	str	r0, [r7, #12]
 80114d8:	60b9      	str	r1, [r7, #8]
 80114da:	4611      	mov	r1, r2
 80114dc:	461a      	mov	r2, r3
 80114de:	460b      	mov	r3, r1
 80114e0:	71fb      	strb	r3, [r7, #7]
 80114e2:	4613      	mov	r3, r2
 80114e4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80114e6:	2300      	movs	r3, #0
 80114e8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d106      	bne.n	80114fe <tcp_output_fill_options+0x2e>
 80114f0:	4b12      	ldr	r3, [pc, #72]	@ (801153c <tcp_output_fill_options+0x6c>)
 80114f2:	f240 7256 	movw	r2, #1878	@ 0x756
 80114f6:	4912      	ldr	r1, [pc, #72]	@ (8011540 <tcp_output_fill_options+0x70>)
 80114f8:	4812      	ldr	r0, [pc, #72]	@ (8011544 <tcp_output_fill_options+0x74>)
 80114fa:	f003 fc19 	bl	8014d30 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011504:	69bb      	ldr	r3, [r7, #24]
 8011506:	3314      	adds	r3, #20
 8011508:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801150a:	8bfb      	ldrh	r3, [r7, #30]
 801150c:	009b      	lsls	r3, r3, #2
 801150e:	461a      	mov	r2, r3
 8011510:	79fb      	ldrb	r3, [r7, #7]
 8011512:	009b      	lsls	r3, r3, #2
 8011514:	f003 0304 	and.w	r3, r3, #4
 8011518:	4413      	add	r3, r2
 801151a:	3314      	adds	r3, #20
 801151c:	69ba      	ldr	r2, [r7, #24]
 801151e:	4413      	add	r3, r2
 8011520:	697a      	ldr	r2, [r7, #20]
 8011522:	429a      	cmp	r2, r3
 8011524:	d006      	beq.n	8011534 <tcp_output_fill_options+0x64>
 8011526:	4b05      	ldr	r3, [pc, #20]	@ (801153c <tcp_output_fill_options+0x6c>)
 8011528:	f240 7275 	movw	r2, #1909	@ 0x775
 801152c:	4906      	ldr	r1, [pc, #24]	@ (8011548 <tcp_output_fill_options+0x78>)
 801152e:	4805      	ldr	r0, [pc, #20]	@ (8011544 <tcp_output_fill_options+0x74>)
 8011530:	f003 fbfe 	bl	8014d30 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011534:	bf00      	nop
 8011536:	3720      	adds	r7, #32
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}
 801153c:	0801720c 	.word	0x0801720c
 8011540:	0801793c 	.word	0x0801793c
 8011544:	08017260 	.word	0x08017260
 8011548:	08017834 	.word	0x08017834

0801154c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b08a      	sub	sp, #40	@ 0x28
 8011550:	af04      	add	r7, sp, #16
 8011552:	60f8      	str	r0, [r7, #12]
 8011554:	60b9      	str	r1, [r7, #8]
 8011556:	607a      	str	r2, [r7, #4]
 8011558:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d106      	bne.n	801156e <tcp_output_control_segment+0x22>
 8011560:	4b1c      	ldr	r3, [pc, #112]	@ (80115d4 <tcp_output_control_segment+0x88>)
 8011562:	f240 7287 	movw	r2, #1927	@ 0x787
 8011566:	491c      	ldr	r1, [pc, #112]	@ (80115d8 <tcp_output_control_segment+0x8c>)
 8011568:	481c      	ldr	r0, [pc, #112]	@ (80115dc <tcp_output_control_segment+0x90>)
 801156a:	f003 fbe1 	bl	8014d30 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801156e:	683a      	ldr	r2, [r7, #0]
 8011570:	6879      	ldr	r1, [r7, #4]
 8011572:	68f8      	ldr	r0, [r7, #12]
 8011574:	f7fe ff42 	bl	80103fc <tcp_route>
 8011578:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d102      	bne.n	8011586 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011580:	23fc      	movs	r3, #252	@ 0xfc
 8011582:	75fb      	strb	r3, [r7, #23]
 8011584:	e01c      	b.n	80115c0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d006      	beq.n	801159a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	7adb      	ldrb	r3, [r3, #11]
 8011590:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	7a9b      	ldrb	r3, [r3, #10]
 8011596:	757b      	strb	r3, [r7, #21]
 8011598:	e003      	b.n	80115a2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801159a:	23ff      	movs	r3, #255	@ 0xff
 801159c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801159e:	2300      	movs	r3, #0
 80115a0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80115a2:	7dba      	ldrb	r2, [r7, #22]
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	9302      	str	r3, [sp, #8]
 80115a8:	2306      	movs	r3, #6
 80115aa:	9301      	str	r3, [sp, #4]
 80115ac:	7d7b      	ldrb	r3, [r7, #21]
 80115ae:	9300      	str	r3, [sp, #0]
 80115b0:	4613      	mov	r3, r2
 80115b2:	683a      	ldr	r2, [r7, #0]
 80115b4:	6879      	ldr	r1, [r7, #4]
 80115b6:	68b8      	ldr	r0, [r7, #8]
 80115b8:	f002 fa8c 	bl	8013ad4 <ip4_output_if>
 80115bc:	4603      	mov	r3, r0
 80115be:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80115c0:	68b8      	ldr	r0, [r7, #8]
 80115c2:	f7fa fd47 	bl	800c054 <pbuf_free>
  return err;
 80115c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	3718      	adds	r7, #24
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}
 80115d2:	bf00      	nop
 80115d4:	0801720c 	.word	0x0801720c
 80115d8:	08017964 	.word	0x08017964
 80115dc:	08017260 	.word	0x08017260

080115e0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80115e0:	b590      	push	{r4, r7, lr}
 80115e2:	b08b      	sub	sp, #44	@ 0x2c
 80115e4:	af04      	add	r7, sp, #16
 80115e6:	60f8      	str	r0, [r7, #12]
 80115e8:	60b9      	str	r1, [r7, #8]
 80115ea:	607a      	str	r2, [r7, #4]
 80115ec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d106      	bne.n	8011602 <tcp_rst+0x22>
 80115f4:	4b1f      	ldr	r3, [pc, #124]	@ (8011674 <tcp_rst+0x94>)
 80115f6:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80115fa:	491f      	ldr	r1, [pc, #124]	@ (8011678 <tcp_rst+0x98>)
 80115fc:	481f      	ldr	r0, [pc, #124]	@ (801167c <tcp_rst+0x9c>)
 80115fe:	f003 fb97 	bl	8014d30 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011604:	2b00      	cmp	r3, #0
 8011606:	d106      	bne.n	8011616 <tcp_rst+0x36>
 8011608:	4b1a      	ldr	r3, [pc, #104]	@ (8011674 <tcp_rst+0x94>)
 801160a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801160e:	491c      	ldr	r1, [pc, #112]	@ (8011680 <tcp_rst+0xa0>)
 8011610:	481a      	ldr	r0, [pc, #104]	@ (801167c <tcp_rst+0x9c>)
 8011612:	f003 fb8d 	bl	8014d30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011616:	2300      	movs	r3, #0
 8011618:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801161a:	f246 0308 	movw	r3, #24584	@ 0x6008
 801161e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011620:	7dfb      	ldrb	r3, [r7, #23]
 8011622:	b29c      	uxth	r4, r3
 8011624:	68b8      	ldr	r0, [r7, #8]
 8011626:	f7f9 f9cd 	bl	800a9c4 <lwip_htonl>
 801162a:	4602      	mov	r2, r0
 801162c:	8abb      	ldrh	r3, [r7, #20]
 801162e:	9303      	str	r3, [sp, #12]
 8011630:	2314      	movs	r3, #20
 8011632:	9302      	str	r3, [sp, #8]
 8011634:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011636:	9301      	str	r3, [sp, #4]
 8011638:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801163a:	9300      	str	r3, [sp, #0]
 801163c:	4613      	mov	r3, r2
 801163e:	2200      	movs	r2, #0
 8011640:	4621      	mov	r1, r4
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f7ff fe94 	bl	8011370 <tcp_output_alloc_header_common>
 8011648:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d00c      	beq.n	801166a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011650:	7dfb      	ldrb	r3, [r7, #23]
 8011652:	2200      	movs	r2, #0
 8011654:	6939      	ldr	r1, [r7, #16]
 8011656:	68f8      	ldr	r0, [r7, #12]
 8011658:	f7ff ff3a 	bl	80114d0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801165c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801165e:	683a      	ldr	r2, [r7, #0]
 8011660:	6939      	ldr	r1, [r7, #16]
 8011662:	68f8      	ldr	r0, [r7, #12]
 8011664:	f7ff ff72 	bl	801154c <tcp_output_control_segment>
 8011668:	e000      	b.n	801166c <tcp_rst+0x8c>
    return;
 801166a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801166c:	371c      	adds	r7, #28
 801166e:	46bd      	mov	sp, r7
 8011670:	bd90      	pop	{r4, r7, pc}
 8011672:	bf00      	nop
 8011674:	0801720c 	.word	0x0801720c
 8011678:	08017990 	.word	0x08017990
 801167c:	08017260 	.word	0x08017260
 8011680:	080179ac 	.word	0x080179ac

08011684 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011684:	b590      	push	{r4, r7, lr}
 8011686:	b087      	sub	sp, #28
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801168c:	2300      	movs	r3, #0
 801168e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011690:	2300      	movs	r3, #0
 8011692:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d106      	bne.n	80116a8 <tcp_send_empty_ack+0x24>
 801169a:	4b28      	ldr	r3, [pc, #160]	@ (801173c <tcp_send_empty_ack+0xb8>)
 801169c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80116a0:	4927      	ldr	r1, [pc, #156]	@ (8011740 <tcp_send_empty_ack+0xbc>)
 80116a2:	4828      	ldr	r0, [pc, #160]	@ (8011744 <tcp_send_empty_ack+0xc0>)
 80116a4:	f003 fb44 	bl	8014d30 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80116a8:	7dfb      	ldrb	r3, [r7, #23]
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	b2db      	uxtb	r3, r3
 80116ae:	f003 0304 	and.w	r3, r3, #4
 80116b2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80116b4:	7d7b      	ldrb	r3, [r7, #21]
 80116b6:	b29c      	uxth	r4, r3
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80116bc:	4618      	mov	r0, r3
 80116be:	f7f9 f981 	bl	800a9c4 <lwip_htonl>
 80116c2:	4603      	mov	r3, r0
 80116c4:	2200      	movs	r2, #0
 80116c6:	4621      	mov	r1, r4
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f7ff fec3 	bl	8011454 <tcp_output_alloc_header>
 80116ce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d109      	bne.n	80116ea <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	8b5b      	ldrh	r3, [r3, #26]
 80116da:	f043 0303 	orr.w	r3, r3, #3
 80116de:	b29a      	uxth	r2, r3
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80116e4:	f06f 0301 	mvn.w	r3, #1
 80116e8:	e023      	b.n	8011732 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80116ea:	7dbb      	ldrb	r3, [r7, #22]
 80116ec:	7dfa      	ldrb	r2, [r7, #23]
 80116ee:	6939      	ldr	r1, [r7, #16]
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f7ff feed 	bl	80114d0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80116f6:	687a      	ldr	r2, [r7, #4]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	3304      	adds	r3, #4
 80116fc:	6939      	ldr	r1, [r7, #16]
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f7ff ff24 	bl	801154c <tcp_output_control_segment>
 8011704:	4603      	mov	r3, r0
 8011706:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d007      	beq.n	8011720 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	8b5b      	ldrh	r3, [r3, #26]
 8011714:	f043 0303 	orr.w	r3, r3, #3
 8011718:	b29a      	uxth	r2, r3
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	835a      	strh	r2, [r3, #26]
 801171e:	e006      	b.n	801172e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	8b5b      	ldrh	r3, [r3, #26]
 8011724:	f023 0303 	bic.w	r3, r3, #3
 8011728:	b29a      	uxth	r2, r3
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011732:	4618      	mov	r0, r3
 8011734:	371c      	adds	r7, #28
 8011736:	46bd      	mov	sp, r7
 8011738:	bd90      	pop	{r4, r7, pc}
 801173a:	bf00      	nop
 801173c:	0801720c 	.word	0x0801720c
 8011740:	080179c8 	.word	0x080179c8
 8011744:	08017260 	.word	0x08017260

08011748 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011748:	b590      	push	{r4, r7, lr}
 801174a:	b087      	sub	sp, #28
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011750:	2300      	movs	r3, #0
 8011752:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d106      	bne.n	8011768 <tcp_keepalive+0x20>
 801175a:	4b18      	ldr	r3, [pc, #96]	@ (80117bc <tcp_keepalive+0x74>)
 801175c:	f640 0224 	movw	r2, #2084	@ 0x824
 8011760:	4917      	ldr	r1, [pc, #92]	@ (80117c0 <tcp_keepalive+0x78>)
 8011762:	4818      	ldr	r0, [pc, #96]	@ (80117c4 <tcp_keepalive+0x7c>)
 8011764:	f003 fae4 	bl	8014d30 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011768:	7dfb      	ldrb	r3, [r7, #23]
 801176a:	b29c      	uxth	r4, r3
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011770:	3b01      	subs	r3, #1
 8011772:	4618      	mov	r0, r3
 8011774:	f7f9 f926 	bl	800a9c4 <lwip_htonl>
 8011778:	4603      	mov	r3, r0
 801177a:	2200      	movs	r2, #0
 801177c:	4621      	mov	r1, r4
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f7ff fe68 	bl	8011454 <tcp_output_alloc_header>
 8011784:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d102      	bne.n	8011792 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801178c:	f04f 33ff 	mov.w	r3, #4294967295
 8011790:	e010      	b.n	80117b4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011792:	7dfb      	ldrb	r3, [r7, #23]
 8011794:	2200      	movs	r2, #0
 8011796:	6939      	ldr	r1, [r7, #16]
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f7ff fe99 	bl	80114d0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	3304      	adds	r3, #4
 80117a4:	6939      	ldr	r1, [r7, #16]
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	f7ff fed0 	bl	801154c <tcp_output_control_segment>
 80117ac:	4603      	mov	r3, r0
 80117ae:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80117b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80117b4:	4618      	mov	r0, r3
 80117b6:	371c      	adds	r7, #28
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd90      	pop	{r4, r7, pc}
 80117bc:	0801720c 	.word	0x0801720c
 80117c0:	080179e8 	.word	0x080179e8
 80117c4:	08017260 	.word	0x08017260

080117c8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80117c8:	b590      	push	{r4, r7, lr}
 80117ca:	b08b      	sub	sp, #44	@ 0x2c
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80117d0:	2300      	movs	r3, #0
 80117d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d106      	bne.n	80117ea <tcp_zero_window_probe+0x22>
 80117dc:	4b4c      	ldr	r3, [pc, #304]	@ (8011910 <tcp_zero_window_probe+0x148>)
 80117de:	f640 024f 	movw	r2, #2127	@ 0x84f
 80117e2:	494c      	ldr	r1, [pc, #304]	@ (8011914 <tcp_zero_window_probe+0x14c>)
 80117e4:	484c      	ldr	r0, [pc, #304]	@ (8011918 <tcp_zero_window_probe+0x150>)
 80117e6:	f003 faa3 	bl	8014d30 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117ee:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80117f0:	6a3b      	ldr	r3, [r7, #32]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d101      	bne.n	80117fa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80117f6:	2300      	movs	r3, #0
 80117f8:	e086      	b.n	8011908 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011800:	2bff      	cmp	r3, #255	@ 0xff
 8011802:	d007      	beq.n	8011814 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801180a:	3301      	adds	r3, #1
 801180c:	b2da      	uxtb	r2, r3
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011814:	6a3b      	ldr	r3, [r7, #32]
 8011816:	68db      	ldr	r3, [r3, #12]
 8011818:	899b      	ldrh	r3, [r3, #12]
 801181a:	b29b      	uxth	r3, r3
 801181c:	4618      	mov	r0, r3
 801181e:	f7f9 f8bb 	bl	800a998 <lwip_htons>
 8011822:	4603      	mov	r3, r0
 8011824:	b2db      	uxtb	r3, r3
 8011826:	f003 0301 	and.w	r3, r3, #1
 801182a:	2b00      	cmp	r3, #0
 801182c:	d005      	beq.n	801183a <tcp_zero_window_probe+0x72>
 801182e:	6a3b      	ldr	r3, [r7, #32]
 8011830:	891b      	ldrh	r3, [r3, #8]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d101      	bne.n	801183a <tcp_zero_window_probe+0x72>
 8011836:	2301      	movs	r3, #1
 8011838:	e000      	b.n	801183c <tcp_zero_window_probe+0x74>
 801183a:	2300      	movs	r3, #0
 801183c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801183e:	7ffb      	ldrb	r3, [r7, #31]
 8011840:	2b00      	cmp	r3, #0
 8011842:	bf0c      	ite	eq
 8011844:	2301      	moveq	r3, #1
 8011846:	2300      	movne	r3, #0
 8011848:	b2db      	uxtb	r3, r3
 801184a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801184c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011850:	b299      	uxth	r1, r3
 8011852:	6a3b      	ldr	r3, [r7, #32]
 8011854:	68db      	ldr	r3, [r3, #12]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	8bba      	ldrh	r2, [r7, #28]
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	f7ff fdfa 	bl	8011454 <tcp_output_alloc_header>
 8011860:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011862:	69bb      	ldr	r3, [r7, #24]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d102      	bne.n	801186e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011868:	f04f 33ff 	mov.w	r3, #4294967295
 801186c:	e04c      	b.n	8011908 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801186e:	69bb      	ldr	r3, [r7, #24]
 8011870:	685b      	ldr	r3, [r3, #4]
 8011872:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011874:	7ffb      	ldrb	r3, [r7, #31]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d011      	beq.n	801189e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	899b      	ldrh	r3, [r3, #12]
 801187e:	b29b      	uxth	r3, r3
 8011880:	b21b      	sxth	r3, r3
 8011882:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011886:	b21c      	sxth	r4, r3
 8011888:	2011      	movs	r0, #17
 801188a:	f7f9 f885 	bl	800a998 <lwip_htons>
 801188e:	4603      	mov	r3, r0
 8011890:	b21b      	sxth	r3, r3
 8011892:	4323      	orrs	r3, r4
 8011894:	b21b      	sxth	r3, r3
 8011896:	b29a      	uxth	r2, r3
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	819a      	strh	r2, [r3, #12]
 801189c:	e010      	b.n	80118c0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801189e:	69bb      	ldr	r3, [r7, #24]
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	3314      	adds	r3, #20
 80118a4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80118a6:	6a3b      	ldr	r3, [r7, #32]
 80118a8:	6858      	ldr	r0, [r3, #4]
 80118aa:	6a3b      	ldr	r3, [r7, #32]
 80118ac:	685b      	ldr	r3, [r3, #4]
 80118ae:	891a      	ldrh	r2, [r3, #8]
 80118b0:	6a3b      	ldr	r3, [r7, #32]
 80118b2:	891b      	ldrh	r3, [r3, #8]
 80118b4:	1ad3      	subs	r3, r2, r3
 80118b6:	b29b      	uxth	r3, r3
 80118b8:	2201      	movs	r2, #1
 80118ba:	6939      	ldr	r1, [r7, #16]
 80118bc:	f7fa fdc4 	bl	800c448 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80118c0:	6a3b      	ldr	r3, [r7, #32]
 80118c2:	68db      	ldr	r3, [r3, #12]
 80118c4:	685b      	ldr	r3, [r3, #4]
 80118c6:	4618      	mov	r0, r3
 80118c8:	f7f9 f87c 	bl	800a9c4 <lwip_htonl>
 80118cc:	4603      	mov	r3, r0
 80118ce:	3301      	adds	r3, #1
 80118d0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	1ad3      	subs	r3, r2, r3
 80118da:	2b00      	cmp	r3, #0
 80118dc:	da02      	bge.n	80118e4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	68fa      	ldr	r2, [r7, #12]
 80118e2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80118e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80118e8:	2200      	movs	r2, #0
 80118ea:	69b9      	ldr	r1, [r7, #24]
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f7ff fdef 	bl	80114d0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80118f2:	687a      	ldr	r2, [r7, #4]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	3304      	adds	r3, #4
 80118f8:	69b9      	ldr	r1, [r7, #24]
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	f7ff fe26 	bl	801154c <tcp_output_control_segment>
 8011900:	4603      	mov	r3, r0
 8011902:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011904:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011908:	4618      	mov	r0, r3
 801190a:	372c      	adds	r7, #44	@ 0x2c
 801190c:	46bd      	mov	sp, r7
 801190e:	bd90      	pop	{r4, r7, pc}
 8011910:	0801720c 	.word	0x0801720c
 8011914:	08017a04 	.word	0x08017a04
 8011918:	08017260 	.word	0x08017260

0801191c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b082      	sub	sp, #8
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011924:	f7fa ff10 	bl	800c748 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011928:	4b0a      	ldr	r3, [pc, #40]	@ (8011954 <tcpip_tcp_timer+0x38>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d103      	bne.n	8011938 <tcpip_tcp_timer+0x1c>
 8011930:	4b09      	ldr	r3, [pc, #36]	@ (8011958 <tcpip_tcp_timer+0x3c>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d005      	beq.n	8011944 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011938:	2200      	movs	r2, #0
 801193a:	4908      	ldr	r1, [pc, #32]	@ (801195c <tcpip_tcp_timer+0x40>)
 801193c:	20fa      	movs	r0, #250	@ 0xfa
 801193e:	f000 f8f3 	bl	8011b28 <sys_timeout>
 8011942:	e003      	b.n	801194c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011944:	4b06      	ldr	r3, [pc, #24]	@ (8011960 <tcpip_tcp_timer+0x44>)
 8011946:	2200      	movs	r2, #0
 8011948:	601a      	str	r2, [r3, #0]
  }
}
 801194a:	bf00      	nop
 801194c:	bf00      	nop
 801194e:	3708      	adds	r7, #8
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}
 8011954:	2000b270 	.word	0x2000b270
 8011958:	2000b274 	.word	0x2000b274
 801195c:	0801191d 	.word	0x0801191d
 8011960:	2000b2bc 	.word	0x2000b2bc

08011964 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011968:	4b0a      	ldr	r3, [pc, #40]	@ (8011994 <tcp_timer_needed+0x30>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d10f      	bne.n	8011990 <tcp_timer_needed+0x2c>
 8011970:	4b09      	ldr	r3, [pc, #36]	@ (8011998 <tcp_timer_needed+0x34>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d103      	bne.n	8011980 <tcp_timer_needed+0x1c>
 8011978:	4b08      	ldr	r3, [pc, #32]	@ (801199c <tcp_timer_needed+0x38>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d007      	beq.n	8011990 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011980:	4b04      	ldr	r3, [pc, #16]	@ (8011994 <tcp_timer_needed+0x30>)
 8011982:	2201      	movs	r2, #1
 8011984:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011986:	2200      	movs	r2, #0
 8011988:	4905      	ldr	r1, [pc, #20]	@ (80119a0 <tcp_timer_needed+0x3c>)
 801198a:	20fa      	movs	r0, #250	@ 0xfa
 801198c:	f000 f8cc 	bl	8011b28 <sys_timeout>
  }
}
 8011990:	bf00      	nop
 8011992:	bd80      	pop	{r7, pc}
 8011994:	2000b2bc 	.word	0x2000b2bc
 8011998:	2000b270 	.word	0x2000b270
 801199c:	2000b274 	.word	0x2000b274
 80119a0:	0801191d 	.word	0x0801191d

080119a4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b086      	sub	sp, #24
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	60f8      	str	r0, [r7, #12]
 80119ac:	60b9      	str	r1, [r7, #8]
 80119ae:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80119b0:	2006      	movs	r0, #6
 80119b2:	f7f9 fc69 	bl	800b288 <memp_malloc>
 80119b6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d109      	bne.n	80119d2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d151      	bne.n	8011a68 <sys_timeout_abs+0xc4>
 80119c4:	4b2a      	ldr	r3, [pc, #168]	@ (8011a70 <sys_timeout_abs+0xcc>)
 80119c6:	22be      	movs	r2, #190	@ 0xbe
 80119c8:	492a      	ldr	r1, [pc, #168]	@ (8011a74 <sys_timeout_abs+0xd0>)
 80119ca:	482b      	ldr	r0, [pc, #172]	@ (8011a78 <sys_timeout_abs+0xd4>)
 80119cc:	f003 f9b0 	bl	8014d30 <iprintf>
    return;
 80119d0:	e04a      	b.n	8011a68 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	2200      	movs	r2, #0
 80119d6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	68ba      	ldr	r2, [r7, #8]
 80119dc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	687a      	ldr	r2, [r7, #4]
 80119e2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	68fa      	ldr	r2, [r7, #12]
 80119e8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80119ea:	4b24      	ldr	r3, [pc, #144]	@ (8011a7c <sys_timeout_abs+0xd8>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d103      	bne.n	80119fa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80119f2:	4a22      	ldr	r2, [pc, #136]	@ (8011a7c <sys_timeout_abs+0xd8>)
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	6013      	str	r3, [r2, #0]
    return;
 80119f8:	e037      	b.n	8011a6a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	685a      	ldr	r2, [r3, #4]
 80119fe:	4b1f      	ldr	r3, [pc, #124]	@ (8011a7c <sys_timeout_abs+0xd8>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	1ad3      	subs	r3, r2, r3
 8011a06:	0fdb      	lsrs	r3, r3, #31
 8011a08:	f003 0301 	and.w	r3, r3, #1
 8011a0c:	b2db      	uxtb	r3, r3
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d007      	beq.n	8011a22 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011a12:	4b1a      	ldr	r3, [pc, #104]	@ (8011a7c <sys_timeout_abs+0xd8>)
 8011a14:	681a      	ldr	r2, [r3, #0]
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011a1a:	4a18      	ldr	r2, [pc, #96]	@ (8011a7c <sys_timeout_abs+0xd8>)
 8011a1c:	693b      	ldr	r3, [r7, #16]
 8011a1e:	6013      	str	r3, [r2, #0]
 8011a20:	e023      	b.n	8011a6a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011a22:	4b16      	ldr	r3, [pc, #88]	@ (8011a7c <sys_timeout_abs+0xd8>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	617b      	str	r3, [r7, #20]
 8011a28:	e01a      	b.n	8011a60 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d00b      	beq.n	8011a4a <sys_timeout_abs+0xa6>
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	685a      	ldr	r2, [r3, #4]
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	1ad3      	subs	r3, r2, r3
 8011a3e:	0fdb      	lsrs	r3, r3, #31
 8011a40:	f003 0301 	and.w	r3, r3, #1
 8011a44:	b2db      	uxtb	r3, r3
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d007      	beq.n	8011a5a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	681a      	ldr	r2, [r3, #0]
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	693a      	ldr	r2, [r7, #16]
 8011a56:	601a      	str	r2, [r3, #0]
        break;
 8011a58:	e007      	b.n	8011a6a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	617b      	str	r3, [r7, #20]
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d1e1      	bne.n	8011a2a <sys_timeout_abs+0x86>
 8011a66:	e000      	b.n	8011a6a <sys_timeout_abs+0xc6>
    return;
 8011a68:	bf00      	nop
      }
    }
  }
}
 8011a6a:	3718      	adds	r7, #24
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}
 8011a70:	08017a28 	.word	0x08017a28
 8011a74:	08017a5c 	.word	0x08017a5c
 8011a78:	08017a9c 	.word	0x08017a9c
 8011a7c:	2000b2b4 	.word	0x2000b2b4

08011a80 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b086      	sub	sp, #24
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	4798      	blx	r3

  now = sys_now();
 8011a92:	f7f8 fd89 	bl	800a5a8 <sys_now>
 8011a96:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	681a      	ldr	r2, [r3, #0]
 8011a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8011adc <lwip_cyclic_timer+0x5c>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	4413      	add	r3, r2
 8011aa2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011aa4:	68fa      	ldr	r2, [r7, #12]
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	1ad3      	subs	r3, r2, r3
 8011aaa:	0fdb      	lsrs	r3, r3, #31
 8011aac:	f003 0301 	and.w	r3, r3, #1
 8011ab0:	b2db      	uxtb	r3, r3
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d009      	beq.n	8011aca <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011ab6:	697b      	ldr	r3, [r7, #20]
 8011ab8:	681a      	ldr	r2, [r3, #0]
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	4413      	add	r3, r2
 8011abe:	687a      	ldr	r2, [r7, #4]
 8011ac0:	4907      	ldr	r1, [pc, #28]	@ (8011ae0 <lwip_cyclic_timer+0x60>)
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7ff ff6e 	bl	80119a4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011ac8:	e004      	b.n	8011ad4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011aca:	687a      	ldr	r2, [r7, #4]
 8011acc:	4904      	ldr	r1, [pc, #16]	@ (8011ae0 <lwip_cyclic_timer+0x60>)
 8011ace:	68f8      	ldr	r0, [r7, #12]
 8011ad0:	f7ff ff68 	bl	80119a4 <sys_timeout_abs>
}
 8011ad4:	bf00      	nop
 8011ad6:	3718      	adds	r7, #24
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}
 8011adc:	2000b2b8 	.word	0x2000b2b8
 8011ae0:	08011a81 	.word	0x08011a81

08011ae4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011aea:	2301      	movs	r3, #1
 8011aec:	607b      	str	r3, [r7, #4]
 8011aee:	e00e      	b.n	8011b0e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011af0:	4a0b      	ldr	r2, [pc, #44]	@ (8011b20 <sys_timeouts_init+0x3c>)
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	00db      	lsls	r3, r3, #3
 8011afc:	4a08      	ldr	r2, [pc, #32]	@ (8011b20 <sys_timeouts_init+0x3c>)
 8011afe:	4413      	add	r3, r2
 8011b00:	461a      	mov	r2, r3
 8011b02:	4908      	ldr	r1, [pc, #32]	@ (8011b24 <sys_timeouts_init+0x40>)
 8011b04:	f000 f810 	bl	8011b28 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	607b      	str	r3, [r7, #4]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2b02      	cmp	r3, #2
 8011b12:	d9ed      	bls.n	8011af0 <sys_timeouts_init+0xc>
  }
}
 8011b14:	bf00      	nop
 8011b16:	bf00      	nop
 8011b18:	3708      	adds	r7, #8
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	0801861c 	.word	0x0801861c
 8011b24:	08011a81 	.word	0x08011a81

08011b28 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b086      	sub	sp, #24
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	60f8      	str	r0, [r7, #12]
 8011b30:	60b9      	str	r1, [r7, #8]
 8011b32:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011b3a:	d306      	bcc.n	8011b4a <sys_timeout+0x22>
 8011b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8011b68 <sys_timeout+0x40>)
 8011b3e:	f240 1229 	movw	r2, #297	@ 0x129
 8011b42:	490a      	ldr	r1, [pc, #40]	@ (8011b6c <sys_timeout+0x44>)
 8011b44:	480a      	ldr	r0, [pc, #40]	@ (8011b70 <sys_timeout+0x48>)
 8011b46:	f003 f8f3 	bl	8014d30 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011b4a:	f7f8 fd2d 	bl	800a5a8 <sys_now>
 8011b4e:	4602      	mov	r2, r0
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	4413      	add	r3, r2
 8011b54:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011b56:	687a      	ldr	r2, [r7, #4]
 8011b58:	68b9      	ldr	r1, [r7, #8]
 8011b5a:	6978      	ldr	r0, [r7, #20]
 8011b5c:	f7ff ff22 	bl	80119a4 <sys_timeout_abs>
#endif
}
 8011b60:	bf00      	nop
 8011b62:	3718      	adds	r7, #24
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	08017a28 	.word	0x08017a28
 8011b6c:	08017ac4 	.word	0x08017ac4
 8011b70:	08017a9c 	.word	0x08017a9c

08011b74 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b084      	sub	sp, #16
 8011b78:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011b7a:	f7f8 fd15 	bl	800a5a8 <sys_now>
 8011b7e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8011b80:	4b1a      	ldr	r3, [pc, #104]	@ (8011bec <sys_check_timeouts+0x78>)
 8011b82:	781b      	ldrb	r3, [r3, #0]
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d001      	beq.n	8011b8e <sys_check_timeouts+0x1a>
 8011b8a:	f7f9 ff29 	bl	800b9e0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8011b8e:	4b18      	ldr	r3, [pc, #96]	@ (8011bf0 <sys_check_timeouts+0x7c>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d022      	beq.n	8011be0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	685b      	ldr	r3, [r3, #4]
 8011b9e:	68fa      	ldr	r2, [r7, #12]
 8011ba0:	1ad3      	subs	r3, r2, r3
 8011ba2:	0fdb      	lsrs	r3, r3, #31
 8011ba4:	f003 0301 	and.w	r3, r3, #1
 8011ba8:	b2db      	uxtb	r3, r3
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d11a      	bne.n	8011be4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8011bf0 <sys_check_timeouts+0x7c>)
 8011bb4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	689b      	ldr	r3, [r3, #8]
 8011bba:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	685b      	ldr	r3, [r3, #4]
 8011bc6:	4a0b      	ldr	r2, [pc, #44]	@ (8011bf4 <sys_check_timeouts+0x80>)
 8011bc8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011bca:	68b9      	ldr	r1, [r7, #8]
 8011bcc:	2006      	movs	r0, #6
 8011bce:	f7f9 fbcb 	bl	800b368 <memp_free>
    if (handler != NULL) {
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d0d3      	beq.n	8011b80 <sys_check_timeouts+0xc>
      handler(arg);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6838      	ldr	r0, [r7, #0]
 8011bdc:	4798      	blx	r3
  do {
 8011bde:	e7cf      	b.n	8011b80 <sys_check_timeouts+0xc>
      return;
 8011be0:	bf00      	nop
 8011be2:	e000      	b.n	8011be6 <sys_check_timeouts+0x72>
      return;
 8011be4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011be6:	3710      	adds	r7, #16
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	2000b261 	.word	0x2000b261
 8011bf0:	2000b2b4 	.word	0x2000b2b4
 8011bf4:	2000b2b8 	.word	0x2000b2b8

08011bf8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011bfc:	f002 ff98 	bl	8014b30 <rand>
 8011c00:	4603      	mov	r3, r0
 8011c02:	b29b      	uxth	r3, r3
 8011c04:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011c08:	b29b      	uxth	r3, r3
 8011c0a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011c0e:	b29a      	uxth	r2, r3
 8011c10:	4b01      	ldr	r3, [pc, #4]	@ (8011c18 <udp_init+0x20>)
 8011c12:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011c14:	bf00      	nop
 8011c16:	bd80      	pop	{r7, pc}
 8011c18:	200000c8 	.word	0x200000c8

08011c1c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b083      	sub	sp, #12
 8011c20:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011c22:	2300      	movs	r3, #0
 8011c24:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011c26:	4b17      	ldr	r3, [pc, #92]	@ (8011c84 <udp_new_port+0x68>)
 8011c28:	881b      	ldrh	r3, [r3, #0]
 8011c2a:	1c5a      	adds	r2, r3, #1
 8011c2c:	b291      	uxth	r1, r2
 8011c2e:	4a15      	ldr	r2, [pc, #84]	@ (8011c84 <udp_new_port+0x68>)
 8011c30:	8011      	strh	r1, [r2, #0]
 8011c32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011c36:	4293      	cmp	r3, r2
 8011c38:	d103      	bne.n	8011c42 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011c3a:	4b12      	ldr	r3, [pc, #72]	@ (8011c84 <udp_new_port+0x68>)
 8011c3c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8011c40:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c42:	4b11      	ldr	r3, [pc, #68]	@ (8011c88 <udp_new_port+0x6c>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	603b      	str	r3, [r7, #0]
 8011c48:	e011      	b.n	8011c6e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	8a5a      	ldrh	r2, [r3, #18]
 8011c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8011c84 <udp_new_port+0x68>)
 8011c50:	881b      	ldrh	r3, [r3, #0]
 8011c52:	429a      	cmp	r2, r3
 8011c54:	d108      	bne.n	8011c68 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011c56:	88fb      	ldrh	r3, [r7, #6]
 8011c58:	3301      	adds	r3, #1
 8011c5a:	80fb      	strh	r3, [r7, #6]
 8011c5c:	88fb      	ldrh	r3, [r7, #6]
 8011c5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011c62:	d3e0      	bcc.n	8011c26 <udp_new_port+0xa>
        return 0;
 8011c64:	2300      	movs	r3, #0
 8011c66:	e007      	b.n	8011c78 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	603b      	str	r3, [r7, #0]
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d1ea      	bne.n	8011c4a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011c74:	4b03      	ldr	r3, [pc, #12]	@ (8011c84 <udp_new_port+0x68>)
 8011c76:	881b      	ldrh	r3, [r3, #0]
}
 8011c78:	4618      	mov	r0, r3
 8011c7a:	370c      	adds	r7, #12
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c82:	4770      	bx	lr
 8011c84:	200000c8 	.word	0x200000c8
 8011c88:	2000b2c0 	.word	0x2000b2c0

08011c8c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b084      	sub	sp, #16
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	60f8      	str	r0, [r7, #12]
 8011c94:	60b9      	str	r1, [r7, #8]
 8011c96:	4613      	mov	r3, r2
 8011c98:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d105      	bne.n	8011cac <udp_input_local_match+0x20>
 8011ca0:	4b27      	ldr	r3, [pc, #156]	@ (8011d40 <udp_input_local_match+0xb4>)
 8011ca2:	2287      	movs	r2, #135	@ 0x87
 8011ca4:	4927      	ldr	r1, [pc, #156]	@ (8011d44 <udp_input_local_match+0xb8>)
 8011ca6:	4828      	ldr	r0, [pc, #160]	@ (8011d48 <udp_input_local_match+0xbc>)
 8011ca8:	f003 f842 	bl	8014d30 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d105      	bne.n	8011cbe <udp_input_local_match+0x32>
 8011cb2:	4b23      	ldr	r3, [pc, #140]	@ (8011d40 <udp_input_local_match+0xb4>)
 8011cb4:	2288      	movs	r2, #136	@ 0x88
 8011cb6:	4925      	ldr	r1, [pc, #148]	@ (8011d4c <udp_input_local_match+0xc0>)
 8011cb8:	4823      	ldr	r0, [pc, #140]	@ (8011d48 <udp_input_local_match+0xbc>)
 8011cba:	f003 f839 	bl	8014d30 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	7a1b      	ldrb	r3, [r3, #8]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d00b      	beq.n	8011cde <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	7a1a      	ldrb	r2, [r3, #8]
 8011cca:	4b21      	ldr	r3, [pc, #132]	@ (8011d50 <udp_input_local_match+0xc4>)
 8011ccc:	685b      	ldr	r3, [r3, #4]
 8011cce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d001      	beq.n	8011cde <udp_input_local_match+0x52>
    return 0;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	e02b      	b.n	8011d36 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011cde:	79fb      	ldrb	r3, [r7, #7]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d018      	beq.n	8011d16 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d013      	beq.n	8011d12 <udp_input_local_match+0x86>
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d00f      	beq.n	8011d12 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011cf2:	4b17      	ldr	r3, [pc, #92]	@ (8011d50 <udp_input_local_match+0xc4>)
 8011cf4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cfa:	d00a      	beq.n	8011d12 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	4b13      	ldr	r3, [pc, #76]	@ (8011d50 <udp_input_local_match+0xc4>)
 8011d02:	695b      	ldr	r3, [r3, #20]
 8011d04:	405a      	eors	r2, r3
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	3308      	adds	r3, #8
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d110      	bne.n	8011d34 <udp_input_local_match+0xa8>
          return 1;
 8011d12:	2301      	movs	r3, #1
 8011d14:	e00f      	b.n	8011d36 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d009      	beq.n	8011d30 <udp_input_local_match+0xa4>
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d005      	beq.n	8011d30 <udp_input_local_match+0xa4>
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	681a      	ldr	r2, [r3, #0]
 8011d28:	4b09      	ldr	r3, [pc, #36]	@ (8011d50 <udp_input_local_match+0xc4>)
 8011d2a:	695b      	ldr	r3, [r3, #20]
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	d101      	bne.n	8011d34 <udp_input_local_match+0xa8>
        return 1;
 8011d30:	2301      	movs	r3, #1
 8011d32:	e000      	b.n	8011d36 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011d34:	2300      	movs	r3, #0
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3710      	adds	r7, #16
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	bd80      	pop	{r7, pc}
 8011d3e:	bf00      	nop
 8011d40:	08017b10 	.word	0x08017b10
 8011d44:	08017b40 	.word	0x08017b40
 8011d48:	08017b64 	.word	0x08017b64
 8011d4c:	08017b8c 	.word	0x08017b8c
 8011d50:	20005b34 	.word	0x20005b34

08011d54 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011d54:	b590      	push	{r4, r7, lr}
 8011d56:	b08d      	sub	sp, #52	@ 0x34
 8011d58:	af02      	add	r7, sp, #8
 8011d5a:	6078      	str	r0, [r7, #4]
 8011d5c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d105      	bne.n	8011d74 <udp_input+0x20>
 8011d68:	4b7c      	ldr	r3, [pc, #496]	@ (8011f5c <udp_input+0x208>)
 8011d6a:	22cf      	movs	r2, #207	@ 0xcf
 8011d6c:	497c      	ldr	r1, [pc, #496]	@ (8011f60 <udp_input+0x20c>)
 8011d6e:	487d      	ldr	r0, [pc, #500]	@ (8011f64 <udp_input+0x210>)
 8011d70:	f002 ffde 	bl	8014d30 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d105      	bne.n	8011d86 <udp_input+0x32>
 8011d7a:	4b78      	ldr	r3, [pc, #480]	@ (8011f5c <udp_input+0x208>)
 8011d7c:	22d0      	movs	r2, #208	@ 0xd0
 8011d7e:	497a      	ldr	r1, [pc, #488]	@ (8011f68 <udp_input+0x214>)
 8011d80:	4878      	ldr	r0, [pc, #480]	@ (8011f64 <udp_input+0x210>)
 8011d82:	f002 ffd5 	bl	8014d30 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	895b      	ldrh	r3, [r3, #10]
 8011d8a:	2b07      	cmp	r3, #7
 8011d8c:	d803      	bhi.n	8011d96 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f7fa f960 	bl	800c054 <pbuf_free>
    goto end;
 8011d94:	e0de      	b.n	8011f54 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011d9c:	4b73      	ldr	r3, [pc, #460]	@ (8011f6c <udp_input+0x218>)
 8011d9e:	695b      	ldr	r3, [r3, #20]
 8011da0:	4a72      	ldr	r2, [pc, #456]	@ (8011f6c <udp_input+0x218>)
 8011da2:	6812      	ldr	r2, [r2, #0]
 8011da4:	4611      	mov	r1, r2
 8011da6:	4618      	mov	r0, r3
 8011da8:	f001 ff6c 	bl	8013c84 <ip4_addr_isbroadcast_u32>
 8011dac:	4603      	mov	r3, r0
 8011dae:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	881b      	ldrh	r3, [r3, #0]
 8011db4:	b29b      	uxth	r3, r3
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7f8 fdee 	bl	800a998 <lwip_htons>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	885b      	ldrh	r3, [r3, #2]
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7f8 fde6 	bl	800a998 <lwip_htons>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ddc:	4b64      	ldr	r3, [pc, #400]	@ (8011f70 <udp_input+0x21c>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8011de2:	e054      	b.n	8011e8e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011de6:	8a5b      	ldrh	r3, [r3, #18]
 8011de8:	89fa      	ldrh	r2, [r7, #14]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d14a      	bne.n	8011e84 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011dee:	7cfb      	ldrb	r3, [r7, #19]
 8011df0:	461a      	mov	r2, r3
 8011df2:	6839      	ldr	r1, [r7, #0]
 8011df4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011df6:	f7ff ff49 	bl	8011c8c <udp_input_local_match>
 8011dfa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d041      	beq.n	8011e84 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e02:	7c1b      	ldrb	r3, [r3, #16]
 8011e04:	f003 0304 	and.w	r3, r3, #4
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d11d      	bne.n	8011e48 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011e0c:	69fb      	ldr	r3, [r7, #28]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d102      	bne.n	8011e18 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e14:	61fb      	str	r3, [r7, #28]
 8011e16:	e017      	b.n	8011e48 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011e18:	7cfb      	ldrb	r3, [r7, #19]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d014      	beq.n	8011e48 <udp_input+0xf4>
 8011e1e:	4b53      	ldr	r3, [pc, #332]	@ (8011f6c <udp_input+0x218>)
 8011e20:	695b      	ldr	r3, [r3, #20]
 8011e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e26:	d10f      	bne.n	8011e48 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011e28:	69fb      	ldr	r3, [r7, #28]
 8011e2a:	681a      	ldr	r2, [r3, #0]
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	3304      	adds	r3, #4
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d008      	beq.n	8011e48 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e38:	681a      	ldr	r2, [r3, #0]
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	3304      	adds	r3, #4
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d101      	bne.n	8011e48 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e46:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e4a:	8a9b      	ldrh	r3, [r3, #20]
 8011e4c:	8a3a      	ldrh	r2, [r7, #16]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d118      	bne.n	8011e84 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e54:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d005      	beq.n	8011e66 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e5c:	685a      	ldr	r2, [r3, #4]
 8011e5e:	4b43      	ldr	r3, [pc, #268]	@ (8011f6c <udp_input+0x218>)
 8011e60:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d10e      	bne.n	8011e84 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011e66:	6a3b      	ldr	r3, [r7, #32]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d014      	beq.n	8011e96 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e6e:	68da      	ldr	r2, [r3, #12]
 8011e70:	6a3b      	ldr	r3, [r7, #32]
 8011e72:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011e74:	4b3e      	ldr	r3, [pc, #248]	@ (8011f70 <udp_input+0x21c>)
 8011e76:	681a      	ldr	r2, [r3, #0]
 8011e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e7a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011e7c:	4a3c      	ldr	r2, [pc, #240]	@ (8011f70 <udp_input+0x21c>)
 8011e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e80:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011e82:	e008      	b.n	8011e96 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e86:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e8a:	68db      	ldr	r3, [r3, #12]
 8011e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d1a7      	bne.n	8011de4 <udp_input+0x90>
 8011e94:	e000      	b.n	8011e98 <udp_input+0x144>
        break;
 8011e96:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d101      	bne.n	8011ea2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011e9e:	69fb      	ldr	r3, [r7, #28]
 8011ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d002      	beq.n	8011eae <udp_input+0x15a>
    for_us = 1;
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	76fb      	strb	r3, [r7, #27]
 8011eac:	e00a      	b.n	8011ec4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	3304      	adds	r3, #4
 8011eb2:	681a      	ldr	r2, [r3, #0]
 8011eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8011f6c <udp_input+0x218>)
 8011eb6:	695b      	ldr	r3, [r3, #20]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	bf0c      	ite	eq
 8011ebc:	2301      	moveq	r3, #1
 8011ebe:	2300      	movne	r3, #0
 8011ec0:	b2db      	uxtb	r3, r3
 8011ec2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011ec4:	7efb      	ldrb	r3, [r7, #27]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d041      	beq.n	8011f4e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011eca:	2108      	movs	r1, #8
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f7fa f83b 	bl	800bf48 <pbuf_remove_header>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d00a      	beq.n	8011eee <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011ed8:	4b20      	ldr	r3, [pc, #128]	@ (8011f5c <udp_input+0x208>)
 8011eda:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8011ede:	4925      	ldr	r1, [pc, #148]	@ (8011f74 <udp_input+0x220>)
 8011ee0:	4820      	ldr	r0, [pc, #128]	@ (8011f64 <udp_input+0x210>)
 8011ee2:	f002 ff25 	bl	8014d30 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f7fa f8b4 	bl	800c054 <pbuf_free>
      goto end;
 8011eec:	e032      	b.n	8011f54 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d012      	beq.n	8011f1a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ef6:	699b      	ldr	r3, [r3, #24]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d00a      	beq.n	8011f12 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011efe:	699c      	ldr	r4, [r3, #24]
 8011f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f02:	69d8      	ldr	r0, [r3, #28]
 8011f04:	8a3b      	ldrh	r3, [r7, #16]
 8011f06:	9300      	str	r3, [sp, #0]
 8011f08:	4b1b      	ldr	r3, [pc, #108]	@ (8011f78 <udp_input+0x224>)
 8011f0a:	687a      	ldr	r2, [r7, #4]
 8011f0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011f0e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011f10:	e021      	b.n	8011f56 <udp_input+0x202>
        pbuf_free(p);
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f7fa f89e 	bl	800c054 <pbuf_free>
        goto end;
 8011f18:	e01c      	b.n	8011f54 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011f1a:	7cfb      	ldrb	r3, [r7, #19]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d112      	bne.n	8011f46 <udp_input+0x1f2>
 8011f20:	4b12      	ldr	r3, [pc, #72]	@ (8011f6c <udp_input+0x218>)
 8011f22:	695b      	ldr	r3, [r3, #20]
 8011f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011f28:	2be0      	cmp	r3, #224	@ 0xe0
 8011f2a:	d00c      	beq.n	8011f46 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8011f6c <udp_input+0x218>)
 8011f2e:	899b      	ldrh	r3, [r3, #12]
 8011f30:	3308      	adds	r3, #8
 8011f32:	b29b      	uxth	r3, r3
 8011f34:	b21b      	sxth	r3, r3
 8011f36:	4619      	mov	r1, r3
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f7fa f878 	bl	800c02e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011f3e:	2103      	movs	r1, #3
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f001 fb7f 	bl	8013644 <icmp_dest_unreach>
      pbuf_free(p);
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f7fa f884 	bl	800c054 <pbuf_free>
  return;
 8011f4c:	e003      	b.n	8011f56 <udp_input+0x202>
    pbuf_free(p);
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f7fa f880 	bl	800c054 <pbuf_free>
  return;
 8011f54:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011f56:	372c      	adds	r7, #44	@ 0x2c
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd90      	pop	{r4, r7, pc}
 8011f5c:	08017b10 	.word	0x08017b10
 8011f60:	08017bb4 	.word	0x08017bb4
 8011f64:	08017b64 	.word	0x08017b64
 8011f68:	08017bcc 	.word	0x08017bcc
 8011f6c:	20005b34 	.word	0x20005b34
 8011f70:	2000b2c0 	.word	0x2000b2c0
 8011f74:	08017be8 	.word	0x08017be8
 8011f78:	20005b44 	.word	0x20005b44

08011f7c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b088      	sub	sp, #32
 8011f80:	af02      	add	r7, sp, #8
 8011f82:	60f8      	str	r0, [r7, #12]
 8011f84:	60b9      	str	r1, [r7, #8]
 8011f86:	607a      	str	r2, [r7, #4]
 8011f88:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d109      	bne.n	8011fa4 <udp_sendto+0x28>
 8011f90:	4b23      	ldr	r3, [pc, #140]	@ (8012020 <udp_sendto+0xa4>)
 8011f92:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011f96:	4923      	ldr	r1, [pc, #140]	@ (8012024 <udp_sendto+0xa8>)
 8011f98:	4823      	ldr	r0, [pc, #140]	@ (8012028 <udp_sendto+0xac>)
 8011f9a:	f002 fec9 	bl	8014d30 <iprintf>
 8011f9e:	f06f 030f 	mvn.w	r3, #15
 8011fa2:	e038      	b.n	8012016 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d109      	bne.n	8011fbe <udp_sendto+0x42>
 8011faa:	4b1d      	ldr	r3, [pc, #116]	@ (8012020 <udp_sendto+0xa4>)
 8011fac:	f240 2219 	movw	r2, #537	@ 0x219
 8011fb0:	491e      	ldr	r1, [pc, #120]	@ (801202c <udp_sendto+0xb0>)
 8011fb2:	481d      	ldr	r0, [pc, #116]	@ (8012028 <udp_sendto+0xac>)
 8011fb4:	f002 febc 	bl	8014d30 <iprintf>
 8011fb8:	f06f 030f 	mvn.w	r3, #15
 8011fbc:	e02b      	b.n	8012016 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d109      	bne.n	8011fd8 <udp_sendto+0x5c>
 8011fc4:	4b16      	ldr	r3, [pc, #88]	@ (8012020 <udp_sendto+0xa4>)
 8011fc6:	f240 221a 	movw	r2, #538	@ 0x21a
 8011fca:	4919      	ldr	r1, [pc, #100]	@ (8012030 <udp_sendto+0xb4>)
 8011fcc:	4816      	ldr	r0, [pc, #88]	@ (8012028 <udp_sendto+0xac>)
 8011fce:	f002 feaf 	bl	8014d30 <iprintf>
 8011fd2:	f06f 030f 	mvn.w	r3, #15
 8011fd6:	e01e      	b.n	8012016 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	7a1b      	ldrb	r3, [r3, #8]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d006      	beq.n	8011fee <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	7a1b      	ldrb	r3, [r3, #8]
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7f9 fcd5 	bl	800b994 <netif_get_by_index>
 8011fea:	6178      	str	r0, [r7, #20]
 8011fec:	e003      	b.n	8011ff6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f001 fbb2 	bl	8013758 <ip4_route>
 8011ff4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d102      	bne.n	8012002 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8011ffc:	f06f 0303 	mvn.w	r3, #3
 8012000:	e009      	b.n	8012016 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8012002:	887a      	ldrh	r2, [r7, #2]
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	9300      	str	r3, [sp, #0]
 8012008:	4613      	mov	r3, r2
 801200a:	687a      	ldr	r2, [r7, #4]
 801200c:	68b9      	ldr	r1, [r7, #8]
 801200e:	68f8      	ldr	r0, [r7, #12]
 8012010:	f000 f810 	bl	8012034 <udp_sendto_if>
 8012014:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012016:	4618      	mov	r0, r3
 8012018:	3718      	adds	r7, #24
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
 801201e:	bf00      	nop
 8012020:	08017b10 	.word	0x08017b10
 8012024:	08017c34 	.word	0x08017c34
 8012028:	08017b64 	.word	0x08017b64
 801202c:	08017c4c 	.word	0x08017c4c
 8012030:	08017c68 	.word	0x08017c68

08012034 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b088      	sub	sp, #32
 8012038:	af02      	add	r7, sp, #8
 801203a:	60f8      	str	r0, [r7, #12]
 801203c:	60b9      	str	r1, [r7, #8]
 801203e:	607a      	str	r2, [r7, #4]
 8012040:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d109      	bne.n	801205c <udp_sendto_if+0x28>
 8012048:	4b2e      	ldr	r3, [pc, #184]	@ (8012104 <udp_sendto_if+0xd0>)
 801204a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801204e:	492e      	ldr	r1, [pc, #184]	@ (8012108 <udp_sendto_if+0xd4>)
 8012050:	482e      	ldr	r0, [pc, #184]	@ (801210c <udp_sendto_if+0xd8>)
 8012052:	f002 fe6d 	bl	8014d30 <iprintf>
 8012056:	f06f 030f 	mvn.w	r3, #15
 801205a:	e04f      	b.n	80120fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d109      	bne.n	8012076 <udp_sendto_if+0x42>
 8012062:	4b28      	ldr	r3, [pc, #160]	@ (8012104 <udp_sendto_if+0xd0>)
 8012064:	f240 2281 	movw	r2, #641	@ 0x281
 8012068:	4929      	ldr	r1, [pc, #164]	@ (8012110 <udp_sendto_if+0xdc>)
 801206a:	4828      	ldr	r0, [pc, #160]	@ (801210c <udp_sendto_if+0xd8>)
 801206c:	f002 fe60 	bl	8014d30 <iprintf>
 8012070:	f06f 030f 	mvn.w	r3, #15
 8012074:	e042      	b.n	80120fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d109      	bne.n	8012090 <udp_sendto_if+0x5c>
 801207c:	4b21      	ldr	r3, [pc, #132]	@ (8012104 <udp_sendto_if+0xd0>)
 801207e:	f240 2282 	movw	r2, #642	@ 0x282
 8012082:	4924      	ldr	r1, [pc, #144]	@ (8012114 <udp_sendto_if+0xe0>)
 8012084:	4821      	ldr	r0, [pc, #132]	@ (801210c <udp_sendto_if+0xd8>)
 8012086:	f002 fe53 	bl	8014d30 <iprintf>
 801208a:	f06f 030f 	mvn.w	r3, #15
 801208e:	e035      	b.n	80120fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012090:	6a3b      	ldr	r3, [r7, #32]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d109      	bne.n	80120aa <udp_sendto_if+0x76>
 8012096:	4b1b      	ldr	r3, [pc, #108]	@ (8012104 <udp_sendto_if+0xd0>)
 8012098:	f240 2283 	movw	r2, #643	@ 0x283
 801209c:	491e      	ldr	r1, [pc, #120]	@ (8012118 <udp_sendto_if+0xe4>)
 801209e:	481b      	ldr	r0, [pc, #108]	@ (801210c <udp_sendto_if+0xd8>)
 80120a0:	f002 fe46 	bl	8014d30 <iprintf>
 80120a4:	f06f 030f 	mvn.w	r3, #15
 80120a8:	e028      	b.n	80120fc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d009      	beq.n	80120c4 <udp_sendto_if+0x90>
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d005      	beq.n	80120c4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80120c0:	2be0      	cmp	r3, #224	@ 0xe0
 80120c2:	d103      	bne.n	80120cc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80120c4:	6a3b      	ldr	r3, [r7, #32]
 80120c6:	3304      	adds	r3, #4
 80120c8:	617b      	str	r3, [r7, #20]
 80120ca:	e00b      	b.n	80120e4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	681a      	ldr	r2, [r3, #0]
 80120d0:	6a3b      	ldr	r3, [r7, #32]
 80120d2:	3304      	adds	r3, #4
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	429a      	cmp	r2, r3
 80120d8:	d002      	beq.n	80120e0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80120da:	f06f 0303 	mvn.w	r3, #3
 80120de:	e00d      	b.n	80120fc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80120e4:	887a      	ldrh	r2, [r7, #2]
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	9301      	str	r3, [sp, #4]
 80120ea:	6a3b      	ldr	r3, [r7, #32]
 80120ec:	9300      	str	r3, [sp, #0]
 80120ee:	4613      	mov	r3, r2
 80120f0:	687a      	ldr	r2, [r7, #4]
 80120f2:	68b9      	ldr	r1, [r7, #8]
 80120f4:	68f8      	ldr	r0, [r7, #12]
 80120f6:	f000 f811 	bl	801211c <udp_sendto_if_src>
 80120fa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80120fc:	4618      	mov	r0, r3
 80120fe:	3718      	adds	r7, #24
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}
 8012104:	08017b10 	.word	0x08017b10
 8012108:	08017c84 	.word	0x08017c84
 801210c:	08017b64 	.word	0x08017b64
 8012110:	08017ca0 	.word	0x08017ca0
 8012114:	08017cbc 	.word	0x08017cbc
 8012118:	08017cdc 	.word	0x08017cdc

0801211c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b08c      	sub	sp, #48	@ 0x30
 8012120:	af04      	add	r7, sp, #16
 8012122:	60f8      	str	r0, [r7, #12]
 8012124:	60b9      	str	r1, [r7, #8]
 8012126:	607a      	str	r2, [r7, #4]
 8012128:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d109      	bne.n	8012144 <udp_sendto_if_src+0x28>
 8012130:	4b65      	ldr	r3, [pc, #404]	@ (80122c8 <udp_sendto_if_src+0x1ac>)
 8012132:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8012136:	4965      	ldr	r1, [pc, #404]	@ (80122cc <udp_sendto_if_src+0x1b0>)
 8012138:	4865      	ldr	r0, [pc, #404]	@ (80122d0 <udp_sendto_if_src+0x1b4>)
 801213a:	f002 fdf9 	bl	8014d30 <iprintf>
 801213e:	f06f 030f 	mvn.w	r3, #15
 8012142:	e0bc      	b.n	80122be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d109      	bne.n	801215e <udp_sendto_if_src+0x42>
 801214a:	4b5f      	ldr	r3, [pc, #380]	@ (80122c8 <udp_sendto_if_src+0x1ac>)
 801214c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8012150:	4960      	ldr	r1, [pc, #384]	@ (80122d4 <udp_sendto_if_src+0x1b8>)
 8012152:	485f      	ldr	r0, [pc, #380]	@ (80122d0 <udp_sendto_if_src+0x1b4>)
 8012154:	f002 fdec 	bl	8014d30 <iprintf>
 8012158:	f06f 030f 	mvn.w	r3, #15
 801215c:	e0af      	b.n	80122be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d109      	bne.n	8012178 <udp_sendto_if_src+0x5c>
 8012164:	4b58      	ldr	r3, [pc, #352]	@ (80122c8 <udp_sendto_if_src+0x1ac>)
 8012166:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801216a:	495b      	ldr	r1, [pc, #364]	@ (80122d8 <udp_sendto_if_src+0x1bc>)
 801216c:	4858      	ldr	r0, [pc, #352]	@ (80122d0 <udp_sendto_if_src+0x1b4>)
 801216e:	f002 fddf 	bl	8014d30 <iprintf>
 8012172:	f06f 030f 	mvn.w	r3, #15
 8012176:	e0a2      	b.n	80122be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801217a:	2b00      	cmp	r3, #0
 801217c:	d109      	bne.n	8012192 <udp_sendto_if_src+0x76>
 801217e:	4b52      	ldr	r3, [pc, #328]	@ (80122c8 <udp_sendto_if_src+0x1ac>)
 8012180:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8012184:	4955      	ldr	r1, [pc, #340]	@ (80122dc <udp_sendto_if_src+0x1c0>)
 8012186:	4852      	ldr	r0, [pc, #328]	@ (80122d0 <udp_sendto_if_src+0x1b4>)
 8012188:	f002 fdd2 	bl	8014d30 <iprintf>
 801218c:	f06f 030f 	mvn.w	r3, #15
 8012190:	e095      	b.n	80122be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8012192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012194:	2b00      	cmp	r3, #0
 8012196:	d109      	bne.n	80121ac <udp_sendto_if_src+0x90>
 8012198:	4b4b      	ldr	r3, [pc, #300]	@ (80122c8 <udp_sendto_if_src+0x1ac>)
 801219a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801219e:	4950      	ldr	r1, [pc, #320]	@ (80122e0 <udp_sendto_if_src+0x1c4>)
 80121a0:	484b      	ldr	r0, [pc, #300]	@ (80122d0 <udp_sendto_if_src+0x1b4>)
 80121a2:	f002 fdc5 	bl	8014d30 <iprintf>
 80121a6:	f06f 030f 	mvn.w	r3, #15
 80121aa:	e088      	b.n	80122be <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	8a5b      	ldrh	r3, [r3, #18]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d10f      	bne.n	80121d4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80121b4:	68f9      	ldr	r1, [r7, #12]
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	8a5b      	ldrh	r3, [r3, #18]
 80121ba:	461a      	mov	r2, r3
 80121bc:	68f8      	ldr	r0, [r7, #12]
 80121be:	f000 f893 	bl	80122e8 <udp_bind>
 80121c2:	4603      	mov	r3, r0
 80121c4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80121c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d002      	beq.n	80121d4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80121ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80121d2:	e074      	b.n	80122be <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	891b      	ldrh	r3, [r3, #8]
 80121d8:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80121dc:	4293      	cmp	r3, r2
 80121de:	d902      	bls.n	80121e6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80121e0:	f04f 33ff 	mov.w	r3, #4294967295
 80121e4:	e06b      	b.n	80122be <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80121e6:	2108      	movs	r1, #8
 80121e8:	68b8      	ldr	r0, [r7, #8]
 80121ea:	f7f9 fe9d 	bl	800bf28 <pbuf_add_header>
 80121ee:	4603      	mov	r3, r0
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d015      	beq.n	8012220 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80121f4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80121f8:	2108      	movs	r1, #8
 80121fa:	2022      	movs	r0, #34	@ 0x22
 80121fc:	f7f9 fc46 	bl	800ba8c <pbuf_alloc>
 8012200:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012202:	69fb      	ldr	r3, [r7, #28]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d102      	bne.n	801220e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012208:	f04f 33ff 	mov.w	r3, #4294967295
 801220c:	e057      	b.n	80122be <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	891b      	ldrh	r3, [r3, #8]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d006      	beq.n	8012224 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012216:	68b9      	ldr	r1, [r7, #8]
 8012218:	69f8      	ldr	r0, [r7, #28]
 801221a:	f7fa f833 	bl	800c284 <pbuf_chain>
 801221e:	e001      	b.n	8012224 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012224:	69fb      	ldr	r3, [r7, #28]
 8012226:	895b      	ldrh	r3, [r3, #10]
 8012228:	2b07      	cmp	r3, #7
 801222a:	d806      	bhi.n	801223a <udp_sendto_if_src+0x11e>
 801222c:	4b26      	ldr	r3, [pc, #152]	@ (80122c8 <udp_sendto_if_src+0x1ac>)
 801222e:	f240 320d 	movw	r2, #781	@ 0x30d
 8012232:	492c      	ldr	r1, [pc, #176]	@ (80122e4 <udp_sendto_if_src+0x1c8>)
 8012234:	4826      	ldr	r0, [pc, #152]	@ (80122d0 <udp_sendto_if_src+0x1b4>)
 8012236:	f002 fd7b 	bl	8014d30 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	685b      	ldr	r3, [r3, #4]
 801223e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	8a5b      	ldrh	r3, [r3, #18]
 8012244:	4618      	mov	r0, r3
 8012246:	f7f8 fba7 	bl	800a998 <lwip_htons>
 801224a:	4603      	mov	r3, r0
 801224c:	461a      	mov	r2, r3
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012252:	887b      	ldrh	r3, [r7, #2]
 8012254:	4618      	mov	r0, r3
 8012256:	f7f8 fb9f 	bl	800a998 <lwip_htons>
 801225a:	4603      	mov	r3, r0
 801225c:	461a      	mov	r2, r3
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	2200      	movs	r2, #0
 8012266:	719a      	strb	r2, [r3, #6]
 8012268:	2200      	movs	r2, #0
 801226a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801226c:	69fb      	ldr	r3, [r7, #28]
 801226e:	891b      	ldrh	r3, [r3, #8]
 8012270:	4618      	mov	r0, r3
 8012272:	f7f8 fb91 	bl	800a998 <lwip_htons>
 8012276:	4603      	mov	r3, r0
 8012278:	461a      	mov	r2, r3
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801227e:	2311      	movs	r3, #17
 8012280:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	7adb      	ldrb	r3, [r3, #11]
 8012286:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	7a9b      	ldrb	r3, [r3, #10]
 801228c:	7cb9      	ldrb	r1, [r7, #18]
 801228e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012290:	9202      	str	r2, [sp, #8]
 8012292:	7cfa      	ldrb	r2, [r7, #19]
 8012294:	9201      	str	r2, [sp, #4]
 8012296:	9300      	str	r3, [sp, #0]
 8012298:	460b      	mov	r3, r1
 801229a:	687a      	ldr	r2, [r7, #4]
 801229c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801229e:	69f8      	ldr	r0, [r7, #28]
 80122a0:	f001 fc42 	bl	8013b28 <ip4_output_if_src>
 80122a4:	4603      	mov	r3, r0
 80122a6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80122a8:	69fa      	ldr	r2, [r7, #28]
 80122aa:	68bb      	ldr	r3, [r7, #8]
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d004      	beq.n	80122ba <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80122b0:	69f8      	ldr	r0, [r7, #28]
 80122b2:	f7f9 fecf 	bl	800c054 <pbuf_free>
    q = NULL;
 80122b6:	2300      	movs	r3, #0
 80122b8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80122ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3720      	adds	r7, #32
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
 80122c6:	bf00      	nop
 80122c8:	08017b10 	.word	0x08017b10
 80122cc:	08017cfc 	.word	0x08017cfc
 80122d0:	08017b64 	.word	0x08017b64
 80122d4:	08017d1c 	.word	0x08017d1c
 80122d8:	08017d3c 	.word	0x08017d3c
 80122dc:	08017d60 	.word	0x08017d60
 80122e0:	08017d84 	.word	0x08017d84
 80122e4:	08017da8 	.word	0x08017da8

080122e8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b086      	sub	sp, #24
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	60f8      	str	r0, [r7, #12]
 80122f0:	60b9      	str	r1, [r7, #8]
 80122f2:	4613      	mov	r3, r2
 80122f4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d101      	bne.n	8012300 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80122fc:	4b39      	ldr	r3, [pc, #228]	@ (80123e4 <udp_bind+0xfc>)
 80122fe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d109      	bne.n	801231a <udp_bind+0x32>
 8012306:	4b38      	ldr	r3, [pc, #224]	@ (80123e8 <udp_bind+0x100>)
 8012308:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801230c:	4937      	ldr	r1, [pc, #220]	@ (80123ec <udp_bind+0x104>)
 801230e:	4838      	ldr	r0, [pc, #224]	@ (80123f0 <udp_bind+0x108>)
 8012310:	f002 fd0e 	bl	8014d30 <iprintf>
 8012314:	f06f 030f 	mvn.w	r3, #15
 8012318:	e060      	b.n	80123dc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801231a:	2300      	movs	r3, #0
 801231c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801231e:	4b35      	ldr	r3, [pc, #212]	@ (80123f4 <udp_bind+0x10c>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	617b      	str	r3, [r7, #20]
 8012324:	e009      	b.n	801233a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012326:	68fa      	ldr	r2, [r7, #12]
 8012328:	697b      	ldr	r3, [r7, #20]
 801232a:	429a      	cmp	r2, r3
 801232c:	d102      	bne.n	8012334 <udp_bind+0x4c>
      rebind = 1;
 801232e:	2301      	movs	r3, #1
 8012330:	74fb      	strb	r3, [r7, #19]
      break;
 8012332:	e005      	b.n	8012340 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	68db      	ldr	r3, [r3, #12]
 8012338:	617b      	str	r3, [r7, #20]
 801233a:	697b      	ldr	r3, [r7, #20]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d1f2      	bne.n	8012326 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012340:	88fb      	ldrh	r3, [r7, #6]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d109      	bne.n	801235a <udp_bind+0x72>
    port = udp_new_port();
 8012346:	f7ff fc69 	bl	8011c1c <udp_new_port>
 801234a:	4603      	mov	r3, r0
 801234c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801234e:	88fb      	ldrh	r3, [r7, #6]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d12c      	bne.n	80123ae <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012354:	f06f 0307 	mvn.w	r3, #7
 8012358:	e040      	b.n	80123dc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801235a:	4b26      	ldr	r3, [pc, #152]	@ (80123f4 <udp_bind+0x10c>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	617b      	str	r3, [r7, #20]
 8012360:	e022      	b.n	80123a8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012362:	68fa      	ldr	r2, [r7, #12]
 8012364:	697b      	ldr	r3, [r7, #20]
 8012366:	429a      	cmp	r2, r3
 8012368:	d01b      	beq.n	80123a2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	8a5b      	ldrh	r3, [r3, #18]
 801236e:	88fa      	ldrh	r2, [r7, #6]
 8012370:	429a      	cmp	r2, r3
 8012372:	d116      	bne.n	80123a2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012374:	697b      	ldr	r3, [r7, #20]
 8012376:	681a      	ldr	r2, [r3, #0]
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801237c:	429a      	cmp	r2, r3
 801237e:	d00d      	beq.n	801239c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d00a      	beq.n	801239c <udp_bind+0xb4>
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d006      	beq.n	801239c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801238e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012390:	2b00      	cmp	r3, #0
 8012392:	d003      	beq.n	801239c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d102      	bne.n	80123a2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801239c:	f06f 0307 	mvn.w	r3, #7
 80123a0:	e01c      	b.n	80123dc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	68db      	ldr	r3, [r3, #12]
 80123a6:	617b      	str	r3, [r7, #20]
 80123a8:	697b      	ldr	r3, [r7, #20]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d1d9      	bne.n	8012362 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d002      	beq.n	80123ba <udp_bind+0xd2>
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	e000      	b.n	80123bc <udp_bind+0xd4>
 80123ba:	2300      	movs	r3, #0
 80123bc:	68fa      	ldr	r2, [r7, #12]
 80123be:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	88fa      	ldrh	r2, [r7, #6]
 80123c4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80123c6:	7cfb      	ldrb	r3, [r7, #19]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d106      	bne.n	80123da <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80123cc:	4b09      	ldr	r3, [pc, #36]	@ (80123f4 <udp_bind+0x10c>)
 80123ce:	681a      	ldr	r2, [r3, #0]
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80123d4:	4a07      	ldr	r2, [pc, #28]	@ (80123f4 <udp_bind+0x10c>)
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80123da:	2300      	movs	r3, #0
}
 80123dc:	4618      	mov	r0, r3
 80123de:	3718      	adds	r7, #24
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}
 80123e4:	08018634 	.word	0x08018634
 80123e8:	08017b10 	.word	0x08017b10
 80123ec:	08017dd8 	.word	0x08017dd8
 80123f0:	08017b64 	.word	0x08017b64
 80123f4:	2000b2c0 	.word	0x2000b2c0

080123f8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b086      	sub	sp, #24
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	60f8      	str	r0, [r7, #12]
 8012400:	60b9      	str	r1, [r7, #8]
 8012402:	4613      	mov	r3, r2
 8012404:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d109      	bne.n	8012420 <udp_connect+0x28>
 801240c:	4b2c      	ldr	r3, [pc, #176]	@ (80124c0 <udp_connect+0xc8>)
 801240e:	f240 4235 	movw	r2, #1077	@ 0x435
 8012412:	492c      	ldr	r1, [pc, #176]	@ (80124c4 <udp_connect+0xcc>)
 8012414:	482c      	ldr	r0, [pc, #176]	@ (80124c8 <udp_connect+0xd0>)
 8012416:	f002 fc8b 	bl	8014d30 <iprintf>
 801241a:	f06f 030f 	mvn.w	r3, #15
 801241e:	e04b      	b.n	80124b8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012420:	68bb      	ldr	r3, [r7, #8]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d109      	bne.n	801243a <udp_connect+0x42>
 8012426:	4b26      	ldr	r3, [pc, #152]	@ (80124c0 <udp_connect+0xc8>)
 8012428:	f240 4236 	movw	r2, #1078	@ 0x436
 801242c:	4927      	ldr	r1, [pc, #156]	@ (80124cc <udp_connect+0xd4>)
 801242e:	4826      	ldr	r0, [pc, #152]	@ (80124c8 <udp_connect+0xd0>)
 8012430:	f002 fc7e 	bl	8014d30 <iprintf>
 8012434:	f06f 030f 	mvn.w	r3, #15
 8012438:	e03e      	b.n	80124b8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	8a5b      	ldrh	r3, [r3, #18]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d10f      	bne.n	8012462 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012442:	68f9      	ldr	r1, [r7, #12]
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	8a5b      	ldrh	r3, [r3, #18]
 8012448:	461a      	mov	r2, r3
 801244a:	68f8      	ldr	r0, [r7, #12]
 801244c:	f7ff ff4c 	bl	80122e8 <udp_bind>
 8012450:	4603      	mov	r3, r0
 8012452:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012454:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d002      	beq.n	8012462 <udp_connect+0x6a>
      return err;
 801245c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012460:	e02a      	b.n	80124b8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d002      	beq.n	801246e <udp_connect+0x76>
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	e000      	b.n	8012470 <udp_connect+0x78>
 801246e:	2300      	movs	r3, #0
 8012470:	68fa      	ldr	r2, [r7, #12]
 8012472:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	88fa      	ldrh	r2, [r7, #6]
 8012478:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	7c1b      	ldrb	r3, [r3, #16]
 801247e:	f043 0304 	orr.w	r3, r3, #4
 8012482:	b2da      	uxtb	r2, r3
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012488:	4b11      	ldr	r3, [pc, #68]	@ (80124d0 <udp_connect+0xd8>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	617b      	str	r3, [r7, #20]
 801248e:	e008      	b.n	80124a2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8012490:	68fa      	ldr	r2, [r7, #12]
 8012492:	697b      	ldr	r3, [r7, #20]
 8012494:	429a      	cmp	r2, r3
 8012496:	d101      	bne.n	801249c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012498:	2300      	movs	r3, #0
 801249a:	e00d      	b.n	80124b8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	68db      	ldr	r3, [r3, #12]
 80124a0:	617b      	str	r3, [r7, #20]
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d1f3      	bne.n	8012490 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80124a8:	4b09      	ldr	r3, [pc, #36]	@ (80124d0 <udp_connect+0xd8>)
 80124aa:	681a      	ldr	r2, [r3, #0]
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80124b0:	4a07      	ldr	r2, [pc, #28]	@ (80124d0 <udp_connect+0xd8>)
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80124b6:	2300      	movs	r3, #0
}
 80124b8:	4618      	mov	r0, r3
 80124ba:	3718      	adds	r7, #24
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}
 80124c0:	08017b10 	.word	0x08017b10
 80124c4:	08017df0 	.word	0x08017df0
 80124c8:	08017b64 	.word	0x08017b64
 80124cc:	08017e0c 	.word	0x08017e0c
 80124d0:	2000b2c0 	.word	0x2000b2c0

080124d4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b084      	sub	sp, #16
 80124d8:	af00      	add	r7, sp, #0
 80124da:	60f8      	str	r0, [r7, #12]
 80124dc:	60b9      	str	r1, [r7, #8]
 80124de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d107      	bne.n	80124f6 <udp_recv+0x22>
 80124e6:	4b08      	ldr	r3, [pc, #32]	@ (8012508 <udp_recv+0x34>)
 80124e8:	f240 428a 	movw	r2, #1162	@ 0x48a
 80124ec:	4907      	ldr	r1, [pc, #28]	@ (801250c <udp_recv+0x38>)
 80124ee:	4808      	ldr	r0, [pc, #32]	@ (8012510 <udp_recv+0x3c>)
 80124f0:	f002 fc1e 	bl	8014d30 <iprintf>
 80124f4:	e005      	b.n	8012502 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	68ba      	ldr	r2, [r7, #8]
 80124fa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	687a      	ldr	r2, [r7, #4]
 8012500:	61da      	str	r2, [r3, #28]
}
 8012502:	3710      	adds	r7, #16
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}
 8012508:	08017b10 	.word	0x08017b10
 801250c:	08017e44 	.word	0x08017e44
 8012510:	08017b64 	.word	0x08017b64

08012514 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801251a:	2000      	movs	r0, #0
 801251c:	f7f8 feb4 	bl	800b288 <memp_malloc>
 8012520:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d007      	beq.n	8012538 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012528:	2220      	movs	r2, #32
 801252a:	2100      	movs	r1, #0
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f002 fc64 	bl	8014dfa <memset>
    pcb->ttl = UDP_TTL;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	22ff      	movs	r2, #255	@ 0xff
 8012536:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012538:	687b      	ldr	r3, [r7, #4]
}
 801253a:	4618      	mov	r0, r3
 801253c:	3708      	adds	r7, #8
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
	...

08012544 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012544:	b480      	push	{r7}
 8012546:	b085      	sub	sp, #20
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d01e      	beq.n	8012592 <udp_netif_ip_addr_changed+0x4e>
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d01a      	beq.n	8012592 <udp_netif_ip_addr_changed+0x4e>
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d017      	beq.n	8012592 <udp_netif_ip_addr_changed+0x4e>
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d013      	beq.n	8012592 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801256a:	4b0d      	ldr	r3, [pc, #52]	@ (80125a0 <udp_netif_ip_addr_changed+0x5c>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	60fb      	str	r3, [r7, #12]
 8012570:	e00c      	b.n	801258c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	681a      	ldr	r2, [r3, #0]
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	429a      	cmp	r2, r3
 801257c:	d103      	bne.n	8012586 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	681a      	ldr	r2, [r3, #0]
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	68db      	ldr	r3, [r3, #12]
 801258a:	60fb      	str	r3, [r7, #12]
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d1ef      	bne.n	8012572 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012592:	bf00      	nop
 8012594:	3714      	adds	r7, #20
 8012596:	46bd      	mov	sp, r7
 8012598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259c:	4770      	bx	lr
 801259e:	bf00      	nop
 80125a0:	2000b2c0 	.word	0x2000b2c0

080125a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b082      	sub	sp, #8
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80125ac:	4915      	ldr	r1, [pc, #84]	@ (8012604 <etharp_free_entry+0x60>)
 80125ae:	687a      	ldr	r2, [r7, #4]
 80125b0:	4613      	mov	r3, r2
 80125b2:	005b      	lsls	r3, r3, #1
 80125b4:	4413      	add	r3, r2
 80125b6:	00db      	lsls	r3, r3, #3
 80125b8:	440b      	add	r3, r1
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d013      	beq.n	80125e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80125c0:	4910      	ldr	r1, [pc, #64]	@ (8012604 <etharp_free_entry+0x60>)
 80125c2:	687a      	ldr	r2, [r7, #4]
 80125c4:	4613      	mov	r3, r2
 80125c6:	005b      	lsls	r3, r3, #1
 80125c8:	4413      	add	r3, r2
 80125ca:	00db      	lsls	r3, r3, #3
 80125cc:	440b      	add	r3, r1
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	4618      	mov	r0, r3
 80125d2:	f7f9 fd3f 	bl	800c054 <pbuf_free>
    arp_table[i].q = NULL;
 80125d6:	490b      	ldr	r1, [pc, #44]	@ (8012604 <etharp_free_entry+0x60>)
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	4613      	mov	r3, r2
 80125dc:	005b      	lsls	r3, r3, #1
 80125de:	4413      	add	r3, r2
 80125e0:	00db      	lsls	r3, r3, #3
 80125e2:	440b      	add	r3, r1
 80125e4:	2200      	movs	r2, #0
 80125e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80125e8:	4906      	ldr	r1, [pc, #24]	@ (8012604 <etharp_free_entry+0x60>)
 80125ea:	687a      	ldr	r2, [r7, #4]
 80125ec:	4613      	mov	r3, r2
 80125ee:	005b      	lsls	r3, r3, #1
 80125f0:	4413      	add	r3, r2
 80125f2:	00db      	lsls	r3, r3, #3
 80125f4:	440b      	add	r3, r1
 80125f6:	3314      	adds	r3, #20
 80125f8:	2200      	movs	r2, #0
 80125fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80125fc:	bf00      	nop
 80125fe:	3708      	adds	r7, #8
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}
 8012604:	2000b2c4 	.word	0x2000b2c4

08012608 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b082      	sub	sp, #8
 801260c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801260e:	2300      	movs	r3, #0
 8012610:	607b      	str	r3, [r7, #4]
 8012612:	e096      	b.n	8012742 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012614:	494f      	ldr	r1, [pc, #316]	@ (8012754 <etharp_tmr+0x14c>)
 8012616:	687a      	ldr	r2, [r7, #4]
 8012618:	4613      	mov	r3, r2
 801261a:	005b      	lsls	r3, r3, #1
 801261c:	4413      	add	r3, r2
 801261e:	00db      	lsls	r3, r3, #3
 8012620:	440b      	add	r3, r1
 8012622:	3314      	adds	r3, #20
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012628:	78fb      	ldrb	r3, [r7, #3]
 801262a:	2b00      	cmp	r3, #0
 801262c:	f000 8086 	beq.w	801273c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012630:	4948      	ldr	r1, [pc, #288]	@ (8012754 <etharp_tmr+0x14c>)
 8012632:	687a      	ldr	r2, [r7, #4]
 8012634:	4613      	mov	r3, r2
 8012636:	005b      	lsls	r3, r3, #1
 8012638:	4413      	add	r3, r2
 801263a:	00db      	lsls	r3, r3, #3
 801263c:	440b      	add	r3, r1
 801263e:	3312      	adds	r3, #18
 8012640:	881b      	ldrh	r3, [r3, #0]
 8012642:	3301      	adds	r3, #1
 8012644:	b298      	uxth	r0, r3
 8012646:	4943      	ldr	r1, [pc, #268]	@ (8012754 <etharp_tmr+0x14c>)
 8012648:	687a      	ldr	r2, [r7, #4]
 801264a:	4613      	mov	r3, r2
 801264c:	005b      	lsls	r3, r3, #1
 801264e:	4413      	add	r3, r2
 8012650:	00db      	lsls	r3, r3, #3
 8012652:	440b      	add	r3, r1
 8012654:	3312      	adds	r3, #18
 8012656:	4602      	mov	r2, r0
 8012658:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801265a:	493e      	ldr	r1, [pc, #248]	@ (8012754 <etharp_tmr+0x14c>)
 801265c:	687a      	ldr	r2, [r7, #4]
 801265e:	4613      	mov	r3, r2
 8012660:	005b      	lsls	r3, r3, #1
 8012662:	4413      	add	r3, r2
 8012664:	00db      	lsls	r3, r3, #3
 8012666:	440b      	add	r3, r1
 8012668:	3312      	adds	r3, #18
 801266a:	881b      	ldrh	r3, [r3, #0]
 801266c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8012670:	d215      	bcs.n	801269e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012672:	4938      	ldr	r1, [pc, #224]	@ (8012754 <etharp_tmr+0x14c>)
 8012674:	687a      	ldr	r2, [r7, #4]
 8012676:	4613      	mov	r3, r2
 8012678:	005b      	lsls	r3, r3, #1
 801267a:	4413      	add	r3, r2
 801267c:	00db      	lsls	r3, r3, #3
 801267e:	440b      	add	r3, r1
 8012680:	3314      	adds	r3, #20
 8012682:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012684:	2b01      	cmp	r3, #1
 8012686:	d10e      	bne.n	80126a6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012688:	4932      	ldr	r1, [pc, #200]	@ (8012754 <etharp_tmr+0x14c>)
 801268a:	687a      	ldr	r2, [r7, #4]
 801268c:	4613      	mov	r3, r2
 801268e:	005b      	lsls	r3, r3, #1
 8012690:	4413      	add	r3, r2
 8012692:	00db      	lsls	r3, r3, #3
 8012694:	440b      	add	r3, r1
 8012696:	3312      	adds	r3, #18
 8012698:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801269a:	2b04      	cmp	r3, #4
 801269c:	d903      	bls.n	80126a6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f7ff ff80 	bl	80125a4 <etharp_free_entry>
 80126a4:	e04a      	b.n	801273c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80126a6:	492b      	ldr	r1, [pc, #172]	@ (8012754 <etharp_tmr+0x14c>)
 80126a8:	687a      	ldr	r2, [r7, #4]
 80126aa:	4613      	mov	r3, r2
 80126ac:	005b      	lsls	r3, r3, #1
 80126ae:	4413      	add	r3, r2
 80126b0:	00db      	lsls	r3, r3, #3
 80126b2:	440b      	add	r3, r1
 80126b4:	3314      	adds	r3, #20
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	2b03      	cmp	r3, #3
 80126ba:	d10a      	bne.n	80126d2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80126bc:	4925      	ldr	r1, [pc, #148]	@ (8012754 <etharp_tmr+0x14c>)
 80126be:	687a      	ldr	r2, [r7, #4]
 80126c0:	4613      	mov	r3, r2
 80126c2:	005b      	lsls	r3, r3, #1
 80126c4:	4413      	add	r3, r2
 80126c6:	00db      	lsls	r3, r3, #3
 80126c8:	440b      	add	r3, r1
 80126ca:	3314      	adds	r3, #20
 80126cc:	2204      	movs	r2, #4
 80126ce:	701a      	strb	r2, [r3, #0]
 80126d0:	e034      	b.n	801273c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80126d2:	4920      	ldr	r1, [pc, #128]	@ (8012754 <etharp_tmr+0x14c>)
 80126d4:	687a      	ldr	r2, [r7, #4]
 80126d6:	4613      	mov	r3, r2
 80126d8:	005b      	lsls	r3, r3, #1
 80126da:	4413      	add	r3, r2
 80126dc:	00db      	lsls	r3, r3, #3
 80126de:	440b      	add	r3, r1
 80126e0:	3314      	adds	r3, #20
 80126e2:	781b      	ldrb	r3, [r3, #0]
 80126e4:	2b04      	cmp	r3, #4
 80126e6:	d10a      	bne.n	80126fe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80126e8:	491a      	ldr	r1, [pc, #104]	@ (8012754 <etharp_tmr+0x14c>)
 80126ea:	687a      	ldr	r2, [r7, #4]
 80126ec:	4613      	mov	r3, r2
 80126ee:	005b      	lsls	r3, r3, #1
 80126f0:	4413      	add	r3, r2
 80126f2:	00db      	lsls	r3, r3, #3
 80126f4:	440b      	add	r3, r1
 80126f6:	3314      	adds	r3, #20
 80126f8:	2202      	movs	r2, #2
 80126fa:	701a      	strb	r2, [r3, #0]
 80126fc:	e01e      	b.n	801273c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80126fe:	4915      	ldr	r1, [pc, #84]	@ (8012754 <etharp_tmr+0x14c>)
 8012700:	687a      	ldr	r2, [r7, #4]
 8012702:	4613      	mov	r3, r2
 8012704:	005b      	lsls	r3, r3, #1
 8012706:	4413      	add	r3, r2
 8012708:	00db      	lsls	r3, r3, #3
 801270a:	440b      	add	r3, r1
 801270c:	3314      	adds	r3, #20
 801270e:	781b      	ldrb	r3, [r3, #0]
 8012710:	2b01      	cmp	r3, #1
 8012712:	d113      	bne.n	801273c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012714:	490f      	ldr	r1, [pc, #60]	@ (8012754 <etharp_tmr+0x14c>)
 8012716:	687a      	ldr	r2, [r7, #4]
 8012718:	4613      	mov	r3, r2
 801271a:	005b      	lsls	r3, r3, #1
 801271c:	4413      	add	r3, r2
 801271e:	00db      	lsls	r3, r3, #3
 8012720:	440b      	add	r3, r1
 8012722:	3308      	adds	r3, #8
 8012724:	6818      	ldr	r0, [r3, #0]
 8012726:	687a      	ldr	r2, [r7, #4]
 8012728:	4613      	mov	r3, r2
 801272a:	005b      	lsls	r3, r3, #1
 801272c:	4413      	add	r3, r2
 801272e:	00db      	lsls	r3, r3, #3
 8012730:	4a08      	ldr	r2, [pc, #32]	@ (8012754 <etharp_tmr+0x14c>)
 8012732:	4413      	add	r3, r2
 8012734:	3304      	adds	r3, #4
 8012736:	4619      	mov	r1, r3
 8012738:	f000 fe6e 	bl	8013418 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	3301      	adds	r3, #1
 8012740:	607b      	str	r3, [r7, #4]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2b09      	cmp	r3, #9
 8012746:	f77f af65 	ble.w	8012614 <etharp_tmr+0xc>
      }
    }
  }
}
 801274a:	bf00      	nop
 801274c:	bf00      	nop
 801274e:	3708      	adds	r7, #8
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}
 8012754:	2000b2c4 	.word	0x2000b2c4

08012758 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b08a      	sub	sp, #40	@ 0x28
 801275c:	af00      	add	r7, sp, #0
 801275e:	60f8      	str	r0, [r7, #12]
 8012760:	460b      	mov	r3, r1
 8012762:	607a      	str	r2, [r7, #4]
 8012764:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012766:	230a      	movs	r3, #10
 8012768:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801276a:	230a      	movs	r3, #10
 801276c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801276e:	230a      	movs	r3, #10
 8012770:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8012772:	2300      	movs	r3, #0
 8012774:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012776:	230a      	movs	r3, #10
 8012778:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801277a:	2300      	movs	r3, #0
 801277c:	83bb      	strh	r3, [r7, #28]
 801277e:	2300      	movs	r3, #0
 8012780:	837b      	strh	r3, [r7, #26]
 8012782:	2300      	movs	r3, #0
 8012784:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012786:	2300      	movs	r3, #0
 8012788:	843b      	strh	r3, [r7, #32]
 801278a:	e0ae      	b.n	80128ea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801278c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012790:	49a6      	ldr	r1, [pc, #664]	@ (8012a2c <etharp_find_entry+0x2d4>)
 8012792:	4613      	mov	r3, r2
 8012794:	005b      	lsls	r3, r3, #1
 8012796:	4413      	add	r3, r2
 8012798:	00db      	lsls	r3, r3, #3
 801279a:	440b      	add	r3, r1
 801279c:	3314      	adds	r3, #20
 801279e:	781b      	ldrb	r3, [r3, #0]
 80127a0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80127a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80127a6:	2b0a      	cmp	r3, #10
 80127a8:	d105      	bne.n	80127b6 <etharp_find_entry+0x5e>
 80127aa:	7dfb      	ldrb	r3, [r7, #23]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d102      	bne.n	80127b6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80127b0:	8c3b      	ldrh	r3, [r7, #32]
 80127b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80127b4:	e095      	b.n	80128e2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80127b6:	7dfb      	ldrb	r3, [r7, #23]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	f000 8092 	beq.w	80128e2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80127be:	7dfb      	ldrb	r3, [r7, #23]
 80127c0:	2b01      	cmp	r3, #1
 80127c2:	d009      	beq.n	80127d8 <etharp_find_entry+0x80>
 80127c4:	7dfb      	ldrb	r3, [r7, #23]
 80127c6:	2b01      	cmp	r3, #1
 80127c8:	d806      	bhi.n	80127d8 <etharp_find_entry+0x80>
 80127ca:	4b99      	ldr	r3, [pc, #612]	@ (8012a30 <etharp_find_entry+0x2d8>)
 80127cc:	f240 1223 	movw	r2, #291	@ 0x123
 80127d0:	4998      	ldr	r1, [pc, #608]	@ (8012a34 <etharp_find_entry+0x2dc>)
 80127d2:	4899      	ldr	r0, [pc, #612]	@ (8012a38 <etharp_find_entry+0x2e0>)
 80127d4:	f002 faac 	bl	8014d30 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d020      	beq.n	8012820 <etharp_find_entry+0xc8>
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	6819      	ldr	r1, [r3, #0]
 80127e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127e6:	4891      	ldr	r0, [pc, #580]	@ (8012a2c <etharp_find_entry+0x2d4>)
 80127e8:	4613      	mov	r3, r2
 80127ea:	005b      	lsls	r3, r3, #1
 80127ec:	4413      	add	r3, r2
 80127ee:	00db      	lsls	r3, r3, #3
 80127f0:	4403      	add	r3, r0
 80127f2:	3304      	adds	r3, #4
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	4299      	cmp	r1, r3
 80127f8:	d112      	bne.n	8012820 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d00c      	beq.n	801281a <etharp_find_entry+0xc2>
 8012800:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012804:	4989      	ldr	r1, [pc, #548]	@ (8012a2c <etharp_find_entry+0x2d4>)
 8012806:	4613      	mov	r3, r2
 8012808:	005b      	lsls	r3, r3, #1
 801280a:	4413      	add	r3, r2
 801280c:	00db      	lsls	r3, r3, #3
 801280e:	440b      	add	r3, r1
 8012810:	3308      	adds	r3, #8
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	687a      	ldr	r2, [r7, #4]
 8012816:	429a      	cmp	r2, r3
 8012818:	d102      	bne.n	8012820 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801281a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801281e:	e100      	b.n	8012a22 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012820:	7dfb      	ldrb	r3, [r7, #23]
 8012822:	2b01      	cmp	r3, #1
 8012824:	d140      	bne.n	80128a8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012826:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801282a:	4980      	ldr	r1, [pc, #512]	@ (8012a2c <etharp_find_entry+0x2d4>)
 801282c:	4613      	mov	r3, r2
 801282e:	005b      	lsls	r3, r3, #1
 8012830:	4413      	add	r3, r2
 8012832:	00db      	lsls	r3, r3, #3
 8012834:	440b      	add	r3, r1
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d01a      	beq.n	8012872 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801283c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012840:	497a      	ldr	r1, [pc, #488]	@ (8012a2c <etharp_find_entry+0x2d4>)
 8012842:	4613      	mov	r3, r2
 8012844:	005b      	lsls	r3, r3, #1
 8012846:	4413      	add	r3, r2
 8012848:	00db      	lsls	r3, r3, #3
 801284a:	440b      	add	r3, r1
 801284c:	3312      	adds	r3, #18
 801284e:	881b      	ldrh	r3, [r3, #0]
 8012850:	8bba      	ldrh	r2, [r7, #28]
 8012852:	429a      	cmp	r2, r3
 8012854:	d845      	bhi.n	80128e2 <etharp_find_entry+0x18a>
            old_queue = i;
 8012856:	8c3b      	ldrh	r3, [r7, #32]
 8012858:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801285a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801285e:	4973      	ldr	r1, [pc, #460]	@ (8012a2c <etharp_find_entry+0x2d4>)
 8012860:	4613      	mov	r3, r2
 8012862:	005b      	lsls	r3, r3, #1
 8012864:	4413      	add	r3, r2
 8012866:	00db      	lsls	r3, r3, #3
 8012868:	440b      	add	r3, r1
 801286a:	3312      	adds	r3, #18
 801286c:	881b      	ldrh	r3, [r3, #0]
 801286e:	83bb      	strh	r3, [r7, #28]
 8012870:	e037      	b.n	80128e2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012872:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012876:	496d      	ldr	r1, [pc, #436]	@ (8012a2c <etharp_find_entry+0x2d4>)
 8012878:	4613      	mov	r3, r2
 801287a:	005b      	lsls	r3, r3, #1
 801287c:	4413      	add	r3, r2
 801287e:	00db      	lsls	r3, r3, #3
 8012880:	440b      	add	r3, r1
 8012882:	3312      	adds	r3, #18
 8012884:	881b      	ldrh	r3, [r3, #0]
 8012886:	8b7a      	ldrh	r2, [r7, #26]
 8012888:	429a      	cmp	r2, r3
 801288a:	d82a      	bhi.n	80128e2 <etharp_find_entry+0x18a>
            old_pending = i;
 801288c:	8c3b      	ldrh	r3, [r7, #32]
 801288e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8012890:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012894:	4965      	ldr	r1, [pc, #404]	@ (8012a2c <etharp_find_entry+0x2d4>)
 8012896:	4613      	mov	r3, r2
 8012898:	005b      	lsls	r3, r3, #1
 801289a:	4413      	add	r3, r2
 801289c:	00db      	lsls	r3, r3, #3
 801289e:	440b      	add	r3, r1
 80128a0:	3312      	adds	r3, #18
 80128a2:	881b      	ldrh	r3, [r3, #0]
 80128a4:	837b      	strh	r3, [r7, #26]
 80128a6:	e01c      	b.n	80128e2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80128a8:	7dfb      	ldrb	r3, [r7, #23]
 80128aa:	2b01      	cmp	r3, #1
 80128ac:	d919      	bls.n	80128e2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80128ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128b2:	495e      	ldr	r1, [pc, #376]	@ (8012a2c <etharp_find_entry+0x2d4>)
 80128b4:	4613      	mov	r3, r2
 80128b6:	005b      	lsls	r3, r3, #1
 80128b8:	4413      	add	r3, r2
 80128ba:	00db      	lsls	r3, r3, #3
 80128bc:	440b      	add	r3, r1
 80128be:	3312      	adds	r3, #18
 80128c0:	881b      	ldrh	r3, [r3, #0]
 80128c2:	8b3a      	ldrh	r2, [r7, #24]
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d80c      	bhi.n	80128e2 <etharp_find_entry+0x18a>
            old_stable = i;
 80128c8:	8c3b      	ldrh	r3, [r7, #32]
 80128ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80128cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128d0:	4956      	ldr	r1, [pc, #344]	@ (8012a2c <etharp_find_entry+0x2d4>)
 80128d2:	4613      	mov	r3, r2
 80128d4:	005b      	lsls	r3, r3, #1
 80128d6:	4413      	add	r3, r2
 80128d8:	00db      	lsls	r3, r3, #3
 80128da:	440b      	add	r3, r1
 80128dc:	3312      	adds	r3, #18
 80128de:	881b      	ldrh	r3, [r3, #0]
 80128e0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80128e2:	8c3b      	ldrh	r3, [r7, #32]
 80128e4:	3301      	adds	r3, #1
 80128e6:	b29b      	uxth	r3, r3
 80128e8:	843b      	strh	r3, [r7, #32]
 80128ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80128ee:	2b09      	cmp	r3, #9
 80128f0:	f77f af4c 	ble.w	801278c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80128f4:	7afb      	ldrb	r3, [r7, #11]
 80128f6:	f003 0302 	and.w	r3, r3, #2
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d108      	bne.n	8012910 <etharp_find_entry+0x1b8>
 80128fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012902:	2b0a      	cmp	r3, #10
 8012904:	d107      	bne.n	8012916 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012906:	7afb      	ldrb	r3, [r7, #11]
 8012908:	f003 0301 	and.w	r3, r3, #1
 801290c:	2b00      	cmp	r3, #0
 801290e:	d102      	bne.n	8012916 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012910:	f04f 33ff 	mov.w	r3, #4294967295
 8012914:	e085      	b.n	8012a22 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012916:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801291a:	2b09      	cmp	r3, #9
 801291c:	dc02      	bgt.n	8012924 <etharp_find_entry+0x1cc>
    i = empty;
 801291e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012920:	843b      	strh	r3, [r7, #32]
 8012922:	e039      	b.n	8012998 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012924:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8012928:	2b09      	cmp	r3, #9
 801292a:	dc14      	bgt.n	8012956 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801292c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801292e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012930:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012934:	493d      	ldr	r1, [pc, #244]	@ (8012a2c <etharp_find_entry+0x2d4>)
 8012936:	4613      	mov	r3, r2
 8012938:	005b      	lsls	r3, r3, #1
 801293a:	4413      	add	r3, r2
 801293c:	00db      	lsls	r3, r3, #3
 801293e:	440b      	add	r3, r1
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d018      	beq.n	8012978 <etharp_find_entry+0x220>
 8012946:	4b3a      	ldr	r3, [pc, #232]	@ (8012a30 <etharp_find_entry+0x2d8>)
 8012948:	f240 126d 	movw	r2, #365	@ 0x16d
 801294c:	493b      	ldr	r1, [pc, #236]	@ (8012a3c <etharp_find_entry+0x2e4>)
 801294e:	483a      	ldr	r0, [pc, #232]	@ (8012a38 <etharp_find_entry+0x2e0>)
 8012950:	f002 f9ee 	bl	8014d30 <iprintf>
 8012954:	e010      	b.n	8012978 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012956:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801295a:	2b09      	cmp	r3, #9
 801295c:	dc02      	bgt.n	8012964 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801295e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012960:	843b      	strh	r3, [r7, #32]
 8012962:	e009      	b.n	8012978 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012964:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012968:	2b09      	cmp	r3, #9
 801296a:	dc02      	bgt.n	8012972 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801296c:	8bfb      	ldrh	r3, [r7, #30]
 801296e:	843b      	strh	r3, [r7, #32]
 8012970:	e002      	b.n	8012978 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012972:	f04f 33ff 	mov.w	r3, #4294967295
 8012976:	e054      	b.n	8012a22 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012978:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801297c:	2b09      	cmp	r3, #9
 801297e:	dd06      	ble.n	801298e <etharp_find_entry+0x236>
 8012980:	4b2b      	ldr	r3, [pc, #172]	@ (8012a30 <etharp_find_entry+0x2d8>)
 8012982:	f240 127f 	movw	r2, #383	@ 0x17f
 8012986:	492e      	ldr	r1, [pc, #184]	@ (8012a40 <etharp_find_entry+0x2e8>)
 8012988:	482b      	ldr	r0, [pc, #172]	@ (8012a38 <etharp_find_entry+0x2e0>)
 801298a:	f002 f9d1 	bl	8014d30 <iprintf>
    etharp_free_entry(i);
 801298e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012992:	4618      	mov	r0, r3
 8012994:	f7ff fe06 	bl	80125a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012998:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801299c:	2b09      	cmp	r3, #9
 801299e:	dd06      	ble.n	80129ae <etharp_find_entry+0x256>
 80129a0:	4b23      	ldr	r3, [pc, #140]	@ (8012a30 <etharp_find_entry+0x2d8>)
 80129a2:	f240 1283 	movw	r2, #387	@ 0x183
 80129a6:	4926      	ldr	r1, [pc, #152]	@ (8012a40 <etharp_find_entry+0x2e8>)
 80129a8:	4823      	ldr	r0, [pc, #140]	@ (8012a38 <etharp_find_entry+0x2e0>)
 80129aa:	f002 f9c1 	bl	8014d30 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80129ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129b2:	491e      	ldr	r1, [pc, #120]	@ (8012a2c <etharp_find_entry+0x2d4>)
 80129b4:	4613      	mov	r3, r2
 80129b6:	005b      	lsls	r3, r3, #1
 80129b8:	4413      	add	r3, r2
 80129ba:	00db      	lsls	r3, r3, #3
 80129bc:	440b      	add	r3, r1
 80129be:	3314      	adds	r3, #20
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d006      	beq.n	80129d4 <etharp_find_entry+0x27c>
 80129c6:	4b1a      	ldr	r3, [pc, #104]	@ (8012a30 <etharp_find_entry+0x2d8>)
 80129c8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80129cc:	491d      	ldr	r1, [pc, #116]	@ (8012a44 <etharp_find_entry+0x2ec>)
 80129ce:	481a      	ldr	r0, [pc, #104]	@ (8012a38 <etharp_find_entry+0x2e0>)
 80129d0:	f002 f9ae 	bl	8014d30 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d00b      	beq.n	80129f2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80129da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	6819      	ldr	r1, [r3, #0]
 80129e2:	4812      	ldr	r0, [pc, #72]	@ (8012a2c <etharp_find_entry+0x2d4>)
 80129e4:	4613      	mov	r3, r2
 80129e6:	005b      	lsls	r3, r3, #1
 80129e8:	4413      	add	r3, r2
 80129ea:	00db      	lsls	r3, r3, #3
 80129ec:	4403      	add	r3, r0
 80129ee:	3304      	adds	r3, #4
 80129f0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80129f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129f6:	490d      	ldr	r1, [pc, #52]	@ (8012a2c <etharp_find_entry+0x2d4>)
 80129f8:	4613      	mov	r3, r2
 80129fa:	005b      	lsls	r3, r3, #1
 80129fc:	4413      	add	r3, r2
 80129fe:	00db      	lsls	r3, r3, #3
 8012a00:	440b      	add	r3, r1
 8012a02:	3312      	adds	r3, #18
 8012a04:	2200      	movs	r2, #0
 8012a06:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012a08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a0c:	4907      	ldr	r1, [pc, #28]	@ (8012a2c <etharp_find_entry+0x2d4>)
 8012a0e:	4613      	mov	r3, r2
 8012a10:	005b      	lsls	r3, r3, #1
 8012a12:	4413      	add	r3, r2
 8012a14:	00db      	lsls	r3, r3, #3
 8012a16:	440b      	add	r3, r1
 8012a18:	3308      	adds	r3, #8
 8012a1a:	687a      	ldr	r2, [r7, #4]
 8012a1c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012a1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3728      	adds	r7, #40	@ 0x28
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}
 8012a2a:	bf00      	nop
 8012a2c:	2000b2c4 	.word	0x2000b2c4
 8012a30:	08017e74 	.word	0x08017e74
 8012a34:	08017eac 	.word	0x08017eac
 8012a38:	08017eec 	.word	0x08017eec
 8012a3c:	08017f14 	.word	0x08017f14
 8012a40:	08017f2c 	.word	0x08017f2c
 8012a44:	08017f40 	.word	0x08017f40

08012a48 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b088      	sub	sp, #32
 8012a4c:	af02      	add	r7, sp, #8
 8012a4e:	60f8      	str	r0, [r7, #12]
 8012a50:	60b9      	str	r1, [r7, #8]
 8012a52:	607a      	str	r2, [r7, #4]
 8012a54:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012a5c:	2b06      	cmp	r3, #6
 8012a5e:	d006      	beq.n	8012a6e <etharp_update_arp_entry+0x26>
 8012a60:	4b48      	ldr	r3, [pc, #288]	@ (8012b84 <etharp_update_arp_entry+0x13c>)
 8012a62:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8012a66:	4948      	ldr	r1, [pc, #288]	@ (8012b88 <etharp_update_arp_entry+0x140>)
 8012a68:	4848      	ldr	r0, [pc, #288]	@ (8012b8c <etharp_update_arp_entry+0x144>)
 8012a6a:	f002 f961 	bl	8014d30 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d012      	beq.n	8012a9a <etharp_update_arp_entry+0x52>
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d00e      	beq.n	8012a9a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012a7c:	68bb      	ldr	r3, [r7, #8]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	68f9      	ldr	r1, [r7, #12]
 8012a82:	4618      	mov	r0, r3
 8012a84:	f001 f8fe 	bl	8013c84 <ip4_addr_isbroadcast_u32>
 8012a88:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d105      	bne.n	8012a9a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012a96:	2be0      	cmp	r3, #224	@ 0xe0
 8012a98:	d102      	bne.n	8012aa0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012a9a:	f06f 030f 	mvn.w	r3, #15
 8012a9e:	e06c      	b.n	8012b7a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012aa0:	78fb      	ldrb	r3, [r7, #3]
 8012aa2:	68fa      	ldr	r2, [r7, #12]
 8012aa4:	4619      	mov	r1, r3
 8012aa6:	68b8      	ldr	r0, [r7, #8]
 8012aa8:	f7ff fe56 	bl	8012758 <etharp_find_entry>
 8012aac:	4603      	mov	r3, r0
 8012aae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012ab0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	da02      	bge.n	8012abe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012ab8:	8afb      	ldrh	r3, [r7, #22]
 8012aba:	b25b      	sxtb	r3, r3
 8012abc:	e05d      	b.n	8012b7a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012abe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ac2:	4933      	ldr	r1, [pc, #204]	@ (8012b90 <etharp_update_arp_entry+0x148>)
 8012ac4:	4613      	mov	r3, r2
 8012ac6:	005b      	lsls	r3, r3, #1
 8012ac8:	4413      	add	r3, r2
 8012aca:	00db      	lsls	r3, r3, #3
 8012acc:	440b      	add	r3, r1
 8012ace:	3314      	adds	r3, #20
 8012ad0:	2202      	movs	r2, #2
 8012ad2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012ad4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ad8:	492d      	ldr	r1, [pc, #180]	@ (8012b90 <etharp_update_arp_entry+0x148>)
 8012ada:	4613      	mov	r3, r2
 8012adc:	005b      	lsls	r3, r3, #1
 8012ade:	4413      	add	r3, r2
 8012ae0:	00db      	lsls	r3, r3, #3
 8012ae2:	440b      	add	r3, r1
 8012ae4:	3308      	adds	r3, #8
 8012ae6:	68fa      	ldr	r2, [r7, #12]
 8012ae8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012aea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012aee:	4613      	mov	r3, r2
 8012af0:	005b      	lsls	r3, r3, #1
 8012af2:	4413      	add	r3, r2
 8012af4:	00db      	lsls	r3, r3, #3
 8012af6:	3308      	adds	r3, #8
 8012af8:	4a25      	ldr	r2, [pc, #148]	@ (8012b90 <etharp_update_arp_entry+0x148>)
 8012afa:	4413      	add	r3, r2
 8012afc:	3304      	adds	r3, #4
 8012afe:	2206      	movs	r2, #6
 8012b00:	6879      	ldr	r1, [r7, #4]
 8012b02:	4618      	mov	r0, r3
 8012b04:	f002 f9ef 	bl	8014ee6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012b08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b0c:	4920      	ldr	r1, [pc, #128]	@ (8012b90 <etharp_update_arp_entry+0x148>)
 8012b0e:	4613      	mov	r3, r2
 8012b10:	005b      	lsls	r3, r3, #1
 8012b12:	4413      	add	r3, r2
 8012b14:	00db      	lsls	r3, r3, #3
 8012b16:	440b      	add	r3, r1
 8012b18:	3312      	adds	r3, #18
 8012b1a:	2200      	movs	r2, #0
 8012b1c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012b1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b22:	491b      	ldr	r1, [pc, #108]	@ (8012b90 <etharp_update_arp_entry+0x148>)
 8012b24:	4613      	mov	r3, r2
 8012b26:	005b      	lsls	r3, r3, #1
 8012b28:	4413      	add	r3, r2
 8012b2a:	00db      	lsls	r3, r3, #3
 8012b2c:	440b      	add	r3, r1
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d021      	beq.n	8012b78 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012b34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b38:	4915      	ldr	r1, [pc, #84]	@ (8012b90 <etharp_update_arp_entry+0x148>)
 8012b3a:	4613      	mov	r3, r2
 8012b3c:	005b      	lsls	r3, r3, #1
 8012b3e:	4413      	add	r3, r2
 8012b40:	00db      	lsls	r3, r3, #3
 8012b42:	440b      	add	r3, r1
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012b48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b4c:	4910      	ldr	r1, [pc, #64]	@ (8012b90 <etharp_update_arp_entry+0x148>)
 8012b4e:	4613      	mov	r3, r2
 8012b50:	005b      	lsls	r3, r3, #1
 8012b52:	4413      	add	r3, r2
 8012b54:	00db      	lsls	r3, r3, #3
 8012b56:	440b      	add	r3, r1
 8012b58:	2200      	movs	r2, #0
 8012b5a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8012b62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012b66:	9300      	str	r3, [sp, #0]
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	6939      	ldr	r1, [r7, #16]
 8012b6c:	68f8      	ldr	r0, [r7, #12]
 8012b6e:	f001 ff97 	bl	8014aa0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012b72:	6938      	ldr	r0, [r7, #16]
 8012b74:	f7f9 fa6e 	bl	800c054 <pbuf_free>
  }
  return ERR_OK;
 8012b78:	2300      	movs	r3, #0
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3718      	adds	r7, #24
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}
 8012b82:	bf00      	nop
 8012b84:	08017e74 	.word	0x08017e74
 8012b88:	08017f6c 	.word	0x08017f6c
 8012b8c:	08017eec 	.word	0x08017eec
 8012b90:	2000b2c4 	.word	0x2000b2c4

08012b94 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b084      	sub	sp, #16
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	60fb      	str	r3, [r7, #12]
 8012ba0:	e01e      	b.n	8012be0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012ba2:	4913      	ldr	r1, [pc, #76]	@ (8012bf0 <etharp_cleanup_netif+0x5c>)
 8012ba4:	68fa      	ldr	r2, [r7, #12]
 8012ba6:	4613      	mov	r3, r2
 8012ba8:	005b      	lsls	r3, r3, #1
 8012baa:	4413      	add	r3, r2
 8012bac:	00db      	lsls	r3, r3, #3
 8012bae:	440b      	add	r3, r1
 8012bb0:	3314      	adds	r3, #20
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012bb6:	7afb      	ldrb	r3, [r7, #11]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d00e      	beq.n	8012bda <etharp_cleanup_netif+0x46>
 8012bbc:	490c      	ldr	r1, [pc, #48]	@ (8012bf0 <etharp_cleanup_netif+0x5c>)
 8012bbe:	68fa      	ldr	r2, [r7, #12]
 8012bc0:	4613      	mov	r3, r2
 8012bc2:	005b      	lsls	r3, r3, #1
 8012bc4:	4413      	add	r3, r2
 8012bc6:	00db      	lsls	r3, r3, #3
 8012bc8:	440b      	add	r3, r1
 8012bca:	3308      	adds	r3, #8
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d102      	bne.n	8012bda <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012bd4:	68f8      	ldr	r0, [r7, #12]
 8012bd6:	f7ff fce5 	bl	80125a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	3301      	adds	r3, #1
 8012bde:	60fb      	str	r3, [r7, #12]
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	2b09      	cmp	r3, #9
 8012be4:	dddd      	ble.n	8012ba2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012be6:	bf00      	nop
 8012be8:	bf00      	nop
 8012bea:	3710      	adds	r7, #16
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}
 8012bf0:	2000b2c4 	.word	0x2000b2c4

08012bf4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012bf4:	b5b0      	push	{r4, r5, r7, lr}
 8012bf6:	b08a      	sub	sp, #40	@ 0x28
 8012bf8:	af04      	add	r7, sp, #16
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d107      	bne.n	8012c14 <etharp_input+0x20>
 8012c04:	4b3d      	ldr	r3, [pc, #244]	@ (8012cfc <etharp_input+0x108>)
 8012c06:	f240 228a 	movw	r2, #650	@ 0x28a
 8012c0a:	493d      	ldr	r1, [pc, #244]	@ (8012d00 <etharp_input+0x10c>)
 8012c0c:	483d      	ldr	r0, [pc, #244]	@ (8012d04 <etharp_input+0x110>)
 8012c0e:	f002 f88f 	bl	8014d30 <iprintf>
 8012c12:	e06f      	b.n	8012cf4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	881b      	ldrh	r3, [r3, #0]
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012c24:	d10c      	bne.n	8012c40 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012c26:	693b      	ldr	r3, [r7, #16]
 8012c28:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012c2a:	2b06      	cmp	r3, #6
 8012c2c:	d108      	bne.n	8012c40 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012c2e:	693b      	ldr	r3, [r7, #16]
 8012c30:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012c32:	2b04      	cmp	r3, #4
 8012c34:	d104      	bne.n	8012c40 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012c36:	693b      	ldr	r3, [r7, #16]
 8012c38:	885b      	ldrh	r3, [r3, #2]
 8012c3a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012c3c:	2b08      	cmp	r3, #8
 8012c3e:	d003      	beq.n	8012c48 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	f7f9 fa07 	bl	800c054 <pbuf_free>
    return;
 8012c46:	e055      	b.n	8012cf4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012c48:	693b      	ldr	r3, [r7, #16]
 8012c4a:	330e      	adds	r3, #14
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012c50:	693b      	ldr	r3, [r7, #16]
 8012c52:	3318      	adds	r3, #24
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	3304      	adds	r3, #4
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d102      	bne.n	8012c68 <etharp_input+0x74>
    for_us = 0;
 8012c62:	2300      	movs	r3, #0
 8012c64:	75fb      	strb	r3, [r7, #23]
 8012c66:	e009      	b.n	8012c7c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012c68:	68ba      	ldr	r2, [r7, #8]
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	3304      	adds	r3, #4
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	429a      	cmp	r2, r3
 8012c72:	bf0c      	ite	eq
 8012c74:	2301      	moveq	r3, #1
 8012c76:	2300      	movne	r3, #0
 8012c78:	b2db      	uxtb	r3, r3
 8012c7a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	f103 0208 	add.w	r2, r3, #8
 8012c82:	7dfb      	ldrb	r3, [r7, #23]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d001      	beq.n	8012c8c <etharp_input+0x98>
 8012c88:	2301      	movs	r3, #1
 8012c8a:	e000      	b.n	8012c8e <etharp_input+0x9a>
 8012c8c:	2302      	movs	r3, #2
 8012c8e:	f107 010c 	add.w	r1, r7, #12
 8012c92:	6838      	ldr	r0, [r7, #0]
 8012c94:	f7ff fed8 	bl	8012a48 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012c98:	693b      	ldr	r3, [r7, #16]
 8012c9a:	88db      	ldrh	r3, [r3, #6]
 8012c9c:	b29b      	uxth	r3, r3
 8012c9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ca2:	d003      	beq.n	8012cac <etharp_input+0xb8>
 8012ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ca8:	d01e      	beq.n	8012ce8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012caa:	e020      	b.n	8012cee <etharp_input+0xfa>
      if (for_us) {
 8012cac:	7dfb      	ldrb	r3, [r7, #23]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d01c      	beq.n	8012cec <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012cc8:	693a      	ldr	r2, [r7, #16]
 8012cca:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012ccc:	2102      	movs	r1, #2
 8012cce:	9103      	str	r1, [sp, #12]
 8012cd0:	f107 010c 	add.w	r1, r7, #12
 8012cd4:	9102      	str	r1, [sp, #8]
 8012cd6:	9201      	str	r2, [sp, #4]
 8012cd8:	9300      	str	r3, [sp, #0]
 8012cda:	462b      	mov	r3, r5
 8012cdc:	4622      	mov	r2, r4
 8012cde:	4601      	mov	r1, r0
 8012ce0:	6838      	ldr	r0, [r7, #0]
 8012ce2:	f000 faeb 	bl	80132bc <etharp_raw>
      break;
 8012ce6:	e001      	b.n	8012cec <etharp_input+0xf8>
      break;
 8012ce8:	bf00      	nop
 8012cea:	e000      	b.n	8012cee <etharp_input+0xfa>
      break;
 8012cec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f7f9 f9b0 	bl	800c054 <pbuf_free>
}
 8012cf4:	3718      	adds	r7, #24
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8012cfa:	bf00      	nop
 8012cfc:	08017e74 	.word	0x08017e74
 8012d00:	08017fc4 	.word	0x08017fc4
 8012d04:	08017eec 	.word	0x08017eec

08012d08 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b086      	sub	sp, #24
 8012d0c:	af02      	add	r7, sp, #8
 8012d0e:	60f8      	str	r0, [r7, #12]
 8012d10:	60b9      	str	r1, [r7, #8]
 8012d12:	4613      	mov	r3, r2
 8012d14:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012d16:	79fa      	ldrb	r2, [r7, #7]
 8012d18:	4944      	ldr	r1, [pc, #272]	@ (8012e2c <etharp_output_to_arp_index+0x124>)
 8012d1a:	4613      	mov	r3, r2
 8012d1c:	005b      	lsls	r3, r3, #1
 8012d1e:	4413      	add	r3, r2
 8012d20:	00db      	lsls	r3, r3, #3
 8012d22:	440b      	add	r3, r1
 8012d24:	3314      	adds	r3, #20
 8012d26:	781b      	ldrb	r3, [r3, #0]
 8012d28:	2b01      	cmp	r3, #1
 8012d2a:	d806      	bhi.n	8012d3a <etharp_output_to_arp_index+0x32>
 8012d2c:	4b40      	ldr	r3, [pc, #256]	@ (8012e30 <etharp_output_to_arp_index+0x128>)
 8012d2e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012d32:	4940      	ldr	r1, [pc, #256]	@ (8012e34 <etharp_output_to_arp_index+0x12c>)
 8012d34:	4840      	ldr	r0, [pc, #256]	@ (8012e38 <etharp_output_to_arp_index+0x130>)
 8012d36:	f001 fffb 	bl	8014d30 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012d3a:	79fa      	ldrb	r2, [r7, #7]
 8012d3c:	493b      	ldr	r1, [pc, #236]	@ (8012e2c <etharp_output_to_arp_index+0x124>)
 8012d3e:	4613      	mov	r3, r2
 8012d40:	005b      	lsls	r3, r3, #1
 8012d42:	4413      	add	r3, r2
 8012d44:	00db      	lsls	r3, r3, #3
 8012d46:	440b      	add	r3, r1
 8012d48:	3314      	adds	r3, #20
 8012d4a:	781b      	ldrb	r3, [r3, #0]
 8012d4c:	2b02      	cmp	r3, #2
 8012d4e:	d153      	bne.n	8012df8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012d50:	79fa      	ldrb	r2, [r7, #7]
 8012d52:	4936      	ldr	r1, [pc, #216]	@ (8012e2c <etharp_output_to_arp_index+0x124>)
 8012d54:	4613      	mov	r3, r2
 8012d56:	005b      	lsls	r3, r3, #1
 8012d58:	4413      	add	r3, r2
 8012d5a:	00db      	lsls	r3, r3, #3
 8012d5c:	440b      	add	r3, r1
 8012d5e:	3312      	adds	r3, #18
 8012d60:	881b      	ldrh	r3, [r3, #0]
 8012d62:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8012d66:	d919      	bls.n	8012d9c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012d68:	79fa      	ldrb	r2, [r7, #7]
 8012d6a:	4613      	mov	r3, r2
 8012d6c:	005b      	lsls	r3, r3, #1
 8012d6e:	4413      	add	r3, r2
 8012d70:	00db      	lsls	r3, r3, #3
 8012d72:	4a2e      	ldr	r2, [pc, #184]	@ (8012e2c <etharp_output_to_arp_index+0x124>)
 8012d74:	4413      	add	r3, r2
 8012d76:	3304      	adds	r3, #4
 8012d78:	4619      	mov	r1, r3
 8012d7a:	68f8      	ldr	r0, [r7, #12]
 8012d7c:	f000 fb4c 	bl	8013418 <etharp_request>
 8012d80:	4603      	mov	r3, r0
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d138      	bne.n	8012df8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012d86:	79fa      	ldrb	r2, [r7, #7]
 8012d88:	4928      	ldr	r1, [pc, #160]	@ (8012e2c <etharp_output_to_arp_index+0x124>)
 8012d8a:	4613      	mov	r3, r2
 8012d8c:	005b      	lsls	r3, r3, #1
 8012d8e:	4413      	add	r3, r2
 8012d90:	00db      	lsls	r3, r3, #3
 8012d92:	440b      	add	r3, r1
 8012d94:	3314      	adds	r3, #20
 8012d96:	2203      	movs	r2, #3
 8012d98:	701a      	strb	r2, [r3, #0]
 8012d9a:	e02d      	b.n	8012df8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012d9c:	79fa      	ldrb	r2, [r7, #7]
 8012d9e:	4923      	ldr	r1, [pc, #140]	@ (8012e2c <etharp_output_to_arp_index+0x124>)
 8012da0:	4613      	mov	r3, r2
 8012da2:	005b      	lsls	r3, r3, #1
 8012da4:	4413      	add	r3, r2
 8012da6:	00db      	lsls	r3, r3, #3
 8012da8:	440b      	add	r3, r1
 8012daa:	3312      	adds	r3, #18
 8012dac:	881b      	ldrh	r3, [r3, #0]
 8012dae:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8012db2:	d321      	bcc.n	8012df8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012db4:	79fa      	ldrb	r2, [r7, #7]
 8012db6:	4613      	mov	r3, r2
 8012db8:	005b      	lsls	r3, r3, #1
 8012dba:	4413      	add	r3, r2
 8012dbc:	00db      	lsls	r3, r3, #3
 8012dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8012e2c <etharp_output_to_arp_index+0x124>)
 8012dc0:	4413      	add	r3, r2
 8012dc2:	1d19      	adds	r1, r3, #4
 8012dc4:	79fa      	ldrb	r2, [r7, #7]
 8012dc6:	4613      	mov	r3, r2
 8012dc8:	005b      	lsls	r3, r3, #1
 8012dca:	4413      	add	r3, r2
 8012dcc:	00db      	lsls	r3, r3, #3
 8012dce:	3308      	adds	r3, #8
 8012dd0:	4a16      	ldr	r2, [pc, #88]	@ (8012e2c <etharp_output_to_arp_index+0x124>)
 8012dd2:	4413      	add	r3, r2
 8012dd4:	3304      	adds	r3, #4
 8012dd6:	461a      	mov	r2, r3
 8012dd8:	68f8      	ldr	r0, [r7, #12]
 8012dda:	f000 fafb 	bl	80133d4 <etharp_request_dst>
 8012dde:	4603      	mov	r3, r0
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d109      	bne.n	8012df8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012de4:	79fa      	ldrb	r2, [r7, #7]
 8012de6:	4911      	ldr	r1, [pc, #68]	@ (8012e2c <etharp_output_to_arp_index+0x124>)
 8012de8:	4613      	mov	r3, r2
 8012dea:	005b      	lsls	r3, r3, #1
 8012dec:	4413      	add	r3, r2
 8012dee:	00db      	lsls	r3, r3, #3
 8012df0:	440b      	add	r3, r1
 8012df2:	3314      	adds	r3, #20
 8012df4:	2203      	movs	r2, #3
 8012df6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8012dfe:	79fa      	ldrb	r2, [r7, #7]
 8012e00:	4613      	mov	r3, r2
 8012e02:	005b      	lsls	r3, r3, #1
 8012e04:	4413      	add	r3, r2
 8012e06:	00db      	lsls	r3, r3, #3
 8012e08:	3308      	adds	r3, #8
 8012e0a:	4a08      	ldr	r2, [pc, #32]	@ (8012e2c <etharp_output_to_arp_index+0x124>)
 8012e0c:	4413      	add	r3, r2
 8012e0e:	3304      	adds	r3, #4
 8012e10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012e14:	9200      	str	r2, [sp, #0]
 8012e16:	460a      	mov	r2, r1
 8012e18:	68b9      	ldr	r1, [r7, #8]
 8012e1a:	68f8      	ldr	r0, [r7, #12]
 8012e1c:	f001 fe40 	bl	8014aa0 <ethernet_output>
 8012e20:	4603      	mov	r3, r0
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3710      	adds	r7, #16
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	2000b2c4 	.word	0x2000b2c4
 8012e30:	08017e74 	.word	0x08017e74
 8012e34:	08017fe4 	.word	0x08017fe4
 8012e38:	08017eec 	.word	0x08017eec

08012e3c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b08a      	sub	sp, #40	@ 0x28
 8012e40:	af02      	add	r7, sp, #8
 8012e42:	60f8      	str	r0, [r7, #12]
 8012e44:	60b9      	str	r1, [r7, #8]
 8012e46:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d106      	bne.n	8012e60 <etharp_output+0x24>
 8012e52:	4b73      	ldr	r3, [pc, #460]	@ (8013020 <etharp_output+0x1e4>)
 8012e54:	f240 321e 	movw	r2, #798	@ 0x31e
 8012e58:	4972      	ldr	r1, [pc, #456]	@ (8013024 <etharp_output+0x1e8>)
 8012e5a:	4873      	ldr	r0, [pc, #460]	@ (8013028 <etharp_output+0x1ec>)
 8012e5c:	f001 ff68 	bl	8014d30 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d106      	bne.n	8012e74 <etharp_output+0x38>
 8012e66:	4b6e      	ldr	r3, [pc, #440]	@ (8013020 <etharp_output+0x1e4>)
 8012e68:	f240 321f 	movw	r2, #799	@ 0x31f
 8012e6c:	496f      	ldr	r1, [pc, #444]	@ (801302c <etharp_output+0x1f0>)
 8012e6e:	486e      	ldr	r0, [pc, #440]	@ (8013028 <etharp_output+0x1ec>)
 8012e70:	f001 ff5e 	bl	8014d30 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d106      	bne.n	8012e88 <etharp_output+0x4c>
 8012e7a:	4b69      	ldr	r3, [pc, #420]	@ (8013020 <etharp_output+0x1e4>)
 8012e7c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8012e80:	496b      	ldr	r1, [pc, #428]	@ (8013030 <etharp_output+0x1f4>)
 8012e82:	4869      	ldr	r0, [pc, #420]	@ (8013028 <etharp_output+0x1ec>)
 8012e84:	f001 ff54 	bl	8014d30 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	68f9      	ldr	r1, [r7, #12]
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f000 fef8 	bl	8013c84 <ip4_addr_isbroadcast_u32>
 8012e94:	4603      	mov	r3, r0
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d002      	beq.n	8012ea0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012e9a:	4b66      	ldr	r3, [pc, #408]	@ (8013034 <etharp_output+0x1f8>)
 8012e9c:	61fb      	str	r3, [r7, #28]
 8012e9e:	e0af      	b.n	8013000 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012ea8:	2be0      	cmp	r3, #224	@ 0xe0
 8012eaa:	d118      	bne.n	8012ede <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012eac:	2301      	movs	r3, #1
 8012eae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012eb4:	235e      	movs	r3, #94	@ 0x5e
 8012eb6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	3301      	adds	r3, #1
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012ec2:	b2db      	uxtb	r3, r3
 8012ec4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	3302      	adds	r3, #2
 8012eca:	781b      	ldrb	r3, [r3, #0]
 8012ecc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	3303      	adds	r3, #3
 8012ed2:	781b      	ldrb	r3, [r3, #0]
 8012ed4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012ed6:	f107 0310 	add.w	r3, r7, #16
 8012eda:	61fb      	str	r3, [r7, #28]
 8012edc:	e090      	b.n	8013000 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	681a      	ldr	r2, [r3, #0]
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	3304      	adds	r3, #4
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	405a      	eors	r2, r3
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	3308      	adds	r3, #8
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	4013      	ands	r3, r2
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d012      	beq.n	8012f1c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012efc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8012f00:	4293      	cmp	r3, r2
 8012f02:	d00b      	beq.n	8012f1c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	330c      	adds	r3, #12
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d003      	beq.n	8012f16 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	330c      	adds	r3, #12
 8012f12:	61bb      	str	r3, [r7, #24]
 8012f14:	e002      	b.n	8012f1c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012f16:	f06f 0303 	mvn.w	r3, #3
 8012f1a:	e07d      	b.n	8013018 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012f1c:	4b46      	ldr	r3, [pc, #280]	@ (8013038 <etharp_output+0x1fc>)
 8012f1e:	781b      	ldrb	r3, [r3, #0]
 8012f20:	4619      	mov	r1, r3
 8012f22:	4a46      	ldr	r2, [pc, #280]	@ (801303c <etharp_output+0x200>)
 8012f24:	460b      	mov	r3, r1
 8012f26:	005b      	lsls	r3, r3, #1
 8012f28:	440b      	add	r3, r1
 8012f2a:	00db      	lsls	r3, r3, #3
 8012f2c:	4413      	add	r3, r2
 8012f2e:	3314      	adds	r3, #20
 8012f30:	781b      	ldrb	r3, [r3, #0]
 8012f32:	2b01      	cmp	r3, #1
 8012f34:	d925      	bls.n	8012f82 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012f36:	4b40      	ldr	r3, [pc, #256]	@ (8013038 <etharp_output+0x1fc>)
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	4a3f      	ldr	r2, [pc, #252]	@ (801303c <etharp_output+0x200>)
 8012f3e:	460b      	mov	r3, r1
 8012f40:	005b      	lsls	r3, r3, #1
 8012f42:	440b      	add	r3, r1
 8012f44:	00db      	lsls	r3, r3, #3
 8012f46:	4413      	add	r3, r2
 8012f48:	3308      	adds	r3, #8
 8012f4a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012f4c:	68fa      	ldr	r2, [r7, #12]
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d117      	bne.n	8012f82 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012f52:	69bb      	ldr	r3, [r7, #24]
 8012f54:	681a      	ldr	r2, [r3, #0]
 8012f56:	4b38      	ldr	r3, [pc, #224]	@ (8013038 <etharp_output+0x1fc>)
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	4937      	ldr	r1, [pc, #220]	@ (801303c <etharp_output+0x200>)
 8012f5e:	4603      	mov	r3, r0
 8012f60:	005b      	lsls	r3, r3, #1
 8012f62:	4403      	add	r3, r0
 8012f64:	00db      	lsls	r3, r3, #3
 8012f66:	440b      	add	r3, r1
 8012f68:	3304      	adds	r3, #4
 8012f6a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d108      	bne.n	8012f82 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012f70:	4b31      	ldr	r3, [pc, #196]	@ (8013038 <etharp_output+0x1fc>)
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	461a      	mov	r2, r3
 8012f76:	68b9      	ldr	r1, [r7, #8]
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f7ff fec5 	bl	8012d08 <etharp_output_to_arp_index>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	e04a      	b.n	8013018 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012f82:	2300      	movs	r3, #0
 8012f84:	75fb      	strb	r3, [r7, #23]
 8012f86:	e031      	b.n	8012fec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012f88:	7dfa      	ldrb	r2, [r7, #23]
 8012f8a:	492c      	ldr	r1, [pc, #176]	@ (801303c <etharp_output+0x200>)
 8012f8c:	4613      	mov	r3, r2
 8012f8e:	005b      	lsls	r3, r3, #1
 8012f90:	4413      	add	r3, r2
 8012f92:	00db      	lsls	r3, r3, #3
 8012f94:	440b      	add	r3, r1
 8012f96:	3314      	adds	r3, #20
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	2b01      	cmp	r3, #1
 8012f9c:	d923      	bls.n	8012fe6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012f9e:	7dfa      	ldrb	r2, [r7, #23]
 8012fa0:	4926      	ldr	r1, [pc, #152]	@ (801303c <etharp_output+0x200>)
 8012fa2:	4613      	mov	r3, r2
 8012fa4:	005b      	lsls	r3, r3, #1
 8012fa6:	4413      	add	r3, r2
 8012fa8:	00db      	lsls	r3, r3, #3
 8012faa:	440b      	add	r3, r1
 8012fac:	3308      	adds	r3, #8
 8012fae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012fb0:	68fa      	ldr	r2, [r7, #12]
 8012fb2:	429a      	cmp	r2, r3
 8012fb4:	d117      	bne.n	8012fe6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012fb6:	69bb      	ldr	r3, [r7, #24]
 8012fb8:	6819      	ldr	r1, [r3, #0]
 8012fba:	7dfa      	ldrb	r2, [r7, #23]
 8012fbc:	481f      	ldr	r0, [pc, #124]	@ (801303c <etharp_output+0x200>)
 8012fbe:	4613      	mov	r3, r2
 8012fc0:	005b      	lsls	r3, r3, #1
 8012fc2:	4413      	add	r3, r2
 8012fc4:	00db      	lsls	r3, r3, #3
 8012fc6:	4403      	add	r3, r0
 8012fc8:	3304      	adds	r3, #4
 8012fca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012fcc:	4299      	cmp	r1, r3
 8012fce:	d10a      	bne.n	8012fe6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012fd0:	4a19      	ldr	r2, [pc, #100]	@ (8013038 <etharp_output+0x1fc>)
 8012fd2:	7dfb      	ldrb	r3, [r7, #23]
 8012fd4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012fd6:	7dfb      	ldrb	r3, [r7, #23]
 8012fd8:	461a      	mov	r2, r3
 8012fda:	68b9      	ldr	r1, [r7, #8]
 8012fdc:	68f8      	ldr	r0, [r7, #12]
 8012fde:	f7ff fe93 	bl	8012d08 <etharp_output_to_arp_index>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	e018      	b.n	8013018 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012fe6:	7dfb      	ldrb	r3, [r7, #23]
 8012fe8:	3301      	adds	r3, #1
 8012fea:	75fb      	strb	r3, [r7, #23]
 8012fec:	7dfb      	ldrb	r3, [r7, #23]
 8012fee:	2b09      	cmp	r3, #9
 8012ff0:	d9ca      	bls.n	8012f88 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012ff2:	68ba      	ldr	r2, [r7, #8]
 8012ff4:	69b9      	ldr	r1, [r7, #24]
 8012ff6:	68f8      	ldr	r0, [r7, #12]
 8012ff8:	f000 f822 	bl	8013040 <etharp_query>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	e00b      	b.n	8013018 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8013006:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801300a:	9300      	str	r3, [sp, #0]
 801300c:	69fb      	ldr	r3, [r7, #28]
 801300e:	68b9      	ldr	r1, [r7, #8]
 8013010:	68f8      	ldr	r0, [r7, #12]
 8013012:	f001 fd45 	bl	8014aa0 <ethernet_output>
 8013016:	4603      	mov	r3, r0
}
 8013018:	4618      	mov	r0, r3
 801301a:	3720      	adds	r7, #32
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}
 8013020:	08017e74 	.word	0x08017e74
 8013024:	08017fc4 	.word	0x08017fc4
 8013028:	08017eec 	.word	0x08017eec
 801302c:	08018014 	.word	0x08018014
 8013030:	08017fb4 	.word	0x08017fb4
 8013034:	08018638 	.word	0x08018638
 8013038:	2000b3b4 	.word	0x2000b3b4
 801303c:	2000b2c4 	.word	0x2000b2c4

08013040 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b08c      	sub	sp, #48	@ 0x30
 8013044:	af02      	add	r7, sp, #8
 8013046:	60f8      	str	r0, [r7, #12]
 8013048:	60b9      	str	r1, [r7, #8]
 801304a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	3326      	adds	r3, #38	@ 0x26
 8013050:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013052:	23ff      	movs	r3, #255	@ 0xff
 8013054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8013058:	2300      	movs	r3, #0
 801305a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	68f9      	ldr	r1, [r7, #12]
 8013062:	4618      	mov	r0, r3
 8013064:	f000 fe0e 	bl	8013c84 <ip4_addr_isbroadcast_u32>
 8013068:	4603      	mov	r3, r0
 801306a:	2b00      	cmp	r3, #0
 801306c:	d10c      	bne.n	8013088 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013076:	2be0      	cmp	r3, #224	@ 0xe0
 8013078:	d006      	beq.n	8013088 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d003      	beq.n	8013088 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013080:	68bb      	ldr	r3, [r7, #8]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d102      	bne.n	801308e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013088:	f06f 030f 	mvn.w	r3, #15
 801308c:	e101      	b.n	8013292 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801308e:	68fa      	ldr	r2, [r7, #12]
 8013090:	2101      	movs	r1, #1
 8013092:	68b8      	ldr	r0, [r7, #8]
 8013094:	f7ff fb60 	bl	8012758 <etharp_find_entry>
 8013098:	4603      	mov	r3, r0
 801309a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801309c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	da02      	bge.n	80130aa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80130a4:	8a7b      	ldrh	r3, [r7, #18]
 80130a6:	b25b      	sxtb	r3, r3
 80130a8:	e0f3      	b.n	8013292 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80130aa:	8a7b      	ldrh	r3, [r7, #18]
 80130ac:	2b7e      	cmp	r3, #126	@ 0x7e
 80130ae:	d906      	bls.n	80130be <etharp_query+0x7e>
 80130b0:	4b7a      	ldr	r3, [pc, #488]	@ (801329c <etharp_query+0x25c>)
 80130b2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80130b6:	497a      	ldr	r1, [pc, #488]	@ (80132a0 <etharp_query+0x260>)
 80130b8:	487a      	ldr	r0, [pc, #488]	@ (80132a4 <etharp_query+0x264>)
 80130ba:	f001 fe39 	bl	8014d30 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80130be:	8a7b      	ldrh	r3, [r7, #18]
 80130c0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80130c2:	7c7a      	ldrb	r2, [r7, #17]
 80130c4:	4978      	ldr	r1, [pc, #480]	@ (80132a8 <etharp_query+0x268>)
 80130c6:	4613      	mov	r3, r2
 80130c8:	005b      	lsls	r3, r3, #1
 80130ca:	4413      	add	r3, r2
 80130cc:	00db      	lsls	r3, r3, #3
 80130ce:	440b      	add	r3, r1
 80130d0:	3314      	adds	r3, #20
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d115      	bne.n	8013104 <etharp_query+0xc4>
    is_new_entry = 1;
 80130d8:	2301      	movs	r3, #1
 80130da:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80130dc:	7c7a      	ldrb	r2, [r7, #17]
 80130de:	4972      	ldr	r1, [pc, #456]	@ (80132a8 <etharp_query+0x268>)
 80130e0:	4613      	mov	r3, r2
 80130e2:	005b      	lsls	r3, r3, #1
 80130e4:	4413      	add	r3, r2
 80130e6:	00db      	lsls	r3, r3, #3
 80130e8:	440b      	add	r3, r1
 80130ea:	3314      	adds	r3, #20
 80130ec:	2201      	movs	r2, #1
 80130ee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80130f0:	7c7a      	ldrb	r2, [r7, #17]
 80130f2:	496d      	ldr	r1, [pc, #436]	@ (80132a8 <etharp_query+0x268>)
 80130f4:	4613      	mov	r3, r2
 80130f6:	005b      	lsls	r3, r3, #1
 80130f8:	4413      	add	r3, r2
 80130fa:	00db      	lsls	r3, r3, #3
 80130fc:	440b      	add	r3, r1
 80130fe:	3308      	adds	r3, #8
 8013100:	68fa      	ldr	r2, [r7, #12]
 8013102:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013104:	7c7a      	ldrb	r2, [r7, #17]
 8013106:	4968      	ldr	r1, [pc, #416]	@ (80132a8 <etharp_query+0x268>)
 8013108:	4613      	mov	r3, r2
 801310a:	005b      	lsls	r3, r3, #1
 801310c:	4413      	add	r3, r2
 801310e:	00db      	lsls	r3, r3, #3
 8013110:	440b      	add	r3, r1
 8013112:	3314      	adds	r3, #20
 8013114:	781b      	ldrb	r3, [r3, #0]
 8013116:	2b01      	cmp	r3, #1
 8013118:	d011      	beq.n	801313e <etharp_query+0xfe>
 801311a:	7c7a      	ldrb	r2, [r7, #17]
 801311c:	4962      	ldr	r1, [pc, #392]	@ (80132a8 <etharp_query+0x268>)
 801311e:	4613      	mov	r3, r2
 8013120:	005b      	lsls	r3, r3, #1
 8013122:	4413      	add	r3, r2
 8013124:	00db      	lsls	r3, r3, #3
 8013126:	440b      	add	r3, r1
 8013128:	3314      	adds	r3, #20
 801312a:	781b      	ldrb	r3, [r3, #0]
 801312c:	2b01      	cmp	r3, #1
 801312e:	d806      	bhi.n	801313e <etharp_query+0xfe>
 8013130:	4b5a      	ldr	r3, [pc, #360]	@ (801329c <etharp_query+0x25c>)
 8013132:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8013136:	495d      	ldr	r1, [pc, #372]	@ (80132ac <etharp_query+0x26c>)
 8013138:	485a      	ldr	r0, [pc, #360]	@ (80132a4 <etharp_query+0x264>)
 801313a:	f001 fdf9 	bl	8014d30 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801313e:	6a3b      	ldr	r3, [r7, #32]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d102      	bne.n	801314a <etharp_query+0x10a>
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d10c      	bne.n	8013164 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801314a:	68b9      	ldr	r1, [r7, #8]
 801314c:	68f8      	ldr	r0, [r7, #12]
 801314e:	f000 f963 	bl	8013418 <etharp_request>
 8013152:	4603      	mov	r3, r0
 8013154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d102      	bne.n	8013164 <etharp_query+0x124>
      return result;
 801315e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013162:	e096      	b.n	8013292 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d106      	bne.n	8013178 <etharp_query+0x138>
 801316a:	4b4c      	ldr	r3, [pc, #304]	@ (801329c <etharp_query+0x25c>)
 801316c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8013170:	494f      	ldr	r1, [pc, #316]	@ (80132b0 <etharp_query+0x270>)
 8013172:	484c      	ldr	r0, [pc, #304]	@ (80132a4 <etharp_query+0x264>)
 8013174:	f001 fddc 	bl	8014d30 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013178:	7c7a      	ldrb	r2, [r7, #17]
 801317a:	494b      	ldr	r1, [pc, #300]	@ (80132a8 <etharp_query+0x268>)
 801317c:	4613      	mov	r3, r2
 801317e:	005b      	lsls	r3, r3, #1
 8013180:	4413      	add	r3, r2
 8013182:	00db      	lsls	r3, r3, #3
 8013184:	440b      	add	r3, r1
 8013186:	3314      	adds	r3, #20
 8013188:	781b      	ldrb	r3, [r3, #0]
 801318a:	2b01      	cmp	r3, #1
 801318c:	d917      	bls.n	80131be <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801318e:	4a49      	ldr	r2, [pc, #292]	@ (80132b4 <etharp_query+0x274>)
 8013190:	7c7b      	ldrb	r3, [r7, #17]
 8013192:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013194:	7c7a      	ldrb	r2, [r7, #17]
 8013196:	4613      	mov	r3, r2
 8013198:	005b      	lsls	r3, r3, #1
 801319a:	4413      	add	r3, r2
 801319c:	00db      	lsls	r3, r3, #3
 801319e:	3308      	adds	r3, #8
 80131a0:	4a41      	ldr	r2, [pc, #260]	@ (80132a8 <etharp_query+0x268>)
 80131a2:	4413      	add	r3, r2
 80131a4:	3304      	adds	r3, #4
 80131a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80131aa:	9200      	str	r2, [sp, #0]
 80131ac:	697a      	ldr	r2, [r7, #20]
 80131ae:	6879      	ldr	r1, [r7, #4]
 80131b0:	68f8      	ldr	r0, [r7, #12]
 80131b2:	f001 fc75 	bl	8014aa0 <ethernet_output>
 80131b6:	4603      	mov	r3, r0
 80131b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80131bc:	e067      	b.n	801328e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80131be:	7c7a      	ldrb	r2, [r7, #17]
 80131c0:	4939      	ldr	r1, [pc, #228]	@ (80132a8 <etharp_query+0x268>)
 80131c2:	4613      	mov	r3, r2
 80131c4:	005b      	lsls	r3, r3, #1
 80131c6:	4413      	add	r3, r2
 80131c8:	00db      	lsls	r3, r3, #3
 80131ca:	440b      	add	r3, r1
 80131cc:	3314      	adds	r3, #20
 80131ce:	781b      	ldrb	r3, [r3, #0]
 80131d0:	2b01      	cmp	r3, #1
 80131d2:	d15c      	bne.n	801328e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80131d4:	2300      	movs	r3, #0
 80131d6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80131dc:	e01c      	b.n	8013218 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80131de:	69fb      	ldr	r3, [r7, #28]
 80131e0:	895a      	ldrh	r2, [r3, #10]
 80131e2:	69fb      	ldr	r3, [r7, #28]
 80131e4:	891b      	ldrh	r3, [r3, #8]
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d10a      	bne.n	8013200 <etharp_query+0x1c0>
 80131ea:	69fb      	ldr	r3, [r7, #28]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d006      	beq.n	8013200 <etharp_query+0x1c0>
 80131f2:	4b2a      	ldr	r3, [pc, #168]	@ (801329c <etharp_query+0x25c>)
 80131f4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80131f8:	492f      	ldr	r1, [pc, #188]	@ (80132b8 <etharp_query+0x278>)
 80131fa:	482a      	ldr	r0, [pc, #168]	@ (80132a4 <etharp_query+0x264>)
 80131fc:	f001 fd98 	bl	8014d30 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013200:	69fb      	ldr	r3, [r7, #28]
 8013202:	7b1b      	ldrb	r3, [r3, #12]
 8013204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013208:	2b00      	cmp	r3, #0
 801320a:	d002      	beq.n	8013212 <etharp_query+0x1d2>
        copy_needed = 1;
 801320c:	2301      	movs	r3, #1
 801320e:	61bb      	str	r3, [r7, #24]
        break;
 8013210:	e005      	b.n	801321e <etharp_query+0x1de>
      }
      p = p->next;
 8013212:	69fb      	ldr	r3, [r7, #28]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013218:	69fb      	ldr	r3, [r7, #28]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d1df      	bne.n	80131de <etharp_query+0x19e>
    }
    if (copy_needed) {
 801321e:	69bb      	ldr	r3, [r7, #24]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d007      	beq.n	8013234 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013224:	687a      	ldr	r2, [r7, #4]
 8013226:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801322a:	200e      	movs	r0, #14
 801322c:	f7f9 fa10 	bl	800c650 <pbuf_clone>
 8013230:	61f8      	str	r0, [r7, #28]
 8013232:	e004      	b.n	801323e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013238:	69f8      	ldr	r0, [r7, #28]
 801323a:	f7f8 ffab 	bl	800c194 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801323e:	69fb      	ldr	r3, [r7, #28]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d021      	beq.n	8013288 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013244:	7c7a      	ldrb	r2, [r7, #17]
 8013246:	4918      	ldr	r1, [pc, #96]	@ (80132a8 <etharp_query+0x268>)
 8013248:	4613      	mov	r3, r2
 801324a:	005b      	lsls	r3, r3, #1
 801324c:	4413      	add	r3, r2
 801324e:	00db      	lsls	r3, r3, #3
 8013250:	440b      	add	r3, r1
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d00a      	beq.n	801326e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013258:	7c7a      	ldrb	r2, [r7, #17]
 801325a:	4913      	ldr	r1, [pc, #76]	@ (80132a8 <etharp_query+0x268>)
 801325c:	4613      	mov	r3, r2
 801325e:	005b      	lsls	r3, r3, #1
 8013260:	4413      	add	r3, r2
 8013262:	00db      	lsls	r3, r3, #3
 8013264:	440b      	add	r3, r1
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	4618      	mov	r0, r3
 801326a:	f7f8 fef3 	bl	800c054 <pbuf_free>
      }
      arp_table[i].q = p;
 801326e:	7c7a      	ldrb	r2, [r7, #17]
 8013270:	490d      	ldr	r1, [pc, #52]	@ (80132a8 <etharp_query+0x268>)
 8013272:	4613      	mov	r3, r2
 8013274:	005b      	lsls	r3, r3, #1
 8013276:	4413      	add	r3, r2
 8013278:	00db      	lsls	r3, r3, #3
 801327a:	440b      	add	r3, r1
 801327c:	69fa      	ldr	r2, [r7, #28]
 801327e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013280:	2300      	movs	r3, #0
 8013282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013286:	e002      	b.n	801328e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013288:	23ff      	movs	r3, #255	@ 0xff
 801328a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801328e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8013292:	4618      	mov	r0, r3
 8013294:	3728      	adds	r7, #40	@ 0x28
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}
 801329a:	bf00      	nop
 801329c:	08017e74 	.word	0x08017e74
 80132a0:	08018020 	.word	0x08018020
 80132a4:	08017eec 	.word	0x08017eec
 80132a8:	2000b2c4 	.word	0x2000b2c4
 80132ac:	08018030 	.word	0x08018030
 80132b0:	08018014 	.word	0x08018014
 80132b4:	2000b3b4 	.word	0x2000b3b4
 80132b8:	08018058 	.word	0x08018058

080132bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b08a      	sub	sp, #40	@ 0x28
 80132c0:	af02      	add	r7, sp, #8
 80132c2:	60f8      	str	r0, [r7, #12]
 80132c4:	60b9      	str	r1, [r7, #8]
 80132c6:	607a      	str	r2, [r7, #4]
 80132c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80132ca:	2300      	movs	r3, #0
 80132cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d106      	bne.n	80132e2 <etharp_raw+0x26>
 80132d4:	4b3a      	ldr	r3, [pc, #232]	@ (80133c0 <etharp_raw+0x104>)
 80132d6:	f240 4257 	movw	r2, #1111	@ 0x457
 80132da:	493a      	ldr	r1, [pc, #232]	@ (80133c4 <etharp_raw+0x108>)
 80132dc:	483a      	ldr	r0, [pc, #232]	@ (80133c8 <etharp_raw+0x10c>)
 80132de:	f001 fd27 	bl	8014d30 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80132e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80132e6:	211c      	movs	r1, #28
 80132e8:	200e      	movs	r0, #14
 80132ea:	f7f8 fbcf 	bl	800ba8c <pbuf_alloc>
 80132ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80132f0:	69bb      	ldr	r3, [r7, #24]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d102      	bne.n	80132fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80132f6:	f04f 33ff 	mov.w	r3, #4294967295
 80132fa:	e05d      	b.n	80133b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80132fc:	69bb      	ldr	r3, [r7, #24]
 80132fe:	895b      	ldrh	r3, [r3, #10]
 8013300:	2b1b      	cmp	r3, #27
 8013302:	d806      	bhi.n	8013312 <etharp_raw+0x56>
 8013304:	4b2e      	ldr	r3, [pc, #184]	@ (80133c0 <etharp_raw+0x104>)
 8013306:	f240 4262 	movw	r2, #1122	@ 0x462
 801330a:	4930      	ldr	r1, [pc, #192]	@ (80133cc <etharp_raw+0x110>)
 801330c:	482e      	ldr	r0, [pc, #184]	@ (80133c8 <etharp_raw+0x10c>)
 801330e:	f001 fd0f 	bl	8014d30 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013312:	69bb      	ldr	r3, [r7, #24]
 8013314:	685b      	ldr	r3, [r3, #4]
 8013316:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013318:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801331a:	4618      	mov	r0, r3
 801331c:	f7f7 fb3c 	bl	800a998 <lwip_htons>
 8013320:	4603      	mov	r3, r0
 8013322:	461a      	mov	r2, r3
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801332e:	2b06      	cmp	r3, #6
 8013330:	d006      	beq.n	8013340 <etharp_raw+0x84>
 8013332:	4b23      	ldr	r3, [pc, #140]	@ (80133c0 <etharp_raw+0x104>)
 8013334:	f240 4269 	movw	r2, #1129	@ 0x469
 8013338:	4925      	ldr	r1, [pc, #148]	@ (80133d0 <etharp_raw+0x114>)
 801333a:	4823      	ldr	r0, [pc, #140]	@ (80133c8 <etharp_raw+0x10c>)
 801333c:	f001 fcf8 	bl	8014d30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	3308      	adds	r3, #8
 8013344:	2206      	movs	r2, #6
 8013346:	6839      	ldr	r1, [r7, #0]
 8013348:	4618      	mov	r0, r3
 801334a:	f001 fdcc 	bl	8014ee6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	3312      	adds	r3, #18
 8013352:	2206      	movs	r2, #6
 8013354:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013356:	4618      	mov	r0, r3
 8013358:	f001 fdc5 	bl	8014ee6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	330e      	adds	r3, #14
 8013360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013362:	6812      	ldr	r2, [r2, #0]
 8013364:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013366:	697b      	ldr	r3, [r7, #20]
 8013368:	3318      	adds	r3, #24
 801336a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801336c:	6812      	ldr	r2, [r2, #0]
 801336e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	2200      	movs	r2, #0
 8013374:	701a      	strb	r2, [r3, #0]
 8013376:	2200      	movs	r2, #0
 8013378:	f042 0201 	orr.w	r2, r2, #1
 801337c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	2200      	movs	r2, #0
 8013382:	f042 0208 	orr.w	r2, r2, #8
 8013386:	709a      	strb	r2, [r3, #2]
 8013388:	2200      	movs	r2, #0
 801338a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	2206      	movs	r2, #6
 8013390:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013392:	697b      	ldr	r3, [r7, #20]
 8013394:	2204      	movs	r2, #4
 8013396:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013398:	f640 0306 	movw	r3, #2054	@ 0x806
 801339c:	9300      	str	r3, [sp, #0]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	68ba      	ldr	r2, [r7, #8]
 80133a2:	69b9      	ldr	r1, [r7, #24]
 80133a4:	68f8      	ldr	r0, [r7, #12]
 80133a6:	f001 fb7b 	bl	8014aa0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80133aa:	69b8      	ldr	r0, [r7, #24]
 80133ac:	f7f8 fe52 	bl	800c054 <pbuf_free>
  p = NULL;
 80133b0:	2300      	movs	r3, #0
 80133b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80133b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	3720      	adds	r7, #32
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}
 80133c0:	08017e74 	.word	0x08017e74
 80133c4:	08017fc4 	.word	0x08017fc4
 80133c8:	08017eec 	.word	0x08017eec
 80133cc:	08018074 	.word	0x08018074
 80133d0:	080180a8 	.word	0x080180a8

080133d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b088      	sub	sp, #32
 80133d8:	af04      	add	r7, sp, #16
 80133da:	60f8      	str	r0, [r7, #12]
 80133dc:	60b9      	str	r1, [r7, #8]
 80133de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80133f0:	2201      	movs	r2, #1
 80133f2:	9203      	str	r2, [sp, #12]
 80133f4:	68ba      	ldr	r2, [r7, #8]
 80133f6:	9202      	str	r2, [sp, #8]
 80133f8:	4a06      	ldr	r2, [pc, #24]	@ (8013414 <etharp_request_dst+0x40>)
 80133fa:	9201      	str	r2, [sp, #4]
 80133fc:	9300      	str	r3, [sp, #0]
 80133fe:	4603      	mov	r3, r0
 8013400:	687a      	ldr	r2, [r7, #4]
 8013402:	68f8      	ldr	r0, [r7, #12]
 8013404:	f7ff ff5a 	bl	80132bc <etharp_raw>
 8013408:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801340a:	4618      	mov	r0, r3
 801340c:	3710      	adds	r7, #16
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
 8013412:	bf00      	nop
 8013414:	08018640 	.word	0x08018640

08013418 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b082      	sub	sp, #8
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013422:	4a05      	ldr	r2, [pc, #20]	@ (8013438 <etharp_request+0x20>)
 8013424:	6839      	ldr	r1, [r7, #0]
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f7ff ffd4 	bl	80133d4 <etharp_request_dst>
 801342c:	4603      	mov	r3, r0
}
 801342e:	4618      	mov	r0, r3
 8013430:	3708      	adds	r7, #8
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
 8013436:	bf00      	nop
 8013438:	08018638 	.word	0x08018638

0801343c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b08e      	sub	sp, #56	@ 0x38
 8013440:	af04      	add	r7, sp, #16
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013446:	4b79      	ldr	r3, [pc, #484]	@ (801362c <icmp_input+0x1f0>)
 8013448:	689b      	ldr	r3, [r3, #8]
 801344a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801344e:	781b      	ldrb	r3, [r3, #0]
 8013450:	f003 030f 	and.w	r3, r3, #15
 8013454:	b2db      	uxtb	r3, r3
 8013456:	009b      	lsls	r3, r3, #2
 8013458:	b2db      	uxtb	r3, r3
 801345a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801345c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801345e:	2b13      	cmp	r3, #19
 8013460:	f240 80cd 	bls.w	80135fe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	895b      	ldrh	r3, [r3, #10]
 8013468:	2b03      	cmp	r3, #3
 801346a:	f240 80ca 	bls.w	8013602 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	685b      	ldr	r3, [r3, #4]
 8013472:	781b      	ldrb	r3, [r3, #0]
 8013474:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013478:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801347c:	2b00      	cmp	r3, #0
 801347e:	f000 80b7 	beq.w	80135f0 <icmp_input+0x1b4>
 8013482:	2b08      	cmp	r3, #8
 8013484:	f040 80b7 	bne.w	80135f6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013488:	4b69      	ldr	r3, [pc, #420]	@ (8013630 <icmp_input+0x1f4>)
 801348a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801348c:	4b67      	ldr	r3, [pc, #412]	@ (801362c <icmp_input+0x1f0>)
 801348e:	695b      	ldr	r3, [r3, #20]
 8013490:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013494:	2be0      	cmp	r3, #224	@ 0xe0
 8013496:	f000 80bb 	beq.w	8013610 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801349a:	4b64      	ldr	r3, [pc, #400]	@ (801362c <icmp_input+0x1f0>)
 801349c:	695b      	ldr	r3, [r3, #20]
 801349e:	4a63      	ldr	r2, [pc, #396]	@ (801362c <icmp_input+0x1f0>)
 80134a0:	6812      	ldr	r2, [r2, #0]
 80134a2:	4611      	mov	r1, r2
 80134a4:	4618      	mov	r0, r3
 80134a6:	f000 fbed 	bl	8013c84 <ip4_addr_isbroadcast_u32>
 80134aa:	4603      	mov	r3, r0
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	f040 80b1 	bne.w	8013614 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	891b      	ldrh	r3, [r3, #8]
 80134b6:	2b07      	cmp	r3, #7
 80134b8:	f240 80a5 	bls.w	8013606 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80134bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80134be:	330e      	adds	r3, #14
 80134c0:	4619      	mov	r1, r3
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	f7f8 fd30 	bl	800bf28 <pbuf_add_header>
 80134c8:	4603      	mov	r3, r0
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d04b      	beq.n	8013566 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	891a      	ldrh	r2, [r3, #8]
 80134d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80134d4:	4413      	add	r3, r2
 80134d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	891b      	ldrh	r3, [r3, #8]
 80134dc:	8b7a      	ldrh	r2, [r7, #26]
 80134de:	429a      	cmp	r2, r3
 80134e0:	f0c0 809a 	bcc.w	8013618 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80134e4:	8b7b      	ldrh	r3, [r7, #26]
 80134e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80134ea:	4619      	mov	r1, r3
 80134ec:	200e      	movs	r0, #14
 80134ee:	f7f8 facd 	bl	800ba8c <pbuf_alloc>
 80134f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	f000 8090 	beq.w	801361c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	895b      	ldrh	r3, [r3, #10]
 8013500:	461a      	mov	r2, r3
 8013502:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013504:	3308      	adds	r3, #8
 8013506:	429a      	cmp	r2, r3
 8013508:	d203      	bcs.n	8013512 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801350a:	6978      	ldr	r0, [r7, #20]
 801350c:	f7f8 fda2 	bl	800c054 <pbuf_free>
          goto icmperr;
 8013510:	e085      	b.n	801361e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013512:	697b      	ldr	r3, [r7, #20]
 8013514:	685b      	ldr	r3, [r3, #4]
 8013516:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013518:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801351a:	4618      	mov	r0, r3
 801351c:	f001 fce3 	bl	8014ee6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013520:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013522:	4619      	mov	r1, r3
 8013524:	6978      	ldr	r0, [r7, #20]
 8013526:	f7f8 fd0f 	bl	800bf48 <pbuf_remove_header>
 801352a:	4603      	mov	r3, r0
 801352c:	2b00      	cmp	r3, #0
 801352e:	d009      	beq.n	8013544 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013530:	4b40      	ldr	r3, [pc, #256]	@ (8013634 <icmp_input+0x1f8>)
 8013532:	22b6      	movs	r2, #182	@ 0xb6
 8013534:	4940      	ldr	r1, [pc, #256]	@ (8013638 <icmp_input+0x1fc>)
 8013536:	4841      	ldr	r0, [pc, #260]	@ (801363c <icmp_input+0x200>)
 8013538:	f001 fbfa 	bl	8014d30 <iprintf>
          pbuf_free(r);
 801353c:	6978      	ldr	r0, [r7, #20]
 801353e:	f7f8 fd89 	bl	800c054 <pbuf_free>
          goto icmperr;
 8013542:	e06c      	b.n	801361e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013544:	6879      	ldr	r1, [r7, #4]
 8013546:	6978      	ldr	r0, [r7, #20]
 8013548:	f7f8 feac 	bl	800c2a4 <pbuf_copy>
 801354c:	4603      	mov	r3, r0
 801354e:	2b00      	cmp	r3, #0
 8013550:	d003      	beq.n	801355a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013552:	6978      	ldr	r0, [r7, #20]
 8013554:	f7f8 fd7e 	bl	800c054 <pbuf_free>
          goto icmperr;
 8013558:	e061      	b.n	801361e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f7f8 fd7a 	bl	800c054 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013560:	697b      	ldr	r3, [r7, #20]
 8013562:	607b      	str	r3, [r7, #4]
 8013564:	e00f      	b.n	8013586 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013566:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013568:	330e      	adds	r3, #14
 801356a:	4619      	mov	r1, r3
 801356c:	6878      	ldr	r0, [r7, #4]
 801356e:	f7f8 fceb 	bl	800bf48 <pbuf_remove_header>
 8013572:	4603      	mov	r3, r0
 8013574:	2b00      	cmp	r3, #0
 8013576:	d006      	beq.n	8013586 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013578:	4b2e      	ldr	r3, [pc, #184]	@ (8013634 <icmp_input+0x1f8>)
 801357a:	22c7      	movs	r2, #199	@ 0xc7
 801357c:	4930      	ldr	r1, [pc, #192]	@ (8013640 <icmp_input+0x204>)
 801357e:	482f      	ldr	r0, [pc, #188]	@ (801363c <icmp_input+0x200>)
 8013580:	f001 fbd6 	bl	8014d30 <iprintf>
          goto icmperr;
 8013584:	e04b      	b.n	801361e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	685b      	ldr	r3, [r3, #4]
 801358a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801358c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801358e:	4619      	mov	r1, r3
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f7f8 fcc9 	bl	800bf28 <pbuf_add_header>
 8013596:	4603      	mov	r3, r0
 8013598:	2b00      	cmp	r3, #0
 801359a:	d12b      	bne.n	80135f4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	685b      	ldr	r3, [r3, #4]
 80135a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80135a2:	69fb      	ldr	r3, [r7, #28]
 80135a4:	681a      	ldr	r2, [r3, #0]
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80135aa:	4b20      	ldr	r3, [pc, #128]	@ (801362c <icmp_input+0x1f0>)
 80135ac:	691a      	ldr	r2, [r3, #16]
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	2200      	movs	r2, #0
 80135b6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80135b8:	693b      	ldr	r3, [r7, #16]
 80135ba:	2200      	movs	r2, #0
 80135bc:	709a      	strb	r2, [r3, #2]
 80135be:	2200      	movs	r2, #0
 80135c0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	22ff      	movs	r2, #255	@ 0xff
 80135c6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	2200      	movs	r2, #0
 80135cc:	729a      	strb	r2, [r3, #10]
 80135ce:	2200      	movs	r2, #0
 80135d0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	9302      	str	r3, [sp, #8]
 80135d6:	2301      	movs	r3, #1
 80135d8:	9301      	str	r3, [sp, #4]
 80135da:	2300      	movs	r3, #0
 80135dc:	9300      	str	r3, [sp, #0]
 80135de:	23ff      	movs	r3, #255	@ 0xff
 80135e0:	2200      	movs	r2, #0
 80135e2:	69f9      	ldr	r1, [r7, #28]
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f000 fa75 	bl	8013ad4 <ip4_output_if>
 80135ea:	4603      	mov	r3, r0
 80135ec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80135ee:	e001      	b.n	80135f4 <icmp_input+0x1b8>
      break;
 80135f0:	bf00      	nop
 80135f2:	e000      	b.n	80135f6 <icmp_input+0x1ba>
      break;
 80135f4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80135f6:	6878      	ldr	r0, [r7, #4]
 80135f8:	f7f8 fd2c 	bl	800c054 <pbuf_free>
  return;
 80135fc:	e013      	b.n	8013626 <icmp_input+0x1ea>
    goto lenerr;
 80135fe:	bf00      	nop
 8013600:	e002      	b.n	8013608 <icmp_input+0x1cc>
    goto lenerr;
 8013602:	bf00      	nop
 8013604:	e000      	b.n	8013608 <icmp_input+0x1cc>
        goto lenerr;
 8013606:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f7f8 fd23 	bl	800c054 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801360e:	e00a      	b.n	8013626 <icmp_input+0x1ea>
        goto icmperr;
 8013610:	bf00      	nop
 8013612:	e004      	b.n	801361e <icmp_input+0x1e2>
        goto icmperr;
 8013614:	bf00      	nop
 8013616:	e002      	b.n	801361e <icmp_input+0x1e2>
          goto icmperr;
 8013618:	bf00      	nop
 801361a:	e000      	b.n	801361e <icmp_input+0x1e2>
          goto icmperr;
 801361c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801361e:	6878      	ldr	r0, [r7, #4]
 8013620:	f7f8 fd18 	bl	800c054 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013624:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013626:	3728      	adds	r7, #40	@ 0x28
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}
 801362c:	20005b34 	.word	0x20005b34
 8013630:	20005b48 	.word	0x20005b48
 8013634:	080180ec 	.word	0x080180ec
 8013638:	08018124 	.word	0x08018124
 801363c:	0801815c 	.word	0x0801815c
 8013640:	08018184 	.word	0x08018184

08013644 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b082      	sub	sp, #8
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
 801364c:	460b      	mov	r3, r1
 801364e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013650:	78fb      	ldrb	r3, [r7, #3]
 8013652:	461a      	mov	r2, r3
 8013654:	2103      	movs	r1, #3
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f000 f814 	bl	8013684 <icmp_send_response>
}
 801365c:	bf00      	nop
 801365e:	3708      	adds	r7, #8
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}

08013664 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b082      	sub	sp, #8
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
 801366c:	460b      	mov	r3, r1
 801366e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013670:	78fb      	ldrb	r3, [r7, #3]
 8013672:	461a      	mov	r2, r3
 8013674:	210b      	movs	r1, #11
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	f000 f804 	bl	8013684 <icmp_send_response>
}
 801367c:	bf00      	nop
 801367e:	3708      	adds	r7, #8
 8013680:	46bd      	mov	sp, r7
 8013682:	bd80      	pop	{r7, pc}

08013684 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b08c      	sub	sp, #48	@ 0x30
 8013688:	af04      	add	r7, sp, #16
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	460b      	mov	r3, r1
 801368e:	70fb      	strb	r3, [r7, #3]
 8013690:	4613      	mov	r3, r2
 8013692:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013694:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013698:	2124      	movs	r1, #36	@ 0x24
 801369a:	2022      	movs	r0, #34	@ 0x22
 801369c:	f7f8 f9f6 	bl	800ba8c <pbuf_alloc>
 80136a0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80136a2:	69fb      	ldr	r3, [r7, #28]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d04c      	beq.n	8013742 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80136a8:	69fb      	ldr	r3, [r7, #28]
 80136aa:	895b      	ldrh	r3, [r3, #10]
 80136ac:	2b23      	cmp	r3, #35	@ 0x23
 80136ae:	d806      	bhi.n	80136be <icmp_send_response+0x3a>
 80136b0:	4b26      	ldr	r3, [pc, #152]	@ (801374c <icmp_send_response+0xc8>)
 80136b2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80136b6:	4926      	ldr	r1, [pc, #152]	@ (8013750 <icmp_send_response+0xcc>)
 80136b8:	4826      	ldr	r0, [pc, #152]	@ (8013754 <icmp_send_response+0xd0>)
 80136ba:	f001 fb39 	bl	8014d30 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	685b      	ldr	r3, [r3, #4]
 80136c2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80136c4:	69fb      	ldr	r3, [r7, #28]
 80136c6:	685b      	ldr	r3, [r3, #4]
 80136c8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	78fa      	ldrb	r2, [r7, #3]
 80136ce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	78ba      	ldrb	r2, [r7, #2]
 80136d4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	2200      	movs	r2, #0
 80136da:	711a      	strb	r2, [r3, #4]
 80136dc:	2200      	movs	r2, #0
 80136de:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	2200      	movs	r2, #0
 80136e4:	719a      	strb	r2, [r3, #6]
 80136e6:	2200      	movs	r2, #0
 80136e8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80136ea:	69fb      	ldr	r3, [r7, #28]
 80136ec:	685b      	ldr	r3, [r3, #4]
 80136ee:	f103 0008 	add.w	r0, r3, #8
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	685b      	ldr	r3, [r3, #4]
 80136f6:	221c      	movs	r2, #28
 80136f8:	4619      	mov	r1, r3
 80136fa:	f001 fbf4 	bl	8014ee6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80136fe:	69bb      	ldr	r3, [r7, #24]
 8013700:	68db      	ldr	r3, [r3, #12]
 8013702:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013704:	f107 030c 	add.w	r3, r7, #12
 8013708:	4618      	mov	r0, r3
 801370a:	f000 f825 	bl	8013758 <ip4_route>
 801370e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d011      	beq.n	801373a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013716:	697b      	ldr	r3, [r7, #20]
 8013718:	2200      	movs	r2, #0
 801371a:	709a      	strb	r2, [r3, #2]
 801371c:	2200      	movs	r2, #0
 801371e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013720:	f107 020c 	add.w	r2, r7, #12
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	9302      	str	r3, [sp, #8]
 8013728:	2301      	movs	r3, #1
 801372a:	9301      	str	r3, [sp, #4]
 801372c:	2300      	movs	r3, #0
 801372e:	9300      	str	r3, [sp, #0]
 8013730:	23ff      	movs	r3, #255	@ 0xff
 8013732:	2100      	movs	r1, #0
 8013734:	69f8      	ldr	r0, [r7, #28]
 8013736:	f000 f9cd 	bl	8013ad4 <ip4_output_if>
  }
  pbuf_free(q);
 801373a:	69f8      	ldr	r0, [r7, #28]
 801373c:	f7f8 fc8a 	bl	800c054 <pbuf_free>
 8013740:	e000      	b.n	8013744 <icmp_send_response+0xc0>
    return;
 8013742:	bf00      	nop
}
 8013744:	3720      	adds	r7, #32
 8013746:	46bd      	mov	sp, r7
 8013748:	bd80      	pop	{r7, pc}
 801374a:	bf00      	nop
 801374c:	080180ec 	.word	0x080180ec
 8013750:	080181b8 	.word	0x080181b8
 8013754:	0801815c 	.word	0x0801815c

08013758 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013758:	b480      	push	{r7}
 801375a:	b085      	sub	sp, #20
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013760:	4b33      	ldr	r3, [pc, #204]	@ (8013830 <ip4_route+0xd8>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	60fb      	str	r3, [r7, #12]
 8013766:	e036      	b.n	80137d6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801376e:	f003 0301 	and.w	r3, r3, #1
 8013772:	b2db      	uxtb	r3, r3
 8013774:	2b00      	cmp	r3, #0
 8013776:	d02b      	beq.n	80137d0 <ip4_route+0x78>
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801377e:	089b      	lsrs	r3, r3, #2
 8013780:	f003 0301 	and.w	r3, r3, #1
 8013784:	b2db      	uxtb	r3, r3
 8013786:	2b00      	cmp	r3, #0
 8013788:	d022      	beq.n	80137d0 <ip4_route+0x78>
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	3304      	adds	r3, #4
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d01d      	beq.n	80137d0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681a      	ldr	r2, [r3, #0]
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	3304      	adds	r3, #4
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	405a      	eors	r2, r3
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	3308      	adds	r3, #8
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	4013      	ands	r3, r2
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d101      	bne.n	80137b0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	e038      	b.n	8013822 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80137b6:	f003 0302 	and.w	r3, r3, #2
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d108      	bne.n	80137d0 <ip4_route+0x78>
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	681a      	ldr	r2, [r3, #0]
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	330c      	adds	r3, #12
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	429a      	cmp	r2, r3
 80137ca:	d101      	bne.n	80137d0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	e028      	b.n	8013822 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	60fb      	str	r3, [r7, #12]
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d1c5      	bne.n	8013768 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80137dc:	4b15      	ldr	r3, [pc, #84]	@ (8013834 <ip4_route+0xdc>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d01a      	beq.n	801381a <ip4_route+0xc2>
 80137e4:	4b13      	ldr	r3, [pc, #76]	@ (8013834 <ip4_route+0xdc>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80137ec:	f003 0301 	and.w	r3, r3, #1
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d012      	beq.n	801381a <ip4_route+0xc2>
 80137f4:	4b0f      	ldr	r3, [pc, #60]	@ (8013834 <ip4_route+0xdc>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80137fc:	f003 0304 	and.w	r3, r3, #4
 8013800:	2b00      	cmp	r3, #0
 8013802:	d00a      	beq.n	801381a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013804:	4b0b      	ldr	r3, [pc, #44]	@ (8013834 <ip4_route+0xdc>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	3304      	adds	r3, #4
 801380a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801380c:	2b00      	cmp	r3, #0
 801380e:	d004      	beq.n	801381a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	b2db      	uxtb	r3, r3
 8013816:	2b7f      	cmp	r3, #127	@ 0x7f
 8013818:	d101      	bne.n	801381e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801381a:	2300      	movs	r3, #0
 801381c:	e001      	b.n	8013822 <ip4_route+0xca>
  }

  return netif_default;
 801381e:	4b05      	ldr	r3, [pc, #20]	@ (8013834 <ip4_route+0xdc>)
 8013820:	681b      	ldr	r3, [r3, #0]
}
 8013822:	4618      	mov	r0, r3
 8013824:	3714      	adds	r7, #20
 8013826:	46bd      	mov	sp, r7
 8013828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382c:	4770      	bx	lr
 801382e:	bf00      	nop
 8013830:	2000b258 	.word	0x2000b258
 8013834:	2000b25c 	.word	0x2000b25c

08013838 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b082      	sub	sp, #8
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013846:	f003 0301 	and.w	r3, r3, #1
 801384a:	b2db      	uxtb	r3, r3
 801384c:	2b00      	cmp	r3, #0
 801384e:	d016      	beq.n	801387e <ip4_input_accept+0x46>
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	3304      	adds	r3, #4
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d011      	beq.n	801387e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801385a:	4b0b      	ldr	r3, [pc, #44]	@ (8013888 <ip4_input_accept+0x50>)
 801385c:	695a      	ldr	r2, [r3, #20]
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	3304      	adds	r3, #4
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	429a      	cmp	r2, r3
 8013866:	d008      	beq.n	801387a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013868:	4b07      	ldr	r3, [pc, #28]	@ (8013888 <ip4_input_accept+0x50>)
 801386a:	695b      	ldr	r3, [r3, #20]
 801386c:	6879      	ldr	r1, [r7, #4]
 801386e:	4618      	mov	r0, r3
 8013870:	f000 fa08 	bl	8013c84 <ip4_addr_isbroadcast_u32>
 8013874:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013876:	2b00      	cmp	r3, #0
 8013878:	d001      	beq.n	801387e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801387a:	2301      	movs	r3, #1
 801387c:	e000      	b.n	8013880 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801387e:	2300      	movs	r3, #0
}
 8013880:	4618      	mov	r0, r3
 8013882:	3708      	adds	r7, #8
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}
 8013888:	20005b34 	.word	0x20005b34

0801388c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b086      	sub	sp, #24
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
 8013894:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	685b      	ldr	r3, [r3, #4]
 801389a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	781b      	ldrb	r3, [r3, #0]
 80138a0:	091b      	lsrs	r3, r3, #4
 80138a2:	b2db      	uxtb	r3, r3
 80138a4:	2b04      	cmp	r3, #4
 80138a6:	d004      	beq.n	80138b2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80138a8:	6878      	ldr	r0, [r7, #4]
 80138aa:	f7f8 fbd3 	bl	800c054 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80138ae:	2300      	movs	r3, #0
 80138b0:	e107      	b.n	8013ac2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80138b2:	697b      	ldr	r3, [r7, #20]
 80138b4:	781b      	ldrb	r3, [r3, #0]
 80138b6:	f003 030f 	and.w	r3, r3, #15
 80138ba:	b2db      	uxtb	r3, r3
 80138bc:	009b      	lsls	r3, r3, #2
 80138be:	b2db      	uxtb	r3, r3
 80138c0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80138c2:	697b      	ldr	r3, [r7, #20]
 80138c4:	885b      	ldrh	r3, [r3, #2]
 80138c6:	b29b      	uxth	r3, r3
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7f7 f865 	bl	800a998 <lwip_htons>
 80138ce:	4603      	mov	r3, r0
 80138d0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	891b      	ldrh	r3, [r3, #8]
 80138d6:	89ba      	ldrh	r2, [r7, #12]
 80138d8:	429a      	cmp	r2, r3
 80138da:	d204      	bcs.n	80138e6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80138dc:	89bb      	ldrh	r3, [r7, #12]
 80138de:	4619      	mov	r1, r3
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f7f8 fa31 	bl	800bd48 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	895b      	ldrh	r3, [r3, #10]
 80138ea:	89fa      	ldrh	r2, [r7, #14]
 80138ec:	429a      	cmp	r2, r3
 80138ee:	d807      	bhi.n	8013900 <ip4_input+0x74>
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	891b      	ldrh	r3, [r3, #8]
 80138f4:	89ba      	ldrh	r2, [r7, #12]
 80138f6:	429a      	cmp	r2, r3
 80138f8:	d802      	bhi.n	8013900 <ip4_input+0x74>
 80138fa:	89fb      	ldrh	r3, [r7, #14]
 80138fc:	2b13      	cmp	r3, #19
 80138fe:	d804      	bhi.n	801390a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	f7f8 fba7 	bl	800c054 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013906:	2300      	movs	r3, #0
 8013908:	e0db      	b.n	8013ac2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	691b      	ldr	r3, [r3, #16]
 801390e:	4a6f      	ldr	r2, [pc, #444]	@ (8013acc <ip4_input+0x240>)
 8013910:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	68db      	ldr	r3, [r3, #12]
 8013916:	4a6d      	ldr	r2, [pc, #436]	@ (8013acc <ip4_input+0x240>)
 8013918:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801391a:	4b6c      	ldr	r3, [pc, #432]	@ (8013acc <ip4_input+0x240>)
 801391c:	695b      	ldr	r3, [r3, #20]
 801391e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013922:	2be0      	cmp	r3, #224	@ 0xe0
 8013924:	d112      	bne.n	801394c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801392c:	f003 0301 	and.w	r3, r3, #1
 8013930:	b2db      	uxtb	r3, r3
 8013932:	2b00      	cmp	r3, #0
 8013934:	d007      	beq.n	8013946 <ip4_input+0xba>
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	3304      	adds	r3, #4
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d002      	beq.n	8013946 <ip4_input+0xba>
      netif = inp;
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	613b      	str	r3, [r7, #16]
 8013944:	e02a      	b.n	801399c <ip4_input+0x110>
    } else {
      netif = NULL;
 8013946:	2300      	movs	r3, #0
 8013948:	613b      	str	r3, [r7, #16]
 801394a:	e027      	b.n	801399c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801394c:	6838      	ldr	r0, [r7, #0]
 801394e:	f7ff ff73 	bl	8013838 <ip4_input_accept>
 8013952:	4603      	mov	r3, r0
 8013954:	2b00      	cmp	r3, #0
 8013956:	d002      	beq.n	801395e <ip4_input+0xd2>
      netif = inp;
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	613b      	str	r3, [r7, #16]
 801395c:	e01e      	b.n	801399c <ip4_input+0x110>
    } else {
      netif = NULL;
 801395e:	2300      	movs	r3, #0
 8013960:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013962:	4b5a      	ldr	r3, [pc, #360]	@ (8013acc <ip4_input+0x240>)
 8013964:	695b      	ldr	r3, [r3, #20]
 8013966:	b2db      	uxtb	r3, r3
 8013968:	2b7f      	cmp	r3, #127	@ 0x7f
 801396a:	d017      	beq.n	801399c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801396c:	4b58      	ldr	r3, [pc, #352]	@ (8013ad0 <ip4_input+0x244>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	613b      	str	r3, [r7, #16]
 8013972:	e00e      	b.n	8013992 <ip4_input+0x106>
          if (netif == inp) {
 8013974:	693a      	ldr	r2, [r7, #16]
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	429a      	cmp	r2, r3
 801397a:	d006      	beq.n	801398a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801397c:	6938      	ldr	r0, [r7, #16]
 801397e:	f7ff ff5b 	bl	8013838 <ip4_input_accept>
 8013982:	4603      	mov	r3, r0
 8013984:	2b00      	cmp	r3, #0
 8013986:	d108      	bne.n	801399a <ip4_input+0x10e>
 8013988:	e000      	b.n	801398c <ip4_input+0x100>
            continue;
 801398a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801398c:	693b      	ldr	r3, [r7, #16]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	613b      	str	r3, [r7, #16]
 8013992:	693b      	ldr	r3, [r7, #16]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d1ed      	bne.n	8013974 <ip4_input+0xe8>
 8013998:	e000      	b.n	801399c <ip4_input+0x110>
            break;
 801399a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801399c:	4b4b      	ldr	r3, [pc, #300]	@ (8013acc <ip4_input+0x240>)
 801399e:	691b      	ldr	r3, [r3, #16]
 80139a0:	6839      	ldr	r1, [r7, #0]
 80139a2:	4618      	mov	r0, r3
 80139a4:	f000 f96e 	bl	8013c84 <ip4_addr_isbroadcast_u32>
 80139a8:	4603      	mov	r3, r0
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d105      	bne.n	80139ba <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80139ae:	4b47      	ldr	r3, [pc, #284]	@ (8013acc <ip4_input+0x240>)
 80139b0:	691b      	ldr	r3, [r3, #16]
 80139b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80139b6:	2be0      	cmp	r3, #224	@ 0xe0
 80139b8:	d104      	bne.n	80139c4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f7f8 fb4a 	bl	800c054 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80139c0:	2300      	movs	r3, #0
 80139c2:	e07e      	b.n	8013ac2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80139c4:	693b      	ldr	r3, [r7, #16]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d104      	bne.n	80139d4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80139ca:	6878      	ldr	r0, [r7, #4]
 80139cc:	f7f8 fb42 	bl	800c054 <pbuf_free>
    return ERR_OK;
 80139d0:	2300      	movs	r3, #0
 80139d2:	e076      	b.n	8013ac2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80139d4:	697b      	ldr	r3, [r7, #20]
 80139d6:	88db      	ldrh	r3, [r3, #6]
 80139d8:	b29b      	uxth	r3, r3
 80139da:	461a      	mov	r2, r3
 80139dc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80139e0:	4013      	ands	r3, r2
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d00b      	beq.n	80139fe <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80139e6:	6878      	ldr	r0, [r7, #4]
 80139e8:	f000 fc92 	bl	8014310 <ip4_reass>
 80139ec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d101      	bne.n	80139f8 <ip4_input+0x16c>
      return ERR_OK;
 80139f4:	2300      	movs	r3, #0
 80139f6:	e064      	b.n	8013ac2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	685b      	ldr	r3, [r3, #4]
 80139fc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80139fe:	4a33      	ldr	r2, [pc, #204]	@ (8013acc <ip4_input+0x240>)
 8013a00:	693b      	ldr	r3, [r7, #16]
 8013a02:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013a04:	4a31      	ldr	r2, [pc, #196]	@ (8013acc <ip4_input+0x240>)
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013a0a:	4a30      	ldr	r2, [pc, #192]	@ (8013acc <ip4_input+0x240>)
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013a10:	697b      	ldr	r3, [r7, #20]
 8013a12:	781b      	ldrb	r3, [r3, #0]
 8013a14:	f003 030f 	and.w	r3, r3, #15
 8013a18:	b2db      	uxtb	r3, r3
 8013a1a:	009b      	lsls	r3, r3, #2
 8013a1c:	b2db      	uxtb	r3, r3
 8013a1e:	461a      	mov	r2, r3
 8013a20:	4b2a      	ldr	r3, [pc, #168]	@ (8013acc <ip4_input+0x240>)
 8013a22:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013a24:	89fb      	ldrh	r3, [r7, #14]
 8013a26:	4619      	mov	r1, r3
 8013a28:	6878      	ldr	r0, [r7, #4]
 8013a2a:	f7f8 fa8d 	bl	800bf48 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	7a5b      	ldrb	r3, [r3, #9]
 8013a32:	2b11      	cmp	r3, #17
 8013a34:	d006      	beq.n	8013a44 <ip4_input+0x1b8>
 8013a36:	2b11      	cmp	r3, #17
 8013a38:	dc13      	bgt.n	8013a62 <ip4_input+0x1d6>
 8013a3a:	2b01      	cmp	r3, #1
 8013a3c:	d00c      	beq.n	8013a58 <ip4_input+0x1cc>
 8013a3e:	2b06      	cmp	r3, #6
 8013a40:	d005      	beq.n	8013a4e <ip4_input+0x1c2>
 8013a42:	e00e      	b.n	8013a62 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013a44:	6839      	ldr	r1, [r7, #0]
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f7fe f984 	bl	8011d54 <udp_input>
        break;
 8013a4c:	e026      	b.n	8013a9c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013a4e:	6839      	ldr	r1, [r7, #0]
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f7fa f9cb 	bl	800ddec <tcp_input>
        break;
 8013a56:	e021      	b.n	8013a9c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013a58:	6839      	ldr	r1, [r7, #0]
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f7ff fcee 	bl	801343c <icmp_input>
        break;
 8013a60:	e01c      	b.n	8013a9c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013a62:	4b1a      	ldr	r3, [pc, #104]	@ (8013acc <ip4_input+0x240>)
 8013a64:	695b      	ldr	r3, [r3, #20]
 8013a66:	6939      	ldr	r1, [r7, #16]
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f000 f90b 	bl	8013c84 <ip4_addr_isbroadcast_u32>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d10f      	bne.n	8013a94 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013a74:	4b15      	ldr	r3, [pc, #84]	@ (8013acc <ip4_input+0x240>)
 8013a76:	695b      	ldr	r3, [r3, #20]
 8013a78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013a7c:	2be0      	cmp	r3, #224	@ 0xe0
 8013a7e:	d009      	beq.n	8013a94 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013a80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013a84:	4619      	mov	r1, r3
 8013a86:	6878      	ldr	r0, [r7, #4]
 8013a88:	f7f8 fad1 	bl	800c02e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013a8c:	2102      	movs	r1, #2
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f7ff fdd8 	bl	8013644 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f7f8 fadd 	bl	800c054 <pbuf_free>
        break;
 8013a9a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8013acc <ip4_input+0x240>)
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8013acc <ip4_input+0x240>)
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013aa8:	4b08      	ldr	r3, [pc, #32]	@ (8013acc <ip4_input+0x240>)
 8013aaa:	2200      	movs	r2, #0
 8013aac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013aae:	4b07      	ldr	r3, [pc, #28]	@ (8013acc <ip4_input+0x240>)
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013ab4:	4b05      	ldr	r3, [pc, #20]	@ (8013acc <ip4_input+0x240>)
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013aba:	4b04      	ldr	r3, [pc, #16]	@ (8013acc <ip4_input+0x240>)
 8013abc:	2200      	movs	r2, #0
 8013abe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013ac0:	2300      	movs	r3, #0
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3718      	adds	r7, #24
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}
 8013aca:	bf00      	nop
 8013acc:	20005b34 	.word	0x20005b34
 8013ad0:	2000b258 	.word	0x2000b258

08013ad4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b08a      	sub	sp, #40	@ 0x28
 8013ad8:	af04      	add	r7, sp, #16
 8013ada:	60f8      	str	r0, [r7, #12]
 8013adc:	60b9      	str	r1, [r7, #8]
 8013ade:	607a      	str	r2, [r7, #4]
 8013ae0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d009      	beq.n	8013b00 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d003      	beq.n	8013afa <ip4_output_if+0x26>
 8013af2:	68bb      	ldr	r3, [r7, #8]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d102      	bne.n	8013b00 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013afc:	3304      	adds	r3, #4
 8013afe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013b00:	78fa      	ldrb	r2, [r7, #3]
 8013b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b04:	9302      	str	r3, [sp, #8]
 8013b06:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013b0a:	9301      	str	r3, [sp, #4]
 8013b0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013b10:	9300      	str	r3, [sp, #0]
 8013b12:	4613      	mov	r3, r2
 8013b14:	687a      	ldr	r2, [r7, #4]
 8013b16:	6979      	ldr	r1, [r7, #20]
 8013b18:	68f8      	ldr	r0, [r7, #12]
 8013b1a:	f000 f805 	bl	8013b28 <ip4_output_if_src>
 8013b1e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013b20:	4618      	mov	r0, r3
 8013b22:	3718      	adds	r7, #24
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b088      	sub	sp, #32
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	60f8      	str	r0, [r7, #12]
 8013b30:	60b9      	str	r1, [r7, #8]
 8013b32:	607a      	str	r2, [r7, #4]
 8013b34:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	7b9b      	ldrb	r3, [r3, #14]
 8013b3a:	2b01      	cmp	r3, #1
 8013b3c:	d006      	beq.n	8013b4c <ip4_output_if_src+0x24>
 8013b3e:	4b4b      	ldr	r3, [pc, #300]	@ (8013c6c <ip4_output_if_src+0x144>)
 8013b40:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8013b44:	494a      	ldr	r1, [pc, #296]	@ (8013c70 <ip4_output_if_src+0x148>)
 8013b46:	484b      	ldr	r0, [pc, #300]	@ (8013c74 <ip4_output_if_src+0x14c>)
 8013b48:	f001 f8f2 	bl	8014d30 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d060      	beq.n	8013c14 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013b52:	2314      	movs	r3, #20
 8013b54:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013b56:	2114      	movs	r1, #20
 8013b58:	68f8      	ldr	r0, [r7, #12]
 8013b5a:	f7f8 f9e5 	bl	800bf28 <pbuf_add_header>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d002      	beq.n	8013b6a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013b64:	f06f 0301 	mvn.w	r3, #1
 8013b68:	e07c      	b.n	8013c64 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	685b      	ldr	r3, [r3, #4]
 8013b6e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	895b      	ldrh	r3, [r3, #10]
 8013b74:	2b13      	cmp	r3, #19
 8013b76:	d806      	bhi.n	8013b86 <ip4_output_if_src+0x5e>
 8013b78:	4b3c      	ldr	r3, [pc, #240]	@ (8013c6c <ip4_output_if_src+0x144>)
 8013b7a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8013b7e:	493e      	ldr	r1, [pc, #248]	@ (8013c78 <ip4_output_if_src+0x150>)
 8013b80:	483c      	ldr	r0, [pc, #240]	@ (8013c74 <ip4_output_if_src+0x14c>)
 8013b82:	f001 f8d5 	bl	8014d30 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013b86:	69fb      	ldr	r3, [r7, #28]
 8013b88:	78fa      	ldrb	r2, [r7, #3]
 8013b8a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013b8c:	69fb      	ldr	r3, [r7, #28]
 8013b8e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013b92:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681a      	ldr	r2, [r3, #0]
 8013b98:	69fb      	ldr	r3, [r7, #28]
 8013b9a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013b9c:	8b7b      	ldrh	r3, [r7, #26]
 8013b9e:	089b      	lsrs	r3, r3, #2
 8013ba0:	b29b      	uxth	r3, r3
 8013ba2:	b2db      	uxtb	r3, r3
 8013ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ba8:	b2da      	uxtb	r2, r3
 8013baa:	69fb      	ldr	r3, [r7, #28]
 8013bac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013bae:	69fb      	ldr	r3, [r7, #28]
 8013bb0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013bb4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	891b      	ldrh	r3, [r3, #8]
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7f6 feec 	bl	800a998 <lwip_htons>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	461a      	mov	r2, r3
 8013bc4:	69fb      	ldr	r3, [r7, #28]
 8013bc6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013bc8:	69fb      	ldr	r3, [r7, #28]
 8013bca:	2200      	movs	r2, #0
 8013bcc:	719a      	strb	r2, [r3, #6]
 8013bce:	2200      	movs	r2, #0
 8013bd0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8013c7c <ip4_output_if_src+0x154>)
 8013bd4:	881b      	ldrh	r3, [r3, #0]
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7f6 fede 	bl	800a998 <lwip_htons>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	461a      	mov	r2, r3
 8013be0:	69fb      	ldr	r3, [r7, #28]
 8013be2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013be4:	4b25      	ldr	r3, [pc, #148]	@ (8013c7c <ip4_output_if_src+0x154>)
 8013be6:	881b      	ldrh	r3, [r3, #0]
 8013be8:	3301      	adds	r3, #1
 8013bea:	b29a      	uxth	r2, r3
 8013bec:	4b23      	ldr	r3, [pc, #140]	@ (8013c7c <ip4_output_if_src+0x154>)
 8013bee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d104      	bne.n	8013c00 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013bf6:	4b22      	ldr	r3, [pc, #136]	@ (8013c80 <ip4_output_if_src+0x158>)
 8013bf8:	681a      	ldr	r2, [r3, #0]
 8013bfa:	69fb      	ldr	r3, [r7, #28]
 8013bfc:	60da      	str	r2, [r3, #12]
 8013bfe:	e003      	b.n	8013c08 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	681a      	ldr	r2, [r3, #0]
 8013c04:	69fb      	ldr	r3, [r7, #28]
 8013c06:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013c08:	69fb      	ldr	r3, [r7, #28]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	729a      	strb	r2, [r3, #10]
 8013c0e:	2200      	movs	r2, #0
 8013c10:	72da      	strb	r2, [r3, #11]
 8013c12:	e00f      	b.n	8013c34 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	895b      	ldrh	r3, [r3, #10]
 8013c18:	2b13      	cmp	r3, #19
 8013c1a:	d802      	bhi.n	8013c22 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013c1c:	f06f 0301 	mvn.w	r3, #1
 8013c20:	e020      	b.n	8013c64 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	685b      	ldr	r3, [r3, #4]
 8013c26:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013c28:	69fb      	ldr	r3, [r7, #28]
 8013c2a:	691b      	ldr	r3, [r3, #16]
 8013c2c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013c2e:	f107 0314 	add.w	r3, r7, #20
 8013c32:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c36:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d00c      	beq.n	8013c56 <ip4_output_if_src+0x12e>
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	891a      	ldrh	r2, [r3, #8]
 8013c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013c44:	429a      	cmp	r2, r3
 8013c46:	d906      	bls.n	8013c56 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013c48:	687a      	ldr	r2, [r7, #4]
 8013c4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013c4c:	68f8      	ldr	r0, [r7, #12]
 8013c4e:	f000 fd53 	bl	80146f8 <ip4_frag>
 8013c52:	4603      	mov	r3, r0
 8013c54:	e006      	b.n	8013c64 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c58:	695b      	ldr	r3, [r3, #20]
 8013c5a:	687a      	ldr	r2, [r7, #4]
 8013c5c:	68f9      	ldr	r1, [r7, #12]
 8013c5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013c60:	4798      	blx	r3
 8013c62:	4603      	mov	r3, r0
}
 8013c64:	4618      	mov	r0, r3
 8013c66:	3720      	adds	r7, #32
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	bd80      	pop	{r7, pc}
 8013c6c:	080181e4 	.word	0x080181e4
 8013c70:	08018218 	.word	0x08018218
 8013c74:	08018224 	.word	0x08018224
 8013c78:	0801824c 	.word	0x0801824c
 8013c7c:	2000b3b6 	.word	0x2000b3b6
 8013c80:	08018634 	.word	0x08018634

08013c84 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013c84:	b480      	push	{r7}
 8013c86:	b085      	sub	sp, #20
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
 8013c8c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c98:	d002      	beq.n	8013ca0 <ip4_addr_isbroadcast_u32+0x1c>
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d101      	bne.n	8013ca4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013ca0:	2301      	movs	r3, #1
 8013ca2:	e02a      	b.n	8013cfa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013caa:	f003 0302 	and.w	r3, r3, #2
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d101      	bne.n	8013cb6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	e021      	b.n	8013cfa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013cb6:	683b      	ldr	r3, [r7, #0]
 8013cb8:	3304      	adds	r3, #4
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	687a      	ldr	r2, [r7, #4]
 8013cbe:	429a      	cmp	r2, r3
 8013cc0:	d101      	bne.n	8013cc6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	e019      	b.n	8013cfa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013cc6:	68fa      	ldr	r2, [r7, #12]
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	3304      	adds	r3, #4
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	405a      	eors	r2, r3
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	3308      	adds	r3, #8
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	4013      	ands	r3, r2
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d10d      	bne.n	8013cf8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	3308      	adds	r3, #8
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	43da      	mvns	r2, r3
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013ce8:	683b      	ldr	r3, [r7, #0]
 8013cea:	3308      	adds	r3, #8
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d101      	bne.n	8013cf8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013cf4:	2301      	movs	r3, #1
 8013cf6:	e000      	b.n	8013cfa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013cf8:	2300      	movs	r3, #0
  }
}
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	3714      	adds	r7, #20
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d04:	4770      	bx	lr
	...

08013d08 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b084      	sub	sp, #16
 8013d0c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013d12:	4b12      	ldr	r3, [pc, #72]	@ (8013d5c <ip_reass_tmr+0x54>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013d18:	e018      	b.n	8013d4c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	7fdb      	ldrb	r3, [r3, #31]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d00b      	beq.n	8013d3a <ip_reass_tmr+0x32>
      r->timer--;
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	7fdb      	ldrb	r3, [r3, #31]
 8013d26:	3b01      	subs	r3, #1
 8013d28:	b2da      	uxtb	r2, r3
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	60fb      	str	r3, [r7, #12]
 8013d38:	e008      	b.n	8013d4c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013d44:	68b9      	ldr	r1, [r7, #8]
 8013d46:	6878      	ldr	r0, [r7, #4]
 8013d48:	f000 f80a 	bl	8013d60 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d1e3      	bne.n	8013d1a <ip_reass_tmr+0x12>
    }
  }
}
 8013d52:	bf00      	nop
 8013d54:	bf00      	nop
 8013d56:	3710      	adds	r7, #16
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}
 8013d5c:	2000b3b8 	.word	0x2000b3b8

08013d60 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b088      	sub	sp, #32
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
 8013d68:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013d6e:	683a      	ldr	r2, [r7, #0]
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d105      	bne.n	8013d82 <ip_reass_free_complete_datagram+0x22>
 8013d76:	4b45      	ldr	r3, [pc, #276]	@ (8013e8c <ip_reass_free_complete_datagram+0x12c>)
 8013d78:	22ab      	movs	r2, #171	@ 0xab
 8013d7a:	4945      	ldr	r1, [pc, #276]	@ (8013e90 <ip_reass_free_complete_datagram+0x130>)
 8013d7c:	4845      	ldr	r0, [pc, #276]	@ (8013e94 <ip_reass_free_complete_datagram+0x134>)
 8013d7e:	f000 ffd7 	bl	8014d30 <iprintf>
  if (prev != NULL) {
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d00a      	beq.n	8013d9e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	687a      	ldr	r2, [r7, #4]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d005      	beq.n	8013d9e <ip_reass_free_complete_datagram+0x3e>
 8013d92:	4b3e      	ldr	r3, [pc, #248]	@ (8013e8c <ip_reass_free_complete_datagram+0x12c>)
 8013d94:	22ad      	movs	r2, #173	@ 0xad
 8013d96:	4940      	ldr	r1, [pc, #256]	@ (8013e98 <ip_reass_free_complete_datagram+0x138>)
 8013d98:	483e      	ldr	r0, [pc, #248]	@ (8013e94 <ip_reass_free_complete_datagram+0x134>)
 8013d9a:	f000 ffc9 	bl	8014d30 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	685b      	ldr	r3, [r3, #4]
 8013da2:	685b      	ldr	r3, [r3, #4]
 8013da4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013da6:	697b      	ldr	r3, [r7, #20]
 8013da8:	889b      	ldrh	r3, [r3, #4]
 8013daa:	b29b      	uxth	r3, r3
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d12a      	bne.n	8013e06 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	685b      	ldr	r3, [r3, #4]
 8013db4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013db6:	697b      	ldr	r3, [r7, #20]
 8013db8:	681a      	ldr	r2, [r3, #0]
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013dbe:	69bb      	ldr	r3, [r7, #24]
 8013dc0:	6858      	ldr	r0, [r3, #4]
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	3308      	adds	r3, #8
 8013dc6:	2214      	movs	r2, #20
 8013dc8:	4619      	mov	r1, r3
 8013dca:	f001 f88c 	bl	8014ee6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013dce:	2101      	movs	r1, #1
 8013dd0:	69b8      	ldr	r0, [r7, #24]
 8013dd2:	f7ff fc47 	bl	8013664 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013dd6:	69b8      	ldr	r0, [r7, #24]
 8013dd8:	f7f8 f9c4 	bl	800c164 <pbuf_clen>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013de0:	8bfa      	ldrh	r2, [r7, #30]
 8013de2:	8a7b      	ldrh	r3, [r7, #18]
 8013de4:	4413      	add	r3, r2
 8013de6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013dea:	db05      	blt.n	8013df8 <ip_reass_free_complete_datagram+0x98>
 8013dec:	4b27      	ldr	r3, [pc, #156]	@ (8013e8c <ip_reass_free_complete_datagram+0x12c>)
 8013dee:	22bc      	movs	r2, #188	@ 0xbc
 8013df0:	492a      	ldr	r1, [pc, #168]	@ (8013e9c <ip_reass_free_complete_datagram+0x13c>)
 8013df2:	4828      	ldr	r0, [pc, #160]	@ (8013e94 <ip_reass_free_complete_datagram+0x134>)
 8013df4:	f000 ff9c 	bl	8014d30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013df8:	8bfa      	ldrh	r2, [r7, #30]
 8013dfa:	8a7b      	ldrh	r3, [r7, #18]
 8013dfc:	4413      	add	r3, r2
 8013dfe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013e00:	69b8      	ldr	r0, [r7, #24]
 8013e02:	f7f8 f927 	bl	800c054 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	685b      	ldr	r3, [r3, #4]
 8013e0a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013e0c:	e01f      	b.n	8013e4e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013e0e:	69bb      	ldr	r3, [r7, #24]
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013e14:	69bb      	ldr	r3, [r7, #24]
 8013e16:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013e1e:	68f8      	ldr	r0, [r7, #12]
 8013e20:	f7f8 f9a0 	bl	800c164 <pbuf_clen>
 8013e24:	4603      	mov	r3, r0
 8013e26:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013e28:	8bfa      	ldrh	r2, [r7, #30]
 8013e2a:	8a7b      	ldrh	r3, [r7, #18]
 8013e2c:	4413      	add	r3, r2
 8013e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013e32:	db05      	blt.n	8013e40 <ip_reass_free_complete_datagram+0xe0>
 8013e34:	4b15      	ldr	r3, [pc, #84]	@ (8013e8c <ip_reass_free_complete_datagram+0x12c>)
 8013e36:	22cc      	movs	r2, #204	@ 0xcc
 8013e38:	4918      	ldr	r1, [pc, #96]	@ (8013e9c <ip_reass_free_complete_datagram+0x13c>)
 8013e3a:	4816      	ldr	r0, [pc, #88]	@ (8013e94 <ip_reass_free_complete_datagram+0x134>)
 8013e3c:	f000 ff78 	bl	8014d30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013e40:	8bfa      	ldrh	r2, [r7, #30]
 8013e42:	8a7b      	ldrh	r3, [r7, #18]
 8013e44:	4413      	add	r3, r2
 8013e46:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013e48:	68f8      	ldr	r0, [r7, #12]
 8013e4a:	f7f8 f903 	bl	800c054 <pbuf_free>
  while (p != NULL) {
 8013e4e:	69bb      	ldr	r3, [r7, #24]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d1dc      	bne.n	8013e0e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013e54:	6839      	ldr	r1, [r7, #0]
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f000 f8c2 	bl	8013fe0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013e5c:	4b10      	ldr	r3, [pc, #64]	@ (8013ea0 <ip_reass_free_complete_datagram+0x140>)
 8013e5e:	881b      	ldrh	r3, [r3, #0]
 8013e60:	8bfa      	ldrh	r2, [r7, #30]
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d905      	bls.n	8013e72 <ip_reass_free_complete_datagram+0x112>
 8013e66:	4b09      	ldr	r3, [pc, #36]	@ (8013e8c <ip_reass_free_complete_datagram+0x12c>)
 8013e68:	22d2      	movs	r2, #210	@ 0xd2
 8013e6a:	490e      	ldr	r1, [pc, #56]	@ (8013ea4 <ip_reass_free_complete_datagram+0x144>)
 8013e6c:	4809      	ldr	r0, [pc, #36]	@ (8013e94 <ip_reass_free_complete_datagram+0x134>)
 8013e6e:	f000 ff5f 	bl	8014d30 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013e72:	4b0b      	ldr	r3, [pc, #44]	@ (8013ea0 <ip_reass_free_complete_datagram+0x140>)
 8013e74:	881a      	ldrh	r2, [r3, #0]
 8013e76:	8bfb      	ldrh	r3, [r7, #30]
 8013e78:	1ad3      	subs	r3, r2, r3
 8013e7a:	b29a      	uxth	r2, r3
 8013e7c:	4b08      	ldr	r3, [pc, #32]	@ (8013ea0 <ip_reass_free_complete_datagram+0x140>)
 8013e7e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013e80:	8bfb      	ldrh	r3, [r7, #30]
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3720      	adds	r7, #32
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	0801827c 	.word	0x0801827c
 8013e90:	080182b8 	.word	0x080182b8
 8013e94:	080182c4 	.word	0x080182c4
 8013e98:	080182ec 	.word	0x080182ec
 8013e9c:	08018300 	.word	0x08018300
 8013ea0:	2000b3bc 	.word	0x2000b3bc
 8013ea4:	08018320 	.word	0x08018320

08013ea8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b08a      	sub	sp, #40	@ 0x28
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
 8013eb0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013eba:	2300      	movs	r3, #0
 8013ebc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013ec6:	4b28      	ldr	r3, [pc, #160]	@ (8013f68 <ip_reass_remove_oldest_datagram+0xc0>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013ecc:	e030      	b.n	8013f30 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ed0:	695a      	ldr	r2, [r3, #20]
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	68db      	ldr	r3, [r3, #12]
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d10c      	bne.n	8013ef4 <ip_reass_remove_oldest_datagram+0x4c>
 8013eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013edc:	699a      	ldr	r2, [r3, #24]
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	691b      	ldr	r3, [r3, #16]
 8013ee2:	429a      	cmp	r2, r3
 8013ee4:	d106      	bne.n	8013ef4 <ip_reass_remove_oldest_datagram+0x4c>
 8013ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ee8:	899a      	ldrh	r2, [r3, #12]
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	889b      	ldrh	r3, [r3, #4]
 8013eee:	b29b      	uxth	r3, r3
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	d014      	beq.n	8013f1e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013ef4:	693b      	ldr	r3, [r7, #16]
 8013ef6:	3301      	adds	r3, #1
 8013ef8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013efa:	6a3b      	ldr	r3, [r7, #32]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d104      	bne.n	8013f0a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f02:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013f04:	69fb      	ldr	r3, [r7, #28]
 8013f06:	61bb      	str	r3, [r7, #24]
 8013f08:	e009      	b.n	8013f1e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f0c:	7fda      	ldrb	r2, [r3, #31]
 8013f0e:	6a3b      	ldr	r3, [r7, #32]
 8013f10:	7fdb      	ldrb	r3, [r3, #31]
 8013f12:	429a      	cmp	r2, r3
 8013f14:	d803      	bhi.n	8013f1e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f18:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013f1a:	69fb      	ldr	r3, [r7, #28]
 8013f1c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d001      	beq.n	8013f2a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f28:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d1cb      	bne.n	8013ece <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013f36:	6a3b      	ldr	r3, [r7, #32]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d008      	beq.n	8013f4e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013f3c:	69b9      	ldr	r1, [r7, #24]
 8013f3e:	6a38      	ldr	r0, [r7, #32]
 8013f40:	f7ff ff0e 	bl	8013d60 <ip_reass_free_complete_datagram>
 8013f44:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013f46:	697a      	ldr	r2, [r7, #20]
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	4413      	add	r3, r2
 8013f4c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013f4e:	697a      	ldr	r2, [r7, #20]
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	429a      	cmp	r2, r3
 8013f54:	da02      	bge.n	8013f5c <ip_reass_remove_oldest_datagram+0xb4>
 8013f56:	693b      	ldr	r3, [r7, #16]
 8013f58:	2b01      	cmp	r3, #1
 8013f5a:	dcac      	bgt.n	8013eb6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013f5c:	697b      	ldr	r3, [r7, #20]
}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	3728      	adds	r7, #40	@ 0x28
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}
 8013f66:	bf00      	nop
 8013f68:	2000b3b8 	.word	0x2000b3b8

08013f6c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b084      	sub	sp, #16
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
 8013f74:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013f76:	2004      	movs	r0, #4
 8013f78:	f7f7 f986 	bl	800b288 <memp_malloc>
 8013f7c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d110      	bne.n	8013fa6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013f84:	6839      	ldr	r1, [r7, #0]
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	f7ff ff8e 	bl	8013ea8 <ip_reass_remove_oldest_datagram>
 8013f8c:	4602      	mov	r2, r0
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	4293      	cmp	r3, r2
 8013f92:	dc03      	bgt.n	8013f9c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013f94:	2004      	movs	r0, #4
 8013f96:	f7f7 f977 	bl	800b288 <memp_malloc>
 8013f9a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d101      	bne.n	8013fa6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	e016      	b.n	8013fd4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013fa6:	2220      	movs	r2, #32
 8013fa8:	2100      	movs	r1, #0
 8013faa:	68f8      	ldr	r0, [r7, #12]
 8013fac:	f000 ff25 	bl	8014dfa <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	220f      	movs	r2, #15
 8013fb4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013fb6:	4b09      	ldr	r3, [pc, #36]	@ (8013fdc <ip_reass_enqueue_new_datagram+0x70>)
 8013fb8:	681a      	ldr	r2, [r3, #0]
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013fbe:	4a07      	ldr	r2, [pc, #28]	@ (8013fdc <ip_reass_enqueue_new_datagram+0x70>)
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	3308      	adds	r3, #8
 8013fc8:	2214      	movs	r2, #20
 8013fca:	6879      	ldr	r1, [r7, #4]
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f000 ff8a 	bl	8014ee6 <memcpy>
  return ipr;
 8013fd2:	68fb      	ldr	r3, [r7, #12]
}
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	3710      	adds	r7, #16
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}
 8013fdc:	2000b3b8 	.word	0x2000b3b8

08013fe0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b082      	sub	sp, #8
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
 8013fe8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013fea:	4b10      	ldr	r3, [pc, #64]	@ (801402c <ip_reass_dequeue_datagram+0x4c>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	687a      	ldr	r2, [r7, #4]
 8013ff0:	429a      	cmp	r2, r3
 8013ff2:	d104      	bne.n	8013ffe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	4a0c      	ldr	r2, [pc, #48]	@ (801402c <ip_reass_dequeue_datagram+0x4c>)
 8013ffa:	6013      	str	r3, [r2, #0]
 8013ffc:	e00d      	b.n	801401a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d106      	bne.n	8014012 <ip_reass_dequeue_datagram+0x32>
 8014004:	4b0a      	ldr	r3, [pc, #40]	@ (8014030 <ip_reass_dequeue_datagram+0x50>)
 8014006:	f240 1245 	movw	r2, #325	@ 0x145
 801400a:	490a      	ldr	r1, [pc, #40]	@ (8014034 <ip_reass_dequeue_datagram+0x54>)
 801400c:	480a      	ldr	r0, [pc, #40]	@ (8014038 <ip_reass_dequeue_datagram+0x58>)
 801400e:	f000 fe8f 	bl	8014d30 <iprintf>
    prev->next = ipr->next;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	681a      	ldr	r2, [r3, #0]
 8014016:	683b      	ldr	r3, [r7, #0]
 8014018:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801401a:	6879      	ldr	r1, [r7, #4]
 801401c:	2004      	movs	r0, #4
 801401e:	f7f7 f9a3 	bl	800b368 <memp_free>
}
 8014022:	bf00      	nop
 8014024:	3708      	adds	r7, #8
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}
 801402a:	bf00      	nop
 801402c:	2000b3b8 	.word	0x2000b3b8
 8014030:	0801827c 	.word	0x0801827c
 8014034:	08018344 	.word	0x08018344
 8014038:	080182c4 	.word	0x080182c4

0801403c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b08c      	sub	sp, #48	@ 0x30
 8014040:	af00      	add	r7, sp, #0
 8014042:	60f8      	str	r0, [r7, #12]
 8014044:	60b9      	str	r1, [r7, #8]
 8014046:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014048:	2300      	movs	r3, #0
 801404a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801404c:	2301      	movs	r3, #1
 801404e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	685b      	ldr	r3, [r3, #4]
 8014054:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014056:	69fb      	ldr	r3, [r7, #28]
 8014058:	885b      	ldrh	r3, [r3, #2]
 801405a:	b29b      	uxth	r3, r3
 801405c:	4618      	mov	r0, r3
 801405e:	f7f6 fc9b 	bl	800a998 <lwip_htons>
 8014062:	4603      	mov	r3, r0
 8014064:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014066:	69fb      	ldr	r3, [r7, #28]
 8014068:	781b      	ldrb	r3, [r3, #0]
 801406a:	f003 030f 	and.w	r3, r3, #15
 801406e:	b2db      	uxtb	r3, r3
 8014070:	009b      	lsls	r3, r3, #2
 8014072:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014074:	7e7b      	ldrb	r3, [r7, #25]
 8014076:	b29b      	uxth	r3, r3
 8014078:	8b7a      	ldrh	r2, [r7, #26]
 801407a:	429a      	cmp	r2, r3
 801407c:	d202      	bcs.n	8014084 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801407e:	f04f 33ff 	mov.w	r3, #4294967295
 8014082:	e135      	b.n	80142f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014084:	7e7b      	ldrb	r3, [r7, #25]
 8014086:	b29b      	uxth	r3, r3
 8014088:	8b7a      	ldrh	r2, [r7, #26]
 801408a:	1ad3      	subs	r3, r2, r3
 801408c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801408e:	69fb      	ldr	r3, [r7, #28]
 8014090:	88db      	ldrh	r3, [r3, #6]
 8014092:	b29b      	uxth	r3, r3
 8014094:	4618      	mov	r0, r3
 8014096:	f7f6 fc7f 	bl	800a998 <lwip_htons>
 801409a:	4603      	mov	r3, r0
 801409c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	00db      	lsls	r3, r3, #3
 80140a4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	685b      	ldr	r3, [r3, #4]
 80140aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80140ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ae:	2200      	movs	r2, #0
 80140b0:	701a      	strb	r2, [r3, #0]
 80140b2:	2200      	movs	r2, #0
 80140b4:	705a      	strb	r2, [r3, #1]
 80140b6:	2200      	movs	r2, #0
 80140b8:	709a      	strb	r2, [r3, #2]
 80140ba:	2200      	movs	r2, #0
 80140bc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80140be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140c0:	8afa      	ldrh	r2, [r7, #22]
 80140c2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80140c4:	8afa      	ldrh	r2, [r7, #22]
 80140c6:	8b7b      	ldrh	r3, [r7, #26]
 80140c8:	4413      	add	r3, r2
 80140ca:	b29a      	uxth	r2, r3
 80140cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80140d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140d2:	88db      	ldrh	r3, [r3, #6]
 80140d4:	b29b      	uxth	r3, r3
 80140d6:	8afa      	ldrh	r2, [r7, #22]
 80140d8:	429a      	cmp	r2, r3
 80140da:	d902      	bls.n	80140e2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80140dc:	f04f 33ff 	mov.w	r3, #4294967295
 80140e0:	e106      	b.n	80142f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	685b      	ldr	r3, [r3, #4]
 80140e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80140e8:	e068      	b.n	80141bc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80140ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140ec:	685b      	ldr	r3, [r3, #4]
 80140ee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80140f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140f2:	889b      	ldrh	r3, [r3, #4]
 80140f4:	b29a      	uxth	r2, r3
 80140f6:	693b      	ldr	r3, [r7, #16]
 80140f8:	889b      	ldrh	r3, [r3, #4]
 80140fa:	b29b      	uxth	r3, r3
 80140fc:	429a      	cmp	r2, r3
 80140fe:	d235      	bcs.n	801416c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014104:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014108:	2b00      	cmp	r3, #0
 801410a:	d020      	beq.n	801414e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801410c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801410e:	889b      	ldrh	r3, [r3, #4]
 8014110:	b29a      	uxth	r2, r3
 8014112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014114:	88db      	ldrh	r3, [r3, #6]
 8014116:	b29b      	uxth	r3, r3
 8014118:	429a      	cmp	r2, r3
 801411a:	d307      	bcc.n	801412c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801411c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801411e:	88db      	ldrh	r3, [r3, #6]
 8014120:	b29a      	uxth	r2, r3
 8014122:	693b      	ldr	r3, [r7, #16]
 8014124:	889b      	ldrh	r3, [r3, #4]
 8014126:	b29b      	uxth	r3, r3
 8014128:	429a      	cmp	r2, r3
 801412a:	d902      	bls.n	8014132 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801412c:	f04f 33ff 	mov.w	r3, #4294967295
 8014130:	e0de      	b.n	80142f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014134:	68ba      	ldr	r2, [r7, #8]
 8014136:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801413a:	88db      	ldrh	r3, [r3, #6]
 801413c:	b29a      	uxth	r2, r3
 801413e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014140:	889b      	ldrh	r3, [r3, #4]
 8014142:	b29b      	uxth	r3, r3
 8014144:	429a      	cmp	r2, r3
 8014146:	d03d      	beq.n	80141c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014148:	2300      	movs	r3, #0
 801414a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801414c:	e03a      	b.n	80141c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801414e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014150:	88db      	ldrh	r3, [r3, #6]
 8014152:	b29a      	uxth	r2, r3
 8014154:	693b      	ldr	r3, [r7, #16]
 8014156:	889b      	ldrh	r3, [r3, #4]
 8014158:	b29b      	uxth	r3, r3
 801415a:	429a      	cmp	r2, r3
 801415c:	d902      	bls.n	8014164 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801415e:	f04f 33ff 	mov.w	r3, #4294967295
 8014162:	e0c5      	b.n	80142f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	68ba      	ldr	r2, [r7, #8]
 8014168:	605a      	str	r2, [r3, #4]
      break;
 801416a:	e02b      	b.n	80141c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801416c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801416e:	889b      	ldrh	r3, [r3, #4]
 8014170:	b29a      	uxth	r2, r3
 8014172:	693b      	ldr	r3, [r7, #16]
 8014174:	889b      	ldrh	r3, [r3, #4]
 8014176:	b29b      	uxth	r3, r3
 8014178:	429a      	cmp	r2, r3
 801417a:	d102      	bne.n	8014182 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801417c:	f04f 33ff 	mov.w	r3, #4294967295
 8014180:	e0b6      	b.n	80142f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014184:	889b      	ldrh	r3, [r3, #4]
 8014186:	b29a      	uxth	r2, r3
 8014188:	693b      	ldr	r3, [r7, #16]
 801418a:	88db      	ldrh	r3, [r3, #6]
 801418c:	b29b      	uxth	r3, r3
 801418e:	429a      	cmp	r2, r3
 8014190:	d202      	bcs.n	8014198 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014192:	f04f 33ff 	mov.w	r3, #4294967295
 8014196:	e0ab      	b.n	80142f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801419a:	2b00      	cmp	r3, #0
 801419c:	d009      	beq.n	80141b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801419e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141a0:	88db      	ldrh	r3, [r3, #6]
 80141a2:	b29a      	uxth	r2, r3
 80141a4:	693b      	ldr	r3, [r7, #16]
 80141a6:	889b      	ldrh	r3, [r3, #4]
 80141a8:	b29b      	uxth	r3, r3
 80141aa:	429a      	cmp	r2, r3
 80141ac:	d001      	beq.n	80141b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80141ae:	2300      	movs	r3, #0
 80141b0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80141b2:	693b      	ldr	r3, [r7, #16]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80141b8:	693b      	ldr	r3, [r7, #16]
 80141ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80141bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d193      	bne.n	80140ea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80141c2:	e000      	b.n	80141c6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80141c4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80141c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d12d      	bne.n	8014228 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80141cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d01c      	beq.n	801420c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80141d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141d4:	88db      	ldrh	r3, [r3, #6]
 80141d6:	b29a      	uxth	r2, r3
 80141d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141da:	889b      	ldrh	r3, [r3, #4]
 80141dc:	b29b      	uxth	r3, r3
 80141de:	429a      	cmp	r2, r3
 80141e0:	d906      	bls.n	80141f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80141e2:	4b45      	ldr	r3, [pc, #276]	@ (80142f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80141e4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80141e8:	4944      	ldr	r1, [pc, #272]	@ (80142fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80141ea:	4845      	ldr	r0, [pc, #276]	@ (8014300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80141ec:	f000 fda0 	bl	8014d30 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80141f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141f2:	68ba      	ldr	r2, [r7, #8]
 80141f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80141f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141f8:	88db      	ldrh	r3, [r3, #6]
 80141fa:	b29a      	uxth	r2, r3
 80141fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141fe:	889b      	ldrh	r3, [r3, #4]
 8014200:	b29b      	uxth	r3, r3
 8014202:	429a      	cmp	r2, r3
 8014204:	d010      	beq.n	8014228 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014206:	2300      	movs	r3, #0
 8014208:	623b      	str	r3, [r7, #32]
 801420a:	e00d      	b.n	8014228 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	685b      	ldr	r3, [r3, #4]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d006      	beq.n	8014222 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014214:	4b38      	ldr	r3, [pc, #224]	@ (80142f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014216:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801421a:	493a      	ldr	r1, [pc, #232]	@ (8014304 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801421c:	4838      	ldr	r0, [pc, #224]	@ (8014300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801421e:	f000 fd87 	bl	8014d30 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	68ba      	ldr	r2, [r7, #8]
 8014226:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d105      	bne.n	801423a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	7f9b      	ldrb	r3, [r3, #30]
 8014232:	f003 0301 	and.w	r3, r3, #1
 8014236:	2b00      	cmp	r3, #0
 8014238:	d059      	beq.n	80142ee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801423a:	6a3b      	ldr	r3, [r7, #32]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d04f      	beq.n	80142e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	685b      	ldr	r3, [r3, #4]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d006      	beq.n	8014256 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	685b      	ldr	r3, [r3, #4]
 801424c:	685b      	ldr	r3, [r3, #4]
 801424e:	889b      	ldrh	r3, [r3, #4]
 8014250:	b29b      	uxth	r3, r3
 8014252:	2b00      	cmp	r3, #0
 8014254:	d002      	beq.n	801425c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014256:	2300      	movs	r3, #0
 8014258:	623b      	str	r3, [r7, #32]
 801425a:	e041      	b.n	80142e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801425c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801425e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8014260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8014266:	e012      	b.n	801428e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801426a:	685b      	ldr	r3, [r3, #4]
 801426c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801426e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014270:	88db      	ldrh	r3, [r3, #6]
 8014272:	b29a      	uxth	r2, r3
 8014274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014276:	889b      	ldrh	r3, [r3, #4]
 8014278:	b29b      	uxth	r3, r3
 801427a:	429a      	cmp	r2, r3
 801427c:	d002      	beq.n	8014284 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801427e:	2300      	movs	r3, #0
 8014280:	623b      	str	r3, [r7, #32]
            break;
 8014282:	e007      	b.n	8014294 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014286:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8014288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014290:	2b00      	cmp	r3, #0
 8014292:	d1e9      	bne.n	8014268 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014294:	6a3b      	ldr	r3, [r7, #32]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d022      	beq.n	80142e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	685b      	ldr	r3, [r3, #4]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d106      	bne.n	80142b0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80142a2:	4b15      	ldr	r3, [pc, #84]	@ (80142f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80142a4:	f240 12df 	movw	r2, #479	@ 0x1df
 80142a8:	4917      	ldr	r1, [pc, #92]	@ (8014308 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80142aa:	4815      	ldr	r0, [pc, #84]	@ (8014300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80142ac:	f000 fd40 	bl	8014d30 <iprintf>
          LWIP_ASSERT("sanity check",
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	685b      	ldr	r3, [r3, #4]
 80142b4:	685b      	ldr	r3, [r3, #4]
 80142b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80142b8:	429a      	cmp	r2, r3
 80142ba:	d106      	bne.n	80142ca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80142bc:	4b0e      	ldr	r3, [pc, #56]	@ (80142f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80142be:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80142c2:	4911      	ldr	r1, [pc, #68]	@ (8014308 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80142c4:	480e      	ldr	r0, [pc, #56]	@ (8014300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80142c6:	f000 fd33 	bl	8014d30 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80142ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d006      	beq.n	80142e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80142d2:	4b09      	ldr	r3, [pc, #36]	@ (80142f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80142d4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80142d8:	490c      	ldr	r1, [pc, #48]	@ (801430c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80142da:	4809      	ldr	r0, [pc, #36]	@ (8014300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80142dc:	f000 fd28 	bl	8014d30 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80142e0:	6a3b      	ldr	r3, [r7, #32]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	bf14      	ite	ne
 80142e6:	2301      	movne	r3, #1
 80142e8:	2300      	moveq	r3, #0
 80142ea:	b2db      	uxtb	r3, r3
 80142ec:	e000      	b.n	80142f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80142ee:	2300      	movs	r3, #0
}
 80142f0:	4618      	mov	r0, r3
 80142f2:	3730      	adds	r7, #48	@ 0x30
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd80      	pop	{r7, pc}
 80142f8:	0801827c 	.word	0x0801827c
 80142fc:	08018360 	.word	0x08018360
 8014300:	080182c4 	.word	0x080182c4
 8014304:	08018380 	.word	0x08018380
 8014308:	080183b8 	.word	0x080183b8
 801430c:	080183c8 	.word	0x080183c8

08014310 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b08e      	sub	sp, #56	@ 0x38
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	685b      	ldr	r3, [r3, #4]
 801431c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801431e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014320:	781b      	ldrb	r3, [r3, #0]
 8014322:	f003 030f 	and.w	r3, r3, #15
 8014326:	b2db      	uxtb	r3, r3
 8014328:	009b      	lsls	r3, r3, #2
 801432a:	b2db      	uxtb	r3, r3
 801432c:	2b14      	cmp	r3, #20
 801432e:	f040 8171 	bne.w	8014614 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014334:	88db      	ldrh	r3, [r3, #6]
 8014336:	b29b      	uxth	r3, r3
 8014338:	4618      	mov	r0, r3
 801433a:	f7f6 fb2d 	bl	800a998 <lwip_htons>
 801433e:	4603      	mov	r3, r0
 8014340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014344:	b29b      	uxth	r3, r3
 8014346:	00db      	lsls	r3, r3, #3
 8014348:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801434a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801434c:	885b      	ldrh	r3, [r3, #2]
 801434e:	b29b      	uxth	r3, r3
 8014350:	4618      	mov	r0, r3
 8014352:	f7f6 fb21 	bl	800a998 <lwip_htons>
 8014356:	4603      	mov	r3, r0
 8014358:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801435a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801435c:	781b      	ldrb	r3, [r3, #0]
 801435e:	f003 030f 	and.w	r3, r3, #15
 8014362:	b2db      	uxtb	r3, r3
 8014364:	009b      	lsls	r3, r3, #2
 8014366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801436a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801436e:	b29b      	uxth	r3, r3
 8014370:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014372:	429a      	cmp	r2, r3
 8014374:	f0c0 8150 	bcc.w	8014618 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014378:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801437c:	b29b      	uxth	r3, r3
 801437e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014380:	1ad3      	subs	r3, r2, r3
 8014382:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f7f7 feed 	bl	800c164 <pbuf_clen>
 801438a:	4603      	mov	r3, r0
 801438c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801438e:	4b8c      	ldr	r3, [pc, #560]	@ (80145c0 <ip4_reass+0x2b0>)
 8014390:	881b      	ldrh	r3, [r3, #0]
 8014392:	461a      	mov	r2, r3
 8014394:	8c3b      	ldrh	r3, [r7, #32]
 8014396:	4413      	add	r3, r2
 8014398:	2b0a      	cmp	r3, #10
 801439a:	dd10      	ble.n	80143be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801439c:	8c3b      	ldrh	r3, [r7, #32]
 801439e:	4619      	mov	r1, r3
 80143a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80143a2:	f7ff fd81 	bl	8013ea8 <ip_reass_remove_oldest_datagram>
 80143a6:	4603      	mov	r3, r0
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	f000 8137 	beq.w	801461c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80143ae:	4b84      	ldr	r3, [pc, #528]	@ (80145c0 <ip4_reass+0x2b0>)
 80143b0:	881b      	ldrh	r3, [r3, #0]
 80143b2:	461a      	mov	r2, r3
 80143b4:	8c3b      	ldrh	r3, [r7, #32]
 80143b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80143b8:	2b0a      	cmp	r3, #10
 80143ba:	f300 812f 	bgt.w	801461c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80143be:	4b81      	ldr	r3, [pc, #516]	@ (80145c4 <ip4_reass+0x2b4>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80143c4:	e015      	b.n	80143f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80143c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143c8:	695a      	ldr	r2, [r3, #20]
 80143ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143cc:	68db      	ldr	r3, [r3, #12]
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d10c      	bne.n	80143ec <ip4_reass+0xdc>
 80143d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143d4:	699a      	ldr	r2, [r3, #24]
 80143d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143d8:	691b      	ldr	r3, [r3, #16]
 80143da:	429a      	cmp	r2, r3
 80143dc:	d106      	bne.n	80143ec <ip4_reass+0xdc>
 80143de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143e0:	899a      	ldrh	r2, [r3, #12]
 80143e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143e4:	889b      	ldrh	r3, [r3, #4]
 80143e6:	b29b      	uxth	r3, r3
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d006      	beq.n	80143fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80143ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80143f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d1e6      	bne.n	80143c6 <ip4_reass+0xb6>
 80143f8:	e000      	b.n	80143fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80143fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80143fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d109      	bne.n	8014416 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014402:	8c3b      	ldrh	r3, [r7, #32]
 8014404:	4619      	mov	r1, r3
 8014406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014408:	f7ff fdb0 	bl	8013f6c <ip_reass_enqueue_new_datagram>
 801440c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014410:	2b00      	cmp	r3, #0
 8014412:	d11c      	bne.n	801444e <ip4_reass+0x13e>
      goto nullreturn;
 8014414:	e105      	b.n	8014622 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014418:	88db      	ldrh	r3, [r3, #6]
 801441a:	b29b      	uxth	r3, r3
 801441c:	4618      	mov	r0, r3
 801441e:	f7f6 fabb 	bl	800a998 <lwip_htons>
 8014422:	4603      	mov	r3, r0
 8014424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014428:	2b00      	cmp	r3, #0
 801442a:	d110      	bne.n	801444e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801442c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801442e:	89db      	ldrh	r3, [r3, #14]
 8014430:	4618      	mov	r0, r3
 8014432:	f7f6 fab1 	bl	800a998 <lwip_htons>
 8014436:	4603      	mov	r3, r0
 8014438:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801443c:	2b00      	cmp	r3, #0
 801443e:	d006      	beq.n	801444e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014442:	3308      	adds	r3, #8
 8014444:	2214      	movs	r2, #20
 8014446:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014448:	4618      	mov	r0, r3
 801444a:	f000 fd4c 	bl	8014ee6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801444e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014450:	88db      	ldrh	r3, [r3, #6]
 8014452:	b29b      	uxth	r3, r3
 8014454:	f003 0320 	and.w	r3, r3, #32
 8014458:	2b00      	cmp	r3, #0
 801445a:	bf0c      	ite	eq
 801445c:	2301      	moveq	r3, #1
 801445e:	2300      	movne	r3, #0
 8014460:	b2db      	uxtb	r3, r3
 8014462:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014464:	69fb      	ldr	r3, [r7, #28]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d00e      	beq.n	8014488 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801446a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801446c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801446e:	4413      	add	r3, r2
 8014470:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014472:	8b7a      	ldrh	r2, [r7, #26]
 8014474:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014476:	429a      	cmp	r2, r3
 8014478:	f0c0 80a0 	bcc.w	80145bc <ip4_reass+0x2ac>
 801447c:	8b7b      	ldrh	r3, [r7, #26]
 801447e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8014482:	4293      	cmp	r3, r2
 8014484:	f200 809a 	bhi.w	80145bc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014488:	69fa      	ldr	r2, [r7, #28]
 801448a:	6879      	ldr	r1, [r7, #4]
 801448c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801448e:	f7ff fdd5 	bl	801403c <ip_reass_chain_frag_into_datagram_and_validate>
 8014492:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014494:	697b      	ldr	r3, [r7, #20]
 8014496:	f1b3 3fff 	cmp.w	r3, #4294967295
 801449a:	f000 809b 	beq.w	80145d4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801449e:	4b48      	ldr	r3, [pc, #288]	@ (80145c0 <ip4_reass+0x2b0>)
 80144a0:	881a      	ldrh	r2, [r3, #0]
 80144a2:	8c3b      	ldrh	r3, [r7, #32]
 80144a4:	4413      	add	r3, r2
 80144a6:	b29a      	uxth	r2, r3
 80144a8:	4b45      	ldr	r3, [pc, #276]	@ (80145c0 <ip4_reass+0x2b0>)
 80144aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80144ac:	69fb      	ldr	r3, [r7, #28]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d00d      	beq.n	80144ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80144b2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80144b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80144b6:	4413      	add	r3, r2
 80144b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80144ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144bc:	8a7a      	ldrh	r2, [r7, #18]
 80144be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80144c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144c2:	7f9b      	ldrb	r3, [r3, #30]
 80144c4:	f043 0301 	orr.w	r3, r3, #1
 80144c8:	b2da      	uxtb	r2, r3
 80144ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80144ce:	697b      	ldr	r3, [r7, #20]
 80144d0:	2b01      	cmp	r3, #1
 80144d2:	d171      	bne.n	80145b8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80144d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144d6:	8b9b      	ldrh	r3, [r3, #28]
 80144d8:	3314      	adds	r3, #20
 80144da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80144dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144de:	685b      	ldr	r3, [r3, #4]
 80144e0:	685b      	ldr	r3, [r3, #4]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80144e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144e8:	685b      	ldr	r3, [r3, #4]
 80144ea:	685b      	ldr	r3, [r3, #4]
 80144ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80144ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144f0:	3308      	adds	r3, #8
 80144f2:	2214      	movs	r2, #20
 80144f4:	4619      	mov	r1, r3
 80144f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80144f8:	f000 fcf5 	bl	8014ee6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80144fc:	8a3b      	ldrh	r3, [r7, #16]
 80144fe:	4618      	mov	r0, r3
 8014500:	f7f6 fa4a 	bl	800a998 <lwip_htons>
 8014504:	4603      	mov	r3, r0
 8014506:	461a      	mov	r2, r3
 8014508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801450a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801450c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801450e:	2200      	movs	r2, #0
 8014510:	719a      	strb	r2, [r3, #6]
 8014512:	2200      	movs	r2, #0
 8014514:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014518:	2200      	movs	r2, #0
 801451a:	729a      	strb	r2, [r3, #10]
 801451c:	2200      	movs	r2, #0
 801451e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014522:	685b      	ldr	r3, [r3, #4]
 8014524:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014526:	e00d      	b.n	8014544 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801452a:	685b      	ldr	r3, [r3, #4]
 801452c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801452e:	2114      	movs	r1, #20
 8014530:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8014532:	f7f7 fd09 	bl	800bf48 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014536:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014538:	6878      	ldr	r0, [r7, #4]
 801453a:	f7f7 fe4d 	bl	800c1d8 <pbuf_cat>
      r = iprh->next_pbuf;
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8014544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014546:	2b00      	cmp	r3, #0
 8014548:	d1ee      	bne.n	8014528 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801454a:	4b1e      	ldr	r3, [pc, #120]	@ (80145c4 <ip4_reass+0x2b4>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014550:	429a      	cmp	r2, r3
 8014552:	d102      	bne.n	801455a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014554:	2300      	movs	r3, #0
 8014556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014558:	e010      	b.n	801457c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801455a:	4b1a      	ldr	r3, [pc, #104]	@ (80145c4 <ip4_reass+0x2b4>)
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014560:	e007      	b.n	8014572 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014568:	429a      	cmp	r2, r3
 801456a:	d006      	beq.n	801457a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801456c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014574:	2b00      	cmp	r3, #0
 8014576:	d1f4      	bne.n	8014562 <ip4_reass+0x252>
 8014578:	e000      	b.n	801457c <ip4_reass+0x26c>
          break;
 801457a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801457c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801457e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014580:	f7ff fd2e 	bl	8013fe0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	f7f7 fded 	bl	800c164 <pbuf_clen>
 801458a:	4603      	mov	r3, r0
 801458c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801458e:	4b0c      	ldr	r3, [pc, #48]	@ (80145c0 <ip4_reass+0x2b0>)
 8014590:	881b      	ldrh	r3, [r3, #0]
 8014592:	8c3a      	ldrh	r2, [r7, #32]
 8014594:	429a      	cmp	r2, r3
 8014596:	d906      	bls.n	80145a6 <ip4_reass+0x296>
 8014598:	4b0b      	ldr	r3, [pc, #44]	@ (80145c8 <ip4_reass+0x2b8>)
 801459a:	f240 229b 	movw	r2, #667	@ 0x29b
 801459e:	490b      	ldr	r1, [pc, #44]	@ (80145cc <ip4_reass+0x2bc>)
 80145a0:	480b      	ldr	r0, [pc, #44]	@ (80145d0 <ip4_reass+0x2c0>)
 80145a2:	f000 fbc5 	bl	8014d30 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80145a6:	4b06      	ldr	r3, [pc, #24]	@ (80145c0 <ip4_reass+0x2b0>)
 80145a8:	881a      	ldrh	r2, [r3, #0]
 80145aa:	8c3b      	ldrh	r3, [r7, #32]
 80145ac:	1ad3      	subs	r3, r2, r3
 80145ae:	b29a      	uxth	r2, r3
 80145b0:	4b03      	ldr	r3, [pc, #12]	@ (80145c0 <ip4_reass+0x2b0>)
 80145b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	e038      	b.n	801462a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80145b8:	2300      	movs	r3, #0
 80145ba:	e036      	b.n	801462a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80145bc:	bf00      	nop
 80145be:	e00a      	b.n	80145d6 <ip4_reass+0x2c6>
 80145c0:	2000b3bc 	.word	0x2000b3bc
 80145c4:	2000b3b8 	.word	0x2000b3b8
 80145c8:	0801827c 	.word	0x0801827c
 80145cc:	080183ec 	.word	0x080183ec
 80145d0:	080182c4 	.word	0x080182c4
    goto nullreturn_ipr;
 80145d4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80145d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d106      	bne.n	80145ea <ip4_reass+0x2da>
 80145dc:	4b15      	ldr	r3, [pc, #84]	@ (8014634 <ip4_reass+0x324>)
 80145de:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80145e2:	4915      	ldr	r1, [pc, #84]	@ (8014638 <ip4_reass+0x328>)
 80145e4:	4815      	ldr	r0, [pc, #84]	@ (801463c <ip4_reass+0x32c>)
 80145e6:	f000 fba3 	bl	8014d30 <iprintf>
  if (ipr->p == NULL) {
 80145ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145ec:	685b      	ldr	r3, [r3, #4]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d116      	bne.n	8014620 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80145f2:	4b13      	ldr	r3, [pc, #76]	@ (8014640 <ip4_reass+0x330>)
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d006      	beq.n	801460a <ip4_reass+0x2fa>
 80145fc:	4b0d      	ldr	r3, [pc, #52]	@ (8014634 <ip4_reass+0x324>)
 80145fe:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014602:	4910      	ldr	r1, [pc, #64]	@ (8014644 <ip4_reass+0x334>)
 8014604:	480d      	ldr	r0, [pc, #52]	@ (801463c <ip4_reass+0x32c>)
 8014606:	f000 fb93 	bl	8014d30 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801460a:	2100      	movs	r1, #0
 801460c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801460e:	f7ff fce7 	bl	8013fe0 <ip_reass_dequeue_datagram>
 8014612:	e006      	b.n	8014622 <ip4_reass+0x312>
    goto nullreturn;
 8014614:	bf00      	nop
 8014616:	e004      	b.n	8014622 <ip4_reass+0x312>
    goto nullreturn;
 8014618:	bf00      	nop
 801461a:	e002      	b.n	8014622 <ip4_reass+0x312>
      goto nullreturn;
 801461c:	bf00      	nop
 801461e:	e000      	b.n	8014622 <ip4_reass+0x312>
  }

nullreturn:
 8014620:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014622:	6878      	ldr	r0, [r7, #4]
 8014624:	f7f7 fd16 	bl	800c054 <pbuf_free>
  return NULL;
 8014628:	2300      	movs	r3, #0
}
 801462a:	4618      	mov	r0, r3
 801462c:	3738      	adds	r7, #56	@ 0x38
 801462e:	46bd      	mov	sp, r7
 8014630:	bd80      	pop	{r7, pc}
 8014632:	bf00      	nop
 8014634:	0801827c 	.word	0x0801827c
 8014638:	08018408 	.word	0x08018408
 801463c:	080182c4 	.word	0x080182c4
 8014640:	2000b3b8 	.word	0x2000b3b8
 8014644:	08018414 	.word	0x08018414

08014648 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801464c:	2005      	movs	r0, #5
 801464e:	f7f6 fe1b 	bl	800b288 <memp_malloc>
 8014652:	4603      	mov	r3, r0
}
 8014654:	4618      	mov	r0, r3
 8014656:	bd80      	pop	{r7, pc}

08014658 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b082      	sub	sp, #8
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d106      	bne.n	8014674 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014666:	4b07      	ldr	r3, [pc, #28]	@ (8014684 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014668:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801466c:	4906      	ldr	r1, [pc, #24]	@ (8014688 <ip_frag_free_pbuf_custom_ref+0x30>)
 801466e:	4807      	ldr	r0, [pc, #28]	@ (801468c <ip_frag_free_pbuf_custom_ref+0x34>)
 8014670:	f000 fb5e 	bl	8014d30 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014674:	6879      	ldr	r1, [r7, #4]
 8014676:	2005      	movs	r0, #5
 8014678:	f7f6 fe76 	bl	800b368 <memp_free>
}
 801467c:	bf00      	nop
 801467e:	3708      	adds	r7, #8
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}
 8014684:	0801827c 	.word	0x0801827c
 8014688:	08018434 	.word	0x08018434
 801468c:	080182c4 	.word	0x080182c4

08014690 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b084      	sub	sp, #16
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d106      	bne.n	80146b0 <ipfrag_free_pbuf_custom+0x20>
 80146a2:	4b11      	ldr	r3, [pc, #68]	@ (80146e8 <ipfrag_free_pbuf_custom+0x58>)
 80146a4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80146a8:	4910      	ldr	r1, [pc, #64]	@ (80146ec <ipfrag_free_pbuf_custom+0x5c>)
 80146aa:	4811      	ldr	r0, [pc, #68]	@ (80146f0 <ipfrag_free_pbuf_custom+0x60>)
 80146ac:	f000 fb40 	bl	8014d30 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80146b0:	68fa      	ldr	r2, [r7, #12]
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d006      	beq.n	80146c6 <ipfrag_free_pbuf_custom+0x36>
 80146b8:	4b0b      	ldr	r3, [pc, #44]	@ (80146e8 <ipfrag_free_pbuf_custom+0x58>)
 80146ba:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80146be:	490d      	ldr	r1, [pc, #52]	@ (80146f4 <ipfrag_free_pbuf_custom+0x64>)
 80146c0:	480b      	ldr	r0, [pc, #44]	@ (80146f0 <ipfrag_free_pbuf_custom+0x60>)
 80146c2:	f000 fb35 	bl	8014d30 <iprintf>
  if (pcr->original != NULL) {
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	695b      	ldr	r3, [r3, #20]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d004      	beq.n	80146d8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	695b      	ldr	r3, [r3, #20]
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7f7 fcbe 	bl	800c054 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80146d8:	68f8      	ldr	r0, [r7, #12]
 80146da:	f7ff ffbd 	bl	8014658 <ip_frag_free_pbuf_custom_ref>
}
 80146de:	bf00      	nop
 80146e0:	3710      	adds	r7, #16
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}
 80146e6:	bf00      	nop
 80146e8:	0801827c 	.word	0x0801827c
 80146ec:	08018440 	.word	0x08018440
 80146f0:	080182c4 	.word	0x080182c4
 80146f4:	0801844c 	.word	0x0801844c

080146f8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b094      	sub	sp, #80	@ 0x50
 80146fc:	af02      	add	r7, sp, #8
 80146fe:	60f8      	str	r0, [r7, #12]
 8014700:	60b9      	str	r1, [r7, #8]
 8014702:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014704:	2300      	movs	r3, #0
 8014706:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801470a:	68bb      	ldr	r3, [r7, #8]
 801470c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801470e:	3b14      	subs	r3, #20
 8014710:	2b00      	cmp	r3, #0
 8014712:	da00      	bge.n	8014716 <ip4_frag+0x1e>
 8014714:	3307      	adds	r3, #7
 8014716:	10db      	asrs	r3, r3, #3
 8014718:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801471a:	2314      	movs	r3, #20
 801471c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	685b      	ldr	r3, [r3, #4]
 8014722:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8014724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014726:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801472a:	781b      	ldrb	r3, [r3, #0]
 801472c:	f003 030f 	and.w	r3, r3, #15
 8014730:	b2db      	uxtb	r3, r3
 8014732:	009b      	lsls	r3, r3, #2
 8014734:	b2db      	uxtb	r3, r3
 8014736:	2b14      	cmp	r3, #20
 8014738:	d002      	beq.n	8014740 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801473a:	f06f 0305 	mvn.w	r3, #5
 801473e:	e110      	b.n	8014962 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	895b      	ldrh	r3, [r3, #10]
 8014744:	2b13      	cmp	r3, #19
 8014746:	d809      	bhi.n	801475c <ip4_frag+0x64>
 8014748:	4b88      	ldr	r3, [pc, #544]	@ (801496c <ip4_frag+0x274>)
 801474a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801474e:	4988      	ldr	r1, [pc, #544]	@ (8014970 <ip4_frag+0x278>)
 8014750:	4888      	ldr	r0, [pc, #544]	@ (8014974 <ip4_frag+0x27c>)
 8014752:	f000 faed 	bl	8014d30 <iprintf>
 8014756:	f06f 0305 	mvn.w	r3, #5
 801475a:	e102      	b.n	8014962 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801475c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801475e:	88db      	ldrh	r3, [r3, #6]
 8014760:	b29b      	uxth	r3, r3
 8014762:	4618      	mov	r0, r3
 8014764:	f7f6 f918 	bl	800a998 <lwip_htons>
 8014768:	4603      	mov	r3, r0
 801476a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801476c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801476e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014772:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014776:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801477c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	891b      	ldrh	r3, [r3, #8]
 8014782:	3b14      	subs	r3, #20
 8014784:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8014788:	e0e1      	b.n	801494e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801478a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801478c:	00db      	lsls	r3, r3, #3
 801478e:	b29b      	uxth	r3, r3
 8014790:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014794:	4293      	cmp	r3, r2
 8014796:	bf28      	it	cs
 8014798:	4613      	movcs	r3, r2
 801479a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801479c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80147a0:	2114      	movs	r1, #20
 80147a2:	200e      	movs	r0, #14
 80147a4:	f7f7 f972 	bl	800ba8c <pbuf_alloc>
 80147a8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80147aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	f000 80d5 	beq.w	801495c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80147b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147b4:	895b      	ldrh	r3, [r3, #10]
 80147b6:	2b13      	cmp	r3, #19
 80147b8:	d806      	bhi.n	80147c8 <ip4_frag+0xd0>
 80147ba:	4b6c      	ldr	r3, [pc, #432]	@ (801496c <ip4_frag+0x274>)
 80147bc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80147c0:	496d      	ldr	r1, [pc, #436]	@ (8014978 <ip4_frag+0x280>)
 80147c2:	486c      	ldr	r0, [pc, #432]	@ (8014974 <ip4_frag+0x27c>)
 80147c4:	f000 fab4 	bl	8014d30 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80147c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147ca:	685b      	ldr	r3, [r3, #4]
 80147cc:	2214      	movs	r2, #20
 80147ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80147d0:	4618      	mov	r0, r3
 80147d2:	f000 fb88 	bl	8014ee6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80147d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147d8:	685b      	ldr	r3, [r3, #4]
 80147da:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80147dc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80147de:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80147e2:	e064      	b.n	80148ae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	895a      	ldrh	r2, [r3, #10]
 80147e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80147ea:	1ad3      	subs	r3, r2, r3
 80147ec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	895b      	ldrh	r3, [r3, #10]
 80147f2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d906      	bls.n	8014806 <ip4_frag+0x10e>
 80147f8:	4b5c      	ldr	r3, [pc, #368]	@ (801496c <ip4_frag+0x274>)
 80147fa:	f240 322d 	movw	r2, #813	@ 0x32d
 80147fe:	495f      	ldr	r1, [pc, #380]	@ (801497c <ip4_frag+0x284>)
 8014800:	485c      	ldr	r0, [pc, #368]	@ (8014974 <ip4_frag+0x27c>)
 8014802:	f000 fa95 	bl	8014d30 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014806:	8bfa      	ldrh	r2, [r7, #30]
 8014808:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801480c:	4293      	cmp	r3, r2
 801480e:	bf28      	it	cs
 8014810:	4613      	movcs	r3, r2
 8014812:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014816:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801481a:	2b00      	cmp	r3, #0
 801481c:	d105      	bne.n	801482a <ip4_frag+0x132>
        poff = 0;
 801481e:	2300      	movs	r3, #0
 8014820:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	60fb      	str	r3, [r7, #12]
        continue;
 8014828:	e041      	b.n	80148ae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801482a:	f7ff ff0d 	bl	8014648 <ip_frag_alloc_pbuf_custom_ref>
 801482e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014830:	69bb      	ldr	r3, [r7, #24]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d103      	bne.n	801483e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014836:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014838:	f7f7 fc0c 	bl	800c054 <pbuf_free>
        goto memerr;
 801483c:	e08f      	b.n	801495e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801483e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014844:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014846:	4413      	add	r3, r2
 8014848:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801484c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014850:	9201      	str	r2, [sp, #4]
 8014852:	9300      	str	r3, [sp, #0]
 8014854:	4603      	mov	r3, r0
 8014856:	2241      	movs	r2, #65	@ 0x41
 8014858:	2000      	movs	r0, #0
 801485a:	f7f7 fa41 	bl	800bce0 <pbuf_alloced_custom>
 801485e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014860:	697b      	ldr	r3, [r7, #20]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d106      	bne.n	8014874 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014866:	69b8      	ldr	r0, [r7, #24]
 8014868:	f7ff fef6 	bl	8014658 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801486c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801486e:	f7f7 fbf1 	bl	800c054 <pbuf_free>
        goto memerr;
 8014872:	e074      	b.n	801495e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014874:	68f8      	ldr	r0, [r7, #12]
 8014876:	f7f7 fc8d 	bl	800c194 <pbuf_ref>
      pcr->original = p;
 801487a:	69bb      	ldr	r3, [r7, #24]
 801487c:	68fa      	ldr	r2, [r7, #12]
 801487e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014880:	69bb      	ldr	r3, [r7, #24]
 8014882:	4a3f      	ldr	r2, [pc, #252]	@ (8014980 <ip4_frag+0x288>)
 8014884:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014886:	6979      	ldr	r1, [r7, #20]
 8014888:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801488a:	f7f7 fca5 	bl	800c1d8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801488e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8014892:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014896:	1ad3      	subs	r3, r2, r3
 8014898:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801489c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d004      	beq.n	80148ae <ip4_frag+0x1b6>
        poff = 0;
 80148a4:	2300      	movs	r3, #0
 80148a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80148ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d196      	bne.n	80147e4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80148b6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80148b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80148bc:	4413      	add	r3, r2
 80148be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80148c0:	68bb      	ldr	r3, [r7, #8]
 80148c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80148c4:	f1a3 0213 	sub.w	r2, r3, #19
 80148c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80148cc:	429a      	cmp	r2, r3
 80148ce:	bfcc      	ite	gt
 80148d0:	2301      	movgt	r3, #1
 80148d2:	2300      	movle	r3, #0
 80148d4:	b2db      	uxtb	r3, r3
 80148d6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80148d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80148dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80148e0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80148e2:	6a3b      	ldr	r3, [r7, #32]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d002      	beq.n	80148ee <ip4_frag+0x1f6>
 80148e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d003      	beq.n	80148f6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80148ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80148f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80148f4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80148f6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7f6 f84d 	bl	800a998 <lwip_htons>
 80148fe:	4603      	mov	r3, r0
 8014900:	461a      	mov	r2, r3
 8014902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014904:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014906:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014908:	3314      	adds	r3, #20
 801490a:	b29b      	uxth	r3, r3
 801490c:	4618      	mov	r0, r3
 801490e:	f7f6 f843 	bl	800a998 <lwip_htons>
 8014912:	4603      	mov	r3, r0
 8014914:	461a      	mov	r2, r3
 8014916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014918:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801491a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801491c:	2200      	movs	r2, #0
 801491e:	729a      	strb	r2, [r3, #10]
 8014920:	2200      	movs	r2, #0
 8014922:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	695b      	ldr	r3, [r3, #20]
 8014928:	687a      	ldr	r2, [r7, #4]
 801492a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801492c:	68b8      	ldr	r0, [r7, #8]
 801492e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014930:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014932:	f7f7 fb8f 	bl	800c054 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014936:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801493a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801493c:	1ad3      	subs	r3, r2, r3
 801493e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8014942:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8014946:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014948:	4413      	add	r3, r2
 801494a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801494e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014952:	2b00      	cmp	r3, #0
 8014954:	f47f af19 	bne.w	801478a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014958:	2300      	movs	r3, #0
 801495a:	e002      	b.n	8014962 <ip4_frag+0x26a>
      goto memerr;
 801495c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801495e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014962:	4618      	mov	r0, r3
 8014964:	3748      	adds	r7, #72	@ 0x48
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}
 801496a:	bf00      	nop
 801496c:	0801827c 	.word	0x0801827c
 8014970:	08018458 	.word	0x08018458
 8014974:	080182c4 	.word	0x080182c4
 8014978:	08018474 	.word	0x08018474
 801497c:	08018494 	.word	0x08018494
 8014980:	08014691 	.word	0x08014691

08014984 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b086      	sub	sp, #24
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
 801498c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801498e:	230e      	movs	r3, #14
 8014990:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	895b      	ldrh	r3, [r3, #10]
 8014996:	2b0e      	cmp	r3, #14
 8014998:	d96e      	bls.n	8014a78 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	7bdb      	ldrb	r3, [r3, #15]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d106      	bne.n	80149b0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80149a2:	683b      	ldr	r3, [r7, #0]
 80149a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80149a8:	3301      	adds	r3, #1
 80149aa:	b2da      	uxtb	r2, r3
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	685b      	ldr	r3, [r3, #4]
 80149b4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80149b6:	693b      	ldr	r3, [r7, #16]
 80149b8:	7b1a      	ldrb	r2, [r3, #12]
 80149ba:	7b5b      	ldrb	r3, [r3, #13]
 80149bc:	021b      	lsls	r3, r3, #8
 80149be:	4313      	orrs	r3, r2
 80149c0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80149c2:	693b      	ldr	r3, [r7, #16]
 80149c4:	781b      	ldrb	r3, [r3, #0]
 80149c6:	f003 0301 	and.w	r3, r3, #1
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d023      	beq.n	8014a16 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80149ce:	693b      	ldr	r3, [r7, #16]
 80149d0:	781b      	ldrb	r3, [r3, #0]
 80149d2:	2b01      	cmp	r3, #1
 80149d4:	d10f      	bne.n	80149f6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80149d6:	693b      	ldr	r3, [r7, #16]
 80149d8:	785b      	ldrb	r3, [r3, #1]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d11b      	bne.n	8014a16 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80149e2:	2b5e      	cmp	r3, #94	@ 0x5e
 80149e4:	d117      	bne.n	8014a16 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	7b5b      	ldrb	r3, [r3, #13]
 80149ea:	f043 0310 	orr.w	r3, r3, #16
 80149ee:	b2da      	uxtb	r2, r3
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	735a      	strb	r2, [r3, #13]
 80149f4:	e00f      	b.n	8014a16 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80149f6:	693b      	ldr	r3, [r7, #16]
 80149f8:	2206      	movs	r2, #6
 80149fa:	4928      	ldr	r1, [pc, #160]	@ (8014a9c <ethernet_input+0x118>)
 80149fc:	4618      	mov	r0, r3
 80149fe:	f000 f9ec 	bl	8014dda <memcmp>
 8014a02:	4603      	mov	r3, r0
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d106      	bne.n	8014a16 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	7b5b      	ldrb	r3, [r3, #13]
 8014a0c:	f043 0308 	orr.w	r3, r3, #8
 8014a10:	b2da      	uxtb	r2, r3
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014a16:	89fb      	ldrh	r3, [r7, #14]
 8014a18:	2b08      	cmp	r3, #8
 8014a1a:	d003      	beq.n	8014a24 <ethernet_input+0xa0>
 8014a1c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014a20:	d014      	beq.n	8014a4c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014a22:	e032      	b.n	8014a8a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014a2a:	f003 0308 	and.w	r3, r3, #8
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d024      	beq.n	8014a7c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014a32:	8afb      	ldrh	r3, [r7, #22]
 8014a34:	4619      	mov	r1, r3
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f7f7 fa86 	bl	800bf48 <pbuf_remove_header>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d11e      	bne.n	8014a80 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014a42:	6839      	ldr	r1, [r7, #0]
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f7fe ff21 	bl	801388c <ip4_input>
      break;
 8014a4a:	e013      	b.n	8014a74 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014a4c:	683b      	ldr	r3, [r7, #0]
 8014a4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014a52:	f003 0308 	and.w	r3, r3, #8
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d014      	beq.n	8014a84 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014a5a:	8afb      	ldrh	r3, [r7, #22]
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f7f7 fa72 	bl	800bf48 <pbuf_remove_header>
 8014a64:	4603      	mov	r3, r0
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d10e      	bne.n	8014a88 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014a6a:	6839      	ldr	r1, [r7, #0]
 8014a6c:	6878      	ldr	r0, [r7, #4]
 8014a6e:	f7fe f8c1 	bl	8012bf4 <etharp_input>
      break;
 8014a72:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014a74:	2300      	movs	r3, #0
 8014a76:	e00c      	b.n	8014a92 <ethernet_input+0x10e>
    goto free_and_return;
 8014a78:	bf00      	nop
 8014a7a:	e006      	b.n	8014a8a <ethernet_input+0x106>
        goto free_and_return;
 8014a7c:	bf00      	nop
 8014a7e:	e004      	b.n	8014a8a <ethernet_input+0x106>
        goto free_and_return;
 8014a80:	bf00      	nop
 8014a82:	e002      	b.n	8014a8a <ethernet_input+0x106>
        goto free_and_return;
 8014a84:	bf00      	nop
 8014a86:	e000      	b.n	8014a8a <ethernet_input+0x106>
        goto free_and_return;
 8014a88:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014a8a:	6878      	ldr	r0, [r7, #4]
 8014a8c:	f7f7 fae2 	bl	800c054 <pbuf_free>
  return ERR_OK;
 8014a90:	2300      	movs	r3, #0
}
 8014a92:	4618      	mov	r0, r3
 8014a94:	3718      	adds	r7, #24
 8014a96:	46bd      	mov	sp, r7
 8014a98:	bd80      	pop	{r7, pc}
 8014a9a:	bf00      	nop
 8014a9c:	08018638 	.word	0x08018638

08014aa0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b086      	sub	sp, #24
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	60f8      	str	r0, [r7, #12]
 8014aa8:	60b9      	str	r1, [r7, #8]
 8014aaa:	607a      	str	r2, [r7, #4]
 8014aac:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014aae:	8c3b      	ldrh	r3, [r7, #32]
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7f5 ff71 	bl	800a998 <lwip_htons>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014aba:	210e      	movs	r1, #14
 8014abc:	68b8      	ldr	r0, [r7, #8]
 8014abe:	f7f7 fa33 	bl	800bf28 <pbuf_add_header>
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d125      	bne.n	8014b14 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	685b      	ldr	r3, [r3, #4]
 8014acc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014ace:	693b      	ldr	r3, [r7, #16]
 8014ad0:	8afa      	ldrh	r2, [r7, #22]
 8014ad2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014ad4:	693b      	ldr	r3, [r7, #16]
 8014ad6:	2206      	movs	r2, #6
 8014ad8:	6839      	ldr	r1, [r7, #0]
 8014ada:	4618      	mov	r0, r3
 8014adc:	f000 fa03 	bl	8014ee6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014ae0:	693b      	ldr	r3, [r7, #16]
 8014ae2:	3306      	adds	r3, #6
 8014ae4:	2206      	movs	r2, #6
 8014ae6:	6879      	ldr	r1, [r7, #4]
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f000 f9fc 	bl	8014ee6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014af4:	2b06      	cmp	r3, #6
 8014af6:	d006      	beq.n	8014b06 <ethernet_output+0x66>
 8014af8:	4b0a      	ldr	r3, [pc, #40]	@ (8014b24 <ethernet_output+0x84>)
 8014afa:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014afe:	490a      	ldr	r1, [pc, #40]	@ (8014b28 <ethernet_output+0x88>)
 8014b00:	480a      	ldr	r0, [pc, #40]	@ (8014b2c <ethernet_output+0x8c>)
 8014b02:	f000 f915 	bl	8014d30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	699b      	ldr	r3, [r3, #24]
 8014b0a:	68b9      	ldr	r1, [r7, #8]
 8014b0c:	68f8      	ldr	r0, [r7, #12]
 8014b0e:	4798      	blx	r3
 8014b10:	4603      	mov	r3, r0
 8014b12:	e002      	b.n	8014b1a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014b14:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014b16:	f06f 0301 	mvn.w	r3, #1
}
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	3718      	adds	r7, #24
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}
 8014b22:	bf00      	nop
 8014b24:	080184a4 	.word	0x080184a4
 8014b28:	080184dc 	.word	0x080184dc
 8014b2c:	08018510 	.word	0x08018510

08014b30 <rand>:
 8014b30:	4b16      	ldr	r3, [pc, #88]	@ (8014b8c <rand+0x5c>)
 8014b32:	b510      	push	{r4, lr}
 8014b34:	681c      	ldr	r4, [r3, #0]
 8014b36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b38:	b9b3      	cbnz	r3, 8014b68 <rand+0x38>
 8014b3a:	2018      	movs	r0, #24
 8014b3c:	f000 fa4a 	bl	8014fd4 <malloc>
 8014b40:	4602      	mov	r2, r0
 8014b42:	6320      	str	r0, [r4, #48]	@ 0x30
 8014b44:	b920      	cbnz	r0, 8014b50 <rand+0x20>
 8014b46:	4b12      	ldr	r3, [pc, #72]	@ (8014b90 <rand+0x60>)
 8014b48:	4812      	ldr	r0, [pc, #72]	@ (8014b94 <rand+0x64>)
 8014b4a:	2152      	movs	r1, #82	@ 0x52
 8014b4c:	f000 f9da 	bl	8014f04 <__assert_func>
 8014b50:	4911      	ldr	r1, [pc, #68]	@ (8014b98 <rand+0x68>)
 8014b52:	4b12      	ldr	r3, [pc, #72]	@ (8014b9c <rand+0x6c>)
 8014b54:	e9c0 1300 	strd	r1, r3, [r0]
 8014b58:	4b11      	ldr	r3, [pc, #68]	@ (8014ba0 <rand+0x70>)
 8014b5a:	6083      	str	r3, [r0, #8]
 8014b5c:	230b      	movs	r3, #11
 8014b5e:	8183      	strh	r3, [r0, #12]
 8014b60:	2100      	movs	r1, #0
 8014b62:	2001      	movs	r0, #1
 8014b64:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014b68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014b6a:	480e      	ldr	r0, [pc, #56]	@ (8014ba4 <rand+0x74>)
 8014b6c:	690b      	ldr	r3, [r1, #16]
 8014b6e:	694c      	ldr	r4, [r1, #20]
 8014b70:	4a0d      	ldr	r2, [pc, #52]	@ (8014ba8 <rand+0x78>)
 8014b72:	4358      	muls	r0, r3
 8014b74:	fb02 0004 	mla	r0, r2, r4, r0
 8014b78:	fba3 3202 	umull	r3, r2, r3, r2
 8014b7c:	3301      	adds	r3, #1
 8014b7e:	eb40 0002 	adc.w	r0, r0, r2
 8014b82:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014b86:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8014b8a:	bd10      	pop	{r4, pc}
 8014b8c:	200000d8 	.word	0x200000d8
 8014b90:	08018646 	.word	0x08018646
 8014b94:	0801865d 	.word	0x0801865d
 8014b98:	abcd330e 	.word	0xabcd330e
 8014b9c:	e66d1234 	.word	0xe66d1234
 8014ba0:	0005deec 	.word	0x0005deec
 8014ba4:	5851f42d 	.word	0x5851f42d
 8014ba8:	4c957f2d 	.word	0x4c957f2d

08014bac <std>:
 8014bac:	2300      	movs	r3, #0
 8014bae:	b510      	push	{r4, lr}
 8014bb0:	4604      	mov	r4, r0
 8014bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8014bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014bba:	6083      	str	r3, [r0, #8]
 8014bbc:	8181      	strh	r1, [r0, #12]
 8014bbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8014bc0:	81c2      	strh	r2, [r0, #14]
 8014bc2:	6183      	str	r3, [r0, #24]
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	2208      	movs	r2, #8
 8014bc8:	305c      	adds	r0, #92	@ 0x5c
 8014bca:	f000 f916 	bl	8014dfa <memset>
 8014bce:	4b0d      	ldr	r3, [pc, #52]	@ (8014c04 <std+0x58>)
 8014bd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8014bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8014c08 <std+0x5c>)
 8014bd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8014c0c <std+0x60>)
 8014bd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014bda:	4b0d      	ldr	r3, [pc, #52]	@ (8014c10 <std+0x64>)
 8014bdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8014bde:	4b0d      	ldr	r3, [pc, #52]	@ (8014c14 <std+0x68>)
 8014be0:	6224      	str	r4, [r4, #32]
 8014be2:	429c      	cmp	r4, r3
 8014be4:	d006      	beq.n	8014bf4 <std+0x48>
 8014be6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014bea:	4294      	cmp	r4, r2
 8014bec:	d002      	beq.n	8014bf4 <std+0x48>
 8014bee:	33d0      	adds	r3, #208	@ 0xd0
 8014bf0:	429c      	cmp	r4, r3
 8014bf2:	d105      	bne.n	8014c00 <std+0x54>
 8014bf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bfc:	f000 b970 	b.w	8014ee0 <__retarget_lock_init_recursive>
 8014c00:	bd10      	pop	{r4, pc}
 8014c02:	bf00      	nop
 8014c04:	08014d55 	.word	0x08014d55
 8014c08:	08014d77 	.word	0x08014d77
 8014c0c:	08014daf 	.word	0x08014daf
 8014c10:	08014dd3 	.word	0x08014dd3
 8014c14:	2000b3c0 	.word	0x2000b3c0

08014c18 <stdio_exit_handler>:
 8014c18:	4a02      	ldr	r2, [pc, #8]	@ (8014c24 <stdio_exit_handler+0xc>)
 8014c1a:	4903      	ldr	r1, [pc, #12]	@ (8014c28 <stdio_exit_handler+0x10>)
 8014c1c:	4803      	ldr	r0, [pc, #12]	@ (8014c2c <stdio_exit_handler+0x14>)
 8014c1e:	f000 b869 	b.w	8014cf4 <_fwalk_sglue>
 8014c22:	bf00      	nop
 8014c24:	200000cc 	.word	0x200000cc
 8014c28:	080157e5 	.word	0x080157e5
 8014c2c:	200000dc 	.word	0x200000dc

08014c30 <cleanup_stdio>:
 8014c30:	6841      	ldr	r1, [r0, #4]
 8014c32:	4b0c      	ldr	r3, [pc, #48]	@ (8014c64 <cleanup_stdio+0x34>)
 8014c34:	4299      	cmp	r1, r3
 8014c36:	b510      	push	{r4, lr}
 8014c38:	4604      	mov	r4, r0
 8014c3a:	d001      	beq.n	8014c40 <cleanup_stdio+0x10>
 8014c3c:	f000 fdd2 	bl	80157e4 <_fflush_r>
 8014c40:	68a1      	ldr	r1, [r4, #8]
 8014c42:	4b09      	ldr	r3, [pc, #36]	@ (8014c68 <cleanup_stdio+0x38>)
 8014c44:	4299      	cmp	r1, r3
 8014c46:	d002      	beq.n	8014c4e <cleanup_stdio+0x1e>
 8014c48:	4620      	mov	r0, r4
 8014c4a:	f000 fdcb 	bl	80157e4 <_fflush_r>
 8014c4e:	68e1      	ldr	r1, [r4, #12]
 8014c50:	4b06      	ldr	r3, [pc, #24]	@ (8014c6c <cleanup_stdio+0x3c>)
 8014c52:	4299      	cmp	r1, r3
 8014c54:	d004      	beq.n	8014c60 <cleanup_stdio+0x30>
 8014c56:	4620      	mov	r0, r4
 8014c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c5c:	f000 bdc2 	b.w	80157e4 <_fflush_r>
 8014c60:	bd10      	pop	{r4, pc}
 8014c62:	bf00      	nop
 8014c64:	2000b3c0 	.word	0x2000b3c0
 8014c68:	2000b428 	.word	0x2000b428
 8014c6c:	2000b490 	.word	0x2000b490

08014c70 <global_stdio_init.part.0>:
 8014c70:	b510      	push	{r4, lr}
 8014c72:	4b0b      	ldr	r3, [pc, #44]	@ (8014ca0 <global_stdio_init.part.0+0x30>)
 8014c74:	4c0b      	ldr	r4, [pc, #44]	@ (8014ca4 <global_stdio_init.part.0+0x34>)
 8014c76:	4a0c      	ldr	r2, [pc, #48]	@ (8014ca8 <global_stdio_init.part.0+0x38>)
 8014c78:	601a      	str	r2, [r3, #0]
 8014c7a:	4620      	mov	r0, r4
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	2104      	movs	r1, #4
 8014c80:	f7ff ff94 	bl	8014bac <std>
 8014c84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014c88:	2201      	movs	r2, #1
 8014c8a:	2109      	movs	r1, #9
 8014c8c:	f7ff ff8e 	bl	8014bac <std>
 8014c90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014c94:	2202      	movs	r2, #2
 8014c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c9a:	2112      	movs	r1, #18
 8014c9c:	f7ff bf86 	b.w	8014bac <std>
 8014ca0:	2000b4f8 	.word	0x2000b4f8
 8014ca4:	2000b3c0 	.word	0x2000b3c0
 8014ca8:	08014c19 	.word	0x08014c19

08014cac <__sfp_lock_acquire>:
 8014cac:	4801      	ldr	r0, [pc, #4]	@ (8014cb4 <__sfp_lock_acquire+0x8>)
 8014cae:	f000 b918 	b.w	8014ee2 <__retarget_lock_acquire_recursive>
 8014cb2:	bf00      	nop
 8014cb4:	2000b501 	.word	0x2000b501

08014cb8 <__sfp_lock_release>:
 8014cb8:	4801      	ldr	r0, [pc, #4]	@ (8014cc0 <__sfp_lock_release+0x8>)
 8014cba:	f000 b913 	b.w	8014ee4 <__retarget_lock_release_recursive>
 8014cbe:	bf00      	nop
 8014cc0:	2000b501 	.word	0x2000b501

08014cc4 <__sinit>:
 8014cc4:	b510      	push	{r4, lr}
 8014cc6:	4604      	mov	r4, r0
 8014cc8:	f7ff fff0 	bl	8014cac <__sfp_lock_acquire>
 8014ccc:	6a23      	ldr	r3, [r4, #32]
 8014cce:	b11b      	cbz	r3, 8014cd8 <__sinit+0x14>
 8014cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cd4:	f7ff bff0 	b.w	8014cb8 <__sfp_lock_release>
 8014cd8:	4b04      	ldr	r3, [pc, #16]	@ (8014cec <__sinit+0x28>)
 8014cda:	6223      	str	r3, [r4, #32]
 8014cdc:	4b04      	ldr	r3, [pc, #16]	@ (8014cf0 <__sinit+0x2c>)
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d1f5      	bne.n	8014cd0 <__sinit+0xc>
 8014ce4:	f7ff ffc4 	bl	8014c70 <global_stdio_init.part.0>
 8014ce8:	e7f2      	b.n	8014cd0 <__sinit+0xc>
 8014cea:	bf00      	nop
 8014cec:	08014c31 	.word	0x08014c31
 8014cf0:	2000b4f8 	.word	0x2000b4f8

08014cf4 <_fwalk_sglue>:
 8014cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cf8:	4607      	mov	r7, r0
 8014cfa:	4688      	mov	r8, r1
 8014cfc:	4614      	mov	r4, r2
 8014cfe:	2600      	movs	r6, #0
 8014d00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014d04:	f1b9 0901 	subs.w	r9, r9, #1
 8014d08:	d505      	bpl.n	8014d16 <_fwalk_sglue+0x22>
 8014d0a:	6824      	ldr	r4, [r4, #0]
 8014d0c:	2c00      	cmp	r4, #0
 8014d0e:	d1f7      	bne.n	8014d00 <_fwalk_sglue+0xc>
 8014d10:	4630      	mov	r0, r6
 8014d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d16:	89ab      	ldrh	r3, [r5, #12]
 8014d18:	2b01      	cmp	r3, #1
 8014d1a:	d907      	bls.n	8014d2c <_fwalk_sglue+0x38>
 8014d1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014d20:	3301      	adds	r3, #1
 8014d22:	d003      	beq.n	8014d2c <_fwalk_sglue+0x38>
 8014d24:	4629      	mov	r1, r5
 8014d26:	4638      	mov	r0, r7
 8014d28:	47c0      	blx	r8
 8014d2a:	4306      	orrs	r6, r0
 8014d2c:	3568      	adds	r5, #104	@ 0x68
 8014d2e:	e7e9      	b.n	8014d04 <_fwalk_sglue+0x10>

08014d30 <iprintf>:
 8014d30:	b40f      	push	{r0, r1, r2, r3}
 8014d32:	b507      	push	{r0, r1, r2, lr}
 8014d34:	4906      	ldr	r1, [pc, #24]	@ (8014d50 <iprintf+0x20>)
 8014d36:	ab04      	add	r3, sp, #16
 8014d38:	6808      	ldr	r0, [r1, #0]
 8014d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d3e:	6881      	ldr	r1, [r0, #8]
 8014d40:	9301      	str	r3, [sp, #4]
 8014d42:	f000 fa27 	bl	8015194 <_vfiprintf_r>
 8014d46:	b003      	add	sp, #12
 8014d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d4c:	b004      	add	sp, #16
 8014d4e:	4770      	bx	lr
 8014d50:	200000d8 	.word	0x200000d8

08014d54 <__sread>:
 8014d54:	b510      	push	{r4, lr}
 8014d56:	460c      	mov	r4, r1
 8014d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d5c:	f000 f878 	bl	8014e50 <_read_r>
 8014d60:	2800      	cmp	r0, #0
 8014d62:	bfab      	itete	ge
 8014d64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014d66:	89a3      	ldrhlt	r3, [r4, #12]
 8014d68:	181b      	addge	r3, r3, r0
 8014d6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014d6e:	bfac      	ite	ge
 8014d70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014d72:	81a3      	strhlt	r3, [r4, #12]
 8014d74:	bd10      	pop	{r4, pc}

08014d76 <__swrite>:
 8014d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d7a:	461f      	mov	r7, r3
 8014d7c:	898b      	ldrh	r3, [r1, #12]
 8014d7e:	05db      	lsls	r3, r3, #23
 8014d80:	4605      	mov	r5, r0
 8014d82:	460c      	mov	r4, r1
 8014d84:	4616      	mov	r6, r2
 8014d86:	d505      	bpl.n	8014d94 <__swrite+0x1e>
 8014d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d8c:	2302      	movs	r3, #2
 8014d8e:	2200      	movs	r2, #0
 8014d90:	f000 f84c 	bl	8014e2c <_lseek_r>
 8014d94:	89a3      	ldrh	r3, [r4, #12]
 8014d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014d9e:	81a3      	strh	r3, [r4, #12]
 8014da0:	4632      	mov	r2, r6
 8014da2:	463b      	mov	r3, r7
 8014da4:	4628      	mov	r0, r5
 8014da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014daa:	f000 b863 	b.w	8014e74 <_write_r>

08014dae <__sseek>:
 8014dae:	b510      	push	{r4, lr}
 8014db0:	460c      	mov	r4, r1
 8014db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014db6:	f000 f839 	bl	8014e2c <_lseek_r>
 8014dba:	1c43      	adds	r3, r0, #1
 8014dbc:	89a3      	ldrh	r3, [r4, #12]
 8014dbe:	bf15      	itete	ne
 8014dc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014dc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014dc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014dca:	81a3      	strheq	r3, [r4, #12]
 8014dcc:	bf18      	it	ne
 8014dce:	81a3      	strhne	r3, [r4, #12]
 8014dd0:	bd10      	pop	{r4, pc}

08014dd2 <__sclose>:
 8014dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dd6:	f000 b819 	b.w	8014e0c <_close_r>

08014dda <memcmp>:
 8014dda:	b510      	push	{r4, lr}
 8014ddc:	3901      	subs	r1, #1
 8014dde:	4402      	add	r2, r0
 8014de0:	4290      	cmp	r0, r2
 8014de2:	d101      	bne.n	8014de8 <memcmp+0xe>
 8014de4:	2000      	movs	r0, #0
 8014de6:	e005      	b.n	8014df4 <memcmp+0x1a>
 8014de8:	7803      	ldrb	r3, [r0, #0]
 8014dea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014dee:	42a3      	cmp	r3, r4
 8014df0:	d001      	beq.n	8014df6 <memcmp+0x1c>
 8014df2:	1b18      	subs	r0, r3, r4
 8014df4:	bd10      	pop	{r4, pc}
 8014df6:	3001      	adds	r0, #1
 8014df8:	e7f2      	b.n	8014de0 <memcmp+0x6>

08014dfa <memset>:
 8014dfa:	4402      	add	r2, r0
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	4293      	cmp	r3, r2
 8014e00:	d100      	bne.n	8014e04 <memset+0xa>
 8014e02:	4770      	bx	lr
 8014e04:	f803 1b01 	strb.w	r1, [r3], #1
 8014e08:	e7f9      	b.n	8014dfe <memset+0x4>
	...

08014e0c <_close_r>:
 8014e0c:	b538      	push	{r3, r4, r5, lr}
 8014e0e:	4d06      	ldr	r5, [pc, #24]	@ (8014e28 <_close_r+0x1c>)
 8014e10:	2300      	movs	r3, #0
 8014e12:	4604      	mov	r4, r0
 8014e14:	4608      	mov	r0, r1
 8014e16:	602b      	str	r3, [r5, #0]
 8014e18:	f7ed fd0a 	bl	8002830 <_close>
 8014e1c:	1c43      	adds	r3, r0, #1
 8014e1e:	d102      	bne.n	8014e26 <_close_r+0x1a>
 8014e20:	682b      	ldr	r3, [r5, #0]
 8014e22:	b103      	cbz	r3, 8014e26 <_close_r+0x1a>
 8014e24:	6023      	str	r3, [r4, #0]
 8014e26:	bd38      	pop	{r3, r4, r5, pc}
 8014e28:	2000b4fc 	.word	0x2000b4fc

08014e2c <_lseek_r>:
 8014e2c:	b538      	push	{r3, r4, r5, lr}
 8014e2e:	4d07      	ldr	r5, [pc, #28]	@ (8014e4c <_lseek_r+0x20>)
 8014e30:	4604      	mov	r4, r0
 8014e32:	4608      	mov	r0, r1
 8014e34:	4611      	mov	r1, r2
 8014e36:	2200      	movs	r2, #0
 8014e38:	602a      	str	r2, [r5, #0]
 8014e3a:	461a      	mov	r2, r3
 8014e3c:	f7ed fd1f 	bl	800287e <_lseek>
 8014e40:	1c43      	adds	r3, r0, #1
 8014e42:	d102      	bne.n	8014e4a <_lseek_r+0x1e>
 8014e44:	682b      	ldr	r3, [r5, #0]
 8014e46:	b103      	cbz	r3, 8014e4a <_lseek_r+0x1e>
 8014e48:	6023      	str	r3, [r4, #0]
 8014e4a:	bd38      	pop	{r3, r4, r5, pc}
 8014e4c:	2000b4fc 	.word	0x2000b4fc

08014e50 <_read_r>:
 8014e50:	b538      	push	{r3, r4, r5, lr}
 8014e52:	4d07      	ldr	r5, [pc, #28]	@ (8014e70 <_read_r+0x20>)
 8014e54:	4604      	mov	r4, r0
 8014e56:	4608      	mov	r0, r1
 8014e58:	4611      	mov	r1, r2
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	602a      	str	r2, [r5, #0]
 8014e5e:	461a      	mov	r2, r3
 8014e60:	f7ed fcad 	bl	80027be <_read>
 8014e64:	1c43      	adds	r3, r0, #1
 8014e66:	d102      	bne.n	8014e6e <_read_r+0x1e>
 8014e68:	682b      	ldr	r3, [r5, #0]
 8014e6a:	b103      	cbz	r3, 8014e6e <_read_r+0x1e>
 8014e6c:	6023      	str	r3, [r4, #0]
 8014e6e:	bd38      	pop	{r3, r4, r5, pc}
 8014e70:	2000b4fc 	.word	0x2000b4fc

08014e74 <_write_r>:
 8014e74:	b538      	push	{r3, r4, r5, lr}
 8014e76:	4d07      	ldr	r5, [pc, #28]	@ (8014e94 <_write_r+0x20>)
 8014e78:	4604      	mov	r4, r0
 8014e7a:	4608      	mov	r0, r1
 8014e7c:	4611      	mov	r1, r2
 8014e7e:	2200      	movs	r2, #0
 8014e80:	602a      	str	r2, [r5, #0]
 8014e82:	461a      	mov	r2, r3
 8014e84:	f7ed fcb8 	bl	80027f8 <_write>
 8014e88:	1c43      	adds	r3, r0, #1
 8014e8a:	d102      	bne.n	8014e92 <_write_r+0x1e>
 8014e8c:	682b      	ldr	r3, [r5, #0]
 8014e8e:	b103      	cbz	r3, 8014e92 <_write_r+0x1e>
 8014e90:	6023      	str	r3, [r4, #0]
 8014e92:	bd38      	pop	{r3, r4, r5, pc}
 8014e94:	2000b4fc 	.word	0x2000b4fc

08014e98 <__libc_init_array>:
 8014e98:	b570      	push	{r4, r5, r6, lr}
 8014e9a:	4d0d      	ldr	r5, [pc, #52]	@ (8014ed0 <__libc_init_array+0x38>)
 8014e9c:	4c0d      	ldr	r4, [pc, #52]	@ (8014ed4 <__libc_init_array+0x3c>)
 8014e9e:	1b64      	subs	r4, r4, r5
 8014ea0:	10a4      	asrs	r4, r4, #2
 8014ea2:	2600      	movs	r6, #0
 8014ea4:	42a6      	cmp	r6, r4
 8014ea6:	d109      	bne.n	8014ebc <__libc_init_array+0x24>
 8014ea8:	4d0b      	ldr	r5, [pc, #44]	@ (8014ed8 <__libc_init_array+0x40>)
 8014eaa:	4c0c      	ldr	r4, [pc, #48]	@ (8014edc <__libc_init_array+0x44>)
 8014eac:	f000 fe48 	bl	8015b40 <_init>
 8014eb0:	1b64      	subs	r4, r4, r5
 8014eb2:	10a4      	asrs	r4, r4, #2
 8014eb4:	2600      	movs	r6, #0
 8014eb6:	42a6      	cmp	r6, r4
 8014eb8:	d105      	bne.n	8014ec6 <__libc_init_array+0x2e>
 8014eba:	bd70      	pop	{r4, r5, r6, pc}
 8014ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014ec0:	4798      	blx	r3
 8014ec2:	3601      	adds	r6, #1
 8014ec4:	e7ee      	b.n	8014ea4 <__libc_init_array+0xc>
 8014ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014eca:	4798      	blx	r3
 8014ecc:	3601      	adds	r6, #1
 8014ece:	e7f2      	b.n	8014eb6 <__libc_init_array+0x1e>
 8014ed0:	0801872c 	.word	0x0801872c
 8014ed4:	0801872c 	.word	0x0801872c
 8014ed8:	0801872c 	.word	0x0801872c
 8014edc:	08018730 	.word	0x08018730

08014ee0 <__retarget_lock_init_recursive>:
 8014ee0:	4770      	bx	lr

08014ee2 <__retarget_lock_acquire_recursive>:
 8014ee2:	4770      	bx	lr

08014ee4 <__retarget_lock_release_recursive>:
 8014ee4:	4770      	bx	lr

08014ee6 <memcpy>:
 8014ee6:	440a      	add	r2, r1
 8014ee8:	4291      	cmp	r1, r2
 8014eea:	f100 33ff 	add.w	r3, r0, #4294967295
 8014eee:	d100      	bne.n	8014ef2 <memcpy+0xc>
 8014ef0:	4770      	bx	lr
 8014ef2:	b510      	push	{r4, lr}
 8014ef4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014ef8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014efc:	4291      	cmp	r1, r2
 8014efe:	d1f9      	bne.n	8014ef4 <memcpy+0xe>
 8014f00:	bd10      	pop	{r4, pc}
	...

08014f04 <__assert_func>:
 8014f04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014f06:	4614      	mov	r4, r2
 8014f08:	461a      	mov	r2, r3
 8014f0a:	4b09      	ldr	r3, [pc, #36]	@ (8014f30 <__assert_func+0x2c>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	4605      	mov	r5, r0
 8014f10:	68d8      	ldr	r0, [r3, #12]
 8014f12:	b14c      	cbz	r4, 8014f28 <__assert_func+0x24>
 8014f14:	4b07      	ldr	r3, [pc, #28]	@ (8014f34 <__assert_func+0x30>)
 8014f16:	9100      	str	r1, [sp, #0]
 8014f18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014f1c:	4906      	ldr	r1, [pc, #24]	@ (8014f38 <__assert_func+0x34>)
 8014f1e:	462b      	mov	r3, r5
 8014f20:	f000 fc88 	bl	8015834 <fiprintf>
 8014f24:	f000 fd3c 	bl	80159a0 <abort>
 8014f28:	4b04      	ldr	r3, [pc, #16]	@ (8014f3c <__assert_func+0x38>)
 8014f2a:	461c      	mov	r4, r3
 8014f2c:	e7f3      	b.n	8014f16 <__assert_func+0x12>
 8014f2e:	bf00      	nop
 8014f30:	200000d8 	.word	0x200000d8
 8014f34:	080186b5 	.word	0x080186b5
 8014f38:	080186c2 	.word	0x080186c2
 8014f3c:	080186f0 	.word	0x080186f0

08014f40 <_free_r>:
 8014f40:	b538      	push	{r3, r4, r5, lr}
 8014f42:	4605      	mov	r5, r0
 8014f44:	2900      	cmp	r1, #0
 8014f46:	d041      	beq.n	8014fcc <_free_r+0x8c>
 8014f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f4c:	1f0c      	subs	r4, r1, #4
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	bfb8      	it	lt
 8014f52:	18e4      	addlt	r4, r4, r3
 8014f54:	f000 f8e8 	bl	8015128 <__malloc_lock>
 8014f58:	4a1d      	ldr	r2, [pc, #116]	@ (8014fd0 <_free_r+0x90>)
 8014f5a:	6813      	ldr	r3, [r2, #0]
 8014f5c:	b933      	cbnz	r3, 8014f6c <_free_r+0x2c>
 8014f5e:	6063      	str	r3, [r4, #4]
 8014f60:	6014      	str	r4, [r2, #0]
 8014f62:	4628      	mov	r0, r5
 8014f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f68:	f000 b8e4 	b.w	8015134 <__malloc_unlock>
 8014f6c:	42a3      	cmp	r3, r4
 8014f6e:	d908      	bls.n	8014f82 <_free_r+0x42>
 8014f70:	6820      	ldr	r0, [r4, #0]
 8014f72:	1821      	adds	r1, r4, r0
 8014f74:	428b      	cmp	r3, r1
 8014f76:	bf01      	itttt	eq
 8014f78:	6819      	ldreq	r1, [r3, #0]
 8014f7a:	685b      	ldreq	r3, [r3, #4]
 8014f7c:	1809      	addeq	r1, r1, r0
 8014f7e:	6021      	streq	r1, [r4, #0]
 8014f80:	e7ed      	b.n	8014f5e <_free_r+0x1e>
 8014f82:	461a      	mov	r2, r3
 8014f84:	685b      	ldr	r3, [r3, #4]
 8014f86:	b10b      	cbz	r3, 8014f8c <_free_r+0x4c>
 8014f88:	42a3      	cmp	r3, r4
 8014f8a:	d9fa      	bls.n	8014f82 <_free_r+0x42>
 8014f8c:	6811      	ldr	r1, [r2, #0]
 8014f8e:	1850      	adds	r0, r2, r1
 8014f90:	42a0      	cmp	r0, r4
 8014f92:	d10b      	bne.n	8014fac <_free_r+0x6c>
 8014f94:	6820      	ldr	r0, [r4, #0]
 8014f96:	4401      	add	r1, r0
 8014f98:	1850      	adds	r0, r2, r1
 8014f9a:	4283      	cmp	r3, r0
 8014f9c:	6011      	str	r1, [r2, #0]
 8014f9e:	d1e0      	bne.n	8014f62 <_free_r+0x22>
 8014fa0:	6818      	ldr	r0, [r3, #0]
 8014fa2:	685b      	ldr	r3, [r3, #4]
 8014fa4:	6053      	str	r3, [r2, #4]
 8014fa6:	4408      	add	r0, r1
 8014fa8:	6010      	str	r0, [r2, #0]
 8014faa:	e7da      	b.n	8014f62 <_free_r+0x22>
 8014fac:	d902      	bls.n	8014fb4 <_free_r+0x74>
 8014fae:	230c      	movs	r3, #12
 8014fb0:	602b      	str	r3, [r5, #0]
 8014fb2:	e7d6      	b.n	8014f62 <_free_r+0x22>
 8014fb4:	6820      	ldr	r0, [r4, #0]
 8014fb6:	1821      	adds	r1, r4, r0
 8014fb8:	428b      	cmp	r3, r1
 8014fba:	bf04      	itt	eq
 8014fbc:	6819      	ldreq	r1, [r3, #0]
 8014fbe:	685b      	ldreq	r3, [r3, #4]
 8014fc0:	6063      	str	r3, [r4, #4]
 8014fc2:	bf04      	itt	eq
 8014fc4:	1809      	addeq	r1, r1, r0
 8014fc6:	6021      	streq	r1, [r4, #0]
 8014fc8:	6054      	str	r4, [r2, #4]
 8014fca:	e7ca      	b.n	8014f62 <_free_r+0x22>
 8014fcc:	bd38      	pop	{r3, r4, r5, pc}
 8014fce:	bf00      	nop
 8014fd0:	2000b508 	.word	0x2000b508

08014fd4 <malloc>:
 8014fd4:	4b02      	ldr	r3, [pc, #8]	@ (8014fe0 <malloc+0xc>)
 8014fd6:	4601      	mov	r1, r0
 8014fd8:	6818      	ldr	r0, [r3, #0]
 8014fda:	f000 b825 	b.w	8015028 <_malloc_r>
 8014fde:	bf00      	nop
 8014fe0:	200000d8 	.word	0x200000d8

08014fe4 <sbrk_aligned>:
 8014fe4:	b570      	push	{r4, r5, r6, lr}
 8014fe6:	4e0f      	ldr	r6, [pc, #60]	@ (8015024 <sbrk_aligned+0x40>)
 8014fe8:	460c      	mov	r4, r1
 8014fea:	6831      	ldr	r1, [r6, #0]
 8014fec:	4605      	mov	r5, r0
 8014fee:	b911      	cbnz	r1, 8014ff6 <sbrk_aligned+0x12>
 8014ff0:	f000 fcc6 	bl	8015980 <_sbrk_r>
 8014ff4:	6030      	str	r0, [r6, #0]
 8014ff6:	4621      	mov	r1, r4
 8014ff8:	4628      	mov	r0, r5
 8014ffa:	f000 fcc1 	bl	8015980 <_sbrk_r>
 8014ffe:	1c43      	adds	r3, r0, #1
 8015000:	d103      	bne.n	801500a <sbrk_aligned+0x26>
 8015002:	f04f 34ff 	mov.w	r4, #4294967295
 8015006:	4620      	mov	r0, r4
 8015008:	bd70      	pop	{r4, r5, r6, pc}
 801500a:	1cc4      	adds	r4, r0, #3
 801500c:	f024 0403 	bic.w	r4, r4, #3
 8015010:	42a0      	cmp	r0, r4
 8015012:	d0f8      	beq.n	8015006 <sbrk_aligned+0x22>
 8015014:	1a21      	subs	r1, r4, r0
 8015016:	4628      	mov	r0, r5
 8015018:	f000 fcb2 	bl	8015980 <_sbrk_r>
 801501c:	3001      	adds	r0, #1
 801501e:	d1f2      	bne.n	8015006 <sbrk_aligned+0x22>
 8015020:	e7ef      	b.n	8015002 <sbrk_aligned+0x1e>
 8015022:	bf00      	nop
 8015024:	2000b504 	.word	0x2000b504

08015028 <_malloc_r>:
 8015028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801502c:	1ccd      	adds	r5, r1, #3
 801502e:	f025 0503 	bic.w	r5, r5, #3
 8015032:	3508      	adds	r5, #8
 8015034:	2d0c      	cmp	r5, #12
 8015036:	bf38      	it	cc
 8015038:	250c      	movcc	r5, #12
 801503a:	2d00      	cmp	r5, #0
 801503c:	4606      	mov	r6, r0
 801503e:	db01      	blt.n	8015044 <_malloc_r+0x1c>
 8015040:	42a9      	cmp	r1, r5
 8015042:	d904      	bls.n	801504e <_malloc_r+0x26>
 8015044:	230c      	movs	r3, #12
 8015046:	6033      	str	r3, [r6, #0]
 8015048:	2000      	movs	r0, #0
 801504a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801504e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015124 <_malloc_r+0xfc>
 8015052:	f000 f869 	bl	8015128 <__malloc_lock>
 8015056:	f8d8 3000 	ldr.w	r3, [r8]
 801505a:	461c      	mov	r4, r3
 801505c:	bb44      	cbnz	r4, 80150b0 <_malloc_r+0x88>
 801505e:	4629      	mov	r1, r5
 8015060:	4630      	mov	r0, r6
 8015062:	f7ff ffbf 	bl	8014fe4 <sbrk_aligned>
 8015066:	1c43      	adds	r3, r0, #1
 8015068:	4604      	mov	r4, r0
 801506a:	d158      	bne.n	801511e <_malloc_r+0xf6>
 801506c:	f8d8 4000 	ldr.w	r4, [r8]
 8015070:	4627      	mov	r7, r4
 8015072:	2f00      	cmp	r7, #0
 8015074:	d143      	bne.n	80150fe <_malloc_r+0xd6>
 8015076:	2c00      	cmp	r4, #0
 8015078:	d04b      	beq.n	8015112 <_malloc_r+0xea>
 801507a:	6823      	ldr	r3, [r4, #0]
 801507c:	4639      	mov	r1, r7
 801507e:	4630      	mov	r0, r6
 8015080:	eb04 0903 	add.w	r9, r4, r3
 8015084:	f000 fc7c 	bl	8015980 <_sbrk_r>
 8015088:	4581      	cmp	r9, r0
 801508a:	d142      	bne.n	8015112 <_malloc_r+0xea>
 801508c:	6821      	ldr	r1, [r4, #0]
 801508e:	1a6d      	subs	r5, r5, r1
 8015090:	4629      	mov	r1, r5
 8015092:	4630      	mov	r0, r6
 8015094:	f7ff ffa6 	bl	8014fe4 <sbrk_aligned>
 8015098:	3001      	adds	r0, #1
 801509a:	d03a      	beq.n	8015112 <_malloc_r+0xea>
 801509c:	6823      	ldr	r3, [r4, #0]
 801509e:	442b      	add	r3, r5
 80150a0:	6023      	str	r3, [r4, #0]
 80150a2:	f8d8 3000 	ldr.w	r3, [r8]
 80150a6:	685a      	ldr	r2, [r3, #4]
 80150a8:	bb62      	cbnz	r2, 8015104 <_malloc_r+0xdc>
 80150aa:	f8c8 7000 	str.w	r7, [r8]
 80150ae:	e00f      	b.n	80150d0 <_malloc_r+0xa8>
 80150b0:	6822      	ldr	r2, [r4, #0]
 80150b2:	1b52      	subs	r2, r2, r5
 80150b4:	d420      	bmi.n	80150f8 <_malloc_r+0xd0>
 80150b6:	2a0b      	cmp	r2, #11
 80150b8:	d917      	bls.n	80150ea <_malloc_r+0xc2>
 80150ba:	1961      	adds	r1, r4, r5
 80150bc:	42a3      	cmp	r3, r4
 80150be:	6025      	str	r5, [r4, #0]
 80150c0:	bf18      	it	ne
 80150c2:	6059      	strne	r1, [r3, #4]
 80150c4:	6863      	ldr	r3, [r4, #4]
 80150c6:	bf08      	it	eq
 80150c8:	f8c8 1000 	streq.w	r1, [r8]
 80150cc:	5162      	str	r2, [r4, r5]
 80150ce:	604b      	str	r3, [r1, #4]
 80150d0:	4630      	mov	r0, r6
 80150d2:	f000 f82f 	bl	8015134 <__malloc_unlock>
 80150d6:	f104 000b 	add.w	r0, r4, #11
 80150da:	1d23      	adds	r3, r4, #4
 80150dc:	f020 0007 	bic.w	r0, r0, #7
 80150e0:	1ac2      	subs	r2, r0, r3
 80150e2:	bf1c      	itt	ne
 80150e4:	1a1b      	subne	r3, r3, r0
 80150e6:	50a3      	strne	r3, [r4, r2]
 80150e8:	e7af      	b.n	801504a <_malloc_r+0x22>
 80150ea:	6862      	ldr	r2, [r4, #4]
 80150ec:	42a3      	cmp	r3, r4
 80150ee:	bf0c      	ite	eq
 80150f0:	f8c8 2000 	streq.w	r2, [r8]
 80150f4:	605a      	strne	r2, [r3, #4]
 80150f6:	e7eb      	b.n	80150d0 <_malloc_r+0xa8>
 80150f8:	4623      	mov	r3, r4
 80150fa:	6864      	ldr	r4, [r4, #4]
 80150fc:	e7ae      	b.n	801505c <_malloc_r+0x34>
 80150fe:	463c      	mov	r4, r7
 8015100:	687f      	ldr	r7, [r7, #4]
 8015102:	e7b6      	b.n	8015072 <_malloc_r+0x4a>
 8015104:	461a      	mov	r2, r3
 8015106:	685b      	ldr	r3, [r3, #4]
 8015108:	42a3      	cmp	r3, r4
 801510a:	d1fb      	bne.n	8015104 <_malloc_r+0xdc>
 801510c:	2300      	movs	r3, #0
 801510e:	6053      	str	r3, [r2, #4]
 8015110:	e7de      	b.n	80150d0 <_malloc_r+0xa8>
 8015112:	230c      	movs	r3, #12
 8015114:	6033      	str	r3, [r6, #0]
 8015116:	4630      	mov	r0, r6
 8015118:	f000 f80c 	bl	8015134 <__malloc_unlock>
 801511c:	e794      	b.n	8015048 <_malloc_r+0x20>
 801511e:	6005      	str	r5, [r0, #0]
 8015120:	e7d6      	b.n	80150d0 <_malloc_r+0xa8>
 8015122:	bf00      	nop
 8015124:	2000b508 	.word	0x2000b508

08015128 <__malloc_lock>:
 8015128:	4801      	ldr	r0, [pc, #4]	@ (8015130 <__malloc_lock+0x8>)
 801512a:	f7ff beda 	b.w	8014ee2 <__retarget_lock_acquire_recursive>
 801512e:	bf00      	nop
 8015130:	2000b500 	.word	0x2000b500

08015134 <__malloc_unlock>:
 8015134:	4801      	ldr	r0, [pc, #4]	@ (801513c <__malloc_unlock+0x8>)
 8015136:	f7ff bed5 	b.w	8014ee4 <__retarget_lock_release_recursive>
 801513a:	bf00      	nop
 801513c:	2000b500 	.word	0x2000b500

08015140 <__sfputc_r>:
 8015140:	6893      	ldr	r3, [r2, #8]
 8015142:	3b01      	subs	r3, #1
 8015144:	2b00      	cmp	r3, #0
 8015146:	b410      	push	{r4}
 8015148:	6093      	str	r3, [r2, #8]
 801514a:	da08      	bge.n	801515e <__sfputc_r+0x1e>
 801514c:	6994      	ldr	r4, [r2, #24]
 801514e:	42a3      	cmp	r3, r4
 8015150:	db01      	blt.n	8015156 <__sfputc_r+0x16>
 8015152:	290a      	cmp	r1, #10
 8015154:	d103      	bne.n	801515e <__sfputc_r+0x1e>
 8015156:	f85d 4b04 	ldr.w	r4, [sp], #4
 801515a:	f000 bb7d 	b.w	8015858 <__swbuf_r>
 801515e:	6813      	ldr	r3, [r2, #0]
 8015160:	1c58      	adds	r0, r3, #1
 8015162:	6010      	str	r0, [r2, #0]
 8015164:	7019      	strb	r1, [r3, #0]
 8015166:	4608      	mov	r0, r1
 8015168:	f85d 4b04 	ldr.w	r4, [sp], #4
 801516c:	4770      	bx	lr

0801516e <__sfputs_r>:
 801516e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015170:	4606      	mov	r6, r0
 8015172:	460f      	mov	r7, r1
 8015174:	4614      	mov	r4, r2
 8015176:	18d5      	adds	r5, r2, r3
 8015178:	42ac      	cmp	r4, r5
 801517a:	d101      	bne.n	8015180 <__sfputs_r+0x12>
 801517c:	2000      	movs	r0, #0
 801517e:	e007      	b.n	8015190 <__sfputs_r+0x22>
 8015180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015184:	463a      	mov	r2, r7
 8015186:	4630      	mov	r0, r6
 8015188:	f7ff ffda 	bl	8015140 <__sfputc_r>
 801518c:	1c43      	adds	r3, r0, #1
 801518e:	d1f3      	bne.n	8015178 <__sfputs_r+0xa>
 8015190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015194 <_vfiprintf_r>:
 8015194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015198:	460d      	mov	r5, r1
 801519a:	b09d      	sub	sp, #116	@ 0x74
 801519c:	4614      	mov	r4, r2
 801519e:	4698      	mov	r8, r3
 80151a0:	4606      	mov	r6, r0
 80151a2:	b118      	cbz	r0, 80151ac <_vfiprintf_r+0x18>
 80151a4:	6a03      	ldr	r3, [r0, #32]
 80151a6:	b90b      	cbnz	r3, 80151ac <_vfiprintf_r+0x18>
 80151a8:	f7ff fd8c 	bl	8014cc4 <__sinit>
 80151ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80151ae:	07d9      	lsls	r1, r3, #31
 80151b0:	d405      	bmi.n	80151be <_vfiprintf_r+0x2a>
 80151b2:	89ab      	ldrh	r3, [r5, #12]
 80151b4:	059a      	lsls	r2, r3, #22
 80151b6:	d402      	bmi.n	80151be <_vfiprintf_r+0x2a>
 80151b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80151ba:	f7ff fe92 	bl	8014ee2 <__retarget_lock_acquire_recursive>
 80151be:	89ab      	ldrh	r3, [r5, #12]
 80151c0:	071b      	lsls	r3, r3, #28
 80151c2:	d501      	bpl.n	80151c8 <_vfiprintf_r+0x34>
 80151c4:	692b      	ldr	r3, [r5, #16]
 80151c6:	b99b      	cbnz	r3, 80151f0 <_vfiprintf_r+0x5c>
 80151c8:	4629      	mov	r1, r5
 80151ca:	4630      	mov	r0, r6
 80151cc:	f000 fb82 	bl	80158d4 <__swsetup_r>
 80151d0:	b170      	cbz	r0, 80151f0 <_vfiprintf_r+0x5c>
 80151d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80151d4:	07dc      	lsls	r4, r3, #31
 80151d6:	d504      	bpl.n	80151e2 <_vfiprintf_r+0x4e>
 80151d8:	f04f 30ff 	mov.w	r0, #4294967295
 80151dc:	b01d      	add	sp, #116	@ 0x74
 80151de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151e2:	89ab      	ldrh	r3, [r5, #12]
 80151e4:	0598      	lsls	r0, r3, #22
 80151e6:	d4f7      	bmi.n	80151d8 <_vfiprintf_r+0x44>
 80151e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80151ea:	f7ff fe7b 	bl	8014ee4 <__retarget_lock_release_recursive>
 80151ee:	e7f3      	b.n	80151d8 <_vfiprintf_r+0x44>
 80151f0:	2300      	movs	r3, #0
 80151f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80151f4:	2320      	movs	r3, #32
 80151f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80151fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80151fe:	2330      	movs	r3, #48	@ 0x30
 8015200:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80153b0 <_vfiprintf_r+0x21c>
 8015204:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015208:	f04f 0901 	mov.w	r9, #1
 801520c:	4623      	mov	r3, r4
 801520e:	469a      	mov	sl, r3
 8015210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015214:	b10a      	cbz	r2, 801521a <_vfiprintf_r+0x86>
 8015216:	2a25      	cmp	r2, #37	@ 0x25
 8015218:	d1f9      	bne.n	801520e <_vfiprintf_r+0x7a>
 801521a:	ebba 0b04 	subs.w	fp, sl, r4
 801521e:	d00b      	beq.n	8015238 <_vfiprintf_r+0xa4>
 8015220:	465b      	mov	r3, fp
 8015222:	4622      	mov	r2, r4
 8015224:	4629      	mov	r1, r5
 8015226:	4630      	mov	r0, r6
 8015228:	f7ff ffa1 	bl	801516e <__sfputs_r>
 801522c:	3001      	adds	r0, #1
 801522e:	f000 80a7 	beq.w	8015380 <_vfiprintf_r+0x1ec>
 8015232:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015234:	445a      	add	r2, fp
 8015236:	9209      	str	r2, [sp, #36]	@ 0x24
 8015238:	f89a 3000 	ldrb.w	r3, [sl]
 801523c:	2b00      	cmp	r3, #0
 801523e:	f000 809f 	beq.w	8015380 <_vfiprintf_r+0x1ec>
 8015242:	2300      	movs	r3, #0
 8015244:	f04f 32ff 	mov.w	r2, #4294967295
 8015248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801524c:	f10a 0a01 	add.w	sl, sl, #1
 8015250:	9304      	str	r3, [sp, #16]
 8015252:	9307      	str	r3, [sp, #28]
 8015254:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015258:	931a      	str	r3, [sp, #104]	@ 0x68
 801525a:	4654      	mov	r4, sl
 801525c:	2205      	movs	r2, #5
 801525e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015262:	4853      	ldr	r0, [pc, #332]	@ (80153b0 <_vfiprintf_r+0x21c>)
 8015264:	f7ea ffb4 	bl	80001d0 <memchr>
 8015268:	9a04      	ldr	r2, [sp, #16]
 801526a:	b9d8      	cbnz	r0, 80152a4 <_vfiprintf_r+0x110>
 801526c:	06d1      	lsls	r1, r2, #27
 801526e:	bf44      	itt	mi
 8015270:	2320      	movmi	r3, #32
 8015272:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015276:	0713      	lsls	r3, r2, #28
 8015278:	bf44      	itt	mi
 801527a:	232b      	movmi	r3, #43	@ 0x2b
 801527c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015280:	f89a 3000 	ldrb.w	r3, [sl]
 8015284:	2b2a      	cmp	r3, #42	@ 0x2a
 8015286:	d015      	beq.n	80152b4 <_vfiprintf_r+0x120>
 8015288:	9a07      	ldr	r2, [sp, #28]
 801528a:	4654      	mov	r4, sl
 801528c:	2000      	movs	r0, #0
 801528e:	f04f 0c0a 	mov.w	ip, #10
 8015292:	4621      	mov	r1, r4
 8015294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015298:	3b30      	subs	r3, #48	@ 0x30
 801529a:	2b09      	cmp	r3, #9
 801529c:	d94b      	bls.n	8015336 <_vfiprintf_r+0x1a2>
 801529e:	b1b0      	cbz	r0, 80152ce <_vfiprintf_r+0x13a>
 80152a0:	9207      	str	r2, [sp, #28]
 80152a2:	e014      	b.n	80152ce <_vfiprintf_r+0x13a>
 80152a4:	eba0 0308 	sub.w	r3, r0, r8
 80152a8:	fa09 f303 	lsl.w	r3, r9, r3
 80152ac:	4313      	orrs	r3, r2
 80152ae:	9304      	str	r3, [sp, #16]
 80152b0:	46a2      	mov	sl, r4
 80152b2:	e7d2      	b.n	801525a <_vfiprintf_r+0xc6>
 80152b4:	9b03      	ldr	r3, [sp, #12]
 80152b6:	1d19      	adds	r1, r3, #4
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	9103      	str	r1, [sp, #12]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	bfbb      	ittet	lt
 80152c0:	425b      	neglt	r3, r3
 80152c2:	f042 0202 	orrlt.w	r2, r2, #2
 80152c6:	9307      	strge	r3, [sp, #28]
 80152c8:	9307      	strlt	r3, [sp, #28]
 80152ca:	bfb8      	it	lt
 80152cc:	9204      	strlt	r2, [sp, #16]
 80152ce:	7823      	ldrb	r3, [r4, #0]
 80152d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80152d2:	d10a      	bne.n	80152ea <_vfiprintf_r+0x156>
 80152d4:	7863      	ldrb	r3, [r4, #1]
 80152d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80152d8:	d132      	bne.n	8015340 <_vfiprintf_r+0x1ac>
 80152da:	9b03      	ldr	r3, [sp, #12]
 80152dc:	1d1a      	adds	r2, r3, #4
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	9203      	str	r2, [sp, #12]
 80152e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80152e6:	3402      	adds	r4, #2
 80152e8:	9305      	str	r3, [sp, #20]
 80152ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80153c0 <_vfiprintf_r+0x22c>
 80152ee:	7821      	ldrb	r1, [r4, #0]
 80152f0:	2203      	movs	r2, #3
 80152f2:	4650      	mov	r0, sl
 80152f4:	f7ea ff6c 	bl	80001d0 <memchr>
 80152f8:	b138      	cbz	r0, 801530a <_vfiprintf_r+0x176>
 80152fa:	9b04      	ldr	r3, [sp, #16]
 80152fc:	eba0 000a 	sub.w	r0, r0, sl
 8015300:	2240      	movs	r2, #64	@ 0x40
 8015302:	4082      	lsls	r2, r0
 8015304:	4313      	orrs	r3, r2
 8015306:	3401      	adds	r4, #1
 8015308:	9304      	str	r3, [sp, #16]
 801530a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801530e:	4829      	ldr	r0, [pc, #164]	@ (80153b4 <_vfiprintf_r+0x220>)
 8015310:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015314:	2206      	movs	r2, #6
 8015316:	f7ea ff5b 	bl	80001d0 <memchr>
 801531a:	2800      	cmp	r0, #0
 801531c:	d03f      	beq.n	801539e <_vfiprintf_r+0x20a>
 801531e:	4b26      	ldr	r3, [pc, #152]	@ (80153b8 <_vfiprintf_r+0x224>)
 8015320:	bb1b      	cbnz	r3, 801536a <_vfiprintf_r+0x1d6>
 8015322:	9b03      	ldr	r3, [sp, #12]
 8015324:	3307      	adds	r3, #7
 8015326:	f023 0307 	bic.w	r3, r3, #7
 801532a:	3308      	adds	r3, #8
 801532c:	9303      	str	r3, [sp, #12]
 801532e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015330:	443b      	add	r3, r7
 8015332:	9309      	str	r3, [sp, #36]	@ 0x24
 8015334:	e76a      	b.n	801520c <_vfiprintf_r+0x78>
 8015336:	fb0c 3202 	mla	r2, ip, r2, r3
 801533a:	460c      	mov	r4, r1
 801533c:	2001      	movs	r0, #1
 801533e:	e7a8      	b.n	8015292 <_vfiprintf_r+0xfe>
 8015340:	2300      	movs	r3, #0
 8015342:	3401      	adds	r4, #1
 8015344:	9305      	str	r3, [sp, #20]
 8015346:	4619      	mov	r1, r3
 8015348:	f04f 0c0a 	mov.w	ip, #10
 801534c:	4620      	mov	r0, r4
 801534e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015352:	3a30      	subs	r2, #48	@ 0x30
 8015354:	2a09      	cmp	r2, #9
 8015356:	d903      	bls.n	8015360 <_vfiprintf_r+0x1cc>
 8015358:	2b00      	cmp	r3, #0
 801535a:	d0c6      	beq.n	80152ea <_vfiprintf_r+0x156>
 801535c:	9105      	str	r1, [sp, #20]
 801535e:	e7c4      	b.n	80152ea <_vfiprintf_r+0x156>
 8015360:	fb0c 2101 	mla	r1, ip, r1, r2
 8015364:	4604      	mov	r4, r0
 8015366:	2301      	movs	r3, #1
 8015368:	e7f0      	b.n	801534c <_vfiprintf_r+0x1b8>
 801536a:	ab03      	add	r3, sp, #12
 801536c:	9300      	str	r3, [sp, #0]
 801536e:	462a      	mov	r2, r5
 8015370:	4b12      	ldr	r3, [pc, #72]	@ (80153bc <_vfiprintf_r+0x228>)
 8015372:	a904      	add	r1, sp, #16
 8015374:	4630      	mov	r0, r6
 8015376:	f3af 8000 	nop.w
 801537a:	4607      	mov	r7, r0
 801537c:	1c78      	adds	r0, r7, #1
 801537e:	d1d6      	bne.n	801532e <_vfiprintf_r+0x19a>
 8015380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015382:	07d9      	lsls	r1, r3, #31
 8015384:	d405      	bmi.n	8015392 <_vfiprintf_r+0x1fe>
 8015386:	89ab      	ldrh	r3, [r5, #12]
 8015388:	059a      	lsls	r2, r3, #22
 801538a:	d402      	bmi.n	8015392 <_vfiprintf_r+0x1fe>
 801538c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801538e:	f7ff fda9 	bl	8014ee4 <__retarget_lock_release_recursive>
 8015392:	89ab      	ldrh	r3, [r5, #12]
 8015394:	065b      	lsls	r3, r3, #25
 8015396:	f53f af1f 	bmi.w	80151d8 <_vfiprintf_r+0x44>
 801539a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801539c:	e71e      	b.n	80151dc <_vfiprintf_r+0x48>
 801539e:	ab03      	add	r3, sp, #12
 80153a0:	9300      	str	r3, [sp, #0]
 80153a2:	462a      	mov	r2, r5
 80153a4:	4b05      	ldr	r3, [pc, #20]	@ (80153bc <_vfiprintf_r+0x228>)
 80153a6:	a904      	add	r1, sp, #16
 80153a8:	4630      	mov	r0, r6
 80153aa:	f000 f879 	bl	80154a0 <_printf_i>
 80153ae:	e7e4      	b.n	801537a <_vfiprintf_r+0x1e6>
 80153b0:	080186f1 	.word	0x080186f1
 80153b4:	080186fb 	.word	0x080186fb
 80153b8:	00000000 	.word	0x00000000
 80153bc:	0801516f 	.word	0x0801516f
 80153c0:	080186f7 	.word	0x080186f7

080153c4 <_printf_common>:
 80153c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153c8:	4616      	mov	r6, r2
 80153ca:	4698      	mov	r8, r3
 80153cc:	688a      	ldr	r2, [r1, #8]
 80153ce:	690b      	ldr	r3, [r1, #16]
 80153d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80153d4:	4293      	cmp	r3, r2
 80153d6:	bfb8      	it	lt
 80153d8:	4613      	movlt	r3, r2
 80153da:	6033      	str	r3, [r6, #0]
 80153dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80153e0:	4607      	mov	r7, r0
 80153e2:	460c      	mov	r4, r1
 80153e4:	b10a      	cbz	r2, 80153ea <_printf_common+0x26>
 80153e6:	3301      	adds	r3, #1
 80153e8:	6033      	str	r3, [r6, #0]
 80153ea:	6823      	ldr	r3, [r4, #0]
 80153ec:	0699      	lsls	r1, r3, #26
 80153ee:	bf42      	ittt	mi
 80153f0:	6833      	ldrmi	r3, [r6, #0]
 80153f2:	3302      	addmi	r3, #2
 80153f4:	6033      	strmi	r3, [r6, #0]
 80153f6:	6825      	ldr	r5, [r4, #0]
 80153f8:	f015 0506 	ands.w	r5, r5, #6
 80153fc:	d106      	bne.n	801540c <_printf_common+0x48>
 80153fe:	f104 0a19 	add.w	sl, r4, #25
 8015402:	68e3      	ldr	r3, [r4, #12]
 8015404:	6832      	ldr	r2, [r6, #0]
 8015406:	1a9b      	subs	r3, r3, r2
 8015408:	42ab      	cmp	r3, r5
 801540a:	dc26      	bgt.n	801545a <_printf_common+0x96>
 801540c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015410:	6822      	ldr	r2, [r4, #0]
 8015412:	3b00      	subs	r3, #0
 8015414:	bf18      	it	ne
 8015416:	2301      	movne	r3, #1
 8015418:	0692      	lsls	r2, r2, #26
 801541a:	d42b      	bmi.n	8015474 <_printf_common+0xb0>
 801541c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015420:	4641      	mov	r1, r8
 8015422:	4638      	mov	r0, r7
 8015424:	47c8      	blx	r9
 8015426:	3001      	adds	r0, #1
 8015428:	d01e      	beq.n	8015468 <_printf_common+0xa4>
 801542a:	6823      	ldr	r3, [r4, #0]
 801542c:	6922      	ldr	r2, [r4, #16]
 801542e:	f003 0306 	and.w	r3, r3, #6
 8015432:	2b04      	cmp	r3, #4
 8015434:	bf02      	ittt	eq
 8015436:	68e5      	ldreq	r5, [r4, #12]
 8015438:	6833      	ldreq	r3, [r6, #0]
 801543a:	1aed      	subeq	r5, r5, r3
 801543c:	68a3      	ldr	r3, [r4, #8]
 801543e:	bf0c      	ite	eq
 8015440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015444:	2500      	movne	r5, #0
 8015446:	4293      	cmp	r3, r2
 8015448:	bfc4      	itt	gt
 801544a:	1a9b      	subgt	r3, r3, r2
 801544c:	18ed      	addgt	r5, r5, r3
 801544e:	2600      	movs	r6, #0
 8015450:	341a      	adds	r4, #26
 8015452:	42b5      	cmp	r5, r6
 8015454:	d11a      	bne.n	801548c <_printf_common+0xc8>
 8015456:	2000      	movs	r0, #0
 8015458:	e008      	b.n	801546c <_printf_common+0xa8>
 801545a:	2301      	movs	r3, #1
 801545c:	4652      	mov	r2, sl
 801545e:	4641      	mov	r1, r8
 8015460:	4638      	mov	r0, r7
 8015462:	47c8      	blx	r9
 8015464:	3001      	adds	r0, #1
 8015466:	d103      	bne.n	8015470 <_printf_common+0xac>
 8015468:	f04f 30ff 	mov.w	r0, #4294967295
 801546c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015470:	3501      	adds	r5, #1
 8015472:	e7c6      	b.n	8015402 <_printf_common+0x3e>
 8015474:	18e1      	adds	r1, r4, r3
 8015476:	1c5a      	adds	r2, r3, #1
 8015478:	2030      	movs	r0, #48	@ 0x30
 801547a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801547e:	4422      	add	r2, r4
 8015480:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015484:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015488:	3302      	adds	r3, #2
 801548a:	e7c7      	b.n	801541c <_printf_common+0x58>
 801548c:	2301      	movs	r3, #1
 801548e:	4622      	mov	r2, r4
 8015490:	4641      	mov	r1, r8
 8015492:	4638      	mov	r0, r7
 8015494:	47c8      	blx	r9
 8015496:	3001      	adds	r0, #1
 8015498:	d0e6      	beq.n	8015468 <_printf_common+0xa4>
 801549a:	3601      	adds	r6, #1
 801549c:	e7d9      	b.n	8015452 <_printf_common+0x8e>
	...

080154a0 <_printf_i>:
 80154a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80154a4:	7e0f      	ldrb	r7, [r1, #24]
 80154a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80154a8:	2f78      	cmp	r7, #120	@ 0x78
 80154aa:	4691      	mov	r9, r2
 80154ac:	4680      	mov	r8, r0
 80154ae:	460c      	mov	r4, r1
 80154b0:	469a      	mov	sl, r3
 80154b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80154b6:	d807      	bhi.n	80154c8 <_printf_i+0x28>
 80154b8:	2f62      	cmp	r7, #98	@ 0x62
 80154ba:	d80a      	bhi.n	80154d2 <_printf_i+0x32>
 80154bc:	2f00      	cmp	r7, #0
 80154be:	f000 80d1 	beq.w	8015664 <_printf_i+0x1c4>
 80154c2:	2f58      	cmp	r7, #88	@ 0x58
 80154c4:	f000 80b8 	beq.w	8015638 <_printf_i+0x198>
 80154c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80154cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80154d0:	e03a      	b.n	8015548 <_printf_i+0xa8>
 80154d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80154d6:	2b15      	cmp	r3, #21
 80154d8:	d8f6      	bhi.n	80154c8 <_printf_i+0x28>
 80154da:	a101      	add	r1, pc, #4	@ (adr r1, 80154e0 <_printf_i+0x40>)
 80154dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80154e0:	08015539 	.word	0x08015539
 80154e4:	0801554d 	.word	0x0801554d
 80154e8:	080154c9 	.word	0x080154c9
 80154ec:	080154c9 	.word	0x080154c9
 80154f0:	080154c9 	.word	0x080154c9
 80154f4:	080154c9 	.word	0x080154c9
 80154f8:	0801554d 	.word	0x0801554d
 80154fc:	080154c9 	.word	0x080154c9
 8015500:	080154c9 	.word	0x080154c9
 8015504:	080154c9 	.word	0x080154c9
 8015508:	080154c9 	.word	0x080154c9
 801550c:	0801564b 	.word	0x0801564b
 8015510:	08015577 	.word	0x08015577
 8015514:	08015605 	.word	0x08015605
 8015518:	080154c9 	.word	0x080154c9
 801551c:	080154c9 	.word	0x080154c9
 8015520:	0801566d 	.word	0x0801566d
 8015524:	080154c9 	.word	0x080154c9
 8015528:	08015577 	.word	0x08015577
 801552c:	080154c9 	.word	0x080154c9
 8015530:	080154c9 	.word	0x080154c9
 8015534:	0801560d 	.word	0x0801560d
 8015538:	6833      	ldr	r3, [r6, #0]
 801553a:	1d1a      	adds	r2, r3, #4
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	6032      	str	r2, [r6, #0]
 8015540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015544:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015548:	2301      	movs	r3, #1
 801554a:	e09c      	b.n	8015686 <_printf_i+0x1e6>
 801554c:	6833      	ldr	r3, [r6, #0]
 801554e:	6820      	ldr	r0, [r4, #0]
 8015550:	1d19      	adds	r1, r3, #4
 8015552:	6031      	str	r1, [r6, #0]
 8015554:	0606      	lsls	r6, r0, #24
 8015556:	d501      	bpl.n	801555c <_printf_i+0xbc>
 8015558:	681d      	ldr	r5, [r3, #0]
 801555a:	e003      	b.n	8015564 <_printf_i+0xc4>
 801555c:	0645      	lsls	r5, r0, #25
 801555e:	d5fb      	bpl.n	8015558 <_printf_i+0xb8>
 8015560:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015564:	2d00      	cmp	r5, #0
 8015566:	da03      	bge.n	8015570 <_printf_i+0xd0>
 8015568:	232d      	movs	r3, #45	@ 0x2d
 801556a:	426d      	negs	r5, r5
 801556c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015570:	4858      	ldr	r0, [pc, #352]	@ (80156d4 <_printf_i+0x234>)
 8015572:	230a      	movs	r3, #10
 8015574:	e011      	b.n	801559a <_printf_i+0xfa>
 8015576:	6821      	ldr	r1, [r4, #0]
 8015578:	6833      	ldr	r3, [r6, #0]
 801557a:	0608      	lsls	r0, r1, #24
 801557c:	f853 5b04 	ldr.w	r5, [r3], #4
 8015580:	d402      	bmi.n	8015588 <_printf_i+0xe8>
 8015582:	0649      	lsls	r1, r1, #25
 8015584:	bf48      	it	mi
 8015586:	b2ad      	uxthmi	r5, r5
 8015588:	2f6f      	cmp	r7, #111	@ 0x6f
 801558a:	4852      	ldr	r0, [pc, #328]	@ (80156d4 <_printf_i+0x234>)
 801558c:	6033      	str	r3, [r6, #0]
 801558e:	bf14      	ite	ne
 8015590:	230a      	movne	r3, #10
 8015592:	2308      	moveq	r3, #8
 8015594:	2100      	movs	r1, #0
 8015596:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801559a:	6866      	ldr	r6, [r4, #4]
 801559c:	60a6      	str	r6, [r4, #8]
 801559e:	2e00      	cmp	r6, #0
 80155a0:	db05      	blt.n	80155ae <_printf_i+0x10e>
 80155a2:	6821      	ldr	r1, [r4, #0]
 80155a4:	432e      	orrs	r6, r5
 80155a6:	f021 0104 	bic.w	r1, r1, #4
 80155aa:	6021      	str	r1, [r4, #0]
 80155ac:	d04b      	beq.n	8015646 <_printf_i+0x1a6>
 80155ae:	4616      	mov	r6, r2
 80155b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80155b4:	fb03 5711 	mls	r7, r3, r1, r5
 80155b8:	5dc7      	ldrb	r7, [r0, r7]
 80155ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80155be:	462f      	mov	r7, r5
 80155c0:	42bb      	cmp	r3, r7
 80155c2:	460d      	mov	r5, r1
 80155c4:	d9f4      	bls.n	80155b0 <_printf_i+0x110>
 80155c6:	2b08      	cmp	r3, #8
 80155c8:	d10b      	bne.n	80155e2 <_printf_i+0x142>
 80155ca:	6823      	ldr	r3, [r4, #0]
 80155cc:	07df      	lsls	r7, r3, #31
 80155ce:	d508      	bpl.n	80155e2 <_printf_i+0x142>
 80155d0:	6923      	ldr	r3, [r4, #16]
 80155d2:	6861      	ldr	r1, [r4, #4]
 80155d4:	4299      	cmp	r1, r3
 80155d6:	bfde      	ittt	le
 80155d8:	2330      	movle	r3, #48	@ 0x30
 80155da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80155de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80155e2:	1b92      	subs	r2, r2, r6
 80155e4:	6122      	str	r2, [r4, #16]
 80155e6:	f8cd a000 	str.w	sl, [sp]
 80155ea:	464b      	mov	r3, r9
 80155ec:	aa03      	add	r2, sp, #12
 80155ee:	4621      	mov	r1, r4
 80155f0:	4640      	mov	r0, r8
 80155f2:	f7ff fee7 	bl	80153c4 <_printf_common>
 80155f6:	3001      	adds	r0, #1
 80155f8:	d14a      	bne.n	8015690 <_printf_i+0x1f0>
 80155fa:	f04f 30ff 	mov.w	r0, #4294967295
 80155fe:	b004      	add	sp, #16
 8015600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015604:	6823      	ldr	r3, [r4, #0]
 8015606:	f043 0320 	orr.w	r3, r3, #32
 801560a:	6023      	str	r3, [r4, #0]
 801560c:	4832      	ldr	r0, [pc, #200]	@ (80156d8 <_printf_i+0x238>)
 801560e:	2778      	movs	r7, #120	@ 0x78
 8015610:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015614:	6823      	ldr	r3, [r4, #0]
 8015616:	6831      	ldr	r1, [r6, #0]
 8015618:	061f      	lsls	r7, r3, #24
 801561a:	f851 5b04 	ldr.w	r5, [r1], #4
 801561e:	d402      	bmi.n	8015626 <_printf_i+0x186>
 8015620:	065f      	lsls	r7, r3, #25
 8015622:	bf48      	it	mi
 8015624:	b2ad      	uxthmi	r5, r5
 8015626:	6031      	str	r1, [r6, #0]
 8015628:	07d9      	lsls	r1, r3, #31
 801562a:	bf44      	itt	mi
 801562c:	f043 0320 	orrmi.w	r3, r3, #32
 8015630:	6023      	strmi	r3, [r4, #0]
 8015632:	b11d      	cbz	r5, 801563c <_printf_i+0x19c>
 8015634:	2310      	movs	r3, #16
 8015636:	e7ad      	b.n	8015594 <_printf_i+0xf4>
 8015638:	4826      	ldr	r0, [pc, #152]	@ (80156d4 <_printf_i+0x234>)
 801563a:	e7e9      	b.n	8015610 <_printf_i+0x170>
 801563c:	6823      	ldr	r3, [r4, #0]
 801563e:	f023 0320 	bic.w	r3, r3, #32
 8015642:	6023      	str	r3, [r4, #0]
 8015644:	e7f6      	b.n	8015634 <_printf_i+0x194>
 8015646:	4616      	mov	r6, r2
 8015648:	e7bd      	b.n	80155c6 <_printf_i+0x126>
 801564a:	6833      	ldr	r3, [r6, #0]
 801564c:	6825      	ldr	r5, [r4, #0]
 801564e:	6961      	ldr	r1, [r4, #20]
 8015650:	1d18      	adds	r0, r3, #4
 8015652:	6030      	str	r0, [r6, #0]
 8015654:	062e      	lsls	r6, r5, #24
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	d501      	bpl.n	801565e <_printf_i+0x1be>
 801565a:	6019      	str	r1, [r3, #0]
 801565c:	e002      	b.n	8015664 <_printf_i+0x1c4>
 801565e:	0668      	lsls	r0, r5, #25
 8015660:	d5fb      	bpl.n	801565a <_printf_i+0x1ba>
 8015662:	8019      	strh	r1, [r3, #0]
 8015664:	2300      	movs	r3, #0
 8015666:	6123      	str	r3, [r4, #16]
 8015668:	4616      	mov	r6, r2
 801566a:	e7bc      	b.n	80155e6 <_printf_i+0x146>
 801566c:	6833      	ldr	r3, [r6, #0]
 801566e:	1d1a      	adds	r2, r3, #4
 8015670:	6032      	str	r2, [r6, #0]
 8015672:	681e      	ldr	r6, [r3, #0]
 8015674:	6862      	ldr	r2, [r4, #4]
 8015676:	2100      	movs	r1, #0
 8015678:	4630      	mov	r0, r6
 801567a:	f7ea fda9 	bl	80001d0 <memchr>
 801567e:	b108      	cbz	r0, 8015684 <_printf_i+0x1e4>
 8015680:	1b80      	subs	r0, r0, r6
 8015682:	6060      	str	r0, [r4, #4]
 8015684:	6863      	ldr	r3, [r4, #4]
 8015686:	6123      	str	r3, [r4, #16]
 8015688:	2300      	movs	r3, #0
 801568a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801568e:	e7aa      	b.n	80155e6 <_printf_i+0x146>
 8015690:	6923      	ldr	r3, [r4, #16]
 8015692:	4632      	mov	r2, r6
 8015694:	4649      	mov	r1, r9
 8015696:	4640      	mov	r0, r8
 8015698:	47d0      	blx	sl
 801569a:	3001      	adds	r0, #1
 801569c:	d0ad      	beq.n	80155fa <_printf_i+0x15a>
 801569e:	6823      	ldr	r3, [r4, #0]
 80156a0:	079b      	lsls	r3, r3, #30
 80156a2:	d413      	bmi.n	80156cc <_printf_i+0x22c>
 80156a4:	68e0      	ldr	r0, [r4, #12]
 80156a6:	9b03      	ldr	r3, [sp, #12]
 80156a8:	4298      	cmp	r0, r3
 80156aa:	bfb8      	it	lt
 80156ac:	4618      	movlt	r0, r3
 80156ae:	e7a6      	b.n	80155fe <_printf_i+0x15e>
 80156b0:	2301      	movs	r3, #1
 80156b2:	4632      	mov	r2, r6
 80156b4:	4649      	mov	r1, r9
 80156b6:	4640      	mov	r0, r8
 80156b8:	47d0      	blx	sl
 80156ba:	3001      	adds	r0, #1
 80156bc:	d09d      	beq.n	80155fa <_printf_i+0x15a>
 80156be:	3501      	adds	r5, #1
 80156c0:	68e3      	ldr	r3, [r4, #12]
 80156c2:	9903      	ldr	r1, [sp, #12]
 80156c4:	1a5b      	subs	r3, r3, r1
 80156c6:	42ab      	cmp	r3, r5
 80156c8:	dcf2      	bgt.n	80156b0 <_printf_i+0x210>
 80156ca:	e7eb      	b.n	80156a4 <_printf_i+0x204>
 80156cc:	2500      	movs	r5, #0
 80156ce:	f104 0619 	add.w	r6, r4, #25
 80156d2:	e7f5      	b.n	80156c0 <_printf_i+0x220>
 80156d4:	08018702 	.word	0x08018702
 80156d8:	08018713 	.word	0x08018713

080156dc <__sflush_r>:
 80156dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80156e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156e4:	0716      	lsls	r6, r2, #28
 80156e6:	4605      	mov	r5, r0
 80156e8:	460c      	mov	r4, r1
 80156ea:	d454      	bmi.n	8015796 <__sflush_r+0xba>
 80156ec:	684b      	ldr	r3, [r1, #4]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	dc02      	bgt.n	80156f8 <__sflush_r+0x1c>
 80156f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	dd48      	ble.n	801578a <__sflush_r+0xae>
 80156f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80156fa:	2e00      	cmp	r6, #0
 80156fc:	d045      	beq.n	801578a <__sflush_r+0xae>
 80156fe:	2300      	movs	r3, #0
 8015700:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015704:	682f      	ldr	r7, [r5, #0]
 8015706:	6a21      	ldr	r1, [r4, #32]
 8015708:	602b      	str	r3, [r5, #0]
 801570a:	d030      	beq.n	801576e <__sflush_r+0x92>
 801570c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801570e:	89a3      	ldrh	r3, [r4, #12]
 8015710:	0759      	lsls	r1, r3, #29
 8015712:	d505      	bpl.n	8015720 <__sflush_r+0x44>
 8015714:	6863      	ldr	r3, [r4, #4]
 8015716:	1ad2      	subs	r2, r2, r3
 8015718:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801571a:	b10b      	cbz	r3, 8015720 <__sflush_r+0x44>
 801571c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801571e:	1ad2      	subs	r2, r2, r3
 8015720:	2300      	movs	r3, #0
 8015722:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015724:	6a21      	ldr	r1, [r4, #32]
 8015726:	4628      	mov	r0, r5
 8015728:	47b0      	blx	r6
 801572a:	1c43      	adds	r3, r0, #1
 801572c:	89a3      	ldrh	r3, [r4, #12]
 801572e:	d106      	bne.n	801573e <__sflush_r+0x62>
 8015730:	6829      	ldr	r1, [r5, #0]
 8015732:	291d      	cmp	r1, #29
 8015734:	d82b      	bhi.n	801578e <__sflush_r+0xb2>
 8015736:	4a2a      	ldr	r2, [pc, #168]	@ (80157e0 <__sflush_r+0x104>)
 8015738:	40ca      	lsrs	r2, r1
 801573a:	07d6      	lsls	r6, r2, #31
 801573c:	d527      	bpl.n	801578e <__sflush_r+0xb2>
 801573e:	2200      	movs	r2, #0
 8015740:	6062      	str	r2, [r4, #4]
 8015742:	04d9      	lsls	r1, r3, #19
 8015744:	6922      	ldr	r2, [r4, #16]
 8015746:	6022      	str	r2, [r4, #0]
 8015748:	d504      	bpl.n	8015754 <__sflush_r+0x78>
 801574a:	1c42      	adds	r2, r0, #1
 801574c:	d101      	bne.n	8015752 <__sflush_r+0x76>
 801574e:	682b      	ldr	r3, [r5, #0]
 8015750:	b903      	cbnz	r3, 8015754 <__sflush_r+0x78>
 8015752:	6560      	str	r0, [r4, #84]	@ 0x54
 8015754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015756:	602f      	str	r7, [r5, #0]
 8015758:	b1b9      	cbz	r1, 801578a <__sflush_r+0xae>
 801575a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801575e:	4299      	cmp	r1, r3
 8015760:	d002      	beq.n	8015768 <__sflush_r+0x8c>
 8015762:	4628      	mov	r0, r5
 8015764:	f7ff fbec 	bl	8014f40 <_free_r>
 8015768:	2300      	movs	r3, #0
 801576a:	6363      	str	r3, [r4, #52]	@ 0x34
 801576c:	e00d      	b.n	801578a <__sflush_r+0xae>
 801576e:	2301      	movs	r3, #1
 8015770:	4628      	mov	r0, r5
 8015772:	47b0      	blx	r6
 8015774:	4602      	mov	r2, r0
 8015776:	1c50      	adds	r0, r2, #1
 8015778:	d1c9      	bne.n	801570e <__sflush_r+0x32>
 801577a:	682b      	ldr	r3, [r5, #0]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d0c6      	beq.n	801570e <__sflush_r+0x32>
 8015780:	2b1d      	cmp	r3, #29
 8015782:	d001      	beq.n	8015788 <__sflush_r+0xac>
 8015784:	2b16      	cmp	r3, #22
 8015786:	d11e      	bne.n	80157c6 <__sflush_r+0xea>
 8015788:	602f      	str	r7, [r5, #0]
 801578a:	2000      	movs	r0, #0
 801578c:	e022      	b.n	80157d4 <__sflush_r+0xf8>
 801578e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015792:	b21b      	sxth	r3, r3
 8015794:	e01b      	b.n	80157ce <__sflush_r+0xf2>
 8015796:	690f      	ldr	r7, [r1, #16]
 8015798:	2f00      	cmp	r7, #0
 801579a:	d0f6      	beq.n	801578a <__sflush_r+0xae>
 801579c:	0793      	lsls	r3, r2, #30
 801579e:	680e      	ldr	r6, [r1, #0]
 80157a0:	bf08      	it	eq
 80157a2:	694b      	ldreq	r3, [r1, #20]
 80157a4:	600f      	str	r7, [r1, #0]
 80157a6:	bf18      	it	ne
 80157a8:	2300      	movne	r3, #0
 80157aa:	eba6 0807 	sub.w	r8, r6, r7
 80157ae:	608b      	str	r3, [r1, #8]
 80157b0:	f1b8 0f00 	cmp.w	r8, #0
 80157b4:	dde9      	ble.n	801578a <__sflush_r+0xae>
 80157b6:	6a21      	ldr	r1, [r4, #32]
 80157b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80157ba:	4643      	mov	r3, r8
 80157bc:	463a      	mov	r2, r7
 80157be:	4628      	mov	r0, r5
 80157c0:	47b0      	blx	r6
 80157c2:	2800      	cmp	r0, #0
 80157c4:	dc08      	bgt.n	80157d8 <__sflush_r+0xfc>
 80157c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80157ce:	81a3      	strh	r3, [r4, #12]
 80157d0:	f04f 30ff 	mov.w	r0, #4294967295
 80157d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157d8:	4407      	add	r7, r0
 80157da:	eba8 0800 	sub.w	r8, r8, r0
 80157de:	e7e7      	b.n	80157b0 <__sflush_r+0xd4>
 80157e0:	20400001 	.word	0x20400001

080157e4 <_fflush_r>:
 80157e4:	b538      	push	{r3, r4, r5, lr}
 80157e6:	690b      	ldr	r3, [r1, #16]
 80157e8:	4605      	mov	r5, r0
 80157ea:	460c      	mov	r4, r1
 80157ec:	b913      	cbnz	r3, 80157f4 <_fflush_r+0x10>
 80157ee:	2500      	movs	r5, #0
 80157f0:	4628      	mov	r0, r5
 80157f2:	bd38      	pop	{r3, r4, r5, pc}
 80157f4:	b118      	cbz	r0, 80157fe <_fflush_r+0x1a>
 80157f6:	6a03      	ldr	r3, [r0, #32]
 80157f8:	b90b      	cbnz	r3, 80157fe <_fflush_r+0x1a>
 80157fa:	f7ff fa63 	bl	8014cc4 <__sinit>
 80157fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d0f3      	beq.n	80157ee <_fflush_r+0xa>
 8015806:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015808:	07d0      	lsls	r0, r2, #31
 801580a:	d404      	bmi.n	8015816 <_fflush_r+0x32>
 801580c:	0599      	lsls	r1, r3, #22
 801580e:	d402      	bmi.n	8015816 <_fflush_r+0x32>
 8015810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015812:	f7ff fb66 	bl	8014ee2 <__retarget_lock_acquire_recursive>
 8015816:	4628      	mov	r0, r5
 8015818:	4621      	mov	r1, r4
 801581a:	f7ff ff5f 	bl	80156dc <__sflush_r>
 801581e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015820:	07da      	lsls	r2, r3, #31
 8015822:	4605      	mov	r5, r0
 8015824:	d4e4      	bmi.n	80157f0 <_fflush_r+0xc>
 8015826:	89a3      	ldrh	r3, [r4, #12]
 8015828:	059b      	lsls	r3, r3, #22
 801582a:	d4e1      	bmi.n	80157f0 <_fflush_r+0xc>
 801582c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801582e:	f7ff fb59 	bl	8014ee4 <__retarget_lock_release_recursive>
 8015832:	e7dd      	b.n	80157f0 <_fflush_r+0xc>

08015834 <fiprintf>:
 8015834:	b40e      	push	{r1, r2, r3}
 8015836:	b503      	push	{r0, r1, lr}
 8015838:	4601      	mov	r1, r0
 801583a:	ab03      	add	r3, sp, #12
 801583c:	4805      	ldr	r0, [pc, #20]	@ (8015854 <fiprintf+0x20>)
 801583e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015842:	6800      	ldr	r0, [r0, #0]
 8015844:	9301      	str	r3, [sp, #4]
 8015846:	f7ff fca5 	bl	8015194 <_vfiprintf_r>
 801584a:	b002      	add	sp, #8
 801584c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015850:	b003      	add	sp, #12
 8015852:	4770      	bx	lr
 8015854:	200000d8 	.word	0x200000d8

08015858 <__swbuf_r>:
 8015858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801585a:	460e      	mov	r6, r1
 801585c:	4614      	mov	r4, r2
 801585e:	4605      	mov	r5, r0
 8015860:	b118      	cbz	r0, 801586a <__swbuf_r+0x12>
 8015862:	6a03      	ldr	r3, [r0, #32]
 8015864:	b90b      	cbnz	r3, 801586a <__swbuf_r+0x12>
 8015866:	f7ff fa2d 	bl	8014cc4 <__sinit>
 801586a:	69a3      	ldr	r3, [r4, #24]
 801586c:	60a3      	str	r3, [r4, #8]
 801586e:	89a3      	ldrh	r3, [r4, #12]
 8015870:	071a      	lsls	r2, r3, #28
 8015872:	d501      	bpl.n	8015878 <__swbuf_r+0x20>
 8015874:	6923      	ldr	r3, [r4, #16]
 8015876:	b943      	cbnz	r3, 801588a <__swbuf_r+0x32>
 8015878:	4621      	mov	r1, r4
 801587a:	4628      	mov	r0, r5
 801587c:	f000 f82a 	bl	80158d4 <__swsetup_r>
 8015880:	b118      	cbz	r0, 801588a <__swbuf_r+0x32>
 8015882:	f04f 37ff 	mov.w	r7, #4294967295
 8015886:	4638      	mov	r0, r7
 8015888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801588a:	6823      	ldr	r3, [r4, #0]
 801588c:	6922      	ldr	r2, [r4, #16]
 801588e:	1a98      	subs	r0, r3, r2
 8015890:	6963      	ldr	r3, [r4, #20]
 8015892:	b2f6      	uxtb	r6, r6
 8015894:	4283      	cmp	r3, r0
 8015896:	4637      	mov	r7, r6
 8015898:	dc05      	bgt.n	80158a6 <__swbuf_r+0x4e>
 801589a:	4621      	mov	r1, r4
 801589c:	4628      	mov	r0, r5
 801589e:	f7ff ffa1 	bl	80157e4 <_fflush_r>
 80158a2:	2800      	cmp	r0, #0
 80158a4:	d1ed      	bne.n	8015882 <__swbuf_r+0x2a>
 80158a6:	68a3      	ldr	r3, [r4, #8]
 80158a8:	3b01      	subs	r3, #1
 80158aa:	60a3      	str	r3, [r4, #8]
 80158ac:	6823      	ldr	r3, [r4, #0]
 80158ae:	1c5a      	adds	r2, r3, #1
 80158b0:	6022      	str	r2, [r4, #0]
 80158b2:	701e      	strb	r6, [r3, #0]
 80158b4:	6962      	ldr	r2, [r4, #20]
 80158b6:	1c43      	adds	r3, r0, #1
 80158b8:	429a      	cmp	r2, r3
 80158ba:	d004      	beq.n	80158c6 <__swbuf_r+0x6e>
 80158bc:	89a3      	ldrh	r3, [r4, #12]
 80158be:	07db      	lsls	r3, r3, #31
 80158c0:	d5e1      	bpl.n	8015886 <__swbuf_r+0x2e>
 80158c2:	2e0a      	cmp	r6, #10
 80158c4:	d1df      	bne.n	8015886 <__swbuf_r+0x2e>
 80158c6:	4621      	mov	r1, r4
 80158c8:	4628      	mov	r0, r5
 80158ca:	f7ff ff8b 	bl	80157e4 <_fflush_r>
 80158ce:	2800      	cmp	r0, #0
 80158d0:	d0d9      	beq.n	8015886 <__swbuf_r+0x2e>
 80158d2:	e7d6      	b.n	8015882 <__swbuf_r+0x2a>

080158d4 <__swsetup_r>:
 80158d4:	b538      	push	{r3, r4, r5, lr}
 80158d6:	4b29      	ldr	r3, [pc, #164]	@ (801597c <__swsetup_r+0xa8>)
 80158d8:	4605      	mov	r5, r0
 80158da:	6818      	ldr	r0, [r3, #0]
 80158dc:	460c      	mov	r4, r1
 80158de:	b118      	cbz	r0, 80158e8 <__swsetup_r+0x14>
 80158e0:	6a03      	ldr	r3, [r0, #32]
 80158e2:	b90b      	cbnz	r3, 80158e8 <__swsetup_r+0x14>
 80158e4:	f7ff f9ee 	bl	8014cc4 <__sinit>
 80158e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158ec:	0719      	lsls	r1, r3, #28
 80158ee:	d422      	bmi.n	8015936 <__swsetup_r+0x62>
 80158f0:	06da      	lsls	r2, r3, #27
 80158f2:	d407      	bmi.n	8015904 <__swsetup_r+0x30>
 80158f4:	2209      	movs	r2, #9
 80158f6:	602a      	str	r2, [r5, #0]
 80158f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80158fc:	81a3      	strh	r3, [r4, #12]
 80158fe:	f04f 30ff 	mov.w	r0, #4294967295
 8015902:	e033      	b.n	801596c <__swsetup_r+0x98>
 8015904:	0758      	lsls	r0, r3, #29
 8015906:	d512      	bpl.n	801592e <__swsetup_r+0x5a>
 8015908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801590a:	b141      	cbz	r1, 801591e <__swsetup_r+0x4a>
 801590c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015910:	4299      	cmp	r1, r3
 8015912:	d002      	beq.n	801591a <__swsetup_r+0x46>
 8015914:	4628      	mov	r0, r5
 8015916:	f7ff fb13 	bl	8014f40 <_free_r>
 801591a:	2300      	movs	r3, #0
 801591c:	6363      	str	r3, [r4, #52]	@ 0x34
 801591e:	89a3      	ldrh	r3, [r4, #12]
 8015920:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015924:	81a3      	strh	r3, [r4, #12]
 8015926:	2300      	movs	r3, #0
 8015928:	6063      	str	r3, [r4, #4]
 801592a:	6923      	ldr	r3, [r4, #16]
 801592c:	6023      	str	r3, [r4, #0]
 801592e:	89a3      	ldrh	r3, [r4, #12]
 8015930:	f043 0308 	orr.w	r3, r3, #8
 8015934:	81a3      	strh	r3, [r4, #12]
 8015936:	6923      	ldr	r3, [r4, #16]
 8015938:	b94b      	cbnz	r3, 801594e <__swsetup_r+0x7a>
 801593a:	89a3      	ldrh	r3, [r4, #12]
 801593c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015944:	d003      	beq.n	801594e <__swsetup_r+0x7a>
 8015946:	4621      	mov	r1, r4
 8015948:	4628      	mov	r0, r5
 801594a:	f000 f856 	bl	80159fa <__smakebuf_r>
 801594e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015952:	f013 0201 	ands.w	r2, r3, #1
 8015956:	d00a      	beq.n	801596e <__swsetup_r+0x9a>
 8015958:	2200      	movs	r2, #0
 801595a:	60a2      	str	r2, [r4, #8]
 801595c:	6962      	ldr	r2, [r4, #20]
 801595e:	4252      	negs	r2, r2
 8015960:	61a2      	str	r2, [r4, #24]
 8015962:	6922      	ldr	r2, [r4, #16]
 8015964:	b942      	cbnz	r2, 8015978 <__swsetup_r+0xa4>
 8015966:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801596a:	d1c5      	bne.n	80158f8 <__swsetup_r+0x24>
 801596c:	bd38      	pop	{r3, r4, r5, pc}
 801596e:	0799      	lsls	r1, r3, #30
 8015970:	bf58      	it	pl
 8015972:	6962      	ldrpl	r2, [r4, #20]
 8015974:	60a2      	str	r2, [r4, #8]
 8015976:	e7f4      	b.n	8015962 <__swsetup_r+0x8e>
 8015978:	2000      	movs	r0, #0
 801597a:	e7f7      	b.n	801596c <__swsetup_r+0x98>
 801597c:	200000d8 	.word	0x200000d8

08015980 <_sbrk_r>:
 8015980:	b538      	push	{r3, r4, r5, lr}
 8015982:	4d06      	ldr	r5, [pc, #24]	@ (801599c <_sbrk_r+0x1c>)
 8015984:	2300      	movs	r3, #0
 8015986:	4604      	mov	r4, r0
 8015988:	4608      	mov	r0, r1
 801598a:	602b      	str	r3, [r5, #0]
 801598c:	f7ec ff84 	bl	8002898 <_sbrk>
 8015990:	1c43      	adds	r3, r0, #1
 8015992:	d102      	bne.n	801599a <_sbrk_r+0x1a>
 8015994:	682b      	ldr	r3, [r5, #0]
 8015996:	b103      	cbz	r3, 801599a <_sbrk_r+0x1a>
 8015998:	6023      	str	r3, [r4, #0]
 801599a:	bd38      	pop	{r3, r4, r5, pc}
 801599c:	2000b4fc 	.word	0x2000b4fc

080159a0 <abort>:
 80159a0:	b508      	push	{r3, lr}
 80159a2:	2006      	movs	r0, #6
 80159a4:	f000 f88e 	bl	8015ac4 <raise>
 80159a8:	2001      	movs	r0, #1
 80159aa:	f7ec fefd 	bl	80027a8 <_exit>

080159ae <__swhatbuf_r>:
 80159ae:	b570      	push	{r4, r5, r6, lr}
 80159b0:	460c      	mov	r4, r1
 80159b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159b6:	2900      	cmp	r1, #0
 80159b8:	b096      	sub	sp, #88	@ 0x58
 80159ba:	4615      	mov	r5, r2
 80159bc:	461e      	mov	r6, r3
 80159be:	da0d      	bge.n	80159dc <__swhatbuf_r+0x2e>
 80159c0:	89a3      	ldrh	r3, [r4, #12]
 80159c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80159c6:	f04f 0100 	mov.w	r1, #0
 80159ca:	bf14      	ite	ne
 80159cc:	2340      	movne	r3, #64	@ 0x40
 80159ce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80159d2:	2000      	movs	r0, #0
 80159d4:	6031      	str	r1, [r6, #0]
 80159d6:	602b      	str	r3, [r5, #0]
 80159d8:	b016      	add	sp, #88	@ 0x58
 80159da:	bd70      	pop	{r4, r5, r6, pc}
 80159dc:	466a      	mov	r2, sp
 80159de:	f000 f879 	bl	8015ad4 <_fstat_r>
 80159e2:	2800      	cmp	r0, #0
 80159e4:	dbec      	blt.n	80159c0 <__swhatbuf_r+0x12>
 80159e6:	9901      	ldr	r1, [sp, #4]
 80159e8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80159ec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80159f0:	4259      	negs	r1, r3
 80159f2:	4159      	adcs	r1, r3
 80159f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80159f8:	e7eb      	b.n	80159d2 <__swhatbuf_r+0x24>

080159fa <__smakebuf_r>:
 80159fa:	898b      	ldrh	r3, [r1, #12]
 80159fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80159fe:	079d      	lsls	r5, r3, #30
 8015a00:	4606      	mov	r6, r0
 8015a02:	460c      	mov	r4, r1
 8015a04:	d507      	bpl.n	8015a16 <__smakebuf_r+0x1c>
 8015a06:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015a0a:	6023      	str	r3, [r4, #0]
 8015a0c:	6123      	str	r3, [r4, #16]
 8015a0e:	2301      	movs	r3, #1
 8015a10:	6163      	str	r3, [r4, #20]
 8015a12:	b003      	add	sp, #12
 8015a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a16:	ab01      	add	r3, sp, #4
 8015a18:	466a      	mov	r2, sp
 8015a1a:	f7ff ffc8 	bl	80159ae <__swhatbuf_r>
 8015a1e:	9f00      	ldr	r7, [sp, #0]
 8015a20:	4605      	mov	r5, r0
 8015a22:	4639      	mov	r1, r7
 8015a24:	4630      	mov	r0, r6
 8015a26:	f7ff faff 	bl	8015028 <_malloc_r>
 8015a2a:	b948      	cbnz	r0, 8015a40 <__smakebuf_r+0x46>
 8015a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a30:	059a      	lsls	r2, r3, #22
 8015a32:	d4ee      	bmi.n	8015a12 <__smakebuf_r+0x18>
 8015a34:	f023 0303 	bic.w	r3, r3, #3
 8015a38:	f043 0302 	orr.w	r3, r3, #2
 8015a3c:	81a3      	strh	r3, [r4, #12]
 8015a3e:	e7e2      	b.n	8015a06 <__smakebuf_r+0xc>
 8015a40:	89a3      	ldrh	r3, [r4, #12]
 8015a42:	6020      	str	r0, [r4, #0]
 8015a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015a48:	81a3      	strh	r3, [r4, #12]
 8015a4a:	9b01      	ldr	r3, [sp, #4]
 8015a4c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015a50:	b15b      	cbz	r3, 8015a6a <__smakebuf_r+0x70>
 8015a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a56:	4630      	mov	r0, r6
 8015a58:	f000 f84e 	bl	8015af8 <_isatty_r>
 8015a5c:	b128      	cbz	r0, 8015a6a <__smakebuf_r+0x70>
 8015a5e:	89a3      	ldrh	r3, [r4, #12]
 8015a60:	f023 0303 	bic.w	r3, r3, #3
 8015a64:	f043 0301 	orr.w	r3, r3, #1
 8015a68:	81a3      	strh	r3, [r4, #12]
 8015a6a:	89a3      	ldrh	r3, [r4, #12]
 8015a6c:	431d      	orrs	r5, r3
 8015a6e:	81a5      	strh	r5, [r4, #12]
 8015a70:	e7cf      	b.n	8015a12 <__smakebuf_r+0x18>

08015a72 <_raise_r>:
 8015a72:	291f      	cmp	r1, #31
 8015a74:	b538      	push	{r3, r4, r5, lr}
 8015a76:	4605      	mov	r5, r0
 8015a78:	460c      	mov	r4, r1
 8015a7a:	d904      	bls.n	8015a86 <_raise_r+0x14>
 8015a7c:	2316      	movs	r3, #22
 8015a7e:	6003      	str	r3, [r0, #0]
 8015a80:	f04f 30ff 	mov.w	r0, #4294967295
 8015a84:	bd38      	pop	{r3, r4, r5, pc}
 8015a86:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015a88:	b112      	cbz	r2, 8015a90 <_raise_r+0x1e>
 8015a8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015a8e:	b94b      	cbnz	r3, 8015aa4 <_raise_r+0x32>
 8015a90:	4628      	mov	r0, r5
 8015a92:	f000 f853 	bl	8015b3c <_getpid_r>
 8015a96:	4622      	mov	r2, r4
 8015a98:	4601      	mov	r1, r0
 8015a9a:	4628      	mov	r0, r5
 8015a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015aa0:	f000 b83a 	b.w	8015b18 <_kill_r>
 8015aa4:	2b01      	cmp	r3, #1
 8015aa6:	d00a      	beq.n	8015abe <_raise_r+0x4c>
 8015aa8:	1c59      	adds	r1, r3, #1
 8015aaa:	d103      	bne.n	8015ab4 <_raise_r+0x42>
 8015aac:	2316      	movs	r3, #22
 8015aae:	6003      	str	r3, [r0, #0]
 8015ab0:	2001      	movs	r0, #1
 8015ab2:	e7e7      	b.n	8015a84 <_raise_r+0x12>
 8015ab4:	2100      	movs	r1, #0
 8015ab6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015aba:	4620      	mov	r0, r4
 8015abc:	4798      	blx	r3
 8015abe:	2000      	movs	r0, #0
 8015ac0:	e7e0      	b.n	8015a84 <_raise_r+0x12>
	...

08015ac4 <raise>:
 8015ac4:	4b02      	ldr	r3, [pc, #8]	@ (8015ad0 <raise+0xc>)
 8015ac6:	4601      	mov	r1, r0
 8015ac8:	6818      	ldr	r0, [r3, #0]
 8015aca:	f7ff bfd2 	b.w	8015a72 <_raise_r>
 8015ace:	bf00      	nop
 8015ad0:	200000d8 	.word	0x200000d8

08015ad4 <_fstat_r>:
 8015ad4:	b538      	push	{r3, r4, r5, lr}
 8015ad6:	4d07      	ldr	r5, [pc, #28]	@ (8015af4 <_fstat_r+0x20>)
 8015ad8:	2300      	movs	r3, #0
 8015ada:	4604      	mov	r4, r0
 8015adc:	4608      	mov	r0, r1
 8015ade:	4611      	mov	r1, r2
 8015ae0:	602b      	str	r3, [r5, #0]
 8015ae2:	f7ec feb1 	bl	8002848 <_fstat>
 8015ae6:	1c43      	adds	r3, r0, #1
 8015ae8:	d102      	bne.n	8015af0 <_fstat_r+0x1c>
 8015aea:	682b      	ldr	r3, [r5, #0]
 8015aec:	b103      	cbz	r3, 8015af0 <_fstat_r+0x1c>
 8015aee:	6023      	str	r3, [r4, #0]
 8015af0:	bd38      	pop	{r3, r4, r5, pc}
 8015af2:	bf00      	nop
 8015af4:	2000b4fc 	.word	0x2000b4fc

08015af8 <_isatty_r>:
 8015af8:	b538      	push	{r3, r4, r5, lr}
 8015afa:	4d06      	ldr	r5, [pc, #24]	@ (8015b14 <_isatty_r+0x1c>)
 8015afc:	2300      	movs	r3, #0
 8015afe:	4604      	mov	r4, r0
 8015b00:	4608      	mov	r0, r1
 8015b02:	602b      	str	r3, [r5, #0]
 8015b04:	f7ec feb0 	bl	8002868 <_isatty>
 8015b08:	1c43      	adds	r3, r0, #1
 8015b0a:	d102      	bne.n	8015b12 <_isatty_r+0x1a>
 8015b0c:	682b      	ldr	r3, [r5, #0]
 8015b0e:	b103      	cbz	r3, 8015b12 <_isatty_r+0x1a>
 8015b10:	6023      	str	r3, [r4, #0]
 8015b12:	bd38      	pop	{r3, r4, r5, pc}
 8015b14:	2000b4fc 	.word	0x2000b4fc

08015b18 <_kill_r>:
 8015b18:	b538      	push	{r3, r4, r5, lr}
 8015b1a:	4d07      	ldr	r5, [pc, #28]	@ (8015b38 <_kill_r+0x20>)
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	4604      	mov	r4, r0
 8015b20:	4608      	mov	r0, r1
 8015b22:	4611      	mov	r1, r2
 8015b24:	602b      	str	r3, [r5, #0]
 8015b26:	f7ec fe2d 	bl	8002784 <_kill>
 8015b2a:	1c43      	adds	r3, r0, #1
 8015b2c:	d102      	bne.n	8015b34 <_kill_r+0x1c>
 8015b2e:	682b      	ldr	r3, [r5, #0]
 8015b30:	b103      	cbz	r3, 8015b34 <_kill_r+0x1c>
 8015b32:	6023      	str	r3, [r4, #0]
 8015b34:	bd38      	pop	{r3, r4, r5, pc}
 8015b36:	bf00      	nop
 8015b38:	2000b4fc 	.word	0x2000b4fc

08015b3c <_getpid_r>:
 8015b3c:	f7ec be1a 	b.w	8002774 <_getpid>

08015b40 <_init>:
 8015b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b42:	bf00      	nop
 8015b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b46:	bc08      	pop	{r3}
 8015b48:	469e      	mov	lr, r3
 8015b4a:	4770      	bx	lr

08015b4c <_fini>:
 8015b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b4e:	bf00      	nop
 8015b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b52:	bc08      	pop	{r3}
 8015b54:	469e      	mov	lr, r3
 8015b56:	4770      	bx	lr


krtmi_boardhijau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000153cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bcc  0801555c  0801555c  0001655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018128  08018128  0001a0f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018128  08018128  00019128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018130  08018130  0001a0f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018130  08018130  00019130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018134  08018134  00019134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f0  20000000  08018138  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001a0f0  2**0
                  CONTENTS
 10 .bss          0000b2c4  200000f0  200000f0  0001a0f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000b3b4  2000b3b4  0001a0f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001a0f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a0a8  00000000  00000000  0001a120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000714c  00000000  00000000  000441c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002178  00000000  00000000  0004b318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001aa4  00000000  00000000  0004d490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033f53  00000000  00000000  0004ef34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038de7  00000000  00000000  00082e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f685b  00000000  00000000  000bbc6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b24c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000934c  00000000  00000000  001b250c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  001bb858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015544 	.word	0x08015544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	08015544 	.word	0x08015544

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b988 	b.w	8000dd4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	468e      	mov	lr, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	4688      	mov	r8, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d962      	bls.n	8000bb8 <__udivmoddi4+0xdc>
 8000af2:	fab2 f682 	clz	r6, r2
 8000af6:	b14e      	cbz	r6, 8000b0c <__udivmoddi4+0x30>
 8000af8:	f1c6 0320 	rsb	r3, r6, #32
 8000afc:	fa01 f806 	lsl.w	r8, r1, r6
 8000b00:	fa20 f303 	lsr.w	r3, r0, r3
 8000b04:	40b7      	lsls	r7, r6
 8000b06:	ea43 0808 	orr.w	r8, r3, r8
 8000b0a:	40b4      	lsls	r4, r6
 8000b0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b10:	fa1f fc87 	uxth.w	ip, r7
 8000b14:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b18:	0c23      	lsrs	r3, r4, #16
 8000b1a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b22:	fb01 f20c 	mul.w	r2, r1, ip
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b30:	f080 80ea 	bcs.w	8000d08 <__udivmoddi4+0x22c>
 8000b34:	429a      	cmp	r2, r3
 8000b36:	f240 80e7 	bls.w	8000d08 <__udivmoddi4+0x22c>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	443b      	add	r3, r7
 8000b3e:	1a9a      	subs	r2, r3, r2
 8000b40:	b2a3      	uxth	r3, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b4e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b52:	459c      	cmp	ip, r3
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0x8e>
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b5c:	f080 80d6 	bcs.w	8000d0c <__udivmoddi4+0x230>
 8000b60:	459c      	cmp	ip, r3
 8000b62:	f240 80d3 	bls.w	8000d0c <__udivmoddi4+0x230>
 8000b66:	443b      	add	r3, r7
 8000b68:	3802      	subs	r0, #2
 8000b6a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b6e:	eba3 030c 	sub.w	r3, r3, ip
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11d      	cbz	r5, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40f3      	lsrs	r3, r6
 8000b78:	2200      	movs	r2, #0
 8000b7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d905      	bls.n	8000b92 <__udivmoddi4+0xb6>
 8000b86:	b10d      	cbz	r5, 8000b8c <__udivmoddi4+0xb0>
 8000b88:	e9c5 0100 	strd	r0, r1, [r5]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e7f5      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000b92:	fab3 f183 	clz	r1, r3
 8000b96:	2900      	cmp	r1, #0
 8000b98:	d146      	bne.n	8000c28 <__udivmoddi4+0x14c>
 8000b9a:	4573      	cmp	r3, lr
 8000b9c:	d302      	bcc.n	8000ba4 <__udivmoddi4+0xc8>
 8000b9e:	4282      	cmp	r2, r0
 8000ba0:	f200 8105 	bhi.w	8000dae <__udivmoddi4+0x2d2>
 8000ba4:	1a84      	subs	r4, r0, r2
 8000ba6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000baa:	2001      	movs	r0, #1
 8000bac:	4690      	mov	r8, r2
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	d0e5      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb2:	e9c5 4800 	strd	r4, r8, [r5]
 8000bb6:	e7e2      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f000 8090 	beq.w	8000cde <__udivmoddi4+0x202>
 8000bbe:	fab2 f682 	clz	r6, r2
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	f040 80a4 	bne.w	8000d10 <__udivmoddi4+0x234>
 8000bc8:	1a8a      	subs	r2, r1, r2
 8000bca:	0c03      	lsrs	r3, r0, #16
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	b280      	uxth	r0, r0
 8000bd2:	b2bc      	uxth	r4, r7
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bda:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000be2:	fb04 f20c 	mul.w	r2, r4, ip
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d907      	bls.n	8000bfa <__udivmoddi4+0x11e>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x11c>
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	f200 80e0 	bhi.w	8000db8 <__udivmoddi4+0x2dc>
 8000bf8:	46c4      	mov	ip, r8
 8000bfa:	1a9b      	subs	r3, r3, r2
 8000bfc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c00:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c04:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c08:	fb02 f404 	mul.w	r4, r2, r4
 8000c0c:	429c      	cmp	r4, r3
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x144>
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x142>
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	f200 80ca 	bhi.w	8000db2 <__udivmoddi4+0x2d6>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	1b1b      	subs	r3, r3, r4
 8000c22:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c26:	e7a5      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c28:	f1c1 0620 	rsb	r6, r1, #32
 8000c2c:	408b      	lsls	r3, r1
 8000c2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c32:	431f      	orrs	r7, r3
 8000c34:	fa0e f401 	lsl.w	r4, lr, r1
 8000c38:	fa20 f306 	lsr.w	r3, r0, r6
 8000c3c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c40:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c44:	4323      	orrs	r3, r4
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	fa1f fc87 	uxth.w	ip, r7
 8000c4e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c52:	0c1c      	lsrs	r4, r3, #16
 8000c54:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c58:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c5c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	fa02 f201 	lsl.w	r2, r2, r1
 8000c66:	d909      	bls.n	8000c7c <__udivmoddi4+0x1a0>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c6e:	f080 809c 	bcs.w	8000daa <__udivmoddi4+0x2ce>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f240 8099 	bls.w	8000daa <__udivmoddi4+0x2ce>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	443c      	add	r4, r7
 8000c7c:	eba4 040e 	sub.w	r4, r4, lr
 8000c80:	fa1f fe83 	uxth.w	lr, r3
 8000c84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c88:	fb09 4413 	mls	r4, r9, r3, r4
 8000c8c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c90:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c94:	45a4      	cmp	ip, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x1ce>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c9e:	f080 8082 	bcs.w	8000da6 <__udivmoddi4+0x2ca>
 8000ca2:	45a4      	cmp	ip, r4
 8000ca4:	d97f      	bls.n	8000da6 <__udivmoddi4+0x2ca>
 8000ca6:	3b02      	subs	r3, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cb6:	4564      	cmp	r4, ip
 8000cb8:	4673      	mov	r3, lr
 8000cba:	46e1      	mov	r9, ip
 8000cbc:	d362      	bcc.n	8000d84 <__udivmoddi4+0x2a8>
 8000cbe:	d05f      	beq.n	8000d80 <__udivmoddi4+0x2a4>
 8000cc0:	b15d      	cbz	r5, 8000cda <__udivmoddi4+0x1fe>
 8000cc2:	ebb8 0203 	subs.w	r2, r8, r3
 8000cc6:	eb64 0409 	sbc.w	r4, r4, r9
 8000cca:	fa04 f606 	lsl.w	r6, r4, r6
 8000cce:	fa22 f301 	lsr.w	r3, r2, r1
 8000cd2:	431e      	orrs	r6, r3
 8000cd4:	40cc      	lsrs	r4, r1
 8000cd6:	e9c5 6400 	strd	r6, r4, [r5]
 8000cda:	2100      	movs	r1, #0
 8000cdc:	e74f      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000cde:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ce2:	0c01      	lsrs	r1, r0, #16
 8000ce4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ce8:	b280      	uxth	r0, r0
 8000cea:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4638      	mov	r0, r7
 8000cf2:	463c      	mov	r4, r7
 8000cf4:	46b8      	mov	r8, r7
 8000cf6:	46be      	mov	lr, r7
 8000cf8:	2620      	movs	r6, #32
 8000cfa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cfe:	eba2 0208 	sub.w	r2, r2, r8
 8000d02:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d06:	e766      	b.n	8000bd6 <__udivmoddi4+0xfa>
 8000d08:	4601      	mov	r1, r0
 8000d0a:	e718      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	e72c      	b.n	8000b6a <__udivmoddi4+0x8e>
 8000d10:	f1c6 0220 	rsb	r2, r6, #32
 8000d14:	fa2e f302 	lsr.w	r3, lr, r2
 8000d18:	40b7      	lsls	r7, r6
 8000d1a:	40b1      	lsls	r1, r6
 8000d1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d24:	430a      	orrs	r2, r1
 8000d26:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d2a:	b2bc      	uxth	r4, r7
 8000d2c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d30:	0c11      	lsrs	r1, r2, #16
 8000d32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d36:	fb08 f904 	mul.w	r9, r8, r4
 8000d3a:	40b0      	lsls	r0, r6
 8000d3c:	4589      	cmp	r9, r1
 8000d3e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d42:	b280      	uxth	r0, r0
 8000d44:	d93e      	bls.n	8000dc4 <__udivmoddi4+0x2e8>
 8000d46:	1879      	adds	r1, r7, r1
 8000d48:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d4c:	d201      	bcs.n	8000d52 <__udivmoddi4+0x276>
 8000d4e:	4589      	cmp	r9, r1
 8000d50:	d81f      	bhi.n	8000d92 <__udivmoddi4+0x2b6>
 8000d52:	eba1 0109 	sub.w	r1, r1, r9
 8000d56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d5a:	fb09 f804 	mul.w	r8, r9, r4
 8000d5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d62:	b292      	uxth	r2, r2
 8000d64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d68:	4542      	cmp	r2, r8
 8000d6a:	d229      	bcs.n	8000dc0 <__udivmoddi4+0x2e4>
 8000d6c:	18ba      	adds	r2, r7, r2
 8000d6e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d72:	d2c4      	bcs.n	8000cfe <__udivmoddi4+0x222>
 8000d74:	4542      	cmp	r2, r8
 8000d76:	d2c2      	bcs.n	8000cfe <__udivmoddi4+0x222>
 8000d78:	f1a9 0102 	sub.w	r1, r9, #2
 8000d7c:	443a      	add	r2, r7
 8000d7e:	e7be      	b.n	8000cfe <__udivmoddi4+0x222>
 8000d80:	45f0      	cmp	r8, lr
 8000d82:	d29d      	bcs.n	8000cc0 <__udivmoddi4+0x1e4>
 8000d84:	ebbe 0302 	subs.w	r3, lr, r2
 8000d88:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	46e1      	mov	r9, ip
 8000d90:	e796      	b.n	8000cc0 <__udivmoddi4+0x1e4>
 8000d92:	eba7 0909 	sub.w	r9, r7, r9
 8000d96:	4449      	add	r1, r9
 8000d98:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d9c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000da0:	fb09 f804 	mul.w	r8, r9, r4
 8000da4:	e7db      	b.n	8000d5e <__udivmoddi4+0x282>
 8000da6:	4673      	mov	r3, lr
 8000da8:	e77f      	b.n	8000caa <__udivmoddi4+0x1ce>
 8000daa:	4650      	mov	r0, sl
 8000dac:	e766      	b.n	8000c7c <__udivmoddi4+0x1a0>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e6fd      	b.n	8000bae <__udivmoddi4+0xd2>
 8000db2:	443b      	add	r3, r7
 8000db4:	3a02      	subs	r2, #2
 8000db6:	e733      	b.n	8000c20 <__udivmoddi4+0x144>
 8000db8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dbc:	443b      	add	r3, r7
 8000dbe:	e71c      	b.n	8000bfa <__udivmoddi4+0x11e>
 8000dc0:	4649      	mov	r1, r9
 8000dc2:	e79c      	b.n	8000cfe <__udivmoddi4+0x222>
 8000dc4:	eba1 0109 	sub.w	r1, r1, r9
 8000dc8:	46c4      	mov	ip, r8
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fb09 f804 	mul.w	r8, r9, r4
 8000dd2:	e7c4      	b.n	8000d5e <__udivmoddi4+0x282>

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dea:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <MX_ADC1_Init+0x98>)
 8000dec:	4a21      	ldr	r2, [pc, #132]	@ (8000e74 <MX_ADC1_Init+0x9c>)
 8000dee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e70 <MX_ADC1_Init+0x98>)
 8000df2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000df6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000df8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <MX_ADC1_Init+0x98>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <MX_ADC1_Init+0x98>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <MX_ADC1_Init+0x98>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <MX_ADC1_Init+0x98>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e12:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <MX_ADC1_Init+0x98>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e18:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <MX_ADC1_Init+0x98>)
 8000e1a:	4a17      	ldr	r2, [pc, #92]	@ (8000e78 <MX_ADC1_Init+0xa0>)
 8000e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <MX_ADC1_Init+0x98>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <MX_ADC1_Init+0x98>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <MX_ADC1_Init+0x98>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <MX_ADC1_Init+0x98>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e38:	480d      	ldr	r0, [pc, #52]	@ (8000e70 <MX_ADC1_Init+0x98>)
 8000e3a:	f003 fa67 	bl	800430c <HAL_ADC_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e44:	f000 fc4a 	bl	80016dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_ADC1_Init+0x98>)
 8000e5a:	f003 fa9b 	bl	8004394 <HAL_ADC_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e64:	f000 fc3a 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	2000010c 	.word	0x2000010c
 8000e74:	40012000 	.word	0x40012000
 8000e78:	0f000001 	.word	0x0f000001

08000e7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08c      	sub	sp, #48	@ 0x30
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a31      	ldr	r2, [pc, #196]	@ (8000f60 <HAL_ADC_MspInit+0xe4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d15b      	bne.n	8000f56 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	4b30      	ldr	r3, [pc, #192]	@ (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea6:	4a2f      	ldr	r2, [pc, #188]	@ (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eae:	4b2d      	ldr	r3, [pc, #180]	@ (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eb6:	61bb      	str	r3, [r7, #24]
 8000eb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	4b29      	ldr	r3, [pc, #164]	@ (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a28      	ldr	r2, [pc, #160]	@ (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b26      	ldr	r3, [pc, #152]	@ (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b22      	ldr	r3, [pc, #136]	@ (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a21      	ldr	r2, [pc, #132]	@ (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a1a      	ldr	r2, [pc, #104]	@ (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000f0e:	230d      	movs	r3, #13
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f12:	2303      	movs	r3, #3
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4811      	ldr	r0, [pc, #68]	@ (8000f68 <HAL_ADC_MspInit+0xec>)
 8000f22:	f005 fba5 	bl	8006670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f26:	2330      	movs	r3, #48	@ 0x30
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <HAL_ADC_MspInit+0xf0>)
 8000f3a:	f005 fb99 	bl	8006670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f42:	2303      	movs	r3, #3
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4807      	ldr	r0, [pc, #28]	@ (8000f70 <HAL_ADC_MspInit+0xf4>)
 8000f52:	f005 fb8d 	bl	8006670 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f56:	bf00      	nop
 8000f58:	3730      	adds	r7, #48	@ 0x30
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40012000 	.word	0x40012000
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020400 	.word	0x40020400

08000f74 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f78:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_CAN1_Init+0x60>)
 8000f7a:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <MX_CAN1_Init+0x64>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <MX_CAN1_Init+0x60>)
 8000f80:	2210      	movs	r2, #16
 8000f82:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f84:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <MX_CAN1_Init+0x60>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f8a:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_CAN1_Init+0x60>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f90:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <MX_CAN1_Init+0x60>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_CAN1_Init+0x60>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <MX_CAN1_Init+0x60>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_CAN1_Init+0x60>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <MX_CAN1_Init+0x60>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_CAN1_Init+0x60>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <MX_CAN1_Init+0x60>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_CAN1_Init+0x60>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <MX_CAN1_Init+0x60>)
 8000fc2:	f003 fc05 	bl	80047d0 <HAL_CAN_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000fcc:	f000 fb86 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000154 	.word	0x20000154
 8000fd8:	40006400 	.word	0x40006400

08000fdc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	@ 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a19      	ldr	r2, [pc, #100]	@ (8001060 <HAL_CAN_MspInit+0x84>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12c      	bne.n	8001058 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <HAL_CAN_MspInit+0x88>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	4a17      	ldr	r2, [pc, #92]	@ (8001064 <HAL_CAN_MspInit+0x88>)
 8001008:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800100c:	6413      	str	r3, [r2, #64]	@ 0x40
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <HAL_CAN_MspInit+0x88>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <HAL_CAN_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a10      	ldr	r2, [pc, #64]	@ (8001064 <HAL_CAN_MspInit+0x88>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <HAL_CAN_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001036:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001048:	2309      	movs	r3, #9
 800104a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <HAL_CAN_MspInit+0x8c>)
 8001054:	f005 fb0c 	bl	8006670 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	@ 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40006400 	.word	0x40006400
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000

0800106c <Controller_Drift>:
 */

#include "controller.h"

int8_t Controller_Drift(int8_t value, int8_t max)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
	if(abs(value) < max)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	bfb8      	it	lt
 8001084:	425b      	neglt	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800108e:	429a      	cmp	r2, r3
 8001090:	da01      	bge.n	8001096 <Controller_Drift+0x2a>
	{
		return 0;
 8001092:	2300      	movs	r3, #0
 8001094:	e00e      	b.n	80010b4 <Controller_Drift+0x48>
	}
	else if(value > 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	dd05      	ble.n	80010aa <Controller_Drift+0x3e>
	{
		return value - max;
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	e004      	b.n	80010b4 <Controller_Drift+0x48>
	}
	else
	{
		return value + max;
 80010aa:	79fa      	ldrb	r2, [r7, #7]
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	4413      	add	r3, r2
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	b25b      	sxtb	r3, r3
	}
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <map>:

int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	69b9      	ldr	r1, [r7, #24]
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	1a8a      	subs	r2, r1, r2
 80010da:	fb03 f202 	mul.w	r2, r3, r2
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1acb      	subs	r3, r1, r3
 80010e4:	fb92 f2f3 	sdiv	r2, r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	4413      	add	r3, r2
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b37      	ldr	r3, [pc, #220]	@ (80011e0 <MX_DMA_Init+0xe8>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a36      	ldr	r2, [pc, #216]	@ (80011e0 <MX_DMA_Init+0xe8>)
 8001108:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b34      	ldr	r3, [pc, #208]	@ (80011e0 <MX_DMA_Init+0xe8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b30      	ldr	r3, [pc, #192]	@ (80011e0 <MX_DMA_Init+0xe8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a2f      	ldr	r2, [pc, #188]	@ (80011e0 <MX_DMA_Init+0xe8>)
 8001124:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b2d      	ldr	r3, [pc, #180]	@ (80011e0 <MX_DMA_Init+0xe8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	200b      	movs	r0, #11
 800113c:	f003 fd1f 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001140:	200b      	movs	r0, #11
 8001142:	f003 fd38 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	200c      	movs	r0, #12
 800114c:	f003 fd17 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001150:	200c      	movs	r0, #12
 8001152:	f003 fd30 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	200d      	movs	r0, #13
 800115c:	f003 fd0f 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001160:	200d      	movs	r0, #13
 8001162:	f003 fd28 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	200e      	movs	r0, #14
 800116c:	f003 fd07 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001170:	200e      	movs	r0, #14
 8001172:	f003 fd20 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	200f      	movs	r0, #15
 800117c:	f003 fcff 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001180:	200f      	movs	r0, #15
 8001182:	f003 fd18 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	2010      	movs	r0, #16
 800118c:	f003 fcf7 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001190:	2010      	movs	r0, #16
 8001192:	f003 fd10 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2011      	movs	r0, #17
 800119c:	f003 fcef 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80011a0:	2011      	movs	r0, #17
 80011a2:	f003 fd08 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	202f      	movs	r0, #47	@ 0x2f
 80011ac:	f003 fce7 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80011b0:	202f      	movs	r0, #47	@ 0x2f
 80011b2:	f003 fd00 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2039      	movs	r0, #57	@ 0x39
 80011bc:	f003 fcdf 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80011c0:	2039      	movs	r0, #57	@ 0x39
 80011c2:	f003 fcf8 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	2045      	movs	r0, #69	@ 0x45
 80011cc:	f003 fcd7 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80011d0:	2045      	movs	r0, #69	@ 0x45
 80011d2:	f003 fcf0 	bl	8004bb6 <HAL_NVIC_EnableIRQ>

}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800

080011e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08c      	sub	sp, #48	@ 0x30
 80011e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	4b50      	ldr	r3, [pc, #320]	@ (8001340 <MX_GPIO_Init+0x15c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a4f      	ldr	r2, [pc, #316]	@ (8001340 <MX_GPIO_Init+0x15c>)
 8001204:	f043 0310 	orr.w	r3, r3, #16
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b4d      	ldr	r3, [pc, #308]	@ (8001340 <MX_GPIO_Init+0x15c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	4b49      	ldr	r3, [pc, #292]	@ (8001340 <MX_GPIO_Init+0x15c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a48      	ldr	r2, [pc, #288]	@ (8001340 <MX_GPIO_Init+0x15c>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b46      	ldr	r3, [pc, #280]	@ (8001340 <MX_GPIO_Init+0x15c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b42      	ldr	r3, [pc, #264]	@ (8001340 <MX_GPIO_Init+0x15c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a41      	ldr	r2, [pc, #260]	@ (8001340 <MX_GPIO_Init+0x15c>)
 800123c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b3f      	ldr	r3, [pc, #252]	@ (8001340 <MX_GPIO_Init+0x15c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <MX_GPIO_Init+0x15c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a3a      	ldr	r2, [pc, #232]	@ (8001340 <MX_GPIO_Init+0x15c>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b38      	ldr	r3, [pc, #224]	@ (8001340 <MX_GPIO_Init+0x15c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	4b34      	ldr	r3, [pc, #208]	@ (8001340 <MX_GPIO_Init+0x15c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a33      	ldr	r2, [pc, #204]	@ (8001340 <MX_GPIO_Init+0x15c>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b31      	ldr	r3, [pc, #196]	@ (8001340 <MX_GPIO_Init+0x15c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b2d      	ldr	r3, [pc, #180]	@ (8001340 <MX_GPIO_Init+0x15c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a2c      	ldr	r2, [pc, #176]	@ (8001340 <MX_GPIO_Init+0x15c>)
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b2a      	ldr	r3, [pc, #168]	@ (8001340 <MX_GPIO_Init+0x15c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 80012a2:	2200      	movs	r2, #0
 80012a4:	f247 519f 	movw	r1, #30111	@ 0x759f
 80012a8:	4826      	ldr	r0, [pc, #152]	@ (8001344 <MX_GPIO_Init+0x160>)
 80012aa:	f005 fb7d 	bl	80069a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 80012b4:	4824      	ldr	r0, [pc, #144]	@ (8001348 <MX_GPIO_Init+0x164>)
 80012b6:	f005 fb77 	bl	80069a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 414d 	mov.w	r1, #52480	@ 0xcd00
 80012c0:	4822      	ldr	r0, [pc, #136]	@ (800134c <MX_GPIO_Init+0x168>)
 80012c2:	f005 fb71 	bl	80069a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE7
                           PE8 PE10 PE12 PE13
                           PE14 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 80012c6:	f247 539f 	movw	r3, #30111	@ 0x759f
 80012ca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	4819      	ldr	r0, [pc, #100]	@ (8001344 <MX_GPIO_Init+0x160>)
 80012e0:	f005 f9c6 	bl	8006670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80012e4:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	4812      	ldr	r0, [pc, #72]	@ (8001348 <MX_GPIO_Init+0x164>)
 80012fe:	f005 f9b7 	bl	8006670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 PD11 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8001302:	f44f 434d 	mov.w	r3, #52480	@ 0xcd00
 8001306:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	480c      	ldr	r0, [pc, #48]	@ (800134c <MX_GPIO_Init+0x168>)
 800131c:	f005 f9a8 	bl	8006670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8001320:	239b      	movs	r3, #155	@ 0x9b
 8001322:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001328:	2301      	movs	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	@ (800134c <MX_GPIO_Init+0x168>)
 8001334:	f005 f99c 	bl	8006670 <HAL_GPIO_Init>

}
 8001338:	bf00      	nop
 800133a:	3730      	adds	r7, #48	@ 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	40021000 	.word	0x40021000
 8001348:	40020800 	.word	0x40020800
 800134c:	40020c00 	.word	0x40020c00

08001350 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001356:	4a13      	ldr	r2, [pc, #76]	@ (80013a4 <MX_I2C1_Init+0x54>)
 8001358:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_I2C1_Init+0x50>)
 800135c:	4a12      	ldr	r2, [pc, #72]	@ (80013a8 <MX_I2C1_Init+0x58>)
 800135e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <MX_I2C1_Init+0x50>)
 800136e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001372:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <MX_I2C1_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <MX_I2C1_Init+0x50>)
 800138e:	f005 fb3f 	bl	8006a10 <HAL_I2C_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001398:	f000 f9a0 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000017c 	.word	0x2000017c
 80013a4:	40005400 	.word	0x40005400
 80013a8:	000186a0 	.word	0x000186a0

080013ac <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013b2:	4a13      	ldr	r2, [pc, #76]	@ (8001400 <MX_I2C3_Init+0x54>)
 80013b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013b8:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <MX_I2C3_Init+0x58>)
 80013ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013ce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013dc:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013e8:	4804      	ldr	r0, [pc, #16]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013ea:	f005 fb11 	bl	8006a10 <HAL_I2C_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80013f4:	f000 f972 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200001d0 	.word	0x200001d0
 8001400:	40005c00 	.word	0x40005c00
 8001404:	000186a0 	.word	0x000186a0

08001408 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	@ 0x30
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a42      	ldr	r2, [pc, #264]	@ (8001530 <HAL_I2C_MspInit+0x128>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d12c      	bne.n	8001484 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	4b41      	ldr	r3, [pc, #260]	@ (8001534 <HAL_I2C_MspInit+0x12c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a40      	ldr	r2, [pc, #256]	@ (8001534 <HAL_I2C_MspInit+0x12c>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b3e      	ldr	r3, [pc, #248]	@ (8001534 <HAL_I2C_MspInit+0x12c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001446:	23c0      	movs	r3, #192	@ 0xc0
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800144a:	2312      	movs	r3, #18
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001456:	2304      	movs	r3, #4
 8001458:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	4835      	ldr	r0, [pc, #212]	@ (8001538 <HAL_I2C_MspInit+0x130>)
 8001462:	f005 f905 	bl	8006670 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	4b32      	ldr	r3, [pc, #200]	@ (8001534 <HAL_I2C_MspInit+0x12c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	4a31      	ldr	r2, [pc, #196]	@ (8001534 <HAL_I2C_MspInit+0x12c>)
 8001470:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001474:	6413      	str	r3, [r2, #64]	@ 0x40
 8001476:	4b2f      	ldr	r3, [pc, #188]	@ (8001534 <HAL_I2C_MspInit+0x12c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001482:	e050      	b.n	8001526 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a2c      	ldr	r2, [pc, #176]	@ (800153c <HAL_I2C_MspInit+0x134>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d14b      	bne.n	8001526 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b28      	ldr	r3, [pc, #160]	@ (8001534 <HAL_I2C_MspInit+0x12c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a27      	ldr	r2, [pc, #156]	@ (8001534 <HAL_I2C_MspInit+0x12c>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b25      	ldr	r3, [pc, #148]	@ (8001534 <HAL_I2C_MspInit+0x12c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <HAL_I2C_MspInit+0x12c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a20      	ldr	r2, [pc, #128]	@ (8001534 <HAL_I2C_MspInit+0x12c>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <HAL_I2C_MspInit+0x12c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014cc:	2312      	movs	r3, #18
 80014ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014d8:	2304      	movs	r3, #4
 80014da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4817      	ldr	r0, [pc, #92]	@ (8001540 <HAL_I2C_MspInit+0x138>)
 80014e4:	f005 f8c4 	bl	8006670 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ee:	2312      	movs	r3, #18
 80014f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014fa:	2304      	movs	r3, #4
 80014fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	480f      	ldr	r0, [pc, #60]	@ (8001544 <HAL_I2C_MspInit+0x13c>)
 8001506:	f005 f8b3 	bl	8006670 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <HAL_I2C_MspInit+0x12c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	4a08      	ldr	r2, [pc, #32]	@ (8001534 <HAL_I2C_MspInit+0x12c>)
 8001514:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_I2C_MspInit+0x12c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
}
 8001526:	bf00      	nop
 8001528:	3730      	adds	r7, #48	@ 0x30
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40005400 	.word	0x40005400
 8001534:	40023800 	.word	0x40023800
 8001538:	40020400 	.word	0x40020400
 800153c:	40005c00 	.word	0x40005c00
 8001540:	40020800 	.word	0x40020800
 8001544:	40020000 	.word	0x40020000

08001548 <HAL_TIM_PeriodElapsedCallback>:
float X_ENC_PULSE_CM = 0.0539374325782093;

uint8_t udp_cnt = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

	if(htim == &htim6)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a07      	ldr	r2, [pc, #28]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d107      	bne.n	8001568 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		udp_cnt++;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001562:	701a      	strb	r2, [r3, #0]

		Robot_Loop();
 8001564:	f000 fc5a 	bl	8001e1c <Robot_Loop>
	}
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200005e0 	.word	0x200005e0
 8001574:	20000224 	.word	0x20000224

08001578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157c:	f002 fe30 	bl	80041e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001580:	f000 f842 	bl	8001608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001584:	f7ff fe2e 	bl	80011e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001588:	f7ff fdb6 	bl	80010f8 <MX_DMA_Init>
  MX_ADC1_Init();
 800158c:	f7ff fc24 	bl	8000dd8 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001590:	f7ff fcf0 	bl	8000f74 <MX_CAN1_Init>
  MX_I2C1_Init();
 8001594:	f7ff fedc 	bl	8001350 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001598:	f7ff ff08 	bl	80013ac <MX_I2C3_Init>
  MX_TIM1_Init();
 800159c:	f000 fffc 	bl	8002598 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015a0:	f001 f852 	bl	8002648 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015a4:	f001 f8a4 	bl	80026f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80015a8:	f001 f8f6 	bl	8002798 <MX_TIM4_Init>
  MX_TIM5_Init();
 80015ac:	f001 f948 	bl	8002840 <MX_TIM5_Init>
  MX_TIM8_Init();
 80015b0:	f001 f9e0 	bl	8002974 <MX_TIM8_Init>
  MX_TIM9_Init();
 80015b4:	f001 fa62 	bl	8002a7c <MX_TIM9_Init>
  MX_TIM10_Init();
 80015b8:	f001 fab0 	bl	8002b1c <MX_TIM10_Init>
  MX_TIM11_Init();
 80015bc:	f001 fafc 	bl	8002bb8 <MX_TIM11_Init>
  MX_TIM12_Init();
 80015c0:	f001 fb48 	bl	8002c54 <MX_TIM12_Init>
  MX_TIM13_Init();
 80015c4:	f001 fb96 	bl	8002cf4 <MX_TIM13_Init>
  MX_UART4_Init();
 80015c8:	f002 f81e 	bl	8003608 <MX_UART4_Init>
  MX_UART5_Init();
 80015cc:	f002 f846 	bl	800365c <MX_UART5_Init>
  MX_TIM6_Init();
 80015d0:	f001 f99a 	bl	8002908 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80015d4:	f002 f896 	bl	8003704 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80015d8:	f002 f86a 	bl	80036b0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80015dc:	f002 f8bc 	bl	8003758 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80015e0:	f002 f8e4 	bl	80037ac <MX_USART6_UART_Init>
  MX_LWIP_Init();
 80015e4:	f008 f9e6 	bl	80099b4 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  Robot_Init();
 80015e8:	f000 fa4c 	bl	8001a84 <Robot_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(udp_cnt >= 1)
 80015ec:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <main+0x8c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0fb      	beq.n	80015ec <main+0x74>
	  {
		  MX_LWIP_Process();
 80015f4:	f008 fb1e 	bl	8009c34 <MX_LWIP_Process>
		  udpClient_send();
 80015f8:	f001 ffaa 	bl	8003550 <udpClient_send>
		  udp_cnt = 0;
 80015fc:	4b01      	ldr	r3, [pc, #4]	@ (8001604 <main+0x8c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
	  if(udp_cnt >= 1)
 8001602:	e7f3      	b.n	80015ec <main+0x74>
 8001604:	20000224 	.word	0x20000224

08001608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b094      	sub	sp, #80	@ 0x50
 800160c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160e:	f107 0320 	add.w	r3, r7, #32
 8001612:	2230      	movs	r2, #48	@ 0x30
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f013 f8f1 	bl	80147fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	4b28      	ldr	r3, [pc, #160]	@ (80016d4 <SystemClock_Config+0xcc>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	4a27      	ldr	r2, [pc, #156]	@ (80016d4 <SystemClock_Config+0xcc>)
 8001636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163a:	6413      	str	r3, [r2, #64]	@ 0x40
 800163c:	4b25      	ldr	r3, [pc, #148]	@ (80016d4 <SystemClock_Config+0xcc>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	4b22      	ldr	r3, [pc, #136]	@ (80016d8 <SystemClock_Config+0xd0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a21      	ldr	r2, [pc, #132]	@ (80016d8 <SystemClock_Config+0xd0>)
 8001652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b1f      	ldr	r3, [pc, #124]	@ (80016d8 <SystemClock_Config+0xd0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001664:	2301      	movs	r3, #1
 8001666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001668:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166e:	2302      	movs	r3, #2
 8001670:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001672:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001678:	2304      	movs	r3, #4
 800167a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800167c:	23a8      	movs	r3, #168	@ 0xa8
 800167e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001680:	2302      	movs	r3, #2
 8001682:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001684:	2304      	movs	r3, #4
 8001686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001688:	f107 0320 	add.w	r3, r7, #32
 800168c:	4618      	mov	r0, r3
 800168e:	f005 fb03 	bl	8006c98 <HAL_RCC_OscConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001698:	f000 f820 	bl	80016dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169c:	230f      	movs	r3, #15
 800169e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a0:	2302      	movs	r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2105      	movs	r1, #5
 80016ba:	4618      	mov	r0, r3
 80016bc:	f005 fd64 	bl	8007188 <HAL_RCC_ClockConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016c6:	f000 f809 	bl	80016dc <Error_Handler>
  }
}
 80016ca:	bf00      	nop
 80016cc:	3750      	adds	r7, #80	@ 0x50
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40007000 	.word	0x40007000

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <Error_Handler+0x8>

080016e8 <Motor_Init>:
void Motor_Init(Motor_t *uMotor,
               GPIO_TypeDef *GPIO_A, uint16_t GPIO_PIN_A,
               GPIO_TypeDef *GPIO_B, uint16_t GPIO_PIN_B,
               TIM_HandleTypeDef *htimx, uint32_t channel,
               uint8_t reversed)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	4613      	mov	r3, r2
 80016f6:	80fb      	strh	r3, [r7, #6]
	uMotor -> GPIO_A 		= GPIO_A;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	601a      	str	r2, [r3, #0]
	uMotor -> GPIO_PIN_A 	= GPIO_PIN_A;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	88fa      	ldrh	r2, [r7, #6]
 8001702:	809a      	strh	r2, [r3, #4]
	uMotor -> GPIO_B 		= GPIO_B;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	609a      	str	r2, [r3, #8]
	uMotor -> GPIO_PIN_B 	= GPIO_PIN_B;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8b3a      	ldrh	r2, [r7, #24]
 800170e:	819a      	strh	r2, [r3, #12]
	uMotor -> htimx 		= htimx;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	611a      	str	r2, [r3, #16]
	uMotor -> channel 		= channel;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6a3a      	ldr	r2, [r7, #32]
 800171a:	615a      	str	r2, [r3, #20]
	uMotor -> reversed 		= reversed;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001722:	761a      	strb	r2, [r3, #24]

	HAL_TIM_PWM_Start(uMotor->htimx, uMotor->channel);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	691a      	ldr	r2, [r3, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	4619      	mov	r1, r3
 800172e:	4610      	mov	r0, r2
 8001730:	f006 f85a 	bl	80077e8 <HAL_TIM_PWM_Start>

	return;
 8001734:	bf00      	nop
}
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <Motor_Run>:


void Motor_Run(Motor_t *uMotor, int16_t speed)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
    if(uMotor -> reversed)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7e1b      	ldrb	r3, [r3, #24]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <Motor_Run+0x1c>
    {
        speed = -speed;
 8001750:	887b      	ldrh	r3, [r7, #2]
 8001752:	425b      	negs	r3, r3
 8001754:	b29b      	uxth	r3, r3
 8001756:	807b      	strh	r3, [r7, #2]
    }

	uint8_t dir_a = (speed >= 0);
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	43db      	mvns	r3, r3
 800175c:	b29b      	uxth	r3, r3
 800175e:	0bdb      	lsrs	r3, r3, #15
 8001760:	b2db      	uxtb	r3, r3
 8001762:	73fb      	strb	r3, [r7, #15]
	uint8_t dir_b = (speed <  0);
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	0bdb      	lsrs	r3, r3, #15
 8001768:	b2db      	uxtb	r3, r3
 800176a:	73bb      	strb	r3, [r7, #14]
	speed = abs(speed);
 800176c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001770:	2b00      	cmp	r3, #0
 8001772:	bfb8      	it	lt
 8001774:	425b      	neglt	r3, r3
 8001776:	b29b      	uxth	r3, r3
 8001778:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(uMotor -> GPIO_A, uMotor -> GPIO_PIN_A, dir_a);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	889b      	ldrh	r3, [r3, #4]
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	4619      	mov	r1, r3
 8001786:	f005 f90f 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(uMotor -> GPIO_B, uMotor -> GPIO_PIN_B, dir_b);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6898      	ldr	r0, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	899b      	ldrh	r3, [r3, #12]
 8001792:	7bba      	ldrb	r2, [r7, #14]
 8001794:	4619      	mov	r1, r3
 8001796:	f005 f907 	bl	80069a8 <HAL_GPIO_WritePin>

	switch (uMotor->channel)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d838      	bhi.n	8001814 <Motor_Run+0xd8>
 80017a2:	a201      	add	r2, pc, #4	@ (adr r2, 80017a8 <Motor_Run+0x6c>)
 80017a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a8:	080017dd 	.word	0x080017dd
 80017ac:	08001815 	.word	0x08001815
 80017b0:	08001815 	.word	0x08001815
 80017b4:	08001815 	.word	0x08001815
 80017b8:	080017eb 	.word	0x080017eb
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001815 	.word	0x08001815
 80017c4:	08001815 	.word	0x08001815
 80017c8:	080017f9 	.word	0x080017f9
 80017cc:	08001815 	.word	0x08001815
 80017d0:	08001815 	.word	0x08001815
 80017d4:	08001815 	.word	0x08001815
 80017d8:	08001807 	.word	0x08001807
	{
		case TIM_CHANNEL_1:
			uMotor -> htimx -> Instance -> CCR1 = speed;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017e6:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80017e8:	e015      	b.n	8001816 <Motor_Run+0xda>
		case TIM_CHANNEL_2:
			uMotor -> htimx -> Instance -> CCR2 = speed;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017f4:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80017f6:	e00e      	b.n	8001816 <Motor_Run+0xda>
		case TIM_CHANNEL_3:
			uMotor -> htimx -> Instance -> CCR3 = speed;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001802:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001804:	e007      	b.n	8001816 <Motor_Run+0xda>
		case TIM_CHANNEL_4:
			uMotor -> htimx -> Instance -> CCR4 = speed;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001810:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8001812:	e000      	b.n	8001816 <Motor_Run+0xda>
		default:
			break;
 8001814:	bf00      	nop
	}

	return;
 8001816:	bf00      	nop
}
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop

08001820 <Encoder_Init>:


void Encoder_Init(Encoder_t *uEncoder, TIM_HandleTypeDef *htimx, uint8_t reversed)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	4613      	mov	r3, r2
 800182c:	71fb      	strb	r3, [r7, #7]
	uEncoder -> htimx 		= htimx;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	601a      	str	r2, [r3, #0]
	uEncoder -> reversed 	= reversed;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	79fa      	ldrb	r2, [r7, #7]
 8001838:	719a      	strb	r2, [r3, #6]

	HAL_TIM_Encoder_Start(uEncoder->htimx, TIM_CHANNEL_ALL);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	213c      	movs	r1, #60	@ 0x3c
 8001840:	4618      	mov	r0, r3
 8001842:	f006 f93f 	bl	8007ac4 <HAL_TIM_Encoder_Start>

	return;
 8001846:	bf00      	nop
}
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <Encoder_GetCount>:


void Encoder_GetCount(Encoder_t *uEncoder)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
	if(uEncoder -> reversed)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	799b      	ldrb	r3, [r3, #6]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00a      	beq.n	8001874 <Encoder_GetCount+0x26>
	{
		uEncoder -> count = -(uEncoder -> htimx -> Instance -> CNT);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	b29b      	uxth	r3, r3
 8001868:	425b      	negs	r3, r3
 800186a:	b29b      	uxth	r3, r3
 800186c:	b21a      	sxth	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	809a      	strh	r2, [r3, #4]
	else
	{
		uEncoder -> count = uEncoder -> htimx -> Instance -> CNT;
	}

	return;
 8001872:	e007      	b.n	8001884 <Encoder_GetCount+0x36>
		uEncoder -> count = uEncoder -> htimx -> Instance -> CNT;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	b21a      	sxth	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	809a      	strh	r2, [r3, #4]
	return;
 8001882:	bf00      	nop
}
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <Encoder_ResetCount>:


void Encoder_ResetCount(Encoder_t *uEncoder)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	uEncoder -> htimx -> Instance -> CNT = 0;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2200      	movs	r2, #0
 800189e:	625a      	str	r2, [r3, #36]	@ 0x24

	return;
 80018a0:	bf00      	nop
}
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <PID_Init>:

#include "pid.h"

/* Functions */
void PID_Init(PID_t *uPID, float kp, float ki, float kd)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80018b8:	edc7 0a01 	vstr	s1, [r7, #4]
 80018bc:	ed87 1a00 	vstr	s2, [r7]
	uPID -> kp = kp;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	601a      	str	r2, [r3, #0]
	uPID -> ki = ki;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	605a      	str	r2, [r3, #4]
	uPID -> kd = kd;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	609a      	str	r2, [r3, #8]

	uPID -> proportional 	= 0;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
	uPID -> integral 		= 0;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
	uPID -> derivative 		= 0;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]

	uPID -> error 			= 0;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	619a      	str	r2, [r3, #24]
	uPID -> prev_error 		= 0;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
	uPID -> setpoint 		= 0;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	621a      	str	r2, [r3, #32]
	uPID -> feedback		= 0;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	625a      	str	r2, [r3, #36]	@ 0x24

	uPID -> max_output		= 0;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	629a      	str	r2, [r3, #40]	@ 0x28
	uPID -> output			= 0;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	62da      	str	r2, [r3, #44]	@ 0x2c

	return;
 800191a:	bf00      	nop
}
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <PID_Update>:


void PID_Update(PID_t *uPID, float setpoint, float feedback, float max_output)
{
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001932:	edc7 0a01 	vstr	s1, [r7, #4]
 8001936:	ed87 1a00 	vstr	s2, [r7]
	uPID->setpoint 		= setpoint;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	621a      	str	r2, [r3, #32]
	uPID->feedback 		= feedback;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	625a      	str	r2, [r3, #36]	@ 0x24
	uPID->max_output 	= max_output;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	629a      	str	r2, [r3, #40]	@ 0x28

	uPID->error = uPID->setpoint - uPID->feedback;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	edc3 7a06 	vstr	s15, [r3, #24]
//	    if(uPID->error > 180) 			{ setpoint -= 360; }
//	    else if(uPID->error < -180) 	{ setpoint += 360; }
//	    uPID->error = setpoint - feedback;
//	}

	uPID->proportional = uPID->kp * uPID->error;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	ed93 7a00 	vldr	s14, [r3]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	edd3 7a06 	vldr	s15, [r3, #24]
 800196e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	edc3 7a03 	vstr	s15, [r3, #12]
	uPID->integral    += uPID->ki * uPID->error;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	ed93 7a04 	vldr	s14, [r3, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	edd3 6a01 	vldr	s13, [r3, #4]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	edd3 7a06 	vldr	s15, [r3, #24]
 800198a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	edc3 7a04 	vstr	s15, [r3, #16]
	uPID->derivative   = uPID->kd * (uPID->error - uPID->prev_error);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	ed93 7a02 	vldr	s14, [r3, #8]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	edd3 6a06 	vldr	s13, [r3, #24]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80019aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	edc3 7a05 	vstr	s15, [r3, #20]
	uPID->prev_error   = uPID->error;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	699a      	ldr	r2, [r3, #24]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	61da      	str	r2, [r3, #28]

	if(uPID->integral >= uPID->max_output) 			{ uPID->integral =   uPID->max_output; }
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	ed93 7a04 	vldr	s14, [r3, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80019cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	db04      	blt.n	80019e0 <PID_Update+0xba>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	611a      	str	r2, [r3, #16]
 80019de:	e014      	b.n	8001a0a <PID_Update+0xe4>
	else if(uPID->integral < -(uPID->max_output)) 	{ uPID->integral = -(uPID->max_output); }
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80019ec:	eef1 7a67 	vneg.f32	s15, s15
 80019f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	d507      	bpl.n	8001a0a <PID_Update+0xe4>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a00:	eef1 7a67 	vneg.f32	s15, s15
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	edc3 7a04 	vstr	s15, [r3, #16]

	uPID->output = (uPID->proportional) + (uPID->integral) + (uPID->derivative);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	if(uPID->output >= uPID->max_output) 			{ uPID->output =   uPID->max_output; }
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3e:	db04      	blt.n	8001a4a <PID_Update+0x124>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	62da      	str	r2, [r3, #44]	@ 0x2c
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }

	return;
 8001a48:	e016      	b.n	8001a78 <PID_Update+0x152>
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a56:	eef1 7a67 	vneg.f32	s15, s15
 8001a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a62:	d400      	bmi.n	8001a66 <PID_Update+0x140>
	return;
 8001a64:	e008      	b.n	8001a78 <PID_Update+0x152>
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a6c:	eef1 7a67 	vneg.f32	s15, s15
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	return;
 8001a76:	bf00      	nop
}
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <Robot_Init>:
float yaw_adjust;
uint16_t UltraSonic[4];


void Robot_Init()
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af04      	add	r7, sp, #16
	Motor_Init(	&motorA,
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9303      	str	r3, [sp, #12]
 8001a8e:	2304      	movs	r3, #4
 8001a90:	9302      	str	r3, [sp, #8]
 8001a92:	4b53      	ldr	r3, [pc, #332]	@ (8001be0 <Robot_Init+0x15c>)
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	4b51      	ldr	r3, [pc, #324]	@ (8001be4 <Robot_Init+0x160>)
 8001a9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001aa2:	4951      	ldr	r1, [pc, #324]	@ (8001be8 <Robot_Init+0x164>)
 8001aa4:	4851      	ldr	r0, [pc, #324]	@ (8001bec <Robot_Init+0x168>)
 8001aa6:	f7ff fe1f 	bl	80016e8 <Motor_Init>
				GPIOD, GPIO_PIN_11,
				GPIOE, GPIO_PIN_14,
				&htim12, TIM_CHANNEL_2, 0);

	Motor_Init(	&motorB,
 8001aaa:	2300      	movs	r3, #0
 8001aac:	9303      	str	r3, [sp, #12]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	4b4b      	ldr	r3, [pc, #300]	@ (8001be0 <Robot_Init+0x15c>)
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4b4a      	ldr	r3, [pc, #296]	@ (8001be8 <Robot_Init+0x164>)
 8001abe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ac2:	4949      	ldr	r1, [pc, #292]	@ (8001be8 <Robot_Init+0x164>)
 8001ac4:	484a      	ldr	r0, [pc, #296]	@ (8001bf0 <Robot_Init+0x16c>)
 8001ac6:	f7ff fe0f 	bl	80016e8 <Motor_Init>
				GPIOD, GPIO_PIN_10,
				GPIOD, GPIO_PIN_8,
				&htim12, TIM_CHANNEL_1, 0);

	Motor_Init(	&motorC,
 8001aca:	2300      	movs	r3, #0
 8001acc:	9303      	str	r3, [sp, #12]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	9302      	str	r3, [sp, #8]
 8001ad2:	4b48      	ldr	r3, [pc, #288]	@ (8001bf4 <Robot_Init+0x170>)
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	4b42      	ldr	r3, [pc, #264]	@ (8001be4 <Robot_Init+0x160>)
 8001adc:	2208      	movs	r2, #8
 8001ade:	4941      	ldr	r1, [pc, #260]	@ (8001be4 <Robot_Init+0x160>)
 8001ae0:	4845      	ldr	r0, [pc, #276]	@ (8001bf8 <Robot_Init+0x174>)
 8001ae2:	f7ff fe01 	bl	80016e8 <Motor_Init>
				GPIOE, GPIO_PIN_3,
				GPIOE, GPIO_PIN_0,
				&htim10, TIM_CHANNEL_1, 0);

	Encoder_Init(&encA, &htim2, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4944      	ldr	r1, [pc, #272]	@ (8001bfc <Robot_Init+0x178>)
 8001aea:	4845      	ldr	r0, [pc, #276]	@ (8001c00 <Robot_Init+0x17c>)
 8001aec:	f7ff fe98 	bl	8001820 <Encoder_Init>
	Encoder_Init(&encB, &htim4, 1);
 8001af0:	2201      	movs	r2, #1
 8001af2:	4944      	ldr	r1, [pc, #272]	@ (8001c04 <Robot_Init+0x180>)
 8001af4:	4844      	ldr	r0, [pc, #272]	@ (8001c08 <Robot_Init+0x184>)
 8001af6:	f7ff fe93 	bl	8001820 <Encoder_Init>
	Encoder_Init(&encC, &htim1, 1);
 8001afa:	2201      	movs	r2, #1
 8001afc:	4943      	ldr	r1, [pc, #268]	@ (8001c0c <Robot_Init+0x188>)
 8001afe:	4844      	ldr	r0, [pc, #272]	@ (8001c10 <Robot_Init+0x18c>)
 8001b00:	f7ff fe8e 	bl	8001820 <Encoder_Init>

	kp = 45;
 8001b04:	4b43      	ldr	r3, [pc, #268]	@ (8001c14 <Robot_Init+0x190>)
 8001b06:	4a44      	ldr	r2, [pc, #272]	@ (8001c18 <Robot_Init+0x194>)
 8001b08:	601a      	str	r2, [r3, #0]
	ki = 2.5;
 8001b0a:	4b44      	ldr	r3, [pc, #272]	@ (8001c1c <Robot_Init+0x198>)
 8001b0c:	4a44      	ldr	r2, [pc, #272]	@ (8001c20 <Robot_Init+0x19c>)
 8001b0e:	601a      	str	r2, [r3, #0]
	kd = 0;
 8001b10:	4b44      	ldr	r3, [pc, #272]	@ (8001c24 <Robot_Init+0x1a0>)
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]

    PID_Init(&PID_A, kp, ki, kd);
 8001b18:	4b3e      	ldr	r3, [pc, #248]	@ (8001c14 <Robot_Init+0x190>)
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c1c <Robot_Init+0x198>)
 8001b20:	ed93 7a00 	vldr	s14, [r3]
 8001b24:	4b3f      	ldr	r3, [pc, #252]	@ (8001c24 <Robot_Init+0x1a0>)
 8001b26:	edd3 6a00 	vldr	s13, [r3]
 8001b2a:	eeb0 1a66 	vmov.f32	s2, s13
 8001b2e:	eef0 0a47 	vmov.f32	s1, s14
 8001b32:	eeb0 0a67 	vmov.f32	s0, s15
 8001b36:	483c      	ldr	r0, [pc, #240]	@ (8001c28 <Robot_Init+0x1a4>)
 8001b38:	f7ff feb8 	bl	80018ac <PID_Init>
    PID_Init(&PID_B, kp, ki, kd);
 8001b3c:	4b35      	ldr	r3, [pc, #212]	@ (8001c14 <Robot_Init+0x190>)
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	4b36      	ldr	r3, [pc, #216]	@ (8001c1c <Robot_Init+0x198>)
 8001b44:	ed93 7a00 	vldr	s14, [r3]
 8001b48:	4b36      	ldr	r3, [pc, #216]	@ (8001c24 <Robot_Init+0x1a0>)
 8001b4a:	edd3 6a00 	vldr	s13, [r3]
 8001b4e:	eeb0 1a66 	vmov.f32	s2, s13
 8001b52:	eef0 0a47 	vmov.f32	s1, s14
 8001b56:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5a:	4834      	ldr	r0, [pc, #208]	@ (8001c2c <Robot_Init+0x1a8>)
 8001b5c:	f7ff fea6 	bl	80018ac <PID_Init>
    PID_Init(&PID_C, kp, ki, kd);
 8001b60:	4b2c      	ldr	r3, [pc, #176]	@ (8001c14 <Robot_Init+0x190>)
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	4b2d      	ldr	r3, [pc, #180]	@ (8001c1c <Robot_Init+0x198>)
 8001b68:	ed93 7a00 	vldr	s14, [r3]
 8001b6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c24 <Robot_Init+0x1a0>)
 8001b6e:	edd3 6a00 	vldr	s13, [r3]
 8001b72:	eeb0 1a66 	vmov.f32	s2, s13
 8001b76:	eef0 0a47 	vmov.f32	s1, s14
 8001b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7e:	482c      	ldr	r0, [pc, #176]	@ (8001c30 <Robot_Init+0x1ac>)
 8001b80:	f7ff fe94 	bl	80018ac <PID_Init>
    PID_Init(&PID_VY, 0.65, 0, 0);
 8001b84:	ed9f 1a2b 	vldr	s2, [pc, #172]	@ 8001c34 <Robot_Init+0x1b0>
 8001b88:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8001c34 <Robot_Init+0x1b0>
 8001b8c:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001c38 <Robot_Init+0x1b4>
 8001b90:	482a      	ldr	r0, [pc, #168]	@ (8001c3c <Robot_Init+0x1b8>)
 8001b92:	f7ff fe8b 	bl	80018ac <PID_Init>
    PID_Init(&PID_VW, 0.5, 0, 0);
 8001b96:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 8001c34 <Robot_Init+0x1b0>
 8001b9a:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001c34 <Robot_Init+0x1b0>
 8001b9e:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001ba2:	4827      	ldr	r0, [pc, #156]	@ (8001c40 <Robot_Init+0x1bc>)
 8001ba4:	f7ff fe82 	bl	80018ac <PID_Init>

    HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX, sizeof(UART2_RX));
 8001ba8:	2217      	movs	r2, #23
 8001baa:	4926      	ldr	r1, [pc, #152]	@ (8001c44 <Robot_Init+0x1c0>)
 8001bac:	4826      	ldr	r0, [pc, #152]	@ (8001c48 <Robot_Init+0x1c4>)
 8001bae:	f006 fd9f 	bl	80086f0 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX, sizeof(UART3_RX));
 8001bb2:	222b      	movs	r2, #43	@ 0x2b
 8001bb4:	4925      	ldr	r1, [pc, #148]	@ (8001c4c <Robot_Init+0x1c8>)
 8001bb6:	4826      	ldr	r0, [pc, #152]	@ (8001c50 <Robot_Init+0x1cc>)
 8001bb8:	f006 fd9a 	bl	80086f0 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX, sizeof(UART4_RX));
 8001bbc:	2235      	movs	r2, #53	@ 0x35
 8001bbe:	4925      	ldr	r1, [pc, #148]	@ (8001c54 <Robot_Init+0x1d0>)
 8001bc0:	4825      	ldr	r0, [pc, #148]	@ (8001c58 <Robot_Init+0x1d4>)
 8001bc2:	f006 fd95 	bl	80086f0 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX, sizeof(UART5_RX));
 8001bc6:	2217      	movs	r2, #23
 8001bc8:	4924      	ldr	r1, [pc, #144]	@ (8001c5c <Robot_Init+0x1d8>)
 8001bca:	4825      	ldr	r0, [pc, #148]	@ (8001c60 <Robot_Init+0x1dc>)
 8001bcc:	f006 fd90 	bl	80086f0 <HAL_UART_Receive_DMA>

	udpClient_connect();
 8001bd0:	f001 fbdc 	bl	800338c <udpClient_connect>

	HAL_TIM_Base_Start_IT(&htim6);
 8001bd4:	4823      	ldr	r0, [pc, #140]	@ (8001c64 <Robot_Init+0x1e0>)
 8001bd6:	f005 fd47 	bl	8007668 <HAL_TIM_Base_Start_IT>
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000748 	.word	0x20000748
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	20000250 	.word	0x20000250
 8001bf0:	2000026c 	.word	0x2000026c
 8001bf4:	200006b8 	.word	0x200006b8
 8001bf8:	20000288 	.word	0x20000288
 8001bfc:	200004c0 	.word	0x200004c0
 8001c00:	200002a4 	.word	0x200002a4
 8001c04:	20000550 	.word	0x20000550
 8001c08:	200002ac 	.word	0x200002ac
 8001c0c:	20000478 	.word	0x20000478
 8001c10:	200002b4 	.word	0x200002b4
 8001c14:	200003bc 	.word	0x200003bc
 8001c18:	42340000 	.word	0x42340000
 8001c1c:	200003c0 	.word	0x200003c0
 8001c20:	40200000 	.word	0x40200000
 8001c24:	200003c4 	.word	0x200003c4
 8001c28:	200002cc 	.word	0x200002cc
 8001c2c:	200002fc 	.word	0x200002fc
 8001c30:	2000032c 	.word	0x2000032c
 8001c34:	00000000 	.word	0x00000000
 8001c38:	3f266666 	.word	0x3f266666
 8001c3c:	2000035c 	.word	0x2000035c
 8001c40:	2000038c 	.word	0x2000038c
 8001c44:	200003c8 	.word	0x200003c8
 8001c48:	2000091c 	.word	0x2000091c
 8001c4c:	200003e0 	.word	0x200003e0
 8001c50:	20000964 	.word	0x20000964
 8001c54:	2000040c 	.word	0x2000040c
 8001c58:	20000844 	.word	0x20000844
 8001c5c:	20000444 	.word	0x20000444
 8001c60:	2000088c 	.word	0x2000088c
 8001c64:	200005e0 	.word	0x200005e0

08001c68 <Robot_Motor>:

void Robot_Motor()
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
	static uint16_t timer = 0;

	if(timer >= 9)
 8001c6e:	4b51      	ldr	r3, [pc, #324]	@ (8001db4 <Robot_Motor+0x14c>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	f240 8093 	bls.w	8001d9e <Robot_Motor+0x136>
//
//		int16_t va = Kinematics_Triangle(MOTOR_A, vx, vy, vw);
//		int16_t vb = Kinematics_Triangle(MOTOR_B, vx, vy, vw);
//		int16_t vc = Kinematics_Triangle(MOTOR_C, vx, vy, vw);

		int16_t va = udp_rx.motor_a;
 8001c78:	4b4f      	ldr	r3, [pc, #316]	@ (8001db8 <Robot_Motor+0x150>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	80fb      	strh	r3, [r7, #6]
		int16_t vb = udp_rx.motor_b;
 8001c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001db8 <Robot_Motor+0x150>)
 8001c80:	885b      	ldrh	r3, [r3, #2]
 8001c82:	80bb      	strh	r3, [r7, #4]
		int16_t vc = udp_rx.motor_c;
 8001c84:	4b4c      	ldr	r3, [pc, #304]	@ (8001db8 <Robot_Motor+0x150>)
 8001c86:	889b      	ldrh	r3, [r3, #4]
 8001c88:	807b      	strh	r3, [r7, #2]

		Encoder_GetCount(&encA);
 8001c8a:	484c      	ldr	r0, [pc, #304]	@ (8001dbc <Robot_Motor+0x154>)
 8001c8c:	f7ff fddf 	bl	800184e <Encoder_GetCount>
		Encoder_GetCount(&encB);
 8001c90:	484b      	ldr	r0, [pc, #300]	@ (8001dc0 <Robot_Motor+0x158>)
 8001c92:	f7ff fddc 	bl	800184e <Encoder_GetCount>
		Encoder_GetCount(&encC);
 8001c96:	484b      	ldr	r0, [pc, #300]	@ (8001dc4 <Robot_Motor+0x15c>)
 8001c98:	f7ff fdd9 	bl	800184e <Encoder_GetCount>

		/* Save UDP */
		udp_tx.enc_a = encA.count;
 8001c9c:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <Robot_Motor+0x154>)
 8001c9e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001ca2:	4b49      	ldr	r3, [pc, #292]	@ (8001dc8 <Robot_Motor+0x160>)
 8001ca4:	801a      	strh	r2, [r3, #0]
		udp_tx.enc_b = encB.count;
 8001ca6:	4b46      	ldr	r3, [pc, #280]	@ (8001dc0 <Robot_Motor+0x158>)
 8001ca8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001cac:	4b46      	ldr	r3, [pc, #280]	@ (8001dc8 <Robot_Motor+0x160>)
 8001cae:	805a      	strh	r2, [r3, #2]
		udp_tx.enc_c = encC.count;
 8001cb0:	4b44      	ldr	r3, [pc, #272]	@ (8001dc4 <Robot_Motor+0x15c>)
 8001cb2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001cb6:	4b44      	ldr	r3, [pc, #272]	@ (8001dc8 <Robot_Motor+0x160>)
 8001cb8:	809a      	strh	r2, [r3, #4]

		Encoder_ResetCount(&encA);
 8001cba:	4840      	ldr	r0, [pc, #256]	@ (8001dbc <Robot_Motor+0x154>)
 8001cbc:	f7ff fde7 	bl	800188e <Encoder_ResetCount>
		Encoder_ResetCount(&encB);
 8001cc0:	483f      	ldr	r0, [pc, #252]	@ (8001dc0 <Robot_Motor+0x158>)
 8001cc2:	f7ff fde4 	bl	800188e <Encoder_ResetCount>
		Encoder_ResetCount(&encC);
 8001cc6:	483f      	ldr	r0, [pc, #252]	@ (8001dc4 <Robot_Motor+0x15c>)
 8001cc8:	f7ff fde1 	bl	800188e <Encoder_ResetCount>

		PID_Update(&PID_A, (float)va, (float)encA.count, 999);
 8001ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd8:	4b38      	ldr	r3, [pc, #224]	@ (8001dbc <Robot_Motor+0x154>)
 8001cda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cde:	ee07 3a10 	vmov	s14, r3
 8001ce2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ce6:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 8001dcc <Robot_Motor+0x164>
 8001cea:	eef0 0a47 	vmov.f32	s1, s14
 8001cee:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf2:	4837      	ldr	r0, [pc, #220]	@ (8001dd0 <Robot_Motor+0x168>)
 8001cf4:	f7ff fe17 	bl	8001926 <PID_Update>
		PID_Update(&PID_B, (float)vb, (float)encB.count, 999);
 8001cf8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cfc:	ee07 3a90 	vmov	s15, r3
 8001d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d04:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <Robot_Motor+0x158>)
 8001d06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d0a:	ee07 3a10 	vmov	s14, r3
 8001d0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d12:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 8001dcc <Robot_Motor+0x164>
 8001d16:	eef0 0a47 	vmov.f32	s1, s14
 8001d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1e:	482d      	ldr	r0, [pc, #180]	@ (8001dd4 <Robot_Motor+0x16c>)
 8001d20:	f7ff fe01 	bl	8001926 <PID_Update>
		PID_Update(&PID_C, (float)vc, (float)encC.count, 999);
 8001d24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d28:	ee07 3a90 	vmov	s15, r3
 8001d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d30:	4b24      	ldr	r3, [pc, #144]	@ (8001dc4 <Robot_Motor+0x15c>)
 8001d32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d36:	ee07 3a10 	vmov	s14, r3
 8001d3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d3e:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8001dcc <Robot_Motor+0x164>
 8001d42:	eef0 0a47 	vmov.f32	s1, s14
 8001d46:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4a:	4823      	ldr	r0, [pc, #140]	@ (8001dd8 <Robot_Motor+0x170>)
 8001d4c:	f7ff fdeb 	bl	8001926 <PID_Update>

		Motor_Run(&motorA, (int16_t)PID_A.output);
 8001d50:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd0 <Robot_Motor+0x168>)
 8001d52:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001d56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d5a:	ee17 3a90 	vmov	r3, s15
 8001d5e:	b21b      	sxth	r3, r3
 8001d60:	4619      	mov	r1, r3
 8001d62:	481e      	ldr	r0, [pc, #120]	@ (8001ddc <Robot_Motor+0x174>)
 8001d64:	f7ff fcea 	bl	800173c <Motor_Run>
		Motor_Run(&motorB, (int16_t)PID_B.output);
 8001d68:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <Robot_Motor+0x16c>)
 8001d6a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d72:	ee17 3a90 	vmov	r3, s15
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4819      	ldr	r0, [pc, #100]	@ (8001de0 <Robot_Motor+0x178>)
 8001d7c:	f7ff fcde 	bl	800173c <Motor_Run>
		Motor_Run(&motorC, (int16_t)PID_C.output);
 8001d80:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <Robot_Motor+0x170>)
 8001d82:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d8a:	ee17 3a90 	vmov	r3, s15
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	4619      	mov	r1, r3
 8001d92:	4814      	ldr	r0, [pc, #80]	@ (8001de4 <Robot_Motor+0x17c>)
 8001d94:	f7ff fcd2 	bl	800173c <Motor_Run>

		timer = 0;
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <Robot_Motor+0x14c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	801a      	strh	r2, [r3, #0]
	}

	timer++;
 8001d9e:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <Robot_Motor+0x14c>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	3301      	adds	r3, #1
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b03      	ldr	r3, [pc, #12]	@ (8001db4 <Robot_Motor+0x14c>)
 8001da8:	801a      	strh	r2, [r3, #0]
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000470 	.word	0x20000470
 8001db8:	200007fc 	.word	0x200007fc
 8001dbc:	200002a4 	.word	0x200002a4
 8001dc0:	200002ac 	.word	0x200002ac
 8001dc4:	200002b4 	.word	0x200002b4
 8001dc8:	200007e4 	.word	0x200007e4
 8001dcc:	4479c000 	.word	0x4479c000
 8001dd0:	200002cc 	.word	0x200002cc
 8001dd4:	200002fc 	.word	0x200002fc
 8001dd8:	2000032c 	.word	0x2000032c
 8001ddc:	20000250 	.word	0x20000250
 8001de0:	2000026c 	.word	0x2000026c
 8001de4:	20000288 	.word	0x20000288

08001de8 <Robot_LED_Blink>:

void Robot_LED_Blink()
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	static uint16_t timer = 0;

	if(timer >= 99)
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <Robot_LED_Blink+0x2c>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	2b62      	cmp	r3, #98	@ 0x62
 8001df2:	d906      	bls.n	8001e02 <Robot_LED_Blink+0x1a>
	{
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8001df4:	2102      	movs	r1, #2
 8001df6:	4808      	ldr	r0, [pc, #32]	@ (8001e18 <Robot_LED_Blink+0x30>)
 8001df8:	f004 fdef 	bl	80069da <HAL_GPIO_TogglePin>
		timer = 0;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <Robot_LED_Blink+0x2c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	801a      	strh	r2, [r3, #0]
	}

	timer++;
 8001e02:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <Robot_LED_Blink+0x2c>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	3301      	adds	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	4b02      	ldr	r3, [pc, #8]	@ (8001e14 <Robot_LED_Blink+0x2c>)
 8001e0c:	801a      	strh	r2, [r3, #0]
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000472 	.word	0x20000472
 8001e18:	40021000 	.word	0x40021000

08001e1c <Robot_Loop>:

void Robot_Loop()
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	Robot_Motor();
 8001e20:	f7ff ff22 	bl	8001c68 <Robot_Motor>

	Robot_LED_Blink();
 8001e24:	f7ff ffe0 	bl	8001de8 <Robot_LED_Blink>
}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	0000      	movs	r0, r0
	...

08001e30 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a7b      	ldr	r2, [pc, #492]	@ (8002028 <HAL_UART_RxCpltCallback+0x1f8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d130      	bne.n	8001ea2 <HAL_UART_RxCpltCallback+0x72>
	{
		memcpy(&yaw_degree, UART2_RX + 3, 4);
 8001e40:	4b7a      	ldr	r3, [pc, #488]	@ (800202c <HAL_UART_RxCpltCallback+0x1fc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b7a      	ldr	r3, [pc, #488]	@ (8002030 <HAL_UART_RxCpltCallback+0x200>)
 8001e48:	601a      	str	r2, [r3, #0]

		yaw_radian = (yaw_degree - yaw_adjust) * M_PI/180.0;
 8001e4a:	4b79      	ldr	r3, [pc, #484]	@ (8002030 <HAL_UART_RxCpltCallback+0x200>)
 8001e4c:	ed93 7a00 	vldr	s14, [r3]
 8001e50:	4b78      	ldr	r3, [pc, #480]	@ (8002034 <HAL_UART_RxCpltCallback+0x204>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e5a:	ee17 0a90 	vmov	r0, s15
 8001e5e:	f7fe fb6b 	bl	8000538 <__aeabi_f2d>
 8001e62:	a36f      	add	r3, pc, #444	@ (adr r3, 8002020 <HAL_UART_RxCpltCallback+0x1f0>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	f7fe fbbe 	bl	80005e8 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	4b6f      	ldr	r3, [pc, #444]	@ (8002038 <HAL_UART_RxCpltCallback+0x208>)
 8001e7a:	f7fe fcdf 	bl	800083c <__aeabi_ddiv>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fdc1 	bl	8000a0c <__aeabi_d2f>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a6b      	ldr	r2, [pc, #428]	@ (800203c <HAL_UART_RxCpltCallback+0x20c>)
 8001e8e:	6013      	str	r3, [r2, #0]

		/* Save UDP */
		udp_tx.yaw_degree = yaw_degree;
 8001e90:	4b67      	ldr	r3, [pc, #412]	@ (8002030 <HAL_UART_RxCpltCallback+0x200>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a6a      	ldr	r2, [pc, #424]	@ (8002040 <HAL_UART_RxCpltCallback+0x210>)
 8001e96:	60d3      	str	r3, [r2, #12]

		HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX, sizeof(UART2_RX));
 8001e98:	2217      	movs	r2, #23
 8001e9a:	496a      	ldr	r1, [pc, #424]	@ (8002044 <HAL_UART_RxCpltCallback+0x214>)
 8001e9c:	4862      	ldr	r0, [pc, #392]	@ (8002028 <HAL_UART_RxCpltCallback+0x1f8>)
 8001e9e:	f006 fc27 	bl	80086f0 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart3)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a68      	ldr	r2, [pc, #416]	@ (8002048 <HAL_UART_RxCpltCallback+0x218>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	f040 8083 	bne.w	8001fb2 <HAL_UART_RxCpltCallback+0x182>
	{
		memcpy((uint8_t*)&input + 4, UART3_RX + 3, sizeof(input) - 4);
 8001eac:	4b67      	ldr	r3, [pc, #412]	@ (800204c <HAL_UART_RxCpltCallback+0x21c>)
 8001eae:	4968      	ldr	r1, [pc, #416]	@ (8002050 <HAL_UART_RxCpltCallback+0x220>)
 8001eb0:	2224      	movs	r2, #36	@ 0x24
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f012 fd19 	bl	80148ea <memcpy>

		input.lX = Controller_Drift(input.lX_raw, 12);
 8001eb8:	4b66      	ldr	r3, [pc, #408]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001eba:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001ebe:	210c      	movs	r1, #12
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f8d3 	bl	800106c <Controller_Drift>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b62      	ldr	r3, [pc, #392]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001ecc:	709a      	strb	r2, [r3, #2]
		input.lY = Controller_Drift(input.lY_raw, 12);
 8001ece:	4b61      	ldr	r3, [pc, #388]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001ed0:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001ed4:	210c      	movs	r1, #12
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f8c8 	bl	800106c <Controller_Drift>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b5c      	ldr	r3, [pc, #368]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001ee2:	70da      	strb	r2, [r3, #3]
		input.rX = Controller_Drift(input.rX_raw, 12);
 8001ee4:	4b5b      	ldr	r3, [pc, #364]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001ee6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001eea:	210c      	movs	r1, #12
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f8bd 	bl	800106c <Controller_Drift>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b57      	ldr	r3, [pc, #348]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001ef8:	701a      	strb	r2, [r3, #0]
		input.rY = Controller_Drift(input.rY_raw, 12);
 8001efa:	4b56      	ldr	r3, [pc, #344]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001efc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001f00:	210c      	movs	r1, #12
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f8b2 	bl	800106c <Controller_Drift>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b51      	ldr	r3, [pc, #324]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001f0e:	705a      	strb	r2, [r3, #1]

		input.lX = map(input.lX, -128, 127, -30, 30);
 8001f10:	4b50      	ldr	r3, [pc, #320]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001f12:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001f16:	4618      	mov	r0, r3
 8001f18:	231e      	movs	r3, #30
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	f06f 031d 	mvn.w	r3, #29
 8001f20:	227f      	movs	r2, #127	@ 0x7f
 8001f22:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001f26:	f7ff f8cb 	bl	80010c0 <map>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	b25a      	sxtb	r2, r3
 8001f2e:	4b49      	ldr	r3, [pc, #292]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001f30:	709a      	strb	r2, [r3, #2]
		input.lY = map(input.lY, -128, 127, -30, 30);
 8001f32:	4b48      	ldr	r3, [pc, #288]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001f34:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	231e      	movs	r3, #30
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	f06f 031d 	mvn.w	r3, #29
 8001f42:	227f      	movs	r2, #127	@ 0x7f
 8001f44:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001f48:	f7ff f8ba 	bl	80010c0 <map>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	b25a      	sxtb	r2, r3
 8001f50:	4b40      	ldr	r3, [pc, #256]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001f52:	70da      	strb	r2, [r3, #3]
		input.rX = map(input.rX, -128, 127, -15, 15);
 8001f54:	4b3f      	ldr	r3, [pc, #252]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001f56:	f993 3000 	ldrsb.w	r3, [r3]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	230f      	movs	r3, #15
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	f06f 030e 	mvn.w	r3, #14
 8001f64:	227f      	movs	r2, #127	@ 0x7f
 8001f66:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001f6a:	f7ff f8a9 	bl	80010c0 <map>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	b25a      	sxtb	r2, r3
 8001f72:	4b38      	ldr	r3, [pc, #224]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001f74:	701a      	strb	r2, [r3, #0]
		input.rY = map(input.rY, -128, 127, -30, 30);
 8001f76:	4b37      	ldr	r3, [pc, #220]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001f78:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	231e      	movs	r3, #30
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	f06f 031d 	mvn.w	r3, #29
 8001f86:	227f      	movs	r2, #127	@ 0x7f
 8001f88:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001f8c:	f7ff f898 	bl	80010c0 <map>
 8001f90:	4603      	mov	r3, r0
 8001f92:	b25a      	sxtb	r2, r3
 8001f94:	4b2f      	ldr	r3, [pc, #188]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001f96:	705a      	strb	r2, [r3, #1]
//
//		vx = vx_controller;
//		vy = vy_controller;
//		vw = vw_controller;

		if(input.crs)
 8001f98:	4b2e      	ldr	r3, [pc, #184]	@ (8002054 <HAL_UART_RxCpltCallback+0x224>)
 8001f9a:	7b9b      	ldrb	r3, [r3, #14]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_UART_RxCpltCallback+0x178>
		{
			yaw_adjust = yaw_degree;
 8001fa0:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <HAL_UART_RxCpltCallback+0x200>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a23      	ldr	r2, [pc, #140]	@ (8002034 <HAL_UART_RxCpltCallback+0x204>)
 8001fa6:	6013      	str	r3, [r2, #0]
		}


		HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX, sizeof(UART3_RX));
 8001fa8:	222b      	movs	r2, #43	@ 0x2b
 8001faa:	492b      	ldr	r1, [pc, #172]	@ (8002058 <HAL_UART_RxCpltCallback+0x228>)
 8001fac:	4826      	ldr	r0, [pc, #152]	@ (8002048 <HAL_UART_RxCpltCallback+0x218>)
 8001fae:	f006 fb9f 	bl	80086f0 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart4)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a29      	ldr	r2, [pc, #164]	@ (800205c <HAL_UART_RxCpltCallback+0x22c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d116      	bne.n	8001fe8 <HAL_UART_RxCpltCallback+0x1b8>
	{
		memcpy(&encX.count, UART4_RX + 3, 2);
 8001fba:	4b29      	ldr	r3, [pc, #164]	@ (8002060 <HAL_UART_RxCpltCallback+0x230>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	4b28      	ldr	r3, [pc, #160]	@ (8002064 <HAL_UART_RxCpltCallback+0x234>)
 8001fc2:	809a      	strh	r2, [r3, #4]
		memcpy(&encY.count, UART4_RX + 5, 2);
 8001fc4:	4b28      	ldr	r3, [pc, #160]	@ (8002068 <HAL_UART_RxCpltCallback+0x238>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	4b28      	ldr	r3, [pc, #160]	@ (800206c <HAL_UART_RxCpltCallback+0x23c>)
 8001fcc:	809a      	strh	r2, [r3, #4]

		/* Save UDP */
		memcpy(&udp_tx.enc_x, &encX.count, 2);
 8001fce:	4b25      	ldr	r3, [pc, #148]	@ (8002064 <HAL_UART_RxCpltCallback+0x234>)
 8001fd0:	889a      	ldrh	r2, [r3, #4]
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002040 <HAL_UART_RxCpltCallback+0x210>)
 8001fd4:	80da      	strh	r2, [r3, #6]
		memcpy(&udp_tx.enc_y, &encY.count, 2);
 8001fd6:	4b25      	ldr	r3, [pc, #148]	@ (800206c <HAL_UART_RxCpltCallback+0x23c>)
 8001fd8:	889a      	ldrh	r2, [r3, #4]
 8001fda:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <HAL_UART_RxCpltCallback+0x210>)
 8001fdc:	811a      	strh	r2, [r3, #8]

		HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX, sizeof(UART4_RX));
 8001fde:	2235      	movs	r2, #53	@ 0x35
 8001fe0:	4923      	ldr	r1, [pc, #140]	@ (8002070 <HAL_UART_RxCpltCallback+0x240>)
 8001fe2:	481e      	ldr	r0, [pc, #120]	@ (800205c <HAL_UART_RxCpltCallback+0x22c>)
 8001fe4:	f006 fb84 	bl	80086f0 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart5)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a22      	ldr	r2, [pc, #136]	@ (8002074 <HAL_UART_RxCpltCallback+0x244>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d111      	bne.n	8002014 <HAL_UART_RxCpltCallback+0x1e4>
	{
		memcpy(UltraSonic, UART5_RX + 3, sizeof(UltraSonic));
 8001ff0:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <HAL_UART_RxCpltCallback+0x248>)
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4821      	ldr	r0, [pc, #132]	@ (800207c <HAL_UART_RxCpltCallback+0x24c>)
 8001ff8:	f012 fc77 	bl	80148ea <memcpy>

		/* Save UDP */
		memcpy(udp_tx.ultrasonic, UltraSonic, sizeof(udp_tx.ultrasonic));
 8001ffc:	4b10      	ldr	r3, [pc, #64]	@ (8002040 <HAL_UART_RxCpltCallback+0x210>)
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800207c <HAL_UART_RxCpltCallback+0x24c>)
 8002000:	3310      	adds	r3, #16
 8002002:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002006:	e883 0003 	stmia.w	r3, {r0, r1}

		HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX, sizeof(UART5_RX));
 800200a:	2217      	movs	r2, #23
 800200c:	491c      	ldr	r1, [pc, #112]	@ (8002080 <HAL_UART_RxCpltCallback+0x250>)
 800200e:	4819      	ldr	r0, [pc, #100]	@ (8002074 <HAL_UART_RxCpltCallback+0x244>)
 8002010:	f006 fb6e 	bl	80086f0 <HAL_UART_Receive_DMA>
	}

}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	f3af 8000 	nop.w
 8002020:	54442d18 	.word	0x54442d18
 8002024:	400921fb 	.word	0x400921fb
 8002028:	2000091c 	.word	0x2000091c
 800202c:	200003cb 	.word	0x200003cb
 8002030:	2000045c 	.word	0x2000045c
 8002034:	20000464 	.word	0x20000464
 8002038:	40668000 	.word	0x40668000
 800203c:	20000460 	.word	0x20000460
 8002040:	200007e4 	.word	0x200007e4
 8002044:	200003c8 	.word	0x200003c8
 8002048:	20000964 	.word	0x20000964
 800204c:	2000022c 	.word	0x2000022c
 8002050:	200003e3 	.word	0x200003e3
 8002054:	20000228 	.word	0x20000228
 8002058:	200003e0 	.word	0x200003e0
 800205c:	20000844 	.word	0x20000844
 8002060:	2000040f 	.word	0x2000040f
 8002064:	200002bc 	.word	0x200002bc
 8002068:	20000411 	.word	0x20000411
 800206c:	200002c4 	.word	0x200002c4
 8002070:	2000040c 	.word	0x2000040c
 8002074:	2000088c 	.word	0x2000088c
 8002078:	20000447 	.word	0x20000447
 800207c:	20000468 	.word	0x20000468
 8002080:	20000444 	.word	0x20000444

08002084 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a31      	ldr	r2, [pc, #196]	@ (8002154 <HAL_UART_RxHalfCpltCallback+0xd0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d113      	bne.n	80020bc <HAL_UART_RxHalfCpltCallback+0x38>
	{
		if(!(UART2_RX[0] == 'A' && UART2_RX[1] == 'B' && UART2_RX[2] == 'C'))
 8002094:	4b30      	ldr	r3, [pc, #192]	@ (8002158 <HAL_UART_RxHalfCpltCallback+0xd4>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b41      	cmp	r3, #65	@ 0x41
 800209a:	d107      	bne.n	80020ac <HAL_UART_RxHalfCpltCallback+0x28>
 800209c:	4b2e      	ldr	r3, [pc, #184]	@ (8002158 <HAL_UART_RxHalfCpltCallback+0xd4>)
 800209e:	785b      	ldrb	r3, [r3, #1]
 80020a0:	2b42      	cmp	r3, #66	@ 0x42
 80020a2:	d103      	bne.n	80020ac <HAL_UART_RxHalfCpltCallback+0x28>
 80020a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002158 <HAL_UART_RxHalfCpltCallback+0xd4>)
 80020a6:	789b      	ldrb	r3, [r3, #2]
 80020a8:	2b43      	cmp	r3, #67	@ 0x43
 80020aa:	d007      	beq.n	80020bc <HAL_UART_RxHalfCpltCallback+0x38>
		{
			HAL_UART_AbortReceive(&huart2);
 80020ac:	4829      	ldr	r0, [pc, #164]	@ (8002154 <HAL_UART_RxHalfCpltCallback+0xd0>)
 80020ae:	f006 fb44 	bl	800873a <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX, sizeof(UART2_RX));
 80020b2:	2217      	movs	r2, #23
 80020b4:	4928      	ldr	r1, [pc, #160]	@ (8002158 <HAL_UART_RxHalfCpltCallback+0xd4>)
 80020b6:	4827      	ldr	r0, [pc, #156]	@ (8002154 <HAL_UART_RxHalfCpltCallback+0xd0>)
 80020b8:	f006 fb1a 	bl	80086f0 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart3)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a27      	ldr	r2, [pc, #156]	@ (800215c <HAL_UART_RxHalfCpltCallback+0xd8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d113      	bne.n	80020ec <HAL_UART_RxHalfCpltCallback+0x68>
	{
		if(!(UART3_RX[0] == 'A' && UART3_RX[1] == 'B' && UART3_RX[2] == 'C'))
 80020c4:	4b26      	ldr	r3, [pc, #152]	@ (8002160 <HAL_UART_RxHalfCpltCallback+0xdc>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b41      	cmp	r3, #65	@ 0x41
 80020ca:	d107      	bne.n	80020dc <HAL_UART_RxHalfCpltCallback+0x58>
 80020cc:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <HAL_UART_RxHalfCpltCallback+0xdc>)
 80020ce:	785b      	ldrb	r3, [r3, #1]
 80020d0:	2b42      	cmp	r3, #66	@ 0x42
 80020d2:	d103      	bne.n	80020dc <HAL_UART_RxHalfCpltCallback+0x58>
 80020d4:	4b22      	ldr	r3, [pc, #136]	@ (8002160 <HAL_UART_RxHalfCpltCallback+0xdc>)
 80020d6:	789b      	ldrb	r3, [r3, #2]
 80020d8:	2b43      	cmp	r3, #67	@ 0x43
 80020da:	d007      	beq.n	80020ec <HAL_UART_RxHalfCpltCallback+0x68>
		{
			HAL_UART_AbortReceive(&huart3);
 80020dc:	481f      	ldr	r0, [pc, #124]	@ (800215c <HAL_UART_RxHalfCpltCallback+0xd8>)
 80020de:	f006 fb2c 	bl	800873a <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX, sizeof(UART3_RX));
 80020e2:	222b      	movs	r2, #43	@ 0x2b
 80020e4:	491e      	ldr	r1, [pc, #120]	@ (8002160 <HAL_UART_RxHalfCpltCallback+0xdc>)
 80020e6:	481d      	ldr	r0, [pc, #116]	@ (800215c <HAL_UART_RxHalfCpltCallback+0xd8>)
 80020e8:	f006 fb02 	bl	80086f0 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart4)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002164 <HAL_UART_RxHalfCpltCallback+0xe0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d113      	bne.n	800211c <HAL_UART_RxHalfCpltCallback+0x98>
	{
		if(!(UART4_RX[0] == 'A' && UART4_RX[1] == 'B' && UART4_RX[2] == 'C'))
 80020f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002168 <HAL_UART_RxHalfCpltCallback+0xe4>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b41      	cmp	r3, #65	@ 0x41
 80020fa:	d107      	bne.n	800210c <HAL_UART_RxHalfCpltCallback+0x88>
 80020fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <HAL_UART_RxHalfCpltCallback+0xe4>)
 80020fe:	785b      	ldrb	r3, [r3, #1]
 8002100:	2b42      	cmp	r3, #66	@ 0x42
 8002102:	d103      	bne.n	800210c <HAL_UART_RxHalfCpltCallback+0x88>
 8002104:	4b18      	ldr	r3, [pc, #96]	@ (8002168 <HAL_UART_RxHalfCpltCallback+0xe4>)
 8002106:	789b      	ldrb	r3, [r3, #2]
 8002108:	2b43      	cmp	r3, #67	@ 0x43
 800210a:	d007      	beq.n	800211c <HAL_UART_RxHalfCpltCallback+0x98>
		{
			HAL_UART_AbortReceive(&huart4);
 800210c:	4815      	ldr	r0, [pc, #84]	@ (8002164 <HAL_UART_RxHalfCpltCallback+0xe0>)
 800210e:	f006 fb14 	bl	800873a <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX, sizeof(UART4_RX));
 8002112:	2235      	movs	r2, #53	@ 0x35
 8002114:	4914      	ldr	r1, [pc, #80]	@ (8002168 <HAL_UART_RxHalfCpltCallback+0xe4>)
 8002116:	4813      	ldr	r0, [pc, #76]	@ (8002164 <HAL_UART_RxHalfCpltCallback+0xe0>)
 8002118:	f006 faea 	bl	80086f0 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart5)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a13      	ldr	r2, [pc, #76]	@ (800216c <HAL_UART_RxHalfCpltCallback+0xe8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d113      	bne.n	800214c <HAL_UART_RxHalfCpltCallback+0xc8>
	{
		if(!(UART5_RX[0] == 'A' && UART5_RX[1] == 'B' && UART5_RX[2] == 'C'))
 8002124:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <HAL_UART_RxHalfCpltCallback+0xec>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b41      	cmp	r3, #65	@ 0x41
 800212a:	d107      	bne.n	800213c <HAL_UART_RxHalfCpltCallback+0xb8>
 800212c:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <HAL_UART_RxHalfCpltCallback+0xec>)
 800212e:	785b      	ldrb	r3, [r3, #1]
 8002130:	2b42      	cmp	r3, #66	@ 0x42
 8002132:	d103      	bne.n	800213c <HAL_UART_RxHalfCpltCallback+0xb8>
 8002134:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <HAL_UART_RxHalfCpltCallback+0xec>)
 8002136:	789b      	ldrb	r3, [r3, #2]
 8002138:	2b43      	cmp	r3, #67	@ 0x43
 800213a:	d007      	beq.n	800214c <HAL_UART_RxHalfCpltCallback+0xc8>
		{
			HAL_UART_AbortReceive(&huart5);
 800213c:	480b      	ldr	r0, [pc, #44]	@ (800216c <HAL_UART_RxHalfCpltCallback+0xe8>)
 800213e:	f006 fafc 	bl	800873a <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX, sizeof(UART5_RX));
 8002142:	2217      	movs	r2, #23
 8002144:	490a      	ldr	r1, [pc, #40]	@ (8002170 <HAL_UART_RxHalfCpltCallback+0xec>)
 8002146:	4809      	ldr	r0, [pc, #36]	@ (800216c <HAL_UART_RxHalfCpltCallback+0xe8>)
 8002148:	f006 fad2 	bl	80086f0 <HAL_UART_Receive_DMA>
		}
	}


}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	2000091c 	.word	0x2000091c
 8002158:	200003c8 	.word	0x200003c8
 800215c:	20000964 	.word	0x20000964
 8002160:	200003e0 	.word	0x200003e0
 8002164:	20000844 	.word	0x20000844
 8002168:	2000040c 	.word	0x2000040c
 800216c:	2000088c 	.word	0x2000088c
 8002170:	20000444 	.word	0x20000444

08002174 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a19      	ldr	r2, [pc, #100]	@ (80021e4 <HAL_UART_ErrorCallback+0x70>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d107      	bne.n	8002194 <HAL_UART_ErrorCallback+0x20>
	{
		HAL_UART_AbortReceive(&huart2);
 8002184:	4817      	ldr	r0, [pc, #92]	@ (80021e4 <HAL_UART_ErrorCallback+0x70>)
 8002186:	f006 fad8 	bl	800873a <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX, sizeof(UART2_RX));
 800218a:	2217      	movs	r2, #23
 800218c:	4916      	ldr	r1, [pc, #88]	@ (80021e8 <HAL_UART_ErrorCallback+0x74>)
 800218e:	4815      	ldr	r0, [pc, #84]	@ (80021e4 <HAL_UART_ErrorCallback+0x70>)
 8002190:	f006 faae 	bl	80086f0 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart3)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a15      	ldr	r2, [pc, #84]	@ (80021ec <HAL_UART_ErrorCallback+0x78>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d107      	bne.n	80021ac <HAL_UART_ErrorCallback+0x38>
	{
		HAL_UART_AbortReceive(&huart3);
 800219c:	4813      	ldr	r0, [pc, #76]	@ (80021ec <HAL_UART_ErrorCallback+0x78>)
 800219e:	f006 facc 	bl	800873a <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX, sizeof(UART3_RX));
 80021a2:	222b      	movs	r2, #43	@ 0x2b
 80021a4:	4912      	ldr	r1, [pc, #72]	@ (80021f0 <HAL_UART_ErrorCallback+0x7c>)
 80021a6:	4811      	ldr	r0, [pc, #68]	@ (80021ec <HAL_UART_ErrorCallback+0x78>)
 80021a8:	f006 faa2 	bl	80086f0 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart4)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a11      	ldr	r2, [pc, #68]	@ (80021f4 <HAL_UART_ErrorCallback+0x80>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d107      	bne.n	80021c4 <HAL_UART_ErrorCallback+0x50>
	{
		HAL_UART_AbortReceive(&huart4);
 80021b4:	480f      	ldr	r0, [pc, #60]	@ (80021f4 <HAL_UART_ErrorCallback+0x80>)
 80021b6:	f006 fac0 	bl	800873a <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX, sizeof(UART4_RX));
 80021ba:	2235      	movs	r2, #53	@ 0x35
 80021bc:	490e      	ldr	r1, [pc, #56]	@ (80021f8 <HAL_UART_ErrorCallback+0x84>)
 80021be:	480d      	ldr	r0, [pc, #52]	@ (80021f4 <HAL_UART_ErrorCallback+0x80>)
 80021c0:	f006 fa96 	bl	80086f0 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart5)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a0d      	ldr	r2, [pc, #52]	@ (80021fc <HAL_UART_ErrorCallback+0x88>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d107      	bne.n	80021dc <HAL_UART_ErrorCallback+0x68>
	{
		HAL_UART_AbortReceive(&huart5);
 80021cc:	480b      	ldr	r0, [pc, #44]	@ (80021fc <HAL_UART_ErrorCallback+0x88>)
 80021ce:	f006 fab4 	bl	800873a <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX, sizeof(UART5_RX));
 80021d2:	2217      	movs	r2, #23
 80021d4:	490a      	ldr	r1, [pc, #40]	@ (8002200 <HAL_UART_ErrorCallback+0x8c>)
 80021d6:	4809      	ldr	r0, [pc, #36]	@ (80021fc <HAL_UART_ErrorCallback+0x88>)
 80021d8:	f006 fa8a 	bl	80086f0 <HAL_UART_Receive_DMA>
	}

}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	2000091c 	.word	0x2000091c
 80021e8:	200003c8 	.word	0x200003c8
 80021ec:	20000964 	.word	0x20000964
 80021f0:	200003e0 	.word	0x200003e0
 80021f4:	20000844 	.word	0x20000844
 80021f8:	2000040c 	.word	0x2000040c
 80021fc:	2000088c 	.word	0x2000088c
 8002200:	20000444 	.word	0x20000444

08002204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <HAL_MspInit+0x4c>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	4a0f      	ldr	r2, [pc, #60]	@ (8002250 <HAL_MspInit+0x4c>)
 8002214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002218:	6453      	str	r3, [r2, #68]	@ 0x44
 800221a:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <HAL_MspInit+0x4c>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <HAL_MspInit+0x4c>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	4a08      	ldr	r2, [pc, #32]	@ (8002250 <HAL_MspInit+0x4c>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	@ 0x40
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <HAL_MspInit+0x4c>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800

08002254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <NMI_Handler+0x4>

0800225c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <HardFault_Handler+0x4>

08002264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <MemManage_Handler+0x4>

0800226c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <BusFault_Handler+0x4>

08002274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <UsageFault_Handler+0x4>

0800227c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022aa:	f001 ffeb 	bl	8004284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80022b8:	4802      	ldr	r0, [pc, #8]	@ (80022c4 <DMA1_Stream0_IRQHandler+0x10>)
 80022ba:	f002 fe2f 	bl	8004f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000ab4 	.word	0x20000ab4

080022c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80022cc:	4802      	ldr	r0, [pc, #8]	@ (80022d8 <DMA1_Stream1_IRQHandler+0x10>)
 80022ce:	f002 fe25 	bl	8004f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000c34 	.word	0x20000c34

080022dc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80022e0:	4802      	ldr	r0, [pc, #8]	@ (80022ec <DMA1_Stream2_IRQHandler+0x10>)
 80022e2:	f002 fe1b 	bl	8004f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200009f4 	.word	0x200009f4

080022f0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80022f4:	4802      	ldr	r0, [pc, #8]	@ (8002300 <DMA1_Stream3_IRQHandler+0x10>)
 80022f6:	f002 fe11 	bl	8004f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000c94 	.word	0x20000c94

08002304 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002308:	4802      	ldr	r0, [pc, #8]	@ (8002314 <DMA1_Stream4_IRQHandler+0x10>)
 800230a:	f002 fe07 	bl	8004f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000a54 	.word	0x20000a54

08002318 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800231c:	4802      	ldr	r0, [pc, #8]	@ (8002328 <DMA1_Stream5_IRQHandler+0x10>)
 800231e:	f002 fdfd 	bl	8004f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000b74 	.word	0x20000b74

0800232c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002330:	4802      	ldr	r0, [pc, #8]	@ (800233c <DMA1_Stream6_IRQHandler+0x10>)
 8002332:	f002 fdf3 	bl	8004f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000bd4 	.word	0x20000bd4

08002340 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002344:	4802      	ldr	r0, [pc, #8]	@ (8002350 <USART2_IRQHandler+0x10>)
 8002346:	f006 fa9b 	bl	8008880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	2000091c 	.word	0x2000091c

08002354 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002358:	4802      	ldr	r0, [pc, #8]	@ (8002364 <USART3_IRQHandler+0x10>)
 800235a:	f006 fa91 	bl	8008880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000964 	.word	0x20000964

08002368 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800236c:	4802      	ldr	r0, [pc, #8]	@ (8002378 <DMA1_Stream7_IRQHandler+0x10>)
 800236e:	f002 fdd5 	bl	8004f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000b14 	.word	0x20000b14

0800237c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002380:	4802      	ldr	r0, [pc, #8]	@ (800238c <UART4_IRQHandler+0x10>)
 8002382:	f006 fa7d 	bl	8008880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000844 	.word	0x20000844

08002390 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002394:	4802      	ldr	r0, [pc, #8]	@ (80023a0 <UART5_IRQHandler+0x10>)
 8002396:	f006 fa73 	bl	8008880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000088c 	.word	0x2000088c

080023a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023a8:	4802      	ldr	r0, [pc, #8]	@ (80023b4 <TIM6_DAC_IRQHandler+0x10>)
 80023aa:	f005 fc19 	bl	8007be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200005e0 	.word	0x200005e0

080023b8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <DMA2_Stream1_IRQHandler+0x10>)
 80023be:	f002 fdad 	bl	8004f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000cf4 	.word	0x20000cf4

080023cc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80023d0:	4802      	ldr	r0, [pc, #8]	@ (80023dc <DMA2_Stream6_IRQHandler+0x10>)
 80023d2:	f002 fda3 	bl	8004f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000d54 	.word	0x20000d54

080023e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return 1;
 80023e4:	2301      	movs	r3, #1
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_kill>:

int _kill(int pid, int sig)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023fa:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <_kill+0x20>)
 80023fc:	2216      	movs	r2, #22
 80023fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002400:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	2000b3a4 	.word	0x2000b3a4

08002414 <_exit>:

void _exit (int status)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ffe5 	bl	80023f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002426:	bf00      	nop
 8002428:	e7fd      	b.n	8002426 <_exit+0x12>

0800242a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	e00a      	b.n	8002452 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800243c:	f3af 8000 	nop.w
 8002440:	4601      	mov	r1, r0
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	60ba      	str	r2, [r7, #8]
 8002448:	b2ca      	uxtb	r2, r1
 800244a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	3301      	adds	r3, #1
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	dbf0      	blt.n	800243c <_read+0x12>
  }

  return len;
 800245a:	687b      	ldr	r3, [r7, #4]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	e009      	b.n	800248a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	60ba      	str	r2, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	3301      	adds	r3, #1
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	429a      	cmp	r2, r3
 8002490:	dbf1      	blt.n	8002476 <_write+0x12>
  }
  return len;
 8002492:	687b      	ldr	r3, [r7, #4]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <_close>:

int _close(int file)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024c4:	605a      	str	r2, [r3, #4]
  return 0;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <_isatty>:

int _isatty(int file)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024dc:	2301      	movs	r3, #1
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800250c:	4a14      	ldr	r2, [pc, #80]	@ (8002560 <_sbrk+0x5c>)
 800250e:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <_sbrk+0x60>)
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002518:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <_sbrk+0x64>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002520:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <_sbrk+0x64>)
 8002522:	4a12      	ldr	r2, [pc, #72]	@ (800256c <_sbrk+0x68>)
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002526:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <_sbrk+0x64>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	429a      	cmp	r2, r3
 8002532:	d205      	bcs.n	8002540 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002534:	4b0e      	ldr	r3, [pc, #56]	@ (8002570 <_sbrk+0x6c>)
 8002536:	220c      	movs	r2, #12
 8002538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	e009      	b.n	8002554 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002540:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <_sbrk+0x64>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002546:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <_sbrk+0x64>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	4a06      	ldr	r2, [pc, #24]	@ (8002568 <_sbrk+0x64>)
 8002550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002552:	68fb      	ldr	r3, [r7, #12]
}
 8002554:	4618      	mov	r0, r3
 8002556:	371c      	adds	r7, #28
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	20020000 	.word	0x20020000
 8002564:	00000400 	.word	0x00000400
 8002568:	20000474 	.word	0x20000474
 800256c:	2000b3b8 	.word	0x2000b3b8
 8002570:	2000b3a4 	.word	0x2000b3a4

08002574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002578:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <SystemInit+0x20>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	4a05      	ldr	r2, [pc, #20]	@ (8002594 <SystemInit+0x20>)
 8002580:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002584:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08c      	sub	sp, #48	@ 0x30
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800259e:	f107 030c 	add.w	r3, r7, #12
 80025a2:	2224      	movs	r2, #36	@ 0x24
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f012 f929 	bl	80147fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025b4:	4b22      	ldr	r3, [pc, #136]	@ (8002640 <MX_TIM1_Init+0xa8>)
 80025b6:	4a23      	ldr	r2, [pc, #140]	@ (8002644 <MX_TIM1_Init+0xac>)
 80025b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80025ba:	4b21      	ldr	r3, [pc, #132]	@ (8002640 <MX_TIM1_Init+0xa8>)
 80025bc:	2200      	movs	r2, #0
 80025be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002640 <MX_TIM1_Init+0xa8>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80025c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002640 <MX_TIM1_Init+0xa8>)
 80025c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002640 <MX_TIM1_Init+0xa8>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <MX_TIM1_Init+0xa8>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025da:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <MX_TIM1_Init+0xa8>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80025e0:	2301      	movs	r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025e8:	2301      	movs	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025f8:	2301      	movs	r3, #1
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	4619      	mov	r1, r3
 800260a:	480d      	ldr	r0, [pc, #52]	@ (8002640 <MX_TIM1_Init+0xa8>)
 800260c:	f005 f9b4 	bl	8007978 <HAL_TIM_Encoder_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002616:	f7ff f861 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	4619      	mov	r1, r3
 8002626:	4806      	ldr	r0, [pc, #24]	@ (8002640 <MX_TIM1_Init+0xa8>)
 8002628:	f005 ff30 	bl	800848c <HAL_TIMEx_MasterConfigSynchronization>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002632:	f7ff f853 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	3730      	adds	r7, #48	@ 0x30
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000478 	.word	0x20000478
 8002644:	40010000 	.word	0x40010000

08002648 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08c      	sub	sp, #48	@ 0x30
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800264e:	f107 030c 	add.w	r3, r7, #12
 8002652:	2224      	movs	r2, #36	@ 0x24
 8002654:	2100      	movs	r1, #0
 8002656:	4618      	mov	r0, r3
 8002658:	f012 f8d1 	bl	80147fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002664:	4b21      	ldr	r3, [pc, #132]	@ (80026ec <MX_TIM2_Init+0xa4>)
 8002666:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800266a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800266c:	4b1f      	ldr	r3, [pc, #124]	@ (80026ec <MX_TIM2_Init+0xa4>)
 800266e:	2200      	movs	r2, #0
 8002670:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002672:	4b1e      	ldr	r3, [pc, #120]	@ (80026ec <MX_TIM2_Init+0xa4>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002678:	4b1c      	ldr	r3, [pc, #112]	@ (80026ec <MX_TIM2_Init+0xa4>)
 800267a:	f04f 32ff 	mov.w	r2, #4294967295
 800267e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002680:	4b1a      	ldr	r3, [pc, #104]	@ (80026ec <MX_TIM2_Init+0xa4>)
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002686:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <MX_TIM2_Init+0xa4>)
 8002688:	2200      	movs	r2, #0
 800268a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800268c:	2301      	movs	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002694:	2301      	movs	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026a0:	2300      	movs	r3, #0
 80026a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026a4:	2301      	movs	r3, #1
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	4619      	mov	r1, r3
 80026b6:	480d      	ldr	r0, [pc, #52]	@ (80026ec <MX_TIM2_Init+0xa4>)
 80026b8:	f005 f95e 	bl	8007978 <HAL_TIM_Encoder_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80026c2:	f7ff f80b 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	4619      	mov	r1, r3
 80026d2:	4806      	ldr	r0, [pc, #24]	@ (80026ec <MX_TIM2_Init+0xa4>)
 80026d4:	f005 feda 	bl	800848c <HAL_TIMEx_MasterConfigSynchronization>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80026de:	f7fe fffd 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	3730      	adds	r7, #48	@ 0x30
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	200004c0 	.word	0x200004c0

080026f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08c      	sub	sp, #48	@ 0x30
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026f6:	f107 030c 	add.w	r3, r7, #12
 80026fa:	2224      	movs	r2, #36	@ 0x24
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f012 f87d 	bl	80147fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800270c:	4b20      	ldr	r3, [pc, #128]	@ (8002790 <MX_TIM3_Init+0xa0>)
 800270e:	4a21      	ldr	r2, [pc, #132]	@ (8002794 <MX_TIM3_Init+0xa4>)
 8002710:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002712:	4b1f      	ldr	r3, [pc, #124]	@ (8002790 <MX_TIM3_Init+0xa0>)
 8002714:	2200      	movs	r2, #0
 8002716:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002718:	4b1d      	ldr	r3, [pc, #116]	@ (8002790 <MX_TIM3_Init+0xa0>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800271e:	4b1c      	ldr	r3, [pc, #112]	@ (8002790 <MX_TIM3_Init+0xa0>)
 8002720:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002724:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002726:	4b1a      	ldr	r3, [pc, #104]	@ (8002790 <MX_TIM3_Init+0xa0>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272c:	4b18      	ldr	r3, [pc, #96]	@ (8002790 <MX_TIM3_Init+0xa0>)
 800272e:	2200      	movs	r2, #0
 8002730:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002732:	2301      	movs	r3, #1
 8002734:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800273a:	2301      	movs	r3, #1
 800273c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800274a:	2301      	movs	r3, #1
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800274e:	2300      	movs	r3, #0
 8002750:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002756:	f107 030c 	add.w	r3, r7, #12
 800275a:	4619      	mov	r1, r3
 800275c:	480c      	ldr	r0, [pc, #48]	@ (8002790 <MX_TIM3_Init+0xa0>)
 800275e:	f005 f90b 	bl	8007978 <HAL_TIM_Encoder_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002768:	f7fe ffb8 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800276c:	2300      	movs	r3, #0
 800276e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002774:	1d3b      	adds	r3, r7, #4
 8002776:	4619      	mov	r1, r3
 8002778:	4805      	ldr	r0, [pc, #20]	@ (8002790 <MX_TIM3_Init+0xa0>)
 800277a:	f005 fe87 	bl	800848c <HAL_TIMEx_MasterConfigSynchronization>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002784:	f7fe ffaa 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002788:	bf00      	nop
 800278a:	3730      	adds	r7, #48	@ 0x30
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000508 	.word	0x20000508
 8002794:	40000400 	.word	0x40000400

08002798 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08c      	sub	sp, #48	@ 0x30
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800279e:	f107 030c 	add.w	r3, r7, #12
 80027a2:	2224      	movs	r2, #36	@ 0x24
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f012 f829 	bl	80147fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027b4:	4b20      	ldr	r3, [pc, #128]	@ (8002838 <MX_TIM4_Init+0xa0>)
 80027b6:	4a21      	ldr	r2, [pc, #132]	@ (800283c <MX_TIM4_Init+0xa4>)
 80027b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80027ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002838 <MX_TIM4_Init+0xa0>)
 80027bc:	2200      	movs	r2, #0
 80027be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002838 <MX_TIM4_Init+0xa0>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80027c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002838 <MX_TIM4_Init+0xa0>)
 80027c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002838 <MX_TIM4_Init+0xa0>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d4:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <MX_TIM4_Init+0xa0>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80027da:	2301      	movs	r3, #1
 80027dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027e2:	2301      	movs	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027f2:	2301      	movs	r3, #1
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80027fe:	f107 030c 	add.w	r3, r7, #12
 8002802:	4619      	mov	r1, r3
 8002804:	480c      	ldr	r0, [pc, #48]	@ (8002838 <MX_TIM4_Init+0xa0>)
 8002806:	f005 f8b7 	bl	8007978 <HAL_TIM_Encoder_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002810:	f7fe ff64 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002814:	2300      	movs	r3, #0
 8002816:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	4619      	mov	r1, r3
 8002820:	4805      	ldr	r0, [pc, #20]	@ (8002838 <MX_TIM4_Init+0xa0>)
 8002822:	f005 fe33 	bl	800848c <HAL_TIMEx_MasterConfigSynchronization>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800282c:	f7fe ff56 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002830:	bf00      	nop
 8002832:	3730      	adds	r7, #48	@ 0x30
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000550 	.word	0x20000550
 800283c:	40000800 	.word	0x40000800

08002840 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	@ 0x28
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002846:	f107 0320 	add.w	r3, r7, #32
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	60da      	str	r2, [r3, #12]
 800285c:	611a      	str	r2, [r3, #16]
 800285e:	615a      	str	r2, [r3, #20]
 8002860:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002862:	4b27      	ldr	r3, [pc, #156]	@ (8002900 <MX_TIM5_Init+0xc0>)
 8002864:	4a27      	ldr	r2, [pc, #156]	@ (8002904 <MX_TIM5_Init+0xc4>)
 8002866:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8002868:	4b25      	ldr	r3, [pc, #148]	@ (8002900 <MX_TIM5_Init+0xc0>)
 800286a:	2253      	movs	r2, #83	@ 0x53
 800286c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286e:	4b24      	ldr	r3, [pc, #144]	@ (8002900 <MX_TIM5_Init+0xc0>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002874:	4b22      	ldr	r3, [pc, #136]	@ (8002900 <MX_TIM5_Init+0xc0>)
 8002876:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800287a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800287c:	4b20      	ldr	r3, [pc, #128]	@ (8002900 <MX_TIM5_Init+0xc0>)
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002882:	4b1f      	ldr	r3, [pc, #124]	@ (8002900 <MX_TIM5_Init+0xc0>)
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002888:	481d      	ldr	r0, [pc, #116]	@ (8002900 <MX_TIM5_Init+0xc0>)
 800288a:	f004 ff5d 	bl	8007748 <HAL_TIM_PWM_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002894:	f7fe ff22 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002898:	2300      	movs	r3, #0
 800289a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80028a0:	f107 0320 	add.w	r3, r7, #32
 80028a4:	4619      	mov	r1, r3
 80028a6:	4816      	ldr	r0, [pc, #88]	@ (8002900 <MX_TIM5_Init+0xc0>)
 80028a8:	f005 fdf0 	bl	800848c <HAL_TIMEx_MasterConfigSynchronization>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80028b2:	f7fe ff13 	bl	80016dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028b6:	2360      	movs	r3, #96	@ 0x60
 80028b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	2200      	movs	r2, #0
 80028ca:	4619      	mov	r1, r3
 80028cc:	480c      	ldr	r0, [pc, #48]	@ (8002900 <MX_TIM5_Init+0xc0>)
 80028ce:	f005 fa77 	bl	8007dc0 <HAL_TIM_PWM_ConfigChannel>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80028d8:	f7fe ff00 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	220c      	movs	r2, #12
 80028e0:	4619      	mov	r1, r3
 80028e2:	4807      	ldr	r0, [pc, #28]	@ (8002900 <MX_TIM5_Init+0xc0>)
 80028e4:	f005 fa6c 	bl	8007dc0 <HAL_TIM_PWM_ConfigChannel>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80028ee:	f7fe fef5 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80028f2:	4803      	ldr	r0, [pc, #12]	@ (8002900 <MX_TIM5_Init+0xc0>)
 80028f4:	f000 fc22 	bl	800313c <HAL_TIM_MspPostInit>

}
 80028f8:	bf00      	nop
 80028fa:	3728      	adds	r7, #40	@ 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000598 	.word	0x20000598
 8002904:	40000c00 	.word	0x40000c00

08002908 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800290e:	463b      	mov	r3, r7
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002916:	4b15      	ldr	r3, [pc, #84]	@ (800296c <MX_TIM6_Init+0x64>)
 8002918:	4a15      	ldr	r2, [pc, #84]	@ (8002970 <MX_TIM6_Init+0x68>)
 800291a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 168-1;
 800291c:	4b13      	ldr	r3, [pc, #76]	@ (800296c <MX_TIM6_Init+0x64>)
 800291e:	22a7      	movs	r2, #167	@ 0xa7
 8002920:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002922:	4b12      	ldr	r3, [pc, #72]	@ (800296c <MX_TIM6_Init+0x64>)
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 8002928:	4b10      	ldr	r3, [pc, #64]	@ (800296c <MX_TIM6_Init+0x64>)
 800292a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800292e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002930:	4b0e      	ldr	r3, [pc, #56]	@ (800296c <MX_TIM6_Init+0x64>)
 8002932:	2200      	movs	r2, #0
 8002934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002936:	480d      	ldr	r0, [pc, #52]	@ (800296c <MX_TIM6_Init+0x64>)
 8002938:	f004 fe46 	bl	80075c8 <HAL_TIM_Base_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002942:	f7fe fecb 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800294e:	463b      	mov	r3, r7
 8002950:	4619      	mov	r1, r3
 8002952:	4806      	ldr	r0, [pc, #24]	@ (800296c <MX_TIM6_Init+0x64>)
 8002954:	f005 fd9a 	bl	800848c <HAL_TIMEx_MasterConfigSynchronization>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800295e:	f7fe febd 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200005e0 	.word	0x200005e0
 8002970:	40001000 	.word	0x40001000

08002974 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b092      	sub	sp, #72	@ 0x48
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
 8002994:	615a      	str	r2, [r3, #20]
 8002996:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	2220      	movs	r2, #32
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f011 ff2d 	bl	80147fe <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80029a4:	4b33      	ldr	r3, [pc, #204]	@ (8002a74 <MX_TIM8_Init+0x100>)
 80029a6:	4a34      	ldr	r2, [pc, #208]	@ (8002a78 <MX_TIM8_Init+0x104>)
 80029a8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 80029aa:	4b32      	ldr	r3, [pc, #200]	@ (8002a74 <MX_TIM8_Init+0x100>)
 80029ac:	22a7      	movs	r2, #167	@ 0xa7
 80029ae:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b0:	4b30      	ldr	r3, [pc, #192]	@ (8002a74 <MX_TIM8_Init+0x100>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 80029b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002a74 <MX_TIM8_Init+0x100>)
 80029b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029bc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029be:	4b2d      	ldr	r3, [pc, #180]	@ (8002a74 <MX_TIM8_Init+0x100>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80029c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a74 <MX_TIM8_Init+0x100>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002a74 <MX_TIM8_Init+0x100>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80029d0:	4828      	ldr	r0, [pc, #160]	@ (8002a74 <MX_TIM8_Init+0x100>)
 80029d2:	f004 feb9 	bl	8007748 <HAL_TIM_PWM_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80029dc:	f7fe fe7e 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e0:	2300      	movs	r3, #0
 80029e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80029e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80029ec:	4619      	mov	r1, r3
 80029ee:	4821      	ldr	r0, [pc, #132]	@ (8002a74 <MX_TIM8_Init+0x100>)
 80029f0:	f005 fd4c 	bl	800848c <HAL_TIMEx_MasterConfigSynchronization>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80029fa:	f7fe fe6f 	bl	80016dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029fe:	2360      	movs	r3, #96	@ 0x60
 8002a00:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a1e:	2208      	movs	r2, #8
 8002a20:	4619      	mov	r1, r3
 8002a22:	4814      	ldr	r0, [pc, #80]	@ (8002a74 <MX_TIM8_Init+0x100>)
 8002a24:	f005 f9cc 	bl	8007dc0 <HAL_TIM_PWM_ConfigChannel>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002a2e:	f7fe fe55 	bl	80016dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	4619      	mov	r1, r3
 8002a54:	4807      	ldr	r0, [pc, #28]	@ (8002a74 <MX_TIM8_Init+0x100>)
 8002a56:	f005 fd95 	bl	8008584 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8002a60:	f7fe fe3c 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002a64:	4803      	ldr	r0, [pc, #12]	@ (8002a74 <MX_TIM8_Init+0x100>)
 8002a66:	f000 fb69 	bl	800313c <HAL_TIM_MspPostInit>

}
 8002a6a:	bf00      	nop
 8002a6c:	3748      	adds	r7, #72	@ 0x48
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000628 	.word	0x20000628
 8002a78:	40010400 	.word	0x40010400

08002a7c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a82:	1d3b      	adds	r3, r7, #4
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
 8002a90:	615a      	str	r2, [r3, #20]
 8002a92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002a94:	4b1f      	ldr	r3, [pc, #124]	@ (8002b14 <MX_TIM9_Init+0x98>)
 8002a96:	4a20      	ldr	r2, [pc, #128]	@ (8002b18 <MX_TIM9_Init+0x9c>)
 8002a98:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 8002a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b14 <MX_TIM9_Init+0x98>)
 8002a9c:	22a7      	movs	r2, #167	@ 0xa7
 8002a9e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b14 <MX_TIM9_Init+0x98>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b14 <MX_TIM9_Init+0x98>)
 8002aa8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002aac:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aae:	4b19      	ldr	r3, [pc, #100]	@ (8002b14 <MX_TIM9_Init+0x98>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab4:	4b17      	ldr	r3, [pc, #92]	@ (8002b14 <MX_TIM9_Init+0x98>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002aba:	4816      	ldr	r0, [pc, #88]	@ (8002b14 <MX_TIM9_Init+0x98>)
 8002abc:	f004 fe44 	bl	8007748 <HAL_TIM_PWM_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8002ac6:	f7fe fe09 	bl	80016dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aca:	2360      	movs	r3, #96	@ 0x60
 8002acc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	2200      	movs	r2, #0
 8002ade:	4619      	mov	r1, r3
 8002ae0:	480c      	ldr	r0, [pc, #48]	@ (8002b14 <MX_TIM9_Init+0x98>)
 8002ae2:	f005 f96d 	bl	8007dc0 <HAL_TIM_PWM_ConfigChannel>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8002aec:	f7fe fdf6 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	2204      	movs	r2, #4
 8002af4:	4619      	mov	r1, r3
 8002af6:	4807      	ldr	r0, [pc, #28]	@ (8002b14 <MX_TIM9_Init+0x98>)
 8002af8:	f005 f962 	bl	8007dc0 <HAL_TIM_PWM_ConfigChannel>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002b02:	f7fe fdeb 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002b06:	4803      	ldr	r0, [pc, #12]	@ (8002b14 <MX_TIM9_Init+0x98>)
 8002b08:	f000 fb18 	bl	800313c <HAL_TIM_MspPostInit>

}
 8002b0c:	bf00      	nop
 8002b0e:	3720      	adds	r7, #32
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000670 	.word	0x20000670
 8002b18:	40014000 	.word	0x40014000

08002b1c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b22:	1d3b      	adds	r3, r7, #4
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
 8002b30:	615a      	str	r2, [r3, #20]
 8002b32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002b34:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb0 <MX_TIM10_Init+0x94>)
 8002b36:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb4 <MX_TIM10_Init+0x98>)
 8002b38:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8002b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <MX_TIM10_Init+0x94>)
 8002b3c:	22a7      	movs	r2, #167	@ 0xa7
 8002b3e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b40:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb0 <MX_TIM10_Init+0x94>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8002b46:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb0 <MX_TIM10_Init+0x94>)
 8002b48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b4c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4e:	4b18      	ldr	r3, [pc, #96]	@ (8002bb0 <MX_TIM10_Init+0x94>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b54:	4b16      	ldr	r3, [pc, #88]	@ (8002bb0 <MX_TIM10_Init+0x94>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002b5a:	4815      	ldr	r0, [pc, #84]	@ (8002bb0 <MX_TIM10_Init+0x94>)
 8002b5c:	f004 fd34 	bl	80075c8 <HAL_TIM_Base_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002b66:	f7fe fdb9 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002b6a:	4811      	ldr	r0, [pc, #68]	@ (8002bb0 <MX_TIM10_Init+0x94>)
 8002b6c:	f004 fdec 	bl	8007748 <HAL_TIM_PWM_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002b76:	f7fe fdb1 	bl	80016dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b7a:	2360      	movs	r3, #96	@ 0x60
 8002b7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4807      	ldr	r0, [pc, #28]	@ (8002bb0 <MX_TIM10_Init+0x94>)
 8002b92:	f005 f915 	bl	8007dc0 <HAL_TIM_PWM_ConfigChannel>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002b9c:	f7fe fd9e 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002ba0:	4803      	ldr	r0, [pc, #12]	@ (8002bb0 <MX_TIM10_Init+0x94>)
 8002ba2:	f000 facb 	bl	800313c <HAL_TIM_MspPostInit>

}
 8002ba6:	bf00      	nop
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200006b8 	.word	0x200006b8
 8002bb4:	40014400 	.word	0x40014400

08002bb8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bbe:	1d3b      	adds	r3, r7, #4
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
 8002bcc:	615a      	str	r2, [r3, #20]
 8002bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c4c <MX_TIM11_Init+0x94>)
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c50 <MX_TIM11_Init+0x98>)
 8002bd4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c4c <MX_TIM11_Init+0x94>)
 8002bd8:	22a7      	movs	r2, #167	@ 0xa7
 8002bda:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <MX_TIM11_Init+0x94>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8002be2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c4c <MX_TIM11_Init+0x94>)
 8002be4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002be8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bea:	4b18      	ldr	r3, [pc, #96]	@ (8002c4c <MX_TIM11_Init+0x94>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf0:	4b16      	ldr	r3, [pc, #88]	@ (8002c4c <MX_TIM11_Init+0x94>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002bf6:	4815      	ldr	r0, [pc, #84]	@ (8002c4c <MX_TIM11_Init+0x94>)
 8002bf8:	f004 fce6 	bl	80075c8 <HAL_TIM_Base_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002c02:	f7fe fd6b 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002c06:	4811      	ldr	r0, [pc, #68]	@ (8002c4c <MX_TIM11_Init+0x94>)
 8002c08:	f004 fd9e 	bl	8007748 <HAL_TIM_PWM_Init>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002c12:	f7fe fd63 	bl	80016dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c16:	2360      	movs	r3, #96	@ 0x60
 8002c18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	2200      	movs	r2, #0
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4807      	ldr	r0, [pc, #28]	@ (8002c4c <MX_TIM11_Init+0x94>)
 8002c2e:	f005 f8c7 	bl	8007dc0 <HAL_TIM_PWM_ConfigChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002c38:	f7fe fd50 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002c3c:	4803      	ldr	r0, [pc, #12]	@ (8002c4c <MX_TIM11_Init+0x94>)
 8002c3e:	f000 fa7d 	bl	800313c <HAL_TIM_MspPostInit>

}
 8002c42:	bf00      	nop
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000700 	.word	0x20000700
 8002c50:	40014800 	.word	0x40014800

08002c54 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
 8002c68:	615a      	str	r2, [r3, #20]
 8002c6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cec <MX_TIM12_Init+0x98>)
 8002c6e:	4a20      	ldr	r2, [pc, #128]	@ (8002cf0 <MX_TIM12_Init+0x9c>)
 8002c70:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 8002c72:	4b1e      	ldr	r3, [pc, #120]	@ (8002cec <MX_TIM12_Init+0x98>)
 8002c74:	2253      	movs	r2, #83	@ 0x53
 8002c76:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c78:	4b1c      	ldr	r3, [pc, #112]	@ (8002cec <MX_TIM12_Init+0x98>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <MX_TIM12_Init+0x98>)
 8002c80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c84:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c86:	4b19      	ldr	r3, [pc, #100]	@ (8002cec <MX_TIM12_Init+0x98>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c8c:	4b17      	ldr	r3, [pc, #92]	@ (8002cec <MX_TIM12_Init+0x98>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002c92:	4816      	ldr	r0, [pc, #88]	@ (8002cec <MX_TIM12_Init+0x98>)
 8002c94:	f004 fd58 	bl	8007748 <HAL_TIM_PWM_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002c9e:	f7fe fd1d 	bl	80016dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ca2:	2360      	movs	r3, #96	@ 0x60
 8002ca4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cb2:	1d3b      	adds	r3, r7, #4
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	480c      	ldr	r0, [pc, #48]	@ (8002cec <MX_TIM12_Init+0x98>)
 8002cba:	f005 f881 	bl	8007dc0 <HAL_TIM_PWM_ConfigChannel>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002cc4:	f7fe fd0a 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	2204      	movs	r2, #4
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4807      	ldr	r0, [pc, #28]	@ (8002cec <MX_TIM12_Init+0x98>)
 8002cd0:	f005 f876 	bl	8007dc0 <HAL_TIM_PWM_ConfigChannel>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8002cda:	f7fe fcff 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002cde:	4803      	ldr	r0, [pc, #12]	@ (8002cec <MX_TIM12_Init+0x98>)
 8002ce0:	f000 fa2c 	bl	800313c <HAL_TIM_MspPostInit>

}
 8002ce4:	bf00      	nop
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000748 	.word	0x20000748
 8002cf0:	40001800 	.word	0x40001800

08002cf4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	611a      	str	r2, [r3, #16]
 8002d08:	615a      	str	r2, [r3, #20]
 8002d0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002d88 <MX_TIM13_Init+0x94>)
 8002d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002d8c <MX_TIM13_Init+0x98>)
 8002d10:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 8002d12:	4b1d      	ldr	r3, [pc, #116]	@ (8002d88 <MX_TIM13_Init+0x94>)
 8002d14:	2253      	movs	r2, #83	@ 0x53
 8002d16:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d18:	4b1b      	ldr	r3, [pc, #108]	@ (8002d88 <MX_TIM13_Init+0x94>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d88 <MX_TIM13_Init+0x94>)
 8002d20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d24:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d26:	4b18      	ldr	r3, [pc, #96]	@ (8002d88 <MX_TIM13_Init+0x94>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d2c:	4b16      	ldr	r3, [pc, #88]	@ (8002d88 <MX_TIM13_Init+0x94>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002d32:	4815      	ldr	r0, [pc, #84]	@ (8002d88 <MX_TIM13_Init+0x94>)
 8002d34:	f004 fc48 	bl	80075c8 <HAL_TIM_Base_Init>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002d3e:	f7fe fccd 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002d42:	4811      	ldr	r0, [pc, #68]	@ (8002d88 <MX_TIM13_Init+0x94>)
 8002d44:	f004 fd00 	bl	8007748 <HAL_TIM_PWM_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002d4e:	f7fe fcc5 	bl	80016dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d52:	2360      	movs	r3, #96	@ 0x60
 8002d54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	2200      	movs	r2, #0
 8002d66:	4619      	mov	r1, r3
 8002d68:	4807      	ldr	r0, [pc, #28]	@ (8002d88 <MX_TIM13_Init+0x94>)
 8002d6a:	f005 f829 	bl	8007dc0 <HAL_TIM_PWM_ConfigChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002d74:	f7fe fcb2 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002d78:	4803      	ldr	r0, [pc, #12]	@ (8002d88 <MX_TIM13_Init+0x94>)
 8002d7a:	f000 f9df 	bl	800313c <HAL_TIM_MspPostInit>

}
 8002d7e:	bf00      	nop
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000790 	.word	0x20000790
 8002d8c:	40001c00 	.word	0x40001c00

08002d90 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b090      	sub	sp, #64	@ 0x40
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a74      	ldr	r2, [pc, #464]	@ (8002f80 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d12d      	bne.n	8002e0e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002db6:	4b73      	ldr	r3, [pc, #460]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dba:	4a72      	ldr	r2, [pc, #456]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dc2:	4b70      	ldr	r3, [pc, #448]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	4a6b      	ldr	r2, [pc, #428]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002dd8:	f043 0310 	orr.w	r3, r3, #16
 8002ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dde:	4b69      	ldr	r3, [pc, #420]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002dea:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df0:	2302      	movs	r3, #2
 8002df2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e04:	4619      	mov	r1, r3
 8002e06:	4860      	ldr	r0, [pc, #384]	@ (8002f88 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8002e08:	f003 fc32 	bl	8006670 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002e0c:	e0b4      	b.n	8002f78 <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(tim_encoderHandle->Instance==TIM2)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e16:	d14b      	bne.n	8002eb0 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e18:	2300      	movs	r3, #0
 8002e1a:	623b      	str	r3, [r7, #32]
 8002e1c:	4b59      	ldr	r3, [pc, #356]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	4a58      	ldr	r2, [pc, #352]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e28:	4b56      	ldr	r3, [pc, #344]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	623b      	str	r3, [r7, #32]
 8002e32:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	4b52      	ldr	r3, [pc, #328]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3c:	4a51      	ldr	r2, [pc, #324]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e44:	4b4f      	ldr	r3, [pc, #316]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e50:	2300      	movs	r3, #0
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	4b4b      	ldr	r3, [pc, #300]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	4a4a      	ldr	r2, [pc, #296]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e60:	4b48      	ldr	r3, [pc, #288]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e86:	4619      	mov	r1, r3
 8002e88:	4840      	ldr	r0, [pc, #256]	@ (8002f8c <HAL_TIM_Encoder_MspInit+0x1fc>)
 8002e8a:	f003 fbf1 	bl	8006670 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e8e:	2308      	movs	r3, #8
 8002e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e92:	2302      	movs	r3, #2
 8002e94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4839      	ldr	r0, [pc, #228]	@ (8002f90 <HAL_TIM_Encoder_MspInit+0x200>)
 8002eaa:	f003 fbe1 	bl	8006670 <HAL_GPIO_Init>
}
 8002eae:	e063      	b.n	8002f78 <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(tim_encoderHandle->Instance==TIM3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a37      	ldr	r2, [pc, #220]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0x204>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d12c      	bne.n	8002f14 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	4b31      	ldr	r3, [pc, #196]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	4a30      	ldr	r2, [pc, #192]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eca:	4b2e      	ldr	r3, [pc, #184]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	4b2a      	ldr	r3, [pc, #168]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	4a29      	ldr	r2, [pc, #164]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee6:	4b27      	ldr	r3, [pc, #156]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002ef2:	2330      	movs	r3, #48	@ 0x30
 8002ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efe:	2300      	movs	r3, #0
 8002f00:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f02:	2302      	movs	r3, #2
 8002f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4820      	ldr	r0, [pc, #128]	@ (8002f90 <HAL_TIM_Encoder_MspInit+0x200>)
 8002f0e:	f003 fbaf 	bl	8006670 <HAL_GPIO_Init>
}
 8002f12:	e031      	b.n	8002f78 <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(tim_encoderHandle->Instance==TIM4)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1f      	ldr	r2, [pc, #124]	@ (8002f98 <HAL_TIM_Encoder_MspInit+0x208>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d12c      	bne.n	8002f78 <HAL_TIM_Encoder_MspInit+0x1e8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	4b18      	ldr	r3, [pc, #96]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	4a17      	ldr	r2, [pc, #92]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f2e:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	4a10      	ldr	r2, [pc, #64]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002f44:	f043 0308 	orr.w	r3, r3, #8
 8002f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f84 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002f56:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f64:	2300      	movs	r3, #0
 8002f66:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f70:	4619      	mov	r1, r3
 8002f72:	480a      	ldr	r0, [pc, #40]	@ (8002f9c <HAL_TIM_Encoder_MspInit+0x20c>)
 8002f74:	f003 fb7c 	bl	8006670 <HAL_GPIO_Init>
}
 8002f78:	bf00      	nop
 8002f7a:	3740      	adds	r7, #64	@ 0x40
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40010000 	.word	0x40010000
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40020000 	.word	0x40020000
 8002f90:	40020400 	.word	0x40020400
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40000800 	.word	0x40000800
 8002f9c:	40020c00 	.word	0x40020c00

08002fa0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a29      	ldr	r2, [pc, #164]	@ (8003054 <HAL_TIM_PWM_MspInit+0xb4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	4b28      	ldr	r3, [pc, #160]	@ (8003058 <HAL_TIM_PWM_MspInit+0xb8>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	4a27      	ldr	r2, [pc, #156]	@ (8003058 <HAL_TIM_PWM_MspInit+0xb8>)
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fc2:	4b25      	ldr	r3, [pc, #148]	@ (8003058 <HAL_TIM_PWM_MspInit+0xb8>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002fce:	e03a      	b.n	8003046 <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM8)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a21      	ldr	r2, [pc, #132]	@ (800305c <HAL_TIM_PWM_MspInit+0xbc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	4b1e      	ldr	r3, [pc, #120]	@ (8003058 <HAL_TIM_PWM_MspInit+0xb8>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe2:	4a1d      	ldr	r2, [pc, #116]	@ (8003058 <HAL_TIM_PWM_MspInit+0xb8>)
 8002fe4:	f043 0302 	orr.w	r3, r3, #2
 8002fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fea:	4b1b      	ldr	r3, [pc, #108]	@ (8003058 <HAL_TIM_PWM_MspInit+0xb8>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
}
 8002ff6:	e026      	b.n	8003046 <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM9)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a18      	ldr	r2, [pc, #96]	@ (8003060 <HAL_TIM_PWM_MspInit+0xc0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d10e      	bne.n	8003020 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	4b14      	ldr	r3, [pc, #80]	@ (8003058 <HAL_TIM_PWM_MspInit+0xb8>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300a:	4a13      	ldr	r2, [pc, #76]	@ (8003058 <HAL_TIM_PWM_MspInit+0xb8>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003010:	6453      	str	r3, [r2, #68]	@ 0x44
 8003012:	4b11      	ldr	r3, [pc, #68]	@ (8003058 <HAL_TIM_PWM_MspInit+0xb8>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
}
 800301e:	e012      	b.n	8003046 <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM12)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0f      	ldr	r2, [pc, #60]	@ (8003064 <HAL_TIM_PWM_MspInit+0xc4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d10d      	bne.n	8003046 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <HAL_TIM_PWM_MspInit+0xb8>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	4a09      	ldr	r2, [pc, #36]	@ (8003058 <HAL_TIM_PWM_MspInit+0xb8>)
 8003034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003038:	6413      	str	r3, [r2, #64]	@ 0x40
 800303a:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <HAL_TIM_PWM_MspInit+0xb8>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	68bb      	ldr	r3, [r7, #8]
}
 8003046:	bf00      	nop
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40000c00 	.word	0x40000c00
 8003058:	40023800 	.word	0x40023800
 800305c:	40010400 	.word	0x40010400
 8003060:	40014000 	.word	0x40014000
 8003064:	40001800 	.word	0x40001800

08003068 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a2c      	ldr	r2, [pc, #176]	@ (8003128 <HAL_TIM_Base_MspInit+0xc0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d116      	bne.n	80030a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	4b2b      	ldr	r3, [pc, #172]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	4a2a      	ldr	r2, [pc, #168]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 8003084:	f043 0310 	orr.w	r3, r3, #16
 8003088:	6413      	str	r3, [r2, #64]	@ 0x40
 800308a:	4b28      	ldr	r3, [pc, #160]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003096:	2200      	movs	r2, #0
 8003098:	2100      	movs	r1, #0
 800309a:	2036      	movs	r0, #54	@ 0x36
 800309c:	f001 fd6f 	bl	8004b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80030a0:	2036      	movs	r0, #54	@ 0x36
 80030a2:	f001 fd88 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80030a6:	e03a      	b.n	800311e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a20      	ldr	r2, [pc, #128]	@ (8003130 <HAL_TIM_Base_MspInit+0xc8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10e      	bne.n	80030d0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	4b1d      	ldr	r3, [pc, #116]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ba:	4a1c      	ldr	r2, [pc, #112]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 80030bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030c2:	4b1a      	ldr	r3, [pc, #104]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	693b      	ldr	r3, [r7, #16]
}
 80030ce:	e026      	b.n	800311e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a17      	ldr	r2, [pc, #92]	@ (8003134 <HAL_TIM_Base_MspInit+0xcc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10e      	bne.n	80030f8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	4b13      	ldr	r3, [pc, #76]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	4a12      	ldr	r2, [pc, #72]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 80030e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ea:	4b10      	ldr	r3, [pc, #64]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
}
 80030f6:	e012      	b.n	800311e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM13)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003138 <HAL_TIM_Base_MspInit+0xd0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10d      	bne.n	800311e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	4b09      	ldr	r3, [pc, #36]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	4a08      	ldr	r2, [pc, #32]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 800310c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003110:	6413      	str	r3, [r2, #64]	@ 0x40
 8003112:	4b06      	ldr	r3, [pc, #24]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
}
 800311e:	bf00      	nop
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40001000 	.word	0x40001000
 800312c:	40023800 	.word	0x40023800
 8003130:	40014400 	.word	0x40014400
 8003134:	40014800 	.word	0x40014800
 8003138:	40001c00 	.word	0x40001c00

0800313c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08e      	sub	sp, #56	@ 0x38
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a80      	ldr	r2, [pc, #512]	@ (800335c <HAL_TIM_MspPostInit+0x220>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d11e      	bne.n	800319c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	623b      	str	r3, [r7, #32]
 8003162:	4b7f      	ldr	r3, [pc, #508]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	4a7e      	ldr	r2, [pc, #504]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6313      	str	r3, [r2, #48]	@ 0x30
 800316e:	4b7c      	ldr	r3, [pc, #496]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	623b      	str	r3, [r7, #32]
 8003178:	6a3b      	ldr	r3, [r7, #32]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800317a:	2309      	movs	r3, #9
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	2300      	movs	r3, #0
 8003188:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800318a:	2302      	movs	r3, #2
 800318c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003192:	4619      	mov	r1, r3
 8003194:	4873      	ldr	r0, [pc, #460]	@ (8003364 <HAL_TIM_MspPostInit+0x228>)
 8003196:	f003 fa6b 	bl	8006670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800319a:	e0da      	b.n	8003352 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM8)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a71      	ldr	r2, [pc, #452]	@ (8003368 <HAL_TIM_MspPostInit+0x22c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d11f      	bne.n	80031e6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	4a6c      	ldr	r2, [pc, #432]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d0:	2300      	movs	r3, #0
 80031d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80031d4:	2303      	movs	r3, #3
 80031d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031dc:	4619      	mov	r1, r3
 80031de:	4863      	ldr	r0, [pc, #396]	@ (800336c <HAL_TIM_MspPostInit+0x230>)
 80031e0:	f003 fa46 	bl	8006670 <HAL_GPIO_Init>
}
 80031e4:	e0b5      	b.n	8003352 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM9)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a61      	ldr	r2, [pc, #388]	@ (8003370 <HAL_TIM_MspPostInit+0x234>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d11e      	bne.n	800322e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031f0:	2300      	movs	r3, #0
 80031f2:	61bb      	str	r3, [r7, #24]
 80031f4:	4b5a      	ldr	r3, [pc, #360]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f8:	4a59      	ldr	r2, [pc, #356]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 80031fa:	f043 0310 	orr.w	r3, r3, #16
 80031fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003200:	4b57      	ldr	r3, [pc, #348]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800320c:	2360      	movs	r3, #96	@ 0x60
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003218:	2300      	movs	r3, #0
 800321a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800321c:	2303      	movs	r3, #3
 800321e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003220:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003224:	4619      	mov	r1, r3
 8003226:	4853      	ldr	r0, [pc, #332]	@ (8003374 <HAL_TIM_MspPostInit+0x238>)
 8003228:	f003 fa22 	bl	8006670 <HAL_GPIO_Init>
}
 800322c:	e091      	b.n	8003352 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM10)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a51      	ldr	r2, [pc, #324]	@ (8003378 <HAL_TIM_MspPostInit+0x23c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d11f      	bne.n	8003278 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	4b48      	ldr	r3, [pc, #288]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003240:	4a47      	ldr	r2, [pc, #284]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 8003242:	f043 0302 	orr.w	r3, r3, #2
 8003246:	6313      	str	r3, [r2, #48]	@ 0x30
 8003248:	4b45      	ldr	r3, [pc, #276]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003254:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325a:	2302      	movs	r3, #2
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	2300      	movs	r3, #0
 8003260:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003262:	2300      	movs	r3, #0
 8003264:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003266:	2303      	movs	r3, #3
 8003268:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800326e:	4619      	mov	r1, r3
 8003270:	4842      	ldr	r0, [pc, #264]	@ (800337c <HAL_TIM_MspPostInit+0x240>)
 8003272:	f003 f9fd 	bl	8006670 <HAL_GPIO_Init>
}
 8003276:	e06c      	b.n	8003352 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM11)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a40      	ldr	r2, [pc, #256]	@ (8003380 <HAL_TIM_MspPostInit+0x244>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d11f      	bne.n	80032c2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	4b36      	ldr	r3, [pc, #216]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	4a35      	ldr	r2, [pc, #212]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 800328c:	f043 0302 	orr.w	r3, r3, #2
 8003290:	6313      	str	r3, [r2, #48]	@ 0x30
 8003292:	4b33      	ldr	r3, [pc, #204]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800329e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ac:	2300      	movs	r3, #0
 80032ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80032b0:	2303      	movs	r3, #3
 80032b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032b8:	4619      	mov	r1, r3
 80032ba:	4830      	ldr	r0, [pc, #192]	@ (800337c <HAL_TIM_MspPostInit+0x240>)
 80032bc:	f003 f9d8 	bl	8006670 <HAL_GPIO_Init>
}
 80032c0:	e047      	b.n	8003352 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM12)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2f      	ldr	r2, [pc, #188]	@ (8003384 <HAL_TIM_MspPostInit+0x248>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d11f      	bne.n	800330c <HAL_TIM_MspPostInit+0x1d0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	4b23      	ldr	r3, [pc, #140]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	4a22      	ldr	r2, [pc, #136]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 80032d6:	f043 0302 	orr.w	r3, r3, #2
 80032da:	6313      	str	r3, [r2, #48]	@ 0x30
 80032dc:	4b20      	ldr	r3, [pc, #128]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80032e8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ee:	2302      	movs	r3, #2
 80032f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f6:	2300      	movs	r3, #0
 80032f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80032fa:	2309      	movs	r3, #9
 80032fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003302:	4619      	mov	r1, r3
 8003304:	481d      	ldr	r0, [pc, #116]	@ (800337c <HAL_TIM_MspPostInit+0x240>)
 8003306:	f003 f9b3 	bl	8006670 <HAL_GPIO_Init>
}
 800330a:	e022      	b.n	8003352 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM13)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1d      	ldr	r2, [pc, #116]	@ (8003388 <HAL_TIM_MspPostInit+0x24c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d11d      	bne.n	8003352 <HAL_TIM_MspPostInit+0x216>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	4b11      	ldr	r3, [pc, #68]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	4a10      	ldr	r2, [pc, #64]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6313      	str	r3, [r2, #48]	@ 0x30
 8003326:	4b0e      	ldr	r3, [pc, #56]	@ (8003360 <HAL_TIM_MspPostInit+0x224>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003332:	2340      	movs	r3, #64	@ 0x40
 8003334:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003336:	2302      	movs	r3, #2
 8003338:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333e:	2300      	movs	r3, #0
 8003340:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003342:	2309      	movs	r3, #9
 8003344:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800334a:	4619      	mov	r1, r3
 800334c:	4805      	ldr	r0, [pc, #20]	@ (8003364 <HAL_TIM_MspPostInit+0x228>)
 800334e:	f003 f98f 	bl	8006670 <HAL_GPIO_Init>
}
 8003352:	bf00      	nop
 8003354:	3738      	adds	r7, #56	@ 0x38
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40000c00 	.word	0x40000c00
 8003360:	40023800 	.word	0x40023800
 8003364:	40020000 	.word	0x40020000
 8003368:	40010400 	.word	0x40010400
 800336c:	40020800 	.word	0x40020800
 8003370:	40014000 	.word	0x40014000
 8003374:	40021000 	.word	0x40021000
 8003378:	40014400 	.word	0x40014400
 800337c:	40020400 	.word	0x40020400
 8003380:	40014800 	.word	0x40014800
 8003384:	40001800 	.word	0x40001800
 8003388:	40001c00 	.word	0x40001c00

0800338c <udpClient_connect>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port);

void udpClient_connect(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
	err_t err;
	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8003392:	f00e fdc1 	bl	8011f18 <udp_new>
 8003396:	4603      	mov	r3, r0
 8003398:	4a67      	ldr	r2, [pc, #412]	@ (8003538 <udpClient_connect+0x1ac>)
 800339a:	6013      	str	r3, [r2, #0]
	/* Bind the block to module's IP and port */
	IP_ADDR4(&stm32IPaddr, stm32_addr.a, stm32_addr.b, stm32_addr.c, stm32_addr.d); //--- stm32
 800339c:	4b67      	ldr	r3, [pc, #412]	@ (800353c <udpClient_connect+0x1b0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	061a      	lsls	r2, r3, #24
 80033a2:	4b66      	ldr	r3, [pc, #408]	@ (800353c <udpClient_connect+0x1b0>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	041b      	lsls	r3, r3, #16
 80033a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80033ac:	431a      	orrs	r2, r3
 80033ae:	4b63      	ldr	r3, [pc, #396]	@ (800353c <udpClient_connect+0x1b0>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	431a      	orrs	r2, r3
 80033b8:	4b60      	ldr	r3, [pc, #384]	@ (800353c <udpClient_connect+0x1b0>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	4313      	orrs	r3, r2
 80033c0:	061a      	lsls	r2, r3, #24
 80033c2:	4b5e      	ldr	r3, [pc, #376]	@ (800353c <udpClient_connect+0x1b0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	0619      	lsls	r1, r3, #24
 80033c8:	4b5c      	ldr	r3, [pc, #368]	@ (800353c <udpClient_connect+0x1b0>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80033d2:	4319      	orrs	r1, r3
 80033d4:	4b59      	ldr	r3, [pc, #356]	@ (800353c <udpClient_connect+0x1b0>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	021b      	lsls	r3, r3, #8
 80033da:	b29b      	uxth	r3, r3
 80033dc:	4319      	orrs	r1, r3
 80033de:	4b57      	ldr	r3, [pc, #348]	@ (800353c <udpClient_connect+0x1b0>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	430b      	orrs	r3, r1
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80033ec:	431a      	orrs	r2, r3
 80033ee:	4b53      	ldr	r3, [pc, #332]	@ (800353c <udpClient_connect+0x1b0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	0619      	lsls	r1, r3, #24
 80033f4:	4b51      	ldr	r3, [pc, #324]	@ (800353c <udpClient_connect+0x1b0>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	041b      	lsls	r3, r3, #16
 80033fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80033fe:	4319      	orrs	r1, r3
 8003400:	4b4e      	ldr	r3, [pc, #312]	@ (800353c <udpClient_connect+0x1b0>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	b29b      	uxth	r3, r3
 8003408:	4319      	orrs	r1, r3
 800340a:	4b4c      	ldr	r3, [pc, #304]	@ (800353c <udpClient_connect+0x1b0>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	430b      	orrs	r3, r1
 8003412:	0a1b      	lsrs	r3, r3, #8
 8003414:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003418:	431a      	orrs	r2, r3
 800341a:	4b48      	ldr	r3, [pc, #288]	@ (800353c <udpClient_connect+0x1b0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	0619      	lsls	r1, r3, #24
 8003420:	4b46      	ldr	r3, [pc, #280]	@ (800353c <udpClient_connect+0x1b0>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	041b      	lsls	r3, r3, #16
 8003426:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800342a:	4319      	orrs	r1, r3
 800342c:	4b43      	ldr	r3, [pc, #268]	@ (800353c <udpClient_connect+0x1b0>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	021b      	lsls	r3, r3, #8
 8003432:	b29b      	uxth	r3, r3
 8003434:	4319      	orrs	r1, r3
 8003436:	4b41      	ldr	r3, [pc, #260]	@ (800353c <udpClient_connect+0x1b0>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	430b      	orrs	r3, r1
 800343e:	0e1b      	lsrs	r3, r3, #24
 8003440:	4313      	orrs	r3, r2
 8003442:	4a3f      	ldr	r2, [pc, #252]	@ (8003540 <udpClient_connect+0x1b4>)
 8003444:	6013      	str	r3, [r2, #0]
	udp_bind(upcb, &stm32IPaddr, stm32_addr.port);
 8003446:	4b3c      	ldr	r3, [pc, #240]	@ (8003538 <udpClient_connect+0x1ac>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a3c      	ldr	r2, [pc, #240]	@ (800353c <udpClient_connect+0x1b0>)
 800344c:	6912      	ldr	r2, [r2, #16]
 800344e:	b292      	uxth	r2, r2
 8003450:	493b      	ldr	r1, [pc, #236]	@ (8003540 <udpClient_connect+0x1b4>)
 8003452:	4618      	mov	r0, r3
 8003454:	f00e fc4a 	bl	8011cec <udp_bind>
	/* configure destination IP address and port */
	IP_ADDR4(&pcIPaddr, pc_addr.a, pc_addr.b, pc_addr.c, pc_addr.d); //--- NUC/MINI PC
 8003458:	4b3a      	ldr	r3, [pc, #232]	@ (8003544 <udpClient_connect+0x1b8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	061a      	lsls	r2, r3, #24
 800345e:	4b39      	ldr	r3, [pc, #228]	@ (8003544 <udpClient_connect+0x1b8>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	041b      	lsls	r3, r3, #16
 8003464:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003468:	431a      	orrs	r2, r3
 800346a:	4b36      	ldr	r3, [pc, #216]	@ (8003544 <udpClient_connect+0x1b8>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	021b      	lsls	r3, r3, #8
 8003470:	b29b      	uxth	r3, r3
 8003472:	431a      	orrs	r2, r3
 8003474:	4b33      	ldr	r3, [pc, #204]	@ (8003544 <udpClient_connect+0x1b8>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	4313      	orrs	r3, r2
 800347c:	061a      	lsls	r2, r3, #24
 800347e:	4b31      	ldr	r3, [pc, #196]	@ (8003544 <udpClient_connect+0x1b8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	0619      	lsls	r1, r3, #24
 8003484:	4b2f      	ldr	r3, [pc, #188]	@ (8003544 <udpClient_connect+0x1b8>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800348e:	4319      	orrs	r1, r3
 8003490:	4b2c      	ldr	r3, [pc, #176]	@ (8003544 <udpClient_connect+0x1b8>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	b29b      	uxth	r3, r3
 8003498:	4319      	orrs	r1, r3
 800349a:	4b2a      	ldr	r3, [pc, #168]	@ (8003544 <udpClient_connect+0x1b8>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	430b      	orrs	r3, r1
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80034a8:	431a      	orrs	r2, r3
 80034aa:	4b26      	ldr	r3, [pc, #152]	@ (8003544 <udpClient_connect+0x1b8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	0619      	lsls	r1, r3, #24
 80034b0:	4b24      	ldr	r3, [pc, #144]	@ (8003544 <udpClient_connect+0x1b8>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80034ba:	4319      	orrs	r1, r3
 80034bc:	4b21      	ldr	r3, [pc, #132]	@ (8003544 <udpClient_connect+0x1b8>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	4319      	orrs	r1, r3
 80034c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003544 <udpClient_connect+0x1b8>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	430b      	orrs	r3, r1
 80034ce:	0a1b      	lsrs	r3, r3, #8
 80034d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80034d4:	431a      	orrs	r2, r3
 80034d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003544 <udpClient_connect+0x1b8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	0619      	lsls	r1, r3, #24
 80034dc:	4b19      	ldr	r3, [pc, #100]	@ (8003544 <udpClient_connect+0x1b8>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	041b      	lsls	r3, r3, #16
 80034e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80034e6:	4319      	orrs	r1, r3
 80034e8:	4b16      	ldr	r3, [pc, #88]	@ (8003544 <udpClient_connect+0x1b8>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	4319      	orrs	r1, r3
 80034f2:	4b14      	ldr	r3, [pc, #80]	@ (8003544 <udpClient_connect+0x1b8>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	430b      	orrs	r3, r1
 80034fa:	0e1b      	lsrs	r3, r3, #24
 80034fc:	4313      	orrs	r3, r2
 80034fe:	4a12      	ldr	r2, [pc, #72]	@ (8003548 <udpClient_connect+0x1bc>)
 8003500:	6013      	str	r3, [r2, #0]
	err= udp_connect(upcb, &pcIPaddr, pc_addr.port);
 8003502:	4b0d      	ldr	r3, [pc, #52]	@ (8003538 <udpClient_connect+0x1ac>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a0f      	ldr	r2, [pc, #60]	@ (8003544 <udpClient_connect+0x1b8>)
 8003508:	6912      	ldr	r2, [r2, #16]
 800350a:	b292      	uxth	r2, r2
 800350c:	490e      	ldr	r1, [pc, #56]	@ (8003548 <udpClient_connect+0x1bc>)
 800350e:	4618      	mov	r0, r3
 8003510:	f00e fc74 	bl	8011dfc <udp_connect>
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]

	if (err == ERR_OK)
 8003518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d106      	bne.n	800352e <udpClient_connect+0x1a2>
	{
		udp_recv(upcb, udp_receive_callback, NULL);
 8003520:	4b05      	ldr	r3, [pc, #20]	@ (8003538 <udpClient_connect+0x1ac>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2200      	movs	r2, #0
 8003526:	4909      	ldr	r1, [pc, #36]	@ (800354c <udpClient_connect+0x1c0>)
 8003528:	4618      	mov	r0, r3
 800352a:	f00e fcd5 	bl	8011ed8 <udp_recv>
	}
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200007d8 	.word	0x200007d8
 800353c:	20000004 	.word	0x20000004
 8003540:	200007dc 	.word	0x200007dc
 8003544:	20000018 	.word	0x20000018
 8003548:	200007e0 	.word	0x200007e0
 800354c:	080035c5 	.word	0x080035c5

08003550 <udpClient_send>:


void udpClient_send(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
  struct pbuf *txBuf;

  int len = sizeof(udp_tx_buffer);
 8003556:	2340      	movs	r3, #64	@ 0x40
 8003558:	607b      	str	r3, [r7, #4]

  memcpy(udp_tx_buffer +  3, &udp_tx, sizeof(udpTx_t));
 800355a:	4b14      	ldr	r3, [pc, #80]	@ (80035ac <udpClient_send+0x5c>)
 800355c:	2218      	movs	r2, #24
 800355e:	4914      	ldr	r1, [pc, #80]	@ (80035b0 <udpClient_send+0x60>)
 8003560:	4618      	mov	r0, r3
 8003562:	f011 f9c2 	bl	80148ea <memcpy>

  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_POOL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	b29b      	uxth	r3, r3
 800356a:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 800356e:	4619      	mov	r1, r3
 8003570:	2036      	movs	r0, #54	@ 0x36
 8003572:	f007 ff8d 	bl	800b490 <pbuf_alloc>
 8003576:	6038      	str	r0, [r7, #0]

  if (txBuf != NULL)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d012      	beq.n	80035a4 <udpClient_send+0x54>
  {
    pbuf_take(txBuf, udp_tx_buffer, len);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	b29b      	uxth	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	490b      	ldr	r1, [pc, #44]	@ (80035b4 <udpClient_send+0x64>)
 8003586:	6838      	ldr	r0, [r7, #0]
 8003588:	f008 fcd2 	bl	800bf30 <pbuf_take>

    udp_sendto(upcb, txBuf, &pcIPaddr, pc_addr.port);
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <udpClient_send+0x68>)
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	4b0a      	ldr	r3, [pc, #40]	@ (80035bc <udpClient_send+0x6c>)
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	b29b      	uxth	r3, r3
 8003596:	4a0a      	ldr	r2, [pc, #40]	@ (80035c0 <udpClient_send+0x70>)
 8003598:	6839      	ldr	r1, [r7, #0]
 800359a:	f00e f9f1 	bl	8011980 <udp_sendto>

    pbuf_free(txBuf);
 800359e:	6838      	ldr	r0, [r7, #0]
 80035a0:	f008 fa5a 	bl	800ba58 <pbuf_free>
  }
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	2000002f 	.word	0x2000002f
 80035b0:	200007e4 	.word	0x200007e4
 80035b4:	2000002c 	.word	0x2000002c
 80035b8:	200007d8 	.word	0x200007d8
 80035bc:	20000018 	.word	0x20000018
 80035c0:	200007e0 	.word	0x200007e0

080035c4 <udp_receive_callback>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	memcpy(udp_rx_buffer, p->payload, p->len);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6859      	ldr	r1, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	895b      	ldrh	r3, [r3, #10]
 80035da:	461a      	mov	r2, r3
 80035dc:	4807      	ldr	r0, [pc, #28]	@ (80035fc <udp_receive_callback+0x38>)
 80035de:	f011 f984 	bl	80148ea <memcpy>

	memcpy(&udp_rx, udp_rx_buffer +  3, sizeof(udpRx_t));
 80035e2:	4b07      	ldr	r3, [pc, #28]	@ (8003600 <udp_receive_callback+0x3c>)
 80035e4:	2206      	movs	r2, #6
 80035e6:	4619      	mov	r1, r3
 80035e8:	4806      	ldr	r0, [pc, #24]	@ (8003604 <udp_receive_callback+0x40>)
 80035ea:	f011 f97e 	bl	80148ea <memcpy>

	pbuf_free(p);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f008 fa32 	bl	800ba58 <pbuf_free>
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000804 	.word	0x20000804
 8003600:	20000807 	.word	0x20000807
 8003604:	200007fc 	.word	0x200007fc

08003608 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800360c:	4b11      	ldr	r3, [pc, #68]	@ (8003654 <MX_UART4_Init+0x4c>)
 800360e:	4a12      	ldr	r2, [pc, #72]	@ (8003658 <MX_UART4_Init+0x50>)
 8003610:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003612:	4b10      	ldr	r3, [pc, #64]	@ (8003654 <MX_UART4_Init+0x4c>)
 8003614:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003618:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800361a:	4b0e      	ldr	r3, [pc, #56]	@ (8003654 <MX_UART4_Init+0x4c>)
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003620:	4b0c      	ldr	r3, [pc, #48]	@ (8003654 <MX_UART4_Init+0x4c>)
 8003622:	2200      	movs	r2, #0
 8003624:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003626:	4b0b      	ldr	r3, [pc, #44]	@ (8003654 <MX_UART4_Init+0x4c>)
 8003628:	2200      	movs	r2, #0
 800362a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800362c:	4b09      	ldr	r3, [pc, #36]	@ (8003654 <MX_UART4_Init+0x4c>)
 800362e:	220c      	movs	r2, #12
 8003630:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003632:	4b08      	ldr	r3, [pc, #32]	@ (8003654 <MX_UART4_Init+0x4c>)
 8003634:	2200      	movs	r2, #0
 8003636:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003638:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <MX_UART4_Init+0x4c>)
 800363a:	2200      	movs	r2, #0
 800363c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800363e:	4805      	ldr	r0, [pc, #20]	@ (8003654 <MX_UART4_Init+0x4c>)
 8003640:	f005 f806 	bl	8008650 <HAL_UART_Init>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800364a:	f7fe f847 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000844 	.word	0x20000844
 8003658:	40004c00 	.word	0x40004c00

0800365c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003660:	4b11      	ldr	r3, [pc, #68]	@ (80036a8 <MX_UART5_Init+0x4c>)
 8003662:	4a12      	ldr	r2, [pc, #72]	@ (80036ac <MX_UART5_Init+0x50>)
 8003664:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003666:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <MX_UART5_Init+0x4c>)
 8003668:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800366c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800366e:	4b0e      	ldr	r3, [pc, #56]	@ (80036a8 <MX_UART5_Init+0x4c>)
 8003670:	2200      	movs	r2, #0
 8003672:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003674:	4b0c      	ldr	r3, [pc, #48]	@ (80036a8 <MX_UART5_Init+0x4c>)
 8003676:	2200      	movs	r2, #0
 8003678:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800367a:	4b0b      	ldr	r3, [pc, #44]	@ (80036a8 <MX_UART5_Init+0x4c>)
 800367c:	2200      	movs	r2, #0
 800367e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003680:	4b09      	ldr	r3, [pc, #36]	@ (80036a8 <MX_UART5_Init+0x4c>)
 8003682:	220c      	movs	r2, #12
 8003684:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003686:	4b08      	ldr	r3, [pc, #32]	@ (80036a8 <MX_UART5_Init+0x4c>)
 8003688:	2200      	movs	r2, #0
 800368a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800368c:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <MX_UART5_Init+0x4c>)
 800368e:	2200      	movs	r2, #0
 8003690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003692:	4805      	ldr	r0, [pc, #20]	@ (80036a8 <MX_UART5_Init+0x4c>)
 8003694:	f004 ffdc 	bl	8008650 <HAL_UART_Init>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800369e:	f7fe f81d 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	2000088c 	.word	0x2000088c
 80036ac:	40005000 	.word	0x40005000

080036b0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036b4:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <MX_USART1_UART_Init+0x4c>)
 80036b6:	4a12      	ldr	r2, [pc, #72]	@ (8003700 <MX_USART1_UART_Init+0x50>)
 80036b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80036ba:	4b10      	ldr	r3, [pc, #64]	@ (80036fc <MX_USART1_UART_Init+0x4c>)
 80036bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80036c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036c2:	4b0e      	ldr	r3, [pc, #56]	@ (80036fc <MX_USART1_UART_Init+0x4c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036c8:	4b0c      	ldr	r3, [pc, #48]	@ (80036fc <MX_USART1_UART_Init+0x4c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036ce:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <MX_USART1_UART_Init+0x4c>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036d4:	4b09      	ldr	r3, [pc, #36]	@ (80036fc <MX_USART1_UART_Init+0x4c>)
 80036d6:	220c      	movs	r2, #12
 80036d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036da:	4b08      	ldr	r3, [pc, #32]	@ (80036fc <MX_USART1_UART_Init+0x4c>)
 80036dc:	2200      	movs	r2, #0
 80036de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036e0:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <MX_USART1_UART_Init+0x4c>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036e6:	4805      	ldr	r0, [pc, #20]	@ (80036fc <MX_USART1_UART_Init+0x4c>)
 80036e8:	f004 ffb2 	bl	8008650 <HAL_UART_Init>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80036f2:	f7fd fff3 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200008d4 	.word	0x200008d4
 8003700:	40011000 	.word	0x40011000

08003704 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003708:	4b11      	ldr	r3, [pc, #68]	@ (8003750 <MX_USART2_UART_Init+0x4c>)
 800370a:	4a12      	ldr	r2, [pc, #72]	@ (8003754 <MX_USART2_UART_Init+0x50>)
 800370c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800370e:	4b10      	ldr	r3, [pc, #64]	@ (8003750 <MX_USART2_UART_Init+0x4c>)
 8003710:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003716:	4b0e      	ldr	r3, [pc, #56]	@ (8003750 <MX_USART2_UART_Init+0x4c>)
 8003718:	2200      	movs	r2, #0
 800371a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800371c:	4b0c      	ldr	r3, [pc, #48]	@ (8003750 <MX_USART2_UART_Init+0x4c>)
 800371e:	2200      	movs	r2, #0
 8003720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003722:	4b0b      	ldr	r3, [pc, #44]	@ (8003750 <MX_USART2_UART_Init+0x4c>)
 8003724:	2200      	movs	r2, #0
 8003726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003728:	4b09      	ldr	r3, [pc, #36]	@ (8003750 <MX_USART2_UART_Init+0x4c>)
 800372a:	220c      	movs	r2, #12
 800372c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800372e:	4b08      	ldr	r3, [pc, #32]	@ (8003750 <MX_USART2_UART_Init+0x4c>)
 8003730:	2200      	movs	r2, #0
 8003732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003734:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <MX_USART2_UART_Init+0x4c>)
 8003736:	2200      	movs	r2, #0
 8003738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800373a:	4805      	ldr	r0, [pc, #20]	@ (8003750 <MX_USART2_UART_Init+0x4c>)
 800373c:	f004 ff88 	bl	8008650 <HAL_UART_Init>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003746:	f7fd ffc9 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	2000091c 	.word	0x2000091c
 8003754:	40004400 	.word	0x40004400

08003758 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800375c:	4b11      	ldr	r3, [pc, #68]	@ (80037a4 <MX_USART3_UART_Init+0x4c>)
 800375e:	4a12      	ldr	r2, [pc, #72]	@ (80037a8 <MX_USART3_UART_Init+0x50>)
 8003760:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003762:	4b10      	ldr	r3, [pc, #64]	@ (80037a4 <MX_USART3_UART_Init+0x4c>)
 8003764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003768:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800376a:	4b0e      	ldr	r3, [pc, #56]	@ (80037a4 <MX_USART3_UART_Init+0x4c>)
 800376c:	2200      	movs	r2, #0
 800376e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003770:	4b0c      	ldr	r3, [pc, #48]	@ (80037a4 <MX_USART3_UART_Init+0x4c>)
 8003772:	2200      	movs	r2, #0
 8003774:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003776:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <MX_USART3_UART_Init+0x4c>)
 8003778:	2200      	movs	r2, #0
 800377a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800377c:	4b09      	ldr	r3, [pc, #36]	@ (80037a4 <MX_USART3_UART_Init+0x4c>)
 800377e:	220c      	movs	r2, #12
 8003780:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003782:	4b08      	ldr	r3, [pc, #32]	@ (80037a4 <MX_USART3_UART_Init+0x4c>)
 8003784:	2200      	movs	r2, #0
 8003786:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <MX_USART3_UART_Init+0x4c>)
 800378a:	2200      	movs	r2, #0
 800378c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800378e:	4805      	ldr	r0, [pc, #20]	@ (80037a4 <MX_USART3_UART_Init+0x4c>)
 8003790:	f004 ff5e 	bl	8008650 <HAL_UART_Init>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800379a:	f7fd ff9f 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000964 	.word	0x20000964
 80037a8:	40004800 	.word	0x40004800

080037ac <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80037b0:	4b11      	ldr	r3, [pc, #68]	@ (80037f8 <MX_USART6_UART_Init+0x4c>)
 80037b2:	4a12      	ldr	r2, [pc, #72]	@ (80037fc <MX_USART6_UART_Init+0x50>)
 80037b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80037b6:	4b10      	ldr	r3, [pc, #64]	@ (80037f8 <MX_USART6_UART_Init+0x4c>)
 80037b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80037bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80037be:	4b0e      	ldr	r3, [pc, #56]	@ (80037f8 <MX_USART6_UART_Init+0x4c>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80037c4:	4b0c      	ldr	r3, [pc, #48]	@ (80037f8 <MX_USART6_UART_Init+0x4c>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80037ca:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <MX_USART6_UART_Init+0x4c>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80037d0:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <MX_USART6_UART_Init+0x4c>)
 80037d2:	220c      	movs	r2, #12
 80037d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037d6:	4b08      	ldr	r3, [pc, #32]	@ (80037f8 <MX_USART6_UART_Init+0x4c>)
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80037dc:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <MX_USART6_UART_Init+0x4c>)
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80037e2:	4805      	ldr	r0, [pc, #20]	@ (80037f8 <MX_USART6_UART_Init+0x4c>)
 80037e4:	f004 ff34 	bl	8008650 <HAL_UART_Init>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80037ee:	f7fd ff75 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	200009ac 	.word	0x200009ac
 80037fc:	40011400 	.word	0x40011400

08003800 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b096      	sub	sp, #88	@ 0x58
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a4a      	ldr	r2, [pc, #296]	@ (8003948 <HAL_UART_MspInit+0x148>)
 800381e:	4293      	cmp	r3, r2
 8003820:	f040 80a0 	bne.w	8003964 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003824:	2300      	movs	r3, #0
 8003826:	643b      	str	r3, [r7, #64]	@ 0x40
 8003828:	4b48      	ldr	r3, [pc, #288]	@ (800394c <HAL_UART_MspInit+0x14c>)
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	4a47      	ldr	r2, [pc, #284]	@ (800394c <HAL_UART_MspInit+0x14c>)
 800382e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003832:	6413      	str	r3, [r2, #64]	@ 0x40
 8003834:	4b45      	ldr	r3, [pc, #276]	@ (800394c <HAL_UART_MspInit+0x14c>)
 8003836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003838:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800383c:	643b      	str	r3, [r7, #64]	@ 0x40
 800383e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003840:	2300      	movs	r3, #0
 8003842:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003844:	4b41      	ldr	r3, [pc, #260]	@ (800394c <HAL_UART_MspInit+0x14c>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	4a40      	ldr	r2, [pc, #256]	@ (800394c <HAL_UART_MspInit+0x14c>)
 800384a:	f043 0304 	orr.w	r3, r3, #4
 800384e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003850:	4b3e      	ldr	r3, [pc, #248]	@ (800394c <HAL_UART_MspInit+0x14c>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800385a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800385c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003860:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003862:	2302      	movs	r3, #2
 8003864:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	2300      	movs	r3, #0
 8003868:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386a:	2303      	movs	r3, #3
 800386c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800386e:	2308      	movs	r3, #8
 8003870:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003872:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003876:	4619      	mov	r1, r3
 8003878:	4835      	ldr	r0, [pc, #212]	@ (8003950 <HAL_UART_MspInit+0x150>)
 800387a:	f002 fef9 	bl	8006670 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800387e:	4b35      	ldr	r3, [pc, #212]	@ (8003954 <HAL_UART_MspInit+0x154>)
 8003880:	4a35      	ldr	r2, [pc, #212]	@ (8003958 <HAL_UART_MspInit+0x158>)
 8003882:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003884:	4b33      	ldr	r3, [pc, #204]	@ (8003954 <HAL_UART_MspInit+0x154>)
 8003886:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800388a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800388c:	4b31      	ldr	r3, [pc, #196]	@ (8003954 <HAL_UART_MspInit+0x154>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003892:	4b30      	ldr	r3, [pc, #192]	@ (8003954 <HAL_UART_MspInit+0x154>)
 8003894:	2200      	movs	r2, #0
 8003896:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003898:	4b2e      	ldr	r3, [pc, #184]	@ (8003954 <HAL_UART_MspInit+0x154>)
 800389a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800389e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003954 <HAL_UART_MspInit+0x154>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003954 <HAL_UART_MspInit+0x154>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80038ac:	4b29      	ldr	r3, [pc, #164]	@ (8003954 <HAL_UART_MspInit+0x154>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038b2:	4b28      	ldr	r3, [pc, #160]	@ (8003954 <HAL_UART_MspInit+0x154>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038b8:	4b26      	ldr	r3, [pc, #152]	@ (8003954 <HAL_UART_MspInit+0x154>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80038be:	4825      	ldr	r0, [pc, #148]	@ (8003954 <HAL_UART_MspInit+0x154>)
 80038c0:	f001 f994 	bl	8004bec <HAL_DMA_Init>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80038ca:	f7fd ff07 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a20      	ldr	r2, [pc, #128]	@ (8003954 <HAL_UART_MspInit+0x154>)
 80038d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003954 <HAL_UART_MspInit+0x154>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80038da:	4b20      	ldr	r3, [pc, #128]	@ (800395c <HAL_UART_MspInit+0x15c>)
 80038dc:	4a20      	ldr	r2, [pc, #128]	@ (8003960 <HAL_UART_MspInit+0x160>)
 80038de:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80038e0:	4b1e      	ldr	r3, [pc, #120]	@ (800395c <HAL_UART_MspInit+0x15c>)
 80038e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80038e6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038e8:	4b1c      	ldr	r3, [pc, #112]	@ (800395c <HAL_UART_MspInit+0x15c>)
 80038ea:	2240      	movs	r2, #64	@ 0x40
 80038ec:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038ee:	4b1b      	ldr	r3, [pc, #108]	@ (800395c <HAL_UART_MspInit+0x15c>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038f4:	4b19      	ldr	r3, [pc, #100]	@ (800395c <HAL_UART_MspInit+0x15c>)
 80038f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038fa:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038fc:	4b17      	ldr	r3, [pc, #92]	@ (800395c <HAL_UART_MspInit+0x15c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003902:	4b16      	ldr	r3, [pc, #88]	@ (800395c <HAL_UART_MspInit+0x15c>)
 8003904:	2200      	movs	r2, #0
 8003906:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003908:	4b14      	ldr	r3, [pc, #80]	@ (800395c <HAL_UART_MspInit+0x15c>)
 800390a:	2200      	movs	r2, #0
 800390c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800390e:	4b13      	ldr	r3, [pc, #76]	@ (800395c <HAL_UART_MspInit+0x15c>)
 8003910:	2200      	movs	r2, #0
 8003912:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003914:	4b11      	ldr	r3, [pc, #68]	@ (800395c <HAL_UART_MspInit+0x15c>)
 8003916:	2200      	movs	r2, #0
 8003918:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800391a:	4810      	ldr	r0, [pc, #64]	@ (800395c <HAL_UART_MspInit+0x15c>)
 800391c:	f001 f966 	bl	8004bec <HAL_DMA_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003926:	f7fd fed9 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a0b      	ldr	r2, [pc, #44]	@ (800395c <HAL_UART_MspInit+0x15c>)
 800392e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003930:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <HAL_UART_MspInit+0x15c>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	2100      	movs	r1, #0
 800393a:	2034      	movs	r0, #52	@ 0x34
 800393c:	f001 f91f 	bl	8004b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003940:	2034      	movs	r0, #52	@ 0x34
 8003942:	f001 f938 	bl	8004bb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003946:	e309      	b.n	8003f5c <HAL_UART_MspInit+0x75c>
 8003948:	40004c00 	.word	0x40004c00
 800394c:	40023800 	.word	0x40023800
 8003950:	40020800 	.word	0x40020800
 8003954:	200009f4 	.word	0x200009f4
 8003958:	40026040 	.word	0x40026040
 800395c:	20000a54 	.word	0x20000a54
 8003960:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a74      	ldr	r2, [pc, #464]	@ (8003b3c <HAL_UART_MspInit+0x33c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	f040 80b2 	bne.w	8003ad4 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003970:	2300      	movs	r3, #0
 8003972:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003974:	4b72      	ldr	r3, [pc, #456]	@ (8003b40 <HAL_UART_MspInit+0x340>)
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	4a71      	ldr	r2, [pc, #452]	@ (8003b40 <HAL_UART_MspInit+0x340>)
 800397a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800397e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003980:	4b6f      	ldr	r3, [pc, #444]	@ (8003b40 <HAL_UART_MspInit+0x340>)
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003988:	63bb      	str	r3, [r7, #56]	@ 0x38
 800398a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800398c:	2300      	movs	r3, #0
 800398e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003990:	4b6b      	ldr	r3, [pc, #428]	@ (8003b40 <HAL_UART_MspInit+0x340>)
 8003992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003994:	4a6a      	ldr	r2, [pc, #424]	@ (8003b40 <HAL_UART_MspInit+0x340>)
 8003996:	f043 0304 	orr.w	r3, r3, #4
 800399a:	6313      	str	r3, [r2, #48]	@ 0x30
 800399c:	4b68      	ldr	r3, [pc, #416]	@ (8003b40 <HAL_UART_MspInit+0x340>)
 800399e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80039a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039a8:	2300      	movs	r3, #0
 80039aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ac:	4b64      	ldr	r3, [pc, #400]	@ (8003b40 <HAL_UART_MspInit+0x340>)
 80039ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b0:	4a63      	ldr	r2, [pc, #396]	@ (8003b40 <HAL_UART_MspInit+0x340>)
 80039b2:	f043 0308 	orr.w	r3, r3, #8
 80039b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80039b8:	4b61      	ldr	r3, [pc, #388]	@ (8003b40 <HAL_UART_MspInit+0x340>)
 80039ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80039c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039c8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ca:	2302      	movs	r3, #2
 80039cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d2:	2303      	movs	r3, #3
 80039d4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80039d6:	2308      	movs	r3, #8
 80039d8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039da:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80039de:	4619      	mov	r1, r3
 80039e0:	4858      	ldr	r0, [pc, #352]	@ (8003b44 <HAL_UART_MspInit+0x344>)
 80039e2:	f002 fe45 	bl	8006670 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039e6:	2304      	movs	r3, #4
 80039e8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ea:	2302      	movs	r3, #2
 80039ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f2:	2303      	movs	r3, #3
 80039f4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80039f6:	2308      	movs	r3, #8
 80039f8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039fa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80039fe:	4619      	mov	r1, r3
 8003a00:	4851      	ldr	r0, [pc, #324]	@ (8003b48 <HAL_UART_MspInit+0x348>)
 8003a02:	f002 fe35 	bl	8006670 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003a06:	4b51      	ldr	r3, [pc, #324]	@ (8003b4c <HAL_UART_MspInit+0x34c>)
 8003a08:	4a51      	ldr	r2, [pc, #324]	@ (8003b50 <HAL_UART_MspInit+0x350>)
 8003a0a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8003a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8003b4c <HAL_UART_MspInit+0x34c>)
 8003a0e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003a12:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a14:	4b4d      	ldr	r3, [pc, #308]	@ (8003b4c <HAL_UART_MspInit+0x34c>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8003b4c <HAL_UART_MspInit+0x34c>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a20:	4b4a      	ldr	r3, [pc, #296]	@ (8003b4c <HAL_UART_MspInit+0x34c>)
 8003a22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a26:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a28:	4b48      	ldr	r3, [pc, #288]	@ (8003b4c <HAL_UART_MspInit+0x34c>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a2e:	4b47      	ldr	r3, [pc, #284]	@ (8003b4c <HAL_UART_MspInit+0x34c>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8003a34:	4b45      	ldr	r3, [pc, #276]	@ (8003b4c <HAL_UART_MspInit+0x34c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003a3a:	4b44      	ldr	r3, [pc, #272]	@ (8003b4c <HAL_UART_MspInit+0x34c>)
 8003a3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a40:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a42:	4b42      	ldr	r3, [pc, #264]	@ (8003b4c <HAL_UART_MspInit+0x34c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003a48:	4840      	ldr	r0, [pc, #256]	@ (8003b4c <HAL_UART_MspInit+0x34c>)
 8003a4a:	f001 f8cf 	bl	8004bec <HAL_DMA_Init>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8003a54:	f7fd fe42 	bl	80016dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a3c      	ldr	r2, [pc, #240]	@ (8003b4c <HAL_UART_MspInit+0x34c>)
 8003a5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a5e:	4a3b      	ldr	r2, [pc, #236]	@ (8003b4c <HAL_UART_MspInit+0x34c>)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8003a64:	4b3b      	ldr	r3, [pc, #236]	@ (8003b54 <HAL_UART_MspInit+0x354>)
 8003a66:	4a3c      	ldr	r2, [pc, #240]	@ (8003b58 <HAL_UART_MspInit+0x358>)
 8003a68:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8003a6a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b54 <HAL_UART_MspInit+0x354>)
 8003a6c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003a70:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a72:	4b38      	ldr	r3, [pc, #224]	@ (8003b54 <HAL_UART_MspInit+0x354>)
 8003a74:	2240      	movs	r2, #64	@ 0x40
 8003a76:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a78:	4b36      	ldr	r3, [pc, #216]	@ (8003b54 <HAL_UART_MspInit+0x354>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a7e:	4b35      	ldr	r3, [pc, #212]	@ (8003b54 <HAL_UART_MspInit+0x354>)
 8003a80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a84:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a86:	4b33      	ldr	r3, [pc, #204]	@ (8003b54 <HAL_UART_MspInit+0x354>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a8c:	4b31      	ldr	r3, [pc, #196]	@ (8003b54 <HAL_UART_MspInit+0x354>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8003a92:	4b30      	ldr	r3, [pc, #192]	@ (8003b54 <HAL_UART_MspInit+0x354>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003a98:	4b2e      	ldr	r3, [pc, #184]	@ (8003b54 <HAL_UART_MspInit+0x354>)
 8003a9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a9e:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b54 <HAL_UART_MspInit+0x354>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8003aa6:	482b      	ldr	r0, [pc, #172]	@ (8003b54 <HAL_UART_MspInit+0x354>)
 8003aa8:	f001 f8a0 	bl	8004bec <HAL_DMA_Init>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_UART_MspInit+0x2b6>
      Error_Handler();
 8003ab2:	f7fd fe13 	bl	80016dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a26      	ldr	r2, [pc, #152]	@ (8003b54 <HAL_UART_MspInit+0x354>)
 8003aba:	639a      	str	r2, [r3, #56]	@ 0x38
 8003abc:	4a25      	ldr	r2, [pc, #148]	@ (8003b54 <HAL_UART_MspInit+0x354>)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	2035      	movs	r0, #53	@ 0x35
 8003ac8:	f001 f859 	bl	8004b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003acc:	2035      	movs	r0, #53	@ 0x35
 8003ace:	f001 f872 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
}
 8003ad2:	e243      	b.n	8003f5c <HAL_UART_MspInit+0x75c>
  else if(uartHandle->Instance==USART1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a20      	ldr	r2, [pc, #128]	@ (8003b5c <HAL_UART_MspInit+0x35c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d142      	bne.n	8003b64 <HAL_UART_MspInit+0x364>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ae2:	4b17      	ldr	r3, [pc, #92]	@ (8003b40 <HAL_UART_MspInit+0x340>)
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae6:	4a16      	ldr	r2, [pc, #88]	@ (8003b40 <HAL_UART_MspInit+0x340>)
 8003ae8:	f043 0310 	orr.w	r3, r3, #16
 8003aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8003aee:	4b14      	ldr	r3, [pc, #80]	@ (8003b40 <HAL_UART_MspInit+0x340>)
 8003af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003afe:	4b10      	ldr	r3, [pc, #64]	@ (8003b40 <HAL_UART_MspInit+0x340>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	4a0f      	ldr	r2, [pc, #60]	@ (8003b40 <HAL_UART_MspInit+0x340>)
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b40 <HAL_UART_MspInit+0x340>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b16:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003b1a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b24:	2303      	movs	r3, #3
 8003b26:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b28:	2307      	movs	r3, #7
 8003b2a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b2c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003b30:	4619      	mov	r1, r3
 8003b32:	480b      	ldr	r0, [pc, #44]	@ (8003b60 <HAL_UART_MspInit+0x360>)
 8003b34:	f002 fd9c 	bl	8006670 <HAL_GPIO_Init>
}
 8003b38:	e210      	b.n	8003f5c <HAL_UART_MspInit+0x75c>
 8003b3a:	bf00      	nop
 8003b3c:	40005000 	.word	0x40005000
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40020800 	.word	0x40020800
 8003b48:	40020c00 	.word	0x40020c00
 8003b4c:	20000ab4 	.word	0x20000ab4
 8003b50:	40026010 	.word	0x40026010
 8003b54:	20000b14 	.word	0x20000b14
 8003b58:	400260b8 	.word	0x400260b8
 8003b5c:	40011000 	.word	0x40011000
 8003b60:	40020000 	.word	0x40020000
  else if(uartHandle->Instance==USART2)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a4a      	ldr	r2, [pc, #296]	@ (8003c94 <HAL_UART_MspInit+0x494>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	f040 80a0 	bne.w	8003cb0 <HAL_UART_MspInit+0x4b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b70:	2300      	movs	r3, #0
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b74:	4b48      	ldr	r3, [pc, #288]	@ (8003c98 <HAL_UART_MspInit+0x498>)
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	4a47      	ldr	r2, [pc, #284]	@ (8003c98 <HAL_UART_MspInit+0x498>)
 8003b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b80:	4b45      	ldr	r3, [pc, #276]	@ (8003c98 <HAL_UART_MspInit+0x498>)
 8003b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	623b      	str	r3, [r7, #32]
 8003b90:	4b41      	ldr	r3, [pc, #260]	@ (8003c98 <HAL_UART_MspInit+0x498>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b94:	4a40      	ldr	r2, [pc, #256]	@ (8003c98 <HAL_UART_MspInit+0x498>)
 8003b96:	f043 0308 	orr.w	r3, r3, #8
 8003b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b9c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c98 <HAL_UART_MspInit+0x498>)
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	623b      	str	r3, [r7, #32]
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003ba8:	2360      	movs	r3, #96	@ 0x60
 8003baa:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bac:	2302      	movs	r3, #2
 8003bae:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bb8:	2307      	movs	r3, #7
 8003bba:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bbc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4836      	ldr	r0, [pc, #216]	@ (8003c9c <HAL_UART_MspInit+0x49c>)
 8003bc4:	f002 fd54 	bl	8006670 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003bc8:	4b35      	ldr	r3, [pc, #212]	@ (8003ca0 <HAL_UART_MspInit+0x4a0>)
 8003bca:	4a36      	ldr	r2, [pc, #216]	@ (8003ca4 <HAL_UART_MspInit+0x4a4>)
 8003bcc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003bce:	4b34      	ldr	r3, [pc, #208]	@ (8003ca0 <HAL_UART_MspInit+0x4a0>)
 8003bd0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003bd4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bd6:	4b32      	ldr	r3, [pc, #200]	@ (8003ca0 <HAL_UART_MspInit+0x4a0>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bdc:	4b30      	ldr	r3, [pc, #192]	@ (8003ca0 <HAL_UART_MspInit+0x4a0>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003be2:	4b2f      	ldr	r3, [pc, #188]	@ (8003ca0 <HAL_UART_MspInit+0x4a0>)
 8003be4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003be8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bea:	4b2d      	ldr	r3, [pc, #180]	@ (8003ca0 <HAL_UART_MspInit+0x4a0>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ca0 <HAL_UART_MspInit+0x4a0>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca0 <HAL_UART_MspInit+0x4a0>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003bfc:	4b28      	ldr	r3, [pc, #160]	@ (8003ca0 <HAL_UART_MspInit+0x4a0>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c02:	4b27      	ldr	r3, [pc, #156]	@ (8003ca0 <HAL_UART_MspInit+0x4a0>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003c08:	4825      	ldr	r0, [pc, #148]	@ (8003ca0 <HAL_UART_MspInit+0x4a0>)
 8003c0a:	f000 ffef 	bl	8004bec <HAL_DMA_Init>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_UART_MspInit+0x418>
      Error_Handler();
 8003c14:	f7fd fd62 	bl	80016dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a21      	ldr	r2, [pc, #132]	@ (8003ca0 <HAL_UART_MspInit+0x4a0>)
 8003c1c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c1e:	4a20      	ldr	r2, [pc, #128]	@ (8003ca0 <HAL_UART_MspInit+0x4a0>)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003c24:	4b20      	ldr	r3, [pc, #128]	@ (8003ca8 <HAL_UART_MspInit+0x4a8>)
 8003c26:	4a21      	ldr	r2, [pc, #132]	@ (8003cac <HAL_UART_MspInit+0x4ac>)
 8003c28:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ca8 <HAL_UART_MspInit+0x4a8>)
 8003c2c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c30:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c32:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca8 <HAL_UART_MspInit+0x4a8>)
 8003c34:	2240      	movs	r2, #64	@ 0x40
 8003c36:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca8 <HAL_UART_MspInit+0x4a8>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca8 <HAL_UART_MspInit+0x4a8>)
 8003c40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c44:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c46:	4b18      	ldr	r3, [pc, #96]	@ (8003ca8 <HAL_UART_MspInit+0x4a8>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c4c:	4b16      	ldr	r3, [pc, #88]	@ (8003ca8 <HAL_UART_MspInit+0x4a8>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003c52:	4b15      	ldr	r3, [pc, #84]	@ (8003ca8 <HAL_UART_MspInit+0x4a8>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c58:	4b13      	ldr	r3, [pc, #76]	@ (8003ca8 <HAL_UART_MspInit+0x4a8>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ca8 <HAL_UART_MspInit+0x4a8>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003c64:	4810      	ldr	r0, [pc, #64]	@ (8003ca8 <HAL_UART_MspInit+0x4a8>)
 8003c66:	f000 ffc1 	bl	8004bec <HAL_DMA_Init>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_UART_MspInit+0x474>
      Error_Handler();
 8003c70:	f7fd fd34 	bl	80016dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a0c      	ldr	r2, [pc, #48]	@ (8003ca8 <HAL_UART_MspInit+0x4a8>)
 8003c78:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c7a:	4a0b      	ldr	r2, [pc, #44]	@ (8003ca8 <HAL_UART_MspInit+0x4a8>)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c80:	2200      	movs	r2, #0
 8003c82:	2100      	movs	r1, #0
 8003c84:	2026      	movs	r0, #38	@ 0x26
 8003c86:	f000 ff7a 	bl	8004b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c8a:	2026      	movs	r0, #38	@ 0x26
 8003c8c:	f000 ff93 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
}
 8003c90:	e164      	b.n	8003f5c <HAL_UART_MspInit+0x75c>
 8003c92:	bf00      	nop
 8003c94:	40004400 	.word	0x40004400
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40020c00 	.word	0x40020c00
 8003ca0:	20000b74 	.word	0x20000b74
 8003ca4:	40026088 	.word	0x40026088
 8003ca8:	20000bd4 	.word	0x20000bd4
 8003cac:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a5a      	ldr	r2, [pc, #360]	@ (8003e20 <HAL_UART_MspInit+0x620>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	f040 80c2 	bne.w	8003e40 <HAL_UART_MspInit+0x640>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	4b58      	ldr	r3, [pc, #352]	@ (8003e24 <HAL_UART_MspInit+0x624>)
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc4:	4a57      	ldr	r2, [pc, #348]	@ (8003e24 <HAL_UART_MspInit+0x624>)
 8003cc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cca:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ccc:	4b55      	ldr	r3, [pc, #340]	@ (8003e24 <HAL_UART_MspInit+0x624>)
 8003cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	4b51      	ldr	r3, [pc, #324]	@ (8003e24 <HAL_UART_MspInit+0x624>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce0:	4a50      	ldr	r2, [pc, #320]	@ (8003e24 <HAL_UART_MspInit+0x624>)
 8003ce2:	f043 0302 	orr.w	r3, r3, #2
 8003ce6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce8:	4b4e      	ldr	r3, [pc, #312]	@ (8003e24 <HAL_UART_MspInit+0x624>)
 8003cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	4b4a      	ldr	r3, [pc, #296]	@ (8003e24 <HAL_UART_MspInit+0x624>)
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfc:	4a49      	ldr	r2, [pc, #292]	@ (8003e24 <HAL_UART_MspInit+0x624>)
 8003cfe:	f043 0308 	orr.w	r3, r3, #8
 8003d02:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d04:	4b47      	ldr	r3, [pc, #284]	@ (8003e24 <HAL_UART_MspInit+0x624>)
 8003d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d14:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d16:	2302      	movs	r3, #2
 8003d18:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d22:	2307      	movs	r3, #7
 8003d24:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d26:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	483e      	ldr	r0, [pc, #248]	@ (8003e28 <HAL_UART_MspInit+0x628>)
 8003d2e:	f002 fc9f 	bl	8006670 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d36:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d40:	2303      	movs	r3, #3
 8003d42:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d44:	2307      	movs	r3, #7
 8003d46:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d48:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4837      	ldr	r0, [pc, #220]	@ (8003e2c <HAL_UART_MspInit+0x62c>)
 8003d50:	f002 fc8e 	bl	8006670 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003d54:	4b36      	ldr	r3, [pc, #216]	@ (8003e30 <HAL_UART_MspInit+0x630>)
 8003d56:	4a37      	ldr	r2, [pc, #220]	@ (8003e34 <HAL_UART_MspInit+0x634>)
 8003d58:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003d5a:	4b35      	ldr	r3, [pc, #212]	@ (8003e30 <HAL_UART_MspInit+0x630>)
 8003d5c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003d60:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d62:	4b33      	ldr	r3, [pc, #204]	@ (8003e30 <HAL_UART_MspInit+0x630>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d68:	4b31      	ldr	r3, [pc, #196]	@ (8003e30 <HAL_UART_MspInit+0x630>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d6e:	4b30      	ldr	r3, [pc, #192]	@ (8003e30 <HAL_UART_MspInit+0x630>)
 8003d70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d74:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d76:	4b2e      	ldr	r3, [pc, #184]	@ (8003e30 <HAL_UART_MspInit+0x630>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8003e30 <HAL_UART_MspInit+0x630>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003d82:	4b2b      	ldr	r3, [pc, #172]	@ (8003e30 <HAL_UART_MspInit+0x630>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d88:	4b29      	ldr	r3, [pc, #164]	@ (8003e30 <HAL_UART_MspInit+0x630>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d8e:	4b28      	ldr	r3, [pc, #160]	@ (8003e30 <HAL_UART_MspInit+0x630>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003d94:	4826      	ldr	r0, [pc, #152]	@ (8003e30 <HAL_UART_MspInit+0x630>)
 8003d96:	f000 ff29 	bl	8004bec <HAL_DMA_Init>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_UART_MspInit+0x5a4>
      Error_Handler();
 8003da0:	f7fd fc9c 	bl	80016dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a22      	ldr	r2, [pc, #136]	@ (8003e30 <HAL_UART_MspInit+0x630>)
 8003da8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003daa:	4a21      	ldr	r2, [pc, #132]	@ (8003e30 <HAL_UART_MspInit+0x630>)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003db0:	4b21      	ldr	r3, [pc, #132]	@ (8003e38 <HAL_UART_MspInit+0x638>)
 8003db2:	4a22      	ldr	r2, [pc, #136]	@ (8003e3c <HAL_UART_MspInit+0x63c>)
 8003db4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003db6:	4b20      	ldr	r3, [pc, #128]	@ (8003e38 <HAL_UART_MspInit+0x638>)
 8003db8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003dbc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003e38 <HAL_UART_MspInit+0x638>)
 8003dc0:	2240      	movs	r2, #64	@ 0x40
 8003dc2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e38 <HAL_UART_MspInit+0x638>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dca:	4b1b      	ldr	r3, [pc, #108]	@ (8003e38 <HAL_UART_MspInit+0x638>)
 8003dcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dd0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dd2:	4b19      	ldr	r3, [pc, #100]	@ (8003e38 <HAL_UART_MspInit+0x638>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dd8:	4b17      	ldr	r3, [pc, #92]	@ (8003e38 <HAL_UART_MspInit+0x638>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003dde:	4b16      	ldr	r3, [pc, #88]	@ (8003e38 <HAL_UART_MspInit+0x638>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003de4:	4b14      	ldr	r3, [pc, #80]	@ (8003e38 <HAL_UART_MspInit+0x638>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dea:	4b13      	ldr	r3, [pc, #76]	@ (8003e38 <HAL_UART_MspInit+0x638>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003df0:	4811      	ldr	r0, [pc, #68]	@ (8003e38 <HAL_UART_MspInit+0x638>)
 8003df2:	f000 fefb 	bl	8004bec <HAL_DMA_Init>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_UART_MspInit+0x600>
      Error_Handler();
 8003dfc:	f7fd fc6e 	bl	80016dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a0d      	ldr	r2, [pc, #52]	@ (8003e38 <HAL_UART_MspInit+0x638>)
 8003e04:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e06:	4a0c      	ldr	r2, [pc, #48]	@ (8003e38 <HAL_UART_MspInit+0x638>)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2100      	movs	r1, #0
 8003e10:	2027      	movs	r0, #39	@ 0x27
 8003e12:	f000 feb4 	bl	8004b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003e16:	2027      	movs	r0, #39	@ 0x27
 8003e18:	f000 fecd 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
}
 8003e1c:	e09e      	b.n	8003f5c <HAL_UART_MspInit+0x75c>
 8003e1e:	bf00      	nop
 8003e20:	40004800 	.word	0x40004800
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40020400 	.word	0x40020400
 8003e2c:	40020c00 	.word	0x40020c00
 8003e30:	20000c34 	.word	0x20000c34
 8003e34:	40026028 	.word	0x40026028
 8003e38:	20000c94 	.word	0x20000c94
 8003e3c:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a47      	ldr	r2, [pc, #284]	@ (8003f64 <HAL_UART_MspInit+0x764>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	f040 8088 	bne.w	8003f5c <HAL_UART_MspInit+0x75c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	4b45      	ldr	r3, [pc, #276]	@ (8003f68 <HAL_UART_MspInit+0x768>)
 8003e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e54:	4a44      	ldr	r2, [pc, #272]	@ (8003f68 <HAL_UART_MspInit+0x768>)
 8003e56:	f043 0320 	orr.w	r3, r3, #32
 8003e5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e5c:	4b42      	ldr	r3, [pc, #264]	@ (8003f68 <HAL_UART_MspInit+0x768>)
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	4b3e      	ldr	r3, [pc, #248]	@ (8003f68 <HAL_UART_MspInit+0x768>)
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e70:	4a3d      	ldr	r2, [pc, #244]	@ (8003f68 <HAL_UART_MspInit+0x768>)
 8003e72:	f043 0304 	orr.w	r3, r3, #4
 8003e76:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e78:	4b3b      	ldr	r3, [pc, #236]	@ (8003f68 <HAL_UART_MspInit+0x768>)
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e84:	23c0      	movs	r3, #192	@ 0xc0
 8003e86:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e90:	2303      	movs	r3, #3
 8003e92:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003e94:	2308      	movs	r3, #8
 8003e96:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e98:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4833      	ldr	r0, [pc, #204]	@ (8003f6c <HAL_UART_MspInit+0x76c>)
 8003ea0:	f002 fbe6 	bl	8006670 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003ea4:	4b32      	ldr	r3, [pc, #200]	@ (8003f70 <HAL_UART_MspInit+0x770>)
 8003ea6:	4a33      	ldr	r2, [pc, #204]	@ (8003f74 <HAL_UART_MspInit+0x774>)
 8003ea8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003eaa:	4b31      	ldr	r3, [pc, #196]	@ (8003f70 <HAL_UART_MspInit+0x770>)
 8003eac:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003eb0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8003f70 <HAL_UART_MspInit+0x770>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f70 <HAL_UART_MspInit+0x770>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8003f70 <HAL_UART_MspInit+0x770>)
 8003ec0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ec4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8003f70 <HAL_UART_MspInit+0x770>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ecc:	4b28      	ldr	r3, [pc, #160]	@ (8003f70 <HAL_UART_MspInit+0x770>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003ed2:	4b27      	ldr	r3, [pc, #156]	@ (8003f70 <HAL_UART_MspInit+0x770>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ed8:	4b25      	ldr	r3, [pc, #148]	@ (8003f70 <HAL_UART_MspInit+0x770>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ede:	4b24      	ldr	r3, [pc, #144]	@ (8003f70 <HAL_UART_MspInit+0x770>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003ee4:	4822      	ldr	r0, [pc, #136]	@ (8003f70 <HAL_UART_MspInit+0x770>)
 8003ee6:	f000 fe81 	bl	8004bec <HAL_DMA_Init>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_UART_MspInit+0x6f4>
      Error_Handler();
 8003ef0:	f7fd fbf4 	bl	80016dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f70 <HAL_UART_MspInit+0x770>)
 8003ef8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003efa:	4a1d      	ldr	r2, [pc, #116]	@ (8003f70 <HAL_UART_MspInit+0x770>)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003f00:	4b1d      	ldr	r3, [pc, #116]	@ (8003f78 <HAL_UART_MspInit+0x778>)
 8003f02:	4a1e      	ldr	r2, [pc, #120]	@ (8003f7c <HAL_UART_MspInit+0x77c>)
 8003f04:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003f06:	4b1c      	ldr	r3, [pc, #112]	@ (8003f78 <HAL_UART_MspInit+0x778>)
 8003f08:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003f0c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003f78 <HAL_UART_MspInit+0x778>)
 8003f10:	2240      	movs	r2, #64	@ 0x40
 8003f12:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f14:	4b18      	ldr	r3, [pc, #96]	@ (8003f78 <HAL_UART_MspInit+0x778>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f1a:	4b17      	ldr	r3, [pc, #92]	@ (8003f78 <HAL_UART_MspInit+0x778>)
 8003f1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f20:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f22:	4b15      	ldr	r3, [pc, #84]	@ (8003f78 <HAL_UART_MspInit+0x778>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f28:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <HAL_UART_MspInit+0x778>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003f2e:	4b12      	ldr	r3, [pc, #72]	@ (8003f78 <HAL_UART_MspInit+0x778>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f34:	4b10      	ldr	r3, [pc, #64]	@ (8003f78 <HAL_UART_MspInit+0x778>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f78 <HAL_UART_MspInit+0x778>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003f40:	480d      	ldr	r0, [pc, #52]	@ (8003f78 <HAL_UART_MspInit+0x778>)
 8003f42:	f000 fe53 	bl	8004bec <HAL_DMA_Init>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_UART_MspInit+0x750>
      Error_Handler();
 8003f4c:	f7fd fbc6 	bl	80016dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a09      	ldr	r2, [pc, #36]	@ (8003f78 <HAL_UART_MspInit+0x778>)
 8003f54:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f56:	4a08      	ldr	r2, [pc, #32]	@ (8003f78 <HAL_UART_MspInit+0x778>)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003f5c:	bf00      	nop
 8003f5e:	3758      	adds	r7, #88	@ 0x58
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40011400 	.word	0x40011400
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40020800 	.word	0x40020800
 8003f70:	20000cf4 	.word	0x20000cf4
 8003f74:	40026428 	.word	0x40026428
 8003f78:	20000d54 	.word	0x20000d54
 8003f7c:	400264a0 	.word	0x400264a0

08003f80 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  


  ldr   sp, =_estack     /* set stack pointer */
 8003f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003fb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003f84:	f7fe faf6 	bl	8002574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f88:	480c      	ldr	r0, [pc, #48]	@ (8003fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f8a:	490d      	ldr	r1, [pc, #52]	@ (8003fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f90:	e002      	b.n	8003f98 <LoopCopyDataInit>

08003f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f96:	3304      	adds	r3, #4

08003f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f9c:	d3f9      	bcc.n	8003f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8003fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fa4:	e001      	b.n	8003faa <LoopFillZerobss>

08003fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fa8:	3204      	adds	r2, #4

08003faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fac:	d3fb      	bcc.n	8003fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fae:	f010 fc75 	bl	801489c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fb2:	f7fd fae1 	bl	8001578 <main>
  bx  lr    
 8003fb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003fb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fc0:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8003fc4:	08018138 	.word	0x08018138
  ldr r2, =_sbss
 8003fc8:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8003fcc:	2000b3b4 	.word	0x2000b3b4

08003fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fd0:	e7fe      	b.n	8003fd0 <ADC_IRQHandler>

08003fd2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00b      	beq.n	8003ffa <LAN8742_RegisterBusIO+0x28>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <LAN8742_RegisterBusIO+0x28>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <LAN8742_RegisterBusIO+0x28>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d102      	bne.n	8004000 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffe:	e014      	b.n	800402a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d139      	bne.n	80040c6 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	e01c      	b.n	80040a6 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f107 020c 	add.w	r2, r7, #12
 8004074:	2112      	movs	r1, #18
 8004076:	6978      	ldr	r0, [r7, #20]
 8004078:	4798      	blx	r3
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	da03      	bge.n	8004088 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8004080:	f06f 0304 	mvn.w	r3, #4
 8004084:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8004086:	e00b      	b.n	80040a0 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	429a      	cmp	r2, r3
 8004092:	d105      	bne.n	80040a0 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	613b      	str	r3, [r7, #16]
         break;
 800409e:	e005      	b.n	80040ac <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	3301      	adds	r3, #1
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b1f      	cmp	r3, #31
 80040aa:	d9df      	bls.n	800406c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b1f      	cmp	r3, #31
 80040b2:	d902      	bls.n	80040ba <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80040b4:	f06f 0302 	mvn.w	r3, #2
 80040b8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d102      	bne.n	80040c6 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80040c6:	693b      	ldr	r3, [r7, #16]
 }
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6810      	ldr	r0, [r2, #0]
 80040e4:	f107 020c 	add.w	r2, r7, #12
 80040e8:	2101      	movs	r1, #1
 80040ea:	4798      	blx	r3
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	da02      	bge.n	80040f8 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80040f2:	f06f 0304 	mvn.w	r3, #4
 80040f6:	e06e      	b.n	80041d6 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6810      	ldr	r0, [r2, #0]
 8004100:	f107 020c 	add.w	r2, r7, #12
 8004104:	2101      	movs	r1, #1
 8004106:	4798      	blx	r3
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	da02      	bge.n	8004114 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800410e:	f06f 0304 	mvn.w	r3, #4
 8004112:	e060      	b.n	80041d6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800411e:	2301      	movs	r3, #1
 8004120:	e059      	b.n	80041d6 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6810      	ldr	r0, [r2, #0]
 800412a:	f107 020c 	add.w	r2, r7, #12
 800412e:	2100      	movs	r1, #0
 8004130:	4798      	blx	r3
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	da02      	bge.n	800413e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004138:	f06f 0304 	mvn.w	r3, #4
 800413c:	e04b      	b.n	80041d6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11b      	bne.n	8004180 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d006      	beq.n	8004160 <LAN8742_GetLinkState+0x90>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800415c:	2302      	movs	r3, #2
 800415e:	e03a      	b.n	80041d6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800416a:	2303      	movs	r3, #3
 800416c:	e033      	b.n	80041d6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8004178:	2304      	movs	r3, #4
 800417a:	e02c      	b.n	80041d6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800417c:	2305      	movs	r3, #5
 800417e:	e02a      	b.n	80041d6 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6810      	ldr	r0, [r2, #0]
 8004188:	f107 020c 	add.w	r2, r7, #12
 800418c:	211f      	movs	r1, #31
 800418e:	4798      	blx	r3
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	da02      	bge.n	800419c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8004196:	f06f 0304 	mvn.w	r3, #4
 800419a:	e01c      	b.n	80041d6 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80041a6:	2306      	movs	r3, #6
 80041a8:	e015      	b.n	80041d6 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 031c 	and.w	r3, r3, #28
 80041b0:	2b18      	cmp	r3, #24
 80041b2:	d101      	bne.n	80041b8 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80041b4:	2302      	movs	r3, #2
 80041b6:	e00e      	b.n	80041d6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 031c 	and.w	r3, r3, #28
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d101      	bne.n	80041c6 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e007      	b.n	80041d6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f003 031c 	and.w	r3, r3, #28
 80041cc:	2b14      	cmp	r3, #20
 80041ce:	d101      	bne.n	80041d4 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80041d0:	2304      	movs	r3, #4
 80041d2:	e000      	b.n	80041d6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80041d4:	2305      	movs	r3, #5
    }
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004220 <HAL_Init+0x40>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004220 <HAL_Init+0x40>)
 80041ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <HAL_Init+0x40>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004220 <HAL_Init+0x40>)
 80041f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041fc:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <HAL_Init+0x40>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a07      	ldr	r2, [pc, #28]	@ (8004220 <HAL_Init+0x40>)
 8004202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004208:	2003      	movs	r0, #3
 800420a:	f000 fcad 	bl	8004b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800420e:	200f      	movs	r0, #15
 8004210:	f000 f808 	bl	8004224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004214:	f7fd fff6 	bl	8002204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40023c00 	.word	0x40023c00

08004224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800422c:	4b12      	ldr	r3, [pc, #72]	@ (8004278 <HAL_InitTick+0x54>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b12      	ldr	r3, [pc, #72]	@ (800427c <HAL_InitTick+0x58>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	4619      	mov	r1, r3
 8004236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800423a:	fbb3 f3f1 	udiv	r3, r3, r1
 800423e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fcc5 	bl	8004bd2 <HAL_SYSTICK_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e00e      	b.n	8004270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b0f      	cmp	r3, #15
 8004256:	d80a      	bhi.n	800426e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004258:	2200      	movs	r2, #0
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	f04f 30ff 	mov.w	r0, #4294967295
 8004260:	f000 fc8d 	bl	8004b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004264:	4a06      	ldr	r2, [pc, #24]	@ (8004280 <HAL_InitTick+0x5c>)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e000      	b.n	8004270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000000 	.word	0x20000000
 800427c:	20000070 	.word	0x20000070
 8004280:	2000006c 	.word	0x2000006c

08004284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004288:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <HAL_IncTick+0x20>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	4b06      	ldr	r3, [pc, #24]	@ (80042a8 <HAL_IncTick+0x24>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4413      	add	r3, r2
 8004294:	4a04      	ldr	r2, [pc, #16]	@ (80042a8 <HAL_IncTick+0x24>)
 8004296:	6013      	str	r3, [r2, #0]
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000070 	.word	0x20000070
 80042a8:	20000db4 	.word	0x20000db4

080042ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return uwTick;
 80042b0:	4b03      	ldr	r3, [pc, #12]	@ (80042c0 <HAL_GetTick+0x14>)
 80042b2:	681b      	ldr	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	20000db4 	.word	0x20000db4

080042c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042cc:	f7ff ffee 	bl	80042ac <HAL_GetTick>
 80042d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d005      	beq.n	80042ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042de:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <HAL_Delay+0x44>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042ea:	bf00      	nop
 80042ec:	f7ff ffde 	bl	80042ac <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d8f7      	bhi.n	80042ec <HAL_Delay+0x28>
  {
  }
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000070 	.word	0x20000070

0800430c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e033      	b.n	800438a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc fda6 	bl	8000e7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b00      	cmp	r3, #0
 8004348:	d118      	bne.n	800437c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004352:	f023 0302 	bic.w	r3, r3, #2
 8004356:	f043 0202 	orr.w	r2, r3, #2
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f93a 	bl	80045d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	f023 0303 	bic.w	r3, r3, #3
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	641a      	str	r2, [r3, #64]	@ 0x40
 800437a:	e001      	b.n	8004380 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004388:	7bfb      	ldrb	r3, [r7, #15]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x1c>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e105      	b.n	80045bc <HAL_ADC_ConfigChannel+0x228>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b09      	cmp	r3, #9
 80043be:	d925      	bls.n	800440c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68d9      	ldr	r1, [r3, #12]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	4613      	mov	r3, r2
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	4413      	add	r3, r2
 80043d4:	3b1e      	subs	r3, #30
 80043d6:	2207      	movs	r2, #7
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43da      	mvns	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	400a      	ands	r2, r1
 80043e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68d9      	ldr	r1, [r3, #12]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	4618      	mov	r0, r3
 80043f8:	4603      	mov	r3, r0
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	4403      	add	r3, r0
 80043fe:	3b1e      	subs	r3, #30
 8004400:	409a      	lsls	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	e022      	b.n	8004452 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6919      	ldr	r1, [r3, #16]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	4613      	mov	r3, r2
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	4413      	add	r3, r2
 8004420:	2207      	movs	r2, #7
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43da      	mvns	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	400a      	ands	r2, r1
 800442e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6919      	ldr	r1, [r3, #16]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	b29b      	uxth	r3, r3
 8004440:	4618      	mov	r0, r3
 8004442:	4603      	mov	r3, r0
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	4403      	add	r3, r0
 8004448:	409a      	lsls	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b06      	cmp	r3, #6
 8004458:	d824      	bhi.n	80044a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	3b05      	subs	r3, #5
 800446c:	221f      	movs	r2, #31
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	43da      	mvns	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	400a      	ands	r2, r1
 800447a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	4618      	mov	r0, r3
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	3b05      	subs	r3, #5
 8004496:	fa00 f203 	lsl.w	r2, r0, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80044a2:	e04c      	b.n	800453e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b0c      	cmp	r3, #12
 80044aa:	d824      	bhi.n	80044f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	3b23      	subs	r3, #35	@ 0x23
 80044be:	221f      	movs	r2, #31
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43da      	mvns	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	400a      	ands	r2, r1
 80044cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	4618      	mov	r0, r3
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	3b23      	subs	r3, #35	@ 0x23
 80044e8:	fa00 f203 	lsl.w	r2, r0, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80044f4:	e023      	b.n	800453e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	3b41      	subs	r3, #65	@ 0x41
 8004508:	221f      	movs	r2, #31
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43da      	mvns	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	400a      	ands	r2, r1
 8004516:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	4618      	mov	r0, r3
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	3b41      	subs	r3, #65	@ 0x41
 8004532:	fa00 f203 	lsl.w	r2, r0, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800453e:	4b22      	ldr	r3, [pc, #136]	@ (80045c8 <HAL_ADC_ConfigChannel+0x234>)
 8004540:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a21      	ldr	r2, [pc, #132]	@ (80045cc <HAL_ADC_ConfigChannel+0x238>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d109      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x1cc>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b12      	cmp	r3, #18
 8004552:	d105      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a19      	ldr	r2, [pc, #100]	@ (80045cc <HAL_ADC_ConfigChannel+0x238>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d123      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x21e>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b10      	cmp	r3, #16
 8004570:	d003      	beq.n	800457a <HAL_ADC_ConfigChannel+0x1e6>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b11      	cmp	r3, #17
 8004578:	d11b      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b10      	cmp	r3, #16
 800458c:	d111      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800458e:	4b10      	ldr	r3, [pc, #64]	@ (80045d0 <HAL_ADC_ConfigChannel+0x23c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a10      	ldr	r2, [pc, #64]	@ (80045d4 <HAL_ADC_ConfigChannel+0x240>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	0c9a      	lsrs	r2, r3, #18
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80045a4:	e002      	b.n	80045ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f9      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	40012300 	.word	0x40012300
 80045cc:	40012000 	.word	0x40012000
 80045d0:	20000000 	.word	0x20000000
 80045d4:	431bde83 	.word	0x431bde83

080045d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045e0:	4b79      	ldr	r3, [pc, #484]	@ (80047c8 <ADC_Init+0x1f0>)
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800460c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	021a      	lsls	r2, r3, #8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6859      	ldr	r1, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004652:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6899      	ldr	r1, [r3, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466a:	4a58      	ldr	r2, [pc, #352]	@ (80047cc <ADC_Init+0x1f4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d022      	beq.n	80046b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800467e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6899      	ldr	r1, [r3, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80046a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6899      	ldr	r1, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	609a      	str	r2, [r3, #8]
 80046b4:	e00f      	b.n	80046d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80046c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80046d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0202 	bic.w	r2, r2, #2
 80046e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6899      	ldr	r1, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	7e1b      	ldrb	r3, [r3, #24]
 80046f0:	005a      	lsls	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01b      	beq.n	800473c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004712:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004722:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6859      	ldr	r1, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	3b01      	subs	r3, #1
 8004730:	035a      	lsls	r2, r3, #13
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	e007      	b.n	800474c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800474a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800475a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	3b01      	subs	r3, #1
 8004768:	051a      	lsls	r2, r3, #20
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004780:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6899      	ldr	r1, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800478e:	025a      	lsls	r2, r3, #9
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6899      	ldr	r1, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	029a      	lsls	r2, r3, #10
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	609a      	str	r2, [r3, #8]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	40012300 	.word	0x40012300
 80047cc:	0f000001 	.word	0x0f000001

080047d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e0ed      	b.n	80049be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d102      	bne.n	80047f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc fbf4 	bl	8000fdc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004804:	f7ff fd52 	bl	80042ac <HAL_GetTick>
 8004808:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800480a:	e012      	b.n	8004832 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800480c:	f7ff fd4e 	bl	80042ac <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b0a      	cmp	r3, #10
 8004818:	d90b      	bls.n	8004832 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2205      	movs	r2, #5
 800482a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e0c5      	b.n	80049be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0e5      	beq.n	800480c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0202 	bic.w	r2, r2, #2
 800484e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004850:	f7ff fd2c 	bl	80042ac <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004856:	e012      	b.n	800487e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004858:	f7ff fd28 	bl	80042ac <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b0a      	cmp	r3, #10
 8004864:	d90b      	bls.n	800487e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2205      	movs	r2, #5
 8004876:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e09f      	b.n	80049be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e5      	bne.n	8004858 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	7e1b      	ldrb	r3, [r3, #24]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d108      	bne.n	80048a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	e007      	b.n	80048b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	7e5b      	ldrb	r3, [r3, #25]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d108      	bne.n	80048d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	e007      	b.n	80048e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	7e9b      	ldrb	r3, [r3, #26]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d108      	bne.n	80048fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0220 	orr.w	r2, r2, #32
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	e007      	b.n	800490a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0220 	bic.w	r2, r2, #32
 8004908:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	7edb      	ldrb	r3, [r3, #27]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d108      	bne.n	8004924 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0210 	bic.w	r2, r2, #16
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e007      	b.n	8004934 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0210 	orr.w	r2, r2, #16
 8004932:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	7f1b      	ldrb	r3, [r3, #28]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d108      	bne.n	800494e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0208 	orr.w	r2, r2, #8
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	e007      	b.n	800495e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0208 	bic.w	r2, r2, #8
 800495c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	7f5b      	ldrb	r3, [r3, #29]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d108      	bne.n	8004978 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0204 	orr.w	r2, r2, #4
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	e007      	b.n	8004988 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0204 	bic.w	r2, r2, #4
 8004986:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	ea42 0103 	orr.w	r1, r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	1e5a      	subs	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049d8:	4b0c      	ldr	r3, [pc, #48]	@ (8004a0c <__NVIC_SetPriorityGrouping+0x44>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049e4:	4013      	ands	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049fa:	4a04      	ldr	r2, [pc, #16]	@ (8004a0c <__NVIC_SetPriorityGrouping+0x44>)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	60d3      	str	r3, [r2, #12]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	e000ed00 	.word	0xe000ed00

08004a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a14:	4b04      	ldr	r3, [pc, #16]	@ (8004a28 <__NVIC_GetPriorityGrouping+0x18>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	0a1b      	lsrs	r3, r3, #8
 8004a1a:	f003 0307 	and.w	r3, r3, #7
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	e000ed00 	.word	0xe000ed00

08004a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	db0b      	blt.n	8004a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	f003 021f 	and.w	r2, r3, #31
 8004a44:	4907      	ldr	r1, [pc, #28]	@ (8004a64 <__NVIC_EnableIRQ+0x38>)
 8004a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	e000e100 	.word	0xe000e100

08004a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	6039      	str	r1, [r7, #0]
 8004a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	db0a      	blt.n	8004a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	490c      	ldr	r1, [pc, #48]	@ (8004ab4 <__NVIC_SetPriority+0x4c>)
 8004a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a86:	0112      	lsls	r2, r2, #4
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a90:	e00a      	b.n	8004aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	4908      	ldr	r1, [pc, #32]	@ (8004ab8 <__NVIC_SetPriority+0x50>)
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	3b04      	subs	r3, #4
 8004aa0:	0112      	lsls	r2, r2, #4
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	761a      	strb	r2, [r3, #24]
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	e000e100 	.word	0xe000e100
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	@ 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f1c3 0307 	rsb	r3, r3, #7
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	bf28      	it	cs
 8004ada:	2304      	movcs	r3, #4
 8004adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	2b06      	cmp	r3, #6
 8004ae4:	d902      	bls.n	8004aec <NVIC_EncodePriority+0x30>
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3b03      	subs	r3, #3
 8004aea:	e000      	b.n	8004aee <NVIC_EncodePriority+0x32>
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af0:	f04f 32ff 	mov.w	r2, #4294967295
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43da      	mvns	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	401a      	ands	r2, r3
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b04:	f04f 31ff 	mov.w	r1, #4294967295
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0e:	43d9      	mvns	r1, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b14:	4313      	orrs	r3, r2
         );
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3724      	adds	r7, #36	@ 0x24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b34:	d301      	bcc.n	8004b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b36:	2301      	movs	r3, #1
 8004b38:	e00f      	b.n	8004b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b64 <SysTick_Config+0x40>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b42:	210f      	movs	r1, #15
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295
 8004b48:	f7ff ff8e 	bl	8004a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b4c:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <SysTick_Config+0x40>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b52:	4b04      	ldr	r3, [pc, #16]	@ (8004b64 <SysTick_Config+0x40>)
 8004b54:	2207      	movs	r2, #7
 8004b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	e000e010 	.word	0xe000e010

08004b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff ff29 	bl	80049c8 <__NVIC_SetPriorityGrouping>
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b086      	sub	sp, #24
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	4603      	mov	r3, r0
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b90:	f7ff ff3e 	bl	8004a10 <__NVIC_GetPriorityGrouping>
 8004b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	6978      	ldr	r0, [r7, #20]
 8004b9c:	f7ff ff8e 	bl	8004abc <NVIC_EncodePriority>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff ff5d 	bl	8004a68 <__NVIC_SetPriority>
}
 8004bae:	bf00      	nop
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff ff31 	bl	8004a2c <__NVIC_EnableIRQ>
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff ffa2 	bl	8004b24 <SysTick_Config>
 8004be0:	4603      	mov	r3, r0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004bf8:	f7ff fb58 	bl	80042ac <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e099      	b.n	8004d3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0201 	bic.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c28:	e00f      	b.n	8004c4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c2a:	f7ff fb3f 	bl	80042ac <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b05      	cmp	r3, #5
 8004c36:	d908      	bls.n	8004c4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2203      	movs	r2, #3
 8004c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e078      	b.n	8004d3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e8      	bne.n	8004c2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4b38      	ldr	r3, [pc, #224]	@ (8004d44 <HAL_DMA_Init+0x158>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d107      	bne.n	8004cb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cac:	4313      	orrs	r3, r2
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f023 0307 	bic.w	r3, r3, #7
 8004cca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d117      	bne.n	8004d0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00e      	beq.n	8004d0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fb0d 	bl	8005310 <DMA_CheckFifoParam>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2240      	movs	r2, #64	@ 0x40
 8004d00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e016      	b.n	8004d3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fac4 	bl	80052a4 <DMA_CalcBaseAndBitshift>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d24:	223f      	movs	r2, #63	@ 0x3f
 8004d26:	409a      	lsls	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	f010803f 	.word	0xf010803f

08004d48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_DMA_Start_IT+0x26>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e040      	b.n	8004df0 <HAL_DMA_Start_IT+0xa8>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d12f      	bne.n	8004de2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2202      	movs	r2, #2
 8004d86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fa56 	bl	8005248 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da0:	223f      	movs	r2, #63	@ 0x3f
 8004da2:	409a      	lsls	r2, r3
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0216 	orr.w	r2, r2, #22
 8004db6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0208 	orr.w	r2, r2, #8
 8004dce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e005      	b.n	8004dee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004dea:	2302      	movs	r3, #2
 8004dec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e06:	f7ff fa51 	bl	80042ac <HAL_GetTick>
 8004e0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d008      	beq.n	8004e2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2280      	movs	r2, #128	@ 0x80
 8004e1c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e052      	b.n	8004ed0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0216 	bic.w	r2, r2, #22
 8004e38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d103      	bne.n	8004e5a <HAL_DMA_Abort+0x62>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0208 	bic.w	r2, r2, #8
 8004e68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e7a:	e013      	b.n	8004ea4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e7c:	f7ff fa16 	bl	80042ac <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b05      	cmp	r3, #5
 8004e88:	d90c      	bls.n	8004ea4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2203      	movs	r2, #3
 8004e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e015      	b.n	8004ed0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e4      	bne.n	8004e7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb6:	223f      	movs	r2, #63	@ 0x3f
 8004eb8:	409a      	lsls	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d004      	beq.n	8004ef6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2280      	movs	r2, #128	@ 0x80
 8004ef0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e00c      	b.n	8004f10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2205      	movs	r2, #5
 8004efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0201 	bic.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f28:	4b8e      	ldr	r3, [pc, #568]	@ (8005164 <HAL_DMA_IRQHandler+0x248>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a8e      	ldr	r2, [pc, #568]	@ (8005168 <HAL_DMA_IRQHandler+0x24c>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	0a9b      	lsrs	r3, r3, #10
 8004f34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f46:	2208      	movs	r2, #8
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01a      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d013      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0204 	bic.w	r2, r2, #4
 8004f6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f74:	2208      	movs	r2, #8
 8004f76:	409a      	lsls	r2, r3
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f80:	f043 0201 	orr.w	r2, r3, #1
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	409a      	lsls	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d012      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00b      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004faa:	2201      	movs	r2, #1
 8004fac:	409a      	lsls	r2, r3
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb6:	f043 0202 	orr.w	r2, r3, #2
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc2:	2204      	movs	r2, #4
 8004fc4:	409a      	lsls	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d012      	beq.n	8004ff4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00b      	beq.n	8004ff4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe0:	2204      	movs	r2, #4
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fec:	f043 0204 	orr.w	r2, r3, #4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff8:	2210      	movs	r2, #16
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d043      	beq.n	800508c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d03c      	beq.n	800508c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005016:	2210      	movs	r2, #16
 8005018:	409a      	lsls	r2, r3
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d018      	beq.n	800505e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d108      	bne.n	800504c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d024      	beq.n	800508c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	4798      	blx	r3
 800504a:	e01f      	b.n	800508c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01b      	beq.n	800508c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	4798      	blx	r3
 800505c:	e016      	b.n	800508c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005068:	2b00      	cmp	r3, #0
 800506a:	d107      	bne.n	800507c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0208 	bic.w	r2, r2, #8
 800507a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005090:	2220      	movs	r2, #32
 8005092:	409a      	lsls	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4013      	ands	r3, r2
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 808f 	beq.w	80051bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8087 	beq.w	80051bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b2:	2220      	movs	r2, #32
 80050b4:	409a      	lsls	r2, r3
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b05      	cmp	r3, #5
 80050c4:	d136      	bne.n	8005134 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0216 	bic.w	r2, r2, #22
 80050d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <HAL_DMA_IRQHandler+0x1da>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0208 	bic.w	r2, r2, #8
 8005104:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800510a:	223f      	movs	r2, #63	@ 0x3f
 800510c:	409a      	lsls	r2, r3
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005126:	2b00      	cmp	r3, #0
 8005128:	d07e      	beq.n	8005228 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
        }
        return;
 8005132:	e079      	b.n	8005228 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d01d      	beq.n	800517e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10d      	bne.n	800516c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005154:	2b00      	cmp	r3, #0
 8005156:	d031      	beq.n	80051bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	4798      	blx	r3
 8005160:	e02c      	b.n	80051bc <HAL_DMA_IRQHandler+0x2a0>
 8005162:	bf00      	nop
 8005164:	20000000 	.word	0x20000000
 8005168:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005170:	2b00      	cmp	r3, #0
 8005172:	d023      	beq.n	80051bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	4798      	blx	r3
 800517c:	e01e      	b.n	80051bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10f      	bne.n	80051ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0210 	bic.w	r2, r2, #16
 800519a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d032      	beq.n	800522a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d022      	beq.n	8005216 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2205      	movs	r2, #5
 80051d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0201 	bic.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	3301      	adds	r3, #1
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d307      	bcc.n	8005204 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f2      	bne.n	80051e8 <HAL_DMA_IRQHandler+0x2cc>
 8005202:	e000      	b.n	8005206 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005204:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	4798      	blx	r3
 8005226:	e000      	b.n	800522a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005228:	bf00      	nop
    }
  }
}
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800523c:	4618      	mov	r0, r3
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005264:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b40      	cmp	r3, #64	@ 0x40
 8005274:	d108      	bne.n	8005288 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005286:	e007      	b.n	8005298 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	60da      	str	r2, [r3, #12]
}
 8005298:	bf00      	nop
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	3b10      	subs	r3, #16
 80052b4:	4a14      	ldr	r2, [pc, #80]	@ (8005308 <DMA_CalcBaseAndBitshift+0x64>)
 80052b6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ba:	091b      	lsrs	r3, r3, #4
 80052bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80052be:	4a13      	ldr	r2, [pc, #76]	@ (800530c <DMA_CalcBaseAndBitshift+0x68>)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d909      	bls.n	80052e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80052da:	f023 0303 	bic.w	r3, r3, #3
 80052de:	1d1a      	adds	r2, r3, #4
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80052e4:	e007      	b.n	80052f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80052ee:	f023 0303 	bic.w	r3, r3, #3
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	aaaaaaab 	.word	0xaaaaaaab
 800530c:	08017f54 	.word	0x08017f54

08005310 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005320:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d11f      	bne.n	800536a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b03      	cmp	r3, #3
 800532e:	d856      	bhi.n	80053de <DMA_CheckFifoParam+0xce>
 8005330:	a201      	add	r2, pc, #4	@ (adr r2, 8005338 <DMA_CheckFifoParam+0x28>)
 8005332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005336:	bf00      	nop
 8005338:	08005349 	.word	0x08005349
 800533c:	0800535b 	.word	0x0800535b
 8005340:	08005349 	.word	0x08005349
 8005344:	080053df 	.word	0x080053df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d046      	beq.n	80053e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005358:	e043      	b.n	80053e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005362:	d140      	bne.n	80053e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005368:	e03d      	b.n	80053e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005372:	d121      	bne.n	80053b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b03      	cmp	r3, #3
 8005378:	d837      	bhi.n	80053ea <DMA_CheckFifoParam+0xda>
 800537a:	a201      	add	r2, pc, #4	@ (adr r2, 8005380 <DMA_CheckFifoParam+0x70>)
 800537c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005380:	08005391 	.word	0x08005391
 8005384:	08005397 	.word	0x08005397
 8005388:	08005391 	.word	0x08005391
 800538c:	080053a9 	.word	0x080053a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	73fb      	strb	r3, [r7, #15]
      break;
 8005394:	e030      	b.n	80053f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d025      	beq.n	80053ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053a6:	e022      	b.n	80053ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053b0:	d11f      	bne.n	80053f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053b6:	e01c      	b.n	80053f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d903      	bls.n	80053c6 <DMA_CheckFifoParam+0xb6>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d003      	beq.n	80053cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80053c4:	e018      	b.n	80053f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	73fb      	strb	r3, [r7, #15]
      break;
 80053ca:	e015      	b.n	80053f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00e      	beq.n	80053f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
      break;
 80053dc:	e00b      	b.n	80053f6 <DMA_CheckFifoParam+0xe6>
      break;
 80053de:	bf00      	nop
 80053e0:	e00a      	b.n	80053f8 <DMA_CheckFifoParam+0xe8>
      break;
 80053e2:	bf00      	nop
 80053e4:	e008      	b.n	80053f8 <DMA_CheckFifoParam+0xe8>
      break;
 80053e6:	bf00      	nop
 80053e8:	e006      	b.n	80053f8 <DMA_CheckFifoParam+0xe8>
      break;
 80053ea:	bf00      	nop
 80053ec:	e004      	b.n	80053f8 <DMA_CheckFifoParam+0xe8>
      break;
 80053ee:	bf00      	nop
 80053f0:	e002      	b.n	80053f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80053f2:	bf00      	nop
 80053f4:	e000      	b.n	80053f8 <DMA_CheckFifoParam+0xe8>
      break;
 80053f6:	bf00      	nop
    }
  } 
  
  return status; 
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop

08005408 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e08a      	b.n	8005530 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005420:	2b00      	cmp	r3, #0
 8005422:	d106      	bne.n	8005432 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f004 fdc5 	bl	8009fbc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005432:	2300      	movs	r3, #0
 8005434:	60bb      	str	r3, [r7, #8]
 8005436:	4b40      	ldr	r3, [pc, #256]	@ (8005538 <HAL_ETH_Init+0x130>)
 8005438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543a:	4a3f      	ldr	r2, [pc, #252]	@ (8005538 <HAL_ETH_Init+0x130>)
 800543c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005440:	6453      	str	r3, [r2, #68]	@ 0x44
 8005442:	4b3d      	ldr	r3, [pc, #244]	@ (8005538 <HAL_ETH_Init+0x130>)
 8005444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800544a:	60bb      	str	r3, [r7, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800544e:	4b3b      	ldr	r3, [pc, #236]	@ (800553c <HAL_ETH_Init+0x134>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	4a3a      	ldr	r2, [pc, #232]	@ (800553c <HAL_ETH_Init+0x134>)
 8005454:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005458:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800545a:	4b38      	ldr	r3, [pc, #224]	@ (800553c <HAL_ETH_Init+0x134>)
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	4936      	ldr	r1, [pc, #216]	@ (800553c <HAL_ETH_Init+0x134>)
 8005464:	4313      	orrs	r3, r2
 8005466:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8005468:	4b34      	ldr	r3, [pc, #208]	@ (800553c <HAL_ETH_Init+0x134>)
 800546a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005482:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005484:	f7fe ff12 	bl	80042ac <HAL_GetTick>
 8005488:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800548a:	e011      	b.n	80054b0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800548c:	f7fe ff0e 	bl	80042ac <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800549a:	d909      	bls.n	80054b0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2204      	movs	r2, #4
 80054a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	22e0      	movs	r2, #224	@ 0xe0
 80054a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e03f      	b.n	8005530 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e4      	bne.n	800548c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fe16 	bl	80060f4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fec1 	bl	8006250 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 ff17 	bl	8006302 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	461a      	mov	r2, r3
 80054da:	2100      	movs	r1, #0
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fe7f 	bl	80061e0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80054f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005502:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005506:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800551a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2210      	movs	r2, #16
 800552a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40023800 	.word	0x40023800
 800553c:	40013800 	.word	0x40013800

08005540 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800554e:	2b10      	cmp	r3, #16
 8005550:	d150      	bne.n	80055f4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2204      	movs	r2, #4
 800555e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f9f8 	bl	8005956 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0208 	orr.w	r2, r2, #8
 8005574:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800557e:	2001      	movs	r0, #1
 8005580:	f7fe fea0 	bl	80042c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0204 	orr.w	r2, r2, #4
 800559a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80055a4:	2001      	movs	r0, #1
 80055a6:	f7fe fe8d 	bl	80042c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fc3a 	bl	8005e2c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6812      	ldr	r2, [r2, #0]
 80055c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80055ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80055ce:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	f043 0302 	orr.w	r3, r3, #2
 80055e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80055e6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2240      	movs	r2, #64	@ 0x40
 80055ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	e000      	b.n	80055f6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
  }
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800560c:	2b40      	cmp	r3, #64	@ 0x40
 800560e:	d14a      	bne.n	80056a6 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800562a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800562e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	f023 0302 	bic.w	r3, r3, #2
 8005642:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005646:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0204 	bic.w	r2, r2, #4
 8005656:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005660:	2001      	movs	r0, #1
 8005662:	f7fe fe2f 	bl	80042c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fbdc 	bl	8005e2c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0208 	bic.w	r2, r2, #8
 8005682:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800568c:	2001      	movs	r0, #1
 800568e:	f7fe fe19 	bl	80042c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2210      	movs	r2, #16
 800569e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	e000      	b.n	80056a8 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
  }
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c8:	f043 0201 	orr.w	r2, r3, #1
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e07c      	b.n	80057d0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056dc:	2b40      	cmp	r3, #64	@ 0x40
 80056de:	d176      	bne.n	80057ce <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80056e0:	2200      	movs	r2, #0
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 fe7b 	bl	80063e0 <ETH_Prepare_Tx_Descriptors>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d009      	beq.n	8005704 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f6:	f043 0202 	orr.w	r2, r3, #2
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e065      	b.n	80057d0 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8005704:	f3bf 8f4f 	dsb	sy
}
 8005708:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3206      	adds	r2, #6
 8005712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005716:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	629a      	str	r2, [r3, #40]	@ 0x28
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005726:	2b03      	cmp	r3, #3
 8005728:	d904      	bls.n	8005734 <HAL_ETH_Transmit+0x84>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572e:	1f1a      	subs	r2, r3, #4
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3106      	adds	r1, #6
 8005740:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005744:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005748:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800574a:	f7fe fdaf 	bl	80042ac <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005750:	e037      	b.n	80057c2 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d011      	beq.n	8005788 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576a:	f043 0208 	orr.w	r2, r3, #8
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800577c:	695a      	ldr	r2, [r3, #20]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e023      	b.n	80057d0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	d018      	beq.n	80057c2 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005790:	f7fe fd8c 	bl	80042ac <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	429a      	cmp	r2, r3
 800579e:	d302      	bcc.n	80057a6 <HAL_ETH_Transmit+0xf6>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10d      	bne.n	80057c2 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ac:	f043 0204 	orr.w	r2, r3, #4
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80057bc:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e006      	b.n	80057d0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	dbc3      	blt.n	8005752 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e000      	b.n	80057d0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
  }
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d109      	bne.n	8005804 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f6:	f043 0201 	orr.w	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e0a4      	b.n	800594e <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800580a:	2b40      	cmp	r3, #64	@ 0x40
 800580c:	d001      	beq.n	8005812 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e09d      	b.n	800594e <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005816:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	3212      	adds	r2, #18
 800581e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005822:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005828:	f1c3 0304 	rsb	r3, r3, #4
 800582c:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800582e:	e066      	b.n	80058fe <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005838:	2b00      	cmp	r3, #0
 800583a:	d007      	beq.n	800584c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	699a      	ldr	r2, [r3, #24]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005854:	2b00      	cmp	r3, #0
 8005856:	d103      	bne.n	8005860 <HAL_ETH_ReadData+0x88>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800585c:	2b00      	cmp	r3, #0
 800585e:	d03c      	beq.n	80058da <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	0c1b      	lsrs	r3, r3, #16
 800587e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005882:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8005898:	2301      	movs	r3, #1
 800589a:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80058b4:	461a      	mov	r2, r3
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f004 fd2f 	bl	800a31c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	441a      	add	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2200      	movs	r2, #0
 80058d8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	3301      	adds	r3, #1
 80058de:	61fb      	str	r3, [r7, #28]
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d902      	bls.n	80058ec <HAL_ETH_ReadData+0x114>
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	3b04      	subs	r3, #4
 80058ea:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	3212      	adds	r2, #18
 80058f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	3301      	adds	r3, #1
 80058fc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8005902:	2b00      	cmp	r3, #0
 8005904:	db06      	blt.n	8005914 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	429a      	cmp	r2, r3
 800590c:	d202      	bcs.n	8005914 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800590e:	7cfb      	ldrb	r3, [r7, #19]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d08d      	beq.n	8005830 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	441a      	add	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f814 	bl	8005956 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8005934:	7cfb      	ldrb	r3, [r7, #19]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d108      	bne.n	800594c <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	e000      	b.n	800594e <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
}
 800594e:	4618      	mov	r0, r3
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b088      	sub	sp, #32
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8005962:	2301      	movs	r3, #1
 8005964:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800596a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	3212      	adds	r2, #18
 8005972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005976:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800597c:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800597e:	e044      	b.n	8005a0a <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d112      	bne.n	80059ae <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8005988:	f107 0308 	add.w	r3, r7, #8
 800598c:	4618      	mov	r0, r3
 800598e:	f004 fc95 	bl	800a2bc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	74fb      	strb	r3, [r7, #19]
 800599c:	e007      	b.n	80059ae <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	461a      	mov	r2, r3
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	461a      	mov	r2, r3
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80059ae:	7cfb      	ldrb	r3, [r7, #19]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d02a      	beq.n	8005a0a <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d108      	bne.n	80059ce <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80059c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	6053      	str	r3, [r2, #4]
 80059cc:	e005      	b.n	80059da <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	3301      	adds	r3, #1
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d902      	bls.n	80059f8 <ETH_UpdateDescriptor+0xa2>
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	3b04      	subs	r3, #4
 80059f6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	3212      	adds	r2, #18
 80059fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a02:	617b      	str	r3, [r7, #20]
      desccount--;
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <ETH_UpdateDescriptor+0xc0>
 8005a10:	7cfb      	ldrb	r3, [r7, #19]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1b4      	bne.n	8005980 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d01a      	beq.n	8005a56 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	3303      	adds	r3, #3
 8005a24:	f003 0303 	and.w	r3, r3, #3
 8005a28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005a2a:	f3bf 8f5f 	dmb	sy
}
 8005a2e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6919      	ldr	r1, [r3, #16]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	18ca      	adds	r2, r1, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a48:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8005a56:	bf00      	nop
 8005a58:	3720      	adds	r7, #32
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b086      	sub	sp, #24
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	607a      	str	r2, [r7, #4]
 8005a6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f003 031c 	and.w	r3, r3, #28
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	02db      	lsls	r3, r3, #11
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	019b      	lsls	r3, r3, #6
 8005a8c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f023 0302 	bic.w	r3, r3, #2
 8005a9c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f043 0301 	orr.w	r3, r3, #1
 8005aa4:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8005aae:	f7fe fbfd 	bl	80042ac <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005ab4:	e00d      	b.n	8005ad2 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8005ab6:	f7fe fbf9 	bl	80042ac <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ac4:	d301      	bcc.n	8005aca <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e010      	b.n	8005aec <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1ec      	bne.n	8005ab6 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f003 031c 	and.w	r3, r3, #28
 8005b10:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	02db      	lsls	r3, r3, #11
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	019b      	lsls	r3, r3, #6
 8005b22:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f043 0302 	orr.w	r3, r3, #2
 8005b32:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f043 0301 	orr.w	r3, r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b4e:	f7fe fbad 	bl	80042ac <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005b54:	e00d      	b.n	8005b72 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8005b56:	f7fe fba9 	bl	80042ac <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b64:	d301      	bcc.n	8005b6a <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e009      	b.n	8005b7e <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1ec      	bne.n	8005b56 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e0e6      	b.n	8005d68 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	bf14      	ite	ne
 8005ba8:	2301      	movne	r3, #1
 8005baa:	2300      	moveq	r3, #0
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bf0c      	ite	eq
 8005bd2:	2301      	moveq	r3, #1
 8005bd4:	2300      	movne	r3, #0
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	bf14      	ite	ne
 8005bee:	2301      	movne	r3, #1
 8005bf0:	2300      	moveq	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	bf0c      	ite	eq
 8005c08:	2301      	moveq	r3, #1
 8005c0a:	2300      	movne	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	461a      	mov	r2, r3
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	bf14      	ite	ne
 8005c22:	2301      	movne	r3, #1
 8005c24:	2300      	moveq	r3, #0
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	bf0c      	ite	eq
 8005c58:	2301      	moveq	r3, #1
 8005c5a:	2300      	movne	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	bf0c      	ite	eq
 8005c72:	2301      	moveq	r3, #1
 8005c74:	2300      	movne	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	bf14      	ite	ne
 8005c8c:	2301      	movne	r3, #1
 8005c8e:	2300      	moveq	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	461a      	mov	r2, r3
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	bf14      	ite	ne
 8005cb4:	2301      	movne	r3, #1
 8005cb6:	2300      	moveq	r3, #0
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	461a      	mov	r2, r3
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	bf14      	ite	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	2300      	moveq	r3, #0
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	bf14      	ite	ne
 8005ce8:	2301      	movne	r3, #1
 8005cea:	2300      	moveq	r3, #0
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	461a      	mov	r2, r3
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bf0c      	ite	eq
 8005d04:	2301      	moveq	r3, #1
 8005d06:	2300      	movne	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	0c1b      	lsrs	r3, r3, #16
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bf14      	ite	ne
 8005d3c:	2301      	movne	r3, #1
 8005d3e:	2300      	moveq	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	461a      	mov	r2, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	bf14      	ite	ne
 8005d58:	2301      	movne	r3, #1
 8005d5a:	2300      	moveq	r3, #0
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e00b      	b.n	8005da0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d8e:	2b10      	cmp	r3, #16
 8005d90:	d105      	bne.n	8005d9e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f86f 	bl	8005e78 <ETH_SetMACConfig>

    return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e000      	b.n	8005da0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
  }
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 031c 	bic.w	r3, r3, #28
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005dc0:	f001 fbce 	bl	8007560 <HAL_RCC_GetHCLKFreq>
 8005dc4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	4a14      	ldr	r2, [pc, #80]	@ (8005e1c <HAL_ETH_SetMDIOClockRange+0x74>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d804      	bhi.n	8005dd8 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f043 0308 	orr.w	r3, r3, #8
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	e019      	b.n	8005e0c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4a11      	ldr	r2, [pc, #68]	@ (8005e20 <HAL_ETH_SetMDIOClockRange+0x78>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d204      	bcs.n	8005dea <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f043 030c 	orr.w	r3, r3, #12
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	e010      	b.n	8005e0c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	4a0d      	ldr	r2, [pc, #52]	@ (8005e24 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d90c      	bls.n	8005e0c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4a0c      	ldr	r2, [pc, #48]	@ (8005e28 <HAL_ETH_SetMDIOClockRange+0x80>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d804      	bhi.n	8005e04 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f043 0304 	orr.w	r3, r3, #4
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	e003      	b.n	8005e0c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f043 0310 	orr.w	r3, r3, #16
 8005e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	611a      	str	r2, [r3, #16]
}
 8005e14:	bf00      	nop
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	02160ebf 	.word	0x02160ebf
 8005e20:	03938700 	.word	0x03938700
 8005e24:	05f5e0ff 	.word	0x05f5e0ff
 8005e28:	08f0d17f 	.word	0x08f0d17f

08005e2c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	6812      	ldr	r2, [r2, #0]
 8005e46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005e4e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005e5c:	2001      	movs	r0, #1
 8005e5e:	f7fe fa31 	bl	80042c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005e6c:	6193      	str	r3, [r2, #24]
}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4b53      	ldr	r3, [pc, #332]	@ (8005fdc <ETH_SetMACConfig+0x164>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	7b9b      	ldrb	r3, [r3, #14]
 8005e96:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	7c12      	ldrb	r2, [r2, #16]
 8005e9c:	2a00      	cmp	r2, #0
 8005e9e:	d102      	bne.n	8005ea6 <ETH_SetMACConfig+0x2e>
 8005ea0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005ea4:	e000      	b.n	8005ea8 <ETH_SetMACConfig+0x30>
 8005ea6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005ea8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	7c52      	ldrb	r2, [r2, #17]
 8005eae:	2a00      	cmp	r2, #0
 8005eb0:	d102      	bne.n	8005eb8 <ETH_SetMACConfig+0x40>
 8005eb2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8005eb6:	e000      	b.n	8005eba <ETH_SetMACConfig+0x42>
 8005eb8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005eba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005ec0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	7fdb      	ldrb	r3, [r3, #31]
 8005ec6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005ec8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005ece:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	7f92      	ldrb	r2, [r2, #30]
 8005ed4:	2a00      	cmp	r2, #0
 8005ed6:	d102      	bne.n	8005ede <ETH_SetMACConfig+0x66>
 8005ed8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005edc:	e000      	b.n	8005ee0 <ETH_SetMACConfig+0x68>
 8005ede:	2200      	movs	r2, #0
                        macconf->Speed |
 8005ee0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	7f1b      	ldrb	r3, [r3, #28]
 8005ee6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005ee8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005eee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	791b      	ldrb	r3, [r3, #4]
 8005ef4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005ef6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005efe:	2a00      	cmp	r2, #0
 8005f00:	d102      	bne.n	8005f08 <ETH_SetMACConfig+0x90>
 8005f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f06:	e000      	b.n	8005f0a <ETH_SetMACConfig+0x92>
 8005f08:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005f0a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	7bdb      	ldrb	r3, [r3, #15]
 8005f10:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005f12:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005f18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f20:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005f22:	4313      	orrs	r3, r2
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	f7fe f9c2 	bl	80042c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8005f56:	4013      	ands	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f5e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005f66:	2a00      	cmp	r2, #0
 8005f68:	d101      	bne.n	8005f6e <ETH_SetMACConfig+0xf6>
 8005f6a:	2280      	movs	r2, #128	@ 0x80
 8005f6c:	e000      	b.n	8005f70 <ETH_SetMACConfig+0xf8>
 8005f6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005f70:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005f76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8005f7e:	2a01      	cmp	r2, #1
 8005f80:	d101      	bne.n	8005f86 <ETH_SetMACConfig+0x10e>
 8005f82:	2208      	movs	r2, #8
 8005f84:	e000      	b.n	8005f88 <ETH_SetMACConfig+0x110>
 8005f86:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005f88:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005f90:	2a01      	cmp	r2, #1
 8005f92:	d101      	bne.n	8005f98 <ETH_SetMACConfig+0x120>
 8005f94:	2204      	movs	r2, #4
 8005f96:	e000      	b.n	8005f9a <ETH_SetMACConfig+0x122>
 8005f98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005f9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8005fa2:	2a01      	cmp	r2, #1
 8005fa4:	d101      	bne.n	8005faa <ETH_SetMACConfig+0x132>
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	e000      	b.n	8005fac <ETH_SetMACConfig+0x134>
 8005faa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005fac:	4313      	orrs	r3, r2
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005fc4:	2001      	movs	r0, #1
 8005fc6:	f7fe f97d 	bl	80042c4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	619a      	str	r2, [r3, #24]
}
 8005fd2:	bf00      	nop
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	fd20810f 	.word	0xfd20810f

08005fe0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4b3d      	ldr	r3, [pc, #244]	@ (80060f0 <ETH_SetDMAConfig+0x110>)
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	7b1b      	ldrb	r3, [r3, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d102      	bne.n	800600c <ETH_SetDMAConfig+0x2c>
 8006006:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800600a:	e000      	b.n	800600e <ETH_SetDMAConfig+0x2e>
 800600c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	7b5b      	ldrb	r3, [r3, #13]
 8006012:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006014:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	7f52      	ldrb	r2, [r2, #29]
 800601a:	2a00      	cmp	r2, #0
 800601c:	d102      	bne.n	8006024 <ETH_SetDMAConfig+0x44>
 800601e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006022:	e000      	b.n	8006026 <ETH_SetDMAConfig+0x46>
 8006024:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006026:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	7b9b      	ldrb	r3, [r3, #14]
 800602c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800602e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006034:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	7f1b      	ldrb	r3, [r3, #28]
 800603a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800603c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	7f9b      	ldrb	r3, [r3, #30]
 8006042:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006044:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800604a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006052:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006054:	4313      	orrs	r3, r2
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006064:	461a      	mov	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006076:	2001      	movs	r0, #1
 8006078:	f7fe f924 	bl	80042c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006084:	461a      	mov	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	791b      	ldrb	r3, [r3, #4]
 800608e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006094:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800609a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80060a0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80060a8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80060aa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80060b2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80060b8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6812      	ldr	r2, [r2, #0]
 80060be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80060c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80060c6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80060d4:	2001      	movs	r0, #1
 80060d6:	f7fe f8f5 	bl	80042c4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060e2:	461a      	mov	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6013      	str	r3, [r2, #0]
}
 80060e8:	bf00      	nop
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	f8de3f23 	.word	0xf8de3f23

080060f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b0a6      	sub	sp, #152	@ 0x98
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006108:	2300      	movs	r3, #0
 800610a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800610c:	2300      	movs	r3, #0
 800610e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8006112:	2301      	movs	r3, #1
 8006114:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006118:	2300      	movs	r3, #0
 800611a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800611e:	2301      	movs	r3, #1
 8006120:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006124:	2301      	movs	r3, #1
 8006126:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800612a:	2300      	movs	r3, #0
 800612c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006130:	2300      	movs	r3, #0
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006136:	2300      	movs	r3, #0
 8006138:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800613a:	2300      	movs	r3, #0
 800613c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006140:	2300      	movs	r3, #0
 8006142:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006144:	2300      	movs	r3, #0
 8006146:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800614a:	2300      	movs	r3, #0
 800614c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006150:	2300      	movs	r3, #0
 8006152:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006156:	2300      	movs	r3, #0
 8006158:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800615c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006160:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006162:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006166:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006168:	2300      	movs	r3, #0
 800616a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800616e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff fe7f 	bl	8005e78 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800617a:	2301      	movs	r3, #1
 800617c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800617e:	2301      	movs	r3, #1
 8006180:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006182:	2301      	movs	r3, #1
 8006184:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006188:	2301      	movs	r3, #1
 800618a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800618c:	2300      	movs	r3, #0
 800618e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8006190:	2300      	movs	r3, #0
 8006192:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006196:	2300      	movs	r3, #0
 8006198:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800619c:	2300      	movs	r3, #0
 800619e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80061a6:	2301      	movs	r3, #1
 80061a8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80061aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80061ae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80061b0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80061b4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80061b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80061ba:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80061ca:	f107 0308 	add.w	r3, r7, #8
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff ff05 	bl	8005fe0 <ETH_SetDMAConfig>
}
 80061d6:	bf00      	nop
 80061d8:	3798      	adds	r7, #152	@ 0x98
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3305      	adds	r3, #5
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	3204      	adds	r2, #4
 80061f8:	7812      	ldrb	r2, [r2, #0]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	4b11      	ldr	r3, [pc, #68]	@ (8006248 <ETH_MACAddressConfig+0x68>)
 8006202:	4413      	add	r3, r2
 8006204:	461a      	mov	r2, r3
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3303      	adds	r3, #3
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	061a      	lsls	r2, r3, #24
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3302      	adds	r3, #2
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	041b      	lsls	r3, r3, #16
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3301      	adds	r3, #1
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	021b      	lsls	r3, r3, #8
 8006224:	4313      	orrs	r3, r2
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	7812      	ldrb	r2, [r2, #0]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	4b06      	ldr	r3, [pc, #24]	@ (800624c <ETH_MACAddressConfig+0x6c>)
 8006232:	4413      	add	r3, r2
 8006234:	461a      	mov	r2, r3
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	6013      	str	r3, [r2, #0]
}
 800623a:	bf00      	nop
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	40028040 	.word	0x40028040
 800624c:	40028044 	.word	0x40028044

08006250 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	e03e      	b.n	80062dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68d9      	ldr	r1, [r3, #12]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4613      	mov	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	440b      	add	r3, r1
 800626e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2200      	movs	r2, #0
 800627a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2200      	movs	r2, #0
 8006280:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2200      	movs	r2, #0
 8006286:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006288:	68b9      	ldr	r1, [r7, #8]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	3206      	adds	r2, #6
 8006290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d80c      	bhi.n	80062c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68d9      	ldr	r1, [r3, #12]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	440b      	add	r3, r1
 80062b8:	461a      	mov	r2, r3
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	60da      	str	r2, [r3, #12]
 80062be:	e004      	b.n	80062ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	461a      	mov	r2, r3
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	3301      	adds	r3, #1
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d9bd      	bls.n	800625e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062f4:	611a      	str	r2, [r3, #16]
}
 80062f6:	bf00      	nop
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	e048      	b.n	80063a2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6919      	ldr	r1, [r3, #16]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	440b      	add	r3, r1
 8006320:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2200      	movs	r2, #0
 800632c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2200      	movs	r2, #0
 8006332:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2200      	movs	r2, #0
 8006338:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2200      	movs	r2, #0
 800633e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2200      	movs	r2, #0
 8006344:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800634c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	3212      	adds	r2, #18
 800636e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b02      	cmp	r3, #2
 8006376:	d80c      	bhi.n	8006392 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6919      	ldr	r1, [r3, #16]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	440b      	add	r3, r1
 800638a:	461a      	mov	r2, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	60da      	str	r2, [r3, #12]
 8006390:	e004      	b.n	800639c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	461a      	mov	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3301      	adds	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b03      	cmp	r3, #3
 80063a6:	d9b3      	bls.n	8006310 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691a      	ldr	r2, [r3, #16]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063d2:	60da      	str	r2, [r3, #12]
}
 80063d4:	bf00      	nop
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b091      	sub	sp, #68	@ 0x44
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3318      	adds	r3, #24
 80063f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80063f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800641e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006422:	d007      	beq.n	8006434 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006428:	3304      	adds	r3, #4
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8006434:	2302      	movs	r3, #2
 8006436:	e115      	b.n	8006664 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8006438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643a:	3301      	adds	r3, #1
 800643c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800643e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006446:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8006450:	f023 031f 	bic.w	r3, r3, #31
 8006454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006456:	6852      	ldr	r2, [r2, #4]
 8006458:	431a      	orrs	r2, r3
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d008      	beq.n	800647c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800646a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	431a      	orrs	r2, r3
 8006478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	d008      	beq.n	800649a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8006488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	431a      	orrs	r2, r3
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d005      	beq.n	80064b2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80064b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80064ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064bc:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80064be:	e084      	b.n	80065ca <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80064c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d006      	beq.n	80064e0 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80064d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e005      	b.n	80064ec <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80064e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80064e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ea:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80064ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ee:	3301      	adds	r3, #1
 80064f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d902      	bls.n	80064fe <ETH_Prepare_Tx_Descriptors+0x11e>
 80064f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064fa:	3b04      	subs	r3, #4
 80064fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006506:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8006508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006510:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006514:	d007      	beq.n	8006526 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800651a:	3304      	adds	r3, #4
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d029      	beq.n	800657a <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800652e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006532:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8006534:	2300      	movs	r3, #0
 8006536:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006538:	e019      	b.n	800656e <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 800653a:	f3bf 8f5f 	dmb	sy
}
 800653e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800654c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800654e:	3301      	adds	r3, #1
 8006550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006554:	2b03      	cmp	r3, #3
 8006556:	d902      	bls.n	800655e <ETH_Prepare_Tx_Descriptors+0x17e>
 8006558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800655a:	3b04      	subs	r3, #4
 800655c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006566:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8006568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656a:	3301      	adds	r3, #1
 800656c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800656e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006572:	429a      	cmp	r2, r3
 8006574:	d3e1      	bcc.n	800653a <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8006576:	2302      	movs	r3, #2
 8006578:	e074      	b.n	8006664 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8006586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006588:	3301      	adds	r3, #1
 800658a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800658c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8006592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800659c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80065a4:	f023 031f 	bic.w	r3, r3, #31
 80065a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065aa:	6852      	ldr	r2, [r2, #4]
 80065ac:	431a      	orrs	r2, r3
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80065b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b4:	3301      	adds	r3, #1
 80065b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80065b8:	f3bf 8f5f 	dmb	sy
}
 80065bc:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80065be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80065c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c8:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80065ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f47f af76 	bne.w	80064c0 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d006      	beq.n	80065e8 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80065da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80065e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	e005      	b.n	80065f4 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80065e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80065f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f2:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80065f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	6a3a      	ldr	r2, [r7, #32]
 8006604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006608:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800660a:	f3bf 8f5f 	dmb	sy
}
 800660e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800661c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006620:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006624:	3304      	adds	r3, #4
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800662c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006630:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006632:	f3ef 8310 	mrs	r3, PRIMASK
 8006636:	613b      	str	r3, [r7, #16]
  return(result);
 8006638:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800663a:	61fb      	str	r3, [r7, #28]
 800663c:	2301      	movs	r3, #1
 800663e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f383 8810 	msr	PRIMASK, r3
}
 8006646:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8006648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800664c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664e:	4413      	add	r3, r2
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	629a      	str	r2, [r3, #40]	@ 0x28
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	f383 8810 	msr	PRIMASK, r3
}
 8006660:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3744      	adds	r7, #68	@ 0x44
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006670:	b480      	push	{r7}
 8006672:	b089      	sub	sp, #36	@ 0x24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800667a:	2300      	movs	r3, #0
 800667c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800667e:	2300      	movs	r3, #0
 8006680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006682:	2300      	movs	r3, #0
 8006684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006686:	2300      	movs	r3, #0
 8006688:	61fb      	str	r3, [r7, #28]
 800668a:	e16b      	b.n	8006964 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800668c:	2201      	movs	r2, #1
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	4013      	ands	r3, r2
 800669e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	f040 815a 	bne.w	800695e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d005      	beq.n	80066c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d130      	bne.n	8006724 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	2203      	movs	r2, #3
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	43db      	mvns	r3, r3
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	4013      	ands	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	fa02 f303 	lsl.w	r3, r2, r3
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066f8:	2201      	movs	r2, #1
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006700:	43db      	mvns	r3, r3
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	4013      	ands	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	091b      	lsrs	r3, r3, #4
 800670e:	f003 0201 	and.w	r2, r3, #1
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	fa02 f303 	lsl.w	r3, r2, r3
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	4313      	orrs	r3, r2
 800671c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f003 0303 	and.w	r3, r3, #3
 800672c:	2b03      	cmp	r3, #3
 800672e:	d017      	beq.n	8006760 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	2203      	movs	r2, #3
 800673c:	fa02 f303 	lsl.w	r3, r2, r3
 8006740:	43db      	mvns	r3, r3
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	4013      	ands	r3, r2
 8006746:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	fa02 f303 	lsl.w	r3, r2, r3
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	4313      	orrs	r3, r2
 8006758:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d123      	bne.n	80067b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	08da      	lsrs	r2, r3, #3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3208      	adds	r2, #8
 8006774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006778:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	220f      	movs	r2, #15
 8006784:	fa02 f303 	lsl.w	r3, r2, r3
 8006788:	43db      	mvns	r3, r3
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	4013      	ands	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	691a      	ldr	r2, [r3, #16]
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	fa02 f303 	lsl.w	r3, r2, r3
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	08da      	lsrs	r2, r3, #3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3208      	adds	r2, #8
 80067ae:	69b9      	ldr	r1, [r7, #24]
 80067b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	2203      	movs	r2, #3
 80067c0:	fa02 f303 	lsl.w	r3, r2, r3
 80067c4:	43db      	mvns	r3, r3
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	4013      	ands	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f003 0203 	and.w	r2, r3, #3
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	005b      	lsls	r3, r3, #1
 80067d8:	fa02 f303 	lsl.w	r3, r2, r3
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	4313      	orrs	r3, r2
 80067e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 80b4 	beq.w	800695e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	4b60      	ldr	r3, [pc, #384]	@ (800697c <HAL_GPIO_Init+0x30c>)
 80067fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fe:	4a5f      	ldr	r2, [pc, #380]	@ (800697c <HAL_GPIO_Init+0x30c>)
 8006800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006804:	6453      	str	r3, [r2, #68]	@ 0x44
 8006806:	4b5d      	ldr	r3, [pc, #372]	@ (800697c <HAL_GPIO_Init+0x30c>)
 8006808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800680a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006812:	4a5b      	ldr	r2, [pc, #364]	@ (8006980 <HAL_GPIO_Init+0x310>)
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	089b      	lsrs	r3, r3, #2
 8006818:	3302      	adds	r3, #2
 800681a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800681e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	220f      	movs	r2, #15
 800682a:	fa02 f303 	lsl.w	r3, r2, r3
 800682e:	43db      	mvns	r3, r3
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	4013      	ands	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a52      	ldr	r2, [pc, #328]	@ (8006984 <HAL_GPIO_Init+0x314>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d02b      	beq.n	8006896 <HAL_GPIO_Init+0x226>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a51      	ldr	r2, [pc, #324]	@ (8006988 <HAL_GPIO_Init+0x318>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d025      	beq.n	8006892 <HAL_GPIO_Init+0x222>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a50      	ldr	r2, [pc, #320]	@ (800698c <HAL_GPIO_Init+0x31c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d01f      	beq.n	800688e <HAL_GPIO_Init+0x21e>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a4f      	ldr	r2, [pc, #316]	@ (8006990 <HAL_GPIO_Init+0x320>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d019      	beq.n	800688a <HAL_GPIO_Init+0x21a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a4e      	ldr	r2, [pc, #312]	@ (8006994 <HAL_GPIO_Init+0x324>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d013      	beq.n	8006886 <HAL_GPIO_Init+0x216>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a4d      	ldr	r2, [pc, #308]	@ (8006998 <HAL_GPIO_Init+0x328>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00d      	beq.n	8006882 <HAL_GPIO_Init+0x212>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a4c      	ldr	r2, [pc, #304]	@ (800699c <HAL_GPIO_Init+0x32c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d007      	beq.n	800687e <HAL_GPIO_Init+0x20e>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a4b      	ldr	r2, [pc, #300]	@ (80069a0 <HAL_GPIO_Init+0x330>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d101      	bne.n	800687a <HAL_GPIO_Init+0x20a>
 8006876:	2307      	movs	r3, #7
 8006878:	e00e      	b.n	8006898 <HAL_GPIO_Init+0x228>
 800687a:	2308      	movs	r3, #8
 800687c:	e00c      	b.n	8006898 <HAL_GPIO_Init+0x228>
 800687e:	2306      	movs	r3, #6
 8006880:	e00a      	b.n	8006898 <HAL_GPIO_Init+0x228>
 8006882:	2305      	movs	r3, #5
 8006884:	e008      	b.n	8006898 <HAL_GPIO_Init+0x228>
 8006886:	2304      	movs	r3, #4
 8006888:	e006      	b.n	8006898 <HAL_GPIO_Init+0x228>
 800688a:	2303      	movs	r3, #3
 800688c:	e004      	b.n	8006898 <HAL_GPIO_Init+0x228>
 800688e:	2302      	movs	r3, #2
 8006890:	e002      	b.n	8006898 <HAL_GPIO_Init+0x228>
 8006892:	2301      	movs	r3, #1
 8006894:	e000      	b.n	8006898 <HAL_GPIO_Init+0x228>
 8006896:	2300      	movs	r3, #0
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	f002 0203 	and.w	r2, r2, #3
 800689e:	0092      	lsls	r2, r2, #2
 80068a0:	4093      	lsls	r3, r2
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068a8:	4935      	ldr	r1, [pc, #212]	@ (8006980 <HAL_GPIO_Init+0x310>)
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	089b      	lsrs	r3, r3, #2
 80068ae:	3302      	adds	r3, #2
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80068b6:	4b3b      	ldr	r3, [pc, #236]	@ (80069a4 <HAL_GPIO_Init+0x334>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	43db      	mvns	r3, r3
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	4013      	ands	r3, r2
 80068c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80068da:	4a32      	ldr	r2, [pc, #200]	@ (80069a4 <HAL_GPIO_Init+0x334>)
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068e0:	4b30      	ldr	r3, [pc, #192]	@ (80069a4 <HAL_GPIO_Init+0x334>)
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	43db      	mvns	r3, r3
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	4013      	ands	r3, r2
 80068ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	4313      	orrs	r3, r2
 8006902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006904:	4a27      	ldr	r2, [pc, #156]	@ (80069a4 <HAL_GPIO_Init+0x334>)
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800690a:	4b26      	ldr	r3, [pc, #152]	@ (80069a4 <HAL_GPIO_Init+0x334>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	43db      	mvns	r3, r3
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	4013      	ands	r3, r2
 8006918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800692e:	4a1d      	ldr	r2, [pc, #116]	@ (80069a4 <HAL_GPIO_Init+0x334>)
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006934:	4b1b      	ldr	r3, [pc, #108]	@ (80069a4 <HAL_GPIO_Init+0x334>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	43db      	mvns	r3, r3
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	4013      	ands	r3, r2
 8006942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	4313      	orrs	r3, r2
 8006956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006958:	4a12      	ldr	r2, [pc, #72]	@ (80069a4 <HAL_GPIO_Init+0x334>)
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	3301      	adds	r3, #1
 8006962:	61fb      	str	r3, [r7, #28]
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	2b0f      	cmp	r3, #15
 8006968:	f67f ae90 	bls.w	800668c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800696c:	bf00      	nop
 800696e:	bf00      	nop
 8006970:	3724      	adds	r7, #36	@ 0x24
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	40023800 	.word	0x40023800
 8006980:	40013800 	.word	0x40013800
 8006984:	40020000 	.word	0x40020000
 8006988:	40020400 	.word	0x40020400
 800698c:	40020800 	.word	0x40020800
 8006990:	40020c00 	.word	0x40020c00
 8006994:	40021000 	.word	0x40021000
 8006998:	40021400 	.word	0x40021400
 800699c:	40021800 	.word	0x40021800
 80069a0:	40021c00 	.word	0x40021c00
 80069a4:	40013c00 	.word	0x40013c00

080069a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	807b      	strh	r3, [r7, #2]
 80069b4:	4613      	mov	r3, r2
 80069b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069b8:	787b      	ldrb	r3, [r7, #1]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069be:	887a      	ldrh	r2, [r7, #2]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80069c4:	e003      	b.n	80069ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80069c6:	887b      	ldrh	r3, [r7, #2]
 80069c8:	041a      	lsls	r2, r3, #16
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	619a      	str	r2, [r3, #24]
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069da:	b480      	push	{r7}
 80069dc:	b085      	sub	sp, #20
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	460b      	mov	r3, r1
 80069e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80069ec:	887a      	ldrh	r2, [r7, #2]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4013      	ands	r3, r2
 80069f2:	041a      	lsls	r2, r3, #16
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	43d9      	mvns	r1, r3
 80069f8:	887b      	ldrh	r3, [r7, #2]
 80069fa:	400b      	ands	r3, r1
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	619a      	str	r2, [r3, #24]
}
 8006a02:	bf00      	nop
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
	...

08006a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e12b      	b.n	8006c7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d106      	bne.n	8006a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fa fce6 	bl	8001408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2224      	movs	r2, #36	@ 0x24
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0201 	bic.w	r2, r2, #1
 8006a52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006a74:	f000 fd80 	bl	8007578 <HAL_RCC_GetPCLK1Freq>
 8006a78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	4a81      	ldr	r2, [pc, #516]	@ (8006c84 <HAL_I2C_Init+0x274>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d807      	bhi.n	8006a94 <HAL_I2C_Init+0x84>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4a80      	ldr	r2, [pc, #512]	@ (8006c88 <HAL_I2C_Init+0x278>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	bf94      	ite	ls
 8006a8c:	2301      	movls	r3, #1
 8006a8e:	2300      	movhi	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	e006      	b.n	8006aa2 <HAL_I2C_Init+0x92>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4a7d      	ldr	r2, [pc, #500]	@ (8006c8c <HAL_I2C_Init+0x27c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	bf94      	ite	ls
 8006a9c:	2301      	movls	r3, #1
 8006a9e:	2300      	movhi	r3, #0
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e0e7      	b.n	8006c7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4a78      	ldr	r2, [pc, #480]	@ (8006c90 <HAL_I2C_Init+0x280>)
 8006aae:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab2:	0c9b      	lsrs	r3, r3, #18
 8006ab4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	4a6a      	ldr	r2, [pc, #424]	@ (8006c84 <HAL_I2C_Init+0x274>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d802      	bhi.n	8006ae4 <HAL_I2C_Init+0xd4>
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	e009      	b.n	8006af8 <HAL_I2C_Init+0xe8>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
 8006aee:	4a69      	ldr	r2, [pc, #420]	@ (8006c94 <HAL_I2C_Init+0x284>)
 8006af0:	fba2 2303 	umull	r2, r3, r2, r3
 8006af4:	099b      	lsrs	r3, r3, #6
 8006af6:	3301      	adds	r3, #1
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	430b      	orrs	r3, r1
 8006afe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006b0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	495c      	ldr	r1, [pc, #368]	@ (8006c84 <HAL_I2C_Init+0x274>)
 8006b14:	428b      	cmp	r3, r1
 8006b16:	d819      	bhi.n	8006b4c <HAL_I2C_Init+0x13c>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	1e59      	subs	r1, r3, #1
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	005b      	lsls	r3, r3, #1
 8006b22:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b26:	1c59      	adds	r1, r3, #1
 8006b28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006b2c:	400b      	ands	r3, r1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00a      	beq.n	8006b48 <HAL_I2C_Init+0x138>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	1e59      	subs	r1, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b40:	3301      	adds	r3, #1
 8006b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b46:	e051      	b.n	8006bec <HAL_I2C_Init+0x1dc>
 8006b48:	2304      	movs	r3, #4
 8006b4a:	e04f      	b.n	8006bec <HAL_I2C_Init+0x1dc>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d111      	bne.n	8006b78 <HAL_I2C_Init+0x168>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	1e58      	subs	r0, r3, #1
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6859      	ldr	r1, [r3, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	440b      	add	r3, r1
 8006b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b66:	3301      	adds	r3, #1
 8006b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	bf0c      	ite	eq
 8006b70:	2301      	moveq	r3, #1
 8006b72:	2300      	movne	r3, #0
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	e012      	b.n	8006b9e <HAL_I2C_Init+0x18e>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	1e58      	subs	r0, r3, #1
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6859      	ldr	r1, [r3, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	440b      	add	r3, r1
 8006b86:	0099      	lsls	r1, r3, #2
 8006b88:	440b      	add	r3, r1
 8006b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b8e:	3301      	adds	r3, #1
 8006b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	bf0c      	ite	eq
 8006b98:	2301      	moveq	r3, #1
 8006b9a:	2300      	movne	r3, #0
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <HAL_I2C_Init+0x196>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e022      	b.n	8006bec <HAL_I2C_Init+0x1dc>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10e      	bne.n	8006bcc <HAL_I2C_Init+0x1bc>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	1e58      	subs	r0, r3, #1
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6859      	ldr	r1, [r3, #4]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	005b      	lsls	r3, r3, #1
 8006bba:	440b      	add	r3, r1
 8006bbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bca:	e00f      	b.n	8006bec <HAL_I2C_Init+0x1dc>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	1e58      	subs	r0, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6859      	ldr	r1, [r3, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	440b      	add	r3, r1
 8006bda:	0099      	lsls	r1, r3, #2
 8006bdc:	440b      	add	r3, r1
 8006bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8006be2:	3301      	adds	r3, #1
 8006be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006be8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	6809      	ldr	r1, [r1, #0]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	69da      	ldr	r2, [r3, #28]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006c1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	6911      	ldr	r1, [r2, #16]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	68d2      	ldr	r2, [r2, #12]
 8006c26:	4311      	orrs	r1, r2
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	6812      	ldr	r2, [r2, #0]
 8006c2c:	430b      	orrs	r3, r1
 8006c2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695a      	ldr	r2, [r3, #20]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	431a      	orrs	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	000186a0 	.word	0x000186a0
 8006c88:	001e847f 	.word	0x001e847f
 8006c8c:	003d08ff 	.word	0x003d08ff
 8006c90:	431bde83 	.word	0x431bde83
 8006c94:	10624dd3 	.word	0x10624dd3

08006c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e267      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d075      	beq.n	8006da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006cb6:	4b88      	ldr	r3, [pc, #544]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 030c 	and.w	r3, r3, #12
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	d00c      	beq.n	8006cdc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cc2:	4b85      	ldr	r3, [pc, #532]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006cca:	2b08      	cmp	r3, #8
 8006ccc:	d112      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cce:	4b82      	ldr	r3, [pc, #520]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cda:	d10b      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cdc:	4b7e      	ldr	r3, [pc, #504]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d05b      	beq.n	8006da0 <HAL_RCC_OscConfig+0x108>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d157      	bne.n	8006da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e242      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cfc:	d106      	bne.n	8006d0c <HAL_RCC_OscConfig+0x74>
 8006cfe:	4b76      	ldr	r3, [pc, #472]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a75      	ldr	r2, [pc, #468]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	e01d      	b.n	8006d48 <HAL_RCC_OscConfig+0xb0>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d14:	d10c      	bne.n	8006d30 <HAL_RCC_OscConfig+0x98>
 8006d16:	4b70      	ldr	r3, [pc, #448]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a6f      	ldr	r2, [pc, #444]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	4b6d      	ldr	r3, [pc, #436]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a6c      	ldr	r2, [pc, #432]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d2c:	6013      	str	r3, [r2, #0]
 8006d2e:	e00b      	b.n	8006d48 <HAL_RCC_OscConfig+0xb0>
 8006d30:	4b69      	ldr	r3, [pc, #420]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a68      	ldr	r2, [pc, #416]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	4b66      	ldr	r3, [pc, #408]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a65      	ldr	r2, [pc, #404]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d013      	beq.n	8006d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d50:	f7fd faac 	bl	80042ac <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d58:	f7fd faa8 	bl	80042ac <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b64      	cmp	r3, #100	@ 0x64
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e207      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0f0      	beq.n	8006d58 <HAL_RCC_OscConfig+0xc0>
 8006d76:	e014      	b.n	8006da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d78:	f7fd fa98 	bl	80042ac <HAL_GetTick>
 8006d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d80:	f7fd fa94 	bl	80042ac <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b64      	cmp	r3, #100	@ 0x64
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e1f3      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d92:	4b51      	ldr	r3, [pc, #324]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1f0      	bne.n	8006d80 <HAL_RCC_OscConfig+0xe8>
 8006d9e:	e000      	b.n	8006da2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d063      	beq.n	8006e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006dae:	4b4a      	ldr	r3, [pc, #296]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 030c 	and.w	r3, r3, #12
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00b      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dba:	4b47      	ldr	r3, [pc, #284]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006dc2:	2b08      	cmp	r3, #8
 8006dc4:	d11c      	bne.n	8006e00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dc6:	4b44      	ldr	r3, [pc, #272]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d116      	bne.n	8006e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dd2:	4b41      	ldr	r3, [pc, #260]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d005      	beq.n	8006dea <HAL_RCC_OscConfig+0x152>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d001      	beq.n	8006dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e1c7      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dea:	4b3b      	ldr	r3, [pc, #236]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	4937      	ldr	r1, [pc, #220]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dfe:	e03a      	b.n	8006e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d020      	beq.n	8006e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e08:	4b34      	ldr	r3, [pc, #208]	@ (8006edc <HAL_RCC_OscConfig+0x244>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0e:	f7fd fa4d 	bl	80042ac <HAL_GetTick>
 8006e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e14:	e008      	b.n	8006e28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e16:	f7fd fa49 	bl	80042ac <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d901      	bls.n	8006e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e1a8      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e28:	4b2b      	ldr	r3, [pc, #172]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0f0      	beq.n	8006e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e34:	4b28      	ldr	r3, [pc, #160]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	4925      	ldr	r1, [pc, #148]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	600b      	str	r3, [r1, #0]
 8006e48:	e015      	b.n	8006e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e4a:	4b24      	ldr	r3, [pc, #144]	@ (8006edc <HAL_RCC_OscConfig+0x244>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e50:	f7fd fa2c 	bl	80042ac <HAL_GetTick>
 8006e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e56:	e008      	b.n	8006e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e58:	f7fd fa28 	bl	80042ac <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d901      	bls.n	8006e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e187      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f0      	bne.n	8006e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0308 	and.w	r3, r3, #8
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d036      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d016      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e8a:	4b15      	ldr	r3, [pc, #84]	@ (8006ee0 <HAL_RCC_OscConfig+0x248>)
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e90:	f7fd fa0c 	bl	80042ac <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e98:	f7fd fa08 	bl	80042ac <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e167      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed8 <HAL_RCC_OscConfig+0x240>)
 8006eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0f0      	beq.n	8006e98 <HAL_RCC_OscConfig+0x200>
 8006eb6:	e01b      	b.n	8006ef0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006eb8:	4b09      	ldr	r3, [pc, #36]	@ (8006ee0 <HAL_RCC_OscConfig+0x248>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ebe:	f7fd f9f5 	bl	80042ac <HAL_GetTick>
 8006ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ec4:	e00e      	b.n	8006ee4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ec6:	f7fd f9f1 	bl	80042ac <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d907      	bls.n	8006ee4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e150      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
 8006ed8:	40023800 	.word	0x40023800
 8006edc:	42470000 	.word	0x42470000
 8006ee0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ee4:	4b88      	ldr	r3, [pc, #544]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1ea      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0304 	and.w	r3, r3, #4
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 8097 	beq.w	800702c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006efe:	2300      	movs	r3, #0
 8006f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f02:	4b81      	ldr	r3, [pc, #516]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10f      	bne.n	8006f2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60bb      	str	r3, [r7, #8]
 8006f12:	4b7d      	ldr	r3, [pc, #500]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f16:	4a7c      	ldr	r2, [pc, #496]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f1e:	4b7a      	ldr	r3, [pc, #488]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f26:	60bb      	str	r3, [r7, #8]
 8006f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f2e:	4b77      	ldr	r3, [pc, #476]	@ (800710c <HAL_RCC_OscConfig+0x474>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d118      	bne.n	8006f6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f3a:	4b74      	ldr	r3, [pc, #464]	@ (800710c <HAL_RCC_OscConfig+0x474>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a73      	ldr	r2, [pc, #460]	@ (800710c <HAL_RCC_OscConfig+0x474>)
 8006f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f46:	f7fd f9b1 	bl	80042ac <HAL_GetTick>
 8006f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f4c:	e008      	b.n	8006f60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f4e:	f7fd f9ad 	bl	80042ac <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d901      	bls.n	8006f60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e10c      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f60:	4b6a      	ldr	r3, [pc, #424]	@ (800710c <HAL_RCC_OscConfig+0x474>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0f0      	beq.n	8006f4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d106      	bne.n	8006f82 <HAL_RCC_OscConfig+0x2ea>
 8006f74:	4b64      	ldr	r3, [pc, #400]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f78:	4a63      	ldr	r2, [pc, #396]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006f7a:	f043 0301 	orr.w	r3, r3, #1
 8006f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f80:	e01c      	b.n	8006fbc <HAL_RCC_OscConfig+0x324>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	2b05      	cmp	r3, #5
 8006f88:	d10c      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x30c>
 8006f8a:	4b5f      	ldr	r3, [pc, #380]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f8e:	4a5e      	ldr	r2, [pc, #376]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006f90:	f043 0304 	orr.w	r3, r3, #4
 8006f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f96:	4b5c      	ldr	r3, [pc, #368]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f9a:	4a5b      	ldr	r2, [pc, #364]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006f9c:	f043 0301 	orr.w	r3, r3, #1
 8006fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fa2:	e00b      	b.n	8006fbc <HAL_RCC_OscConfig+0x324>
 8006fa4:	4b58      	ldr	r3, [pc, #352]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fa8:	4a57      	ldr	r2, [pc, #348]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006faa:	f023 0301 	bic.w	r3, r3, #1
 8006fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fb0:	4b55      	ldr	r3, [pc, #340]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fb4:	4a54      	ldr	r2, [pc, #336]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006fb6:	f023 0304 	bic.w	r3, r3, #4
 8006fba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d015      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc4:	f7fd f972 	bl	80042ac <HAL_GetTick>
 8006fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fca:	e00a      	b.n	8006fe2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fcc:	f7fd f96e 	bl	80042ac <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e0cb      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fe2:	4b49      	ldr	r3, [pc, #292]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0ee      	beq.n	8006fcc <HAL_RCC_OscConfig+0x334>
 8006fee:	e014      	b.n	800701a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ff0:	f7fd f95c 	bl	80042ac <HAL_GetTick>
 8006ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ff6:	e00a      	b.n	800700e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff8:	f7fd f958 	bl	80042ac <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007006:	4293      	cmp	r3, r2
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e0b5      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800700e:	4b3e      	ldr	r3, [pc, #248]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8007010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1ee      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d105      	bne.n	800702c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007020:	4b39      	ldr	r3, [pc, #228]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8007022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007024:	4a38      	ldr	r2, [pc, #224]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8007026:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800702a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 80a1 	beq.w	8007178 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007036:	4b34      	ldr	r3, [pc, #208]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f003 030c 	and.w	r3, r3, #12
 800703e:	2b08      	cmp	r3, #8
 8007040:	d05c      	beq.n	80070fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d141      	bne.n	80070ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800704a:	4b31      	ldr	r3, [pc, #196]	@ (8007110 <HAL_RCC_OscConfig+0x478>)
 800704c:	2200      	movs	r2, #0
 800704e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007050:	f7fd f92c 	bl	80042ac <HAL_GetTick>
 8007054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007056:	e008      	b.n	800706a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007058:	f7fd f928 	bl	80042ac <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b02      	cmp	r3, #2
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e087      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800706a:	4b27      	ldr	r3, [pc, #156]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f0      	bne.n	8007058 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	69da      	ldr	r2, [r3, #28]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	431a      	orrs	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007084:	019b      	lsls	r3, r3, #6
 8007086:	431a      	orrs	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708c:	085b      	lsrs	r3, r3, #1
 800708e:	3b01      	subs	r3, #1
 8007090:	041b      	lsls	r3, r3, #16
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007098:	061b      	lsls	r3, r3, #24
 800709a:	491b      	ldr	r1, [pc, #108]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 800709c:	4313      	orrs	r3, r2
 800709e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070a0:	4b1b      	ldr	r3, [pc, #108]	@ (8007110 <HAL_RCC_OscConfig+0x478>)
 80070a2:	2201      	movs	r2, #1
 80070a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a6:	f7fd f901 	bl	80042ac <HAL_GetTick>
 80070aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ac:	e008      	b.n	80070c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ae:	f7fd f8fd 	bl	80042ac <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d901      	bls.n	80070c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e05c      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070c0:	4b11      	ldr	r3, [pc, #68]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d0f0      	beq.n	80070ae <HAL_RCC_OscConfig+0x416>
 80070cc:	e054      	b.n	8007178 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ce:	4b10      	ldr	r3, [pc, #64]	@ (8007110 <HAL_RCC_OscConfig+0x478>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d4:	f7fd f8ea 	bl	80042ac <HAL_GetTick>
 80070d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070da:	e008      	b.n	80070ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070dc:	f7fd f8e6 	bl	80042ac <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d901      	bls.n	80070ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e045      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ee:	4b06      	ldr	r3, [pc, #24]	@ (8007108 <HAL_RCC_OscConfig+0x470>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1f0      	bne.n	80070dc <HAL_RCC_OscConfig+0x444>
 80070fa:	e03d      	b.n	8007178 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d107      	bne.n	8007114 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e038      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
 8007108:	40023800 	.word	0x40023800
 800710c:	40007000 	.word	0x40007000
 8007110:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007114:	4b1b      	ldr	r3, [pc, #108]	@ (8007184 <HAL_RCC_OscConfig+0x4ec>)
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d028      	beq.n	8007174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800712c:	429a      	cmp	r2, r3
 800712e:	d121      	bne.n	8007174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800713a:	429a      	cmp	r2, r3
 800713c:	d11a      	bne.n	8007174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007144:	4013      	ands	r3, r2
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800714a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800714c:	4293      	cmp	r3, r2
 800714e:	d111      	bne.n	8007174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715a:	085b      	lsrs	r3, r3, #1
 800715c:	3b01      	subs	r3, #1
 800715e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007160:	429a      	cmp	r2, r3
 8007162:	d107      	bne.n	8007174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007170:	429a      	cmp	r2, r3
 8007172:	d001      	beq.n	8007178 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e000      	b.n	800717a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40023800 	.word	0x40023800

08007188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e0cc      	b.n	8007336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800719c:	4b68      	ldr	r3, [pc, #416]	@ (8007340 <HAL_RCC_ClockConfig+0x1b8>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d90c      	bls.n	80071c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071aa:	4b65      	ldr	r3, [pc, #404]	@ (8007340 <HAL_RCC_ClockConfig+0x1b8>)
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	b2d2      	uxtb	r2, r2
 80071b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071b2:	4b63      	ldr	r3, [pc, #396]	@ (8007340 <HAL_RCC_ClockConfig+0x1b8>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0307 	and.w	r3, r3, #7
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d001      	beq.n	80071c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e0b8      	b.n	8007336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d020      	beq.n	8007212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d005      	beq.n	80071e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071dc:	4b59      	ldr	r3, [pc, #356]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	4a58      	ldr	r2, [pc, #352]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 80071e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80071e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0308 	and.w	r3, r3, #8
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071f4:	4b53      	ldr	r3, [pc, #332]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	4a52      	ldr	r2, [pc, #328]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 80071fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80071fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007200:	4b50      	ldr	r3, [pc, #320]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	494d      	ldr	r1, [pc, #308]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 800720e:	4313      	orrs	r3, r2
 8007210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d044      	beq.n	80072a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d107      	bne.n	8007236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007226:	4b47      	ldr	r3, [pc, #284]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d119      	bne.n	8007266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e07f      	b.n	8007336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2b02      	cmp	r3, #2
 800723c:	d003      	beq.n	8007246 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007242:	2b03      	cmp	r3, #3
 8007244:	d107      	bne.n	8007256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007246:	4b3f      	ldr	r3, [pc, #252]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d109      	bne.n	8007266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e06f      	b.n	8007336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007256:	4b3b      	ldr	r3, [pc, #236]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e067      	b.n	8007336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007266:	4b37      	ldr	r3, [pc, #220]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f023 0203 	bic.w	r2, r3, #3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	4934      	ldr	r1, [pc, #208]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 8007274:	4313      	orrs	r3, r2
 8007276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007278:	f7fd f818 	bl	80042ac <HAL_GetTick>
 800727c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800727e:	e00a      	b.n	8007296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007280:	f7fd f814 	bl	80042ac <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800728e:	4293      	cmp	r3, r2
 8007290:	d901      	bls.n	8007296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e04f      	b.n	8007336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007296:	4b2b      	ldr	r3, [pc, #172]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f003 020c 	and.w	r2, r3, #12
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d1eb      	bne.n	8007280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072a8:	4b25      	ldr	r3, [pc, #148]	@ (8007340 <HAL_RCC_ClockConfig+0x1b8>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0307 	and.w	r3, r3, #7
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d20c      	bcs.n	80072d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072b6:	4b22      	ldr	r3, [pc, #136]	@ (8007340 <HAL_RCC_ClockConfig+0x1b8>)
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072be:	4b20      	ldr	r3, [pc, #128]	@ (8007340 <HAL_RCC_ClockConfig+0x1b8>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0307 	and.w	r3, r3, #7
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d001      	beq.n	80072d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e032      	b.n	8007336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d008      	beq.n	80072ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072dc:	4b19      	ldr	r3, [pc, #100]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	4916      	ldr	r1, [pc, #88]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0308 	and.w	r3, r3, #8
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072fa:	4b12      	ldr	r3, [pc, #72]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	490e      	ldr	r1, [pc, #56]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 800730a:	4313      	orrs	r3, r2
 800730c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800730e:	f000 f821 	bl	8007354 <HAL_RCC_GetSysClockFreq>
 8007312:	4602      	mov	r2, r0
 8007314:	4b0b      	ldr	r3, [pc, #44]	@ (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	091b      	lsrs	r3, r3, #4
 800731a:	f003 030f 	and.w	r3, r3, #15
 800731e:	490a      	ldr	r1, [pc, #40]	@ (8007348 <HAL_RCC_ClockConfig+0x1c0>)
 8007320:	5ccb      	ldrb	r3, [r1, r3]
 8007322:	fa22 f303 	lsr.w	r3, r2, r3
 8007326:	4a09      	ldr	r2, [pc, #36]	@ (800734c <HAL_RCC_ClockConfig+0x1c4>)
 8007328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800732a:	4b09      	ldr	r3, [pc, #36]	@ (8007350 <HAL_RCC_ClockConfig+0x1c8>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4618      	mov	r0, r3
 8007330:	f7fc ff78 	bl	8004224 <HAL_InitTick>

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	40023c00 	.word	0x40023c00
 8007344:	40023800 	.word	0x40023800
 8007348:	08017f3c 	.word	0x08017f3c
 800734c:	20000000 	.word	0x20000000
 8007350:	2000006c 	.word	0x2000006c

08007354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007358:	b094      	sub	sp, #80	@ 0x50
 800735a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800736c:	4b79      	ldr	r3, [pc, #484]	@ (8007554 <HAL_RCC_GetSysClockFreq+0x200>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f003 030c 	and.w	r3, r3, #12
 8007374:	2b08      	cmp	r3, #8
 8007376:	d00d      	beq.n	8007394 <HAL_RCC_GetSysClockFreq+0x40>
 8007378:	2b08      	cmp	r3, #8
 800737a:	f200 80e1 	bhi.w	8007540 <HAL_RCC_GetSysClockFreq+0x1ec>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <HAL_RCC_GetSysClockFreq+0x34>
 8007382:	2b04      	cmp	r3, #4
 8007384:	d003      	beq.n	800738e <HAL_RCC_GetSysClockFreq+0x3a>
 8007386:	e0db      	b.n	8007540 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007388:	4b73      	ldr	r3, [pc, #460]	@ (8007558 <HAL_RCC_GetSysClockFreq+0x204>)
 800738a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800738c:	e0db      	b.n	8007546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800738e:	4b73      	ldr	r3, [pc, #460]	@ (800755c <HAL_RCC_GetSysClockFreq+0x208>)
 8007390:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007392:	e0d8      	b.n	8007546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007394:	4b6f      	ldr	r3, [pc, #444]	@ (8007554 <HAL_RCC_GetSysClockFreq+0x200>)
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800739c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800739e:	4b6d      	ldr	r3, [pc, #436]	@ (8007554 <HAL_RCC_GetSysClockFreq+0x200>)
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d063      	beq.n	8007472 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073aa:	4b6a      	ldr	r3, [pc, #424]	@ (8007554 <HAL_RCC_GetSysClockFreq+0x200>)
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	099b      	lsrs	r3, r3, #6
 80073b0:	2200      	movs	r2, #0
 80073b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80073b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80073be:	2300      	movs	r3, #0
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80073c6:	4622      	mov	r2, r4
 80073c8:	462b      	mov	r3, r5
 80073ca:	f04f 0000 	mov.w	r0, #0
 80073ce:	f04f 0100 	mov.w	r1, #0
 80073d2:	0159      	lsls	r1, r3, #5
 80073d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073d8:	0150      	lsls	r0, r2, #5
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4621      	mov	r1, r4
 80073e0:	1a51      	subs	r1, r2, r1
 80073e2:	6139      	str	r1, [r7, #16]
 80073e4:	4629      	mov	r1, r5
 80073e6:	eb63 0301 	sbc.w	r3, r3, r1
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	f04f 0200 	mov.w	r2, #0
 80073f0:	f04f 0300 	mov.w	r3, #0
 80073f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073f8:	4659      	mov	r1, fp
 80073fa:	018b      	lsls	r3, r1, #6
 80073fc:	4651      	mov	r1, sl
 80073fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007402:	4651      	mov	r1, sl
 8007404:	018a      	lsls	r2, r1, #6
 8007406:	4651      	mov	r1, sl
 8007408:	ebb2 0801 	subs.w	r8, r2, r1
 800740c:	4659      	mov	r1, fp
 800740e:	eb63 0901 	sbc.w	r9, r3, r1
 8007412:	f04f 0200 	mov.w	r2, #0
 8007416:	f04f 0300 	mov.w	r3, #0
 800741a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800741e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007426:	4690      	mov	r8, r2
 8007428:	4699      	mov	r9, r3
 800742a:	4623      	mov	r3, r4
 800742c:	eb18 0303 	adds.w	r3, r8, r3
 8007430:	60bb      	str	r3, [r7, #8]
 8007432:	462b      	mov	r3, r5
 8007434:	eb49 0303 	adc.w	r3, r9, r3
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	f04f 0300 	mov.w	r3, #0
 8007442:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007446:	4629      	mov	r1, r5
 8007448:	024b      	lsls	r3, r1, #9
 800744a:	4621      	mov	r1, r4
 800744c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007450:	4621      	mov	r1, r4
 8007452:	024a      	lsls	r2, r1, #9
 8007454:	4610      	mov	r0, r2
 8007456:	4619      	mov	r1, r3
 8007458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800745a:	2200      	movs	r2, #0
 800745c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800745e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007460:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007464:	f7f9 fb22 	bl	8000aac <__aeabi_uldivmod>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4613      	mov	r3, r2
 800746e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007470:	e058      	b.n	8007524 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007472:	4b38      	ldr	r3, [pc, #224]	@ (8007554 <HAL_RCC_GetSysClockFreq+0x200>)
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	099b      	lsrs	r3, r3, #6
 8007478:	2200      	movs	r2, #0
 800747a:	4618      	mov	r0, r3
 800747c:	4611      	mov	r1, r2
 800747e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007482:	623b      	str	r3, [r7, #32]
 8007484:	2300      	movs	r3, #0
 8007486:	627b      	str	r3, [r7, #36]	@ 0x24
 8007488:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800748c:	4642      	mov	r2, r8
 800748e:	464b      	mov	r3, r9
 8007490:	f04f 0000 	mov.w	r0, #0
 8007494:	f04f 0100 	mov.w	r1, #0
 8007498:	0159      	lsls	r1, r3, #5
 800749a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800749e:	0150      	lsls	r0, r2, #5
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4641      	mov	r1, r8
 80074a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80074aa:	4649      	mov	r1, r9
 80074ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80074b0:	f04f 0200 	mov.w	r2, #0
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80074bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80074c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80074c4:	ebb2 040a 	subs.w	r4, r2, sl
 80074c8:	eb63 050b 	sbc.w	r5, r3, fp
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	00eb      	lsls	r3, r5, #3
 80074d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074da:	00e2      	lsls	r2, r4, #3
 80074dc:	4614      	mov	r4, r2
 80074de:	461d      	mov	r5, r3
 80074e0:	4643      	mov	r3, r8
 80074e2:	18e3      	adds	r3, r4, r3
 80074e4:	603b      	str	r3, [r7, #0]
 80074e6:	464b      	mov	r3, r9
 80074e8:	eb45 0303 	adc.w	r3, r5, r3
 80074ec:	607b      	str	r3, [r7, #4]
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	f04f 0300 	mov.w	r3, #0
 80074f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80074fa:	4629      	mov	r1, r5
 80074fc:	028b      	lsls	r3, r1, #10
 80074fe:	4621      	mov	r1, r4
 8007500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007504:	4621      	mov	r1, r4
 8007506:	028a      	lsls	r2, r1, #10
 8007508:	4610      	mov	r0, r2
 800750a:	4619      	mov	r1, r3
 800750c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800750e:	2200      	movs	r2, #0
 8007510:	61bb      	str	r3, [r7, #24]
 8007512:	61fa      	str	r2, [r7, #28]
 8007514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007518:	f7f9 fac8 	bl	8000aac <__aeabi_uldivmod>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4613      	mov	r3, r2
 8007522:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007524:	4b0b      	ldr	r3, [pc, #44]	@ (8007554 <HAL_RCC_GetSysClockFreq+0x200>)
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	0c1b      	lsrs	r3, r3, #16
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	3301      	adds	r3, #1
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007534:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007538:	fbb2 f3f3 	udiv	r3, r2, r3
 800753c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800753e:	e002      	b.n	8007546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007540:	4b05      	ldr	r3, [pc, #20]	@ (8007558 <HAL_RCC_GetSysClockFreq+0x204>)
 8007542:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007546:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007548:	4618      	mov	r0, r3
 800754a:	3750      	adds	r7, #80	@ 0x50
 800754c:	46bd      	mov	sp, r7
 800754e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007552:	bf00      	nop
 8007554:	40023800 	.word	0x40023800
 8007558:	00f42400 	.word	0x00f42400
 800755c:	007a1200 	.word	0x007a1200

08007560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007564:	4b03      	ldr	r3, [pc, #12]	@ (8007574 <HAL_RCC_GetHCLKFreq+0x14>)
 8007566:	681b      	ldr	r3, [r3, #0]
}
 8007568:	4618      	mov	r0, r3
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	20000000 	.word	0x20000000

08007578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800757c:	f7ff fff0 	bl	8007560 <HAL_RCC_GetHCLKFreq>
 8007580:	4602      	mov	r2, r0
 8007582:	4b05      	ldr	r3, [pc, #20]	@ (8007598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	0a9b      	lsrs	r3, r3, #10
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	4903      	ldr	r1, [pc, #12]	@ (800759c <HAL_RCC_GetPCLK1Freq+0x24>)
 800758e:	5ccb      	ldrb	r3, [r1, r3]
 8007590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007594:	4618      	mov	r0, r3
 8007596:	bd80      	pop	{r7, pc}
 8007598:	40023800 	.word	0x40023800
 800759c:	08017f4c 	.word	0x08017f4c

080075a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80075a4:	f7ff ffdc 	bl	8007560 <HAL_RCC_GetHCLKFreq>
 80075a8:	4602      	mov	r2, r0
 80075aa:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	0b5b      	lsrs	r3, r3, #13
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	4903      	ldr	r1, [pc, #12]	@ (80075c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075b6:	5ccb      	ldrb	r3, [r1, r3]
 80075b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075bc:	4618      	mov	r0, r3
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	40023800 	.word	0x40023800
 80075c4:	08017f4c 	.word	0x08017f4c

080075c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e041      	b.n	800765e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7fb fd3a 	bl	8003068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3304      	adds	r3, #4
 8007604:	4619      	mov	r1, r3
 8007606:	4610      	mov	r0, r2
 8007608:	f000 fcc4 	bl	8007f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b01      	cmp	r3, #1
 800767a:	d001      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e04e      	b.n	800771e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0201 	orr.w	r2, r2, #1
 8007696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a23      	ldr	r2, [pc, #140]	@ (800772c <HAL_TIM_Base_Start_IT+0xc4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d022      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x80>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076aa:	d01d      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x80>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007730 <HAL_TIM_Base_Start_IT+0xc8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d018      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x80>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007734 <HAL_TIM_Base_Start_IT+0xcc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d013      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x80>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007738 <HAL_TIM_Base_Start_IT+0xd0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00e      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x80>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a1b      	ldr	r2, [pc, #108]	@ (800773c <HAL_TIM_Base_Start_IT+0xd4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d009      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x80>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a19      	ldr	r2, [pc, #100]	@ (8007740 <HAL_TIM_Base_Start_IT+0xd8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x80>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a18      	ldr	r2, [pc, #96]	@ (8007744 <HAL_TIM_Base_Start_IT+0xdc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d111      	bne.n	800770c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b06      	cmp	r3, #6
 80076f8:	d010      	beq.n	800771c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f042 0201 	orr.w	r2, r2, #1
 8007708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770a:	e007      	b.n	800771c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0201 	orr.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40010000 	.word	0x40010000
 8007730:	40000400 	.word	0x40000400
 8007734:	40000800 	.word	0x40000800
 8007738:	40000c00 	.word	0x40000c00
 800773c:	40010400 	.word	0x40010400
 8007740:	40014000 	.word	0x40014000
 8007744:	40001800 	.word	0x40001800

08007748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e041      	b.n	80077de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d106      	bne.n	8007774 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7fb fc16 	bl	8002fa0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2202      	movs	r2, #2
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3304      	adds	r3, #4
 8007784:	4619      	mov	r1, r3
 8007786:	4610      	mov	r0, r2
 8007788:	f000 fc04 	bl	8007f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
	...

080077e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d109      	bne.n	800780c <HAL_TIM_PWM_Start+0x24>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b01      	cmp	r3, #1
 8007802:	bf14      	ite	ne
 8007804:	2301      	movne	r3, #1
 8007806:	2300      	moveq	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	e022      	b.n	8007852 <HAL_TIM_PWM_Start+0x6a>
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2b04      	cmp	r3, #4
 8007810:	d109      	bne.n	8007826 <HAL_TIM_PWM_Start+0x3e>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b01      	cmp	r3, #1
 800781c:	bf14      	ite	ne
 800781e:	2301      	movne	r3, #1
 8007820:	2300      	moveq	r3, #0
 8007822:	b2db      	uxtb	r3, r3
 8007824:	e015      	b.n	8007852 <HAL_TIM_PWM_Start+0x6a>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b08      	cmp	r3, #8
 800782a:	d109      	bne.n	8007840 <HAL_TIM_PWM_Start+0x58>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b01      	cmp	r3, #1
 8007836:	bf14      	ite	ne
 8007838:	2301      	movne	r3, #1
 800783a:	2300      	moveq	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	e008      	b.n	8007852 <HAL_TIM_PWM_Start+0x6a>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b01      	cmp	r3, #1
 800784a:	bf14      	ite	ne
 800784c:	2301      	movne	r3, #1
 800784e:	2300      	moveq	r3, #0
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e07c      	b.n	8007954 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d104      	bne.n	800786a <HAL_TIM_PWM_Start+0x82>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007868:	e013      	b.n	8007892 <HAL_TIM_PWM_Start+0xaa>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b04      	cmp	r3, #4
 800786e:	d104      	bne.n	800787a <HAL_TIM_PWM_Start+0x92>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007878:	e00b      	b.n	8007892 <HAL_TIM_PWM_Start+0xaa>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b08      	cmp	r3, #8
 800787e:	d104      	bne.n	800788a <HAL_TIM_PWM_Start+0xa2>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007888:	e003      	b.n	8007892 <HAL_TIM_PWM_Start+0xaa>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2202      	movs	r2, #2
 800788e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2201      	movs	r2, #1
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fdd0 	bl	8008440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a2d      	ldr	r2, [pc, #180]	@ (800795c <HAL_TIM_PWM_Start+0x174>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d004      	beq.n	80078b4 <HAL_TIM_PWM_Start+0xcc>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a2c      	ldr	r2, [pc, #176]	@ (8007960 <HAL_TIM_PWM_Start+0x178>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d101      	bne.n	80078b8 <HAL_TIM_PWM_Start+0xd0>
 80078b4:	2301      	movs	r3, #1
 80078b6:	e000      	b.n	80078ba <HAL_TIM_PWM_Start+0xd2>
 80078b8:	2300      	movs	r3, #0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d007      	beq.n	80078ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a22      	ldr	r2, [pc, #136]	@ (800795c <HAL_TIM_PWM_Start+0x174>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d022      	beq.n	800791e <HAL_TIM_PWM_Start+0x136>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e0:	d01d      	beq.n	800791e <HAL_TIM_PWM_Start+0x136>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a1f      	ldr	r2, [pc, #124]	@ (8007964 <HAL_TIM_PWM_Start+0x17c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d018      	beq.n	800791e <HAL_TIM_PWM_Start+0x136>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007968 <HAL_TIM_PWM_Start+0x180>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d013      	beq.n	800791e <HAL_TIM_PWM_Start+0x136>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a1c      	ldr	r2, [pc, #112]	@ (800796c <HAL_TIM_PWM_Start+0x184>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00e      	beq.n	800791e <HAL_TIM_PWM_Start+0x136>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a16      	ldr	r2, [pc, #88]	@ (8007960 <HAL_TIM_PWM_Start+0x178>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d009      	beq.n	800791e <HAL_TIM_PWM_Start+0x136>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a18      	ldr	r2, [pc, #96]	@ (8007970 <HAL_TIM_PWM_Start+0x188>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d004      	beq.n	800791e <HAL_TIM_PWM_Start+0x136>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a16      	ldr	r2, [pc, #88]	@ (8007974 <HAL_TIM_PWM_Start+0x18c>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d111      	bne.n	8007942 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f003 0307 	and.w	r3, r3, #7
 8007928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b06      	cmp	r3, #6
 800792e:	d010      	beq.n	8007952 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0201 	orr.w	r2, r2, #1
 800793e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007940:	e007      	b.n	8007952 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f042 0201 	orr.w	r2, r2, #1
 8007950:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	40010000 	.word	0x40010000
 8007960:	40010400 	.word	0x40010400
 8007964:	40000400 	.word	0x40000400
 8007968:	40000800 	.word	0x40000800
 800796c:	40000c00 	.word	0x40000c00
 8007970:	40014000 	.word	0x40014000
 8007974:	40001800 	.word	0x40001800

08007978 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e097      	b.n	8007abc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d106      	bne.n	80079a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7fb f9f5 	bl	8002d90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2202      	movs	r2, #2
 80079aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	6812      	ldr	r2, [r2, #0]
 80079b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079bc:	f023 0307 	bic.w	r3, r3, #7
 80079c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	3304      	adds	r3, #4
 80079ca:	4619      	mov	r1, r3
 80079cc:	4610      	mov	r0, r2
 80079ce:	f000 fae1 	bl	8007f94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079fa:	f023 0303 	bic.w	r3, r3, #3
 80079fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	021b      	lsls	r3, r3, #8
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007a18:	f023 030c 	bic.w	r3, r3, #12
 8007a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007a24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68da      	ldr	r2, [r3, #12]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	4313      	orrs	r3, r2
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	011a      	lsls	r2, r3, #4
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	031b      	lsls	r3, r3, #12
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007a56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007a5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	011b      	lsls	r3, r3, #4
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ad4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007adc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ae4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007aec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d110      	bne.n	8007b16 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d102      	bne.n	8007b00 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007afa:	7b7b      	ldrb	r3, [r7, #13]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d001      	beq.n	8007b04 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e069      	b.n	8007bd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b14:	e031      	b.n	8007b7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d110      	bne.n	8007b3e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d102      	bne.n	8007b28 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b22:	7b3b      	ldrb	r3, [r7, #12]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d001      	beq.n	8007b2c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e055      	b.n	8007bd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b3c:	e01d      	b.n	8007b7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d108      	bne.n	8007b56 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d105      	bne.n	8007b56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b4a:	7b7b      	ldrb	r3, [r7, #13]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d102      	bne.n	8007b56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b50:	7b3b      	ldrb	r3, [r7, #12]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d001      	beq.n	8007b5a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e03e      	b.n	8007bd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2202      	movs	r2, #2
 8007b66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2202      	movs	r2, #2
 8007b76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <HAL_TIM_Encoder_Start+0xc4>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2b04      	cmp	r3, #4
 8007b84:	d008      	beq.n	8007b98 <HAL_TIM_Encoder_Start+0xd4>
 8007b86:	e00f      	b.n	8007ba8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	2100      	movs	r1, #0
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 fc55 	bl	8008440 <TIM_CCxChannelCmd>
      break;
 8007b96:	e016      	b.n	8007bc6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	2104      	movs	r1, #4
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 fc4d 	bl	8008440 <TIM_CCxChannelCmd>
      break;
 8007ba6:	e00e      	b.n	8007bc6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2201      	movs	r2, #1
 8007bae:	2100      	movs	r1, #0
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 fc45 	bl	8008440 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	2104      	movs	r1, #4
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fc3e 	bl	8008440 <TIM_CCxChannelCmd>
      break;
 8007bc4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f042 0201 	orr.w	r2, r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d020      	beq.n	8007c44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d01b      	beq.n	8007c44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f06f 0202 	mvn.w	r2, #2
 8007c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f994 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 8007c30:	e005      	b.n	8007c3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f986 	bl	8007f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f997 	bl	8007f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	f003 0304 	and.w	r3, r3, #4
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d020      	beq.n	8007c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01b      	beq.n	8007c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f06f 0204 	mvn.w	r2, #4
 8007c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2202      	movs	r2, #2
 8007c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f96e 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 8007c7c:	e005      	b.n	8007c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f960 	bl	8007f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f971 	bl	8007f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f003 0308 	and.w	r3, r3, #8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d020      	beq.n	8007cdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01b      	beq.n	8007cdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f06f 0208 	mvn.w	r2, #8
 8007cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2204      	movs	r2, #4
 8007cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	f003 0303 	and.w	r3, r3, #3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f948 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 8007cc8:	e005      	b.n	8007cd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f93a 	bl	8007f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f94b 	bl	8007f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f003 0310 	and.w	r3, r3, #16
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d020      	beq.n	8007d28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f003 0310 	and.w	r3, r3, #16
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d01b      	beq.n	8007d28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f06f 0210 	mvn.w	r2, #16
 8007cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2208      	movs	r2, #8
 8007cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f922 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 8007d14:	e005      	b.n	8007d22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f914 	bl	8007f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f925 	bl	8007f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00c      	beq.n	8007d4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d007      	beq.n	8007d4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f06f 0201 	mvn.w	r2, #1
 8007d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7f9 fbfe 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00c      	beq.n	8007d70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d007      	beq.n	8007d70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fc66 	bl	800863c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00c      	beq.n	8007d94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d007      	beq.n	8007d94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f8f6 	bl	8007f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00c      	beq.n	8007db8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f003 0320 	and.w	r3, r3, #32
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d007      	beq.n	8007db8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f06f 0220 	mvn.w	r2, #32
 8007db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fc38 	bl	8008628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007db8:	bf00      	nop
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e0ae      	b.n	8007f3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b0c      	cmp	r3, #12
 8007dea:	f200 809f 	bhi.w	8007f2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007dee:	a201      	add	r2, pc, #4	@ (adr r2, 8007df4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df4:	08007e29 	.word	0x08007e29
 8007df8:	08007f2d 	.word	0x08007f2d
 8007dfc:	08007f2d 	.word	0x08007f2d
 8007e00:	08007f2d 	.word	0x08007f2d
 8007e04:	08007e69 	.word	0x08007e69
 8007e08:	08007f2d 	.word	0x08007f2d
 8007e0c:	08007f2d 	.word	0x08007f2d
 8007e10:	08007f2d 	.word	0x08007f2d
 8007e14:	08007eab 	.word	0x08007eab
 8007e18:	08007f2d 	.word	0x08007f2d
 8007e1c:	08007f2d 	.word	0x08007f2d
 8007e20:	08007f2d 	.word	0x08007f2d
 8007e24:	08007eeb 	.word	0x08007eeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68b9      	ldr	r1, [r7, #8]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 f956 	bl	80080e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	699a      	ldr	r2, [r3, #24]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0208 	orr.w	r2, r2, #8
 8007e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	699a      	ldr	r2, [r3, #24]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f022 0204 	bic.w	r2, r2, #4
 8007e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6999      	ldr	r1, [r3, #24]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	691a      	ldr	r2, [r3, #16]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	619a      	str	r2, [r3, #24]
      break;
 8007e66:	e064      	b.n	8007f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68b9      	ldr	r1, [r7, #8]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 f9a6 	bl	80081c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699a      	ldr	r2, [r3, #24]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6999      	ldr	r1, [r3, #24]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	021a      	lsls	r2, r3, #8
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	619a      	str	r2, [r3, #24]
      break;
 8007ea8:	e043      	b.n	8007f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68b9      	ldr	r1, [r7, #8]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 f9fb 	bl	80082ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69da      	ldr	r2, [r3, #28]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f042 0208 	orr.w	r2, r2, #8
 8007ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69da      	ldr	r2, [r3, #28]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f022 0204 	bic.w	r2, r2, #4
 8007ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69d9      	ldr	r1, [r3, #28]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	691a      	ldr	r2, [r3, #16]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	61da      	str	r2, [r3, #28]
      break;
 8007ee8:	e023      	b.n	8007f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 fa4f 	bl	8008394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69da      	ldr	r2, [r3, #28]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	69da      	ldr	r2, [r3, #28]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	69d9      	ldr	r1, [r3, #28]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	021a      	lsls	r2, r3, #8
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	430a      	orrs	r2, r1
 8007f28:	61da      	str	r2, [r3, #28]
      break;
 8007f2a:	e002      	b.n	8007f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a43      	ldr	r2, [pc, #268]	@ (80080b4 <TIM_Base_SetConfig+0x120>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d013      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb2:	d00f      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a40      	ldr	r2, [pc, #256]	@ (80080b8 <TIM_Base_SetConfig+0x124>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d00b      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a3f      	ldr	r2, [pc, #252]	@ (80080bc <TIM_Base_SetConfig+0x128>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d007      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a3e      	ldr	r2, [pc, #248]	@ (80080c0 <TIM_Base_SetConfig+0x12c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d003      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a3d      	ldr	r2, [pc, #244]	@ (80080c4 <TIM_Base_SetConfig+0x130>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d108      	bne.n	8007fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a32      	ldr	r2, [pc, #200]	@ (80080b4 <TIM_Base_SetConfig+0x120>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d02b      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ff4:	d027      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a2f      	ldr	r2, [pc, #188]	@ (80080b8 <TIM_Base_SetConfig+0x124>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d023      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a2e      	ldr	r2, [pc, #184]	@ (80080bc <TIM_Base_SetConfig+0x128>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d01f      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a2d      	ldr	r2, [pc, #180]	@ (80080c0 <TIM_Base_SetConfig+0x12c>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d01b      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a2c      	ldr	r2, [pc, #176]	@ (80080c4 <TIM_Base_SetConfig+0x130>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d017      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a2b      	ldr	r2, [pc, #172]	@ (80080c8 <TIM_Base_SetConfig+0x134>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d013      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a2a      	ldr	r2, [pc, #168]	@ (80080cc <TIM_Base_SetConfig+0x138>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d00f      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a29      	ldr	r2, [pc, #164]	@ (80080d0 <TIM_Base_SetConfig+0x13c>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d00b      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a28      	ldr	r2, [pc, #160]	@ (80080d4 <TIM_Base_SetConfig+0x140>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d007      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a27      	ldr	r2, [pc, #156]	@ (80080d8 <TIM_Base_SetConfig+0x144>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d003      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a26      	ldr	r2, [pc, #152]	@ (80080dc <TIM_Base_SetConfig+0x148>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d108      	bne.n	8008058 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800804c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	4313      	orrs	r3, r2
 8008056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	4313      	orrs	r3, r2
 8008064:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a0e      	ldr	r2, [pc, #56]	@ (80080b4 <TIM_Base_SetConfig+0x120>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d003      	beq.n	8008086 <TIM_Base_SetConfig+0xf2>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a10      	ldr	r2, [pc, #64]	@ (80080c4 <TIM_Base_SetConfig+0x130>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d103      	bne.n	800808e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	691a      	ldr	r2, [r3, #16]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f043 0204 	orr.w	r2, r3, #4
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	601a      	str	r2, [r3, #0]
}
 80080a6:	bf00      	nop
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	40010000 	.word	0x40010000
 80080b8:	40000400 	.word	0x40000400
 80080bc:	40000800 	.word	0x40000800
 80080c0:	40000c00 	.word	0x40000c00
 80080c4:	40010400 	.word	0x40010400
 80080c8:	40014000 	.word	0x40014000
 80080cc:	40014400 	.word	0x40014400
 80080d0:	40014800 	.word	0x40014800
 80080d4:	40001800 	.word	0x40001800
 80080d8:	40001c00 	.word	0x40001c00
 80080dc:	40002000 	.word	0x40002000

080080e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	f023 0201 	bic.w	r2, r3, #1
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800810e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0303 	bic.w	r3, r3, #3
 8008116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f023 0302 	bic.w	r3, r3, #2
 8008128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	4313      	orrs	r3, r2
 8008132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a20      	ldr	r2, [pc, #128]	@ (80081b8 <TIM_OC1_SetConfig+0xd8>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d003      	beq.n	8008144 <TIM_OC1_SetConfig+0x64>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a1f      	ldr	r2, [pc, #124]	@ (80081bc <TIM_OC1_SetConfig+0xdc>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d10c      	bne.n	800815e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f023 0308 	bic.w	r3, r3, #8
 800814a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	4313      	orrs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f023 0304 	bic.w	r3, r3, #4
 800815c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a15      	ldr	r2, [pc, #84]	@ (80081b8 <TIM_OC1_SetConfig+0xd8>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d003      	beq.n	800816e <TIM_OC1_SetConfig+0x8e>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a14      	ldr	r2, [pc, #80]	@ (80081bc <TIM_OC1_SetConfig+0xdc>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d111      	bne.n	8008192 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800817c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	4313      	orrs	r3, r2
 8008186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	4313      	orrs	r3, r2
 8008190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	621a      	str	r2, [r3, #32]
}
 80081ac:	bf00      	nop
 80081ae:	371c      	adds	r7, #28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	40010000 	.word	0x40010000
 80081bc:	40010400 	.word	0x40010400

080081c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	f023 0210 	bic.w	r2, r3, #16
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	021b      	lsls	r3, r3, #8
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	4313      	orrs	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f023 0320 	bic.w	r3, r3, #32
 800820a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	011b      	lsls	r3, r3, #4
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	4313      	orrs	r3, r2
 8008216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a22      	ldr	r2, [pc, #136]	@ (80082a4 <TIM_OC2_SetConfig+0xe4>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d003      	beq.n	8008228 <TIM_OC2_SetConfig+0x68>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a21      	ldr	r2, [pc, #132]	@ (80082a8 <TIM_OC2_SetConfig+0xe8>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d10d      	bne.n	8008244 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800822e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	011b      	lsls	r3, r3, #4
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	4313      	orrs	r3, r2
 800823a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008242:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a17      	ldr	r2, [pc, #92]	@ (80082a4 <TIM_OC2_SetConfig+0xe4>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d003      	beq.n	8008254 <TIM_OC2_SetConfig+0x94>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a16      	ldr	r2, [pc, #88]	@ (80082a8 <TIM_OC2_SetConfig+0xe8>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d113      	bne.n	800827c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800825a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	4313      	orrs	r3, r2
 800826e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	4313      	orrs	r3, r2
 800827a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	621a      	str	r2, [r3, #32]
}
 8008296:	bf00      	nop
 8008298:	371c      	adds	r7, #28
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	40010000 	.word	0x40010000
 80082a8:	40010400 	.word	0x40010400

080082ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 0303 	bic.w	r3, r3, #3
 80082e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80082f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	021b      	lsls	r3, r3, #8
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a21      	ldr	r2, [pc, #132]	@ (800838c <TIM_OC3_SetConfig+0xe0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d003      	beq.n	8008312 <TIM_OC3_SetConfig+0x66>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a20      	ldr	r2, [pc, #128]	@ (8008390 <TIM_OC3_SetConfig+0xe4>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d10d      	bne.n	800832e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	021b      	lsls	r3, r3, #8
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	4313      	orrs	r3, r2
 8008324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800832c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a16      	ldr	r2, [pc, #88]	@ (800838c <TIM_OC3_SetConfig+0xe0>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d003      	beq.n	800833e <TIM_OC3_SetConfig+0x92>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a15      	ldr	r2, [pc, #84]	@ (8008390 <TIM_OC3_SetConfig+0xe4>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d113      	bne.n	8008366 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800834c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	4313      	orrs	r3, r2
 8008358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	011b      	lsls	r3, r3, #4
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	4313      	orrs	r3, r2
 8008364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	621a      	str	r2, [r3, #32]
}
 8008380:	bf00      	nop
 8008382:	371c      	adds	r7, #28
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	40010000 	.word	0x40010000
 8008390:	40010400 	.word	0x40010400

08008394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	021b      	lsls	r3, r3, #8
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	031b      	lsls	r3, r3, #12
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a12      	ldr	r2, [pc, #72]	@ (8008438 <TIM_OC4_SetConfig+0xa4>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d003      	beq.n	80083fc <TIM_OC4_SetConfig+0x68>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a11      	ldr	r2, [pc, #68]	@ (800843c <TIM_OC4_SetConfig+0xa8>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d109      	bne.n	8008410 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	695b      	ldr	r3, [r3, #20]
 8008408:	019b      	lsls	r3, r3, #6
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	4313      	orrs	r3, r2
 800840e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	621a      	str	r2, [r3, #32]
}
 800842a:	bf00      	nop
 800842c:	371c      	adds	r7, #28
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	40010000 	.word	0x40010000
 800843c:	40010400 	.word	0x40010400

08008440 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f003 031f 	and.w	r3, r3, #31
 8008452:	2201      	movs	r2, #1
 8008454:	fa02 f303 	lsl.w	r3, r2, r3
 8008458:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6a1a      	ldr	r2, [r3, #32]
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	43db      	mvns	r3, r3
 8008462:	401a      	ands	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6a1a      	ldr	r2, [r3, #32]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f003 031f 	and.w	r3, r3, #31
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	fa01 f303 	lsl.w	r3, r1, r3
 8008478:	431a      	orrs	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	621a      	str	r2, [r3, #32]
}
 800847e:	bf00      	nop
 8008480:	371c      	adds	r7, #28
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
	...

0800848c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800849c:	2b01      	cmp	r3, #1
 800849e:	d101      	bne.n	80084a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084a0:	2302      	movs	r3, #2
 80084a2:	e05a      	b.n	800855a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a21      	ldr	r2, [pc, #132]	@ (8008568 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d022      	beq.n	800852e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084f0:	d01d      	beq.n	800852e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a1d      	ldr	r2, [pc, #116]	@ (800856c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d018      	beq.n	800852e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a1b      	ldr	r2, [pc, #108]	@ (8008570 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d013      	beq.n	800852e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1a      	ldr	r2, [pc, #104]	@ (8008574 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d00e      	beq.n	800852e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a18      	ldr	r2, [pc, #96]	@ (8008578 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d009      	beq.n	800852e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a17      	ldr	r2, [pc, #92]	@ (800857c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d004      	beq.n	800852e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a15      	ldr	r2, [pc, #84]	@ (8008580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d10c      	bne.n	8008548 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	4313      	orrs	r3, r2
 800853e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	40010000 	.word	0x40010000
 800856c:	40000400 	.word	0x40000400
 8008570:	40000800 	.word	0x40000800
 8008574:	40000c00 	.word	0x40000c00
 8008578:	40010400 	.word	0x40010400
 800857c:	40014000 	.word	0x40014000
 8008580:	40001800 	.word	0x40001800

08008584 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800858e:	2300      	movs	r3, #0
 8008590:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008598:	2b01      	cmp	r3, #1
 800859a:	d101      	bne.n	80085a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800859c:	2302      	movs	r3, #2
 800859e:	e03d      	b.n	800861c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4313      	orrs	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	4313      	orrs	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e042      	b.n	80086e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d106      	bne.n	800867c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7fb f8c2 	bl	8003800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2224      	movs	r2, #36	@ 0x24
 8008680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68da      	ldr	r2, [r3, #12]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 ff19 	bl	80094cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	691a      	ldr	r2, [r3, #16]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80086a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	695a      	ldr	r2, [r3, #20]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80086b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68da      	ldr	r2, [r3, #12]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80086c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2220      	movs	r2, #32
 80086dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	4613      	mov	r3, r2
 80086fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b20      	cmp	r3, #32
 8008708:	d112      	bne.n	8008730 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <HAL_UART_Receive_DMA+0x26>
 8008710:	88fb      	ldrh	r3, [r7, #6]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e00b      	b.n	8008732 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008720:	88fb      	ldrh	r3, [r7, #6]
 8008722:	461a      	mov	r2, r3
 8008724:	68b9      	ldr	r1, [r7, #8]
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 fc68 	bl	8008ffc <UART_Start_Receive_DMA>
 800872c:	4603      	mov	r3, r0
 800872e:	e000      	b.n	8008732 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008730:	2302      	movs	r3, #2
  }
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b09a      	sub	sp, #104	@ 0x68
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	330c      	adds	r3, #12
 8008748:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008754:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008758:	667b      	str	r3, [r7, #100]	@ 0x64
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	330c      	adds	r3, #12
 8008760:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008762:	657a      	str	r2, [r7, #84]	@ 0x54
 8008764:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008768:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800876a:	e841 2300 	strex	r3, r2, [r1]
 800876e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e5      	bne.n	8008742 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3314      	adds	r3, #20
 800877c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008780:	e853 3f00 	ldrex	r3, [r3]
 8008784:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008788:	f023 0301 	bic.w	r3, r3, #1
 800878c:	663b      	str	r3, [r7, #96]	@ 0x60
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3314      	adds	r3, #20
 8008794:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008796:	643a      	str	r2, [r7, #64]	@ 0x40
 8008798:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800879c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e5      	bne.n	8008776 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d119      	bne.n	80087e6 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	330c      	adds	r3, #12
 80087b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	e853 3f00 	ldrex	r3, [r3]
 80087c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	f023 0310 	bic.w	r3, r3, #16
 80087c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	330c      	adds	r3, #12
 80087d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80087d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087da:	e841 2300 	strex	r3, r2, [r1]
 80087de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1e5      	bne.n	80087b2 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087f0:	2b40      	cmp	r3, #64	@ 0x40
 80087f2:	d136      	bne.n	8008862 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3314      	adds	r3, #20
 80087fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	e853 3f00 	ldrex	r3, [r3]
 8008802:	60bb      	str	r3, [r7, #8]
   return(result);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800880a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3314      	adds	r3, #20
 8008812:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008814:	61ba      	str	r2, [r7, #24]
 8008816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	6979      	ldr	r1, [r7, #20]
 800881a:	69ba      	ldr	r2, [r7, #24]
 800881c:	e841 2300 	strex	r3, r2, [r1]
 8008820:	613b      	str	r3, [r7, #16]
   return(result);
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e5      	bne.n	80087f4 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882c:	2b00      	cmp	r3, #0
 800882e:	d018      	beq.n	8008862 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008834:	2200      	movs	r2, #0
 8008836:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800883c:	4618      	mov	r0, r3
 800883e:	f7fc fadb 	bl	8004df8 <HAL_DMA_Abort>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00c      	beq.n	8008862 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800884c:	4618      	mov	r0, r3
 800884e:	f7fc fcef 	bl	8005230 <HAL_DMA_GetError>
 8008852:	4603      	mov	r3, r0
 8008854:	2b20      	cmp	r3, #32
 8008856:	d104      	bne.n	8008862 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2210      	movs	r2, #16
 800885c:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e00a      	b.n	8008878 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3768      	adds	r7, #104	@ 0x68
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b0ba      	sub	sp, #232	@ 0xe8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80088b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088b6:	f003 030f 	and.w	r3, r3, #15
 80088ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80088be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10f      	bne.n	80088e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ca:	f003 0320 	and.w	r3, r3, #32
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d009      	beq.n	80088e6 <HAL_UART_IRQHandler+0x66>
 80088d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088d6:	f003 0320 	and.w	r3, r3, #32
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fd36 	bl	8009350 <UART_Receive_IT>
      return;
 80088e4:	e273      	b.n	8008dce <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80088e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 80de 	beq.w	8008aac <HAL_UART_IRQHandler+0x22c>
 80088f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d106      	bne.n	800890a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80088fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008900:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 80d1 	beq.w	8008aac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800890a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00b      	beq.n	800892e <HAL_UART_IRQHandler+0xae>
 8008916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800891a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800891e:	2b00      	cmp	r3, #0
 8008920:	d005      	beq.n	800892e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008926:	f043 0201 	orr.w	r2, r3, #1
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800892e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00b      	beq.n	8008952 <HAL_UART_IRQHandler+0xd2>
 800893a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800894a:	f043 0202 	orr.w	r2, r3, #2
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008956:	f003 0302 	and.w	r3, r3, #2
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00b      	beq.n	8008976 <HAL_UART_IRQHandler+0xf6>
 800895e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800896e:	f043 0204 	orr.w	r2, r3, #4
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800897a:	f003 0308 	and.w	r3, r3, #8
 800897e:	2b00      	cmp	r3, #0
 8008980:	d011      	beq.n	80089a6 <HAL_UART_IRQHandler+0x126>
 8008982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008986:	f003 0320 	and.w	r3, r3, #32
 800898a:	2b00      	cmp	r3, #0
 800898c:	d105      	bne.n	800899a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800898e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	2b00      	cmp	r3, #0
 8008998:	d005      	beq.n	80089a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800899e:	f043 0208 	orr.w	r2, r3, #8
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 820a 	beq.w	8008dc4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089b4:	f003 0320 	and.w	r3, r3, #32
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d008      	beq.n	80089ce <HAL_UART_IRQHandler+0x14e>
 80089bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089c0:	f003 0320 	and.w	r3, r3, #32
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fcc1 	bl	8009350 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d8:	2b40      	cmp	r3, #64	@ 0x40
 80089da:	bf0c      	ite	eq
 80089dc:	2301      	moveq	r3, #1
 80089de:	2300      	movne	r3, #0
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ea:	f003 0308 	and.w	r3, r3, #8
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d103      	bne.n	80089fa <HAL_UART_IRQHandler+0x17a>
 80089f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d04f      	beq.n	8008a9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fbcc 	bl	8009198 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a0a:	2b40      	cmp	r3, #64	@ 0x40
 8008a0c:	d141      	bne.n	8008a92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	3314      	adds	r3, #20
 8008a14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3314      	adds	r3, #20
 8008a36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008a3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008a46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1d9      	bne.n	8008a0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d013      	beq.n	8008a8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a66:	4a8a      	ldr	r2, [pc, #552]	@ (8008c90 <HAL_UART_IRQHandler+0x410>)
 8008a68:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fc fa32 	bl	8004ed8 <HAL_DMA_Abort_IT>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d016      	beq.n	8008aa8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008a84:	4610      	mov	r0, r2
 8008a86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a88:	e00e      	b.n	8008aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7f9 fb72 	bl	8002174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a90:	e00a      	b.n	8008aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7f9 fb6e 	bl	8002174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a98:	e006      	b.n	8008aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7f9 fb6a 	bl	8002174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008aa6:	e18d      	b.n	8008dc4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa8:	bf00      	nop
    return;
 8008aaa:	e18b      	b.n	8008dc4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	f040 8167 	bne.w	8008d84 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aba:	f003 0310 	and.w	r3, r3, #16
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f000 8160 	beq.w	8008d84 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ac8:	f003 0310 	and.w	r3, r3, #16
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 8159 	beq.w	8008d84 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60bb      	str	r3, [r7, #8]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	60bb      	str	r3, [r7, #8]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	60bb      	str	r3, [r7, #8]
 8008ae6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008af2:	2b40      	cmp	r3, #64	@ 0x40
 8008af4:	f040 80ce 	bne.w	8008c94 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 80a9 	beq.w	8008c60 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b16:	429a      	cmp	r2, r3
 8008b18:	f080 80a2 	bcs.w	8008c60 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b22:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b2e:	f000 8088 	beq.w	8008c42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	330c      	adds	r3, #12
 8008b38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	330c      	adds	r3, #12
 8008b5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008b5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008b62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008b6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008b6e:	e841 2300 	strex	r3, r2, [r1]
 8008b72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1d9      	bne.n	8008b32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3314      	adds	r3, #20
 8008b84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b90:	f023 0301 	bic.w	r3, r3, #1
 8008b94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3314      	adds	r3, #20
 8008b9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ba2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ba6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008baa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008bb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e1      	bne.n	8008b7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3314      	adds	r3, #20
 8008bc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bc4:	e853 3f00 	ldrex	r3, [r3]
 8008bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008bca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3314      	adds	r3, #20
 8008bda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008bde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008be0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008be4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008be6:	e841 2300 	strex	r3, r2, [r1]
 8008bea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008bec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1e3      	bne.n	8008bba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	330c      	adds	r3, #12
 8008c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c12:	f023 0310 	bic.w	r3, r3, #16
 8008c16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	330c      	adds	r3, #12
 8008c20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008c24:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008c26:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e3      	bne.n	8008c00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fc f8db 	bl	8004df8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2202      	movs	r2, #2
 8008c46:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f8c5 	bl	8008de8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008c5e:	e0b3      	b.n	8008dc8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	f040 80ad 	bne.w	8008dc8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c78:	f040 80a6 	bne.w	8008dc8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f8ad 	bl	8008de8 <HAL_UARTEx_RxEventCallback>
      return;
 8008c8e:	e09b      	b.n	8008dc8 <HAL_UART_IRQHandler+0x548>
 8008c90:	0800925f 	.word	0x0800925f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 808e 	beq.w	8008dcc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8008cb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 8089 	beq.w	8008dcc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	330c      	adds	r3, #12
 8008cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc4:	e853 3f00 	ldrex	r3, [r3]
 8008cc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ccc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	330c      	adds	r3, #12
 8008cda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008cde:	647a      	str	r2, [r7, #68]	@ 0x44
 8008ce0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ce4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e3      	bne.n	8008cba <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3314      	adds	r3, #20
 8008cf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfc:	e853 3f00 	ldrex	r3, [r3]
 8008d00:	623b      	str	r3, [r7, #32]
   return(result);
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	f023 0301 	bic.w	r3, r3, #1
 8008d08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	3314      	adds	r3, #20
 8008d12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008d16:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d1e:	e841 2300 	strex	r3, r2, [r1]
 8008d22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1e3      	bne.n	8008cf2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	330c      	adds	r3, #12
 8008d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	e853 3f00 	ldrex	r3, [r3]
 8008d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f023 0310 	bic.w	r3, r3, #16
 8008d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	330c      	adds	r3, #12
 8008d58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008d5c:	61fa      	str	r2, [r7, #28]
 8008d5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	69b9      	ldr	r1, [r7, #24]
 8008d62:	69fa      	ldr	r2, [r7, #28]
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	617b      	str	r3, [r7, #20]
   return(result);
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e3      	bne.n	8008d38 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2202      	movs	r2, #2
 8008d74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f833 	bl	8008de8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d82:	e023      	b.n	8008dcc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d009      	beq.n	8008da4 <HAL_UART_IRQHandler+0x524>
 8008d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fa6f 	bl	8009280 <UART_Transmit_IT>
    return;
 8008da2:	e014      	b.n	8008dce <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00e      	beq.n	8008dce <HAL_UART_IRQHandler+0x54e>
 8008db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d008      	beq.n	8008dce <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 faaf 	bl	8009320 <UART_EndTransmit_IT>
    return;
 8008dc2:	e004      	b.n	8008dce <HAL_UART_IRQHandler+0x54e>
    return;
 8008dc4:	bf00      	nop
 8008dc6:	e002      	b.n	8008dce <HAL_UART_IRQHandler+0x54e>
      return;
 8008dc8:	bf00      	nop
 8008dca:	e000      	b.n	8008dce <HAL_UART_IRQHandler+0x54e>
      return;
 8008dcc:	bf00      	nop
  }
}
 8008dce:	37e8      	adds	r7, #232	@ 0xe8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	460b      	mov	r3, r1
 8008df2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b09c      	sub	sp, #112	@ 0x70
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e0c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d172      	bne.n	8008f02 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008e1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e1e:	2200      	movs	r2, #0
 8008e20:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	330c      	adds	r3, #12
 8008e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	330c      	adds	r3, #12
 8008e40:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008e42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008e44:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e5      	bne.n	8008e22 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3314      	adds	r3, #20
 8008e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e68:	f023 0301 	bic.w	r3, r3, #1
 8008e6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3314      	adds	r3, #20
 8008e74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008e76:	647a      	str	r2, [r7, #68]	@ 0x44
 8008e78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e5      	bne.n	8008e56 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3314      	adds	r3, #20
 8008e90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	623b      	str	r3, [r7, #32]
   return(result);
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ea0:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ea2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3314      	adds	r3, #20
 8008ea8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008eaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8008eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e5      	bne.n	8008e8a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d119      	bne.n	8008f02 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	330c      	adds	r3, #12
 8008ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	e853 3f00 	ldrex	r3, [r3]
 8008edc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f023 0310 	bic.w	r3, r3, #16
 8008ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	330c      	adds	r3, #12
 8008eec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008eee:	61fa      	str	r2, [r7, #28]
 8008ef0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef2:	69b9      	ldr	r1, [r7, #24]
 8008ef4:	69fa      	ldr	r2, [r7, #28]
 8008ef6:	e841 2300 	strex	r3, r2, [r1]
 8008efa:	617b      	str	r3, [r7, #20]
   return(result);
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1e5      	bne.n	8008ece <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f04:	2200      	movs	r2, #0
 8008f06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d106      	bne.n	8008f1e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f12:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f14:	4619      	mov	r1, r3
 8008f16:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008f18:	f7ff ff66 	bl	8008de8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f1c:	e002      	b.n	8008f24 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008f1e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008f20:	f7f8 ff86 	bl	8001e30 <HAL_UART_RxCpltCallback>
}
 8008f24:	bf00      	nop
 8008f26:	3770      	adds	r7, #112	@ 0x70
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f38:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d108      	bne.n	8008f5a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f4c:	085b      	lsrs	r3, r3, #1
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	4619      	mov	r1, r3
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f7ff ff48 	bl	8008de8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f58:	e002      	b.n	8008f60 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f7f9 f892 	bl	8002084 <HAL_UART_RxHalfCpltCallback>
}
 8008f60:	bf00      	nop
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f78:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f84:	2b80      	cmp	r3, #128	@ 0x80
 8008f86:	bf0c      	ite	eq
 8008f88:	2301      	moveq	r3, #1
 8008f8a:	2300      	movne	r3, #0
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b21      	cmp	r3, #33	@ 0x21
 8008f9a:	d108      	bne.n	8008fae <UART_DMAError+0x46>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d005      	beq.n	8008fae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008fa8:	68b8      	ldr	r0, [r7, #8]
 8008faa:	f000 f8cd 	bl	8009148 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fb8:	2b40      	cmp	r3, #64	@ 0x40
 8008fba:	bf0c      	ite	eq
 8008fbc:	2301      	moveq	r3, #1
 8008fbe:	2300      	movne	r3, #0
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b22      	cmp	r3, #34	@ 0x22
 8008fce:	d108      	bne.n	8008fe2 <UART_DMAError+0x7a>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d005      	beq.n	8008fe2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008fdc:	68b8      	ldr	r0, [r7, #8]
 8008fde:	f000 f8db 	bl	8009198 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fe6:	f043 0210 	orr.w	r2, r3, #16
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fee:	68b8      	ldr	r0, [r7, #8]
 8008ff0:	f7f9 f8c0 	bl	8002174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ff4:	bf00      	nop
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b098      	sub	sp, #96	@ 0x60
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	4613      	mov	r3, r2
 8009008:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	88fa      	ldrh	r2, [r7, #6]
 8009014:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2222      	movs	r2, #34	@ 0x22
 8009020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009028:	4a44      	ldr	r2, [pc, #272]	@ (800913c <UART_Start_Receive_DMA+0x140>)
 800902a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009030:	4a43      	ldr	r2, [pc, #268]	@ (8009140 <UART_Start_Receive_DMA+0x144>)
 8009032:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009038:	4a42      	ldr	r2, [pc, #264]	@ (8009144 <UART_Start_Receive_DMA+0x148>)
 800903a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009040:	2200      	movs	r2, #0
 8009042:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009044:	f107 0308 	add.w	r3, r7, #8
 8009048:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3304      	adds	r3, #4
 8009054:	4619      	mov	r1, r3
 8009056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	88fb      	ldrh	r3, [r7, #6]
 800905c:	f7fb fe74 	bl	8004d48 <HAL_DMA_Start_IT>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d008      	beq.n	8009078 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2210      	movs	r2, #16
 800906a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2220      	movs	r2, #32
 8009070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e05d      	b.n	8009134 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009078:	2300      	movs	r3, #0
 800907a:	613b      	str	r3, [r7, #16]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	613b      	str	r3, [r7, #16]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	613b      	str	r3, [r7, #16]
 800908c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d019      	beq.n	80090ca <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	330c      	adds	r3, #12
 800909c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	330c      	adds	r3, #12
 80090b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80090b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80090bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80090c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e5      	bne.n	8009096 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	3314      	adds	r3, #20
 80090d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090dc:	f043 0301 	orr.w	r3, r3, #1
 80090e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3314      	adds	r3, #20
 80090e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80090ea:	63ba      	str	r2, [r7, #56]	@ 0x38
 80090ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80090f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090f2:	e841 2300 	strex	r3, r2, [r1]
 80090f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e5      	bne.n	80090ca <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3314      	adds	r3, #20
 8009104:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	617b      	str	r3, [r7, #20]
   return(result);
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009114:	653b      	str	r3, [r7, #80]	@ 0x50
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3314      	adds	r3, #20
 800911c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800911e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009122:	6a39      	ldr	r1, [r7, #32]
 8009124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009126:	e841 2300 	strex	r3, r2, [r1]
 800912a:	61fb      	str	r3, [r7, #28]
   return(result);
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1e5      	bne.n	80090fe <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3760      	adds	r7, #96	@ 0x60
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	08008e01 	.word	0x08008e01
 8009140:	08008f2d 	.word	0x08008f2d
 8009144:	08008f69 	.word	0x08008f69

08009148 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009148:	b480      	push	{r7}
 800914a:	b089      	sub	sp, #36	@ 0x24
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	330c      	adds	r3, #12
 8009156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	e853 3f00 	ldrex	r3, [r3]
 800915e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009166:	61fb      	str	r3, [r7, #28]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	330c      	adds	r3, #12
 800916e:	69fa      	ldr	r2, [r7, #28]
 8009170:	61ba      	str	r2, [r7, #24]
 8009172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009174:	6979      	ldr	r1, [r7, #20]
 8009176:	69ba      	ldr	r2, [r7, #24]
 8009178:	e841 2300 	strex	r3, r2, [r1]
 800917c:	613b      	str	r3, [r7, #16]
   return(result);
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1e5      	bne.n	8009150 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2220      	movs	r2, #32
 8009188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800918c:	bf00      	nop
 800918e:	3724      	adds	r7, #36	@ 0x24
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009198:	b480      	push	{r7}
 800919a:	b095      	sub	sp, #84	@ 0x54
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	330c      	adds	r3, #12
 80091a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091aa:	e853 3f00 	ldrex	r3, [r3]
 80091ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	330c      	adds	r3, #12
 80091be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80091c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80091c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091c8:	e841 2300 	strex	r3, r2, [r1]
 80091cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1e5      	bne.n	80091a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3314      	adds	r3, #20
 80091da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	e853 3f00 	ldrex	r3, [r3]
 80091e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	f023 0301 	bic.w	r3, r3, #1
 80091ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3314      	adds	r3, #20
 80091f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091fc:	e841 2300 	strex	r3, r2, [r1]
 8009200:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e5      	bne.n	80091d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800920c:	2b01      	cmp	r3, #1
 800920e:	d119      	bne.n	8009244 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	330c      	adds	r3, #12
 8009216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	e853 3f00 	ldrex	r3, [r3]
 800921e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	f023 0310 	bic.w	r3, r3, #16
 8009226:	647b      	str	r3, [r7, #68]	@ 0x44
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	330c      	adds	r3, #12
 800922e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009230:	61ba      	str	r2, [r7, #24]
 8009232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009234:	6979      	ldr	r1, [r7, #20]
 8009236:	69ba      	ldr	r2, [r7, #24]
 8009238:	e841 2300 	strex	r3, r2, [r1]
 800923c:	613b      	str	r3, [r7, #16]
   return(result);
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1e5      	bne.n	8009210 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2220      	movs	r2, #32
 8009248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009252:	bf00      	nop
 8009254:	3754      	adds	r7, #84	@ 0x54
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b084      	sub	sp, #16
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f7f8 ff7e 	bl	8002174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009278:	bf00      	nop
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b21      	cmp	r3, #33	@ 0x21
 8009292:	d13e      	bne.n	8009312 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800929c:	d114      	bne.n	80092c8 <UART_Transmit_IT+0x48>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d110      	bne.n	80092c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	881b      	ldrh	r3, [r3, #0]
 80092b0:	461a      	mov	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	1c9a      	adds	r2, r3, #2
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	621a      	str	r2, [r3, #32]
 80092c6:	e008      	b.n	80092da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a1b      	ldr	r3, [r3, #32]
 80092cc:	1c59      	adds	r1, r3, #1
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	6211      	str	r1, [r2, #32]
 80092d2:	781a      	ldrb	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80092de:	b29b      	uxth	r3, r3
 80092e0:	3b01      	subs	r3, #1
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	4619      	mov	r1, r3
 80092e8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10f      	bne.n	800930e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68da      	ldr	r2, [r3, #12]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80092fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68da      	ldr	r2, [r3, #12]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800930c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	e000      	b.n	8009314 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009312:	2302      	movs	r3, #2
  }
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68da      	ldr	r2, [r3, #12]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009336:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2220      	movs	r2, #32
 800933c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7ff fd47 	bl	8008dd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08c      	sub	sp, #48	@ 0x30
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009358:	2300      	movs	r3, #0
 800935a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800935c:	2300      	movs	r3, #0
 800935e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b22      	cmp	r3, #34	@ 0x22
 800936a:	f040 80aa 	bne.w	80094c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009376:	d115      	bne.n	80093a4 <UART_Receive_IT+0x54>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d111      	bne.n	80093a4 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009384:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	b29b      	uxth	r3, r3
 800938e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009392:	b29a      	uxth	r2, r3
 8009394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009396:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800939c:	1c9a      	adds	r2, r3, #2
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80093a2:	e024      	b.n	80093ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093b2:	d007      	beq.n	80093c4 <UART_Receive_IT+0x74>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10a      	bne.n	80093d2 <UART_Receive_IT+0x82>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d106      	bne.n	80093d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ce:	701a      	strb	r2, [r3, #0]
 80093d0:	e008      	b.n	80093e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e8:	1c5a      	adds	r2, r3, #1
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	3b01      	subs	r3, #1
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	4619      	mov	r1, r3
 80093fc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d15d      	bne.n	80094be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68da      	ldr	r2, [r3, #12]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f022 0220 	bic.w	r2, r2, #32
 8009410:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009420:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	695a      	ldr	r2, [r3, #20]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f022 0201 	bic.w	r2, r2, #1
 8009430:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2220      	movs	r2, #32
 8009436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009444:	2b01      	cmp	r3, #1
 8009446:	d135      	bne.n	80094b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	330c      	adds	r3, #12
 8009454:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	e853 3f00 	ldrex	r3, [r3]
 800945c:	613b      	str	r3, [r7, #16]
   return(result);
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	f023 0310 	bic.w	r3, r3, #16
 8009464:	627b      	str	r3, [r7, #36]	@ 0x24
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	330c      	adds	r3, #12
 800946c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800946e:	623a      	str	r2, [r7, #32]
 8009470:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	69f9      	ldr	r1, [r7, #28]
 8009474:	6a3a      	ldr	r2, [r7, #32]
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	61bb      	str	r3, [r7, #24]
   return(result);
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e5      	bne.n	800944e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0310 	and.w	r3, r3, #16
 800948c:	2b10      	cmp	r3, #16
 800948e:	d10a      	bne.n	80094a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009490:	2300      	movs	r3, #0
 8009492:	60fb      	str	r3, [r7, #12]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80094aa:	4619      	mov	r1, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff fc9b 	bl	8008de8 <HAL_UARTEx_RxEventCallback>
 80094b2:	e002      	b.n	80094ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7f8 fcbb 	bl	8001e30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	e002      	b.n	80094c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	e000      	b.n	80094c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80094c2:	2302      	movs	r3, #2
  }
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3730      	adds	r7, #48	@ 0x30
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094d0:	b0c0      	sub	sp, #256	@ 0x100
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80094e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094e8:	68d9      	ldr	r1, [r3, #12]
 80094ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	ea40 0301 	orr.w	r3, r0, r1
 80094f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80094f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094fa:	689a      	ldr	r2, [r3, #8]
 80094fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	431a      	orrs	r2, r3
 8009504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	431a      	orrs	r2, r3
 800950c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	4313      	orrs	r3, r2
 8009514:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009524:	f021 010c 	bic.w	r1, r1, #12
 8009528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009532:	430b      	orrs	r3, r1
 8009534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009546:	6999      	ldr	r1, [r3, #24]
 8009548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	ea40 0301 	orr.w	r3, r0, r1
 8009552:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	4b8f      	ldr	r3, [pc, #572]	@ (8009798 <UART_SetConfig+0x2cc>)
 800955c:	429a      	cmp	r2, r3
 800955e:	d005      	beq.n	800956c <UART_SetConfig+0xa0>
 8009560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	4b8d      	ldr	r3, [pc, #564]	@ (800979c <UART_SetConfig+0x2d0>)
 8009568:	429a      	cmp	r2, r3
 800956a:	d104      	bne.n	8009576 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800956c:	f7fe f818 	bl	80075a0 <HAL_RCC_GetPCLK2Freq>
 8009570:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009574:	e003      	b.n	800957e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009576:	f7fd ffff 	bl	8007578 <HAL_RCC_GetPCLK1Freq>
 800957a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800957e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009582:	69db      	ldr	r3, [r3, #28]
 8009584:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009588:	f040 810c 	bne.w	80097a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800958c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009590:	2200      	movs	r2, #0
 8009592:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009596:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800959a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800959e:	4622      	mov	r2, r4
 80095a0:	462b      	mov	r3, r5
 80095a2:	1891      	adds	r1, r2, r2
 80095a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80095a6:	415b      	adcs	r3, r3
 80095a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80095ae:	4621      	mov	r1, r4
 80095b0:	eb12 0801 	adds.w	r8, r2, r1
 80095b4:	4629      	mov	r1, r5
 80095b6:	eb43 0901 	adc.w	r9, r3, r1
 80095ba:	f04f 0200 	mov.w	r2, #0
 80095be:	f04f 0300 	mov.w	r3, #0
 80095c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095ce:	4690      	mov	r8, r2
 80095d0:	4699      	mov	r9, r3
 80095d2:	4623      	mov	r3, r4
 80095d4:	eb18 0303 	adds.w	r3, r8, r3
 80095d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80095dc:	462b      	mov	r3, r5
 80095de:	eb49 0303 	adc.w	r3, r9, r3
 80095e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80095e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80095f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80095f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80095fa:	460b      	mov	r3, r1
 80095fc:	18db      	adds	r3, r3, r3
 80095fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8009600:	4613      	mov	r3, r2
 8009602:	eb42 0303 	adc.w	r3, r2, r3
 8009606:	657b      	str	r3, [r7, #84]	@ 0x54
 8009608:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800960c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009610:	f7f7 fa4c 	bl	8000aac <__aeabi_uldivmod>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	4b61      	ldr	r3, [pc, #388]	@ (80097a0 <UART_SetConfig+0x2d4>)
 800961a:	fba3 2302 	umull	r2, r3, r3, r2
 800961e:	095b      	lsrs	r3, r3, #5
 8009620:	011c      	lsls	r4, r3, #4
 8009622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009626:	2200      	movs	r2, #0
 8009628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800962c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009630:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009634:	4642      	mov	r2, r8
 8009636:	464b      	mov	r3, r9
 8009638:	1891      	adds	r1, r2, r2
 800963a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800963c:	415b      	adcs	r3, r3
 800963e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009640:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009644:	4641      	mov	r1, r8
 8009646:	eb12 0a01 	adds.w	sl, r2, r1
 800964a:	4649      	mov	r1, r9
 800964c:	eb43 0b01 	adc.w	fp, r3, r1
 8009650:	f04f 0200 	mov.w	r2, #0
 8009654:	f04f 0300 	mov.w	r3, #0
 8009658:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800965c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009664:	4692      	mov	sl, r2
 8009666:	469b      	mov	fp, r3
 8009668:	4643      	mov	r3, r8
 800966a:	eb1a 0303 	adds.w	r3, sl, r3
 800966e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009672:	464b      	mov	r3, r9
 8009674:	eb4b 0303 	adc.w	r3, fp, r3
 8009678:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800967c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009688:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800968c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009690:	460b      	mov	r3, r1
 8009692:	18db      	adds	r3, r3, r3
 8009694:	643b      	str	r3, [r7, #64]	@ 0x40
 8009696:	4613      	mov	r3, r2
 8009698:	eb42 0303 	adc.w	r3, r2, r3
 800969c:	647b      	str	r3, [r7, #68]	@ 0x44
 800969e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80096a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80096a6:	f7f7 fa01 	bl	8000aac <__aeabi_uldivmod>
 80096aa:	4602      	mov	r2, r0
 80096ac:	460b      	mov	r3, r1
 80096ae:	4611      	mov	r1, r2
 80096b0:	4b3b      	ldr	r3, [pc, #236]	@ (80097a0 <UART_SetConfig+0x2d4>)
 80096b2:	fba3 2301 	umull	r2, r3, r3, r1
 80096b6:	095b      	lsrs	r3, r3, #5
 80096b8:	2264      	movs	r2, #100	@ 0x64
 80096ba:	fb02 f303 	mul.w	r3, r2, r3
 80096be:	1acb      	subs	r3, r1, r3
 80096c0:	00db      	lsls	r3, r3, #3
 80096c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80096c6:	4b36      	ldr	r3, [pc, #216]	@ (80097a0 <UART_SetConfig+0x2d4>)
 80096c8:	fba3 2302 	umull	r2, r3, r3, r2
 80096cc:	095b      	lsrs	r3, r3, #5
 80096ce:	005b      	lsls	r3, r3, #1
 80096d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80096d4:	441c      	add	r4, r3
 80096d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096da:	2200      	movs	r2, #0
 80096dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80096e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80096e8:	4642      	mov	r2, r8
 80096ea:	464b      	mov	r3, r9
 80096ec:	1891      	adds	r1, r2, r2
 80096ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80096f0:	415b      	adcs	r3, r3
 80096f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80096f8:	4641      	mov	r1, r8
 80096fa:	1851      	adds	r1, r2, r1
 80096fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80096fe:	4649      	mov	r1, r9
 8009700:	414b      	adcs	r3, r1
 8009702:	637b      	str	r3, [r7, #52]	@ 0x34
 8009704:	f04f 0200 	mov.w	r2, #0
 8009708:	f04f 0300 	mov.w	r3, #0
 800970c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009710:	4659      	mov	r1, fp
 8009712:	00cb      	lsls	r3, r1, #3
 8009714:	4651      	mov	r1, sl
 8009716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800971a:	4651      	mov	r1, sl
 800971c:	00ca      	lsls	r2, r1, #3
 800971e:	4610      	mov	r0, r2
 8009720:	4619      	mov	r1, r3
 8009722:	4603      	mov	r3, r0
 8009724:	4642      	mov	r2, r8
 8009726:	189b      	adds	r3, r3, r2
 8009728:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800972c:	464b      	mov	r3, r9
 800972e:	460a      	mov	r2, r1
 8009730:	eb42 0303 	adc.w	r3, r2, r3
 8009734:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009744:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800974c:	460b      	mov	r3, r1
 800974e:	18db      	adds	r3, r3, r3
 8009750:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009752:	4613      	mov	r3, r2
 8009754:	eb42 0303 	adc.w	r3, r2, r3
 8009758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800975a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800975e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009762:	f7f7 f9a3 	bl	8000aac <__aeabi_uldivmod>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	4b0d      	ldr	r3, [pc, #52]	@ (80097a0 <UART_SetConfig+0x2d4>)
 800976c:	fba3 1302 	umull	r1, r3, r3, r2
 8009770:	095b      	lsrs	r3, r3, #5
 8009772:	2164      	movs	r1, #100	@ 0x64
 8009774:	fb01 f303 	mul.w	r3, r1, r3
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	3332      	adds	r3, #50	@ 0x32
 800977e:	4a08      	ldr	r2, [pc, #32]	@ (80097a0 <UART_SetConfig+0x2d4>)
 8009780:	fba2 2303 	umull	r2, r3, r2, r3
 8009784:	095b      	lsrs	r3, r3, #5
 8009786:	f003 0207 	and.w	r2, r3, #7
 800978a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4422      	add	r2, r4
 8009792:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009794:	e106      	b.n	80099a4 <UART_SetConfig+0x4d8>
 8009796:	bf00      	nop
 8009798:	40011000 	.word	0x40011000
 800979c:	40011400 	.word	0x40011400
 80097a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097a8:	2200      	movs	r2, #0
 80097aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80097ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80097b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80097b6:	4642      	mov	r2, r8
 80097b8:	464b      	mov	r3, r9
 80097ba:	1891      	adds	r1, r2, r2
 80097bc:	6239      	str	r1, [r7, #32]
 80097be:	415b      	adcs	r3, r3
 80097c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80097c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097c6:	4641      	mov	r1, r8
 80097c8:	1854      	adds	r4, r2, r1
 80097ca:	4649      	mov	r1, r9
 80097cc:	eb43 0501 	adc.w	r5, r3, r1
 80097d0:	f04f 0200 	mov.w	r2, #0
 80097d4:	f04f 0300 	mov.w	r3, #0
 80097d8:	00eb      	lsls	r3, r5, #3
 80097da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097de:	00e2      	lsls	r2, r4, #3
 80097e0:	4614      	mov	r4, r2
 80097e2:	461d      	mov	r5, r3
 80097e4:	4643      	mov	r3, r8
 80097e6:	18e3      	adds	r3, r4, r3
 80097e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80097ec:	464b      	mov	r3, r9
 80097ee:	eb45 0303 	adc.w	r3, r5, r3
 80097f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80097f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009802:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009806:	f04f 0200 	mov.w	r2, #0
 800980a:	f04f 0300 	mov.w	r3, #0
 800980e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009812:	4629      	mov	r1, r5
 8009814:	008b      	lsls	r3, r1, #2
 8009816:	4621      	mov	r1, r4
 8009818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800981c:	4621      	mov	r1, r4
 800981e:	008a      	lsls	r2, r1, #2
 8009820:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009824:	f7f7 f942 	bl	8000aac <__aeabi_uldivmod>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	4b60      	ldr	r3, [pc, #384]	@ (80099b0 <UART_SetConfig+0x4e4>)
 800982e:	fba3 2302 	umull	r2, r3, r3, r2
 8009832:	095b      	lsrs	r3, r3, #5
 8009834:	011c      	lsls	r4, r3, #4
 8009836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800983a:	2200      	movs	r2, #0
 800983c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009840:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009848:	4642      	mov	r2, r8
 800984a:	464b      	mov	r3, r9
 800984c:	1891      	adds	r1, r2, r2
 800984e:	61b9      	str	r1, [r7, #24]
 8009850:	415b      	adcs	r3, r3
 8009852:	61fb      	str	r3, [r7, #28]
 8009854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009858:	4641      	mov	r1, r8
 800985a:	1851      	adds	r1, r2, r1
 800985c:	6139      	str	r1, [r7, #16]
 800985e:	4649      	mov	r1, r9
 8009860:	414b      	adcs	r3, r1
 8009862:	617b      	str	r3, [r7, #20]
 8009864:	f04f 0200 	mov.w	r2, #0
 8009868:	f04f 0300 	mov.w	r3, #0
 800986c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009870:	4659      	mov	r1, fp
 8009872:	00cb      	lsls	r3, r1, #3
 8009874:	4651      	mov	r1, sl
 8009876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800987a:	4651      	mov	r1, sl
 800987c:	00ca      	lsls	r2, r1, #3
 800987e:	4610      	mov	r0, r2
 8009880:	4619      	mov	r1, r3
 8009882:	4603      	mov	r3, r0
 8009884:	4642      	mov	r2, r8
 8009886:	189b      	adds	r3, r3, r2
 8009888:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800988c:	464b      	mov	r3, r9
 800988e:	460a      	mov	r2, r1
 8009890:	eb42 0303 	adc.w	r3, r2, r3
 8009894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80098a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80098a4:	f04f 0200 	mov.w	r2, #0
 80098a8:	f04f 0300 	mov.w	r3, #0
 80098ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80098b0:	4649      	mov	r1, r9
 80098b2:	008b      	lsls	r3, r1, #2
 80098b4:	4641      	mov	r1, r8
 80098b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098ba:	4641      	mov	r1, r8
 80098bc:	008a      	lsls	r2, r1, #2
 80098be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80098c2:	f7f7 f8f3 	bl	8000aac <__aeabi_uldivmod>
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	4611      	mov	r1, r2
 80098cc:	4b38      	ldr	r3, [pc, #224]	@ (80099b0 <UART_SetConfig+0x4e4>)
 80098ce:	fba3 2301 	umull	r2, r3, r3, r1
 80098d2:	095b      	lsrs	r3, r3, #5
 80098d4:	2264      	movs	r2, #100	@ 0x64
 80098d6:	fb02 f303 	mul.w	r3, r2, r3
 80098da:	1acb      	subs	r3, r1, r3
 80098dc:	011b      	lsls	r3, r3, #4
 80098de:	3332      	adds	r3, #50	@ 0x32
 80098e0:	4a33      	ldr	r2, [pc, #204]	@ (80099b0 <UART_SetConfig+0x4e4>)
 80098e2:	fba2 2303 	umull	r2, r3, r2, r3
 80098e6:	095b      	lsrs	r3, r3, #5
 80098e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80098ec:	441c      	add	r4, r3
 80098ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098f2:	2200      	movs	r2, #0
 80098f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80098f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80098f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80098fc:	4642      	mov	r2, r8
 80098fe:	464b      	mov	r3, r9
 8009900:	1891      	adds	r1, r2, r2
 8009902:	60b9      	str	r1, [r7, #8]
 8009904:	415b      	adcs	r3, r3
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800990c:	4641      	mov	r1, r8
 800990e:	1851      	adds	r1, r2, r1
 8009910:	6039      	str	r1, [r7, #0]
 8009912:	4649      	mov	r1, r9
 8009914:	414b      	adcs	r3, r1
 8009916:	607b      	str	r3, [r7, #4]
 8009918:	f04f 0200 	mov.w	r2, #0
 800991c:	f04f 0300 	mov.w	r3, #0
 8009920:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009924:	4659      	mov	r1, fp
 8009926:	00cb      	lsls	r3, r1, #3
 8009928:	4651      	mov	r1, sl
 800992a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800992e:	4651      	mov	r1, sl
 8009930:	00ca      	lsls	r2, r1, #3
 8009932:	4610      	mov	r0, r2
 8009934:	4619      	mov	r1, r3
 8009936:	4603      	mov	r3, r0
 8009938:	4642      	mov	r2, r8
 800993a:	189b      	adds	r3, r3, r2
 800993c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800993e:	464b      	mov	r3, r9
 8009940:	460a      	mov	r2, r1
 8009942:	eb42 0303 	adc.w	r3, r2, r3
 8009946:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	663b      	str	r3, [r7, #96]	@ 0x60
 8009952:	667a      	str	r2, [r7, #100]	@ 0x64
 8009954:	f04f 0200 	mov.w	r2, #0
 8009958:	f04f 0300 	mov.w	r3, #0
 800995c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009960:	4649      	mov	r1, r9
 8009962:	008b      	lsls	r3, r1, #2
 8009964:	4641      	mov	r1, r8
 8009966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800996a:	4641      	mov	r1, r8
 800996c:	008a      	lsls	r2, r1, #2
 800996e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009972:	f7f7 f89b 	bl	8000aac <__aeabi_uldivmod>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	4b0d      	ldr	r3, [pc, #52]	@ (80099b0 <UART_SetConfig+0x4e4>)
 800997c:	fba3 1302 	umull	r1, r3, r3, r2
 8009980:	095b      	lsrs	r3, r3, #5
 8009982:	2164      	movs	r1, #100	@ 0x64
 8009984:	fb01 f303 	mul.w	r3, r1, r3
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	011b      	lsls	r3, r3, #4
 800998c:	3332      	adds	r3, #50	@ 0x32
 800998e:	4a08      	ldr	r2, [pc, #32]	@ (80099b0 <UART_SetConfig+0x4e4>)
 8009990:	fba2 2303 	umull	r2, r3, r2, r3
 8009994:	095b      	lsrs	r3, r3, #5
 8009996:	f003 020f 	and.w	r2, r3, #15
 800999a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4422      	add	r2, r4
 80099a2:	609a      	str	r2, [r3, #8]
}
 80099a4:	bf00      	nop
 80099a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80099aa:	46bd      	mov	sp, r7
 80099ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099b0:	51eb851f 	.word	0x51eb851f

080099b4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80099ba:	4b87      	ldr	r3, [pc, #540]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 80099bc:	22c0      	movs	r2, #192	@ 0xc0
 80099be:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80099c0:	4b85      	ldr	r3, [pc, #532]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 80099c2:	22a8      	movs	r2, #168	@ 0xa8
 80099c4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 13;
 80099c6:	4b84      	ldr	r3, [pc, #528]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 80099c8:	220d      	movs	r2, #13
 80099ca:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 80099cc:	4b82      	ldr	r3, [pc, #520]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 80099ce:	226f      	movs	r2, #111	@ 0x6f
 80099d0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80099d2:	4b82      	ldr	r3, [pc, #520]	@ (8009bdc <MX_LWIP_Init+0x228>)
 80099d4:	22ff      	movs	r2, #255	@ 0xff
 80099d6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80099d8:	4b80      	ldr	r3, [pc, #512]	@ (8009bdc <MX_LWIP_Init+0x228>)
 80099da:	22ff      	movs	r2, #255	@ 0xff
 80099dc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80099de:	4b7f      	ldr	r3, [pc, #508]	@ (8009bdc <MX_LWIP_Init+0x228>)
 80099e0:	22ff      	movs	r2, #255	@ 0xff
 80099e2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80099e4:	4b7d      	ldr	r3, [pc, #500]	@ (8009bdc <MX_LWIP_Init+0x228>)
 80099e6:	2200      	movs	r2, #0
 80099e8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80099ea:	4b7d      	ldr	r3, [pc, #500]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 80099ec:	22c0      	movs	r2, #192	@ 0xc0
 80099ee:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80099f0:	4b7b      	ldr	r3, [pc, #492]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 80099f2:	22a8      	movs	r2, #168	@ 0xa8
 80099f4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 13;
 80099f6:	4b7a      	ldr	r3, [pc, #488]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 80099f8:	220d      	movs	r2, #13
 80099fa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 80099fc:	4b78      	ldr	r3, [pc, #480]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 80099fe:	2264      	movs	r2, #100	@ 0x64
 8009a00:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8009a02:	f000 fcfa 	bl	800a3fa <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009a06:	4b74      	ldr	r3, [pc, #464]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	061a      	lsls	r2, r3, #24
 8009a0c:	4b72      	ldr	r3, [pc, #456]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a0e:	785b      	ldrb	r3, [r3, #1]
 8009a10:	041b      	lsls	r3, r3, #16
 8009a12:	431a      	orrs	r2, r3
 8009a14:	4b70      	ldr	r3, [pc, #448]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a16:	789b      	ldrb	r3, [r3, #2]
 8009a18:	021b      	lsls	r3, r3, #8
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	4a6e      	ldr	r2, [pc, #440]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a1e:	78d2      	ldrb	r2, [r2, #3]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	061a      	lsls	r2, r3, #24
 8009a24:	4b6c      	ldr	r3, [pc, #432]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	0619      	lsls	r1, r3, #24
 8009a2a:	4b6b      	ldr	r3, [pc, #428]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a2c:	785b      	ldrb	r3, [r3, #1]
 8009a2e:	041b      	lsls	r3, r3, #16
 8009a30:	4319      	orrs	r1, r3
 8009a32:	4b69      	ldr	r3, [pc, #420]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a34:	789b      	ldrb	r3, [r3, #2]
 8009a36:	021b      	lsls	r3, r3, #8
 8009a38:	430b      	orrs	r3, r1
 8009a3a:	4967      	ldr	r1, [pc, #412]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a3c:	78c9      	ldrb	r1, [r1, #3]
 8009a3e:	430b      	orrs	r3, r1
 8009a40:	021b      	lsls	r3, r3, #8
 8009a42:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009a46:	431a      	orrs	r2, r3
 8009a48:	4b63      	ldr	r3, [pc, #396]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	0619      	lsls	r1, r3, #24
 8009a4e:	4b62      	ldr	r3, [pc, #392]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a50:	785b      	ldrb	r3, [r3, #1]
 8009a52:	041b      	lsls	r3, r3, #16
 8009a54:	4319      	orrs	r1, r3
 8009a56:	4b60      	ldr	r3, [pc, #384]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a58:	789b      	ldrb	r3, [r3, #2]
 8009a5a:	021b      	lsls	r3, r3, #8
 8009a5c:	430b      	orrs	r3, r1
 8009a5e:	495e      	ldr	r1, [pc, #376]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a60:	78c9      	ldrb	r1, [r1, #3]
 8009a62:	430b      	orrs	r3, r1
 8009a64:	0a1b      	lsrs	r3, r3, #8
 8009a66:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009a6a:	431a      	orrs	r2, r3
 8009a6c:	4b5a      	ldr	r3, [pc, #360]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	0619      	lsls	r1, r3, #24
 8009a72:	4b59      	ldr	r3, [pc, #356]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a74:	785b      	ldrb	r3, [r3, #1]
 8009a76:	041b      	lsls	r3, r3, #16
 8009a78:	4319      	orrs	r1, r3
 8009a7a:	4b57      	ldr	r3, [pc, #348]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a7c:	789b      	ldrb	r3, [r3, #2]
 8009a7e:	021b      	lsls	r3, r3, #8
 8009a80:	430b      	orrs	r3, r1
 8009a82:	4955      	ldr	r1, [pc, #340]	@ (8009bd8 <MX_LWIP_Init+0x224>)
 8009a84:	78c9      	ldrb	r1, [r1, #3]
 8009a86:	430b      	orrs	r3, r1
 8009a88:	0e1b      	lsrs	r3, r3, #24
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	4a55      	ldr	r2, [pc, #340]	@ (8009be4 <MX_LWIP_Init+0x230>)
 8009a8e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009a90:	4b52      	ldr	r3, [pc, #328]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	061a      	lsls	r2, r3, #24
 8009a96:	4b51      	ldr	r3, [pc, #324]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009a98:	785b      	ldrb	r3, [r3, #1]
 8009a9a:	041b      	lsls	r3, r3, #16
 8009a9c:	431a      	orrs	r2, r3
 8009a9e:	4b4f      	ldr	r3, [pc, #316]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009aa0:	789b      	ldrb	r3, [r3, #2]
 8009aa2:	021b      	lsls	r3, r3, #8
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	4a4d      	ldr	r2, [pc, #308]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009aa8:	78d2      	ldrb	r2, [r2, #3]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	061a      	lsls	r2, r3, #24
 8009aae:	4b4b      	ldr	r3, [pc, #300]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	0619      	lsls	r1, r3, #24
 8009ab4:	4b49      	ldr	r3, [pc, #292]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009ab6:	785b      	ldrb	r3, [r3, #1]
 8009ab8:	041b      	lsls	r3, r3, #16
 8009aba:	4319      	orrs	r1, r3
 8009abc:	4b47      	ldr	r3, [pc, #284]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009abe:	789b      	ldrb	r3, [r3, #2]
 8009ac0:	021b      	lsls	r3, r3, #8
 8009ac2:	430b      	orrs	r3, r1
 8009ac4:	4945      	ldr	r1, [pc, #276]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009ac6:	78c9      	ldrb	r1, [r1, #3]
 8009ac8:	430b      	orrs	r3, r1
 8009aca:	021b      	lsls	r3, r3, #8
 8009acc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009ad0:	431a      	orrs	r2, r3
 8009ad2:	4b42      	ldr	r3, [pc, #264]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	0619      	lsls	r1, r3, #24
 8009ad8:	4b40      	ldr	r3, [pc, #256]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009ada:	785b      	ldrb	r3, [r3, #1]
 8009adc:	041b      	lsls	r3, r3, #16
 8009ade:	4319      	orrs	r1, r3
 8009ae0:	4b3e      	ldr	r3, [pc, #248]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009ae2:	789b      	ldrb	r3, [r3, #2]
 8009ae4:	021b      	lsls	r3, r3, #8
 8009ae6:	430b      	orrs	r3, r1
 8009ae8:	493c      	ldr	r1, [pc, #240]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009aea:	78c9      	ldrb	r1, [r1, #3]
 8009aec:	430b      	orrs	r3, r1
 8009aee:	0a1b      	lsrs	r3, r3, #8
 8009af0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009af4:	431a      	orrs	r2, r3
 8009af6:	4b39      	ldr	r3, [pc, #228]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	0619      	lsls	r1, r3, #24
 8009afc:	4b37      	ldr	r3, [pc, #220]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009afe:	785b      	ldrb	r3, [r3, #1]
 8009b00:	041b      	lsls	r3, r3, #16
 8009b02:	4319      	orrs	r1, r3
 8009b04:	4b35      	ldr	r3, [pc, #212]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009b06:	789b      	ldrb	r3, [r3, #2]
 8009b08:	021b      	lsls	r3, r3, #8
 8009b0a:	430b      	orrs	r3, r1
 8009b0c:	4933      	ldr	r1, [pc, #204]	@ (8009bdc <MX_LWIP_Init+0x228>)
 8009b0e:	78c9      	ldrb	r1, [r1, #3]
 8009b10:	430b      	orrs	r3, r1
 8009b12:	0e1b      	lsrs	r3, r3, #24
 8009b14:	4313      	orrs	r3, r2
 8009b16:	4a34      	ldr	r2, [pc, #208]	@ (8009be8 <MX_LWIP_Init+0x234>)
 8009b18:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009b1a:	4b31      	ldr	r3, [pc, #196]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	061a      	lsls	r2, r3, #24
 8009b20:	4b2f      	ldr	r3, [pc, #188]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b22:	785b      	ldrb	r3, [r3, #1]
 8009b24:	041b      	lsls	r3, r3, #16
 8009b26:	431a      	orrs	r2, r3
 8009b28:	4b2d      	ldr	r3, [pc, #180]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b2a:	789b      	ldrb	r3, [r3, #2]
 8009b2c:	021b      	lsls	r3, r3, #8
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	4a2b      	ldr	r2, [pc, #172]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b32:	78d2      	ldrb	r2, [r2, #3]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	061a      	lsls	r2, r3, #24
 8009b38:	4b29      	ldr	r3, [pc, #164]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	0619      	lsls	r1, r3, #24
 8009b3e:	4b28      	ldr	r3, [pc, #160]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b40:	785b      	ldrb	r3, [r3, #1]
 8009b42:	041b      	lsls	r3, r3, #16
 8009b44:	4319      	orrs	r1, r3
 8009b46:	4b26      	ldr	r3, [pc, #152]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b48:	789b      	ldrb	r3, [r3, #2]
 8009b4a:	021b      	lsls	r3, r3, #8
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	4924      	ldr	r1, [pc, #144]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b50:	78c9      	ldrb	r1, [r1, #3]
 8009b52:	430b      	orrs	r3, r1
 8009b54:	021b      	lsls	r3, r3, #8
 8009b56:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009b5a:	431a      	orrs	r2, r3
 8009b5c:	4b20      	ldr	r3, [pc, #128]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	0619      	lsls	r1, r3, #24
 8009b62:	4b1f      	ldr	r3, [pc, #124]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b64:	785b      	ldrb	r3, [r3, #1]
 8009b66:	041b      	lsls	r3, r3, #16
 8009b68:	4319      	orrs	r1, r3
 8009b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b6c:	789b      	ldrb	r3, [r3, #2]
 8009b6e:	021b      	lsls	r3, r3, #8
 8009b70:	430b      	orrs	r3, r1
 8009b72:	491b      	ldr	r1, [pc, #108]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b74:	78c9      	ldrb	r1, [r1, #3]
 8009b76:	430b      	orrs	r3, r1
 8009b78:	0a1b      	lsrs	r3, r3, #8
 8009b7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	4b17      	ldr	r3, [pc, #92]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	0619      	lsls	r1, r3, #24
 8009b86:	4b16      	ldr	r3, [pc, #88]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b88:	785b      	ldrb	r3, [r3, #1]
 8009b8a:	041b      	lsls	r3, r3, #16
 8009b8c:	4319      	orrs	r1, r3
 8009b8e:	4b14      	ldr	r3, [pc, #80]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b90:	789b      	ldrb	r3, [r3, #2]
 8009b92:	021b      	lsls	r3, r3, #8
 8009b94:	430b      	orrs	r3, r1
 8009b96:	4912      	ldr	r1, [pc, #72]	@ (8009be0 <MX_LWIP_Init+0x22c>)
 8009b98:	78c9      	ldrb	r1, [r1, #3]
 8009b9a:	430b      	orrs	r3, r1
 8009b9c:	0e1b      	lsrs	r3, r3, #24
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	4a12      	ldr	r2, [pc, #72]	@ (8009bec <MX_LWIP_Init+0x238>)
 8009ba2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009ba4:	4b12      	ldr	r3, [pc, #72]	@ (8009bf0 <MX_LWIP_Init+0x23c>)
 8009ba6:	9302      	str	r3, [sp, #8]
 8009ba8:	4b12      	ldr	r3, [pc, #72]	@ (8009bf4 <MX_LWIP_Init+0x240>)
 8009baa:	9301      	str	r3, [sp, #4]
 8009bac:	2300      	movs	r3, #0
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8009bec <MX_LWIP_Init+0x238>)
 8009bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8009be8 <MX_LWIP_Init+0x234>)
 8009bb4:	490b      	ldr	r1, [pc, #44]	@ (8009be4 <MX_LWIP_Init+0x230>)
 8009bb6:	4810      	ldr	r0, [pc, #64]	@ (8009bf8 <MX_LWIP_Init+0x244>)
 8009bb8:	f001 f90a 	bl	800add0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009bbc:	480e      	ldr	r0, [pc, #56]	@ (8009bf8 <MX_LWIP_Init+0x244>)
 8009bbe:	f001 fab9 	bl	800b134 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8009bc2:	480d      	ldr	r0, [pc, #52]	@ (8009bf8 <MX_LWIP_Init+0x244>)
 8009bc4:	f001 fac6 	bl	800b154 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009bc8:	490c      	ldr	r1, [pc, #48]	@ (8009bfc <MX_LWIP_Init+0x248>)
 8009bca:	480b      	ldr	r0, [pc, #44]	@ (8009bf8 <MX_LWIP_Init+0x244>)
 8009bcc:	f001 fbc4 	bl	800b358 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009bd0:	bf00      	nop
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20000dfc 	.word	0x20000dfc
 8009bdc:	20000e00 	.word	0x20000e00
 8009be0:	20000e04 	.word	0x20000e04
 8009be4:	20000df0 	.word	0x20000df0
 8009be8:	20000df4 	.word	0x20000df4
 8009bec:	20000df8 	.word	0x20000df8
 8009bf0:	08014389 	.word	0x08014389
 8009bf4:	08009f1d 	.word	0x08009f1d
 8009bf8:	20000dbc 	.word	0x20000dbc
 8009bfc:	08009c51 	.word	0x08009c51

08009c00 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8009c08:	f7fa fb50 	bl	80042ac <HAL_GetTick>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	4b08      	ldr	r3, [pc, #32]	@ (8009c30 <Ethernet_Link_Periodic_Handle+0x30>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	1ad3      	subs	r3, r2, r3
 8009c14:	2b63      	cmp	r3, #99	@ 0x63
 8009c16:	d907      	bls.n	8009c28 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8009c18:	f7fa fb48 	bl	80042ac <HAL_GetTick>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	4a04      	ldr	r2, [pc, #16]	@ (8009c30 <Ethernet_Link_Periodic_Handle+0x30>)
 8009c20:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fabe 	bl	800a1a4 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8009c28:	bf00      	nop
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	20000db8 	.word	0x20000db8

08009c34 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8009c38:	4804      	ldr	r0, [pc, #16]	@ (8009c4c <MX_LWIP_Process+0x18>)
 8009c3a:	f000 f94f 	bl	8009edc <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8009c3e:	f007 fc9b 	bl	8011578 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8009c42:	4802      	ldr	r0, [pc, #8]	@ (8009c4c <MX_LWIP_Process+0x18>)
 8009c44:	f7ff ffdc 	bl	8009c00 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8009c48:	bf00      	nop
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	20000dbc 	.word	0x20000dbc

08009c50 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009c70:	4b44      	ldr	r3, [pc, #272]	@ (8009d84 <low_level_init+0x120>)
 8009c72:	4a45      	ldr	r2, [pc, #276]	@ (8009d88 <low_level_init+0x124>)
 8009c74:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x12;
 8009c76:	2312      	movs	r3, #18
 8009c78:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x34;
 8009c7a:	2334      	movs	r3, #52	@ 0x34
 8009c7c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x56;
 8009c7e:	2356      	movs	r3, #86	@ 0x56
 8009c80:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x12;
 8009c82:	2312      	movs	r3, #18
 8009c84:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x34;
 8009c86:	2334      	movs	r3, #52	@ 0x34
 8009c88:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x56;
 8009c8a:	2356      	movs	r3, #86	@ 0x56
 8009c8c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009c8e:	4a3d      	ldr	r2, [pc, #244]	@ (8009d84 <low_level_init+0x120>)
 8009c90:	f107 0308 	add.w	r3, r7, #8
 8009c94:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009c96:	4b3b      	ldr	r3, [pc, #236]	@ (8009d84 <low_level_init+0x120>)
 8009c98:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8009c9c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009c9e:	4b39      	ldr	r3, [pc, #228]	@ (8009d84 <low_level_init+0x120>)
 8009ca0:	4a3a      	ldr	r2, [pc, #232]	@ (8009d8c <low_level_init+0x128>)
 8009ca2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009ca4:	4b37      	ldr	r3, [pc, #220]	@ (8009d84 <low_level_init+0x120>)
 8009ca6:	4a3a      	ldr	r2, [pc, #232]	@ (8009d90 <low_level_init+0x12c>)
 8009ca8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009caa:	4b36      	ldr	r3, [pc, #216]	@ (8009d84 <low_level_init+0x120>)
 8009cac:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009cb0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009cb2:	4834      	ldr	r0, [pc, #208]	@ (8009d84 <low_level_init+0x120>)
 8009cb4:	f7fb fba8 	bl	8005408 <HAL_ETH_Init>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009cbc:	2238      	movs	r2, #56	@ 0x38
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	4834      	ldr	r0, [pc, #208]	@ (8009d94 <low_level_init+0x130>)
 8009cc2:	f00a fd9c 	bl	80147fe <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009cc6:	4b33      	ldr	r3, [pc, #204]	@ (8009d94 <low_level_init+0x130>)
 8009cc8:	2221      	movs	r2, #33	@ 0x21
 8009cca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009ccc:	4b31      	ldr	r3, [pc, #196]	@ (8009d94 <low_level_init+0x130>)
 8009cce:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8009cd2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8009d94 <low_level_init+0x130>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009cda:	482f      	ldr	r0, [pc, #188]	@ (8009d98 <low_level_init+0x134>)
 8009cdc:	f000 ff40 	bl	800ab60 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2206      	movs	r2, #6
 8009ce4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009ce8:	4b26      	ldr	r3, [pc, #152]	@ (8009d84 <low_level_init+0x120>)
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	781a      	ldrb	r2, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009cf4:	4b23      	ldr	r3, [pc, #140]	@ (8009d84 <low_level_init+0x120>)
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	785a      	ldrb	r2, [r3, #1]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009d00:	4b20      	ldr	r3, [pc, #128]	@ (8009d84 <low_level_init+0x120>)
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	789a      	ldrb	r2, [r3, #2]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8009d84 <low_level_init+0x120>)
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	78da      	ldrb	r2, [r3, #3]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009d18:	4b1a      	ldr	r3, [pc, #104]	@ (8009d84 <low_level_init+0x120>)
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	791a      	ldrb	r2, [r3, #4]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009d24:	4b17      	ldr	r3, [pc, #92]	@ (8009d84 <low_level_init+0x120>)
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	795a      	ldrb	r2, [r3, #5]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8009d36:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009d3e:	f043 030a 	orr.w	r3, r3, #10
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009d4a:	4914      	ldr	r1, [pc, #80]	@ (8009d9c <low_level_init+0x138>)
 8009d4c:	4814      	ldr	r0, [pc, #80]	@ (8009da0 <low_level_init+0x13c>)
 8009d4e:	f7fa f940 	bl	8003fd2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8009d52:	4813      	ldr	r0, [pc, #76]	@ (8009da0 <low_level_init+0x13c>)
 8009d54:	f7fa f96f 	bl	8004036 <LAN8742_Init>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d006      	beq.n	8009d6c <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f001 faca 	bl	800b2f8 <netif_set_link_down>
    netif_set_down(netif);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f001 fa61 	bl	800b22c <netif_set_down>
 8009d6a:	e008      	b.n	8009d7e <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d103      	bne.n	8009d7a <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fa16 	bl	800a1a4 <ethernet_link_check_state>
 8009d78:	e001      	b.n	8009d7e <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8009d7a:	f7f7 fcaf 	bl	80016dc <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	200058d4 	.word	0x200058d4
 8009d88:	40028000 	.word	0x40028000
 8009d8c:	20005834 	.word	0x20005834
 8009d90:	20005794 	.word	0x20005794
 8009d94:	20005984 	.word	0x20005984
 8009d98:	08017f5c 	.word	0x08017f5c
 8009d9c:	20000074 	.word	0x20000074
 8009da0:	200059bc 	.word	0x200059bc

08009da4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b092      	sub	sp, #72	@ 0x48
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009dae:	2300      	movs	r3, #0
 8009db0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8009db2:	2300      	movs	r3, #0
 8009db4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8009db6:	2300      	movs	r3, #0
 8009db8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009dbc:	f107 030c 	add.w	r3, r7, #12
 8009dc0:	2230      	movs	r2, #48	@ 0x30
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f00a fd1a 	bl	80147fe <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009dca:	f107 030c 	add.w	r3, r7, #12
 8009dce:	2230      	movs	r2, #48	@ 0x30
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f00a fd13 	bl	80147fe <memset>

  for(q = p; q != NULL; q = q->next)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ddc:	e045      	b.n	8009e6a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009de0:	2b03      	cmp	r3, #3
 8009de2:	d902      	bls.n	8009dea <low_level_output+0x46>
      return ERR_IF;
 8009de4:	f06f 030b 	mvn.w	r3, #11
 8009de8:	e055      	b.n	8009e96 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8009dea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dec:	6859      	ldr	r1, [r3, #4]
 8009dee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009df0:	4613      	mov	r3, r2
 8009df2:	005b      	lsls	r3, r3, #1
 8009df4:	4413      	add	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	3348      	adds	r3, #72	@ 0x48
 8009dfa:	443b      	add	r3, r7
 8009dfc:	3b3c      	subs	r3, #60	@ 0x3c
 8009dfe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009e00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e02:	895b      	ldrh	r3, [r3, #10]
 8009e04:	4619      	mov	r1, r3
 8009e06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e08:	4613      	mov	r3, r2
 8009e0a:	005b      	lsls	r3, r3, #1
 8009e0c:	4413      	add	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	3348      	adds	r3, #72	@ 0x48
 8009e12:	443b      	add	r3, r7
 8009e14:	3b38      	subs	r3, #56	@ 0x38
 8009e16:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d011      	beq.n	8009e42 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009e1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e20:	1e5a      	subs	r2, r3, #1
 8009e22:	f107 000c 	add.w	r0, r7, #12
 8009e26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009e28:	460b      	mov	r3, r1
 8009e2a:	005b      	lsls	r3, r3, #1
 8009e2c:	440b      	add	r3, r1
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	18c1      	adds	r1, r0, r3
 8009e32:	4613      	mov	r3, r2
 8009e34:	005b      	lsls	r3, r3, #1
 8009e36:	4413      	add	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	3348      	adds	r3, #72	@ 0x48
 8009e3c:	443b      	add	r3, r7
 8009e3e:	3b34      	subs	r3, #52	@ 0x34
 8009e40:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d109      	bne.n	8009e5e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8009e4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	005b      	lsls	r3, r3, #1
 8009e50:	4413      	add	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	3348      	adds	r3, #72	@ 0x48
 8009e56:	443b      	add	r3, r7
 8009e58:	3b34      	subs	r3, #52	@ 0x34
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009e5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e60:	3301      	adds	r3, #1
 8009e62:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8009e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1b6      	bne.n	8009dde <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	891b      	ldrh	r3, [r3, #8]
 8009e74:	461a      	mov	r2, r3
 8009e76:	4b0a      	ldr	r3, [pc, #40]	@ (8009ea0 <low_level_output+0xfc>)
 8009e78:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009e7a:	4a09      	ldr	r2, [pc, #36]	@ (8009ea0 <low_level_output+0xfc>)
 8009e7c:	f107 030c 	add.w	r3, r7, #12
 8009e80:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009e82:	4a07      	ldr	r2, [pc, #28]	@ (8009ea0 <low_level_output+0xfc>)
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009e88:	2214      	movs	r2, #20
 8009e8a:	4905      	ldr	r1, [pc, #20]	@ (8009ea0 <low_level_output+0xfc>)
 8009e8c:	4805      	ldr	r0, [pc, #20]	@ (8009ea4 <low_level_output+0x100>)
 8009e8e:	f7fb fc0f 	bl	80056b0 <HAL_ETH_Transmit>

  return errval;
 8009e92:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3748      	adds	r7, #72	@ 0x48
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	20005984 	.word	0x20005984
 8009ea4:	200058d4 	.word	0x200058d4

08009ea8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009eb4:	4b07      	ldr	r3, [pc, #28]	@ (8009ed4 <low_level_input+0x2c>)
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d105      	bne.n	8009ec8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009ebc:	f107 030c 	add.w	r3, r7, #12
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	4805      	ldr	r0, [pc, #20]	@ (8009ed8 <low_level_input+0x30>)
 8009ec4:	f7fb fc88 	bl	80057d8 <HAL_ETH_ReadData>
  }

  return p;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	20005790 	.word	0x20005790
 8009ed8:	200058d4 	.word	0x200058d4

08009edc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff ffdd 	bl	8009ea8 <low_level_input>
 8009eee:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	6879      	ldr	r1, [r7, #4]
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	4798      	blx	r3
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f001 fda6 	bl	800ba58 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1ea      	bne.n	8009ee8 <ethernetif_input+0xc>
}
 8009f12:	bf00      	nop
 8009f14:	bf00      	nop
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d106      	bne.n	8009f38 <ethernetif_init+0x1c>
 8009f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f64 <ethernetif_init+0x48>)
 8009f2c:	f240 126f 	movw	r2, #367	@ 0x16f
 8009f30:	490d      	ldr	r1, [pc, #52]	@ (8009f68 <ethernetif_init+0x4c>)
 8009f32:	480e      	ldr	r0, [pc, #56]	@ (8009f6c <ethernetif_init+0x50>)
 8009f34:	f00a fbfe 	bl	8014734 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2273      	movs	r2, #115	@ 0x73
 8009f3c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2274      	movs	r2, #116	@ 0x74
 8009f44:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a09      	ldr	r2, [pc, #36]	@ (8009f70 <ethernetif_init+0x54>)
 8009f4c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a08      	ldr	r2, [pc, #32]	@ (8009f74 <ethernetif_init+0x58>)
 8009f52:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7ff fe85 	bl	8009c64 <low_level_init>

  return ERR_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	0801555c 	.word	0x0801555c
 8009f68:	08015578 	.word	0x08015578
 8009f6c:	08015588 	.word	0x08015588
 8009f70:	08012841 	.word	0x08012841
 8009f74:	08009da5 	.word	0x08009da5

08009f78 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009f84:	68f9      	ldr	r1, [r7, #12]
 8009f86:	4807      	ldr	r0, [pc, #28]	@ (8009fa4 <pbuf_free_custom+0x2c>)
 8009f88:	f000 fecc 	bl	800ad24 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009f8c:	4b06      	ldr	r3, [pc, #24]	@ (8009fa8 <pbuf_free_custom+0x30>)
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d102      	bne.n	8009f9a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009f94:	4b04      	ldr	r3, [pc, #16]	@ (8009fa8 <pbuf_free_custom+0x30>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	701a      	strb	r2, [r3, #0]
  }
}
 8009f9a:	bf00      	nop
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	08017f5c 	.word	0x08017f5c
 8009fa8:	20005790 	.word	0x20005790

08009fac <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009fb0:	f7fa f97c 	bl	80042ac <HAL_GetTick>
 8009fb4:	4603      	mov	r3, r0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08e      	sub	sp, #56	@ 0x38
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fc8:	2200      	movs	r2, #0
 8009fca:	601a      	str	r2, [r3, #0]
 8009fcc:	605a      	str	r2, [r3, #4]
 8009fce:	609a      	str	r2, [r3, #8]
 8009fd0:	60da      	str	r2, [r3, #12]
 8009fd2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a46      	ldr	r2, [pc, #280]	@ (800a0f4 <HAL_ETH_MspInit+0x138>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	f040 8085 	bne.w	800a0ea <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	623b      	str	r3, [r7, #32]
 8009fe4:	4b44      	ldr	r3, [pc, #272]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 8009fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fe8:	4a43      	ldr	r2, [pc, #268]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 8009fea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009fee:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ff0:	4b41      	ldr	r3, [pc, #260]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 8009ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ff8:	623b      	str	r3, [r7, #32]
 8009ffa:	6a3b      	ldr	r3, [r7, #32]
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	61fb      	str	r3, [r7, #28]
 800a000:	4b3d      	ldr	r3, [pc, #244]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 800a002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a004:	4a3c      	ldr	r2, [pc, #240]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 800a006:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a00a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a00c:	4b3a      	ldr	r3, [pc, #232]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 800a00e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a010:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a014:	61fb      	str	r3, [r7, #28]
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	2300      	movs	r3, #0
 800a01a:	61bb      	str	r3, [r7, #24]
 800a01c:	4b36      	ldr	r3, [pc, #216]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 800a01e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a020:	4a35      	ldr	r2, [pc, #212]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 800a022:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a026:	6313      	str	r3, [r2, #48]	@ 0x30
 800a028:	4b33      	ldr	r3, [pc, #204]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 800a02a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a02c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a030:	61bb      	str	r3, [r7, #24]
 800a032:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a034:	2300      	movs	r3, #0
 800a036:	617b      	str	r3, [r7, #20]
 800a038:	4b2f      	ldr	r3, [pc, #188]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 800a03a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a03c:	4a2e      	ldr	r2, [pc, #184]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 800a03e:	f043 0304 	orr.w	r3, r3, #4
 800a042:	6313      	str	r3, [r2, #48]	@ 0x30
 800a044:	4b2c      	ldr	r3, [pc, #176]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 800a046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a048:	f003 0304 	and.w	r3, r3, #4
 800a04c:	617b      	str	r3, [r7, #20]
 800a04e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a050:	2300      	movs	r3, #0
 800a052:	613b      	str	r3, [r7, #16]
 800a054:	4b28      	ldr	r3, [pc, #160]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 800a056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a058:	4a27      	ldr	r2, [pc, #156]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 800a05a:	f043 0301 	orr.w	r3, r3, #1
 800a05e:	6313      	str	r3, [r2, #48]	@ 0x30
 800a060:	4b25      	ldr	r3, [pc, #148]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 800a062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a064:	f003 0301 	and.w	r3, r3, #1
 800a068:	613b      	str	r3, [r7, #16]
 800a06a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a06c:	2300      	movs	r3, #0
 800a06e:	60fb      	str	r3, [r7, #12]
 800a070:	4b21      	ldr	r3, [pc, #132]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 800a072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a074:	4a20      	ldr	r2, [pc, #128]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 800a076:	f043 0302 	orr.w	r3, r3, #2
 800a07a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a07c:	4b1e      	ldr	r3, [pc, #120]	@ (800a0f8 <HAL_ETH_MspInit+0x13c>)
 800a07e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a080:	f003 0302 	and.w	r3, r3, #2
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a088:	2332      	movs	r3, #50	@ 0x32
 800a08a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a08c:	2302      	movs	r3, #2
 800a08e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a090:	2300      	movs	r3, #0
 800a092:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a094:	2303      	movs	r3, #3
 800a096:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a098:	230b      	movs	r3, #11
 800a09a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a09c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	4816      	ldr	r0, [pc, #88]	@ (800a0fc <HAL_ETH_MspInit+0x140>)
 800a0a4:	f7fc fae4 	bl	8006670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a0a8:	2386      	movs	r3, #134	@ 0x86
 800a0aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a0b8:	230b      	movs	r3, #11
 800a0ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	480f      	ldr	r0, [pc, #60]	@ (800a100 <HAL_ETH_MspInit+0x144>)
 800a0c4:	f7fc fad4 	bl	8006670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800a0c8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800a0cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a0da:	230b      	movs	r3, #11
 800a0dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	4807      	ldr	r0, [pc, #28]	@ (800a104 <HAL_ETH_MspInit+0x148>)
 800a0e6:	f7fc fac3 	bl	8006670 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a0ea:	bf00      	nop
 800a0ec:	3738      	adds	r7, #56	@ 0x38
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	40028000 	.word	0x40028000
 800a0f8:	40023800 	.word	0x40023800
 800a0fc:	40020800 	.word	0x40020800
 800a100:	40020000 	.word	0x40020000
 800a104:	40020400 	.word	0x40020400

0800a108 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a10c:	4802      	ldr	r0, [pc, #8]	@ (800a118 <ETH_PHY_IO_Init+0x10>)
 800a10e:	f7fb fe4b 	bl	8005da8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	bd80      	pop	{r7, pc}
 800a118:	200058d4 	.word	0x200058d4

0800a11c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a11c:	b480      	push	{r7}
 800a11e:	af00      	add	r7, sp, #0
  return 0;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	68f9      	ldr	r1, [r7, #12]
 800a13e:	4807      	ldr	r0, [pc, #28]	@ (800a15c <ETH_PHY_IO_ReadReg+0x30>)
 800a140:	f7fb fc8d 	bl	8005a5e <HAL_ETH_ReadPHYRegister>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d002      	beq.n	800a150 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a14a:	f04f 33ff 	mov.w	r3, #4294967295
 800a14e:	e000      	b.n	800a152 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	200058d4 	.word	0x200058d4

0800a160 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	68f9      	ldr	r1, [r7, #12]
 800a172:	4807      	ldr	r0, [pc, #28]	@ (800a190 <ETH_PHY_IO_WriteReg+0x30>)
 800a174:	f7fb fcbe 	bl	8005af4 <HAL_ETH_WritePHYRegister>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d002      	beq.n	800a184 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a17e:	f04f 33ff 	mov.w	r3, #4294967295
 800a182:	e000      	b.n	800a186 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	200058d4 	.word	0x200058d4

0800a194 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a198:	f7fa f888 	bl	80042ac <HAL_GetTick>
 800a19c:	4603      	mov	r3, r0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	bd80      	pop	{r7, pc}
	...

0800a1a4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b0a0      	sub	sp, #128	@ 0x80
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a1ac:	f107 030c 	add.w	r3, r7, #12
 800a1b0:	2264      	movs	r2, #100	@ 0x64
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f00a fb22 	bl	80147fe <memset>
  int32_t PHYLinkState = 0;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a1ca:	483a      	ldr	r0, [pc, #232]	@ (800a2b4 <ethernet_link_check_state+0x110>)
 800a1cc:	f7f9 ff80 	bl	80040d0 <LAN8742_GetLinkState>
 800a1d0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a1d8:	089b      	lsrs	r3, r3, #2
 800a1da:	f003 0301 	and.w	r3, r3, #1
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00c      	beq.n	800a1fe <ethernet_link_check_state+0x5a>
 800a1e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	dc09      	bgt.n	800a1fe <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800a1ea:	4833      	ldr	r0, [pc, #204]	@ (800a2b8 <ethernet_link_check_state+0x114>)
 800a1ec:	f7fb fa07 	bl	80055fe <HAL_ETH_Stop>
    netif_set_down(netif);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f001 f81b 	bl	800b22c <netif_set_down>
    netif_set_link_down(netif);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f001 f87e 	bl	800b2f8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800a1fc:	e055      	b.n	800a2aa <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a204:	f003 0304 	and.w	r3, r3, #4
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d14e      	bne.n	800a2aa <ethernet_link_check_state+0x106>
 800a20c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a20e:	2b01      	cmp	r3, #1
 800a210:	dd4b      	ble.n	800a2aa <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800a212:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a214:	3b02      	subs	r3, #2
 800a216:	2b03      	cmp	r3, #3
 800a218:	d82a      	bhi.n	800a270 <ethernet_link_check_state+0xcc>
 800a21a:	a201      	add	r2, pc, #4	@ (adr r2, 800a220 <ethernet_link_check_state+0x7c>)
 800a21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a220:	0800a231 	.word	0x0800a231
 800a224:	0800a243 	.word	0x0800a243
 800a228:	0800a253 	.word	0x0800a253
 800a22c:	0800a263 	.word	0x0800a263
      duplex = ETH_FULLDUPLEX_MODE;
 800a230:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a234:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a236:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a23a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a23c:	2301      	movs	r3, #1
 800a23e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a240:	e017      	b.n	800a272 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a242:	2300      	movs	r3, #0
 800a244:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a246:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a24a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a24c:	2301      	movs	r3, #1
 800a24e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a250:	e00f      	b.n	800a272 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800a252:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a256:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a258:	2300      	movs	r3, #0
 800a25a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a25c:	2301      	movs	r3, #1
 800a25e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a260:	e007      	b.n	800a272 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a262:	2300      	movs	r3, #0
 800a264:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a266:	2300      	movs	r3, #0
 800a268:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a26a:	2301      	movs	r3, #1
 800a26c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a26e:	e000      	b.n	800a272 <ethernet_link_check_state+0xce>
      break;
 800a270:	bf00      	nop
    if(linkchanged)
 800a272:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a274:	2b00      	cmp	r3, #0
 800a276:	d018      	beq.n	800a2aa <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a278:	f107 030c 	add.w	r3, r7, #12
 800a27c:	4619      	mov	r1, r3
 800a27e:	480e      	ldr	r0, [pc, #56]	@ (800a2b8 <ethernet_link_check_state+0x114>)
 800a280:	f7fb fc81 	bl	8005b86 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a284:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a286:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800a288:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a28a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a28c:	f107 030c 	add.w	r3, r7, #12
 800a290:	4619      	mov	r1, r3
 800a292:	4809      	ldr	r0, [pc, #36]	@ (800a2b8 <ethernet_link_check_state+0x114>)
 800a294:	f7fb fd6e 	bl	8005d74 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800a298:	4807      	ldr	r0, [pc, #28]	@ (800a2b8 <ethernet_link_check_state+0x114>)
 800a29a:	f7fb f951 	bl	8005540 <HAL_ETH_Start>
      netif_set_up(netif);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 ff58 	bl	800b154 <netif_set_up>
      netif_set_link_up(netif);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fff3 	bl	800b290 <netif_set_link_up>
}
 800a2aa:	bf00      	nop
 800a2ac:	3780      	adds	r7, #128	@ 0x80
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	200059bc 	.word	0x200059bc
 800a2b8:	200058d4 	.word	0x200058d4

0800a2bc <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af02      	add	r7, sp, #8
 800a2c2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a2c4:	4812      	ldr	r0, [pc, #72]	@ (800a310 <HAL_ETH_RxAllocateCallback+0x54>)
 800a2c6:	f000 fcbf 	bl	800ac48 <memp_malloc_pool>
 800a2ca:	60f8      	str	r0, [r7, #12]
  if (p)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d014      	beq.n	800a2fc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f103 0220 	add.w	r2, r3, #32
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	4a0d      	ldr	r2, [pc, #52]	@ (800a314 <HAL_ETH_RxAllocateCallback+0x58>)
 800a2e0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a2ea:	9201      	str	r2, [sp, #4]
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2241      	movs	r2, #65	@ 0x41
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	f001 f9f5 	bl	800b6e4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a2fa:	e005      	b.n	800a308 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a2fc:	4b06      	ldr	r3, [pc, #24]	@ (800a318 <HAL_ETH_RxAllocateCallback+0x5c>)
 800a2fe:	2201      	movs	r2, #1
 800a300:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	601a      	str	r2, [r3, #0]
}
 800a308:	bf00      	nop
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	08017f5c 	.word	0x08017f5c
 800a314:	08009f79 	.word	0x08009f79
 800a318:	20005790 	.word	0x20005790

0800a31c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b089      	sub	sp, #36	@ 0x24
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a332:	2300      	movs	r3, #0
 800a334:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	3b20      	subs	r3, #32
 800a33a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	2200      	movs	r2, #0
 800a340:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	2200      	movs	r2, #0
 800a346:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	887a      	ldrh	r2, [r7, #2]
 800a34c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d103      	bne.n	800a35e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	69fa      	ldr	r2, [r7, #28]
 800a35a:	601a      	str	r2, [r3, #0]
 800a35c:	e003      	b.n	800a366 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	69fa      	ldr	r2, [r7, #28]
 800a364:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	69fa      	ldr	r2, [r7, #28]
 800a36a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	61fb      	str	r3, [r7, #28]
 800a372:	e009      	b.n	800a388 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	891a      	ldrh	r2, [r3, #8]
 800a378:	887b      	ldrh	r3, [r7, #2]
 800a37a:	4413      	add	r3, r2
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	61fb      	str	r3, [r7, #28]
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1f2      	bne.n	800a374 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800a38e:	bf00      	nop
 800a390:	bf00      	nop
 800a392:	3724      	adds	r7, #36	@ 0x24
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a3a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3aa:	021b      	lsls	r3, r3, #8
 800a3ac:	b21a      	sxth	r2, r3
 800a3ae:	88fb      	ldrh	r3, [r7, #6]
 800a3b0:	0a1b      	lsrs	r3, r3, #8
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	b21b      	sxth	r3, r3
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	b21b      	sxth	r3, r3
 800a3ba:	b29b      	uxth	r3, r3
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	061a      	lsls	r2, r3, #24
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	021b      	lsls	r3, r3, #8
 800a3d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a3dc:	431a      	orrs	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	0a1b      	lsrs	r3, r3, #8
 800a3e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a3e6:	431a      	orrs	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	0e1b      	lsrs	r3, r3, #24
 800a3ec:	4313      	orrs	r3, r2
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a400:	2300      	movs	r3, #0
 800a402:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a404:	f000 f8d4 	bl	800a5b0 <mem_init>
  memp_init();
 800a408:	f000 fbda 	bl	800abc0 <memp_init>
  pbuf_init();
  netif_init();
 800a40c:	f000 fcd8 	bl	800adc0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a410:	f007 f8f4 	bl	80115fc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a414:	f001 fe50 	bl	800c0b8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a418:	f007 f866 	bl	80114e8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a41c:	bf00      	nop
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	4603      	mov	r3, r0
 800a42c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a42e:	4b05      	ldr	r3, [pc, #20]	@ (800a444 <ptr_to_mem+0x20>)
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	88fb      	ldrh	r3, [r7, #6]
 800a434:	4413      	add	r3, r2
}
 800a436:	4618      	mov	r0, r3
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	20008208 	.word	0x20008208

0800a448 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a450:	4b05      	ldr	r3, [pc, #20]	@ (800a468 <mem_to_ptr+0x20>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	b29b      	uxth	r3, r3
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	20008208 	.word	0x20008208

0800a46c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a46c:	b590      	push	{r4, r7, lr}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a474:	4b45      	ldr	r3, [pc, #276]	@ (800a58c <plug_holes+0x120>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d206      	bcs.n	800a48c <plug_holes+0x20>
 800a47e:	4b44      	ldr	r3, [pc, #272]	@ (800a590 <plug_holes+0x124>)
 800a480:	f240 12df 	movw	r2, #479	@ 0x1df
 800a484:	4943      	ldr	r1, [pc, #268]	@ (800a594 <plug_holes+0x128>)
 800a486:	4844      	ldr	r0, [pc, #272]	@ (800a598 <plug_holes+0x12c>)
 800a488:	f00a f954 	bl	8014734 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a48c:	4b43      	ldr	r3, [pc, #268]	@ (800a59c <plug_holes+0x130>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	429a      	cmp	r2, r3
 800a494:	d306      	bcc.n	800a4a4 <plug_holes+0x38>
 800a496:	4b3e      	ldr	r3, [pc, #248]	@ (800a590 <plug_holes+0x124>)
 800a498:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a49c:	4940      	ldr	r1, [pc, #256]	@ (800a5a0 <plug_holes+0x134>)
 800a49e:	483e      	ldr	r0, [pc, #248]	@ (800a598 <plug_holes+0x12c>)
 800a4a0:	f00a f948 	bl	8014734 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	791b      	ldrb	r3, [r3, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d006      	beq.n	800a4ba <plug_holes+0x4e>
 800a4ac:	4b38      	ldr	r3, [pc, #224]	@ (800a590 <plug_holes+0x124>)
 800a4ae:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a4b2:	493c      	ldr	r1, [pc, #240]	@ (800a5a4 <plug_holes+0x138>)
 800a4b4:	4838      	ldr	r0, [pc, #224]	@ (800a598 <plug_holes+0x12c>)
 800a4b6:	f00a f93d 	bl	8014734 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a4c2:	d906      	bls.n	800a4d2 <plug_holes+0x66>
 800a4c4:	4b32      	ldr	r3, [pc, #200]	@ (800a590 <plug_holes+0x124>)
 800a4c6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a4ca:	4937      	ldr	r1, [pc, #220]	@ (800a5a8 <plug_holes+0x13c>)
 800a4cc:	4832      	ldr	r0, [pc, #200]	@ (800a598 <plug_holes+0x12c>)
 800a4ce:	f00a f931 	bl	8014734 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	881b      	ldrh	r3, [r3, #0]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7ff ffa4 	bl	800a424 <ptr_to_mem>
 800a4dc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d024      	beq.n	800a530 <plug_holes+0xc4>
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	791b      	ldrb	r3, [r3, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d120      	bne.n	800a530 <plug_holes+0xc4>
 800a4ee:	4b2b      	ldr	r3, [pc, #172]	@ (800a59c <plug_holes+0x130>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d01b      	beq.n	800a530 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a4f8:	4b2c      	ldr	r3, [pc, #176]	@ (800a5ac <plug_holes+0x140>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d102      	bne.n	800a508 <plug_holes+0x9c>
      lfree = mem;
 800a502:	4a2a      	ldr	r2, [pc, #168]	@ (800a5ac <plug_holes+0x140>)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	881a      	ldrh	r2, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	881b      	ldrh	r3, [r3, #0]
 800a514:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a518:	d00a      	beq.n	800a530 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	881b      	ldrh	r3, [r3, #0]
 800a51e:	4618      	mov	r0, r3
 800a520:	f7ff ff80 	bl	800a424 <ptr_to_mem>
 800a524:	4604      	mov	r4, r0
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7ff ff8e 	bl	800a448 <mem_to_ptr>
 800a52c:	4603      	mov	r3, r0
 800a52e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	885b      	ldrh	r3, [r3, #2]
 800a534:	4618      	mov	r0, r3
 800a536:	f7ff ff75 	bl	800a424 <ptr_to_mem>
 800a53a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	429a      	cmp	r2, r3
 800a542:	d01f      	beq.n	800a584 <plug_holes+0x118>
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	791b      	ldrb	r3, [r3, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d11b      	bne.n	800a584 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a54c:	4b17      	ldr	r3, [pc, #92]	@ (800a5ac <plug_holes+0x140>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	429a      	cmp	r2, r3
 800a554:	d102      	bne.n	800a55c <plug_holes+0xf0>
      lfree = pmem;
 800a556:	4a15      	ldr	r2, [pc, #84]	@ (800a5ac <plug_holes+0x140>)
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	881a      	ldrh	r2, [r3, #0]
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a56c:	d00a      	beq.n	800a584 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	881b      	ldrh	r3, [r3, #0]
 800a572:	4618      	mov	r0, r3
 800a574:	f7ff ff56 	bl	800a424 <ptr_to_mem>
 800a578:	4604      	mov	r4, r0
 800a57a:	68b8      	ldr	r0, [r7, #8]
 800a57c:	f7ff ff64 	bl	800a448 <mem_to_ptr>
 800a580:	4603      	mov	r3, r0
 800a582:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a584:	bf00      	nop
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd90      	pop	{r4, r7, pc}
 800a58c:	20008208 	.word	0x20008208
 800a590:	080155b0 	.word	0x080155b0
 800a594:	080155e0 	.word	0x080155e0
 800a598:	080155f8 	.word	0x080155f8
 800a59c:	2000820c 	.word	0x2000820c
 800a5a0:	08015620 	.word	0x08015620
 800a5a4:	0801563c 	.word	0x0801563c
 800a5a8:	08015658 	.word	0x08015658
 800a5ac:	20008210 	.word	0x20008210

0800a5b0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a5b6:	4b18      	ldr	r3, [pc, #96]	@ (800a618 <mem_init+0x68>)
 800a5b8:	3303      	adds	r3, #3
 800a5ba:	f023 0303 	bic.w	r3, r3, #3
 800a5be:	461a      	mov	r2, r3
 800a5c0:	4b16      	ldr	r3, [pc, #88]	@ (800a61c <mem_init+0x6c>)
 800a5c2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a5c4:	4b15      	ldr	r3, [pc, #84]	@ (800a61c <mem_init+0x6c>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800a5d0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a5de:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800a5e2:	f7ff ff1f 	bl	800a424 <ptr_to_mem>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	4a0d      	ldr	r2, [pc, #52]	@ (800a620 <mem_init+0x70>)
 800a5ea:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a5ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a620 <mem_init+0x70>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a5f4:	4b0a      	ldr	r3, [pc, #40]	@ (800a620 <mem_init+0x70>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800a5fc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a5fe:	4b08      	ldr	r3, [pc, #32]	@ (800a620 <mem_init+0x70>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800a606:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a608:	4b04      	ldr	r3, [pc, #16]	@ (800a61c <mem_init+0x6c>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a05      	ldr	r2, [pc, #20]	@ (800a624 <mem_init+0x74>)
 800a60e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a610:	bf00      	nop
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	200059f4 	.word	0x200059f4
 800a61c:	20008208 	.word	0x20008208
 800a620:	2000820c 	.word	0x2000820c
 800a624:	20008210 	.word	0x20008210

0800a628 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b086      	sub	sp, #24
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f7ff ff09 	bl	800a448 <mem_to_ptr>
 800a636:	4603      	mov	r3, r0
 800a638:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	881b      	ldrh	r3, [r3, #0]
 800a63e:	4618      	mov	r0, r3
 800a640:	f7ff fef0 	bl	800a424 <ptr_to_mem>
 800a644:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	885b      	ldrh	r3, [r3, #2]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff feea 	bl	800a424 <ptr_to_mem>
 800a650:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	881b      	ldrh	r3, [r3, #0]
 800a656:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a65a:	d818      	bhi.n	800a68e <mem_link_valid+0x66>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	885b      	ldrh	r3, [r3, #2]
 800a660:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a664:	d813      	bhi.n	800a68e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a66a:	8afa      	ldrh	r2, [r7, #22]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d004      	beq.n	800a67a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	881b      	ldrh	r3, [r3, #0]
 800a674:	8afa      	ldrh	r2, [r7, #22]
 800a676:	429a      	cmp	r2, r3
 800a678:	d109      	bne.n	800a68e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a67a:	4b08      	ldr	r3, [pc, #32]	@ (800a69c <mem_link_valid+0x74>)
 800a67c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a67e:	693a      	ldr	r2, [r7, #16]
 800a680:	429a      	cmp	r2, r3
 800a682:	d006      	beq.n	800a692 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	885b      	ldrh	r3, [r3, #2]
 800a688:	8afa      	ldrh	r2, [r7, #22]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d001      	beq.n	800a692 <mem_link_valid+0x6a>
    return 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	e000      	b.n	800a694 <mem_link_valid+0x6c>
  }
  return 1;
 800a692:	2301      	movs	r3, #1
}
 800a694:	4618      	mov	r0, r3
 800a696:	3718      	adds	r7, #24
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	2000820c 	.word	0x2000820c

0800a6a0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d04c      	beq.n	800a748 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f003 0303 	and.w	r3, r3, #3
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d007      	beq.n	800a6c8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a6b8:	4b25      	ldr	r3, [pc, #148]	@ (800a750 <mem_free+0xb0>)
 800a6ba:	f240 2273 	movw	r2, #627	@ 0x273
 800a6be:	4925      	ldr	r1, [pc, #148]	@ (800a754 <mem_free+0xb4>)
 800a6c0:	4825      	ldr	r0, [pc, #148]	@ (800a758 <mem_free+0xb8>)
 800a6c2:	f00a f837 	bl	8014734 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a6c6:	e040      	b.n	800a74a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	3b08      	subs	r3, #8
 800a6cc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a6ce:	4b23      	ldr	r3, [pc, #140]	@ (800a75c <mem_free+0xbc>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d306      	bcc.n	800a6e6 <mem_free+0x46>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f103 020c 	add.w	r2, r3, #12
 800a6de:	4b20      	ldr	r3, [pc, #128]	@ (800a760 <mem_free+0xc0>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d907      	bls.n	800a6f6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a6e6:	4b1a      	ldr	r3, [pc, #104]	@ (800a750 <mem_free+0xb0>)
 800a6e8:	f240 227f 	movw	r2, #639	@ 0x27f
 800a6ec:	491d      	ldr	r1, [pc, #116]	@ (800a764 <mem_free+0xc4>)
 800a6ee:	481a      	ldr	r0, [pc, #104]	@ (800a758 <mem_free+0xb8>)
 800a6f0:	f00a f820 	bl	8014734 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a6f4:	e029      	b.n	800a74a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	791b      	ldrb	r3, [r3, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d107      	bne.n	800a70e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a6fe:	4b14      	ldr	r3, [pc, #80]	@ (800a750 <mem_free+0xb0>)
 800a700:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a704:	4918      	ldr	r1, [pc, #96]	@ (800a768 <mem_free+0xc8>)
 800a706:	4814      	ldr	r0, [pc, #80]	@ (800a758 <mem_free+0xb8>)
 800a708:	f00a f814 	bl	8014734 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a70c:	e01d      	b.n	800a74a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f7ff ff8a 	bl	800a628 <mem_link_valid>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d107      	bne.n	800a72a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a71a:	4b0d      	ldr	r3, [pc, #52]	@ (800a750 <mem_free+0xb0>)
 800a71c:	f240 2295 	movw	r2, #661	@ 0x295
 800a720:	4912      	ldr	r1, [pc, #72]	@ (800a76c <mem_free+0xcc>)
 800a722:	480d      	ldr	r0, [pc, #52]	@ (800a758 <mem_free+0xb8>)
 800a724:	f00a f806 	bl	8014734 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a728:	e00f      	b.n	800a74a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a730:	4b0f      	ldr	r3, [pc, #60]	@ (800a770 <mem_free+0xd0>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	429a      	cmp	r2, r3
 800a738:	d202      	bcs.n	800a740 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a73a:	4a0d      	ldr	r2, [pc, #52]	@ (800a770 <mem_free+0xd0>)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f7ff fe93 	bl	800a46c <plug_holes>
 800a746:	e000      	b.n	800a74a <mem_free+0xaa>
    return;
 800a748:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	080155b0 	.word	0x080155b0
 800a754:	08015684 	.word	0x08015684
 800a758:	080155f8 	.word	0x080155f8
 800a75c:	20008208 	.word	0x20008208
 800a760:	2000820c 	.word	0x2000820c
 800a764:	080156a8 	.word	0x080156a8
 800a768:	080156c4 	.word	0x080156c4
 800a76c:	080156ec 	.word	0x080156ec
 800a770:	20008210 	.word	0x20008210

0800a774 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b088      	sub	sp, #32
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	460b      	mov	r3, r1
 800a77e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a780:	887b      	ldrh	r3, [r7, #2]
 800a782:	3303      	adds	r3, #3
 800a784:	b29b      	uxth	r3, r3
 800a786:	f023 0303 	bic.w	r3, r3, #3
 800a78a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a78c:	8bfb      	ldrh	r3, [r7, #30]
 800a78e:	2b0b      	cmp	r3, #11
 800a790:	d801      	bhi.n	800a796 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a792:	230c      	movs	r3, #12
 800a794:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a796:	8bfb      	ldrh	r3, [r7, #30]
 800a798:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a79c:	d803      	bhi.n	800a7a6 <mem_trim+0x32>
 800a79e:	8bfa      	ldrh	r2, [r7, #30]
 800a7a0:	887b      	ldrh	r3, [r7, #2]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d201      	bcs.n	800a7aa <mem_trim+0x36>
    return NULL;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e0cc      	b.n	800a944 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a7aa:	4b68      	ldr	r3, [pc, #416]	@ (800a94c <mem_trim+0x1d8>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d304      	bcc.n	800a7be <mem_trim+0x4a>
 800a7b4:	4b66      	ldr	r3, [pc, #408]	@ (800a950 <mem_trim+0x1dc>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d306      	bcc.n	800a7cc <mem_trim+0x58>
 800a7be:	4b65      	ldr	r3, [pc, #404]	@ (800a954 <mem_trim+0x1e0>)
 800a7c0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a7c4:	4964      	ldr	r1, [pc, #400]	@ (800a958 <mem_trim+0x1e4>)
 800a7c6:	4865      	ldr	r0, [pc, #404]	@ (800a95c <mem_trim+0x1e8>)
 800a7c8:	f009 ffb4 	bl	8014734 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a7cc:	4b5f      	ldr	r3, [pc, #380]	@ (800a94c <mem_trim+0x1d8>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d304      	bcc.n	800a7e0 <mem_trim+0x6c>
 800a7d6:	4b5e      	ldr	r3, [pc, #376]	@ (800a950 <mem_trim+0x1dc>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d301      	bcc.n	800a7e4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	e0af      	b.n	800a944 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	3b08      	subs	r3, #8
 800a7e8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a7ea:	69b8      	ldr	r0, [r7, #24]
 800a7ec:	f7ff fe2c 	bl	800a448 <mem_to_ptr>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	881a      	ldrh	r2, [r3, #0]
 800a7f8:	8afb      	ldrh	r3, [r7, #22]
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	3b08      	subs	r3, #8
 800a800:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a802:	8bfa      	ldrh	r2, [r7, #30]
 800a804:	8abb      	ldrh	r3, [r7, #20]
 800a806:	429a      	cmp	r2, r3
 800a808:	d906      	bls.n	800a818 <mem_trim+0xa4>
 800a80a:	4b52      	ldr	r3, [pc, #328]	@ (800a954 <mem_trim+0x1e0>)
 800a80c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800a810:	4953      	ldr	r1, [pc, #332]	@ (800a960 <mem_trim+0x1ec>)
 800a812:	4852      	ldr	r0, [pc, #328]	@ (800a95c <mem_trim+0x1e8>)
 800a814:	f009 ff8e 	bl	8014734 <iprintf>
  if (newsize > size) {
 800a818:	8bfa      	ldrh	r2, [r7, #30]
 800a81a:	8abb      	ldrh	r3, [r7, #20]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d901      	bls.n	800a824 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a820:	2300      	movs	r3, #0
 800a822:	e08f      	b.n	800a944 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a824:	8bfa      	ldrh	r2, [r7, #30]
 800a826:	8abb      	ldrh	r3, [r7, #20]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d101      	bne.n	800a830 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	e089      	b.n	800a944 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	881b      	ldrh	r3, [r3, #0]
 800a834:	4618      	mov	r0, r3
 800a836:	f7ff fdf5 	bl	800a424 <ptr_to_mem>
 800a83a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	791b      	ldrb	r3, [r3, #4]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d13f      	bne.n	800a8c4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a84c:	d106      	bne.n	800a85c <mem_trim+0xe8>
 800a84e:	4b41      	ldr	r3, [pc, #260]	@ (800a954 <mem_trim+0x1e0>)
 800a850:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a854:	4943      	ldr	r1, [pc, #268]	@ (800a964 <mem_trim+0x1f0>)
 800a856:	4841      	ldr	r0, [pc, #260]	@ (800a95c <mem_trim+0x1e8>)
 800a858:	f009 ff6c 	bl	8014734 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	881b      	ldrh	r3, [r3, #0]
 800a860:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a862:	8afa      	ldrh	r2, [r7, #22]
 800a864:	8bfb      	ldrh	r3, [r7, #30]
 800a866:	4413      	add	r3, r2
 800a868:	b29b      	uxth	r3, r3
 800a86a:	3308      	adds	r3, #8
 800a86c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a86e:	4b3e      	ldr	r3, [pc, #248]	@ (800a968 <mem_trim+0x1f4>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	429a      	cmp	r2, r3
 800a876:	d106      	bne.n	800a886 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a878:	89fb      	ldrh	r3, [r7, #14]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7ff fdd2 	bl	800a424 <ptr_to_mem>
 800a880:	4603      	mov	r3, r0
 800a882:	4a39      	ldr	r2, [pc, #228]	@ (800a968 <mem_trim+0x1f4>)
 800a884:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a886:	89fb      	ldrh	r3, [r7, #14]
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff fdcb 	bl	800a424 <ptr_to_mem>
 800a88e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	2200      	movs	r2, #0
 800a894:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	89ba      	ldrh	r2, [r7, #12]
 800a89a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	8afa      	ldrh	r2, [r7, #22]
 800a8a0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	89fa      	ldrh	r2, [r7, #14]
 800a8a6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a8b0:	d047      	beq.n	800a942 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	881b      	ldrh	r3, [r3, #0]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7ff fdb4 	bl	800a424 <ptr_to_mem>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	89fb      	ldrh	r3, [r7, #14]
 800a8c0:	8053      	strh	r3, [r2, #2]
 800a8c2:	e03e      	b.n	800a942 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a8c4:	8bfb      	ldrh	r3, [r7, #30]
 800a8c6:	f103 0214 	add.w	r2, r3, #20
 800a8ca:	8abb      	ldrh	r3, [r7, #20]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d838      	bhi.n	800a942 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a8d0:	8afa      	ldrh	r2, [r7, #22]
 800a8d2:	8bfb      	ldrh	r3, [r7, #30]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	3308      	adds	r3, #8
 800a8da:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	881b      	ldrh	r3, [r3, #0]
 800a8e0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a8e4:	d106      	bne.n	800a8f4 <mem_trim+0x180>
 800a8e6:	4b1b      	ldr	r3, [pc, #108]	@ (800a954 <mem_trim+0x1e0>)
 800a8e8:	f240 3216 	movw	r2, #790	@ 0x316
 800a8ec:	491d      	ldr	r1, [pc, #116]	@ (800a964 <mem_trim+0x1f0>)
 800a8ee:	481b      	ldr	r0, [pc, #108]	@ (800a95c <mem_trim+0x1e8>)
 800a8f0:	f009 ff20 	bl	8014734 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a8f4:	89fb      	ldrh	r3, [r7, #14]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff fd94 	bl	800a424 <ptr_to_mem>
 800a8fc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a8fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a968 <mem_trim+0x1f4>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	693a      	ldr	r2, [r7, #16]
 800a904:	429a      	cmp	r2, r3
 800a906:	d202      	bcs.n	800a90e <mem_trim+0x19a>
      lfree = mem2;
 800a908:	4a17      	ldr	r2, [pc, #92]	@ (800a968 <mem_trim+0x1f4>)
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	2200      	movs	r2, #0
 800a912:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	881a      	ldrh	r2, [r3, #0]
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	8afa      	ldrh	r2, [r7, #22]
 800a920:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	89fa      	ldrh	r2, [r7, #14]
 800a926:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a930:	d007      	beq.n	800a942 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	881b      	ldrh	r3, [r3, #0]
 800a936:	4618      	mov	r0, r3
 800a938:	f7ff fd74 	bl	800a424 <ptr_to_mem>
 800a93c:	4602      	mov	r2, r0
 800a93e:	89fb      	ldrh	r3, [r7, #14]
 800a940:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a942:	687b      	ldr	r3, [r7, #4]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3720      	adds	r7, #32
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	20008208 	.word	0x20008208
 800a950:	2000820c 	.word	0x2000820c
 800a954:	080155b0 	.word	0x080155b0
 800a958:	08015720 	.word	0x08015720
 800a95c:	080155f8 	.word	0x080155f8
 800a960:	08015738 	.word	0x08015738
 800a964:	08015758 	.word	0x08015758
 800a968:	20008210 	.word	0x20008210

0800a96c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af00      	add	r7, sp, #0
 800a972:	4603      	mov	r3, r0
 800a974:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a976:	88fb      	ldrh	r3, [r7, #6]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <mem_malloc+0x14>
    return NULL;
 800a97c:	2300      	movs	r3, #0
 800a97e:	e0d9      	b.n	800ab34 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a980:	88fb      	ldrh	r3, [r7, #6]
 800a982:	3303      	adds	r3, #3
 800a984:	b29b      	uxth	r3, r3
 800a986:	f023 0303 	bic.w	r3, r3, #3
 800a98a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a98c:	8bbb      	ldrh	r3, [r7, #28]
 800a98e:	2b0b      	cmp	r3, #11
 800a990:	d801      	bhi.n	800a996 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a992:	230c      	movs	r3, #12
 800a994:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a996:	8bbb      	ldrh	r3, [r7, #28]
 800a998:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a99c:	d803      	bhi.n	800a9a6 <mem_malloc+0x3a>
 800a99e:	8bba      	ldrh	r2, [r7, #28]
 800a9a0:	88fb      	ldrh	r3, [r7, #6]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d201      	bcs.n	800a9aa <mem_malloc+0x3e>
    return NULL;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	e0c4      	b.n	800ab34 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a9aa:	4b64      	ldr	r3, [pc, #400]	@ (800ab3c <mem_malloc+0x1d0>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7ff fd4a 	bl	800a448 <mem_to_ptr>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	83fb      	strh	r3, [r7, #30]
 800a9b8:	e0b4      	b.n	800ab24 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a9ba:	8bfb      	ldrh	r3, [r7, #30]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7ff fd31 	bl	800a424 <ptr_to_mem>
 800a9c2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	791b      	ldrb	r3, [r3, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f040 80a4 	bne.w	800ab16 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	881b      	ldrh	r3, [r3, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	8bfb      	ldrh	r3, [r7, #30]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	f1a3 0208 	sub.w	r2, r3, #8
 800a9dc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	f0c0 8099 	bcc.w	800ab16 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	881b      	ldrh	r3, [r3, #0]
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	8bfb      	ldrh	r3, [r7, #30]
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	f1a3 0208 	sub.w	r2, r3, #8
 800a9f2:	8bbb      	ldrh	r3, [r7, #28]
 800a9f4:	3314      	adds	r3, #20
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d333      	bcc.n	800aa62 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a9fa:	8bfa      	ldrh	r2, [r7, #30]
 800a9fc:	8bbb      	ldrh	r3, [r7, #28]
 800a9fe:	4413      	add	r3, r2
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	3308      	adds	r3, #8
 800aa04:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aa06:	8a7b      	ldrh	r3, [r7, #18]
 800aa08:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800aa0c:	d106      	bne.n	800aa1c <mem_malloc+0xb0>
 800aa0e:	4b4c      	ldr	r3, [pc, #304]	@ (800ab40 <mem_malloc+0x1d4>)
 800aa10:	f240 3287 	movw	r2, #903	@ 0x387
 800aa14:	494b      	ldr	r1, [pc, #300]	@ (800ab44 <mem_malloc+0x1d8>)
 800aa16:	484c      	ldr	r0, [pc, #304]	@ (800ab48 <mem_malloc+0x1dc>)
 800aa18:	f009 fe8c 	bl	8014734 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800aa1c:	8a7b      	ldrh	r3, [r7, #18]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff fd00 	bl	800a424 <ptr_to_mem>
 800aa24:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	881a      	ldrh	r2, [r3, #0]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	8bfa      	ldrh	r2, [r7, #30]
 800aa38:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	8a7a      	ldrh	r2, [r7, #18]
 800aa3e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	2201      	movs	r2, #1
 800aa44:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	881b      	ldrh	r3, [r3, #0]
 800aa4a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800aa4e:	d00b      	beq.n	800aa68 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	881b      	ldrh	r3, [r3, #0]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7ff fce5 	bl	800a424 <ptr_to_mem>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	8a7b      	ldrh	r3, [r7, #18]
 800aa5e:	8053      	strh	r3, [r2, #2]
 800aa60:	e002      	b.n	800aa68 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	2201      	movs	r2, #1
 800aa66:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800aa68:	4b34      	ldr	r3, [pc, #208]	@ (800ab3c <mem_malloc+0x1d0>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d127      	bne.n	800aac2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800aa72:	4b32      	ldr	r3, [pc, #200]	@ (800ab3c <mem_malloc+0x1d0>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800aa78:	e005      	b.n	800aa86 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	881b      	ldrh	r3, [r3, #0]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7ff fcd0 	bl	800a424 <ptr_to_mem>
 800aa84:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	791b      	ldrb	r3, [r3, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d004      	beq.n	800aa98 <mem_malloc+0x12c>
 800aa8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ab4c <mem_malloc+0x1e0>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	69ba      	ldr	r2, [r7, #24]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d1f0      	bne.n	800aa7a <mem_malloc+0x10e>
          }
          lfree = cur;
 800aa98:	4a28      	ldr	r2, [pc, #160]	@ (800ab3c <mem_malloc+0x1d0>)
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800aa9e:	4b27      	ldr	r3, [pc, #156]	@ (800ab3c <mem_malloc+0x1d0>)
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	4b2a      	ldr	r3, [pc, #168]	@ (800ab4c <mem_malloc+0x1e0>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d00b      	beq.n	800aac2 <mem_malloc+0x156>
 800aaaa:	4b24      	ldr	r3, [pc, #144]	@ (800ab3c <mem_malloc+0x1d0>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	791b      	ldrb	r3, [r3, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d006      	beq.n	800aac2 <mem_malloc+0x156>
 800aab4:	4b22      	ldr	r3, [pc, #136]	@ (800ab40 <mem_malloc+0x1d4>)
 800aab6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800aaba:	4925      	ldr	r1, [pc, #148]	@ (800ab50 <mem_malloc+0x1e4>)
 800aabc:	4822      	ldr	r0, [pc, #136]	@ (800ab48 <mem_malloc+0x1dc>)
 800aabe:	f009 fe39 	bl	8014734 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800aac2:	8bba      	ldrh	r2, [r7, #28]
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	4413      	add	r3, r2
 800aac8:	3308      	adds	r3, #8
 800aaca:	4a20      	ldr	r2, [pc, #128]	@ (800ab4c <mem_malloc+0x1e0>)
 800aacc:	6812      	ldr	r2, [r2, #0]
 800aace:	4293      	cmp	r3, r2
 800aad0:	d906      	bls.n	800aae0 <mem_malloc+0x174>
 800aad2:	4b1b      	ldr	r3, [pc, #108]	@ (800ab40 <mem_malloc+0x1d4>)
 800aad4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800aad8:	491e      	ldr	r1, [pc, #120]	@ (800ab54 <mem_malloc+0x1e8>)
 800aada:	481b      	ldr	r0, [pc, #108]	@ (800ab48 <mem_malloc+0x1dc>)
 800aadc:	f009 fe2a 	bl	8014734 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	f003 0303 	and.w	r3, r3, #3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d006      	beq.n	800aaf8 <mem_malloc+0x18c>
 800aaea:	4b15      	ldr	r3, [pc, #84]	@ (800ab40 <mem_malloc+0x1d4>)
 800aaec:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800aaf0:	4919      	ldr	r1, [pc, #100]	@ (800ab58 <mem_malloc+0x1ec>)
 800aaf2:	4815      	ldr	r0, [pc, #84]	@ (800ab48 <mem_malloc+0x1dc>)
 800aaf4:	f009 fe1e 	bl	8014734 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	f003 0303 	and.w	r3, r3, #3
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d006      	beq.n	800ab10 <mem_malloc+0x1a4>
 800ab02:	4b0f      	ldr	r3, [pc, #60]	@ (800ab40 <mem_malloc+0x1d4>)
 800ab04:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800ab08:	4914      	ldr	r1, [pc, #80]	@ (800ab5c <mem_malloc+0x1f0>)
 800ab0a:	480f      	ldr	r0, [pc, #60]	@ (800ab48 <mem_malloc+0x1dc>)
 800ab0c:	f009 fe12 	bl	8014734 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	3308      	adds	r3, #8
 800ab14:	e00e      	b.n	800ab34 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800ab16:	8bfb      	ldrh	r3, [r7, #30]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7ff fc83 	bl	800a424 <ptr_to_mem>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	881b      	ldrh	r3, [r3, #0]
 800ab22:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ab24:	8bfa      	ldrh	r2, [r7, #30]
 800ab26:	8bbb      	ldrh	r3, [r7, #28]
 800ab28:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	f4ff af44 	bcc.w	800a9ba <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3720      	adds	r7, #32
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	20008210 	.word	0x20008210
 800ab40:	080155b0 	.word	0x080155b0
 800ab44:	08015758 	.word	0x08015758
 800ab48:	080155f8 	.word	0x080155f8
 800ab4c:	2000820c 	.word	0x2000820c
 800ab50:	0801576c 	.word	0x0801576c
 800ab54:	08015788 	.word	0x08015788
 800ab58:	080157b8 	.word	0x080157b8
 800ab5c:	080157e8 	.word	0x080157e8

0800ab60 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	3303      	adds	r3, #3
 800ab76:	f023 0303 	bic.w	r3, r3, #3
 800ab7a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	60fb      	str	r3, [r7, #12]
 800ab80:	e011      	b.n	800aba6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	881b      	ldrh	r3, [r3, #0]
 800ab98:	461a      	mov	r2, r3
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	3301      	adds	r3, #1
 800aba4:	60fb      	str	r3, [r7, #12]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	885b      	ldrh	r3, [r3, #2]
 800abaa:	461a      	mov	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	4293      	cmp	r3, r2
 800abb0:	dbe7      	blt.n	800ab82 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800abb2:	bf00      	nop
 800abb4:	bf00      	nop
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800abc6:	2300      	movs	r3, #0
 800abc8:	80fb      	strh	r3, [r7, #6]
 800abca:	e009      	b.n	800abe0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800abcc:	88fb      	ldrh	r3, [r7, #6]
 800abce:	4a08      	ldr	r2, [pc, #32]	@ (800abf0 <memp_init+0x30>)
 800abd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7ff ffc3 	bl	800ab60 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800abda:	88fb      	ldrh	r3, [r7, #6]
 800abdc:	3301      	adds	r3, #1
 800abde:	80fb      	strh	r3, [r7, #6]
 800abe0:	88fb      	ldrh	r3, [r7, #6]
 800abe2:	2b08      	cmp	r3, #8
 800abe4:	d9f2      	bls.n	800abcc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800abe6:	bf00      	nop
 800abe8:	bf00      	nop
 800abea:	3708      	adds	r7, #8
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	08017fd4 	.word	0x08017fd4

0800abf4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d012      	beq.n	800ac30 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	6812      	ldr	r2, [r2, #0]
 800ac12:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f003 0303 	and.w	r3, r3, #3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d006      	beq.n	800ac2c <do_memp_malloc_pool+0x38>
 800ac1e:	4b07      	ldr	r3, [pc, #28]	@ (800ac3c <do_memp_malloc_pool+0x48>)
 800ac20:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800ac24:	4906      	ldr	r1, [pc, #24]	@ (800ac40 <do_memp_malloc_pool+0x4c>)
 800ac26:	4807      	ldr	r0, [pc, #28]	@ (800ac44 <do_memp_malloc_pool+0x50>)
 800ac28:	f009 fd84 	bl	8014734 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	e000      	b.n	800ac32 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	0801580c 	.word	0x0801580c
 800ac40:	0801583c 	.word	0x0801583c
 800ac44:	08015860 	.word	0x08015860

0800ac48 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d106      	bne.n	800ac64 <memp_malloc_pool+0x1c>
 800ac56:	4b0a      	ldr	r3, [pc, #40]	@ (800ac80 <memp_malloc_pool+0x38>)
 800ac58:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800ac5c:	4909      	ldr	r1, [pc, #36]	@ (800ac84 <memp_malloc_pool+0x3c>)
 800ac5e:	480a      	ldr	r0, [pc, #40]	@ (800ac88 <memp_malloc_pool+0x40>)
 800ac60:	f009 fd68 	bl	8014734 <iprintf>
  if (desc == NULL) {
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d101      	bne.n	800ac6e <memp_malloc_pool+0x26>
    return NULL;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	e003      	b.n	800ac76 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f7ff ffc0 	bl	800abf4 <do_memp_malloc_pool>
 800ac74:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	0801580c 	.word	0x0801580c
 800ac84:	08015888 	.word	0x08015888
 800ac88:	08015860 	.word	0x08015860

0800ac8c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	4603      	mov	r3, r0
 800ac94:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ac96:	79fb      	ldrb	r3, [r7, #7]
 800ac98:	2b08      	cmp	r3, #8
 800ac9a:	d908      	bls.n	800acae <memp_malloc+0x22>
 800ac9c:	4b0a      	ldr	r3, [pc, #40]	@ (800acc8 <memp_malloc+0x3c>)
 800ac9e:	f240 1257 	movw	r2, #343	@ 0x157
 800aca2:	490a      	ldr	r1, [pc, #40]	@ (800accc <memp_malloc+0x40>)
 800aca4:	480a      	ldr	r0, [pc, #40]	@ (800acd0 <memp_malloc+0x44>)
 800aca6:	f009 fd45 	bl	8014734 <iprintf>
 800acaa:	2300      	movs	r3, #0
 800acac:	e008      	b.n	800acc0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800acae:	79fb      	ldrb	r3, [r7, #7]
 800acb0:	4a08      	ldr	r2, [pc, #32]	@ (800acd4 <memp_malloc+0x48>)
 800acb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7ff ff9c 	bl	800abf4 <do_memp_malloc_pool>
 800acbc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800acbe:	68fb      	ldr	r3, [r7, #12]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	0801580c 	.word	0x0801580c
 800accc:	0801589c 	.word	0x0801589c
 800acd0:	08015860 	.word	0x08015860
 800acd4:	08017fd4 	.word	0x08017fd4

0800acd8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	f003 0303 	and.w	r3, r3, #3
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d006      	beq.n	800acfa <do_memp_free_pool+0x22>
 800acec:	4b0a      	ldr	r3, [pc, #40]	@ (800ad18 <do_memp_free_pool+0x40>)
 800acee:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800acf2:	490a      	ldr	r1, [pc, #40]	@ (800ad1c <do_memp_free_pool+0x44>)
 800acf4:	480a      	ldr	r0, [pc, #40]	@ (800ad20 <do_memp_free_pool+0x48>)
 800acf6:	f009 fd1d 	bl	8014734 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800ad10:	bf00      	nop
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	0801580c 	.word	0x0801580c
 800ad1c:	080158bc 	.word	0x080158bc
 800ad20:	08015860 	.word	0x08015860

0800ad24 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d106      	bne.n	800ad42 <memp_free_pool+0x1e>
 800ad34:	4b0a      	ldr	r3, [pc, #40]	@ (800ad60 <memp_free_pool+0x3c>)
 800ad36:	f240 1295 	movw	r2, #405	@ 0x195
 800ad3a:	490a      	ldr	r1, [pc, #40]	@ (800ad64 <memp_free_pool+0x40>)
 800ad3c:	480a      	ldr	r0, [pc, #40]	@ (800ad68 <memp_free_pool+0x44>)
 800ad3e:	f009 fcf9 	bl	8014734 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d007      	beq.n	800ad58 <memp_free_pool+0x34>
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d004      	beq.n	800ad58 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ad4e:	6839      	ldr	r1, [r7, #0]
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7ff ffc1 	bl	800acd8 <do_memp_free_pool>
 800ad56:	e000      	b.n	800ad5a <memp_free_pool+0x36>
    return;
 800ad58:	bf00      	nop
}
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	0801580c 	.word	0x0801580c
 800ad64:	08015888 	.word	0x08015888
 800ad68:	08015860 	.word	0x08015860

0800ad6c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	4603      	mov	r3, r0
 800ad74:	6039      	str	r1, [r7, #0]
 800ad76:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ad78:	79fb      	ldrb	r3, [r7, #7]
 800ad7a:	2b08      	cmp	r3, #8
 800ad7c:	d907      	bls.n	800ad8e <memp_free+0x22>
 800ad7e:	4b0c      	ldr	r3, [pc, #48]	@ (800adb0 <memp_free+0x44>)
 800ad80:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800ad84:	490b      	ldr	r1, [pc, #44]	@ (800adb4 <memp_free+0x48>)
 800ad86:	480c      	ldr	r0, [pc, #48]	@ (800adb8 <memp_free+0x4c>)
 800ad88:	f009 fcd4 	bl	8014734 <iprintf>
 800ad8c:	e00c      	b.n	800ada8 <memp_free+0x3c>

  if (mem == NULL) {
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d008      	beq.n	800ada6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ad94:	79fb      	ldrb	r3, [r7, #7]
 800ad96:	4a09      	ldr	r2, [pc, #36]	@ (800adbc <memp_free+0x50>)
 800ad98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7ff ff9a 	bl	800acd8 <do_memp_free_pool>
 800ada4:	e000      	b.n	800ada8 <memp_free+0x3c>
    return;
 800ada6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	0801580c 	.word	0x0801580c
 800adb4:	080158dc 	.word	0x080158dc
 800adb8:	08015860 	.word	0x08015860
 800adbc:	08017fd4 	.word	0x08017fd4

0800adc0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800adc0:	b480      	push	{r7}
 800adc2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800adc4:	bf00      	nop
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
	...

0800add0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
 800addc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d108      	bne.n	800adf6 <netif_add+0x26>
 800ade4:	4b57      	ldr	r3, [pc, #348]	@ (800af44 <netif_add+0x174>)
 800ade6:	f240 1227 	movw	r2, #295	@ 0x127
 800adea:	4957      	ldr	r1, [pc, #348]	@ (800af48 <netif_add+0x178>)
 800adec:	4857      	ldr	r0, [pc, #348]	@ (800af4c <netif_add+0x17c>)
 800adee:	f009 fca1 	bl	8014734 <iprintf>
 800adf2:	2300      	movs	r3, #0
 800adf4:	e0a2      	b.n	800af3c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800adf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d108      	bne.n	800ae0e <netif_add+0x3e>
 800adfc:	4b51      	ldr	r3, [pc, #324]	@ (800af44 <netif_add+0x174>)
 800adfe:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ae02:	4953      	ldr	r1, [pc, #332]	@ (800af50 <netif_add+0x180>)
 800ae04:	4851      	ldr	r0, [pc, #324]	@ (800af4c <netif_add+0x17c>)
 800ae06:	f009 fc95 	bl	8014734 <iprintf>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	e096      	b.n	800af3c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d101      	bne.n	800ae18 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ae14:	4b4f      	ldr	r3, [pc, #316]	@ (800af54 <netif_add+0x184>)
 800ae16:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ae1e:	4b4d      	ldr	r3, [pc, #308]	@ (800af54 <netif_add+0x184>)
 800ae20:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d101      	bne.n	800ae2c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ae28:	4b4a      	ldr	r3, [pc, #296]	@ (800af54 <netif_add+0x184>)
 800ae2a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2200      	movs	r2, #0
 800ae36:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	4a45      	ldr	r2, [pc, #276]	@ (800af58 <netif_add+0x188>)
 800ae42:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2200      	movs	r2, #0
 800ae48:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2200      	movs	r2, #0
 800ae56:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6a3a      	ldr	r2, [r7, #32]
 800ae5c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ae5e:	4b3f      	ldr	r3, [pc, #252]	@ (800af5c <netif_add+0x18c>)
 800ae60:	781a      	ldrb	r2, [r3, #0]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae6c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	68b9      	ldr	r1, [r7, #8]
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f000 f913 	bl	800b0a0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	4798      	blx	r3
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <netif_add+0xba>
    return NULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	e058      	b.n	800af3c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ae90:	2bff      	cmp	r3, #255	@ 0xff
 800ae92:	d103      	bne.n	800ae9c <netif_add+0xcc>
        netif->num = 0;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aea0:	4b2f      	ldr	r3, [pc, #188]	@ (800af60 <netif_add+0x190>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	617b      	str	r3, [r7, #20]
 800aea6:	e02b      	b.n	800af00 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aea8:	697a      	ldr	r2, [r7, #20]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d106      	bne.n	800aebe <netif_add+0xee>
 800aeb0:	4b24      	ldr	r3, [pc, #144]	@ (800af44 <netif_add+0x174>)
 800aeb2:	f240 128b 	movw	r2, #395	@ 0x18b
 800aeb6:	492b      	ldr	r1, [pc, #172]	@ (800af64 <netif_add+0x194>)
 800aeb8:	4824      	ldr	r0, [pc, #144]	@ (800af4c <netif_add+0x17c>)
 800aeba:	f009 fc3b 	bl	8014734 <iprintf>
        num_netifs++;
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	3301      	adds	r3, #1
 800aec2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	2bff      	cmp	r3, #255	@ 0xff
 800aec8:	dd06      	ble.n	800aed8 <netif_add+0x108>
 800aeca:	4b1e      	ldr	r3, [pc, #120]	@ (800af44 <netif_add+0x174>)
 800aecc:	f240 128d 	movw	r2, #397	@ 0x18d
 800aed0:	4925      	ldr	r1, [pc, #148]	@ (800af68 <netif_add+0x198>)
 800aed2:	481e      	ldr	r0, [pc, #120]	@ (800af4c <netif_add+0x17c>)
 800aed4:	f009 fc2e 	bl	8014734 <iprintf>
        if (netif2->num == netif->num) {
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d108      	bne.n	800aefa <netif_add+0x12a>
          netif->num++;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aeee:	3301      	adds	r3, #1
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800aef8:	e005      	b.n	800af06 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	617b      	str	r3, [r7, #20]
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1d0      	bne.n	800aea8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1be      	bne.n	800ae8a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800af12:	2bfe      	cmp	r3, #254	@ 0xfe
 800af14:	d103      	bne.n	800af1e <netif_add+0x14e>
    netif_num = 0;
 800af16:	4b11      	ldr	r3, [pc, #68]	@ (800af5c <netif_add+0x18c>)
 800af18:	2200      	movs	r2, #0
 800af1a:	701a      	strb	r2, [r3, #0]
 800af1c:	e006      	b.n	800af2c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800af24:	3301      	adds	r3, #1
 800af26:	b2da      	uxtb	r2, r3
 800af28:	4b0c      	ldr	r3, [pc, #48]	@ (800af5c <netif_add+0x18c>)
 800af2a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800af2c:	4b0c      	ldr	r3, [pc, #48]	@ (800af60 <netif_add+0x190>)
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800af34:	4a0a      	ldr	r2, [pc, #40]	@ (800af60 <netif_add+0x190>)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800af3a:	68fb      	ldr	r3, [r7, #12]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3718      	adds	r7, #24
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	080158f8 	.word	0x080158f8
 800af48:	0801598c 	.word	0x0801598c
 800af4c:	08015948 	.word	0x08015948
 800af50:	080159a8 	.word	0x080159a8
 800af54:	08018038 	.word	0x08018038
 800af58:	0800b37b 	.word	0x0800b37b
 800af5c:	2000b108 	.word	0x2000b108
 800af60:	2000b100 	.word	0x2000b100
 800af64:	080159cc 	.word	0x080159cc
 800af68:	080159e0 	.word	0x080159e0

0800af6c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800af76:	6839      	ldr	r1, [r7, #0]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f002 fbe7 	bl	800d74c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f006 ffe1 	bl	8011f48 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800af86:	bf00      	nop
 800af88:	3708      	adds	r7, #8
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
	...

0800af90 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d106      	bne.n	800afb0 <netif_do_set_ipaddr+0x20>
 800afa2:	4b1d      	ldr	r3, [pc, #116]	@ (800b018 <netif_do_set_ipaddr+0x88>)
 800afa4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800afa8:	491c      	ldr	r1, [pc, #112]	@ (800b01c <netif_do_set_ipaddr+0x8c>)
 800afaa:	481d      	ldr	r0, [pc, #116]	@ (800b020 <netif_do_set_ipaddr+0x90>)
 800afac:	f009 fbc2 	bl	8014734 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d106      	bne.n	800afc4 <netif_do_set_ipaddr+0x34>
 800afb6:	4b18      	ldr	r3, [pc, #96]	@ (800b018 <netif_do_set_ipaddr+0x88>)
 800afb8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800afbc:	4917      	ldr	r1, [pc, #92]	@ (800b01c <netif_do_set_ipaddr+0x8c>)
 800afbe:	4818      	ldr	r0, [pc, #96]	@ (800b020 <netif_do_set_ipaddr+0x90>)
 800afc0:	f009 fbb8 	bl	8014734 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	3304      	adds	r3, #4
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d01c      	beq.n	800b00c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	3304      	adds	r3, #4
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800afe2:	f107 0314 	add.w	r3, r7, #20
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7ff ffbf 	bl	800af6c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d002      	beq.n	800affa <netif_do_set_ipaddr+0x6a>
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	e000      	b.n	800affc <netif_do_set_ipaddr+0x6c>
 800affa:	2300      	movs	r3, #0
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b000:	2101      	movs	r1, #1
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f000 f8d2 	bl	800b1ac <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b008:	2301      	movs	r3, #1
 800b00a:	e000      	b.n	800b00e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3718      	adds	r7, #24
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	080158f8 	.word	0x080158f8
 800b01c:	08015a10 	.word	0x08015a10
 800b020:	08015948 	.word	0x08015948

0800b024 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	3308      	adds	r3, #8
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d00a      	beq.n	800b054 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <netif_do_set_netmask+0x26>
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	e000      	b.n	800b04c <netif_do_set_netmask+0x28>
 800b04a:	2300      	movs	r3, #0
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b050:	2301      	movs	r3, #1
 800b052:	e000      	b.n	800b056 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b062:	b480      	push	{r7}
 800b064:	b085      	sub	sp, #20
 800b066:	af00      	add	r7, sp, #0
 800b068:	60f8      	str	r0, [r7, #12]
 800b06a:	60b9      	str	r1, [r7, #8]
 800b06c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	330c      	adds	r3, #12
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d00a      	beq.n	800b092 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d002      	beq.n	800b088 <netif_do_set_gw+0x26>
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	e000      	b.n	800b08a <netif_do_set_gw+0x28>
 800b088:	2300      	movs	r3, #0
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b08e:	2301      	movs	r3, #1
 800b090:	e000      	b.n	800b094 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b088      	sub	sp, #32
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
 800b0ac:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d101      	bne.n	800b0c0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b0bc:	4b1c      	ldr	r3, [pc, #112]	@ (800b130 <netif_set_addr+0x90>)
 800b0be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b0c6:	4b1a      	ldr	r3, [pc, #104]	@ (800b130 <netif_set_addr+0x90>)
 800b0c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d101      	bne.n	800b0d4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b0d0:	4b17      	ldr	r3, [pc, #92]	@ (800b130 <netif_set_addr+0x90>)
 800b0d2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d003      	beq.n	800b0e2 <netif_set_addr+0x42>
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d101      	bne.n	800b0e6 <netif_set_addr+0x46>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e000      	b.n	800b0e8 <netif_set_addr+0x48>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d006      	beq.n	800b0fe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b0f0:	f107 0310 	add.w	r3, r7, #16
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	68b9      	ldr	r1, [r7, #8]
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f7ff ff49 	bl	800af90 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b0fe:	69fa      	ldr	r2, [r7, #28]
 800b100:	6879      	ldr	r1, [r7, #4]
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f7ff ff8e 	bl	800b024 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b108:	69ba      	ldr	r2, [r7, #24]
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f7ff ffa8 	bl	800b062 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d106      	bne.n	800b126 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b118:	f107 0310 	add.w	r3, r7, #16
 800b11c:	461a      	mov	r2, r3
 800b11e:	68b9      	ldr	r1, [r7, #8]
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f7ff ff35 	bl	800af90 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b126:	bf00      	nop
 800b128:	3720      	adds	r7, #32
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	08018038 	.word	0x08018038

0800b134 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b13c:	4a04      	ldr	r2, [pc, #16]	@ (800b150 <netif_set_default+0x1c>)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b142:	bf00      	nop
 800b144:	370c      	adds	r7, #12
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	2000b104 	.word	0x2000b104

0800b154 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d107      	bne.n	800b172 <netif_set_up+0x1e>
 800b162:	4b0f      	ldr	r3, [pc, #60]	@ (800b1a0 <netif_set_up+0x4c>)
 800b164:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800b168:	490e      	ldr	r1, [pc, #56]	@ (800b1a4 <netif_set_up+0x50>)
 800b16a:	480f      	ldr	r0, [pc, #60]	@ (800b1a8 <netif_set_up+0x54>)
 800b16c:	f009 fae2 	bl	8014734 <iprintf>
 800b170:	e013      	b.n	800b19a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b178:	f003 0301 	and.w	r3, r3, #1
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10c      	bne.n	800b19a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b186:	f043 0301 	orr.w	r3, r3, #1
 800b18a:	b2da      	uxtb	r2, r3
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b192:	2103      	movs	r1, #3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 f809 	bl	800b1ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	080158f8 	.word	0x080158f8
 800b1a4:	08015a80 	.word	0x08015a80
 800b1a8:	08015948 	.word	0x08015948

0800b1ac <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d106      	bne.n	800b1cc <netif_issue_reports+0x20>
 800b1be:	4b18      	ldr	r3, [pc, #96]	@ (800b220 <netif_issue_reports+0x74>)
 800b1c0:	f240 326d 	movw	r2, #877	@ 0x36d
 800b1c4:	4917      	ldr	r1, [pc, #92]	@ (800b224 <netif_issue_reports+0x78>)
 800b1c6:	4818      	ldr	r0, [pc, #96]	@ (800b228 <netif_issue_reports+0x7c>)
 800b1c8:	f009 fab4 	bl	8014734 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b1d2:	f003 0304 	and.w	r3, r3, #4
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d01e      	beq.n	800b218 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b1e0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d017      	beq.n	800b218 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b1e8:	78fb      	ldrb	r3, [r7, #3]
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d013      	beq.n	800b21a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	3304      	adds	r3, #4
 800b1f6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00e      	beq.n	800b21a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b202:	f003 0308 	and.w	r3, r3, #8
 800b206:	2b00      	cmp	r3, #0
 800b208:	d007      	beq.n	800b21a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	3304      	adds	r3, #4
 800b20e:	4619      	mov	r1, r3
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f007 fe03 	bl	8012e1c <etharp_request>
 800b216:	e000      	b.n	800b21a <netif_issue_reports+0x6e>
    return;
 800b218:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	080158f8 	.word	0x080158f8
 800b224:	08015a9c 	.word	0x08015a9c
 800b228:	08015948 	.word	0x08015948

0800b22c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d107      	bne.n	800b24a <netif_set_down+0x1e>
 800b23a:	4b12      	ldr	r3, [pc, #72]	@ (800b284 <netif_set_down+0x58>)
 800b23c:	f240 329b 	movw	r2, #923	@ 0x39b
 800b240:	4911      	ldr	r1, [pc, #68]	@ (800b288 <netif_set_down+0x5c>)
 800b242:	4812      	ldr	r0, [pc, #72]	@ (800b28c <netif_set_down+0x60>)
 800b244:	f009 fa76 	bl	8014734 <iprintf>
 800b248:	e019      	b.n	800b27e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b250:	f003 0301 	and.w	r3, r3, #1
 800b254:	2b00      	cmp	r3, #0
 800b256:	d012      	beq.n	800b27e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b25e:	f023 0301 	bic.w	r3, r3, #1
 800b262:	b2da      	uxtb	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b270:	f003 0308 	and.w	r3, r3, #8
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f007 f98d 	bl	8012598 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	080158f8 	.word	0x080158f8
 800b288:	08015ac0 	.word	0x08015ac0
 800b28c:	08015948 	.word	0x08015948

0800b290 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d107      	bne.n	800b2ae <netif_set_link_up+0x1e>
 800b29e:	4b13      	ldr	r3, [pc, #76]	@ (800b2ec <netif_set_link_up+0x5c>)
 800b2a0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800b2a4:	4912      	ldr	r1, [pc, #72]	@ (800b2f0 <netif_set_link_up+0x60>)
 800b2a6:	4813      	ldr	r0, [pc, #76]	@ (800b2f4 <netif_set_link_up+0x64>)
 800b2a8:	f009 fa44 	bl	8014734 <iprintf>
 800b2ac:	e01b      	b.n	800b2e6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b2b4:	f003 0304 	and.w	r3, r3, #4
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d114      	bne.n	800b2e6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b2c2:	f043 0304 	orr.w	r3, r3, #4
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b2ce:	2103      	movs	r1, #3
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7ff ff6b 	bl	800b1ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	69db      	ldr	r3, [r3, #28]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d003      	beq.n	800b2e6 <netif_set_link_up+0x56>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	69db      	ldr	r3, [r3, #28]
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	080158f8 	.word	0x080158f8
 800b2f0:	08015ae0 	.word	0x08015ae0
 800b2f4:	08015948 	.word	0x08015948

0800b2f8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d107      	bne.n	800b316 <netif_set_link_down+0x1e>
 800b306:	4b11      	ldr	r3, [pc, #68]	@ (800b34c <netif_set_link_down+0x54>)
 800b308:	f240 4206 	movw	r2, #1030	@ 0x406
 800b30c:	4910      	ldr	r1, [pc, #64]	@ (800b350 <netif_set_link_down+0x58>)
 800b30e:	4811      	ldr	r0, [pc, #68]	@ (800b354 <netif_set_link_down+0x5c>)
 800b310:	f009 fa10 	bl	8014734 <iprintf>
 800b314:	e017      	b.n	800b346 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b31c:	f003 0304 	and.w	r3, r3, #4
 800b320:	2b00      	cmp	r3, #0
 800b322:	d010      	beq.n	800b346 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b32a:	f023 0304 	bic.w	r3, r3, #4
 800b32e:	b2da      	uxtb	r2, r3
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	69db      	ldr	r3, [r3, #28]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d003      	beq.n	800b346 <netif_set_link_down+0x4e>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	69db      	ldr	r3, [r3, #28]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	080158f8 	.word	0x080158f8
 800b350:	08015b04 	.word	0x08015b04
 800b354:	08015948 	.word	0x08015948

0800b358 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	61da      	str	r2, [r3, #28]
  }
}
 800b36e:	bf00      	nop
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b37a:	b480      	push	{r7}
 800b37c:	b085      	sub	sp, #20
 800b37e:	af00      	add	r7, sp, #0
 800b380:	60f8      	str	r0, [r7, #12]
 800b382:	60b9      	str	r1, [r7, #8]
 800b384:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b386:	f06f 030b 	mvn.w	r3, #11
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3714      	adds	r7, #20
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
	...

0800b398 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	4603      	mov	r3, r0
 800b3a0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b3a2:	79fb      	ldrb	r3, [r7, #7]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d013      	beq.n	800b3d0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b3a8:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e0 <netif_get_by_index+0x48>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	60fb      	str	r3, [r7, #12]
 800b3ae:	e00c      	b.n	800b3ca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	79fa      	ldrb	r2, [r7, #7]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d101      	bne.n	800b3c4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	e006      	b.n	800b3d2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	60fb      	str	r3, [r7, #12]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1ef      	bne.n	800b3b0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	2000b100 	.word	0x2000b100

0800b3e4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b3ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b41c <pbuf_free_ooseq+0x38>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b3f0:	4b0b      	ldr	r3, [pc, #44]	@ (800b420 <pbuf_free_ooseq+0x3c>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	607b      	str	r3, [r7, #4]
 800b3f6:	e00a      	b.n	800b40e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d003      	beq.n	800b408 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f002 f9e1 	bl	800d7c8 <tcp_free_ooseq>
      return;
 800b406:	e005      	b.n	800b414 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	607b      	str	r3, [r7, #4]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1f1      	bne.n	800b3f8 <pbuf_free_ooseq+0x14>
    }
  }
}
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	2000b109 	.word	0x2000b109
 800b420:	2000b118 	.word	0x2000b118

0800b424 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b424:	b480      	push	{r7}
 800b426:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b428:	4b03      	ldr	r3, [pc, #12]	@ (800b438 <pbuf_pool_is_empty+0x14>)
 800b42a:	2201      	movs	r2, #1
 800b42c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b42e:	bf00      	nop
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	2000b109 	.word	0x2000b109

0800b43c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	4611      	mov	r1, r2
 800b448:	461a      	mov	r2, r3
 800b44a:	460b      	mov	r3, r1
 800b44c:	80fb      	strh	r3, [r7, #6]
 800b44e:	4613      	mov	r3, r2
 800b450:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2200      	movs	r2, #0
 800b456:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	88fa      	ldrh	r2, [r7, #6]
 800b462:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	88ba      	ldrh	r2, [r7, #4]
 800b468:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b46a:	8b3b      	ldrh	r3, [r7, #24]
 800b46c:	b2da      	uxtb	r2, r3
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	7f3a      	ldrb	r2, [r7, #28]
 800b476:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2201      	movs	r2, #1
 800b47c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	73da      	strb	r2, [r3, #15]
}
 800b484:	bf00      	nop
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b08c      	sub	sp, #48	@ 0x30
 800b494:	af02      	add	r7, sp, #8
 800b496:	4603      	mov	r3, r0
 800b498:	71fb      	strb	r3, [r7, #7]
 800b49a:	460b      	mov	r3, r1
 800b49c:	80bb      	strh	r3, [r7, #4]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b4a2:	79fb      	ldrb	r3, [r7, #7]
 800b4a4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b4a6:	887b      	ldrh	r3, [r7, #2]
 800b4a8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b4ac:	d07f      	beq.n	800b5ae <pbuf_alloc+0x11e>
 800b4ae:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b4b2:	f300 80c8 	bgt.w	800b646 <pbuf_alloc+0x1b6>
 800b4b6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b4ba:	d010      	beq.n	800b4de <pbuf_alloc+0x4e>
 800b4bc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b4c0:	f300 80c1 	bgt.w	800b646 <pbuf_alloc+0x1b6>
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d002      	beq.n	800b4ce <pbuf_alloc+0x3e>
 800b4c8:	2b41      	cmp	r3, #65	@ 0x41
 800b4ca:	f040 80bc 	bne.w	800b646 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b4ce:	887a      	ldrh	r2, [r7, #2]
 800b4d0:	88bb      	ldrh	r3, [r7, #4]
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	f000 f8d1 	bl	800b67c <pbuf_alloc_reference>
 800b4da:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b4dc:	e0bd      	b.n	800b65a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b4e6:	88bb      	ldrh	r3, [r7, #4]
 800b4e8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b4ea:	2008      	movs	r0, #8
 800b4ec:	f7ff fbce 	bl	800ac8c <memp_malloc>
 800b4f0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d109      	bne.n	800b50c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b4f8:	f7ff ff94 	bl	800b424 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d002      	beq.n	800b508 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b502:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b504:	f000 faa8 	bl	800ba58 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b508:	2300      	movs	r3, #0
 800b50a:	e0a7      	b.n	800b65c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b50c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b50e:	3303      	adds	r3, #3
 800b510:	b29b      	uxth	r3, r3
 800b512:	f023 0303 	bic.w	r3, r3, #3
 800b516:	b29b      	uxth	r3, r3
 800b518:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	8b7a      	ldrh	r2, [r7, #26]
 800b520:	4293      	cmp	r3, r2
 800b522:	bf28      	it	cs
 800b524:	4613      	movcs	r3, r2
 800b526:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b528:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b52a:	3310      	adds	r3, #16
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	4413      	add	r3, r2
 800b530:	3303      	adds	r3, #3
 800b532:	f023 0303 	bic.w	r3, r3, #3
 800b536:	4618      	mov	r0, r3
 800b538:	89f9      	ldrh	r1, [r7, #14]
 800b53a:	8b7a      	ldrh	r2, [r7, #26]
 800b53c:	2300      	movs	r3, #0
 800b53e:	9301      	str	r3, [sp, #4]
 800b540:	887b      	ldrh	r3, [r7, #2]
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	460b      	mov	r3, r1
 800b546:	4601      	mov	r1, r0
 800b548:	6938      	ldr	r0, [r7, #16]
 800b54a:	f7ff ff77 	bl	800b43c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	f003 0303 	and.w	r3, r3, #3
 800b556:	2b00      	cmp	r3, #0
 800b558:	d006      	beq.n	800b568 <pbuf_alloc+0xd8>
 800b55a:	4b42      	ldr	r3, [pc, #264]	@ (800b664 <pbuf_alloc+0x1d4>)
 800b55c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b560:	4941      	ldr	r1, [pc, #260]	@ (800b668 <pbuf_alloc+0x1d8>)
 800b562:	4842      	ldr	r0, [pc, #264]	@ (800b66c <pbuf_alloc+0x1dc>)
 800b564:	f009 f8e6 	bl	8014734 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b568:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b56a:	3303      	adds	r3, #3
 800b56c:	f023 0303 	bic.w	r3, r3, #3
 800b570:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800b574:	d106      	bne.n	800b584 <pbuf_alloc+0xf4>
 800b576:	4b3b      	ldr	r3, [pc, #236]	@ (800b664 <pbuf_alloc+0x1d4>)
 800b578:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b57c:	493c      	ldr	r1, [pc, #240]	@ (800b670 <pbuf_alloc+0x1e0>)
 800b57e:	483b      	ldr	r0, [pc, #236]	@ (800b66c <pbuf_alloc+0x1dc>)
 800b580:	f009 f8d8 	bl	8014734 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b586:	2b00      	cmp	r3, #0
 800b588:	d102      	bne.n	800b590 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b58e:	e002      	b.n	800b596 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	693a      	ldr	r2, [r7, #16]
 800b594:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b59a:	8b7a      	ldrh	r2, [r7, #26]
 800b59c:	89fb      	ldrh	r3, [r7, #14]
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b5a6:	8b7b      	ldrh	r3, [r7, #26]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d19e      	bne.n	800b4ea <pbuf_alloc+0x5a>
      break;
 800b5ac:	e055      	b.n	800b65a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b5ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b5b0:	3303      	adds	r3, #3
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	f023 0303 	bic.w	r3, r3, #3
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	88bb      	ldrh	r3, [r7, #4]
 800b5bc:	3303      	adds	r3, #3
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	f023 0303 	bic.w	r3, r3, #3
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	4413      	add	r3, r2
 800b5c8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b5ca:	8b3b      	ldrh	r3, [r7, #24]
 800b5cc:	3310      	adds	r3, #16
 800b5ce:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b5d0:	8b3a      	ldrh	r2, [r7, #24]
 800b5d2:	88bb      	ldrh	r3, [r7, #4]
 800b5d4:	3303      	adds	r3, #3
 800b5d6:	f023 0303 	bic.w	r3, r3, #3
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d306      	bcc.n	800b5ec <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b5de:	8afa      	ldrh	r2, [r7, #22]
 800b5e0:	88bb      	ldrh	r3, [r7, #4]
 800b5e2:	3303      	adds	r3, #3
 800b5e4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d201      	bcs.n	800b5f0 <pbuf_alloc+0x160>
        return NULL;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	e035      	b.n	800b65c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b5f0:	8afb      	ldrh	r3, [r7, #22]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7ff f9ba 	bl	800a96c <mem_malloc>
 800b5f8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d101      	bne.n	800b604 <pbuf_alloc+0x174>
        return NULL;
 800b600:	2300      	movs	r3, #0
 800b602:	e02b      	b.n	800b65c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b604:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b606:	3310      	adds	r3, #16
 800b608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b60a:	4413      	add	r3, r2
 800b60c:	3303      	adds	r3, #3
 800b60e:	f023 0303 	bic.w	r3, r3, #3
 800b612:	4618      	mov	r0, r3
 800b614:	88b9      	ldrh	r1, [r7, #4]
 800b616:	88ba      	ldrh	r2, [r7, #4]
 800b618:	2300      	movs	r3, #0
 800b61a:	9301      	str	r3, [sp, #4]
 800b61c:	887b      	ldrh	r3, [r7, #2]
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	460b      	mov	r3, r1
 800b622:	4601      	mov	r1, r0
 800b624:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b626:	f7ff ff09 	bl	800b43c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	f003 0303 	and.w	r3, r3, #3
 800b632:	2b00      	cmp	r3, #0
 800b634:	d010      	beq.n	800b658 <pbuf_alloc+0x1c8>
 800b636:	4b0b      	ldr	r3, [pc, #44]	@ (800b664 <pbuf_alloc+0x1d4>)
 800b638:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b63c:	490d      	ldr	r1, [pc, #52]	@ (800b674 <pbuf_alloc+0x1e4>)
 800b63e:	480b      	ldr	r0, [pc, #44]	@ (800b66c <pbuf_alloc+0x1dc>)
 800b640:	f009 f878 	bl	8014734 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b644:	e008      	b.n	800b658 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b646:	4b07      	ldr	r3, [pc, #28]	@ (800b664 <pbuf_alloc+0x1d4>)
 800b648:	f240 1227 	movw	r2, #295	@ 0x127
 800b64c:	490a      	ldr	r1, [pc, #40]	@ (800b678 <pbuf_alloc+0x1e8>)
 800b64e:	4807      	ldr	r0, [pc, #28]	@ (800b66c <pbuf_alloc+0x1dc>)
 800b650:	f009 f870 	bl	8014734 <iprintf>
      return NULL;
 800b654:	2300      	movs	r3, #0
 800b656:	e001      	b.n	800b65c <pbuf_alloc+0x1cc>
      break;
 800b658:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3728      	adds	r7, #40	@ 0x28
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	08015b28 	.word	0x08015b28
 800b668:	08015b58 	.word	0x08015b58
 800b66c:	08015b88 	.word	0x08015b88
 800b670:	08015bb0 	.word	0x08015bb0
 800b674:	08015be4 	.word	0x08015be4
 800b678:	08015c10 	.word	0x08015c10

0800b67c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af02      	add	r7, sp, #8
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	460b      	mov	r3, r1
 800b686:	807b      	strh	r3, [r7, #2]
 800b688:	4613      	mov	r3, r2
 800b68a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b68c:	883b      	ldrh	r3, [r7, #0]
 800b68e:	2b41      	cmp	r3, #65	@ 0x41
 800b690:	d009      	beq.n	800b6a6 <pbuf_alloc_reference+0x2a>
 800b692:	883b      	ldrh	r3, [r7, #0]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d006      	beq.n	800b6a6 <pbuf_alloc_reference+0x2a>
 800b698:	4b0f      	ldr	r3, [pc, #60]	@ (800b6d8 <pbuf_alloc_reference+0x5c>)
 800b69a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b69e:	490f      	ldr	r1, [pc, #60]	@ (800b6dc <pbuf_alloc_reference+0x60>)
 800b6a0:	480f      	ldr	r0, [pc, #60]	@ (800b6e0 <pbuf_alloc_reference+0x64>)
 800b6a2:	f009 f847 	bl	8014734 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b6a6:	2007      	movs	r0, #7
 800b6a8:	f7ff faf0 	bl	800ac8c <memp_malloc>
 800b6ac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d101      	bne.n	800b6b8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	e00b      	b.n	800b6d0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b6b8:	8879      	ldrh	r1, [r7, #2]
 800b6ba:	887a      	ldrh	r2, [r7, #2]
 800b6bc:	2300      	movs	r3, #0
 800b6be:	9301      	str	r3, [sp, #4]
 800b6c0:	883b      	ldrh	r3, [r7, #0]
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	6879      	ldr	r1, [r7, #4]
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f7ff feb7 	bl	800b43c <pbuf_init_alloced_pbuf>
  return p;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3710      	adds	r7, #16
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	08015b28 	.word	0x08015b28
 800b6dc:	08015c2c 	.word	0x08015c2c
 800b6e0:	08015b88 	.word	0x08015b88

0800b6e4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b088      	sub	sp, #32
 800b6e8:	af02      	add	r7, sp, #8
 800b6ea:	607b      	str	r3, [r7, #4]
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	73fb      	strb	r3, [r7, #15]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	81bb      	strh	r3, [r7, #12]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
 800b6fa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b6fc:	8a7b      	ldrh	r3, [r7, #18]
 800b6fe:	3303      	adds	r3, #3
 800b700:	f023 0203 	bic.w	r2, r3, #3
 800b704:	89bb      	ldrh	r3, [r7, #12]
 800b706:	441a      	add	r2, r3
 800b708:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d901      	bls.n	800b712 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b70e:	2300      	movs	r3, #0
 800b710:	e018      	b.n	800b744 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b712:	6a3b      	ldr	r3, [r7, #32]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d007      	beq.n	800b728 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b718:	8a7b      	ldrh	r3, [r7, #18]
 800b71a:	3303      	adds	r3, #3
 800b71c:	f023 0303 	bic.w	r3, r3, #3
 800b720:	6a3a      	ldr	r2, [r7, #32]
 800b722:	4413      	add	r3, r2
 800b724:	617b      	str	r3, [r7, #20]
 800b726:	e001      	b.n	800b72c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b728:	2300      	movs	r3, #0
 800b72a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	89b9      	ldrh	r1, [r7, #12]
 800b730:	89ba      	ldrh	r2, [r7, #12]
 800b732:	2302      	movs	r3, #2
 800b734:	9301      	str	r3, [sp, #4]
 800b736:	897b      	ldrh	r3, [r7, #10]
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	460b      	mov	r3, r1
 800b73c:	6979      	ldr	r1, [r7, #20]
 800b73e:	f7ff fe7d 	bl	800b43c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b742:	687b      	ldr	r3, [r7, #4]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3718      	adds	r7, #24
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	460b      	mov	r3, r1
 800b756:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d106      	bne.n	800b76c <pbuf_realloc+0x20>
 800b75e:	4b3a      	ldr	r3, [pc, #232]	@ (800b848 <pbuf_realloc+0xfc>)
 800b760:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b764:	4939      	ldr	r1, [pc, #228]	@ (800b84c <pbuf_realloc+0x100>)
 800b766:	483a      	ldr	r0, [pc, #232]	@ (800b850 <pbuf_realloc+0x104>)
 800b768:	f008 ffe4 	bl	8014734 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	891b      	ldrh	r3, [r3, #8]
 800b770:	887a      	ldrh	r2, [r7, #2]
 800b772:	429a      	cmp	r2, r3
 800b774:	d263      	bcs.n	800b83e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	891a      	ldrh	r2, [r3, #8]
 800b77a:	887b      	ldrh	r3, [r7, #2]
 800b77c:	1ad3      	subs	r3, r2, r3
 800b77e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b780:	887b      	ldrh	r3, [r7, #2]
 800b782:	817b      	strh	r3, [r7, #10]
  q = p;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b788:	e018      	b.n	800b7bc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	895b      	ldrh	r3, [r3, #10]
 800b78e:	897a      	ldrh	r2, [r7, #10]
 800b790:	1ad3      	subs	r3, r2, r3
 800b792:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	891a      	ldrh	r2, [r3, #8]
 800b798:	893b      	ldrh	r3, [r7, #8]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d106      	bne.n	800b7bc <pbuf_realloc+0x70>
 800b7ae:	4b26      	ldr	r3, [pc, #152]	@ (800b848 <pbuf_realloc+0xfc>)
 800b7b0:	f240 12af 	movw	r2, #431	@ 0x1af
 800b7b4:	4927      	ldr	r1, [pc, #156]	@ (800b854 <pbuf_realloc+0x108>)
 800b7b6:	4826      	ldr	r0, [pc, #152]	@ (800b850 <pbuf_realloc+0x104>)
 800b7b8:	f008 ffbc 	bl	8014734 <iprintf>
  while (rem_len > q->len) {
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	895b      	ldrh	r3, [r3, #10]
 800b7c0:	897a      	ldrh	r2, [r7, #10]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d8e1      	bhi.n	800b78a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	7b1b      	ldrb	r3, [r3, #12]
 800b7ca:	f003 030f 	and.w	r3, r3, #15
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d121      	bne.n	800b816 <pbuf_realloc+0xca>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	895b      	ldrh	r3, [r3, #10]
 800b7d6:	897a      	ldrh	r2, [r7, #10]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d01c      	beq.n	800b816 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	7b5b      	ldrb	r3, [r3, #13]
 800b7e0:	f003 0302 	and.w	r3, r3, #2
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d116      	bne.n	800b816 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	685a      	ldr	r2, [r3, #4]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	1ad3      	subs	r3, r2, r3
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	897b      	ldrh	r3, [r7, #10]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f7fe ffba 	bl	800a774 <mem_trim>
 800b800:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d106      	bne.n	800b816 <pbuf_realloc+0xca>
 800b808:	4b0f      	ldr	r3, [pc, #60]	@ (800b848 <pbuf_realloc+0xfc>)
 800b80a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b80e:	4912      	ldr	r1, [pc, #72]	@ (800b858 <pbuf_realloc+0x10c>)
 800b810:	480f      	ldr	r0, [pc, #60]	@ (800b850 <pbuf_realloc+0x104>)
 800b812:	f008 ff8f 	bl	8014734 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	897a      	ldrh	r2, [r7, #10]
 800b81a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	895a      	ldrh	r2, [r3, #10]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d004      	beq.n	800b836 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4618      	mov	r0, r3
 800b832:	f000 f911 	bl	800ba58 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	601a      	str	r2, [r3, #0]
 800b83c:	e000      	b.n	800b840 <pbuf_realloc+0xf4>
    return;
 800b83e:	bf00      	nop

}
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	08015b28 	.word	0x08015b28
 800b84c:	08015c40 	.word	0x08015c40
 800b850:	08015b88 	.word	0x08015b88
 800b854:	08015c58 	.word	0x08015c58
 800b858:	08015c70 	.word	0x08015c70

0800b85c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	4613      	mov	r3, r2
 800b868:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d106      	bne.n	800b87e <pbuf_add_header_impl+0x22>
 800b870:	4b2b      	ldr	r3, [pc, #172]	@ (800b920 <pbuf_add_header_impl+0xc4>)
 800b872:	f240 12df 	movw	r2, #479	@ 0x1df
 800b876:	492b      	ldr	r1, [pc, #172]	@ (800b924 <pbuf_add_header_impl+0xc8>)
 800b878:	482b      	ldr	r0, [pc, #172]	@ (800b928 <pbuf_add_header_impl+0xcc>)
 800b87a:	f008 ff5b 	bl	8014734 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d003      	beq.n	800b88c <pbuf_add_header_impl+0x30>
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b88a:	d301      	bcc.n	800b890 <pbuf_add_header_impl+0x34>
    return 1;
 800b88c:	2301      	movs	r3, #1
 800b88e:	e043      	b.n	800b918 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d101      	bne.n	800b89a <pbuf_add_header_impl+0x3e>
    return 0;
 800b896:	2300      	movs	r3, #0
 800b898:	e03e      	b.n	800b918 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	891a      	ldrh	r2, [r3, #8]
 800b8a2:	8a7b      	ldrh	r3, [r7, #18]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	8a7a      	ldrh	r2, [r7, #18]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d901      	bls.n	800b8b2 <pbuf_add_header_impl+0x56>
    return 1;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e032      	b.n	800b918 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	7b1b      	ldrb	r3, [r3, #12]
 800b8b6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b8b8:	8a3b      	ldrh	r3, [r7, #16]
 800b8ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d00c      	beq.n	800b8dc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	685a      	ldr	r2, [r3, #4]
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	425b      	negs	r3, r3
 800b8ca:	4413      	add	r3, r2
 800b8cc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	3310      	adds	r3, #16
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d20d      	bcs.n	800b8f4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e01d      	b.n	800b918 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b8dc:	79fb      	ldrb	r3, [r7, #7]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d006      	beq.n	800b8f0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	685a      	ldr	r2, [r3, #4]
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	425b      	negs	r3, r3
 800b8ea:	4413      	add	r3, r2
 800b8ec:	617b      	str	r3, [r7, #20]
 800b8ee:	e001      	b.n	800b8f4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e011      	b.n	800b918 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	895a      	ldrh	r2, [r3, #10]
 800b8fe:	8a7b      	ldrh	r3, [r7, #18]
 800b900:	4413      	add	r3, r2
 800b902:	b29a      	uxth	r2, r3
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	891a      	ldrh	r2, [r3, #8]
 800b90c:	8a7b      	ldrh	r3, [r7, #18]
 800b90e:	4413      	add	r3, r2
 800b910:	b29a      	uxth	r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	811a      	strh	r2, [r3, #8]


  return 0;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3718      	adds	r7, #24
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	08015b28 	.word	0x08015b28
 800b924:	08015c8c 	.word	0x08015c8c
 800b928:	08015b88 	.word	0x08015b88

0800b92c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b936:	2200      	movs	r2, #0
 800b938:	6839      	ldr	r1, [r7, #0]
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f7ff ff8e 	bl	800b85c <pbuf_add_header_impl>
 800b940:	4603      	mov	r3, r0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
	...

0800b94c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d106      	bne.n	800b96a <pbuf_remove_header+0x1e>
 800b95c:	4b20      	ldr	r3, [pc, #128]	@ (800b9e0 <pbuf_remove_header+0x94>)
 800b95e:	f240 224b 	movw	r2, #587	@ 0x24b
 800b962:	4920      	ldr	r1, [pc, #128]	@ (800b9e4 <pbuf_remove_header+0x98>)
 800b964:	4820      	ldr	r0, [pc, #128]	@ (800b9e8 <pbuf_remove_header+0x9c>)
 800b966:	f008 fee5 	bl	8014734 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d003      	beq.n	800b978 <pbuf_remove_header+0x2c>
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b976:	d301      	bcc.n	800b97c <pbuf_remove_header+0x30>
    return 1;
 800b978:	2301      	movs	r3, #1
 800b97a:	e02c      	b.n	800b9d6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d101      	bne.n	800b986 <pbuf_remove_header+0x3a>
    return 0;
 800b982:	2300      	movs	r3, #0
 800b984:	e027      	b.n	800b9d6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	895b      	ldrh	r3, [r3, #10]
 800b98e:	89fa      	ldrh	r2, [r7, #14]
 800b990:	429a      	cmp	r2, r3
 800b992:	d908      	bls.n	800b9a6 <pbuf_remove_header+0x5a>
 800b994:	4b12      	ldr	r3, [pc, #72]	@ (800b9e0 <pbuf_remove_header+0x94>)
 800b996:	f240 2255 	movw	r2, #597	@ 0x255
 800b99a:	4914      	ldr	r1, [pc, #80]	@ (800b9ec <pbuf_remove_header+0xa0>)
 800b99c:	4812      	ldr	r0, [pc, #72]	@ (800b9e8 <pbuf_remove_header+0x9c>)
 800b99e:	f008 fec9 	bl	8014734 <iprintf>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e017      	b.n	800b9d6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	685a      	ldr	r2, [r3, #4]
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	441a      	add	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	895a      	ldrh	r2, [r3, #10]
 800b9bc:	89fb      	ldrh	r3, [r7, #14]
 800b9be:	1ad3      	subs	r3, r2, r3
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	891a      	ldrh	r2, [r3, #8]
 800b9ca:	89fb      	ldrh	r3, [r7, #14]
 800b9cc:	1ad3      	subs	r3, r2, r3
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	08015b28 	.word	0x08015b28
 800b9e4:	08015c8c 	.word	0x08015c8c
 800b9e8:	08015b88 	.word	0x08015b88
 800b9ec:	08015c98 	.word	0x08015c98

0800b9f0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	807b      	strh	r3, [r7, #2]
 800b9fc:	4613      	mov	r3, r2
 800b9fe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ba00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	da08      	bge.n	800ba1a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ba08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba0c:	425b      	negs	r3, r3
 800ba0e:	4619      	mov	r1, r3
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f7ff ff9b 	bl	800b94c <pbuf_remove_header>
 800ba16:	4603      	mov	r3, r0
 800ba18:	e007      	b.n	800ba2a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ba1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba1e:	787a      	ldrb	r2, [r7, #1]
 800ba20:	4619      	mov	r1, r3
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f7ff ff1a 	bl	800b85c <pbuf_add_header_impl>
 800ba28:	4603      	mov	r3, r0
  }
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b082      	sub	sp, #8
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ba3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba42:	2201      	movs	r2, #1
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7ff ffd2 	bl	800b9f0 <pbuf_header_impl>
 800ba4c:	4603      	mov	r3, r0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
	...

0800ba58 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10b      	bne.n	800ba7e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d106      	bne.n	800ba7a <pbuf_free+0x22>
 800ba6c:	4b38      	ldr	r3, [pc, #224]	@ (800bb50 <pbuf_free+0xf8>)
 800ba6e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800ba72:	4938      	ldr	r1, [pc, #224]	@ (800bb54 <pbuf_free+0xfc>)
 800ba74:	4838      	ldr	r0, [pc, #224]	@ (800bb58 <pbuf_free+0x100>)
 800ba76:	f008 fe5d 	bl	8014734 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	e063      	b.n	800bb46 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ba82:	e05c      	b.n	800bb3e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	7b9b      	ldrb	r3, [r3, #14]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d106      	bne.n	800ba9a <pbuf_free+0x42>
 800ba8c:	4b30      	ldr	r3, [pc, #192]	@ (800bb50 <pbuf_free+0xf8>)
 800ba8e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800ba92:	4932      	ldr	r1, [pc, #200]	@ (800bb5c <pbuf_free+0x104>)
 800ba94:	4830      	ldr	r0, [pc, #192]	@ (800bb58 <pbuf_free+0x100>)
 800ba96:	f008 fe4d 	bl	8014734 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	7b9b      	ldrb	r3, [r3, #14]
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	b2da      	uxtb	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	739a      	strb	r2, [r3, #14]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	7b9b      	ldrb	r3, [r3, #14]
 800baaa:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800baac:	7dbb      	ldrb	r3, [r7, #22]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d143      	bne.n	800bb3a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	7b1b      	ldrb	r3, [r3, #12]
 800babc:	f003 030f 	and.w	r3, r3, #15
 800bac0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	7b5b      	ldrb	r3, [r3, #13]
 800bac6:	f003 0302 	and.w	r3, r3, #2
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d011      	beq.n	800baf2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d106      	bne.n	800bae8 <pbuf_free+0x90>
 800bada:	4b1d      	ldr	r3, [pc, #116]	@ (800bb50 <pbuf_free+0xf8>)
 800badc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800bae0:	491f      	ldr	r1, [pc, #124]	@ (800bb60 <pbuf_free+0x108>)
 800bae2:	481d      	ldr	r0, [pc, #116]	@ (800bb58 <pbuf_free+0x100>)
 800bae4:	f008 fe26 	bl	8014734 <iprintf>
        pc->custom_free_function(p);
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	691b      	ldr	r3, [r3, #16]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	4798      	blx	r3
 800baf0:	e01d      	b.n	800bb2e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800baf2:	7bfb      	ldrb	r3, [r7, #15]
 800baf4:	2b02      	cmp	r3, #2
 800baf6:	d104      	bne.n	800bb02 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800baf8:	6879      	ldr	r1, [r7, #4]
 800bafa:	2008      	movs	r0, #8
 800bafc:	f7ff f936 	bl	800ad6c <memp_free>
 800bb00:	e015      	b.n	800bb2e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d104      	bne.n	800bb12 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800bb08:	6879      	ldr	r1, [r7, #4]
 800bb0a:	2007      	movs	r0, #7
 800bb0c:	f7ff f92e 	bl	800ad6c <memp_free>
 800bb10:	e00d      	b.n	800bb2e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d103      	bne.n	800bb20 <pbuf_free+0xc8>
          mem_free(p);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f7fe fdc1 	bl	800a6a0 <mem_free>
 800bb1e:	e006      	b.n	800bb2e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bb20:	4b0b      	ldr	r3, [pc, #44]	@ (800bb50 <pbuf_free+0xf8>)
 800bb22:	f240 320f 	movw	r2, #783	@ 0x30f
 800bb26:	490f      	ldr	r1, [pc, #60]	@ (800bb64 <pbuf_free+0x10c>)
 800bb28:	480b      	ldr	r0, [pc, #44]	@ (800bb58 <pbuf_free+0x100>)
 800bb2a:	f008 fe03 	bl	8014734 <iprintf>
        }
      }
      count++;
 800bb2e:	7dfb      	ldrb	r3, [r7, #23]
 800bb30:	3301      	adds	r3, #1
 800bb32:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	607b      	str	r3, [r7, #4]
 800bb38:	e001      	b.n	800bb3e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d19f      	bne.n	800ba84 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	08015b28 	.word	0x08015b28
 800bb54:	08015c8c 	.word	0x08015c8c
 800bb58:	08015b88 	.word	0x08015b88
 800bb5c:	08015cb8 	.word	0x08015cb8
 800bb60:	08015cd0 	.word	0x08015cd0
 800bb64:	08015cf4 	.word	0x08015cf4

0800bb68 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b085      	sub	sp, #20
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bb70:	2300      	movs	r3, #0
 800bb72:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bb74:	e005      	b.n	800bb82 <pbuf_clen+0x1a>
    ++len;
 800bb76:	89fb      	ldrh	r3, [r7, #14]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d1f6      	bne.n	800bb76 <pbuf_clen+0xe>
  }
  return len;
 800bb88:	89fb      	ldrh	r3, [r7, #14]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3714      	adds	r7, #20
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr
	...

0800bb98 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d010      	beq.n	800bbc8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	7b9b      	ldrb	r3, [r3, #14]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	7b9b      	ldrb	r3, [r3, #14]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d106      	bne.n	800bbc8 <pbuf_ref+0x30>
 800bbba:	4b05      	ldr	r3, [pc, #20]	@ (800bbd0 <pbuf_ref+0x38>)
 800bbbc:	f240 3242 	movw	r2, #834	@ 0x342
 800bbc0:	4904      	ldr	r1, [pc, #16]	@ (800bbd4 <pbuf_ref+0x3c>)
 800bbc2:	4805      	ldr	r0, [pc, #20]	@ (800bbd8 <pbuf_ref+0x40>)
 800bbc4:	f008 fdb6 	bl	8014734 <iprintf>
  }
}
 800bbc8:	bf00      	nop
 800bbca:	3708      	adds	r7, #8
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	08015b28 	.word	0x08015b28
 800bbd4:	08015d08 	.word	0x08015d08
 800bbd8:	08015b88 	.word	0x08015b88

0800bbdc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <pbuf_cat+0x16>
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d107      	bne.n	800bc02 <pbuf_cat+0x26>
 800bbf2:	4b20      	ldr	r3, [pc, #128]	@ (800bc74 <pbuf_cat+0x98>)
 800bbf4:	f240 3259 	movw	r2, #857	@ 0x359
 800bbf8:	491f      	ldr	r1, [pc, #124]	@ (800bc78 <pbuf_cat+0x9c>)
 800bbfa:	4820      	ldr	r0, [pc, #128]	@ (800bc7c <pbuf_cat+0xa0>)
 800bbfc:	f008 fd9a 	bl	8014734 <iprintf>
 800bc00:	e034      	b.n	800bc6c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	60fb      	str	r3, [r7, #12]
 800bc06:	e00a      	b.n	800bc1e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	891a      	ldrh	r2, [r3, #8]
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	891b      	ldrh	r3, [r3, #8]
 800bc10:	4413      	add	r3, r2
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	60fb      	str	r3, [r7, #12]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1f0      	bne.n	800bc08 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	891a      	ldrh	r2, [r3, #8]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	895b      	ldrh	r3, [r3, #10]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d006      	beq.n	800bc40 <pbuf_cat+0x64>
 800bc32:	4b10      	ldr	r3, [pc, #64]	@ (800bc74 <pbuf_cat+0x98>)
 800bc34:	f240 3262 	movw	r2, #866	@ 0x362
 800bc38:	4911      	ldr	r1, [pc, #68]	@ (800bc80 <pbuf_cat+0xa4>)
 800bc3a:	4810      	ldr	r0, [pc, #64]	@ (800bc7c <pbuf_cat+0xa0>)
 800bc3c:	f008 fd7a 	bl	8014734 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d006      	beq.n	800bc56 <pbuf_cat+0x7a>
 800bc48:	4b0a      	ldr	r3, [pc, #40]	@ (800bc74 <pbuf_cat+0x98>)
 800bc4a:	f240 3263 	movw	r2, #867	@ 0x363
 800bc4e:	490d      	ldr	r1, [pc, #52]	@ (800bc84 <pbuf_cat+0xa8>)
 800bc50:	480a      	ldr	r0, [pc, #40]	@ (800bc7c <pbuf_cat+0xa0>)
 800bc52:	f008 fd6f 	bl	8014734 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	891a      	ldrh	r2, [r3, #8]
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	891b      	ldrh	r3, [r3, #8]
 800bc5e:	4413      	add	r3, r2
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	683a      	ldr	r2, [r7, #0]
 800bc6a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	08015b28 	.word	0x08015b28
 800bc78:	08015d1c 	.word	0x08015d1c
 800bc7c:	08015b88 	.word	0x08015b88
 800bc80:	08015d54 	.word	0x08015d54
 800bc84:	08015d84 	.word	0x08015d84

0800bc88 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bc92:	6839      	ldr	r1, [r7, #0]
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7ff ffa1 	bl	800bbdc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bc9a:	6838      	ldr	r0, [r7, #0]
 800bc9c:	f7ff ff7c 	bl	800bb98 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bca0:	bf00      	nop
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b086      	sub	sp, #24
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	617b      	str	r3, [r7, #20]
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d008      	beq.n	800bcd2 <pbuf_copy+0x2a>
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d005      	beq.n	800bcd2 <pbuf_copy+0x2a>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	891a      	ldrh	r2, [r3, #8]
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	891b      	ldrh	r3, [r3, #8]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d209      	bcs.n	800bce6 <pbuf_copy+0x3e>
 800bcd2:	4b57      	ldr	r3, [pc, #348]	@ (800be30 <pbuf_copy+0x188>)
 800bcd4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800bcd8:	4956      	ldr	r1, [pc, #344]	@ (800be34 <pbuf_copy+0x18c>)
 800bcda:	4857      	ldr	r0, [pc, #348]	@ (800be38 <pbuf_copy+0x190>)
 800bcdc:	f008 fd2a 	bl	8014734 <iprintf>
 800bce0:	f06f 030f 	mvn.w	r3, #15
 800bce4:	e09f      	b.n	800be26 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	895b      	ldrh	r3, [r3, #10]
 800bcea:	461a      	mov	r2, r3
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	1ad2      	subs	r2, r2, r3
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	895b      	ldrh	r3, [r3, #10]
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	1acb      	subs	r3, r1, r3
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d306      	bcc.n	800bd0c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	895b      	ldrh	r3, [r3, #10]
 800bd02:	461a      	mov	r2, r3
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	1ad3      	subs	r3, r2, r3
 800bd08:	60fb      	str	r3, [r7, #12]
 800bd0a:	e005      	b.n	800bd18 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	895b      	ldrh	r3, [r3, #10]
 800bd10:	461a      	mov	r2, r3
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	18d0      	adds	r0, r2, r3
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	685a      	ldr	r2, [r3, #4]
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	4413      	add	r3, r2
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	f008 fddd 	bl	80148ea <memcpy>
    offset_to += len;
 800bd30:	697a      	ldr	r2, [r7, #20]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	4413      	add	r3, r2
 800bd36:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	895b      	ldrh	r3, [r3, #10]
 800bd44:	461a      	mov	r2, r3
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d906      	bls.n	800bd5a <pbuf_copy+0xb2>
 800bd4c:	4b38      	ldr	r3, [pc, #224]	@ (800be30 <pbuf_copy+0x188>)
 800bd4e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800bd52:	493a      	ldr	r1, [pc, #232]	@ (800be3c <pbuf_copy+0x194>)
 800bd54:	4838      	ldr	r0, [pc, #224]	@ (800be38 <pbuf_copy+0x190>)
 800bd56:	f008 fced 	bl	8014734 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	895b      	ldrh	r3, [r3, #10]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d906      	bls.n	800bd74 <pbuf_copy+0xcc>
 800bd66:	4b32      	ldr	r3, [pc, #200]	@ (800be30 <pbuf_copy+0x188>)
 800bd68:	f240 32da 	movw	r2, #986	@ 0x3da
 800bd6c:	4934      	ldr	r1, [pc, #208]	@ (800be40 <pbuf_copy+0x198>)
 800bd6e:	4832      	ldr	r0, [pc, #200]	@ (800be38 <pbuf_copy+0x190>)
 800bd70:	f008 fce0 	bl	8014734 <iprintf>
    if (offset_from >= p_from->len) {
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	895b      	ldrh	r3, [r3, #10]
 800bd78:	461a      	mov	r2, r3
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d304      	bcc.n	800bd8a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bd80:	2300      	movs	r3, #0
 800bd82:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	895b      	ldrh	r3, [r3, #10]
 800bd8e:	461a      	mov	r2, r3
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d114      	bne.n	800bdc0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bd96:	2300      	movs	r3, #0
 800bd98:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10c      	bne.n	800bdc0 <pbuf_copy+0x118>
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d009      	beq.n	800bdc0 <pbuf_copy+0x118>
 800bdac:	4b20      	ldr	r3, [pc, #128]	@ (800be30 <pbuf_copy+0x188>)
 800bdae:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800bdb2:	4924      	ldr	r1, [pc, #144]	@ (800be44 <pbuf_copy+0x19c>)
 800bdb4:	4820      	ldr	r0, [pc, #128]	@ (800be38 <pbuf_copy+0x190>)
 800bdb6:	f008 fcbd 	bl	8014734 <iprintf>
 800bdba:	f06f 030f 	mvn.w	r3, #15
 800bdbe:	e032      	b.n	800be26 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d013      	beq.n	800bdee <pbuf_copy+0x146>
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	895a      	ldrh	r2, [r3, #10]
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	891b      	ldrh	r3, [r3, #8]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d10d      	bne.n	800bdee <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d009      	beq.n	800bdee <pbuf_copy+0x146>
 800bdda:	4b15      	ldr	r3, [pc, #84]	@ (800be30 <pbuf_copy+0x188>)
 800bddc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800bde0:	4919      	ldr	r1, [pc, #100]	@ (800be48 <pbuf_copy+0x1a0>)
 800bde2:	4815      	ldr	r0, [pc, #84]	@ (800be38 <pbuf_copy+0x190>)
 800bde4:	f008 fca6 	bl	8014734 <iprintf>
 800bde8:	f06f 0305 	mvn.w	r3, #5
 800bdec:	e01b      	b.n	800be26 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d013      	beq.n	800be1c <pbuf_copy+0x174>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	895a      	ldrh	r2, [r3, #10]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	891b      	ldrh	r3, [r3, #8]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d10d      	bne.n	800be1c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d009      	beq.n	800be1c <pbuf_copy+0x174>
 800be08:	4b09      	ldr	r3, [pc, #36]	@ (800be30 <pbuf_copy+0x188>)
 800be0a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800be0e:	490e      	ldr	r1, [pc, #56]	@ (800be48 <pbuf_copy+0x1a0>)
 800be10:	4809      	ldr	r0, [pc, #36]	@ (800be38 <pbuf_copy+0x190>)
 800be12:	f008 fc8f 	bl	8014734 <iprintf>
 800be16:	f06f 0305 	mvn.w	r3, #5
 800be1a:	e004      	b.n	800be26 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	f47f af61 	bne.w	800bce6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3718      	adds	r7, #24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	08015b28 	.word	0x08015b28
 800be34:	08015dd0 	.word	0x08015dd0
 800be38:	08015b88 	.word	0x08015b88
 800be3c:	08015e00 	.word	0x08015e00
 800be40:	08015e18 	.word	0x08015e18
 800be44:	08015e34 	.word	0x08015e34
 800be48:	08015e44 	.word	0x08015e44

0800be4c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b088      	sub	sp, #32
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	4611      	mov	r1, r2
 800be58:	461a      	mov	r2, r3
 800be5a:	460b      	mov	r3, r1
 800be5c:	80fb      	strh	r3, [r7, #6]
 800be5e:	4613      	mov	r3, r2
 800be60:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800be62:	2300      	movs	r3, #0
 800be64:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800be66:	2300      	movs	r3, #0
 800be68:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d108      	bne.n	800be82 <pbuf_copy_partial+0x36>
 800be70:	4b2b      	ldr	r3, [pc, #172]	@ (800bf20 <pbuf_copy_partial+0xd4>)
 800be72:	f240 420a 	movw	r2, #1034	@ 0x40a
 800be76:	492b      	ldr	r1, [pc, #172]	@ (800bf24 <pbuf_copy_partial+0xd8>)
 800be78:	482b      	ldr	r0, [pc, #172]	@ (800bf28 <pbuf_copy_partial+0xdc>)
 800be7a:	f008 fc5b 	bl	8014734 <iprintf>
 800be7e:	2300      	movs	r3, #0
 800be80:	e04a      	b.n	800bf18 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d108      	bne.n	800be9a <pbuf_copy_partial+0x4e>
 800be88:	4b25      	ldr	r3, [pc, #148]	@ (800bf20 <pbuf_copy_partial+0xd4>)
 800be8a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800be8e:	4927      	ldr	r1, [pc, #156]	@ (800bf2c <pbuf_copy_partial+0xe0>)
 800be90:	4825      	ldr	r0, [pc, #148]	@ (800bf28 <pbuf_copy_partial+0xdc>)
 800be92:	f008 fc4f 	bl	8014734 <iprintf>
 800be96:	2300      	movs	r3, #0
 800be98:	e03e      	b.n	800bf18 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	61fb      	str	r3, [r7, #28]
 800be9e:	e034      	b.n	800bf0a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bea0:	88bb      	ldrh	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00a      	beq.n	800bebc <pbuf_copy_partial+0x70>
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	895b      	ldrh	r3, [r3, #10]
 800beaa:	88ba      	ldrh	r2, [r7, #4]
 800beac:	429a      	cmp	r2, r3
 800beae:	d305      	bcc.n	800bebc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	895b      	ldrh	r3, [r3, #10]
 800beb4:	88ba      	ldrh	r2, [r7, #4]
 800beb6:	1ad3      	subs	r3, r2, r3
 800beb8:	80bb      	strh	r3, [r7, #4]
 800beba:	e023      	b.n	800bf04 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	895a      	ldrh	r2, [r3, #10]
 800bec0:	88bb      	ldrh	r3, [r7, #4]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bec6:	8b3a      	ldrh	r2, [r7, #24]
 800bec8:	88fb      	ldrh	r3, [r7, #6]
 800beca:	429a      	cmp	r2, r3
 800becc:	d901      	bls.n	800bed2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bece:	88fb      	ldrh	r3, [r7, #6]
 800bed0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bed2:	8b7b      	ldrh	r3, [r7, #26]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	18d0      	adds	r0, r2, r3
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	685a      	ldr	r2, [r3, #4]
 800bedc:	88bb      	ldrh	r3, [r7, #4]
 800bede:	4413      	add	r3, r2
 800bee0:	8b3a      	ldrh	r2, [r7, #24]
 800bee2:	4619      	mov	r1, r3
 800bee4:	f008 fd01 	bl	80148ea <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bee8:	8afa      	ldrh	r2, [r7, #22]
 800beea:	8b3b      	ldrh	r3, [r7, #24]
 800beec:	4413      	add	r3, r2
 800beee:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bef0:	8b7a      	ldrh	r2, [r7, #26]
 800bef2:	8b3b      	ldrh	r3, [r7, #24]
 800bef4:	4413      	add	r3, r2
 800bef6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bef8:	88fa      	ldrh	r2, [r7, #6]
 800befa:	8b3b      	ldrh	r3, [r7, #24]
 800befc:	1ad3      	subs	r3, r2, r3
 800befe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bf00:	2300      	movs	r3, #0
 800bf02:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	61fb      	str	r3, [r7, #28]
 800bf0a:	88fb      	ldrh	r3, [r7, #6]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d002      	beq.n	800bf16 <pbuf_copy_partial+0xca>
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1c4      	bne.n	800bea0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bf16:	8afb      	ldrh	r3, [r7, #22]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3720      	adds	r7, #32
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	08015b28 	.word	0x08015b28
 800bf24:	08015e70 	.word	0x08015e70
 800bf28:	08015b88 	.word	0x08015b88
 800bf2c:	08015e90 	.word	0x08015e90

0800bf30 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b088      	sub	sp, #32
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800bf3e:	88fb      	ldrh	r3, [r7, #6]
 800bf40:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800bf42:	2300      	movs	r3, #0
 800bf44:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d109      	bne.n	800bf60 <pbuf_take+0x30>
 800bf4c:	4b3a      	ldr	r3, [pc, #232]	@ (800c038 <pbuf_take+0x108>)
 800bf4e:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800bf52:	493a      	ldr	r1, [pc, #232]	@ (800c03c <pbuf_take+0x10c>)
 800bf54:	483a      	ldr	r0, [pc, #232]	@ (800c040 <pbuf_take+0x110>)
 800bf56:	f008 fbed 	bl	8014734 <iprintf>
 800bf5a:	f06f 030f 	mvn.w	r3, #15
 800bf5e:	e067      	b.n	800c030 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d109      	bne.n	800bf7a <pbuf_take+0x4a>
 800bf66:	4b34      	ldr	r3, [pc, #208]	@ (800c038 <pbuf_take+0x108>)
 800bf68:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800bf6c:	4935      	ldr	r1, [pc, #212]	@ (800c044 <pbuf_take+0x114>)
 800bf6e:	4834      	ldr	r0, [pc, #208]	@ (800c040 <pbuf_take+0x110>)
 800bf70:	f008 fbe0 	bl	8014734 <iprintf>
 800bf74:	f06f 030f 	mvn.w	r3, #15
 800bf78:	e05a      	b.n	800c030 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	891b      	ldrh	r3, [r3, #8]
 800bf7e:	88fa      	ldrh	r2, [r7, #6]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d909      	bls.n	800bf98 <pbuf_take+0x68>
 800bf84:	4b2c      	ldr	r3, [pc, #176]	@ (800c038 <pbuf_take+0x108>)
 800bf86:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800bf8a:	492f      	ldr	r1, [pc, #188]	@ (800c048 <pbuf_take+0x118>)
 800bf8c:	482c      	ldr	r0, [pc, #176]	@ (800c040 <pbuf_take+0x110>)
 800bf8e:	f008 fbd1 	bl	8014734 <iprintf>
 800bf92:	f04f 33ff 	mov.w	r3, #4294967295
 800bf96:	e04b      	b.n	800c030 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d007      	beq.n	800bfae <pbuf_take+0x7e>
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d004      	beq.n	800bfae <pbuf_take+0x7e>
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	891b      	ldrh	r3, [r3, #8]
 800bfa8:	88fa      	ldrh	r2, [r7, #6]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d902      	bls.n	800bfb4 <pbuf_take+0x84>
    return ERR_ARG;
 800bfae:	f06f 030f 	mvn.w	r3, #15
 800bfb2:	e03d      	b.n	800c030 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	61fb      	str	r3, [r7, #28]
 800bfb8:	e028      	b.n	800c00c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d106      	bne.n	800bfce <pbuf_take+0x9e>
 800bfc0:	4b1d      	ldr	r3, [pc, #116]	@ (800c038 <pbuf_take+0x108>)
 800bfc2:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800bfc6:	4921      	ldr	r1, [pc, #132]	@ (800c04c <pbuf_take+0x11c>)
 800bfc8:	481d      	ldr	r0, [pc, #116]	@ (800c040 <pbuf_take+0x110>)
 800bfca:	f008 fbb3 	bl	8014734 <iprintf>
    buf_copy_len = total_copy_len;
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	895b      	ldrh	r3, [r3, #10]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d902      	bls.n	800bfe4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	895b      	ldrh	r3, [r3, #10]
 800bfe2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	6858      	ldr	r0, [r3, #4]
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	4413      	add	r3, r2
 800bfee:	69ba      	ldr	r2, [r7, #24]
 800bff0:	4619      	mov	r1, r3
 800bff2:	f008 fc7a 	bl	80148ea <memcpy>
    total_copy_len -= buf_copy_len;
 800bff6:	697a      	ldr	r2, [r7, #20]
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	1ad3      	subs	r3, r2, r3
 800bffc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800bffe:	693a      	ldr	r2, [r7, #16]
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	4413      	add	r3, r2
 800c004:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	61fb      	str	r3, [r7, #28]
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1d3      	bne.n	800bfba <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d103      	bne.n	800c020 <pbuf_take+0xf0>
 800c018:	88fb      	ldrh	r3, [r7, #6]
 800c01a:	693a      	ldr	r2, [r7, #16]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d006      	beq.n	800c02e <pbuf_take+0xfe>
 800c020:	4b05      	ldr	r3, [pc, #20]	@ (800c038 <pbuf_take+0x108>)
 800c022:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800c026:	490a      	ldr	r1, [pc, #40]	@ (800c050 <pbuf_take+0x120>)
 800c028:	4805      	ldr	r0, [pc, #20]	@ (800c040 <pbuf_take+0x110>)
 800c02a:	f008 fb83 	bl	8014734 <iprintf>
  return ERR_OK;
 800c02e:	2300      	movs	r3, #0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3720      	adds	r7, #32
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	08015b28 	.word	0x08015b28
 800c03c:	08015f00 	.word	0x08015f00
 800c040:	08015b88 	.word	0x08015b88
 800c044:	08015f18 	.word	0x08015f18
 800c048:	08015f34 	.word	0x08015f34
 800c04c:	08015f54 	.word	0x08015f54
 800c050:	08015f6c 	.word	0x08015f6c

0800c054 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	4603      	mov	r3, r0
 800c05c:	603a      	str	r2, [r7, #0]
 800c05e:	71fb      	strb	r3, [r7, #7]
 800c060:	460b      	mov	r3, r1
 800c062:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	8919      	ldrh	r1, [r3, #8]
 800c068:	88ba      	ldrh	r2, [r7, #4]
 800c06a:	79fb      	ldrb	r3, [r7, #7]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7ff fa0f 	bl	800b490 <pbuf_alloc>
 800c072:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d101      	bne.n	800c07e <pbuf_clone+0x2a>
    return NULL;
 800c07a:	2300      	movs	r3, #0
 800c07c:	e011      	b.n	800c0a2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c07e:	6839      	ldr	r1, [r7, #0]
 800c080:	68f8      	ldr	r0, [r7, #12]
 800c082:	f7ff fe11 	bl	800bca8 <pbuf_copy>
 800c086:	4603      	mov	r3, r0
 800c088:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c08a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d006      	beq.n	800c0a0 <pbuf_clone+0x4c>
 800c092:	4b06      	ldr	r3, [pc, #24]	@ (800c0ac <pbuf_clone+0x58>)
 800c094:	f240 5224 	movw	r2, #1316	@ 0x524
 800c098:	4905      	ldr	r1, [pc, #20]	@ (800c0b0 <pbuf_clone+0x5c>)
 800c09a:	4806      	ldr	r0, [pc, #24]	@ (800c0b4 <pbuf_clone+0x60>)
 800c09c:	f008 fb4a 	bl	8014734 <iprintf>
  return q;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3710      	adds	r7, #16
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	08015b28 	.word	0x08015b28
 800c0b0:	08015f9c 	.word	0x08015f9c
 800c0b4:	08015b88 	.word	0x08015b88

0800c0b8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c0bc:	f008 fa3a 	bl	8014534 <rand>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	4b01      	ldr	r3, [pc, #4]	@ (800c0d8 <tcp_init+0x20>)
 800c0d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c0d4:	bf00      	nop
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	20000088 	.word	0x20000088

0800c0dc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	7d1b      	ldrb	r3, [r3, #20]
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d105      	bne.n	800c0f8 <tcp_free+0x1c>
 800c0ec:	4b06      	ldr	r3, [pc, #24]	@ (800c108 <tcp_free+0x2c>)
 800c0ee:	22d4      	movs	r2, #212	@ 0xd4
 800c0f0:	4906      	ldr	r1, [pc, #24]	@ (800c10c <tcp_free+0x30>)
 800c0f2:	4807      	ldr	r0, [pc, #28]	@ (800c110 <tcp_free+0x34>)
 800c0f4:	f008 fb1e 	bl	8014734 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c0f8:	6879      	ldr	r1, [r7, #4]
 800c0fa:	2001      	movs	r0, #1
 800c0fc:	f7fe fe36 	bl	800ad6c <memp_free>
}
 800c100:	bf00      	nop
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	08016028 	.word	0x08016028
 800c10c:	08016058 	.word	0x08016058
 800c110:	0801606c 	.word	0x0801606c

0800c114 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	7d1b      	ldrb	r3, [r3, #20]
 800c120:	2b01      	cmp	r3, #1
 800c122:	d105      	bne.n	800c130 <tcp_free_listen+0x1c>
 800c124:	4b06      	ldr	r3, [pc, #24]	@ (800c140 <tcp_free_listen+0x2c>)
 800c126:	22df      	movs	r2, #223	@ 0xdf
 800c128:	4906      	ldr	r1, [pc, #24]	@ (800c144 <tcp_free_listen+0x30>)
 800c12a:	4807      	ldr	r0, [pc, #28]	@ (800c148 <tcp_free_listen+0x34>)
 800c12c:	f008 fb02 	bl	8014734 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c130:	6879      	ldr	r1, [r7, #4]
 800c132:	2002      	movs	r0, #2
 800c134:	f7fe fe1a 	bl	800ad6c <memp_free>
}
 800c138:	bf00      	nop
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	08016028 	.word	0x08016028
 800c144:	08016094 	.word	0x08016094
 800c148:	0801606c 	.word	0x0801606c

0800c14c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c150:	f000 fea4 	bl	800ce9c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c154:	4b07      	ldr	r3, [pc, #28]	@ (800c174 <tcp_tmr+0x28>)
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	3301      	adds	r3, #1
 800c15a:	b2da      	uxtb	r2, r3
 800c15c:	4b05      	ldr	r3, [pc, #20]	@ (800c174 <tcp_tmr+0x28>)
 800c15e:	701a      	strb	r2, [r3, #0]
 800c160:	4b04      	ldr	r3, [pc, #16]	@ (800c174 <tcp_tmr+0x28>)
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	f003 0301 	and.w	r3, r3, #1
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d001      	beq.n	800c170 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c16c:	f000 fb54 	bl	800c818 <tcp_slowtmr>
  }
}
 800c170:	bf00      	nop
 800c172:	bd80      	pop	{r7, pc}
 800c174:	2000b121 	.word	0x2000b121

0800c178 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d105      	bne.n	800c194 <tcp_remove_listener+0x1c>
 800c188:	4b0d      	ldr	r3, [pc, #52]	@ (800c1c0 <tcp_remove_listener+0x48>)
 800c18a:	22ff      	movs	r2, #255	@ 0xff
 800c18c:	490d      	ldr	r1, [pc, #52]	@ (800c1c4 <tcp_remove_listener+0x4c>)
 800c18e:	480e      	ldr	r0, [pc, #56]	@ (800c1c8 <tcp_remove_listener+0x50>)
 800c190:	f008 fad0 	bl	8014734 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	60fb      	str	r3, [r7, #12]
 800c198:	e00a      	b.n	800c1b0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c19e:	683a      	ldr	r2, [r7, #0]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d102      	bne.n	800c1aa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	60fb      	str	r3, [r7, #12]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1f1      	bne.n	800c19a <tcp_remove_listener+0x22>
    }
  }
}
 800c1b6:	bf00      	nop
 800c1b8:	bf00      	nop
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	08016028 	.word	0x08016028
 800c1c4:	080160b0 	.word	0x080160b0
 800c1c8:	0801606c 	.word	0x0801606c

0800c1cc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d106      	bne.n	800c1e8 <tcp_listen_closed+0x1c>
 800c1da:	4b14      	ldr	r3, [pc, #80]	@ (800c22c <tcp_listen_closed+0x60>)
 800c1dc:	f240 1211 	movw	r2, #273	@ 0x111
 800c1e0:	4913      	ldr	r1, [pc, #76]	@ (800c230 <tcp_listen_closed+0x64>)
 800c1e2:	4814      	ldr	r0, [pc, #80]	@ (800c234 <tcp_listen_closed+0x68>)
 800c1e4:	f008 faa6 	bl	8014734 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	7d1b      	ldrb	r3, [r3, #20]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d006      	beq.n	800c1fe <tcp_listen_closed+0x32>
 800c1f0:	4b0e      	ldr	r3, [pc, #56]	@ (800c22c <tcp_listen_closed+0x60>)
 800c1f2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c1f6:	4910      	ldr	r1, [pc, #64]	@ (800c238 <tcp_listen_closed+0x6c>)
 800c1f8:	480e      	ldr	r0, [pc, #56]	@ (800c234 <tcp_listen_closed+0x68>)
 800c1fa:	f008 fa9b 	bl	8014734 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c1fe:	2301      	movs	r3, #1
 800c200:	60fb      	str	r3, [r7, #12]
 800c202:	e00b      	b.n	800c21c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c204:	4a0d      	ldr	r2, [pc, #52]	@ (800c23c <tcp_listen_closed+0x70>)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	6879      	ldr	r1, [r7, #4]
 800c210:	4618      	mov	r0, r3
 800c212:	f7ff ffb1 	bl	800c178 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	3301      	adds	r3, #1
 800c21a:	60fb      	str	r3, [r7, #12]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2b03      	cmp	r3, #3
 800c220:	d9f0      	bls.n	800c204 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c222:	bf00      	nop
 800c224:	bf00      	nop
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	08016028 	.word	0x08016028
 800c230:	080160d8 	.word	0x080160d8
 800c234:	0801606c 	.word	0x0801606c
 800c238:	080160e4 	.word	0x080160e4
 800c23c:	08018010 	.word	0x08018010

0800c240 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c240:	b5b0      	push	{r4, r5, r7, lr}
 800c242:	b088      	sub	sp, #32
 800c244:	af04      	add	r7, sp, #16
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	460b      	mov	r3, r1
 800c24a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d106      	bne.n	800c260 <tcp_close_shutdown+0x20>
 800c252:	4b63      	ldr	r3, [pc, #396]	@ (800c3e0 <tcp_close_shutdown+0x1a0>)
 800c254:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c258:	4962      	ldr	r1, [pc, #392]	@ (800c3e4 <tcp_close_shutdown+0x1a4>)
 800c25a:	4863      	ldr	r0, [pc, #396]	@ (800c3e8 <tcp_close_shutdown+0x1a8>)
 800c25c:	f008 fa6a 	bl	8014734 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c260:	78fb      	ldrb	r3, [r7, #3]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d066      	beq.n	800c334 <tcp_close_shutdown+0xf4>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	7d1b      	ldrb	r3, [r3, #20]
 800c26a:	2b04      	cmp	r3, #4
 800c26c:	d003      	beq.n	800c276 <tcp_close_shutdown+0x36>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	7d1b      	ldrb	r3, [r3, #20]
 800c272:	2b07      	cmp	r3, #7
 800c274:	d15e      	bne.n	800c334 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d104      	bne.n	800c288 <tcp_close_shutdown+0x48>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c282:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c286:	d055      	beq.n	800c334 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	8b5b      	ldrh	r3, [r3, #26]
 800c28c:	f003 0310 	and.w	r3, r3, #16
 800c290:	2b00      	cmp	r3, #0
 800c292:	d106      	bne.n	800c2a2 <tcp_close_shutdown+0x62>
 800c294:	4b52      	ldr	r3, [pc, #328]	@ (800c3e0 <tcp_close_shutdown+0x1a0>)
 800c296:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800c29a:	4954      	ldr	r1, [pc, #336]	@ (800c3ec <tcp_close_shutdown+0x1ac>)
 800c29c:	4852      	ldr	r0, [pc, #328]	@ (800c3e8 <tcp_close_shutdown+0x1a8>)
 800c29e:	f008 fa49 	bl	8014734 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c2aa:	687d      	ldr	r5, [r7, #4]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	3304      	adds	r3, #4
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	8ad2      	ldrh	r2, [r2, #22]
 800c2b4:	6879      	ldr	r1, [r7, #4]
 800c2b6:	8b09      	ldrh	r1, [r1, #24]
 800c2b8:	9102      	str	r1, [sp, #8]
 800c2ba:	9201      	str	r2, [sp, #4]
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	462b      	mov	r3, r5
 800c2c0:	4622      	mov	r2, r4
 800c2c2:	4601      	mov	r1, r0
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f004 fe8d 	bl	8010fe4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f001 f8c8 	bl	800d460 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c2d0:	4b47      	ldr	r3, [pc, #284]	@ (800c3f0 <tcp_close_shutdown+0x1b0>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d105      	bne.n	800c2e6 <tcp_close_shutdown+0xa6>
 800c2da:	4b45      	ldr	r3, [pc, #276]	@ (800c3f0 <tcp_close_shutdown+0x1b0>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	4a43      	ldr	r2, [pc, #268]	@ (800c3f0 <tcp_close_shutdown+0x1b0>)
 800c2e2:	6013      	str	r3, [r2, #0]
 800c2e4:	e013      	b.n	800c30e <tcp_close_shutdown+0xce>
 800c2e6:	4b42      	ldr	r3, [pc, #264]	@ (800c3f0 <tcp_close_shutdown+0x1b0>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	60fb      	str	r3, [r7, #12]
 800c2ec:	e00c      	b.n	800c308 <tcp_close_shutdown+0xc8>
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d104      	bne.n	800c302 <tcp_close_shutdown+0xc2>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	68da      	ldr	r2, [r3, #12]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	60da      	str	r2, [r3, #12]
 800c300:	e005      	b.n	800c30e <tcp_close_shutdown+0xce>
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	60fb      	str	r3, [r7, #12]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1ef      	bne.n	800c2ee <tcp_close_shutdown+0xae>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2200      	movs	r2, #0
 800c312:	60da      	str	r2, [r3, #12]
 800c314:	4b37      	ldr	r3, [pc, #220]	@ (800c3f4 <tcp_close_shutdown+0x1b4>)
 800c316:	2201      	movs	r2, #1
 800c318:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c31a:	4b37      	ldr	r3, [pc, #220]	@ (800c3f8 <tcp_close_shutdown+0x1b8>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	429a      	cmp	r2, r3
 800c322:	d102      	bne.n	800c32a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c324:	f003 fd5c 	bl	800fde0 <tcp_trigger_input_pcb_close>
 800c328:	e002      	b.n	800c330 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f7ff fed6 	bl	800c0dc <tcp_free>
      }
      return ERR_OK;
 800c330:	2300      	movs	r3, #0
 800c332:	e050      	b.n	800c3d6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	7d1b      	ldrb	r3, [r3, #20]
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d03b      	beq.n	800c3b4 <tcp_close_shutdown+0x174>
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	dc44      	bgt.n	800c3ca <tcp_close_shutdown+0x18a>
 800c340:	2b00      	cmp	r3, #0
 800c342:	d002      	beq.n	800c34a <tcp_close_shutdown+0x10a>
 800c344:	2b01      	cmp	r3, #1
 800c346:	d02a      	beq.n	800c39e <tcp_close_shutdown+0x15e>
 800c348:	e03f      	b.n	800c3ca <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	8adb      	ldrh	r3, [r3, #22]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d021      	beq.n	800c396 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c352:	4b2a      	ldr	r3, [pc, #168]	@ (800c3fc <tcp_close_shutdown+0x1bc>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d105      	bne.n	800c368 <tcp_close_shutdown+0x128>
 800c35c:	4b27      	ldr	r3, [pc, #156]	@ (800c3fc <tcp_close_shutdown+0x1bc>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	4a26      	ldr	r2, [pc, #152]	@ (800c3fc <tcp_close_shutdown+0x1bc>)
 800c364:	6013      	str	r3, [r2, #0]
 800c366:	e013      	b.n	800c390 <tcp_close_shutdown+0x150>
 800c368:	4b24      	ldr	r3, [pc, #144]	@ (800c3fc <tcp_close_shutdown+0x1bc>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	60bb      	str	r3, [r7, #8]
 800c36e:	e00c      	b.n	800c38a <tcp_close_shutdown+0x14a>
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	429a      	cmp	r2, r3
 800c378:	d104      	bne.n	800c384 <tcp_close_shutdown+0x144>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	68da      	ldr	r2, [r3, #12]
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	60da      	str	r2, [r3, #12]
 800c382:	e005      	b.n	800c390 <tcp_close_shutdown+0x150>
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	60bb      	str	r3, [r7, #8]
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d1ef      	bne.n	800c370 <tcp_close_shutdown+0x130>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7ff fea0 	bl	800c0dc <tcp_free>
      break;
 800c39c:	e01a      	b.n	800c3d4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f7ff ff14 	bl	800c1cc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c3a4:	6879      	ldr	r1, [r7, #4]
 800c3a6:	4816      	ldr	r0, [pc, #88]	@ (800c400 <tcp_close_shutdown+0x1c0>)
 800c3a8:	f001 f8aa 	bl	800d500 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f7ff feb1 	bl	800c114 <tcp_free_listen>
      break;
 800c3b2:	e00f      	b.n	800c3d4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c3b4:	6879      	ldr	r1, [r7, #4]
 800c3b6:	480e      	ldr	r0, [pc, #56]	@ (800c3f0 <tcp_close_shutdown+0x1b0>)
 800c3b8:	f001 f8a2 	bl	800d500 <tcp_pcb_remove>
 800c3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800c3f4 <tcp_close_shutdown+0x1b4>)
 800c3be:	2201      	movs	r2, #1
 800c3c0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7ff fe8a 	bl	800c0dc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c3c8:	e004      	b.n	800c3d4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f81a 	bl	800c404 <tcp_close_shutdown_fin>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	e000      	b.n	800c3d6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bdb0      	pop	{r4, r5, r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	08016028 	.word	0x08016028
 800c3e4:	080160fc 	.word	0x080160fc
 800c3e8:	0801606c 	.word	0x0801606c
 800c3ec:	0801611c 	.word	0x0801611c
 800c3f0:	2000b118 	.word	0x2000b118
 800c3f4:	2000b120 	.word	0x2000b120
 800c3f8:	2000b158 	.word	0x2000b158
 800c3fc:	2000b110 	.word	0x2000b110
 800c400:	2000b114 	.word	0x2000b114

0800c404 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d106      	bne.n	800c420 <tcp_close_shutdown_fin+0x1c>
 800c412:	4b2e      	ldr	r3, [pc, #184]	@ (800c4cc <tcp_close_shutdown_fin+0xc8>)
 800c414:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c418:	492d      	ldr	r1, [pc, #180]	@ (800c4d0 <tcp_close_shutdown_fin+0xcc>)
 800c41a:	482e      	ldr	r0, [pc, #184]	@ (800c4d4 <tcp_close_shutdown_fin+0xd0>)
 800c41c:	f008 f98a 	bl	8014734 <iprintf>

  switch (pcb->state) {
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	7d1b      	ldrb	r3, [r3, #20]
 800c424:	2b07      	cmp	r3, #7
 800c426:	d020      	beq.n	800c46a <tcp_close_shutdown_fin+0x66>
 800c428:	2b07      	cmp	r3, #7
 800c42a:	dc2b      	bgt.n	800c484 <tcp_close_shutdown_fin+0x80>
 800c42c:	2b03      	cmp	r3, #3
 800c42e:	d002      	beq.n	800c436 <tcp_close_shutdown_fin+0x32>
 800c430:	2b04      	cmp	r3, #4
 800c432:	d00d      	beq.n	800c450 <tcp_close_shutdown_fin+0x4c>
 800c434:	e026      	b.n	800c484 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f003 fee2 	bl	8010200 <tcp_send_fin>
 800c43c:	4603      	mov	r3, r0
 800c43e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d11f      	bne.n	800c488 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2205      	movs	r2, #5
 800c44c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c44e:	e01b      	b.n	800c488 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f003 fed5 	bl	8010200 <tcp_send_fin>
 800c456:	4603      	mov	r3, r0
 800c458:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c45a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d114      	bne.n	800c48c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2205      	movs	r2, #5
 800c466:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c468:	e010      	b.n	800c48c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f003 fec8 	bl	8010200 <tcp_send_fin>
 800c470:	4603      	mov	r3, r0
 800c472:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d109      	bne.n	800c490 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2209      	movs	r2, #9
 800c480:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c482:	e005      	b.n	800c490 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c484:	2300      	movs	r3, #0
 800c486:	e01c      	b.n	800c4c2 <tcp_close_shutdown_fin+0xbe>
      break;
 800c488:	bf00      	nop
 800c48a:	e002      	b.n	800c492 <tcp_close_shutdown_fin+0x8e>
      break;
 800c48c:	bf00      	nop
 800c48e:	e000      	b.n	800c492 <tcp_close_shutdown_fin+0x8e>
      break;
 800c490:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d103      	bne.n	800c4a2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f003 ffee 	bl	801047c <tcp_output>
 800c4a0:	e00d      	b.n	800c4be <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c4a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4aa:	d108      	bne.n	800c4be <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	8b5b      	ldrh	r3, [r3, #26]
 800c4b0:	f043 0308 	orr.w	r3, r3, #8
 800c4b4:	b29a      	uxth	r2, r3
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	e001      	b.n	800c4c2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c4be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	08016028 	.word	0x08016028
 800c4d0:	080160d8 	.word	0x080160d8
 800c4d4:	0801606c 	.word	0x0801606c

0800c4d8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d109      	bne.n	800c4fa <tcp_close+0x22>
 800c4e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c524 <tcp_close+0x4c>)
 800c4e8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800c4ec:	490e      	ldr	r1, [pc, #56]	@ (800c528 <tcp_close+0x50>)
 800c4ee:	480f      	ldr	r0, [pc, #60]	@ (800c52c <tcp_close+0x54>)
 800c4f0:	f008 f920 	bl	8014734 <iprintf>
 800c4f4:	f06f 030f 	mvn.w	r3, #15
 800c4f8:	e00f      	b.n	800c51a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	7d1b      	ldrb	r3, [r3, #20]
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d006      	beq.n	800c510 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	8b5b      	ldrh	r3, [r3, #26]
 800c506:	f043 0310 	orr.w	r3, r3, #16
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c510:	2101      	movs	r1, #1
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7ff fe94 	bl	800c240 <tcp_close_shutdown>
 800c518:	4603      	mov	r3, r0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	08016028 	.word	0x08016028
 800c528:	08016138 	.word	0x08016138
 800c52c:	0801606c 	.word	0x0801606c

0800c530 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b08e      	sub	sp, #56	@ 0x38
 800c534:	af04      	add	r7, sp, #16
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d107      	bne.n	800c550 <tcp_abandon+0x20>
 800c540:	4b52      	ldr	r3, [pc, #328]	@ (800c68c <tcp_abandon+0x15c>)
 800c542:	f240 223d 	movw	r2, #573	@ 0x23d
 800c546:	4952      	ldr	r1, [pc, #328]	@ (800c690 <tcp_abandon+0x160>)
 800c548:	4852      	ldr	r0, [pc, #328]	@ (800c694 <tcp_abandon+0x164>)
 800c54a:	f008 f8f3 	bl	8014734 <iprintf>
 800c54e:	e099      	b.n	800c684 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	7d1b      	ldrb	r3, [r3, #20]
 800c554:	2b01      	cmp	r3, #1
 800c556:	d106      	bne.n	800c566 <tcp_abandon+0x36>
 800c558:	4b4c      	ldr	r3, [pc, #304]	@ (800c68c <tcp_abandon+0x15c>)
 800c55a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800c55e:	494e      	ldr	r1, [pc, #312]	@ (800c698 <tcp_abandon+0x168>)
 800c560:	484c      	ldr	r0, [pc, #304]	@ (800c694 <tcp_abandon+0x164>)
 800c562:	f008 f8e7 	bl	8014734 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	7d1b      	ldrb	r3, [r3, #20]
 800c56a:	2b0a      	cmp	r3, #10
 800c56c:	d107      	bne.n	800c57e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c56e:	6879      	ldr	r1, [r7, #4]
 800c570:	484a      	ldr	r0, [pc, #296]	@ (800c69c <tcp_abandon+0x16c>)
 800c572:	f000 ffc5 	bl	800d500 <tcp_pcb_remove>
    tcp_free(pcb);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f7ff fdb0 	bl	800c0dc <tcp_free>
 800c57c:	e082      	b.n	800c684 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c57e:	2300      	movs	r3, #0
 800c580:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800c582:	2300      	movs	r3, #0
 800c584:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c58a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c590:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c598:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	7d1b      	ldrb	r3, [r3, #20]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d126      	bne.n	800c5f6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	8adb      	ldrh	r3, [r3, #22]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d02e      	beq.n	800c60e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c5b0:	4b3b      	ldr	r3, [pc, #236]	@ (800c6a0 <tcp_abandon+0x170>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d105      	bne.n	800c5c6 <tcp_abandon+0x96>
 800c5ba:	4b39      	ldr	r3, [pc, #228]	@ (800c6a0 <tcp_abandon+0x170>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	4a37      	ldr	r2, [pc, #220]	@ (800c6a0 <tcp_abandon+0x170>)
 800c5c2:	6013      	str	r3, [r2, #0]
 800c5c4:	e013      	b.n	800c5ee <tcp_abandon+0xbe>
 800c5c6:	4b36      	ldr	r3, [pc, #216]	@ (800c6a0 <tcp_abandon+0x170>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	61fb      	str	r3, [r7, #28]
 800c5cc:	e00c      	b.n	800c5e8 <tcp_abandon+0xb8>
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d104      	bne.n	800c5e2 <tcp_abandon+0xb2>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	68da      	ldr	r2, [r3, #12]
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	60da      	str	r2, [r3, #12]
 800c5e0:	e005      	b.n	800c5ee <tcp_abandon+0xbe>
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	61fb      	str	r3, [r7, #28]
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1ef      	bne.n	800c5ce <tcp_abandon+0x9e>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	60da      	str	r2, [r3, #12]
 800c5f4:	e00b      	b.n	800c60e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	8adb      	ldrh	r3, [r3, #22]
 800c5fe:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c600:	6879      	ldr	r1, [r7, #4]
 800c602:	4828      	ldr	r0, [pc, #160]	@ (800c6a4 <tcp_abandon+0x174>)
 800c604:	f000 ff7c 	bl	800d500 <tcp_pcb_remove>
 800c608:	4b27      	ldr	r3, [pc, #156]	@ (800c6a8 <tcp_abandon+0x178>)
 800c60a:	2201      	movs	r2, #1
 800c60c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c612:	2b00      	cmp	r3, #0
 800c614:	d004      	beq.n	800c620 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c61a:	4618      	mov	r0, r3
 800c61c:	f000 fd1e 	bl	800d05c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c624:	2b00      	cmp	r3, #0
 800c626:	d004      	beq.n	800c632 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c62c:	4618      	mov	r0, r3
 800c62e:	f000 fd15 	bl	800d05c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c636:	2b00      	cmp	r3, #0
 800c638:	d004      	beq.n	800c644 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c63e:	4618      	mov	r0, r3
 800c640:	f000 fd0c 	bl	800d05c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00e      	beq.n	800c668 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c64a:	6879      	ldr	r1, [r7, #4]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	3304      	adds	r3, #4
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	8b12      	ldrh	r2, [r2, #24]
 800c654:	9202      	str	r2, [sp, #8]
 800c656:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c658:	9201      	str	r2, [sp, #4]
 800c65a:	9300      	str	r3, [sp, #0]
 800c65c:	460b      	mov	r3, r1
 800c65e:	697a      	ldr	r2, [r7, #20]
 800c660:	69b9      	ldr	r1, [r7, #24]
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f004 fcbe 	bl	8010fe4 <tcp_rst>
    }
    last_state = pcb->state;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	7d1b      	ldrb	r3, [r3, #20]
 800c66c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7ff fd34 	bl	800c0dc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d004      	beq.n	800c684 <tcp_abandon+0x154>
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	f06f 010c 	mvn.w	r1, #12
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	4798      	blx	r3
  }
}
 800c684:	3728      	adds	r7, #40	@ 0x28
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	08016028 	.word	0x08016028
 800c690:	0801616c 	.word	0x0801616c
 800c694:	0801606c 	.word	0x0801606c
 800c698:	08016188 	.word	0x08016188
 800c69c:	2000b11c 	.word	0x2000b11c
 800c6a0:	2000b110 	.word	0x2000b110
 800c6a4:	2000b118 	.word	0x2000b118
 800c6a8:	2000b120 	.word	0x2000b120

0800c6ac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c6b4:	2101      	movs	r1, #1
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f7ff ff3a 	bl	800c530 <tcp_abandon>
}
 800c6bc:	bf00      	nop
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d106      	bne.n	800c6e0 <tcp_update_rcv_ann_wnd+0x1c>
 800c6d2:	4b25      	ldr	r3, [pc, #148]	@ (800c768 <tcp_update_rcv_ann_wnd+0xa4>)
 800c6d4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c6d8:	4924      	ldr	r1, [pc, #144]	@ (800c76c <tcp_update_rcv_ann_wnd+0xa8>)
 800c6da:	4825      	ldr	r0, [pc, #148]	@ (800c770 <tcp_update_rcv_ann_wnd+0xac>)
 800c6dc:	f008 f82a 	bl	8014734 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c6e8:	4413      	add	r3, r2
 800c6ea:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800c6f4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800c6f8:	bf28      	it	cs
 800c6fa:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800c6fe:	b292      	uxth	r2, r2
 800c700:	4413      	add	r3, r2
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	db08      	blt.n	800c71c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c716:	68fa      	ldr	r2, [r7, #12]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	e020      	b.n	800c75e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	2b00      	cmp	r3, #0
 800c728:	dd03      	ble.n	800c732 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c730:	e014      	b.n	800c75c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c73a:	1ad3      	subs	r3, r2, r3
 800c73c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c744:	d306      	bcc.n	800c754 <tcp_update_rcv_ann_wnd+0x90>
 800c746:	4b08      	ldr	r3, [pc, #32]	@ (800c768 <tcp_update_rcv_ann_wnd+0xa4>)
 800c748:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800c74c:	4909      	ldr	r1, [pc, #36]	@ (800c774 <tcp_update_rcv_ann_wnd+0xb0>)
 800c74e:	4808      	ldr	r0, [pc, #32]	@ (800c770 <tcp_update_rcv_ann_wnd+0xac>)
 800c750:	f007 fff0 	bl	8014734 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	b29a      	uxth	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800c75c:	2300      	movs	r3, #0
  }
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	08016028 	.word	0x08016028
 800c76c:	08016284 	.word	0x08016284
 800c770:	0801606c 	.word	0x0801606c
 800c774:	080162a8 	.word	0x080162a8

0800c778 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	460b      	mov	r3, r1
 800c782:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d107      	bne.n	800c79a <tcp_recved+0x22>
 800c78a:	4b1f      	ldr	r3, [pc, #124]	@ (800c808 <tcp_recved+0x90>)
 800c78c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800c790:	491e      	ldr	r1, [pc, #120]	@ (800c80c <tcp_recved+0x94>)
 800c792:	481f      	ldr	r0, [pc, #124]	@ (800c810 <tcp_recved+0x98>)
 800c794:	f007 ffce 	bl	8014734 <iprintf>
 800c798:	e032      	b.n	800c800 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	7d1b      	ldrb	r3, [r3, #20]
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d106      	bne.n	800c7b0 <tcp_recved+0x38>
 800c7a2:	4b19      	ldr	r3, [pc, #100]	@ (800c808 <tcp_recved+0x90>)
 800c7a4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800c7a8:	491a      	ldr	r1, [pc, #104]	@ (800c814 <tcp_recved+0x9c>)
 800c7aa:	4819      	ldr	r0, [pc, #100]	@ (800c810 <tcp_recved+0x98>)
 800c7ac:	f007 ffc2 	bl	8014734 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c7b4:	887b      	ldrh	r3, [r7, #2]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c7ba:	89fb      	ldrh	r3, [r7, #14]
 800c7bc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c7c0:	d804      	bhi.n	800c7cc <tcp_recved+0x54>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7c6:	89fa      	ldrh	r2, [r7, #14]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d204      	bcs.n	800c7d6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c7d2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c7d4:	e002      	b.n	800c7dc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	89fa      	ldrh	r2, [r7, #14]
 800c7da:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f7ff ff71 	bl	800c6c4 <tcp_update_rcv_ann_wnd>
 800c7e2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c7ea:	d309      	bcc.n	800c800 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	8b5b      	ldrh	r3, [r3, #26]
 800c7f0:	f043 0302 	orr.w	r3, r3, #2
 800c7f4:	b29a      	uxth	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f003 fe3e 	bl	801047c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	08016028 	.word	0x08016028
 800c80c:	080162c4 	.word	0x080162c4
 800c810:	0801606c 	.word	0x0801606c
 800c814:	080162dc 	.word	0x080162dc

0800c818 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c818:	b5b0      	push	{r4, r5, r7, lr}
 800c81a:	b090      	sub	sp, #64	@ 0x40
 800c81c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c81e:	2300      	movs	r3, #0
 800c820:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800c824:	4b95      	ldr	r3, [pc, #596]	@ (800ca7c <tcp_slowtmr+0x264>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	3301      	adds	r3, #1
 800c82a:	4a94      	ldr	r2, [pc, #592]	@ (800ca7c <tcp_slowtmr+0x264>)
 800c82c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c82e:	4b94      	ldr	r3, [pc, #592]	@ (800ca80 <tcp_slowtmr+0x268>)
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	3301      	adds	r3, #1
 800c834:	b2da      	uxtb	r2, r3
 800c836:	4b92      	ldr	r3, [pc, #584]	@ (800ca80 <tcp_slowtmr+0x268>)
 800c838:	701a      	strb	r2, [r3, #0]
 800c83a:	e000      	b.n	800c83e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800c83c:	bf00      	nop
  prev = NULL;
 800c83e:	2300      	movs	r3, #0
 800c840:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800c842:	4b90      	ldr	r3, [pc, #576]	@ (800ca84 <tcp_slowtmr+0x26c>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c848:	e29f      	b.n	800cd8a <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c84c:	7d1b      	ldrb	r3, [r3, #20]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d106      	bne.n	800c860 <tcp_slowtmr+0x48>
 800c852:	4b8d      	ldr	r3, [pc, #564]	@ (800ca88 <tcp_slowtmr+0x270>)
 800c854:	f240 42be 	movw	r2, #1214	@ 0x4be
 800c858:	498c      	ldr	r1, [pc, #560]	@ (800ca8c <tcp_slowtmr+0x274>)
 800c85a:	488d      	ldr	r0, [pc, #564]	@ (800ca90 <tcp_slowtmr+0x278>)
 800c85c:	f007 ff6a 	bl	8014734 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c862:	7d1b      	ldrb	r3, [r3, #20]
 800c864:	2b01      	cmp	r3, #1
 800c866:	d106      	bne.n	800c876 <tcp_slowtmr+0x5e>
 800c868:	4b87      	ldr	r3, [pc, #540]	@ (800ca88 <tcp_slowtmr+0x270>)
 800c86a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800c86e:	4989      	ldr	r1, [pc, #548]	@ (800ca94 <tcp_slowtmr+0x27c>)
 800c870:	4887      	ldr	r0, [pc, #540]	@ (800ca90 <tcp_slowtmr+0x278>)
 800c872:	f007 ff5f 	bl	8014734 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c878:	7d1b      	ldrb	r3, [r3, #20]
 800c87a:	2b0a      	cmp	r3, #10
 800c87c:	d106      	bne.n	800c88c <tcp_slowtmr+0x74>
 800c87e:	4b82      	ldr	r3, [pc, #520]	@ (800ca88 <tcp_slowtmr+0x270>)
 800c880:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800c884:	4984      	ldr	r1, [pc, #528]	@ (800ca98 <tcp_slowtmr+0x280>)
 800c886:	4882      	ldr	r0, [pc, #520]	@ (800ca90 <tcp_slowtmr+0x278>)
 800c888:	f007 ff54 	bl	8014734 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c88e:	7f9a      	ldrb	r2, [r3, #30]
 800c890:	4b7b      	ldr	r3, [pc, #492]	@ (800ca80 <tcp_slowtmr+0x268>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	429a      	cmp	r2, r3
 800c896:	d105      	bne.n	800c8a4 <tcp_slowtmr+0x8c>
      prev = pcb;
 800c898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c89a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800c8a2:	e272      	b.n	800cd8a <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800c8a4:	4b76      	ldr	r3, [pc, #472]	@ (800ca80 <tcp_slowtmr+0x268>)
 800c8a6:	781a      	ldrb	r2, [r3, #0]
 800c8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8aa:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ba:	7d1b      	ldrb	r3, [r3, #20]
 800c8bc:	2b02      	cmp	r3, #2
 800c8be:	d10a      	bne.n	800c8d6 <tcp_slowtmr+0xbe>
 800c8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c8c6:	2b05      	cmp	r3, #5
 800c8c8:	d905      	bls.n	800c8d6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800c8ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c8d4:	e11e      	b.n	800cb14 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c8dc:	2b0b      	cmp	r3, #11
 800c8de:	d905      	bls.n	800c8ec <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800c8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c8ea:	e113      	b.n	800cb14 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800c8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d075      	beq.n	800c9e2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d006      	beq.n	800c90c <tcp_slowtmr+0xf4>
 800c8fe:	4b62      	ldr	r3, [pc, #392]	@ (800ca88 <tcp_slowtmr+0x270>)
 800c900:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800c904:	4965      	ldr	r1, [pc, #404]	@ (800ca9c <tcp_slowtmr+0x284>)
 800c906:	4862      	ldr	r0, [pc, #392]	@ (800ca90 <tcp_slowtmr+0x278>)
 800c908:	f007 ff14 	bl	8014734 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c90e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c910:	2b00      	cmp	r3, #0
 800c912:	d106      	bne.n	800c922 <tcp_slowtmr+0x10a>
 800c914:	4b5c      	ldr	r3, [pc, #368]	@ (800ca88 <tcp_slowtmr+0x270>)
 800c916:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800c91a:	4961      	ldr	r1, [pc, #388]	@ (800caa0 <tcp_slowtmr+0x288>)
 800c91c:	485c      	ldr	r0, [pc, #368]	@ (800ca90 <tcp_slowtmr+0x278>)
 800c91e:	f007 ff09 	bl	8014734 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c924:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c928:	2b0b      	cmp	r3, #11
 800c92a:	d905      	bls.n	800c938 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800c92c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c930:	3301      	adds	r3, #1
 800c932:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c936:	e0ed      	b.n	800cb14 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c93a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c93e:	3b01      	subs	r3, #1
 800c940:	4a58      	ldr	r2, [pc, #352]	@ (800caa4 <tcp_slowtmr+0x28c>)
 800c942:	5cd3      	ldrb	r3, [r2, r3]
 800c944:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c948:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c94c:	7c7a      	ldrb	r2, [r7, #17]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d907      	bls.n	800c962 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800c952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c954:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c958:	3301      	adds	r3, #1
 800c95a:	b2da      	uxtb	r2, r3
 800c95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c95e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800c962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c964:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c968:	7c7a      	ldrb	r2, [r7, #17]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	f200 80d2 	bhi.w	800cb14 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800c970:	2301      	movs	r3, #1
 800c972:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800c974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c976:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d108      	bne.n	800c990 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c97e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c980:	f004 fc24 	bl	80111cc <tcp_zero_window_probe>
 800c984:	4603      	mov	r3, r0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d014      	beq.n	800c9b4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800c98a:	2300      	movs	r3, #0
 800c98c:	623b      	str	r3, [r7, #32]
 800c98e:	e011      	b.n	800c9b4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c992:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c996:	4619      	mov	r1, r3
 800c998:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c99a:	f003 fae9 	bl	800ff70 <tcp_split_unsent_seg>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d107      	bne.n	800c9b4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800c9a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c9a6:	f003 fd69 	bl	801047c <tcp_output>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d101      	bne.n	800c9b4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800c9b4:	6a3b      	ldr	r3, [r7, #32]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f000 80ac 	beq.w	800cb14 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800c9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c9ca:	2b06      	cmp	r3, #6
 800c9cc:	f200 80a2 	bhi.w	800cb14 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800c9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	b2da      	uxtb	r2, r3
 800c9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9dc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800c9e0:	e098      	b.n	800cb14 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	db0f      	blt.n	800ca0c <tcp_slowtmr+0x1f4>
 800c9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c9f2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d008      	beq.n	800ca0c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800c9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	3301      	adds	r3, #1
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	b21a      	sxth	r2, r3
 800ca08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca0a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800ca0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca0e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800ca12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca14:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	db7b      	blt.n	800cb14 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ca1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca1e:	f004 f821 	bl	8010a64 <tcp_rexmit_rto_prepare>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d007      	beq.n	800ca38 <tcp_slowtmr+0x220>
 800ca28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d171      	bne.n	800cb14 <tcp_slowtmr+0x2fc>
 800ca30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d06d      	beq.n	800cb14 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800ca38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca3a:	7d1b      	ldrb	r3, [r3, #20]
 800ca3c:	2b02      	cmp	r3, #2
 800ca3e:	d03a      	beq.n	800cab6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ca40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ca46:	2b0c      	cmp	r3, #12
 800ca48:	bf28      	it	cs
 800ca4a:	230c      	movcs	r3, #12
 800ca4c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ca4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ca54:	10db      	asrs	r3, r3, #3
 800ca56:	b21b      	sxth	r3, r3
 800ca58:	461a      	mov	r2, r3
 800ca5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ca60:	4413      	add	r3, r2
 800ca62:	7efa      	ldrb	r2, [r7, #27]
 800ca64:	4910      	ldr	r1, [pc, #64]	@ (800caa8 <tcp_slowtmr+0x290>)
 800ca66:	5c8a      	ldrb	r2, [r1, r2]
 800ca68:	4093      	lsls	r3, r2
 800ca6a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ca72:	4293      	cmp	r3, r2
 800ca74:	dc1a      	bgt.n	800caac <tcp_slowtmr+0x294>
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	b21a      	sxth	r2, r3
 800ca7a:	e019      	b.n	800cab0 <tcp_slowtmr+0x298>
 800ca7c:	2000b10c 	.word	0x2000b10c
 800ca80:	2000b122 	.word	0x2000b122
 800ca84:	2000b118 	.word	0x2000b118
 800ca88:	08016028 	.word	0x08016028
 800ca8c:	0801636c 	.word	0x0801636c
 800ca90:	0801606c 	.word	0x0801606c
 800ca94:	08016398 	.word	0x08016398
 800ca98:	080163c4 	.word	0x080163c4
 800ca9c:	080163f4 	.word	0x080163f4
 800caa0:	08016428 	.word	0x08016428
 800caa4:	08018008 	.word	0x08018008
 800caa8:	08017ff8 	.word	0x08017ff8
 800caac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800cab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800cab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab8:	2200      	movs	r2, #0
 800caba:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cabe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cac8:	4293      	cmp	r3, r2
 800caca:	bf28      	it	cs
 800cacc:	4613      	movcs	r3, r2
 800cace:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cad0:	8a7b      	ldrh	r3, [r7, #18]
 800cad2:	085b      	lsrs	r3, r3, #1
 800cad4:	b29a      	uxth	r2, r3
 800cad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cad8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cade:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800cae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cae4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cae6:	005b      	lsls	r3, r3, #1
 800cae8:	b29b      	uxth	r3, r3
 800caea:	429a      	cmp	r2, r3
 800caec:	d206      	bcs.n	800cafc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800caee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caf0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800caf2:	005b      	lsls	r3, r3, #1
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caf8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800cafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cafe:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800cb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb02:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800cb06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800cb0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb10:	f004 f818 	bl	8010b44 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800cb14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb16:	7d1b      	ldrb	r3, [r3, #20]
 800cb18:	2b06      	cmp	r3, #6
 800cb1a:	d111      	bne.n	800cb40 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800cb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1e:	8b5b      	ldrh	r3, [r3, #26]
 800cb20:	f003 0310 	and.w	r3, r3, #16
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00b      	beq.n	800cb40 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb28:	4b9d      	ldr	r3, [pc, #628]	@ (800cda0 <tcp_slowtmr+0x588>)
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb2e:	6a1b      	ldr	r3, [r3, #32]
 800cb30:	1ad3      	subs	r3, r2, r3
 800cb32:	2b28      	cmp	r3, #40	@ 0x28
 800cb34:	d904      	bls.n	800cb40 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800cb36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cb40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb42:	7a5b      	ldrb	r3, [r3, #9]
 800cb44:	f003 0308 	and.w	r3, r3, #8
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d04c      	beq.n	800cbe6 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800cb4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb4e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cb50:	2b04      	cmp	r3, #4
 800cb52:	d003      	beq.n	800cb5c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800cb54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb56:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cb58:	2b07      	cmp	r3, #7
 800cb5a:	d144      	bne.n	800cbe6 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb5c:	4b90      	ldr	r3, [pc, #576]	@ (800cda0 <tcp_slowtmr+0x588>)
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb62:	6a1b      	ldr	r3, [r3, #32]
 800cb64:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cb6c:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800cb70:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800cb74:	498b      	ldr	r1, [pc, #556]	@ (800cda4 <tcp_slowtmr+0x58c>)
 800cb76:	fba1 1303 	umull	r1, r3, r1, r3
 800cb7a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d90a      	bls.n	800cb96 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800cb80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb84:	3301      	adds	r3, #1
 800cb86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800cb8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb8e:	3301      	adds	r3, #1
 800cb90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cb94:	e027      	b.n	800cbe6 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb96:	4b82      	ldr	r3, [pc, #520]	@ (800cda0 <tcp_slowtmr+0x588>)
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb9c:	6a1b      	ldr	r3, [r3, #32]
 800cb9e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800cba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cbac:	4618      	mov	r0, r3
 800cbae:	4b7e      	ldr	r3, [pc, #504]	@ (800cda8 <tcp_slowtmr+0x590>)
 800cbb0:	fb00 f303 	mul.w	r3, r0, r3
 800cbb4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cbb6:	497b      	ldr	r1, [pc, #492]	@ (800cda4 <tcp_slowtmr+0x58c>)
 800cbb8:	fba1 1303 	umull	r1, r3, r1, r3
 800cbbc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d911      	bls.n	800cbe6 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800cbc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cbc4:	f004 fac2 	bl	801114c <tcp_keepalive>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800cbce:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d107      	bne.n	800cbe6 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800cbd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cbdc:	3301      	adds	r3, #1
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbe2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800cbe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d011      	beq.n	800cc12 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cbee:	4b6c      	ldr	r3, [pc, #432]	@ (800cda0 <tcp_slowtmr+0x588>)
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbf4:	6a1b      	ldr	r3, [r3, #32]
 800cbf6:	1ad2      	subs	r2, r2, r3
 800cbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbfa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800cbfe:	4619      	mov	r1, r3
 800cc00:	460b      	mov	r3, r1
 800cc02:	005b      	lsls	r3, r3, #1
 800cc04:	440b      	add	r3, r1
 800cc06:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d302      	bcc.n	800cc12 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800cc0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc0e:	f000 fddb 	bl	800d7c8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800cc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc14:	7d1b      	ldrb	r3, [r3, #20]
 800cc16:	2b03      	cmp	r3, #3
 800cc18:	d10b      	bne.n	800cc32 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc1a:	4b61      	ldr	r3, [pc, #388]	@ (800cda0 <tcp_slowtmr+0x588>)
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc20:	6a1b      	ldr	r3, [r3, #32]
 800cc22:	1ad3      	subs	r3, r2, r3
 800cc24:	2b28      	cmp	r3, #40	@ 0x28
 800cc26:	d904      	bls.n	800cc32 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800cc28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800cc32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc34:	7d1b      	ldrb	r3, [r3, #20]
 800cc36:	2b09      	cmp	r3, #9
 800cc38:	d10b      	bne.n	800cc52 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cc3a:	4b59      	ldr	r3, [pc, #356]	@ (800cda0 <tcp_slowtmr+0x588>)
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc40:	6a1b      	ldr	r3, [r3, #32]
 800cc42:	1ad3      	subs	r3, r2, r3
 800cc44:	2bf0      	cmp	r3, #240	@ 0xf0
 800cc46:	d904      	bls.n	800cc52 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800cc48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800cc52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d060      	beq.n	800cd1c <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800cc5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc60:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800cc62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc64:	f000 fbfc 	bl	800d460 <tcp_pcb_purge>
      if (prev != NULL) {
 800cc68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d010      	beq.n	800cc90 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cc6e:	4b4f      	ldr	r3, [pc, #316]	@ (800cdac <tcp_slowtmr+0x594>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d106      	bne.n	800cc86 <tcp_slowtmr+0x46e>
 800cc78:	4b4d      	ldr	r3, [pc, #308]	@ (800cdb0 <tcp_slowtmr+0x598>)
 800cc7a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800cc7e:	494d      	ldr	r1, [pc, #308]	@ (800cdb4 <tcp_slowtmr+0x59c>)
 800cc80:	484d      	ldr	r0, [pc, #308]	@ (800cdb8 <tcp_slowtmr+0x5a0>)
 800cc82:	f007 fd57 	bl	8014734 <iprintf>
        prev->next = pcb->next;
 800cc86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc88:	68da      	ldr	r2, [r3, #12]
 800cc8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc8c:	60da      	str	r2, [r3, #12]
 800cc8e:	e00f      	b.n	800ccb0 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cc90:	4b46      	ldr	r3, [pc, #280]	@ (800cdac <tcp_slowtmr+0x594>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d006      	beq.n	800cca8 <tcp_slowtmr+0x490>
 800cc9a:	4b45      	ldr	r3, [pc, #276]	@ (800cdb0 <tcp_slowtmr+0x598>)
 800cc9c:	f240 5271 	movw	r2, #1393	@ 0x571
 800cca0:	4946      	ldr	r1, [pc, #280]	@ (800cdbc <tcp_slowtmr+0x5a4>)
 800cca2:	4845      	ldr	r0, [pc, #276]	@ (800cdb8 <tcp_slowtmr+0x5a0>)
 800cca4:	f007 fd46 	bl	8014734 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	4a3f      	ldr	r2, [pc, #252]	@ (800cdac <tcp_slowtmr+0x594>)
 800ccae:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800ccb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d013      	beq.n	800cce0 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ccb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccba:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ccbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccbe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ccc0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800ccc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc4:	3304      	adds	r3, #4
 800ccc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccc8:	8ad2      	ldrh	r2, [r2, #22]
 800ccca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cccc:	8b09      	ldrh	r1, [r1, #24]
 800ccce:	9102      	str	r1, [sp, #8]
 800ccd0:	9201      	str	r2, [sp, #4]
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	462b      	mov	r3, r5
 800ccd6:	4622      	mov	r2, r4
 800ccd8:	4601      	mov	r1, r0
 800ccda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccdc:	f004 f982 	bl	8010fe4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800cce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cce2:	691b      	ldr	r3, [r3, #16]
 800cce4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cce8:	7d1b      	ldrb	r3, [r3, #20]
 800ccea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ccec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ccf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ccf6:	6838      	ldr	r0, [r7, #0]
 800ccf8:	f7ff f9f0 	bl	800c0dc <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ccfc:	4b30      	ldr	r3, [pc, #192]	@ (800cdc0 <tcp_slowtmr+0x5a8>)
 800ccfe:	2200      	movs	r2, #0
 800cd00:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d004      	beq.n	800cd12 <tcp_slowtmr+0x4fa>
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f06f 010c 	mvn.w	r1, #12
 800cd0e:	68b8      	ldr	r0, [r7, #8]
 800cd10:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cd12:	4b2b      	ldr	r3, [pc, #172]	@ (800cdc0 <tcp_slowtmr+0x5a8>)
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d037      	beq.n	800cd8a <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800cd1a:	e590      	b.n	800c83e <tcp_slowtmr+0x26>
      prev = pcb;
 800cd1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800cd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd28:	7f1b      	ldrb	r3, [r3, #28]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	b2da      	uxtb	r2, r3
 800cd2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd30:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd34:	7f1a      	ldrb	r2, [r3, #28]
 800cd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd38:	7f5b      	ldrb	r3, [r3, #29]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d325      	bcc.n	800cd8a <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800cd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd40:	2200      	movs	r2, #0
 800cd42:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800cd44:	4b1e      	ldr	r3, [pc, #120]	@ (800cdc0 <tcp_slowtmr+0x5a8>)
 800cd46:	2200      	movs	r2, #0
 800cd48:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d00b      	beq.n	800cd6c <tcp_slowtmr+0x554>
 800cd54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd5c:	6912      	ldr	r2, [r2, #16]
 800cd5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd60:	4610      	mov	r0, r2
 800cd62:	4798      	blx	r3
 800cd64:	4603      	mov	r3, r0
 800cd66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800cd6a:	e002      	b.n	800cd72 <tcp_slowtmr+0x55a>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800cd72:	4b13      	ldr	r3, [pc, #76]	@ (800cdc0 <tcp_slowtmr+0x5a8>)
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f47f ad60 	bne.w	800c83c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cd7c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d102      	bne.n	800cd8a <tcp_slowtmr+0x572>
          tcp_output(prev);
 800cd84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd86:	f003 fb79 	bl	801047c <tcp_output>
  while (pcb != NULL) {
 800cd8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f47f ad5c 	bne.w	800c84a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cd92:	2300      	movs	r3, #0
 800cd94:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800cd96:	4b0b      	ldr	r3, [pc, #44]	@ (800cdc4 <tcp_slowtmr+0x5ac>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cd9c:	e067      	b.n	800ce6e <tcp_slowtmr+0x656>
 800cd9e:	bf00      	nop
 800cda0:	2000b10c 	.word	0x2000b10c
 800cda4:	10624dd3 	.word	0x10624dd3
 800cda8:	000124f8 	.word	0x000124f8
 800cdac:	2000b118 	.word	0x2000b118
 800cdb0:	08016028 	.word	0x08016028
 800cdb4:	08016460 	.word	0x08016460
 800cdb8:	0801606c 	.word	0x0801606c
 800cdbc:	0801648c 	.word	0x0801648c
 800cdc0:	2000b120 	.word	0x2000b120
 800cdc4:	2000b11c 	.word	0x2000b11c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cdc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdca:	7d1b      	ldrb	r3, [r3, #20]
 800cdcc:	2b0a      	cmp	r3, #10
 800cdce:	d006      	beq.n	800cdde <tcp_slowtmr+0x5c6>
 800cdd0:	4b2b      	ldr	r3, [pc, #172]	@ (800ce80 <tcp_slowtmr+0x668>)
 800cdd2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800cdd6:	492b      	ldr	r1, [pc, #172]	@ (800ce84 <tcp_slowtmr+0x66c>)
 800cdd8:	482b      	ldr	r0, [pc, #172]	@ (800ce88 <tcp_slowtmr+0x670>)
 800cdda:	f007 fcab 	bl	8014734 <iprintf>
    pcb_remove = 0;
 800cdde:	2300      	movs	r3, #0
 800cde0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cde4:	4b29      	ldr	r3, [pc, #164]	@ (800ce8c <tcp_slowtmr+0x674>)
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdea:	6a1b      	ldr	r3, [r3, #32]
 800cdec:	1ad3      	subs	r3, r2, r3
 800cdee:	2bf0      	cmp	r3, #240	@ 0xf0
 800cdf0:	d904      	bls.n	800cdfc <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800cdf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cdfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d02f      	beq.n	800ce64 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ce04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce06:	f000 fb2b 	bl	800d460 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ce0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d010      	beq.n	800ce32 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ce10:	4b1f      	ldr	r3, [pc, #124]	@ (800ce90 <tcp_slowtmr+0x678>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d106      	bne.n	800ce28 <tcp_slowtmr+0x610>
 800ce1a:	4b19      	ldr	r3, [pc, #100]	@ (800ce80 <tcp_slowtmr+0x668>)
 800ce1c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800ce20:	491c      	ldr	r1, [pc, #112]	@ (800ce94 <tcp_slowtmr+0x67c>)
 800ce22:	4819      	ldr	r0, [pc, #100]	@ (800ce88 <tcp_slowtmr+0x670>)
 800ce24:	f007 fc86 	bl	8014734 <iprintf>
        prev->next = pcb->next;
 800ce28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce2a:	68da      	ldr	r2, [r3, #12]
 800ce2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2e:	60da      	str	r2, [r3, #12]
 800ce30:	e00f      	b.n	800ce52 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ce32:	4b17      	ldr	r3, [pc, #92]	@ (800ce90 <tcp_slowtmr+0x678>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d006      	beq.n	800ce4a <tcp_slowtmr+0x632>
 800ce3c:	4b10      	ldr	r3, [pc, #64]	@ (800ce80 <tcp_slowtmr+0x668>)
 800ce3e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800ce42:	4915      	ldr	r1, [pc, #84]	@ (800ce98 <tcp_slowtmr+0x680>)
 800ce44:	4810      	ldr	r0, [pc, #64]	@ (800ce88 <tcp_slowtmr+0x670>)
 800ce46:	f007 fc75 	bl	8014734 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ce4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	4a10      	ldr	r2, [pc, #64]	@ (800ce90 <tcp_slowtmr+0x678>)
 800ce50:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ce52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce54:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ce56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ce5c:	69f8      	ldr	r0, [r7, #28]
 800ce5e:	f7ff f93d 	bl	800c0dc <tcp_free>
 800ce62:	e004      	b.n	800ce6e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800ce64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce66:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ce68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ce6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d1a9      	bne.n	800cdc8 <tcp_slowtmr+0x5b0>
    }
  }
}
 800ce74:	bf00      	nop
 800ce76:	bf00      	nop
 800ce78:	3730      	adds	r7, #48	@ 0x30
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bdb0      	pop	{r4, r5, r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	08016028 	.word	0x08016028
 800ce84:	080164b8 	.word	0x080164b8
 800ce88:	0801606c 	.word	0x0801606c
 800ce8c:	2000b10c 	.word	0x2000b10c
 800ce90:	2000b11c 	.word	0x2000b11c
 800ce94:	080164e8 	.word	0x080164e8
 800ce98:	08016510 	.word	0x08016510

0800ce9c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cea2:	4b2d      	ldr	r3, [pc, #180]	@ (800cf58 <tcp_fasttmr+0xbc>)
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	3301      	adds	r3, #1
 800cea8:	b2da      	uxtb	r2, r3
 800ceaa:	4b2b      	ldr	r3, [pc, #172]	@ (800cf58 <tcp_fasttmr+0xbc>)
 800ceac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ceae:	4b2b      	ldr	r3, [pc, #172]	@ (800cf5c <tcp_fasttmr+0xc0>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ceb4:	e048      	b.n	800cf48 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	7f9a      	ldrb	r2, [r3, #30]
 800ceba:	4b27      	ldr	r3, [pc, #156]	@ (800cf58 <tcp_fasttmr+0xbc>)
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d03f      	beq.n	800cf42 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cec2:	4b25      	ldr	r3, [pc, #148]	@ (800cf58 <tcp_fasttmr+0xbc>)
 800cec4:	781a      	ldrb	r2, [r3, #0]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	8b5b      	ldrh	r3, [r3, #26]
 800cece:	f003 0301 	and.w	r3, r3, #1
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d010      	beq.n	800cef8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	8b5b      	ldrh	r3, [r3, #26]
 800ceda:	f043 0302 	orr.w	r3, r3, #2
 800cede:	b29a      	uxth	r2, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f003 fac9 	bl	801047c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	8b5b      	ldrh	r3, [r3, #26]
 800ceee:	f023 0303 	bic.w	r3, r3, #3
 800cef2:	b29a      	uxth	r2, r3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	8b5b      	ldrh	r3, [r3, #26]
 800cefc:	f003 0308 	and.w	r3, r3, #8
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d009      	beq.n	800cf18 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	8b5b      	ldrh	r3, [r3, #26]
 800cf08:	f023 0308 	bic.w	r3, r3, #8
 800cf0c:	b29a      	uxth	r2, r3
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7ff fa76 	bl	800c404 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00a      	beq.n	800cf3c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cf26:	4b0e      	ldr	r3, [pc, #56]	@ (800cf60 <tcp_fasttmr+0xc4>)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 f819 	bl	800cf64 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cf32:	4b0b      	ldr	r3, [pc, #44]	@ (800cf60 <tcp_fasttmr+0xc4>)
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d000      	beq.n	800cf3c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cf3a:	e7b8      	b.n	800ceae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	607b      	str	r3, [r7, #4]
 800cf40:	e002      	b.n	800cf48 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d1b3      	bne.n	800ceb6 <tcp_fasttmr+0x1a>
    }
  }
}
 800cf4e:	bf00      	nop
 800cf50:	bf00      	nop
 800cf52:	3708      	adds	r7, #8
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}
 800cf58:	2000b122 	.word	0x2000b122
 800cf5c:	2000b118 	.word	0x2000b118
 800cf60:	2000b120 	.word	0x2000b120

0800cf64 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cf64:	b590      	push	{r4, r7, lr}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d109      	bne.n	800cf86 <tcp_process_refused_data+0x22>
 800cf72:	4b37      	ldr	r3, [pc, #220]	@ (800d050 <tcp_process_refused_data+0xec>)
 800cf74:	f240 6209 	movw	r2, #1545	@ 0x609
 800cf78:	4936      	ldr	r1, [pc, #216]	@ (800d054 <tcp_process_refused_data+0xf0>)
 800cf7a:	4837      	ldr	r0, [pc, #220]	@ (800d058 <tcp_process_refused_data+0xf4>)
 800cf7c:	f007 fbda 	bl	8014734 <iprintf>
 800cf80:	f06f 030f 	mvn.w	r3, #15
 800cf84:	e060      	b.n	800d048 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf8a:	7b5b      	ldrb	r3, [r3, #13]
 800cf8c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf92:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00b      	beq.n	800cfbc <tcp_process_refused_data+0x58>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6918      	ldr	r0, [r3, #16]
 800cfae:	2300      	movs	r3, #0
 800cfb0:	68ba      	ldr	r2, [r7, #8]
 800cfb2:	6879      	ldr	r1, [r7, #4]
 800cfb4:	47a0      	blx	r4
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	73fb      	strb	r3, [r7, #15]
 800cfba:	e007      	b.n	800cfcc <tcp_process_refused_data+0x68>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	6879      	ldr	r1, [r7, #4]
 800cfc2:	2000      	movs	r0, #0
 800cfc4:	f000 f8a4 	bl	800d110 <tcp_recv_null>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cfcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d12a      	bne.n	800d02a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cfd4:	7bbb      	ldrb	r3, [r7, #14]
 800cfd6:	f003 0320 	and.w	r3, r3, #32
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d033      	beq.n	800d046 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cfe2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cfe6:	d005      	beq.n	800cff4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cfec:	3301      	adds	r3, #1
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d00b      	beq.n	800d016 <tcp_process_refused_data+0xb2>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6918      	ldr	r0, [r3, #16]
 800d008:	2300      	movs	r3, #0
 800d00a:	2200      	movs	r2, #0
 800d00c:	6879      	ldr	r1, [r7, #4]
 800d00e:	47a0      	blx	r4
 800d010:	4603      	mov	r3, r0
 800d012:	73fb      	strb	r3, [r7, #15]
 800d014:	e001      	b.n	800d01a <tcp_process_refused_data+0xb6>
 800d016:	2300      	movs	r3, #0
 800d018:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d01a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d01e:	f113 0f0d 	cmn.w	r3, #13
 800d022:	d110      	bne.n	800d046 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d024:	f06f 030c 	mvn.w	r3, #12
 800d028:	e00e      	b.n	800d048 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d02a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d02e:	f113 0f0d 	cmn.w	r3, #13
 800d032:	d102      	bne.n	800d03a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d034:	f06f 030c 	mvn.w	r3, #12
 800d038:	e006      	b.n	800d048 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	68ba      	ldr	r2, [r7, #8]
 800d03e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800d040:	f06f 0304 	mvn.w	r3, #4
 800d044:	e000      	b.n	800d048 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d046:	2300      	movs	r3, #0
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd90      	pop	{r4, r7, pc}
 800d050:	08016028 	.word	0x08016028
 800d054:	08016538 	.word	0x08016538
 800d058:	0801606c 	.word	0x0801606c

0800d05c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d064:	e007      	b.n	800d076 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 f80a 	bl	800d086 <tcp_seg_free>
    seg = next;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1f4      	bne.n	800d066 <tcp_segs_free+0xa>
  }
}
 800d07c:	bf00      	nop
 800d07e:	bf00      	nop
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b082      	sub	sp, #8
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00c      	beq.n	800d0ae <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d004      	beq.n	800d0a6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7fe fcd9 	bl	800ba58 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d0a6:	6879      	ldr	r1, [r7, #4]
 800d0a8:	2003      	movs	r0, #3
 800d0aa:	f7fd fe5f 	bl	800ad6c <memp_free>
  }
}
 800d0ae:	bf00      	nop
 800d0b0:	3708      	adds	r7, #8
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
	...

0800d0b8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d106      	bne.n	800d0d4 <tcp_seg_copy+0x1c>
 800d0c6:	4b0f      	ldr	r3, [pc, #60]	@ (800d104 <tcp_seg_copy+0x4c>)
 800d0c8:	f240 6282 	movw	r2, #1666	@ 0x682
 800d0cc:	490e      	ldr	r1, [pc, #56]	@ (800d108 <tcp_seg_copy+0x50>)
 800d0ce:	480f      	ldr	r0, [pc, #60]	@ (800d10c <tcp_seg_copy+0x54>)
 800d0d0:	f007 fb30 	bl	8014734 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d0d4:	2003      	movs	r0, #3
 800d0d6:	f7fd fdd9 	bl	800ac8c <memp_malloc>
 800d0da:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <tcp_seg_copy+0x2e>
    return NULL;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	e00a      	b.n	800d0fc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d0e6:	2210      	movs	r2, #16
 800d0e8:	6879      	ldr	r1, [r7, #4]
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	f007 fbfd 	bl	80148ea <memcpy>
  pbuf_ref(cseg->p);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7fe fd4f 	bl	800bb98 <pbuf_ref>
  return cseg;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3710      	adds	r7, #16
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	08016028 	.word	0x08016028
 800d108:	0801657c 	.word	0x0801657c
 800d10c:	0801606c 	.word	0x0801606c

0800d110 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
 800d11c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d109      	bne.n	800d138 <tcp_recv_null+0x28>
 800d124:	4b12      	ldr	r3, [pc, #72]	@ (800d170 <tcp_recv_null+0x60>)
 800d126:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d12a:	4912      	ldr	r1, [pc, #72]	@ (800d174 <tcp_recv_null+0x64>)
 800d12c:	4812      	ldr	r0, [pc, #72]	@ (800d178 <tcp_recv_null+0x68>)
 800d12e:	f007 fb01 	bl	8014734 <iprintf>
 800d132:	f06f 030f 	mvn.w	r3, #15
 800d136:	e016      	b.n	800d166 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d009      	beq.n	800d152 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	891b      	ldrh	r3, [r3, #8]
 800d142:	4619      	mov	r1, r3
 800d144:	68b8      	ldr	r0, [r7, #8]
 800d146:	f7ff fb17 	bl	800c778 <tcp_recved>
    pbuf_free(p);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f7fe fc84 	bl	800ba58 <pbuf_free>
 800d150:	e008      	b.n	800d164 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d104      	bne.n	800d164 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d15a:	68b8      	ldr	r0, [r7, #8]
 800d15c:	f7ff f9bc 	bl	800c4d8 <tcp_close>
 800d160:	4603      	mov	r3, r0
 800d162:	e000      	b.n	800d166 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	08016028 	.word	0x08016028
 800d174:	08016598 	.word	0x08016598
 800d178:	0801606c 	.word	0x0801606c

0800d17c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b086      	sub	sp, #24
 800d180:	af00      	add	r7, sp, #0
 800d182:	4603      	mov	r3, r0
 800d184:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	db01      	blt.n	800d192 <tcp_kill_prio+0x16>
 800d18e:	79fb      	ldrb	r3, [r7, #7]
 800d190:	e000      	b.n	800d194 <tcp_kill_prio+0x18>
 800d192:	237f      	movs	r3, #127	@ 0x7f
 800d194:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d196:	7afb      	ldrb	r3, [r7, #11]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d034      	beq.n	800d206 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d19c:	7afb      	ldrb	r3, [r7, #11]
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1aa:	4b19      	ldr	r3, [pc, #100]	@ (800d210 <tcp_kill_prio+0x94>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	617b      	str	r3, [r7, #20]
 800d1b0:	e01f      	b.n	800d1f2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	7d5b      	ldrb	r3, [r3, #21]
 800d1b6:	7afa      	ldrb	r2, [r7, #11]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d80c      	bhi.n	800d1d6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d1c0:	7afa      	ldrb	r2, [r7, #11]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d112      	bne.n	800d1ec <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d1c6:	4b13      	ldr	r3, [pc, #76]	@ (800d214 <tcp_kill_prio+0x98>)
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	6a1b      	ldr	r3, [r3, #32]
 800d1ce:	1ad3      	subs	r3, r2, r3
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d80a      	bhi.n	800d1ec <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d1d6:	4b0f      	ldr	r3, [pc, #60]	@ (800d214 <tcp_kill_prio+0x98>)
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	6a1b      	ldr	r3, [r3, #32]
 800d1de:	1ad3      	subs	r3, r2, r3
 800d1e0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	7d5b      	ldrb	r3, [r3, #21]
 800d1ea:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	617b      	str	r3, [r7, #20]
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d1dc      	bne.n	800d1b2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d004      	beq.n	800d208 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d1fe:	6938      	ldr	r0, [r7, #16]
 800d200:	f7ff fa54 	bl	800c6ac <tcp_abort>
 800d204:	e000      	b.n	800d208 <tcp_kill_prio+0x8c>
    return;
 800d206:	bf00      	nop
  }
}
 800d208:	3718      	adds	r7, #24
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	2000b118 	.word	0x2000b118
 800d214:	2000b10c 	.word	0x2000b10c

0800d218 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b086      	sub	sp, #24
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	4603      	mov	r3, r0
 800d220:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d222:	79fb      	ldrb	r3, [r7, #7]
 800d224:	2b08      	cmp	r3, #8
 800d226:	d009      	beq.n	800d23c <tcp_kill_state+0x24>
 800d228:	79fb      	ldrb	r3, [r7, #7]
 800d22a:	2b09      	cmp	r3, #9
 800d22c:	d006      	beq.n	800d23c <tcp_kill_state+0x24>
 800d22e:	4b1a      	ldr	r3, [pc, #104]	@ (800d298 <tcp_kill_state+0x80>)
 800d230:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800d234:	4919      	ldr	r1, [pc, #100]	@ (800d29c <tcp_kill_state+0x84>)
 800d236:	481a      	ldr	r0, [pc, #104]	@ (800d2a0 <tcp_kill_state+0x88>)
 800d238:	f007 fa7c 	bl	8014734 <iprintf>

  inactivity = 0;
 800d23c:	2300      	movs	r3, #0
 800d23e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d240:	2300      	movs	r3, #0
 800d242:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d244:	4b17      	ldr	r3, [pc, #92]	@ (800d2a4 <tcp_kill_state+0x8c>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	617b      	str	r3, [r7, #20]
 800d24a:	e017      	b.n	800d27c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	7d1b      	ldrb	r3, [r3, #20]
 800d250:	79fa      	ldrb	r2, [r7, #7]
 800d252:	429a      	cmp	r2, r3
 800d254:	d10f      	bne.n	800d276 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d256:	4b14      	ldr	r3, [pc, #80]	@ (800d2a8 <tcp_kill_state+0x90>)
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	6a1b      	ldr	r3, [r3, #32]
 800d25e:	1ad3      	subs	r3, r2, r3
 800d260:	68fa      	ldr	r2, [r7, #12]
 800d262:	429a      	cmp	r2, r3
 800d264:	d807      	bhi.n	800d276 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d266:	4b10      	ldr	r3, [pc, #64]	@ (800d2a8 <tcp_kill_state+0x90>)
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	6a1b      	ldr	r3, [r3, #32]
 800d26e:	1ad3      	subs	r3, r2, r3
 800d270:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	617b      	str	r3, [r7, #20]
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d1e4      	bne.n	800d24c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d003      	beq.n	800d290 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d288:	2100      	movs	r1, #0
 800d28a:	6938      	ldr	r0, [r7, #16]
 800d28c:	f7ff f950 	bl	800c530 <tcp_abandon>
  }
}
 800d290:	bf00      	nop
 800d292:	3718      	adds	r7, #24
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	08016028 	.word	0x08016028
 800d29c:	080165b4 	.word	0x080165b4
 800d2a0:	0801606c 	.word	0x0801606c
 800d2a4:	2000b118 	.word	0x2000b118
 800d2a8:	2000b10c 	.word	0x2000b10c

0800d2ac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2ba:	4b12      	ldr	r3, [pc, #72]	@ (800d304 <tcp_kill_timewait+0x58>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	60fb      	str	r3, [r7, #12]
 800d2c0:	e012      	b.n	800d2e8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d2c2:	4b11      	ldr	r3, [pc, #68]	@ (800d308 <tcp_kill_timewait+0x5c>)
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6a1b      	ldr	r3, [r3, #32]
 800d2ca:	1ad3      	subs	r3, r2, r3
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d807      	bhi.n	800d2e2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d308 <tcp_kill_timewait+0x5c>)
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6a1b      	ldr	r3, [r3, #32]
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	60fb      	str	r3, [r7, #12]
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1e9      	bne.n	800d2c2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d002      	beq.n	800d2fa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d2f4:	68b8      	ldr	r0, [r7, #8]
 800d2f6:	f7ff f9d9 	bl	800c6ac <tcp_abort>
  }
}
 800d2fa:	bf00      	nop
 800d2fc:	3710      	adds	r7, #16
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	2000b11c 	.word	0x2000b11c
 800d308:	2000b10c 	.word	0x2000b10c

0800d30c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d312:	4b10      	ldr	r3, [pc, #64]	@ (800d354 <tcp_handle_closepend+0x48>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d318:	e014      	b.n	800d344 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	8b5b      	ldrh	r3, [r3, #26]
 800d324:	f003 0308 	and.w	r3, r3, #8
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d009      	beq.n	800d340 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	8b5b      	ldrh	r3, [r3, #26]
 800d330:	f023 0308 	bic.w	r3, r3, #8
 800d334:	b29a      	uxth	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f7ff f862 	bl	800c404 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1e7      	bne.n	800d31a <tcp_handle_closepend+0xe>
  }
}
 800d34a:	bf00      	nop
 800d34c:	bf00      	nop
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	2000b118 	.word	0x2000b118

0800d358 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	4603      	mov	r3, r0
 800d360:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d362:	2001      	movs	r0, #1
 800d364:	f7fd fc92 	bl	800ac8c <memp_malloc>
 800d368:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d126      	bne.n	800d3be <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d370:	f7ff ffcc 	bl	800d30c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d374:	f7ff ff9a 	bl	800d2ac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d378:	2001      	movs	r0, #1
 800d37a:	f7fd fc87 	bl	800ac8c <memp_malloc>
 800d37e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d11b      	bne.n	800d3be <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d386:	2009      	movs	r0, #9
 800d388:	f7ff ff46 	bl	800d218 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d38c:	2001      	movs	r0, #1
 800d38e:	f7fd fc7d 	bl	800ac8c <memp_malloc>
 800d392:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d111      	bne.n	800d3be <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d39a:	2008      	movs	r0, #8
 800d39c:	f7ff ff3c 	bl	800d218 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d3a0:	2001      	movs	r0, #1
 800d3a2:	f7fd fc73 	bl	800ac8c <memp_malloc>
 800d3a6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d107      	bne.n	800d3be <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d3ae:	79fb      	ldrb	r3, [r7, #7]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7ff fee3 	bl	800d17c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d3b6:	2001      	movs	r0, #1
 800d3b8:	f7fd fc68 	bl	800ac8c <memp_malloc>
 800d3bc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d03f      	beq.n	800d444 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d3c4:	229c      	movs	r2, #156	@ 0x9c
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	68f8      	ldr	r0, [r7, #12]
 800d3ca:	f007 fa18 	bl	80147fe <memset>
    pcb->prio = prio;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	79fa      	ldrb	r2, [r7, #7]
 800d3d2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d3da:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d3e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	22ff      	movs	r2, #255	@ 0xff
 800d3f2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d3fa:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2206      	movs	r2, #6
 800d400:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2206      	movs	r2, #6
 800d408:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d410:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2201      	movs	r2, #1
 800d416:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800d41a:	4b0d      	ldr	r3, [pc, #52]	@ (800d450 <tcp_alloc+0xf8>)
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d422:	4b0c      	ldr	r3, [pc, #48]	@ (800d454 <tcp_alloc+0xfc>)
 800d424:	781a      	ldrb	r2, [r3, #0]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d430:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	4a08      	ldr	r2, [pc, #32]	@ (800d458 <tcp_alloc+0x100>)
 800d438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	4a07      	ldr	r2, [pc, #28]	@ (800d45c <tcp_alloc+0x104>)
 800d440:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d444:	68fb      	ldr	r3, [r7, #12]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	2000b10c 	.word	0x2000b10c
 800d454:	2000b122 	.word	0x2000b122
 800d458:	0800d111 	.word	0x0800d111
 800d45c:	006ddd00 	.word	0x006ddd00

0800d460 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d107      	bne.n	800d47e <tcp_pcb_purge+0x1e>
 800d46e:	4b21      	ldr	r3, [pc, #132]	@ (800d4f4 <tcp_pcb_purge+0x94>)
 800d470:	f640 0251 	movw	r2, #2129	@ 0x851
 800d474:	4920      	ldr	r1, [pc, #128]	@ (800d4f8 <tcp_pcb_purge+0x98>)
 800d476:	4821      	ldr	r0, [pc, #132]	@ (800d4fc <tcp_pcb_purge+0x9c>)
 800d478:	f007 f95c 	bl	8014734 <iprintf>
 800d47c:	e037      	b.n	800d4ee <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	7d1b      	ldrb	r3, [r3, #20]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d033      	beq.n	800d4ee <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d48a:	2b0a      	cmp	r3, #10
 800d48c:	d02f      	beq.n	800d4ee <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d492:	2b01      	cmp	r3, #1
 800d494:	d02b      	beq.n	800d4ee <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d007      	beq.n	800d4ae <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7fe fad8 	bl	800ba58 <pbuf_free>
      pcb->refused_data = NULL;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d002      	beq.n	800d4bc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 f986 	bl	800d7c8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d4c2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7ff fdc7 	bl	800d05c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7ff fdc2 	bl	800d05c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d4ee:	3708      	adds	r7, #8
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	08016028 	.word	0x08016028
 800d4f8:	08016674 	.word	0x08016674
 800d4fc:	0801606c 	.word	0x0801606c

0800d500 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d106      	bne.n	800d51e <tcp_pcb_remove+0x1e>
 800d510:	4b3e      	ldr	r3, [pc, #248]	@ (800d60c <tcp_pcb_remove+0x10c>)
 800d512:	f640 0283 	movw	r2, #2179	@ 0x883
 800d516:	493e      	ldr	r1, [pc, #248]	@ (800d610 <tcp_pcb_remove+0x110>)
 800d518:	483e      	ldr	r0, [pc, #248]	@ (800d614 <tcp_pcb_remove+0x114>)
 800d51a:	f007 f90b 	bl	8014734 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d106      	bne.n	800d532 <tcp_pcb_remove+0x32>
 800d524:	4b39      	ldr	r3, [pc, #228]	@ (800d60c <tcp_pcb_remove+0x10c>)
 800d526:	f640 0284 	movw	r2, #2180	@ 0x884
 800d52a:	493b      	ldr	r1, [pc, #236]	@ (800d618 <tcp_pcb_remove+0x118>)
 800d52c:	4839      	ldr	r0, [pc, #228]	@ (800d614 <tcp_pcb_remove+0x114>)
 800d52e:	f007 f901 	bl	8014734 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	683a      	ldr	r2, [r7, #0]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d105      	bne.n	800d548 <tcp_pcb_remove+0x48>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	68da      	ldr	r2, [r3, #12]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	601a      	str	r2, [r3, #0]
 800d546:	e013      	b.n	800d570 <tcp_pcb_remove+0x70>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	60fb      	str	r3, [r7, #12]
 800d54e:	e00c      	b.n	800d56a <tcp_pcb_remove+0x6a>
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	683a      	ldr	r2, [r7, #0]
 800d556:	429a      	cmp	r2, r3
 800d558:	d104      	bne.n	800d564 <tcp_pcb_remove+0x64>
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	68da      	ldr	r2, [r3, #12]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	60da      	str	r2, [r3, #12]
 800d562:	e005      	b.n	800d570 <tcp_pcb_remove+0x70>
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	60fb      	str	r3, [r7, #12]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d1ef      	bne.n	800d550 <tcp_pcb_remove+0x50>
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	2200      	movs	r2, #0
 800d574:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d576:	6838      	ldr	r0, [r7, #0]
 800d578:	f7ff ff72 	bl	800d460 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	7d1b      	ldrb	r3, [r3, #20]
 800d580:	2b0a      	cmp	r3, #10
 800d582:	d013      	beq.n	800d5ac <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d00f      	beq.n	800d5ac <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	8b5b      	ldrh	r3, [r3, #26]
 800d590:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d594:	2b00      	cmp	r3, #0
 800d596:	d009      	beq.n	800d5ac <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	8b5b      	ldrh	r3, [r3, #26]
 800d59c:	f043 0302 	orr.w	r3, r3, #2
 800d5a0:	b29a      	uxth	r2, r3
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d5a6:	6838      	ldr	r0, [r7, #0]
 800d5a8:	f002 ff68 	bl	801047c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	7d1b      	ldrb	r3, [r3, #20]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d020      	beq.n	800d5f6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d006      	beq.n	800d5ca <tcp_pcb_remove+0xca>
 800d5bc:	4b13      	ldr	r3, [pc, #76]	@ (800d60c <tcp_pcb_remove+0x10c>)
 800d5be:	f640 0293 	movw	r2, #2195	@ 0x893
 800d5c2:	4916      	ldr	r1, [pc, #88]	@ (800d61c <tcp_pcb_remove+0x11c>)
 800d5c4:	4813      	ldr	r0, [pc, #76]	@ (800d614 <tcp_pcb_remove+0x114>)
 800d5c6:	f007 f8b5 	bl	8014734 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d006      	beq.n	800d5e0 <tcp_pcb_remove+0xe0>
 800d5d2:	4b0e      	ldr	r3, [pc, #56]	@ (800d60c <tcp_pcb_remove+0x10c>)
 800d5d4:	f640 0294 	movw	r2, #2196	@ 0x894
 800d5d8:	4911      	ldr	r1, [pc, #68]	@ (800d620 <tcp_pcb_remove+0x120>)
 800d5da:	480e      	ldr	r0, [pc, #56]	@ (800d614 <tcp_pcb_remove+0x114>)
 800d5dc:	f007 f8aa 	bl	8014734 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d006      	beq.n	800d5f6 <tcp_pcb_remove+0xf6>
 800d5e8:	4b08      	ldr	r3, [pc, #32]	@ (800d60c <tcp_pcb_remove+0x10c>)
 800d5ea:	f640 0296 	movw	r2, #2198	@ 0x896
 800d5ee:	490d      	ldr	r1, [pc, #52]	@ (800d624 <tcp_pcb_remove+0x124>)
 800d5f0:	4808      	ldr	r0, [pc, #32]	@ (800d614 <tcp_pcb_remove+0x114>)
 800d5f2:	f007 f89f 	bl	8014734 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	2200      	movs	r2, #0
 800d600:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d602:	bf00      	nop
 800d604:	3710      	adds	r7, #16
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	08016028 	.word	0x08016028
 800d610:	08016690 	.word	0x08016690
 800d614:	0801606c 	.word	0x0801606c
 800d618:	080166ac 	.word	0x080166ac
 800d61c:	080166cc 	.word	0x080166cc
 800d620:	080166e4 	.word	0x080166e4
 800d624:	08016700 	.word	0x08016700

0800d628 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d106      	bne.n	800d644 <tcp_next_iss+0x1c>
 800d636:	4b0a      	ldr	r3, [pc, #40]	@ (800d660 <tcp_next_iss+0x38>)
 800d638:	f640 02af 	movw	r2, #2223	@ 0x8af
 800d63c:	4909      	ldr	r1, [pc, #36]	@ (800d664 <tcp_next_iss+0x3c>)
 800d63e:	480a      	ldr	r0, [pc, #40]	@ (800d668 <tcp_next_iss+0x40>)
 800d640:	f007 f878 	bl	8014734 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d644:	4b09      	ldr	r3, [pc, #36]	@ (800d66c <tcp_next_iss+0x44>)
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	4b09      	ldr	r3, [pc, #36]	@ (800d670 <tcp_next_iss+0x48>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4413      	add	r3, r2
 800d64e:	4a07      	ldr	r2, [pc, #28]	@ (800d66c <tcp_next_iss+0x44>)
 800d650:	6013      	str	r3, [r2, #0]
  return iss;
 800d652:	4b06      	ldr	r3, [pc, #24]	@ (800d66c <tcp_next_iss+0x44>)
 800d654:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d656:	4618      	mov	r0, r3
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	08016028 	.word	0x08016028
 800d664:	08016718 	.word	0x08016718
 800d668:	0801606c 	.word	0x0801606c
 800d66c:	2000008c 	.word	0x2000008c
 800d670:	2000b10c 	.word	0x2000b10c

0800d674 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b086      	sub	sp, #24
 800d678:	af00      	add	r7, sp, #0
 800d67a:	4603      	mov	r3, r0
 800d67c:	60b9      	str	r1, [r7, #8]
 800d67e:	607a      	str	r2, [r7, #4]
 800d680:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d106      	bne.n	800d696 <tcp_eff_send_mss_netif+0x22>
 800d688:	4b14      	ldr	r3, [pc, #80]	@ (800d6dc <tcp_eff_send_mss_netif+0x68>)
 800d68a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800d68e:	4914      	ldr	r1, [pc, #80]	@ (800d6e0 <tcp_eff_send_mss_netif+0x6c>)
 800d690:	4814      	ldr	r0, [pc, #80]	@ (800d6e4 <tcp_eff_send_mss_netif+0x70>)
 800d692:	f007 f84f 	bl	8014734 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d101      	bne.n	800d6a0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d69c:	89fb      	ldrh	r3, [r7, #14]
 800d69e:	e019      	b.n	800d6d4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d6a4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d6a6:	8afb      	ldrh	r3, [r7, #22]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d012      	beq.n	800d6d2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d6ac:	2328      	movs	r3, #40	@ 0x28
 800d6ae:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d6b0:	8afa      	ldrh	r2, [r7, #22]
 800d6b2:	8abb      	ldrh	r3, [r7, #20]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d904      	bls.n	800d6c2 <tcp_eff_send_mss_netif+0x4e>
 800d6b8:	8afa      	ldrh	r2, [r7, #22]
 800d6ba:	8abb      	ldrh	r3, [r7, #20]
 800d6bc:	1ad3      	subs	r3, r2, r3
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	e000      	b.n	800d6c4 <tcp_eff_send_mss_netif+0x50>
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d6c6:	8a7a      	ldrh	r2, [r7, #18]
 800d6c8:	89fb      	ldrh	r3, [r7, #14]
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	bf28      	it	cs
 800d6ce:	4613      	movcs	r3, r2
 800d6d0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d6d2:	89fb      	ldrh	r3, [r7, #14]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3718      	adds	r7, #24
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	08016028 	.word	0x08016028
 800d6e0:	08016734 	.word	0x08016734
 800d6e4:	0801606c 	.word	0x0801606c

0800d6e8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d119      	bne.n	800d730 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d6fc:	4b10      	ldr	r3, [pc, #64]	@ (800d740 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d6fe:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800d702:	4910      	ldr	r1, [pc, #64]	@ (800d744 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d704:	4810      	ldr	r0, [pc, #64]	@ (800d748 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d706:	f007 f815 	bl	8014734 <iprintf>

  while (pcb != NULL) {
 800d70a:	e011      	b.n	800d730 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	429a      	cmp	r2, r3
 800d716:	d108      	bne.n	800d72a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f7fe ffc4 	bl	800c6ac <tcp_abort>
      pcb = next;
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	60fb      	str	r3, [r7, #12]
 800d728:	e002      	b.n	800d730 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d1ea      	bne.n	800d70c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d736:	bf00      	nop
 800d738:	bf00      	nop
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	08016028 	.word	0x08016028
 800d744:	0801675c 	.word	0x0801675c
 800d748:	0801606c 	.word	0x0801606c

0800d74c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d02a      	beq.n	800d7b2 <tcp_netif_ip_addr_changed+0x66>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d026      	beq.n	800d7b2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d764:	4b15      	ldr	r3, [pc, #84]	@ (800d7bc <tcp_netif_ip_addr_changed+0x70>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4619      	mov	r1, r3
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f7ff ffbc 	bl	800d6e8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d770:	4b13      	ldr	r3, [pc, #76]	@ (800d7c0 <tcp_netif_ip_addr_changed+0x74>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4619      	mov	r1, r3
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f7ff ffb6 	bl	800d6e8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d017      	beq.n	800d7b2 <tcp_netif_ip_addr_changed+0x66>
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d013      	beq.n	800d7b2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d78a:	4b0e      	ldr	r3, [pc, #56]	@ (800d7c4 <tcp_netif_ip_addr_changed+0x78>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	60fb      	str	r3, [r7, #12]
 800d790:	e00c      	b.n	800d7ac <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d103      	bne.n	800d7a6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	60fb      	str	r3, [r7, #12]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1ef      	bne.n	800d792 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d7b2:	bf00      	nop
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	2000b118 	.word	0x2000b118
 800d7c0:	2000b110 	.word	0x2000b110
 800d7c4:	2000b114 	.word	0x2000b114

0800d7c8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d007      	beq.n	800d7e8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7ff fc3d 	bl	800d05c <tcp_segs_free>
    pcb->ooseq = NULL;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d7e8:	bf00      	nop
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d7f0:	b590      	push	{r4, r7, lr}
 800d7f2:	b08d      	sub	sp, #52	@ 0x34
 800d7f4:	af04      	add	r7, sp, #16
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d105      	bne.n	800d80c <tcp_input+0x1c>
 800d800:	4b9b      	ldr	r3, [pc, #620]	@ (800da70 <tcp_input+0x280>)
 800d802:	2283      	movs	r2, #131	@ 0x83
 800d804:	499b      	ldr	r1, [pc, #620]	@ (800da74 <tcp_input+0x284>)
 800d806:	489c      	ldr	r0, [pc, #624]	@ (800da78 <tcp_input+0x288>)
 800d808:	f006 ff94 	bl	8014734 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	4a9a      	ldr	r2, [pc, #616]	@ (800da7c <tcp_input+0x28c>)
 800d812:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	895b      	ldrh	r3, [r3, #10]
 800d818:	2b13      	cmp	r3, #19
 800d81a:	f240 83d1 	bls.w	800dfc0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d81e:	4b98      	ldr	r3, [pc, #608]	@ (800da80 <tcp_input+0x290>)
 800d820:	695b      	ldr	r3, [r3, #20]
 800d822:	4a97      	ldr	r2, [pc, #604]	@ (800da80 <tcp_input+0x290>)
 800d824:	6812      	ldr	r2, [r2, #0]
 800d826:	4611      	mov	r1, r2
 800d828:	4618      	mov	r0, r3
 800d82a:	f005 ff2d 	bl	8013688 <ip4_addr_isbroadcast_u32>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	f040 83c7 	bne.w	800dfc4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d836:	4b92      	ldr	r3, [pc, #584]	@ (800da80 <tcp_input+0x290>)
 800d838:	695b      	ldr	r3, [r3, #20]
 800d83a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d83e:	2be0      	cmp	r3, #224	@ 0xe0
 800d840:	f000 83c0 	beq.w	800dfc4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d844:	4b8d      	ldr	r3, [pc, #564]	@ (800da7c <tcp_input+0x28c>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	899b      	ldrh	r3, [r3, #12]
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7fc fda5 	bl	800a39c <lwip_htons>
 800d852:	4603      	mov	r3, r0
 800d854:	0b1b      	lsrs	r3, r3, #12
 800d856:	b29b      	uxth	r3, r3
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d85e:	7cbb      	ldrb	r3, [r7, #18]
 800d860:	2b13      	cmp	r3, #19
 800d862:	f240 83b1 	bls.w	800dfc8 <tcp_input+0x7d8>
 800d866:	7cbb      	ldrb	r3, [r7, #18]
 800d868:	b29a      	uxth	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	891b      	ldrh	r3, [r3, #8]
 800d86e:	429a      	cmp	r2, r3
 800d870:	f200 83aa 	bhi.w	800dfc8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d874:	7cbb      	ldrb	r3, [r7, #18]
 800d876:	b29b      	uxth	r3, r3
 800d878:	3b14      	subs	r3, #20
 800d87a:	b29a      	uxth	r2, r3
 800d87c:	4b81      	ldr	r3, [pc, #516]	@ (800da84 <tcp_input+0x294>)
 800d87e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d880:	4b81      	ldr	r3, [pc, #516]	@ (800da88 <tcp_input+0x298>)
 800d882:	2200      	movs	r2, #0
 800d884:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	895a      	ldrh	r2, [r3, #10]
 800d88a:	7cbb      	ldrb	r3, [r7, #18]
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	429a      	cmp	r2, r3
 800d890:	d309      	bcc.n	800d8a6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d892:	4b7c      	ldr	r3, [pc, #496]	@ (800da84 <tcp_input+0x294>)
 800d894:	881a      	ldrh	r2, [r3, #0]
 800d896:	4b7d      	ldr	r3, [pc, #500]	@ (800da8c <tcp_input+0x29c>)
 800d898:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d89a:	7cbb      	ldrb	r3, [r7, #18]
 800d89c:	4619      	mov	r1, r3
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7fe f854 	bl	800b94c <pbuf_remove_header>
 800d8a4:	e04e      	b.n	800d944 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d105      	bne.n	800d8ba <tcp_input+0xca>
 800d8ae:	4b70      	ldr	r3, [pc, #448]	@ (800da70 <tcp_input+0x280>)
 800d8b0:	22c2      	movs	r2, #194	@ 0xc2
 800d8b2:	4977      	ldr	r1, [pc, #476]	@ (800da90 <tcp_input+0x2a0>)
 800d8b4:	4870      	ldr	r0, [pc, #448]	@ (800da78 <tcp_input+0x288>)
 800d8b6:	f006 ff3d 	bl	8014734 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d8ba:	2114      	movs	r1, #20
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f7fe f845 	bl	800b94c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	895a      	ldrh	r2, [r3, #10]
 800d8c6:	4b71      	ldr	r3, [pc, #452]	@ (800da8c <tcp_input+0x29c>)
 800d8c8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d8ca:	4b6e      	ldr	r3, [pc, #440]	@ (800da84 <tcp_input+0x294>)
 800d8cc:	881a      	ldrh	r2, [r3, #0]
 800d8ce:	4b6f      	ldr	r3, [pc, #444]	@ (800da8c <tcp_input+0x29c>)
 800d8d0:	881b      	ldrh	r3, [r3, #0]
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d8d6:	4b6d      	ldr	r3, [pc, #436]	@ (800da8c <tcp_input+0x29c>)
 800d8d8:	881b      	ldrh	r3, [r3, #0]
 800d8da:	4619      	mov	r1, r3
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f7fe f835 	bl	800b94c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	895b      	ldrh	r3, [r3, #10]
 800d8e8:	8a3a      	ldrh	r2, [r7, #16]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	f200 836e 	bhi.w	800dfcc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	4a64      	ldr	r2, [pc, #400]	@ (800da88 <tcp_input+0x298>)
 800d8f8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	8a3a      	ldrh	r2, [r7, #16]
 800d900:	4611      	mov	r1, r2
 800d902:	4618      	mov	r0, r3
 800d904:	f7fe f822 	bl	800b94c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	891a      	ldrh	r2, [r3, #8]
 800d90c:	8a3b      	ldrh	r3, [r7, #16]
 800d90e:	1ad3      	subs	r3, r2, r3
 800d910:	b29a      	uxth	r2, r3
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	895b      	ldrh	r3, [r3, #10]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d005      	beq.n	800d92a <tcp_input+0x13a>
 800d91e:	4b54      	ldr	r3, [pc, #336]	@ (800da70 <tcp_input+0x280>)
 800d920:	22df      	movs	r2, #223	@ 0xdf
 800d922:	495c      	ldr	r1, [pc, #368]	@ (800da94 <tcp_input+0x2a4>)
 800d924:	4854      	ldr	r0, [pc, #336]	@ (800da78 <tcp_input+0x288>)
 800d926:	f006 ff05 	bl	8014734 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	891a      	ldrh	r2, [r3, #8]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	891b      	ldrh	r3, [r3, #8]
 800d934:	429a      	cmp	r2, r3
 800d936:	d005      	beq.n	800d944 <tcp_input+0x154>
 800d938:	4b4d      	ldr	r3, [pc, #308]	@ (800da70 <tcp_input+0x280>)
 800d93a:	22e0      	movs	r2, #224	@ 0xe0
 800d93c:	4956      	ldr	r1, [pc, #344]	@ (800da98 <tcp_input+0x2a8>)
 800d93e:	484e      	ldr	r0, [pc, #312]	@ (800da78 <tcp_input+0x288>)
 800d940:	f006 fef8 	bl	8014734 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d944:	4b4d      	ldr	r3, [pc, #308]	@ (800da7c <tcp_input+0x28c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	881b      	ldrh	r3, [r3, #0]
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	4a4b      	ldr	r2, [pc, #300]	@ (800da7c <tcp_input+0x28c>)
 800d94e:	6814      	ldr	r4, [r2, #0]
 800d950:	4618      	mov	r0, r3
 800d952:	f7fc fd23 	bl	800a39c <lwip_htons>
 800d956:	4603      	mov	r3, r0
 800d958:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d95a:	4b48      	ldr	r3, [pc, #288]	@ (800da7c <tcp_input+0x28c>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	885b      	ldrh	r3, [r3, #2]
 800d960:	b29b      	uxth	r3, r3
 800d962:	4a46      	ldr	r2, [pc, #280]	@ (800da7c <tcp_input+0x28c>)
 800d964:	6814      	ldr	r4, [r2, #0]
 800d966:	4618      	mov	r0, r3
 800d968:	f7fc fd18 	bl	800a39c <lwip_htons>
 800d96c:	4603      	mov	r3, r0
 800d96e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d970:	4b42      	ldr	r3, [pc, #264]	@ (800da7c <tcp_input+0x28c>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	4a41      	ldr	r2, [pc, #260]	@ (800da7c <tcp_input+0x28c>)
 800d978:	6814      	ldr	r4, [r2, #0]
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fc fd24 	bl	800a3c8 <lwip_htonl>
 800d980:	4603      	mov	r3, r0
 800d982:	6063      	str	r3, [r4, #4]
 800d984:	6863      	ldr	r3, [r4, #4]
 800d986:	4a45      	ldr	r2, [pc, #276]	@ (800da9c <tcp_input+0x2ac>)
 800d988:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d98a:	4b3c      	ldr	r3, [pc, #240]	@ (800da7c <tcp_input+0x28c>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	4a3a      	ldr	r2, [pc, #232]	@ (800da7c <tcp_input+0x28c>)
 800d992:	6814      	ldr	r4, [r2, #0]
 800d994:	4618      	mov	r0, r3
 800d996:	f7fc fd17 	bl	800a3c8 <lwip_htonl>
 800d99a:	4603      	mov	r3, r0
 800d99c:	60a3      	str	r3, [r4, #8]
 800d99e:	68a3      	ldr	r3, [r4, #8]
 800d9a0:	4a3f      	ldr	r2, [pc, #252]	@ (800daa0 <tcp_input+0x2b0>)
 800d9a2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d9a4:	4b35      	ldr	r3, [pc, #212]	@ (800da7c <tcp_input+0x28c>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	89db      	ldrh	r3, [r3, #14]
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	4a33      	ldr	r2, [pc, #204]	@ (800da7c <tcp_input+0x28c>)
 800d9ae:	6814      	ldr	r4, [r2, #0]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7fc fcf3 	bl	800a39c <lwip_htons>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d9ba:	4b30      	ldr	r3, [pc, #192]	@ (800da7c <tcp_input+0x28c>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	899b      	ldrh	r3, [r3, #12]
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fc fcea 	bl	800a39c <lwip_htons>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d9d0:	b2da      	uxtb	r2, r3
 800d9d2:	4b34      	ldr	r3, [pc, #208]	@ (800daa4 <tcp_input+0x2b4>)
 800d9d4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	891a      	ldrh	r2, [r3, #8]
 800d9da:	4b33      	ldr	r3, [pc, #204]	@ (800daa8 <tcp_input+0x2b8>)
 800d9dc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d9de:	4b31      	ldr	r3, [pc, #196]	@ (800daa4 <tcp_input+0x2b4>)
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	f003 0303 	and.w	r3, r3, #3
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d00c      	beq.n	800da04 <tcp_input+0x214>
    tcplen++;
 800d9ea:	4b2f      	ldr	r3, [pc, #188]	@ (800daa8 <tcp_input+0x2b8>)
 800d9ec:	881b      	ldrh	r3, [r3, #0]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	b29a      	uxth	r2, r3
 800d9f2:	4b2d      	ldr	r3, [pc, #180]	@ (800daa8 <tcp_input+0x2b8>)
 800d9f4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	891a      	ldrh	r2, [r3, #8]
 800d9fa:	4b2b      	ldr	r3, [pc, #172]	@ (800daa8 <tcp_input+0x2b8>)
 800d9fc:	881b      	ldrh	r3, [r3, #0]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	f200 82e6 	bhi.w	800dfd0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800da04:	2300      	movs	r3, #0
 800da06:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800da08:	4b28      	ldr	r3, [pc, #160]	@ (800daac <tcp_input+0x2bc>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	61fb      	str	r3, [r7, #28]
 800da0e:	e09d      	b.n	800db4c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	7d1b      	ldrb	r3, [r3, #20]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d105      	bne.n	800da24 <tcp_input+0x234>
 800da18:	4b15      	ldr	r3, [pc, #84]	@ (800da70 <tcp_input+0x280>)
 800da1a:	22fb      	movs	r2, #251	@ 0xfb
 800da1c:	4924      	ldr	r1, [pc, #144]	@ (800dab0 <tcp_input+0x2c0>)
 800da1e:	4816      	ldr	r0, [pc, #88]	@ (800da78 <tcp_input+0x288>)
 800da20:	f006 fe88 	bl	8014734 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800da24:	69fb      	ldr	r3, [r7, #28]
 800da26:	7d1b      	ldrb	r3, [r3, #20]
 800da28:	2b0a      	cmp	r3, #10
 800da2a:	d105      	bne.n	800da38 <tcp_input+0x248>
 800da2c:	4b10      	ldr	r3, [pc, #64]	@ (800da70 <tcp_input+0x280>)
 800da2e:	22fc      	movs	r2, #252	@ 0xfc
 800da30:	4920      	ldr	r1, [pc, #128]	@ (800dab4 <tcp_input+0x2c4>)
 800da32:	4811      	ldr	r0, [pc, #68]	@ (800da78 <tcp_input+0x288>)
 800da34:	f006 fe7e 	bl	8014734 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800da38:	69fb      	ldr	r3, [r7, #28]
 800da3a:	7d1b      	ldrb	r3, [r3, #20]
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d105      	bne.n	800da4c <tcp_input+0x25c>
 800da40:	4b0b      	ldr	r3, [pc, #44]	@ (800da70 <tcp_input+0x280>)
 800da42:	22fd      	movs	r2, #253	@ 0xfd
 800da44:	491c      	ldr	r1, [pc, #112]	@ (800dab8 <tcp_input+0x2c8>)
 800da46:	480c      	ldr	r0, [pc, #48]	@ (800da78 <tcp_input+0x288>)
 800da48:	f006 fe74 	bl	8014734 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	7a1b      	ldrb	r3, [r3, #8]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d033      	beq.n	800dabc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	7a1a      	ldrb	r2, [r3, #8]
 800da58:	4b09      	ldr	r3, [pc, #36]	@ (800da80 <tcp_input+0x290>)
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da60:	3301      	adds	r3, #1
 800da62:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da64:	429a      	cmp	r2, r3
 800da66:	d029      	beq.n	800dabc <tcp_input+0x2cc>
      prev = pcb;
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	61bb      	str	r3, [r7, #24]
      continue;
 800da6c:	e06b      	b.n	800db46 <tcp_input+0x356>
 800da6e:	bf00      	nop
 800da70:	08016790 	.word	0x08016790
 800da74:	080167c4 	.word	0x080167c4
 800da78:	080167dc 	.word	0x080167dc
 800da7c:	2000b134 	.word	0x2000b134
 800da80:	200059dc 	.word	0x200059dc
 800da84:	2000b138 	.word	0x2000b138
 800da88:	2000b13c 	.word	0x2000b13c
 800da8c:	2000b13a 	.word	0x2000b13a
 800da90:	08016804 	.word	0x08016804
 800da94:	08016814 	.word	0x08016814
 800da98:	08016820 	.word	0x08016820
 800da9c:	2000b144 	.word	0x2000b144
 800daa0:	2000b148 	.word	0x2000b148
 800daa4:	2000b150 	.word	0x2000b150
 800daa8:	2000b14e 	.word	0x2000b14e
 800daac:	2000b118 	.word	0x2000b118
 800dab0:	08016840 	.word	0x08016840
 800dab4:	08016868 	.word	0x08016868
 800dab8:	08016894 	.word	0x08016894
    }

    if (pcb->remote_port == tcphdr->src &&
 800dabc:	69fb      	ldr	r3, [r7, #28]
 800dabe:	8b1a      	ldrh	r2, [r3, #24]
 800dac0:	4b72      	ldr	r3, [pc, #456]	@ (800dc8c <tcp_input+0x49c>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	881b      	ldrh	r3, [r3, #0]
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	429a      	cmp	r2, r3
 800daca:	d13a      	bne.n	800db42 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	8ada      	ldrh	r2, [r3, #22]
 800dad0:	4b6e      	ldr	r3, [pc, #440]	@ (800dc8c <tcp_input+0x49c>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	885b      	ldrh	r3, [r3, #2]
 800dad6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dad8:	429a      	cmp	r2, r3
 800dada:	d132      	bne.n	800db42 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	685a      	ldr	r2, [r3, #4]
 800dae0:	4b6b      	ldr	r3, [pc, #428]	@ (800dc90 <tcp_input+0x4a0>)
 800dae2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d12c      	bne.n	800db42 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dae8:	69fb      	ldr	r3, [r7, #28]
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	4b68      	ldr	r3, [pc, #416]	@ (800dc90 <tcp_input+0x4a0>)
 800daee:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d126      	bne.n	800db42 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	69fa      	ldr	r2, [r7, #28]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d106      	bne.n	800db0c <tcp_input+0x31c>
 800dafe:	4b65      	ldr	r3, [pc, #404]	@ (800dc94 <tcp_input+0x4a4>)
 800db00:	f240 120d 	movw	r2, #269	@ 0x10d
 800db04:	4964      	ldr	r1, [pc, #400]	@ (800dc98 <tcp_input+0x4a8>)
 800db06:	4865      	ldr	r0, [pc, #404]	@ (800dc9c <tcp_input+0x4ac>)
 800db08:	f006 fe14 	bl	8014734 <iprintf>
      if (prev != NULL) {
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00a      	beq.n	800db28 <tcp_input+0x338>
        prev->next = pcb->next;
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	68da      	ldr	r2, [r3, #12]
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800db1a:	4b61      	ldr	r3, [pc, #388]	@ (800dca0 <tcp_input+0x4b0>)
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800db22:	4a5f      	ldr	r2, [pc, #380]	@ (800dca0 <tcp_input+0x4b0>)
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	68db      	ldr	r3, [r3, #12]
 800db2c:	69fa      	ldr	r2, [r7, #28]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d111      	bne.n	800db56 <tcp_input+0x366>
 800db32:	4b58      	ldr	r3, [pc, #352]	@ (800dc94 <tcp_input+0x4a4>)
 800db34:	f240 1215 	movw	r2, #277	@ 0x115
 800db38:	495a      	ldr	r1, [pc, #360]	@ (800dca4 <tcp_input+0x4b4>)
 800db3a:	4858      	ldr	r0, [pc, #352]	@ (800dc9c <tcp_input+0x4ac>)
 800db3c:	f006 fdfa 	bl	8014734 <iprintf>
      break;
 800db40:	e009      	b.n	800db56 <tcp_input+0x366>
    }
    prev = pcb;
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	68db      	ldr	r3, [r3, #12]
 800db4a:	61fb      	str	r3, [r7, #28]
 800db4c:	69fb      	ldr	r3, [r7, #28]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	f47f af5e 	bne.w	800da10 <tcp_input+0x220>
 800db54:	e000      	b.n	800db58 <tcp_input+0x368>
      break;
 800db56:	bf00      	nop
  }

  if (pcb == NULL) {
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	f040 80aa 	bne.w	800dcb4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db60:	4b51      	ldr	r3, [pc, #324]	@ (800dca8 <tcp_input+0x4b8>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	61fb      	str	r3, [r7, #28]
 800db66:	e03f      	b.n	800dbe8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	7d1b      	ldrb	r3, [r3, #20]
 800db6c:	2b0a      	cmp	r3, #10
 800db6e:	d006      	beq.n	800db7e <tcp_input+0x38e>
 800db70:	4b48      	ldr	r3, [pc, #288]	@ (800dc94 <tcp_input+0x4a4>)
 800db72:	f240 121f 	movw	r2, #287	@ 0x11f
 800db76:	494d      	ldr	r1, [pc, #308]	@ (800dcac <tcp_input+0x4bc>)
 800db78:	4848      	ldr	r0, [pc, #288]	@ (800dc9c <tcp_input+0x4ac>)
 800db7a:	f006 fddb 	bl	8014734 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	7a1b      	ldrb	r3, [r3, #8]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d009      	beq.n	800db9a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	7a1a      	ldrb	r2, [r3, #8]
 800db8a:	4b41      	ldr	r3, [pc, #260]	@ (800dc90 <tcp_input+0x4a0>)
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800db92:	3301      	adds	r3, #1
 800db94:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db96:	429a      	cmp	r2, r3
 800db98:	d122      	bne.n	800dbe0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	8b1a      	ldrh	r2, [r3, #24]
 800db9e:	4b3b      	ldr	r3, [pc, #236]	@ (800dc8c <tcp_input+0x49c>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	881b      	ldrh	r3, [r3, #0]
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d11b      	bne.n	800dbe2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	8ada      	ldrh	r2, [r3, #22]
 800dbae:	4b37      	ldr	r3, [pc, #220]	@ (800dc8c <tcp_input+0x49c>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	885b      	ldrh	r3, [r3, #2]
 800dbb4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d113      	bne.n	800dbe2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	685a      	ldr	r2, [r3, #4]
 800dbbe:	4b34      	ldr	r3, [pc, #208]	@ (800dc90 <tcp_input+0x4a0>)
 800dbc0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d10d      	bne.n	800dbe2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	4b31      	ldr	r3, [pc, #196]	@ (800dc90 <tcp_input+0x4a0>)
 800dbcc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d107      	bne.n	800dbe2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dbd2:	69f8      	ldr	r0, [r7, #28]
 800dbd4:	f000 fb56 	bl	800e284 <tcp_timewait_input>
        }
        pbuf_free(p);
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f7fd ff3d 	bl	800ba58 <pbuf_free>
        return;
 800dbde:	e1fd      	b.n	800dfdc <tcp_input+0x7ec>
        continue;
 800dbe0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	68db      	ldr	r3, [r3, #12]
 800dbe6:	61fb      	str	r3, [r7, #28]
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d1bc      	bne.n	800db68 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dbf2:	4b2f      	ldr	r3, [pc, #188]	@ (800dcb0 <tcp_input+0x4c0>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	617b      	str	r3, [r7, #20]
 800dbf8:	e02a      	b.n	800dc50 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	7a1b      	ldrb	r3, [r3, #8]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00c      	beq.n	800dc1c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	7a1a      	ldrb	r2, [r3, #8]
 800dc06:	4b22      	ldr	r3, [pc, #136]	@ (800dc90 <tcp_input+0x4a0>)
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dc0e:	3301      	adds	r3, #1
 800dc10:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d002      	beq.n	800dc1c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	61bb      	str	r3, [r7, #24]
        continue;
 800dc1a:	e016      	b.n	800dc4a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	8ada      	ldrh	r2, [r3, #22]
 800dc20:	4b1a      	ldr	r3, [pc, #104]	@ (800dc8c <tcp_input+0x49c>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	885b      	ldrh	r3, [r3, #2]
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d10c      	bne.n	800dc46 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	4b17      	ldr	r3, [pc, #92]	@ (800dc90 <tcp_input+0x4a0>)
 800dc32:	695b      	ldr	r3, [r3, #20]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d00f      	beq.n	800dc58 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d00d      	beq.n	800dc5a <tcp_input+0x46a>
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d009      	beq.n	800dc5a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	617b      	str	r3, [r7, #20]
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d1d1      	bne.n	800dbfa <tcp_input+0x40a>
 800dc56:	e000      	b.n	800dc5a <tcp_input+0x46a>
            break;
 800dc58:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d029      	beq.n	800dcb4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dc60:	69bb      	ldr	r3, [r7, #24]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00a      	beq.n	800dc7c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	68da      	ldr	r2, [r3, #12]
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dc6e:	4b10      	ldr	r3, [pc, #64]	@ (800dcb0 <tcp_input+0x4c0>)
 800dc70:	681a      	ldr	r2, [r3, #0]
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dc76:	4a0e      	ldr	r2, [pc, #56]	@ (800dcb0 <tcp_input+0x4c0>)
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dc7c:	6978      	ldr	r0, [r7, #20]
 800dc7e:	f000 fa03 	bl	800e088 <tcp_listen_input>
      }
      pbuf_free(p);
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f7fd fee8 	bl	800ba58 <pbuf_free>
      return;
 800dc88:	e1a8      	b.n	800dfdc <tcp_input+0x7ec>
 800dc8a:	bf00      	nop
 800dc8c:	2000b134 	.word	0x2000b134
 800dc90:	200059dc 	.word	0x200059dc
 800dc94:	08016790 	.word	0x08016790
 800dc98:	080168bc 	.word	0x080168bc
 800dc9c:	080167dc 	.word	0x080167dc
 800dca0:	2000b118 	.word	0x2000b118
 800dca4:	080168e8 	.word	0x080168e8
 800dca8:	2000b11c 	.word	0x2000b11c
 800dcac:	08016914 	.word	0x08016914
 800dcb0:	2000b114 	.word	0x2000b114
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800dcb4:	69fb      	ldr	r3, [r7, #28]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	f000 8158 	beq.w	800df6c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800dcbc:	4b95      	ldr	r3, [pc, #596]	@ (800df14 <tcp_input+0x724>)
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	891a      	ldrh	r2, [r3, #8]
 800dcc6:	4b93      	ldr	r3, [pc, #588]	@ (800df14 <tcp_input+0x724>)
 800dcc8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dcca:	4a92      	ldr	r2, [pc, #584]	@ (800df14 <tcp_input+0x724>)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800dcd0:	4b91      	ldr	r3, [pc, #580]	@ (800df18 <tcp_input+0x728>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a8f      	ldr	r2, [pc, #572]	@ (800df14 <tcp_input+0x724>)
 800dcd6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800dcd8:	4b90      	ldr	r3, [pc, #576]	@ (800df1c <tcp_input+0x72c>)
 800dcda:	2200      	movs	r2, #0
 800dcdc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dcde:	4b90      	ldr	r3, [pc, #576]	@ (800df20 <tcp_input+0x730>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800dce4:	4b8f      	ldr	r3, [pc, #572]	@ (800df24 <tcp_input+0x734>)
 800dce6:	2200      	movs	r2, #0
 800dce8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800dcea:	4b8f      	ldr	r3, [pc, #572]	@ (800df28 <tcp_input+0x738>)
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	f003 0308 	and.w	r3, r3, #8
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d006      	beq.n	800dd04 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	7b5b      	ldrb	r3, [r3, #13]
 800dcfa:	f043 0301 	orr.w	r3, r3, #1
 800dcfe:	b2da      	uxtb	r2, r3
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d017      	beq.n	800dd3c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dd0c:	69f8      	ldr	r0, [r7, #28]
 800dd0e:	f7ff f929 	bl	800cf64 <tcp_process_refused_data>
 800dd12:	4603      	mov	r3, r0
 800dd14:	f113 0f0d 	cmn.w	r3, #13
 800dd18:	d007      	beq.n	800dd2a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d00c      	beq.n	800dd3c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dd22:	4b82      	ldr	r3, [pc, #520]	@ (800df2c <tcp_input+0x73c>)
 800dd24:	881b      	ldrh	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d008      	beq.n	800dd3c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dd2a:	69fb      	ldr	r3, [r7, #28]
 800dd2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	f040 80e3 	bne.w	800defa <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dd34:	69f8      	ldr	r0, [r7, #28]
 800dd36:	f003 f9a7 	bl	8011088 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dd3a:	e0de      	b.n	800defa <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800dd3c:	4a7c      	ldr	r2, [pc, #496]	@ (800df30 <tcp_input+0x740>)
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dd42:	69f8      	ldr	r0, [r7, #28]
 800dd44:	f000 fb18 	bl	800e378 <tcp_process>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dd4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd50:	f113 0f0d 	cmn.w	r3, #13
 800dd54:	f000 80d3 	beq.w	800defe <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800dd58:	4b71      	ldr	r3, [pc, #452]	@ (800df20 <tcp_input+0x730>)
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	f003 0308 	and.w	r3, r3, #8
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d015      	beq.n	800dd90 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d008      	beq.n	800dd80 <tcp_input+0x590>
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd74:	69fa      	ldr	r2, [r7, #28]
 800dd76:	6912      	ldr	r2, [r2, #16]
 800dd78:	f06f 010d 	mvn.w	r1, #13
 800dd7c:	4610      	mov	r0, r2
 800dd7e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dd80:	69f9      	ldr	r1, [r7, #28]
 800dd82:	486c      	ldr	r0, [pc, #432]	@ (800df34 <tcp_input+0x744>)
 800dd84:	f7ff fbbc 	bl	800d500 <tcp_pcb_remove>
        tcp_free(pcb);
 800dd88:	69f8      	ldr	r0, [r7, #28]
 800dd8a:	f7fe f9a7 	bl	800c0dc <tcp_free>
 800dd8e:	e0da      	b.n	800df46 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800dd90:	2300      	movs	r3, #0
 800dd92:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dd94:	4b63      	ldr	r3, [pc, #396]	@ (800df24 <tcp_input+0x734>)
 800dd96:	881b      	ldrh	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d01d      	beq.n	800ddd8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dd9c:	4b61      	ldr	r3, [pc, #388]	@ (800df24 <tcp_input+0x734>)
 800dd9e:	881b      	ldrh	r3, [r3, #0]
 800dda0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d00a      	beq.n	800ddc2 <tcp_input+0x5d2>
 800ddac:	69fb      	ldr	r3, [r7, #28]
 800ddae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddb2:	69fa      	ldr	r2, [r7, #28]
 800ddb4:	6910      	ldr	r0, [r2, #16]
 800ddb6:	89fa      	ldrh	r2, [r7, #14]
 800ddb8:	69f9      	ldr	r1, [r7, #28]
 800ddba:	4798      	blx	r3
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	74fb      	strb	r3, [r7, #19]
 800ddc0:	e001      	b.n	800ddc6 <tcp_input+0x5d6>
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ddc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ddca:	f113 0f0d 	cmn.w	r3, #13
 800ddce:	f000 8098 	beq.w	800df02 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ddd2:	4b54      	ldr	r3, [pc, #336]	@ (800df24 <tcp_input+0x734>)
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ddd8:	69f8      	ldr	r0, [r7, #28]
 800ddda:	f000 f915 	bl	800e008 <tcp_input_delayed_close>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	f040 8090 	bne.w	800df06 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dde6:	4b4d      	ldr	r3, [pc, #308]	@ (800df1c <tcp_input+0x72c>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d041      	beq.n	800de72 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ddee:	69fb      	ldr	r3, [r7, #28]
 800ddf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d006      	beq.n	800de04 <tcp_input+0x614>
 800ddf6:	4b50      	ldr	r3, [pc, #320]	@ (800df38 <tcp_input+0x748>)
 800ddf8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ddfc:	494f      	ldr	r1, [pc, #316]	@ (800df3c <tcp_input+0x74c>)
 800ddfe:	4850      	ldr	r0, [pc, #320]	@ (800df40 <tcp_input+0x750>)
 800de00:	f006 fc98 	bl	8014734 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	8b5b      	ldrh	r3, [r3, #26]
 800de08:	f003 0310 	and.w	r3, r3, #16
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d008      	beq.n	800de22 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800de10:	4b42      	ldr	r3, [pc, #264]	@ (800df1c <tcp_input+0x72c>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4618      	mov	r0, r3
 800de16:	f7fd fe1f 	bl	800ba58 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800de1a:	69f8      	ldr	r0, [r7, #28]
 800de1c:	f7fe fc46 	bl	800c6ac <tcp_abort>
            goto aborted;
 800de20:	e091      	b.n	800df46 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d00c      	beq.n	800de46 <tcp_input+0x656>
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	6918      	ldr	r0, [r3, #16]
 800de36:	4b39      	ldr	r3, [pc, #228]	@ (800df1c <tcp_input+0x72c>)
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	2300      	movs	r3, #0
 800de3c:	69f9      	ldr	r1, [r7, #28]
 800de3e:	47a0      	blx	r4
 800de40:	4603      	mov	r3, r0
 800de42:	74fb      	strb	r3, [r7, #19]
 800de44:	e008      	b.n	800de58 <tcp_input+0x668>
 800de46:	4b35      	ldr	r3, [pc, #212]	@ (800df1c <tcp_input+0x72c>)
 800de48:	681a      	ldr	r2, [r3, #0]
 800de4a:	2300      	movs	r3, #0
 800de4c:	69f9      	ldr	r1, [r7, #28]
 800de4e:	2000      	movs	r0, #0
 800de50:	f7ff f95e 	bl	800d110 <tcp_recv_null>
 800de54:	4603      	mov	r3, r0
 800de56:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800de58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de5c:	f113 0f0d 	cmn.w	r3, #13
 800de60:	d053      	beq.n	800df0a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800de62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d003      	beq.n	800de72 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800de6a:	4b2c      	ldr	r3, [pc, #176]	@ (800df1c <tcp_input+0x72c>)
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800de72:	4b2b      	ldr	r3, [pc, #172]	@ (800df20 <tcp_input+0x730>)
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	f003 0320 	and.w	r3, r3, #32
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d030      	beq.n	800dee0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de82:	2b00      	cmp	r3, #0
 800de84:	d009      	beq.n	800de9a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800de86:	69fb      	ldr	r3, [r7, #28]
 800de88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de8a:	7b5a      	ldrb	r2, [r3, #13]
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de90:	f042 0220 	orr.w	r2, r2, #32
 800de94:	b2d2      	uxtb	r2, r2
 800de96:	735a      	strb	r2, [r3, #13]
 800de98:	e022      	b.n	800dee0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de9e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800dea2:	d005      	beq.n	800deb0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dea8:	3301      	adds	r3, #1
 800deaa:	b29a      	uxth	r2, r3
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d00b      	beq.n	800ded2 <tcp_input+0x6e2>
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	6918      	ldr	r0, [r3, #16]
 800dec4:	2300      	movs	r3, #0
 800dec6:	2200      	movs	r2, #0
 800dec8:	69f9      	ldr	r1, [r7, #28]
 800deca:	47a0      	blx	r4
 800decc:	4603      	mov	r3, r0
 800dece:	74fb      	strb	r3, [r7, #19]
 800ded0:	e001      	b.n	800ded6 <tcp_input+0x6e6>
 800ded2:	2300      	movs	r3, #0
 800ded4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ded6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800deda:	f113 0f0d 	cmn.w	r3, #13
 800dede:	d016      	beq.n	800df0e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dee0:	4b13      	ldr	r3, [pc, #76]	@ (800df30 <tcp_input+0x740>)
 800dee2:	2200      	movs	r2, #0
 800dee4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800dee6:	69f8      	ldr	r0, [r7, #28]
 800dee8:	f000 f88e 	bl	800e008 <tcp_input_delayed_close>
 800deec:	4603      	mov	r3, r0
 800deee:	2b00      	cmp	r3, #0
 800def0:	d128      	bne.n	800df44 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800def2:	69f8      	ldr	r0, [r7, #28]
 800def4:	f002 fac2 	bl	801047c <tcp_output>
 800def8:	e025      	b.n	800df46 <tcp_input+0x756>
        goto aborted;
 800defa:	bf00      	nop
 800defc:	e023      	b.n	800df46 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800defe:	bf00      	nop
 800df00:	e021      	b.n	800df46 <tcp_input+0x756>
              goto aborted;
 800df02:	bf00      	nop
 800df04:	e01f      	b.n	800df46 <tcp_input+0x756>
          goto aborted;
 800df06:	bf00      	nop
 800df08:	e01d      	b.n	800df46 <tcp_input+0x756>
            goto aborted;
 800df0a:	bf00      	nop
 800df0c:	e01b      	b.n	800df46 <tcp_input+0x756>
              goto aborted;
 800df0e:	bf00      	nop
 800df10:	e019      	b.n	800df46 <tcp_input+0x756>
 800df12:	bf00      	nop
 800df14:	2000b124 	.word	0x2000b124
 800df18:	2000b134 	.word	0x2000b134
 800df1c:	2000b154 	.word	0x2000b154
 800df20:	2000b151 	.word	0x2000b151
 800df24:	2000b14c 	.word	0x2000b14c
 800df28:	2000b150 	.word	0x2000b150
 800df2c:	2000b14e 	.word	0x2000b14e
 800df30:	2000b158 	.word	0x2000b158
 800df34:	2000b118 	.word	0x2000b118
 800df38:	08016790 	.word	0x08016790
 800df3c:	08016944 	.word	0x08016944
 800df40:	080167dc 	.word	0x080167dc
          goto aborted;
 800df44:	bf00      	nop
    tcp_input_pcb = NULL;
 800df46:	4b27      	ldr	r3, [pc, #156]	@ (800dfe4 <tcp_input+0x7f4>)
 800df48:	2200      	movs	r2, #0
 800df4a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800df4c:	4b26      	ldr	r3, [pc, #152]	@ (800dfe8 <tcp_input+0x7f8>)
 800df4e:	2200      	movs	r2, #0
 800df50:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800df52:	4b26      	ldr	r3, [pc, #152]	@ (800dfec <tcp_input+0x7fc>)
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d03f      	beq.n	800dfda <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800df5a:	4b24      	ldr	r3, [pc, #144]	@ (800dfec <tcp_input+0x7fc>)
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	4618      	mov	r0, r3
 800df60:	f7fd fd7a 	bl	800ba58 <pbuf_free>
      inseg.p = NULL;
 800df64:	4b21      	ldr	r3, [pc, #132]	@ (800dfec <tcp_input+0x7fc>)
 800df66:	2200      	movs	r2, #0
 800df68:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800df6a:	e036      	b.n	800dfda <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800df6c:	4b20      	ldr	r3, [pc, #128]	@ (800dff0 <tcp_input+0x800>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	899b      	ldrh	r3, [r3, #12]
 800df72:	b29b      	uxth	r3, r3
 800df74:	4618      	mov	r0, r3
 800df76:	f7fc fa11 	bl	800a39c <lwip_htons>
 800df7a:	4603      	mov	r3, r0
 800df7c:	b2db      	uxtb	r3, r3
 800df7e:	f003 0304 	and.w	r3, r3, #4
 800df82:	2b00      	cmp	r3, #0
 800df84:	d118      	bne.n	800dfb8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df86:	4b1b      	ldr	r3, [pc, #108]	@ (800dff4 <tcp_input+0x804>)
 800df88:	6819      	ldr	r1, [r3, #0]
 800df8a:	4b1b      	ldr	r3, [pc, #108]	@ (800dff8 <tcp_input+0x808>)
 800df8c:	881b      	ldrh	r3, [r3, #0]
 800df8e:	461a      	mov	r2, r3
 800df90:	4b1a      	ldr	r3, [pc, #104]	@ (800dffc <tcp_input+0x80c>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df96:	4b16      	ldr	r3, [pc, #88]	@ (800dff0 <tcp_input+0x800>)
 800df98:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df9a:	885b      	ldrh	r3, [r3, #2]
 800df9c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df9e:	4a14      	ldr	r2, [pc, #80]	@ (800dff0 <tcp_input+0x800>)
 800dfa0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfa2:	8812      	ldrh	r2, [r2, #0]
 800dfa4:	b292      	uxth	r2, r2
 800dfa6:	9202      	str	r2, [sp, #8]
 800dfa8:	9301      	str	r3, [sp, #4]
 800dfaa:	4b15      	ldr	r3, [pc, #84]	@ (800e000 <tcp_input+0x810>)
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	4b15      	ldr	r3, [pc, #84]	@ (800e004 <tcp_input+0x814>)
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	2000      	movs	r0, #0
 800dfb4:	f003 f816 	bl	8010fe4 <tcp_rst>
    pbuf_free(p);
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f7fd fd4d 	bl	800ba58 <pbuf_free>
  return;
 800dfbe:	e00c      	b.n	800dfda <tcp_input+0x7ea>
    goto dropped;
 800dfc0:	bf00      	nop
 800dfc2:	e006      	b.n	800dfd2 <tcp_input+0x7e2>
    goto dropped;
 800dfc4:	bf00      	nop
 800dfc6:	e004      	b.n	800dfd2 <tcp_input+0x7e2>
    goto dropped;
 800dfc8:	bf00      	nop
 800dfca:	e002      	b.n	800dfd2 <tcp_input+0x7e2>
      goto dropped;
 800dfcc:	bf00      	nop
 800dfce:	e000      	b.n	800dfd2 <tcp_input+0x7e2>
      goto dropped;
 800dfd0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7fd fd40 	bl	800ba58 <pbuf_free>
 800dfd8:	e000      	b.n	800dfdc <tcp_input+0x7ec>
  return;
 800dfda:	bf00      	nop
}
 800dfdc:	3724      	adds	r7, #36	@ 0x24
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd90      	pop	{r4, r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	2000b158 	.word	0x2000b158
 800dfe8:	2000b154 	.word	0x2000b154
 800dfec:	2000b124 	.word	0x2000b124
 800dff0:	2000b134 	.word	0x2000b134
 800dff4:	2000b148 	.word	0x2000b148
 800dff8:	2000b14e 	.word	0x2000b14e
 800dffc:	2000b144 	.word	0x2000b144
 800e000:	200059ec 	.word	0x200059ec
 800e004:	200059f0 	.word	0x200059f0

0800e008 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d106      	bne.n	800e024 <tcp_input_delayed_close+0x1c>
 800e016:	4b17      	ldr	r3, [pc, #92]	@ (800e074 <tcp_input_delayed_close+0x6c>)
 800e018:	f240 225a 	movw	r2, #602	@ 0x25a
 800e01c:	4916      	ldr	r1, [pc, #88]	@ (800e078 <tcp_input_delayed_close+0x70>)
 800e01e:	4817      	ldr	r0, [pc, #92]	@ (800e07c <tcp_input_delayed_close+0x74>)
 800e020:	f006 fb88 	bl	8014734 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e024:	4b16      	ldr	r3, [pc, #88]	@ (800e080 <tcp_input_delayed_close+0x78>)
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	f003 0310 	and.w	r3, r3, #16
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d01c      	beq.n	800e06a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	8b5b      	ldrh	r3, [r3, #26]
 800e034:	f003 0310 	and.w	r3, r3, #16
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d10d      	bne.n	800e058 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e042:	2b00      	cmp	r3, #0
 800e044:	d008      	beq.n	800e058 <tcp_input_delayed_close+0x50>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	6912      	ldr	r2, [r2, #16]
 800e050:	f06f 010e 	mvn.w	r1, #14
 800e054:	4610      	mov	r0, r2
 800e056:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e058:	6879      	ldr	r1, [r7, #4]
 800e05a:	480a      	ldr	r0, [pc, #40]	@ (800e084 <tcp_input_delayed_close+0x7c>)
 800e05c:	f7ff fa50 	bl	800d500 <tcp_pcb_remove>
    tcp_free(pcb);
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f7fe f83b 	bl	800c0dc <tcp_free>
    return 1;
 800e066:	2301      	movs	r3, #1
 800e068:	e000      	b.n	800e06c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e06a:	2300      	movs	r3, #0
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3708      	adds	r7, #8
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	08016790 	.word	0x08016790
 800e078:	08016960 	.word	0x08016960
 800e07c:	080167dc 	.word	0x080167dc
 800e080:	2000b151 	.word	0x2000b151
 800e084:	2000b118 	.word	0x2000b118

0800e088 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e088:	b590      	push	{r4, r7, lr}
 800e08a:	b08b      	sub	sp, #44	@ 0x2c
 800e08c:	af04      	add	r7, sp, #16
 800e08e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e090:	4b6f      	ldr	r3, [pc, #444]	@ (800e250 <tcp_listen_input+0x1c8>)
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	f003 0304 	and.w	r3, r3, #4
 800e098:	2b00      	cmp	r3, #0
 800e09a:	f040 80d2 	bne.w	800e242 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d106      	bne.n	800e0b2 <tcp_listen_input+0x2a>
 800e0a4:	4b6b      	ldr	r3, [pc, #428]	@ (800e254 <tcp_listen_input+0x1cc>)
 800e0a6:	f240 2281 	movw	r2, #641	@ 0x281
 800e0aa:	496b      	ldr	r1, [pc, #428]	@ (800e258 <tcp_listen_input+0x1d0>)
 800e0ac:	486b      	ldr	r0, [pc, #428]	@ (800e25c <tcp_listen_input+0x1d4>)
 800e0ae:	f006 fb41 	bl	8014734 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e0b2:	4b67      	ldr	r3, [pc, #412]	@ (800e250 <tcp_listen_input+0x1c8>)
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	f003 0310 	and.w	r3, r3, #16
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d019      	beq.n	800e0f2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0be:	4b68      	ldr	r3, [pc, #416]	@ (800e260 <tcp_listen_input+0x1d8>)
 800e0c0:	6819      	ldr	r1, [r3, #0]
 800e0c2:	4b68      	ldr	r3, [pc, #416]	@ (800e264 <tcp_listen_input+0x1dc>)
 800e0c4:	881b      	ldrh	r3, [r3, #0]
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	4b67      	ldr	r3, [pc, #412]	@ (800e268 <tcp_listen_input+0x1e0>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e0ce:	4b67      	ldr	r3, [pc, #412]	@ (800e26c <tcp_listen_input+0x1e4>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0d2:	885b      	ldrh	r3, [r3, #2]
 800e0d4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e0d6:	4a65      	ldr	r2, [pc, #404]	@ (800e26c <tcp_listen_input+0x1e4>)
 800e0d8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0da:	8812      	ldrh	r2, [r2, #0]
 800e0dc:	b292      	uxth	r2, r2
 800e0de:	9202      	str	r2, [sp, #8]
 800e0e0:	9301      	str	r3, [sp, #4]
 800e0e2:	4b63      	ldr	r3, [pc, #396]	@ (800e270 <tcp_listen_input+0x1e8>)
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	4b63      	ldr	r3, [pc, #396]	@ (800e274 <tcp_listen_input+0x1ec>)
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f002 ff7a 	bl	8010fe4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e0f0:	e0a9      	b.n	800e246 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e0f2:	4b57      	ldr	r3, [pc, #348]	@ (800e250 <tcp_listen_input+0x1c8>)
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	f003 0302 	and.w	r3, r3, #2
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	f000 80a3 	beq.w	800e246 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	7d5b      	ldrb	r3, [r3, #21]
 800e104:	4618      	mov	r0, r3
 800e106:	f7ff f927 	bl	800d358 <tcp_alloc>
 800e10a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d111      	bne.n	800e136 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	699b      	ldr	r3, [r3, #24]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00a      	beq.n	800e130 <tcp_listen_input+0xa8>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	699b      	ldr	r3, [r3, #24]
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	6910      	ldr	r0, [r2, #16]
 800e122:	f04f 32ff 	mov.w	r2, #4294967295
 800e126:	2100      	movs	r1, #0
 800e128:	4798      	blx	r3
 800e12a:	4603      	mov	r3, r0
 800e12c:	73bb      	strb	r3, [r7, #14]
      return;
 800e12e:	e08b      	b.n	800e248 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e130:	23f0      	movs	r3, #240	@ 0xf0
 800e132:	73bb      	strb	r3, [r7, #14]
      return;
 800e134:	e088      	b.n	800e248 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e136:	4b50      	ldr	r3, [pc, #320]	@ (800e278 <tcp_listen_input+0x1f0>)
 800e138:	695a      	ldr	r2, [r3, #20]
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e13e:	4b4e      	ldr	r3, [pc, #312]	@ (800e278 <tcp_listen_input+0x1f0>)
 800e140:	691a      	ldr	r2, [r3, #16]
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	8ada      	ldrh	r2, [r3, #22]
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e14e:	4b47      	ldr	r3, [pc, #284]	@ (800e26c <tcp_listen_input+0x1e4>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	881b      	ldrh	r3, [r3, #0]
 800e154:	b29a      	uxth	r2, r3
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	2203      	movs	r2, #3
 800e15e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e160:	4b41      	ldr	r3, [pc, #260]	@ (800e268 <tcp_listen_input+0x1e0>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	1c5a      	adds	r2, r3, #1
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e172:	6978      	ldr	r0, [r7, #20]
 800e174:	f7ff fa58 	bl	800d628 <tcp_next_iss>
 800e178:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	693a      	ldr	r2, [r7, #16]
 800e17e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	693a      	ldr	r2, [r7, #16]
 800e184:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	693a      	ldr	r2, [r7, #16]
 800e18a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	693a      	ldr	r2, [r7, #16]
 800e190:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e192:	4b35      	ldr	r3, [pc, #212]	@ (800e268 <tcp_listen_input+0x1e0>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	1e5a      	subs	r2, r3, #1
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	691a      	ldr	r2, [r3, #16]
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	7a5b      	ldrb	r3, [r3, #9]
 800e1ae:	f003 030c 	and.w	r3, r3, #12
 800e1b2:	b2da      	uxtb	r2, r3
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	7a1a      	ldrb	r2, [r3, #8]
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e1c0:	4b2e      	ldr	r3, [pc, #184]	@ (800e27c <tcp_listen_input+0x1f4>)
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	60da      	str	r2, [r3, #12]
 800e1c8:	4a2c      	ldr	r2, [pc, #176]	@ (800e27c <tcp_listen_input+0x1f4>)
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	6013      	str	r3, [r2, #0]
 800e1ce:	f003 f8cb 	bl	8011368 <tcp_timer_needed>
 800e1d2:	4b2b      	ldr	r3, [pc, #172]	@ (800e280 <tcp_listen_input+0x1f8>)
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e1d8:	6978      	ldr	r0, [r7, #20]
 800e1da:	f001 fd8b 	bl	800fcf4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e1de:	4b23      	ldr	r3, [pc, #140]	@ (800e26c <tcp_listen_input+0x1e4>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	89db      	ldrh	r3, [r3, #14]
 800e1e4:	b29a      	uxth	r2, r3
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	3304      	adds	r3, #4
 800e200:	4618      	mov	r0, r3
 800e202:	f004 ffab 	bl	801315c <ip4_route>
 800e206:	4601      	mov	r1, r0
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	3304      	adds	r3, #4
 800e20c:	461a      	mov	r2, r3
 800e20e:	4620      	mov	r0, r4
 800e210:	f7ff fa30 	bl	800d674 <tcp_eff_send_mss_netif>
 800e214:	4603      	mov	r3, r0
 800e216:	461a      	mov	r2, r3
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e21c:	2112      	movs	r1, #18
 800e21e:	6978      	ldr	r0, [r7, #20]
 800e220:	f002 f83e 	bl	80102a0 <tcp_enqueue_flags>
 800e224:	4603      	mov	r3, r0
 800e226:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d004      	beq.n	800e23a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e230:	2100      	movs	r1, #0
 800e232:	6978      	ldr	r0, [r7, #20]
 800e234:	f7fe f97c 	bl	800c530 <tcp_abandon>
      return;
 800e238:	e006      	b.n	800e248 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e23a:	6978      	ldr	r0, [r7, #20]
 800e23c:	f002 f91e 	bl	801047c <tcp_output>
  return;
 800e240:	e001      	b.n	800e246 <tcp_listen_input+0x1be>
    return;
 800e242:	bf00      	nop
 800e244:	e000      	b.n	800e248 <tcp_listen_input+0x1c0>
  return;
 800e246:	bf00      	nop
}
 800e248:	371c      	adds	r7, #28
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd90      	pop	{r4, r7, pc}
 800e24e:	bf00      	nop
 800e250:	2000b150 	.word	0x2000b150
 800e254:	08016790 	.word	0x08016790
 800e258:	08016988 	.word	0x08016988
 800e25c:	080167dc 	.word	0x080167dc
 800e260:	2000b148 	.word	0x2000b148
 800e264:	2000b14e 	.word	0x2000b14e
 800e268:	2000b144 	.word	0x2000b144
 800e26c:	2000b134 	.word	0x2000b134
 800e270:	200059ec 	.word	0x200059ec
 800e274:	200059f0 	.word	0x200059f0
 800e278:	200059dc 	.word	0x200059dc
 800e27c:	2000b118 	.word	0x2000b118
 800e280:	2000b120 	.word	0x2000b120

0800e284 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b086      	sub	sp, #24
 800e288:	af04      	add	r7, sp, #16
 800e28a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e28c:	4b2f      	ldr	r3, [pc, #188]	@ (800e34c <tcp_timewait_input+0xc8>)
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	f003 0304 	and.w	r3, r3, #4
 800e294:	2b00      	cmp	r3, #0
 800e296:	d153      	bne.n	800e340 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d106      	bne.n	800e2ac <tcp_timewait_input+0x28>
 800e29e:	4b2c      	ldr	r3, [pc, #176]	@ (800e350 <tcp_timewait_input+0xcc>)
 800e2a0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e2a4:	492b      	ldr	r1, [pc, #172]	@ (800e354 <tcp_timewait_input+0xd0>)
 800e2a6:	482c      	ldr	r0, [pc, #176]	@ (800e358 <tcp_timewait_input+0xd4>)
 800e2a8:	f006 fa44 	bl	8014734 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e2ac:	4b27      	ldr	r3, [pc, #156]	@ (800e34c <tcp_timewait_input+0xc8>)
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	f003 0302 	and.w	r3, r3, #2
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d02a      	beq.n	800e30e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e2b8:	4b28      	ldr	r3, [pc, #160]	@ (800e35c <tcp_timewait_input+0xd8>)
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2c0:	1ad3      	subs	r3, r2, r3
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	db2d      	blt.n	800e322 <tcp_timewait_input+0x9e>
 800e2c6:	4b25      	ldr	r3, [pc, #148]	@ (800e35c <tcp_timewait_input+0xd8>)
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2ce:	6879      	ldr	r1, [r7, #4]
 800e2d0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e2d2:	440b      	add	r3, r1
 800e2d4:	1ad3      	subs	r3, r2, r3
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	dc23      	bgt.n	800e322 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2da:	4b21      	ldr	r3, [pc, #132]	@ (800e360 <tcp_timewait_input+0xdc>)
 800e2dc:	6819      	ldr	r1, [r3, #0]
 800e2de:	4b21      	ldr	r3, [pc, #132]	@ (800e364 <tcp_timewait_input+0xe0>)
 800e2e0:	881b      	ldrh	r3, [r3, #0]
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	4b1d      	ldr	r3, [pc, #116]	@ (800e35c <tcp_timewait_input+0xd8>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2ea:	4b1f      	ldr	r3, [pc, #124]	@ (800e368 <tcp_timewait_input+0xe4>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2ee:	885b      	ldrh	r3, [r3, #2]
 800e2f0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2f2:	4a1d      	ldr	r2, [pc, #116]	@ (800e368 <tcp_timewait_input+0xe4>)
 800e2f4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2f6:	8812      	ldrh	r2, [r2, #0]
 800e2f8:	b292      	uxth	r2, r2
 800e2fa:	9202      	str	r2, [sp, #8]
 800e2fc:	9301      	str	r3, [sp, #4]
 800e2fe:	4b1b      	ldr	r3, [pc, #108]	@ (800e36c <tcp_timewait_input+0xe8>)
 800e300:	9300      	str	r3, [sp, #0]
 800e302:	4b1b      	ldr	r3, [pc, #108]	@ (800e370 <tcp_timewait_input+0xec>)
 800e304:	4602      	mov	r2, r0
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f002 fe6c 	bl	8010fe4 <tcp_rst>
      return;
 800e30c:	e01b      	b.n	800e346 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e30e:	4b0f      	ldr	r3, [pc, #60]	@ (800e34c <tcp_timewait_input+0xc8>)
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	f003 0301 	and.w	r3, r3, #1
 800e316:	2b00      	cmp	r3, #0
 800e318:	d003      	beq.n	800e322 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e31a:	4b16      	ldr	r3, [pc, #88]	@ (800e374 <tcp_timewait_input+0xf0>)
 800e31c:	681a      	ldr	r2, [r3, #0]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e322:	4b10      	ldr	r3, [pc, #64]	@ (800e364 <tcp_timewait_input+0xe0>)
 800e324:	881b      	ldrh	r3, [r3, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d00c      	beq.n	800e344 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	8b5b      	ldrh	r3, [r3, #26]
 800e32e:	f043 0302 	orr.w	r3, r3, #2
 800e332:	b29a      	uxth	r2, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f002 f89f 	bl	801047c <tcp_output>
  }
  return;
 800e33e:	e001      	b.n	800e344 <tcp_timewait_input+0xc0>
    return;
 800e340:	bf00      	nop
 800e342:	e000      	b.n	800e346 <tcp_timewait_input+0xc2>
  return;
 800e344:	bf00      	nop
}
 800e346:	3708      	adds	r7, #8
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	2000b150 	.word	0x2000b150
 800e350:	08016790 	.word	0x08016790
 800e354:	080169a8 	.word	0x080169a8
 800e358:	080167dc 	.word	0x080167dc
 800e35c:	2000b144 	.word	0x2000b144
 800e360:	2000b148 	.word	0x2000b148
 800e364:	2000b14e 	.word	0x2000b14e
 800e368:	2000b134 	.word	0x2000b134
 800e36c:	200059ec 	.word	0x200059ec
 800e370:	200059f0 	.word	0x200059f0
 800e374:	2000b10c 	.word	0x2000b10c

0800e378 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e378:	b590      	push	{r4, r7, lr}
 800e37a:	b08d      	sub	sp, #52	@ 0x34
 800e37c:	af04      	add	r7, sp, #16
 800e37e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e380:	2300      	movs	r3, #0
 800e382:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e384:	2300      	movs	r3, #0
 800e386:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d106      	bne.n	800e39c <tcp_process+0x24>
 800e38e:	4b9d      	ldr	r3, [pc, #628]	@ (800e604 <tcp_process+0x28c>)
 800e390:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800e394:	499c      	ldr	r1, [pc, #624]	@ (800e608 <tcp_process+0x290>)
 800e396:	489d      	ldr	r0, [pc, #628]	@ (800e60c <tcp_process+0x294>)
 800e398:	f006 f9cc 	bl	8014734 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e39c:	4b9c      	ldr	r3, [pc, #624]	@ (800e610 <tcp_process+0x298>)
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	f003 0304 	and.w	r3, r3, #4
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d04e      	beq.n	800e446 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	7d1b      	ldrb	r3, [r3, #20]
 800e3ac:	2b02      	cmp	r3, #2
 800e3ae:	d108      	bne.n	800e3c2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e3b4:	4b97      	ldr	r3, [pc, #604]	@ (800e614 <tcp_process+0x29c>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d123      	bne.n	800e404 <tcp_process+0x8c>
        acceptable = 1;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	76fb      	strb	r3, [r7, #27]
 800e3c0:	e020      	b.n	800e404 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e3c6:	4b94      	ldr	r3, [pc, #592]	@ (800e618 <tcp_process+0x2a0>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d102      	bne.n	800e3d4 <tcp_process+0x5c>
        acceptable = 1;
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	76fb      	strb	r3, [r7, #27]
 800e3d2:	e017      	b.n	800e404 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e3d4:	4b90      	ldr	r3, [pc, #576]	@ (800e618 <tcp_process+0x2a0>)
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3dc:	1ad3      	subs	r3, r2, r3
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	db10      	blt.n	800e404 <tcp_process+0x8c>
 800e3e2:	4b8d      	ldr	r3, [pc, #564]	@ (800e618 <tcp_process+0x2a0>)
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ea:	6879      	ldr	r1, [r7, #4]
 800e3ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e3ee:	440b      	add	r3, r1
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	dc06      	bgt.n	800e404 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	8b5b      	ldrh	r3, [r3, #26]
 800e3fa:	f043 0302 	orr.w	r3, r3, #2
 800e3fe:	b29a      	uxth	r2, r3
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e404:	7efb      	ldrb	r3, [r7, #27]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d01b      	beq.n	800e442 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	7d1b      	ldrb	r3, [r3, #20]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d106      	bne.n	800e420 <tcp_process+0xa8>
 800e412:	4b7c      	ldr	r3, [pc, #496]	@ (800e604 <tcp_process+0x28c>)
 800e414:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800e418:	4980      	ldr	r1, [pc, #512]	@ (800e61c <tcp_process+0x2a4>)
 800e41a:	487c      	ldr	r0, [pc, #496]	@ (800e60c <tcp_process+0x294>)
 800e41c:	f006 f98a 	bl	8014734 <iprintf>
      recv_flags |= TF_RESET;
 800e420:	4b7f      	ldr	r3, [pc, #508]	@ (800e620 <tcp_process+0x2a8>)
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	f043 0308 	orr.w	r3, r3, #8
 800e428:	b2da      	uxtb	r2, r3
 800e42a:	4b7d      	ldr	r3, [pc, #500]	@ (800e620 <tcp_process+0x2a8>)
 800e42c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	8b5b      	ldrh	r3, [r3, #26]
 800e432:	f023 0301 	bic.w	r3, r3, #1
 800e436:	b29a      	uxth	r2, r3
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e43c:	f06f 030d 	mvn.w	r3, #13
 800e440:	e37a      	b.n	800eb38 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e442:	2300      	movs	r3, #0
 800e444:	e378      	b.n	800eb38 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e446:	4b72      	ldr	r3, [pc, #456]	@ (800e610 <tcp_process+0x298>)
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	f003 0302 	and.w	r3, r3, #2
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d010      	beq.n	800e474 <tcp_process+0xfc>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	7d1b      	ldrb	r3, [r3, #20]
 800e456:	2b02      	cmp	r3, #2
 800e458:	d00c      	beq.n	800e474 <tcp_process+0xfc>
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	7d1b      	ldrb	r3, [r3, #20]
 800e45e:	2b03      	cmp	r3, #3
 800e460:	d008      	beq.n	800e474 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	8b5b      	ldrh	r3, [r3, #26]
 800e466:	f043 0302 	orr.w	r3, r3, #2
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e470:	2300      	movs	r3, #0
 800e472:	e361      	b.n	800eb38 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	8b5b      	ldrh	r3, [r3, #26]
 800e478:	f003 0310 	and.w	r3, r3, #16
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d103      	bne.n	800e488 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e480:	4b68      	ldr	r3, [pc, #416]	@ (800e624 <tcp_process+0x2ac>)
 800e482:	681a      	ldr	r2, [r3, #0]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2200      	movs	r2, #0
 800e48c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2200      	movs	r2, #0
 800e494:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f001 fc2b 	bl	800fcf4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	7d1b      	ldrb	r3, [r3, #20]
 800e4a2:	3b02      	subs	r3, #2
 800e4a4:	2b07      	cmp	r3, #7
 800e4a6:	f200 8337 	bhi.w	800eb18 <tcp_process+0x7a0>
 800e4aa:	a201      	add	r2, pc, #4	@ (adr r2, 800e4b0 <tcp_process+0x138>)
 800e4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b0:	0800e4d1 	.word	0x0800e4d1
 800e4b4:	0800e701 	.word	0x0800e701
 800e4b8:	0800e879 	.word	0x0800e879
 800e4bc:	0800e8a3 	.word	0x0800e8a3
 800e4c0:	0800e9c7 	.word	0x0800e9c7
 800e4c4:	0800e879 	.word	0x0800e879
 800e4c8:	0800ea53 	.word	0x0800ea53
 800e4cc:	0800eae3 	.word	0x0800eae3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e4d0:	4b4f      	ldr	r3, [pc, #316]	@ (800e610 <tcp_process+0x298>)
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	f003 0310 	and.w	r3, r3, #16
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f000 80e4 	beq.w	800e6a6 <tcp_process+0x32e>
 800e4de:	4b4c      	ldr	r3, [pc, #304]	@ (800e610 <tcp_process+0x298>)
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	f003 0302 	and.w	r3, r3, #2
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	f000 80dd 	beq.w	800e6a6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4f0:	1c5a      	adds	r2, r3, #1
 800e4f2:	4b48      	ldr	r3, [pc, #288]	@ (800e614 <tcp_process+0x29c>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	f040 80d5 	bne.w	800e6a6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e4fc:	4b46      	ldr	r3, [pc, #280]	@ (800e618 <tcp_process+0x2a0>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	1c5a      	adds	r2, r3, #1
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800e50e:	4b41      	ldr	r3, [pc, #260]	@ (800e614 <tcp_process+0x29c>)
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e516:	4b44      	ldr	r3, [pc, #272]	@ (800e628 <tcp_process+0x2b0>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	89db      	ldrh	r3, [r3, #14]
 800e51c:	b29a      	uxth	r2, r3
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e530:	4b39      	ldr	r3, [pc, #228]	@ (800e618 <tcp_process+0x2a0>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	1e5a      	subs	r2, r3, #1
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2204      	movs	r2, #4
 800e53e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	3304      	adds	r3, #4
 800e548:	4618      	mov	r0, r3
 800e54a:	f004 fe07 	bl	801315c <ip4_route>
 800e54e:	4601      	mov	r1, r0
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	3304      	adds	r3, #4
 800e554:	461a      	mov	r2, r3
 800e556:	4620      	mov	r0, r4
 800e558:	f7ff f88c 	bl	800d674 <tcp_eff_send_mss_netif>
 800e55c:	4603      	mov	r3, r0
 800e55e:	461a      	mov	r2, r3
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e568:	009a      	lsls	r2, r3, #2
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e56e:	005b      	lsls	r3, r3, #1
 800e570:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e574:	428b      	cmp	r3, r1
 800e576:	bf38      	it	cc
 800e578:	460b      	movcc	r3, r1
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d204      	bcs.n	800e588 <tcp_process+0x210>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	b29b      	uxth	r3, r3
 800e586:	e00d      	b.n	800e5a4 <tcp_process+0x22c>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e58c:	005b      	lsls	r3, r3, #1
 800e58e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e592:	4293      	cmp	r3, r2
 800e594:	d904      	bls.n	800e5a0 <tcp_process+0x228>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e59a:	005b      	lsls	r3, r3, #1
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	e001      	b.n	800e5a4 <tcp_process+0x22c>
 800e5a0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d106      	bne.n	800e5c2 <tcp_process+0x24a>
 800e5b4:	4b13      	ldr	r3, [pc, #76]	@ (800e604 <tcp_process+0x28c>)
 800e5b6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800e5ba:	491c      	ldr	r1, [pc, #112]	@ (800e62c <tcp_process+0x2b4>)
 800e5bc:	4813      	ldr	r0, [pc, #76]	@ (800e60c <tcp_process+0x294>)
 800e5be:	f006 f8b9 	bl	8014734 <iprintf>
        --pcb->snd_queuelen;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e5c8:	3b01      	subs	r3, #1
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e5d6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d12a      	bne.n	800e634 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5e2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e5e4:	69fb      	ldr	r3, [r7, #28]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d106      	bne.n	800e5f8 <tcp_process+0x280>
 800e5ea:	4b06      	ldr	r3, [pc, #24]	@ (800e604 <tcp_process+0x28c>)
 800e5ec:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800e5f0:	490f      	ldr	r1, [pc, #60]	@ (800e630 <tcp_process+0x2b8>)
 800e5f2:	4806      	ldr	r0, [pc, #24]	@ (800e60c <tcp_process+0x294>)
 800e5f4:	f006 f89e 	bl	8014734 <iprintf>
          pcb->unsent = rseg->next;
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e600:	e01c      	b.n	800e63c <tcp_process+0x2c4>
 800e602:	bf00      	nop
 800e604:	08016790 	.word	0x08016790
 800e608:	080169c8 	.word	0x080169c8
 800e60c:	080167dc 	.word	0x080167dc
 800e610:	2000b150 	.word	0x2000b150
 800e614:	2000b148 	.word	0x2000b148
 800e618:	2000b144 	.word	0x2000b144
 800e61c:	080169e4 	.word	0x080169e4
 800e620:	2000b151 	.word	0x2000b151
 800e624:	2000b10c 	.word	0x2000b10c
 800e628:	2000b134 	.word	0x2000b134
 800e62c:	08016a04 	.word	0x08016a04
 800e630:	08016a1c 	.word	0x08016a1c
        } else {
          pcb->unacked = rseg->next;
 800e634:	69fb      	ldr	r3, [r7, #28]
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800e63c:	69f8      	ldr	r0, [r7, #28]
 800e63e:	f7fe fd22 	bl	800d086 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e646:	2b00      	cmp	r3, #0
 800e648:	d104      	bne.n	800e654 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e650:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e652:	e006      	b.n	800e662 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2200      	movs	r2, #0
 800e658:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2200      	movs	r2, #0
 800e65e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d00a      	beq.n	800e682 <tcp_process+0x30a>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e672:	687a      	ldr	r2, [r7, #4]
 800e674:	6910      	ldr	r0, [r2, #16]
 800e676:	2200      	movs	r2, #0
 800e678:	6879      	ldr	r1, [r7, #4]
 800e67a:	4798      	blx	r3
 800e67c:	4603      	mov	r3, r0
 800e67e:	76bb      	strb	r3, [r7, #26]
 800e680:	e001      	b.n	800e686 <tcp_process+0x30e>
 800e682:	2300      	movs	r3, #0
 800e684:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e686:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e68a:	f113 0f0d 	cmn.w	r3, #13
 800e68e:	d102      	bne.n	800e696 <tcp_process+0x31e>
          return ERR_ABRT;
 800e690:	f06f 030c 	mvn.w	r3, #12
 800e694:	e250      	b.n	800eb38 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	8b5b      	ldrh	r3, [r3, #26]
 800e69a:	f043 0302 	orr.w	r3, r3, #2
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e6a4:	e23a      	b.n	800eb1c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e6a6:	4b98      	ldr	r3, [pc, #608]	@ (800e908 <tcp_process+0x590>)
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	f003 0310 	and.w	r3, r3, #16
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	f000 8234 	beq.w	800eb1c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6b4:	4b95      	ldr	r3, [pc, #596]	@ (800e90c <tcp_process+0x594>)
 800e6b6:	6819      	ldr	r1, [r3, #0]
 800e6b8:	4b95      	ldr	r3, [pc, #596]	@ (800e910 <tcp_process+0x598>)
 800e6ba:	881b      	ldrh	r3, [r3, #0]
 800e6bc:	461a      	mov	r2, r3
 800e6be:	4b95      	ldr	r3, [pc, #596]	@ (800e914 <tcp_process+0x59c>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6c4:	4b94      	ldr	r3, [pc, #592]	@ (800e918 <tcp_process+0x5a0>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6c8:	885b      	ldrh	r3, [r3, #2]
 800e6ca:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6cc:	4a92      	ldr	r2, [pc, #584]	@ (800e918 <tcp_process+0x5a0>)
 800e6ce:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6d0:	8812      	ldrh	r2, [r2, #0]
 800e6d2:	b292      	uxth	r2, r2
 800e6d4:	9202      	str	r2, [sp, #8]
 800e6d6:	9301      	str	r3, [sp, #4]
 800e6d8:	4b90      	ldr	r3, [pc, #576]	@ (800e91c <tcp_process+0x5a4>)
 800e6da:	9300      	str	r3, [sp, #0]
 800e6dc:	4b90      	ldr	r3, [pc, #576]	@ (800e920 <tcp_process+0x5a8>)
 800e6de:	4602      	mov	r2, r0
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f002 fc7f 	bl	8010fe4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e6ec:	2b05      	cmp	r3, #5
 800e6ee:	f200 8215 	bhi.w	800eb1c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f002 fa4b 	bl	8010b94 <tcp_rexmit_rto>
      break;
 800e6fe:	e20d      	b.n	800eb1c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e700:	4b81      	ldr	r3, [pc, #516]	@ (800e908 <tcp_process+0x590>)
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	f003 0310 	and.w	r3, r3, #16
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f000 80a1 	beq.w	800e850 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e70e:	4b7f      	ldr	r3, [pc, #508]	@ (800e90c <tcp_process+0x594>)
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e716:	1ad3      	subs	r3, r2, r3
 800e718:	3b01      	subs	r3, #1
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	db7e      	blt.n	800e81c <tcp_process+0x4a4>
 800e71e:	4b7b      	ldr	r3, [pc, #492]	@ (800e90c <tcp_process+0x594>)
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e726:	1ad3      	subs	r3, r2, r3
 800e728:	2b00      	cmp	r3, #0
 800e72a:	dc77      	bgt.n	800e81c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2204      	movs	r2, #4
 800e730:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e736:	2b00      	cmp	r3, #0
 800e738:	d102      	bne.n	800e740 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e73a:	23fa      	movs	r3, #250	@ 0xfa
 800e73c:	76bb      	strb	r3, [r7, #26]
 800e73e:	e01d      	b.n	800e77c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e744:	699b      	ldr	r3, [r3, #24]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d106      	bne.n	800e758 <tcp_process+0x3e0>
 800e74a:	4b76      	ldr	r3, [pc, #472]	@ (800e924 <tcp_process+0x5ac>)
 800e74c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800e750:	4975      	ldr	r1, [pc, #468]	@ (800e928 <tcp_process+0x5b0>)
 800e752:	4876      	ldr	r0, [pc, #472]	@ (800e92c <tcp_process+0x5b4>)
 800e754:	f005 ffee 	bl	8014734 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e75c:	699b      	ldr	r3, [r3, #24]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d00a      	beq.n	800e778 <tcp_process+0x400>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e766:	699b      	ldr	r3, [r3, #24]
 800e768:	687a      	ldr	r2, [r7, #4]
 800e76a:	6910      	ldr	r0, [r2, #16]
 800e76c:	2200      	movs	r2, #0
 800e76e:	6879      	ldr	r1, [r7, #4]
 800e770:	4798      	blx	r3
 800e772:	4603      	mov	r3, r0
 800e774:	76bb      	strb	r3, [r7, #26]
 800e776:	e001      	b.n	800e77c <tcp_process+0x404>
 800e778:	23f0      	movs	r3, #240	@ 0xf0
 800e77a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e77c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d00a      	beq.n	800e79a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e784:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e788:	f113 0f0d 	cmn.w	r3, #13
 800e78c:	d002      	beq.n	800e794 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f7fd ff8c 	bl	800c6ac <tcp_abort>
            }
            return ERR_ABRT;
 800e794:	f06f 030c 	mvn.w	r3, #12
 800e798:	e1ce      	b.n	800eb38 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 fae0 	bl	800ed60 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e7a0:	4b63      	ldr	r3, [pc, #396]	@ (800e930 <tcp_process+0x5b8>)
 800e7a2:	881b      	ldrh	r3, [r3, #0]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d005      	beq.n	800e7b4 <tcp_process+0x43c>
            recv_acked--;
 800e7a8:	4b61      	ldr	r3, [pc, #388]	@ (800e930 <tcp_process+0x5b8>)
 800e7aa:	881b      	ldrh	r3, [r3, #0]
 800e7ac:	3b01      	subs	r3, #1
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	4b5f      	ldr	r3, [pc, #380]	@ (800e930 <tcp_process+0x5b8>)
 800e7b2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7b8:	009a      	lsls	r2, r3, #2
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7be:	005b      	lsls	r3, r3, #1
 800e7c0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e7c4:	428b      	cmp	r3, r1
 800e7c6:	bf38      	it	cc
 800e7c8:	460b      	movcc	r3, r1
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d204      	bcs.n	800e7d8 <tcp_process+0x460>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7d2:	009b      	lsls	r3, r3, #2
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	e00d      	b.n	800e7f4 <tcp_process+0x47c>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7dc:	005b      	lsls	r3, r3, #1
 800e7de:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d904      	bls.n	800e7f0 <tcp_process+0x478>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7ea:	005b      	lsls	r3, r3, #1
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	e001      	b.n	800e7f4 <tcp_process+0x47c>
 800e7f0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e7fa:	4b4e      	ldr	r3, [pc, #312]	@ (800e934 <tcp_process+0x5bc>)
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	f003 0320 	and.w	r3, r3, #32
 800e802:	2b00      	cmp	r3, #0
 800e804:	d037      	beq.n	800e876 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	8b5b      	ldrh	r3, [r3, #26]
 800e80a:	f043 0302 	orr.w	r3, r3, #2
 800e80e:	b29a      	uxth	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2207      	movs	r2, #7
 800e818:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e81a:	e02c      	b.n	800e876 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e81c:	4b3b      	ldr	r3, [pc, #236]	@ (800e90c <tcp_process+0x594>)
 800e81e:	6819      	ldr	r1, [r3, #0]
 800e820:	4b3b      	ldr	r3, [pc, #236]	@ (800e910 <tcp_process+0x598>)
 800e822:	881b      	ldrh	r3, [r3, #0]
 800e824:	461a      	mov	r2, r3
 800e826:	4b3b      	ldr	r3, [pc, #236]	@ (800e914 <tcp_process+0x59c>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e82c:	4b3a      	ldr	r3, [pc, #232]	@ (800e918 <tcp_process+0x5a0>)
 800e82e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e830:	885b      	ldrh	r3, [r3, #2]
 800e832:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e834:	4a38      	ldr	r2, [pc, #224]	@ (800e918 <tcp_process+0x5a0>)
 800e836:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e838:	8812      	ldrh	r2, [r2, #0]
 800e83a:	b292      	uxth	r2, r2
 800e83c:	9202      	str	r2, [sp, #8]
 800e83e:	9301      	str	r3, [sp, #4]
 800e840:	4b36      	ldr	r3, [pc, #216]	@ (800e91c <tcp_process+0x5a4>)
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	4b36      	ldr	r3, [pc, #216]	@ (800e920 <tcp_process+0x5a8>)
 800e846:	4602      	mov	r2, r0
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f002 fbcb 	bl	8010fe4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e84e:	e167      	b.n	800eb20 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e850:	4b2d      	ldr	r3, [pc, #180]	@ (800e908 <tcp_process+0x590>)
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	f003 0302 	and.w	r3, r3, #2
 800e858:	2b00      	cmp	r3, #0
 800e85a:	f000 8161 	beq.w	800eb20 <tcp_process+0x7a8>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e862:	1e5a      	subs	r2, r3, #1
 800e864:	4b2b      	ldr	r3, [pc, #172]	@ (800e914 <tcp_process+0x59c>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	429a      	cmp	r2, r3
 800e86a:	f040 8159 	bne.w	800eb20 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f002 f9b2 	bl	8010bd8 <tcp_rexmit>
      break;
 800e874:	e154      	b.n	800eb20 <tcp_process+0x7a8>
 800e876:	e153      	b.n	800eb20 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f000 fa71 	bl	800ed60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e87e:	4b2d      	ldr	r3, [pc, #180]	@ (800e934 <tcp_process+0x5bc>)
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	f003 0320 	and.w	r3, r3, #32
 800e886:	2b00      	cmp	r3, #0
 800e888:	f000 814c 	beq.w	800eb24 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	8b5b      	ldrh	r3, [r3, #26]
 800e890:	f043 0302 	orr.w	r3, r3, #2
 800e894:	b29a      	uxth	r2, r3
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2207      	movs	r2, #7
 800e89e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e8a0:	e140      	b.n	800eb24 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 fa5c 	bl	800ed60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e8a8:	4b22      	ldr	r3, [pc, #136]	@ (800e934 <tcp_process+0x5bc>)
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	f003 0320 	and.w	r3, r3, #32
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d071      	beq.n	800e998 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e8b4:	4b14      	ldr	r3, [pc, #80]	@ (800e908 <tcp_process+0x590>)
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	f003 0310 	and.w	r3, r3, #16
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d060      	beq.n	800e982 <tcp_process+0x60a>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e8c4:	4b11      	ldr	r3, [pc, #68]	@ (800e90c <tcp_process+0x594>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d15a      	bne.n	800e982 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d156      	bne.n	800e982 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	8b5b      	ldrh	r3, [r3, #26]
 800e8d8:	f043 0302 	orr.w	r3, r3, #2
 800e8dc:	b29a      	uxth	r2, r3
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f7fe fdbc 	bl	800d460 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e8e8:	4b13      	ldr	r3, [pc, #76]	@ (800e938 <tcp_process+0x5c0>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d105      	bne.n	800e8fe <tcp_process+0x586>
 800e8f2:	4b11      	ldr	r3, [pc, #68]	@ (800e938 <tcp_process+0x5c0>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	4a0f      	ldr	r2, [pc, #60]	@ (800e938 <tcp_process+0x5c0>)
 800e8fa:	6013      	str	r3, [r2, #0]
 800e8fc:	e02e      	b.n	800e95c <tcp_process+0x5e4>
 800e8fe:	4b0e      	ldr	r3, [pc, #56]	@ (800e938 <tcp_process+0x5c0>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	617b      	str	r3, [r7, #20]
 800e904:	e027      	b.n	800e956 <tcp_process+0x5de>
 800e906:	bf00      	nop
 800e908:	2000b150 	.word	0x2000b150
 800e90c:	2000b148 	.word	0x2000b148
 800e910:	2000b14e 	.word	0x2000b14e
 800e914:	2000b144 	.word	0x2000b144
 800e918:	2000b134 	.word	0x2000b134
 800e91c:	200059ec 	.word	0x200059ec
 800e920:	200059f0 	.word	0x200059f0
 800e924:	08016790 	.word	0x08016790
 800e928:	08016a30 	.word	0x08016a30
 800e92c:	080167dc 	.word	0x080167dc
 800e930:	2000b14c 	.word	0x2000b14c
 800e934:	2000b151 	.word	0x2000b151
 800e938:	2000b118 	.word	0x2000b118
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	68db      	ldr	r3, [r3, #12]
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	429a      	cmp	r2, r3
 800e944:	d104      	bne.n	800e950 <tcp_process+0x5d8>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	68da      	ldr	r2, [r3, #12]
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	60da      	str	r2, [r3, #12]
 800e94e:	e005      	b.n	800e95c <tcp_process+0x5e4>
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	68db      	ldr	r3, [r3, #12]
 800e954:	617b      	str	r3, [r7, #20]
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d1ef      	bne.n	800e93c <tcp_process+0x5c4>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2200      	movs	r2, #0
 800e960:	60da      	str	r2, [r3, #12]
 800e962:	4b77      	ldr	r3, [pc, #476]	@ (800eb40 <tcp_process+0x7c8>)
 800e964:	2201      	movs	r2, #1
 800e966:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	220a      	movs	r2, #10
 800e96c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e96e:	4b75      	ldr	r3, [pc, #468]	@ (800eb44 <tcp_process+0x7cc>)
 800e970:	681a      	ldr	r2, [r3, #0]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	60da      	str	r2, [r3, #12]
 800e976:	4a73      	ldr	r2, [pc, #460]	@ (800eb44 <tcp_process+0x7cc>)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6013      	str	r3, [r2, #0]
 800e97c:	f002 fcf4 	bl	8011368 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e980:	e0d2      	b.n	800eb28 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	8b5b      	ldrh	r3, [r3, #26]
 800e986:	f043 0302 	orr.w	r3, r3, #2
 800e98a:	b29a      	uxth	r2, r3
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2208      	movs	r2, #8
 800e994:	751a      	strb	r2, [r3, #20]
      break;
 800e996:	e0c7      	b.n	800eb28 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e998:	4b6b      	ldr	r3, [pc, #428]	@ (800eb48 <tcp_process+0x7d0>)
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	f003 0310 	and.w	r3, r3, #16
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f000 80c1 	beq.w	800eb28 <tcp_process+0x7b0>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e9aa:	4b68      	ldr	r3, [pc, #416]	@ (800eb4c <tcp_process+0x7d4>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	f040 80ba 	bne.w	800eb28 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	f040 80b5 	bne.w	800eb28 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2206      	movs	r2, #6
 800e9c2:	751a      	strb	r2, [r3, #20]
      break;
 800e9c4:	e0b0      	b.n	800eb28 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f000 f9ca 	bl	800ed60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e9cc:	4b60      	ldr	r3, [pc, #384]	@ (800eb50 <tcp_process+0x7d8>)
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	f003 0320 	and.w	r3, r3, #32
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	f000 80a9 	beq.w	800eb2c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	8b5b      	ldrh	r3, [r3, #26]
 800e9de:	f043 0302 	orr.w	r3, r3, #2
 800e9e2:	b29a      	uxth	r2, r3
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f7fe fd39 	bl	800d460 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e9ee:	4b59      	ldr	r3, [pc, #356]	@ (800eb54 <tcp_process+0x7dc>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d105      	bne.n	800ea04 <tcp_process+0x68c>
 800e9f8:	4b56      	ldr	r3, [pc, #344]	@ (800eb54 <tcp_process+0x7dc>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	68db      	ldr	r3, [r3, #12]
 800e9fe:	4a55      	ldr	r2, [pc, #340]	@ (800eb54 <tcp_process+0x7dc>)
 800ea00:	6013      	str	r3, [r2, #0]
 800ea02:	e013      	b.n	800ea2c <tcp_process+0x6b4>
 800ea04:	4b53      	ldr	r3, [pc, #332]	@ (800eb54 <tcp_process+0x7dc>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	613b      	str	r3, [r7, #16]
 800ea0a:	e00c      	b.n	800ea26 <tcp_process+0x6ae>
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d104      	bne.n	800ea20 <tcp_process+0x6a8>
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	68da      	ldr	r2, [r3, #12]
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	60da      	str	r2, [r3, #12]
 800ea1e:	e005      	b.n	800ea2c <tcp_process+0x6b4>
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	613b      	str	r3, [r7, #16]
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d1ef      	bne.n	800ea0c <tcp_process+0x694>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	60da      	str	r2, [r3, #12]
 800ea32:	4b43      	ldr	r3, [pc, #268]	@ (800eb40 <tcp_process+0x7c8>)
 800ea34:	2201      	movs	r2, #1
 800ea36:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	220a      	movs	r2, #10
 800ea3c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ea3e:	4b41      	ldr	r3, [pc, #260]	@ (800eb44 <tcp_process+0x7cc>)
 800ea40:	681a      	ldr	r2, [r3, #0]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	60da      	str	r2, [r3, #12]
 800ea46:	4a3f      	ldr	r2, [pc, #252]	@ (800eb44 <tcp_process+0x7cc>)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6013      	str	r3, [r2, #0]
 800ea4c:	f002 fc8c 	bl	8011368 <tcp_timer_needed>
      }
      break;
 800ea50:	e06c      	b.n	800eb2c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f000 f984 	bl	800ed60 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ea58:	4b3b      	ldr	r3, [pc, #236]	@ (800eb48 <tcp_process+0x7d0>)
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	f003 0310 	and.w	r3, r3, #16
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d065      	beq.n	800eb30 <tcp_process+0x7b8>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ea68:	4b38      	ldr	r3, [pc, #224]	@ (800eb4c <tcp_process+0x7d4>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d15f      	bne.n	800eb30 <tcp_process+0x7b8>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d15b      	bne.n	800eb30 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f7fe fcf1 	bl	800d460 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ea7e:	4b35      	ldr	r3, [pc, #212]	@ (800eb54 <tcp_process+0x7dc>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	687a      	ldr	r2, [r7, #4]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d105      	bne.n	800ea94 <tcp_process+0x71c>
 800ea88:	4b32      	ldr	r3, [pc, #200]	@ (800eb54 <tcp_process+0x7dc>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	4a31      	ldr	r2, [pc, #196]	@ (800eb54 <tcp_process+0x7dc>)
 800ea90:	6013      	str	r3, [r2, #0]
 800ea92:	e013      	b.n	800eabc <tcp_process+0x744>
 800ea94:	4b2f      	ldr	r3, [pc, #188]	@ (800eb54 <tcp_process+0x7dc>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	60fb      	str	r3, [r7, #12]
 800ea9a:	e00c      	b.n	800eab6 <tcp_process+0x73e>
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d104      	bne.n	800eab0 <tcp_process+0x738>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	68da      	ldr	r2, [r3, #12]
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	60da      	str	r2, [r3, #12]
 800eaae:	e005      	b.n	800eabc <tcp_process+0x744>
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	68db      	ldr	r3, [r3, #12]
 800eab4:	60fb      	str	r3, [r7, #12]
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d1ef      	bne.n	800ea9c <tcp_process+0x724>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2200      	movs	r2, #0
 800eac0:	60da      	str	r2, [r3, #12]
 800eac2:	4b1f      	ldr	r3, [pc, #124]	@ (800eb40 <tcp_process+0x7c8>)
 800eac4:	2201      	movs	r2, #1
 800eac6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	220a      	movs	r2, #10
 800eacc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800eace:	4b1d      	ldr	r3, [pc, #116]	@ (800eb44 <tcp_process+0x7cc>)
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	60da      	str	r2, [r3, #12]
 800ead6:	4a1b      	ldr	r2, [pc, #108]	@ (800eb44 <tcp_process+0x7cc>)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6013      	str	r3, [r2, #0]
 800eadc:	f002 fc44 	bl	8011368 <tcp_timer_needed>
      }
      break;
 800eae0:	e026      	b.n	800eb30 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f000 f93c 	bl	800ed60 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eae8:	4b17      	ldr	r3, [pc, #92]	@ (800eb48 <tcp_process+0x7d0>)
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	f003 0310 	and.w	r3, r3, #16
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d01f      	beq.n	800eb34 <tcp_process+0x7bc>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eaf8:	4b14      	ldr	r3, [pc, #80]	@ (800eb4c <tcp_process+0x7d4>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d119      	bne.n	800eb34 <tcp_process+0x7bc>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d115      	bne.n	800eb34 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800eb08:	4b11      	ldr	r3, [pc, #68]	@ (800eb50 <tcp_process+0x7d8>)
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	f043 0310 	orr.w	r3, r3, #16
 800eb10:	b2da      	uxtb	r2, r3
 800eb12:	4b0f      	ldr	r3, [pc, #60]	@ (800eb50 <tcp_process+0x7d8>)
 800eb14:	701a      	strb	r2, [r3, #0]
      }
      break;
 800eb16:	e00d      	b.n	800eb34 <tcp_process+0x7bc>
    default:
      break;
 800eb18:	bf00      	nop
 800eb1a:	e00c      	b.n	800eb36 <tcp_process+0x7be>
      break;
 800eb1c:	bf00      	nop
 800eb1e:	e00a      	b.n	800eb36 <tcp_process+0x7be>
      break;
 800eb20:	bf00      	nop
 800eb22:	e008      	b.n	800eb36 <tcp_process+0x7be>
      break;
 800eb24:	bf00      	nop
 800eb26:	e006      	b.n	800eb36 <tcp_process+0x7be>
      break;
 800eb28:	bf00      	nop
 800eb2a:	e004      	b.n	800eb36 <tcp_process+0x7be>
      break;
 800eb2c:	bf00      	nop
 800eb2e:	e002      	b.n	800eb36 <tcp_process+0x7be>
      break;
 800eb30:	bf00      	nop
 800eb32:	e000      	b.n	800eb36 <tcp_process+0x7be>
      break;
 800eb34:	bf00      	nop
  }
  return ERR_OK;
 800eb36:	2300      	movs	r3, #0
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3724      	adds	r7, #36	@ 0x24
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd90      	pop	{r4, r7, pc}
 800eb40:	2000b120 	.word	0x2000b120
 800eb44:	2000b11c 	.word	0x2000b11c
 800eb48:	2000b150 	.word	0x2000b150
 800eb4c:	2000b148 	.word	0x2000b148
 800eb50:	2000b151 	.word	0x2000b151
 800eb54:	2000b118 	.word	0x2000b118

0800eb58 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800eb58:	b590      	push	{r4, r7, lr}
 800eb5a:	b085      	sub	sp, #20
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d106      	bne.n	800eb76 <tcp_oos_insert_segment+0x1e>
 800eb68:	4b3b      	ldr	r3, [pc, #236]	@ (800ec58 <tcp_oos_insert_segment+0x100>)
 800eb6a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800eb6e:	493b      	ldr	r1, [pc, #236]	@ (800ec5c <tcp_oos_insert_segment+0x104>)
 800eb70:	483b      	ldr	r0, [pc, #236]	@ (800ec60 <tcp_oos_insert_segment+0x108>)
 800eb72:	f005 fddf 	bl	8014734 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	899b      	ldrh	r3, [r3, #12]
 800eb7c:	b29b      	uxth	r3, r3
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7fb fc0c 	bl	800a39c <lwip_htons>
 800eb84:	4603      	mov	r3, r0
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	f003 0301 	and.w	r3, r3, #1
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d028      	beq.n	800ebe2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800eb90:	6838      	ldr	r0, [r7, #0]
 800eb92:	f7fe fa63 	bl	800d05c <tcp_segs_free>
    next = NULL;
 800eb96:	2300      	movs	r3, #0
 800eb98:	603b      	str	r3, [r7, #0]
 800eb9a:	e056      	b.n	800ec4a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	899b      	ldrh	r3, [r3, #12]
 800eba2:	b29b      	uxth	r3, r3
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7fb fbf9 	bl	800a39c <lwip_htons>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	f003 0301 	and.w	r3, r3, #1
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00d      	beq.n	800ebd2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	68db      	ldr	r3, [r3, #12]
 800ebba:	899b      	ldrh	r3, [r3, #12]
 800ebbc:	b29c      	uxth	r4, r3
 800ebbe:	2001      	movs	r0, #1
 800ebc0:	f7fb fbec 	bl	800a39c <lwip_htons>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	4322      	orrs	r2, r4
 800ebce:	b292      	uxth	r2, r2
 800ebd0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ebdc:	68f8      	ldr	r0, [r7, #12]
 800ebde:	f7fe fa52 	bl	800d086 <tcp_seg_free>
    while (next &&
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d00e      	beq.n	800ec06 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	891b      	ldrh	r3, [r3, #8]
 800ebec:	461a      	mov	r2, r3
 800ebee:	4b1d      	ldr	r3, [pc, #116]	@ (800ec64 <tcp_oos_insert_segment+0x10c>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	441a      	add	r2, r3
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	68db      	ldr	r3, [r3, #12]
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	6839      	ldr	r1, [r7, #0]
 800ebfc:	8909      	ldrh	r1, [r1, #8]
 800ebfe:	440b      	add	r3, r1
 800ec00:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	daca      	bge.n	800eb9c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d01e      	beq.n	800ec4a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	891b      	ldrh	r3, [r3, #8]
 800ec10:	461a      	mov	r2, r3
 800ec12:	4b14      	ldr	r3, [pc, #80]	@ (800ec64 <tcp_oos_insert_segment+0x10c>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	441a      	add	r2, r3
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	dd12      	ble.n	800ec4a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	b29a      	uxth	r2, r3
 800ec2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ec64 <tcp_oos_insert_segment+0x10c>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	1ad3      	subs	r3, r2, r3
 800ec34:	b29a      	uxth	r2, r3
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	685a      	ldr	r2, [r3, #4]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	891b      	ldrh	r3, [r3, #8]
 800ec42:	4619      	mov	r1, r3
 800ec44:	4610      	mov	r0, r2
 800ec46:	f7fc fd81 	bl	800b74c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	683a      	ldr	r2, [r7, #0]
 800ec4e:	601a      	str	r2, [r3, #0]
}
 800ec50:	bf00      	nop
 800ec52:	3714      	adds	r7, #20
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd90      	pop	{r4, r7, pc}
 800ec58:	08016790 	.word	0x08016790
 800ec5c:	08016a50 	.word	0x08016a50
 800ec60:	080167dc 	.word	0x080167dc
 800ec64:	2000b144 	.word	0x2000b144

0800ec68 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ec68:	b5b0      	push	{r4, r5, r7, lr}
 800ec6a:	b086      	sub	sp, #24
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	607a      	str	r2, [r7, #4]
 800ec74:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ec76:	e03e      	b.n	800ecf6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7fc ff6e 	bl	800bb68 <pbuf_clen>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ec96:	8a7a      	ldrh	r2, [r7, #18]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d906      	bls.n	800ecaa <tcp_free_acked_segments+0x42>
 800ec9c:	4b2a      	ldr	r3, [pc, #168]	@ (800ed48 <tcp_free_acked_segments+0xe0>)
 800ec9e:	f240 4257 	movw	r2, #1111	@ 0x457
 800eca2:	492a      	ldr	r1, [pc, #168]	@ (800ed4c <tcp_free_acked_segments+0xe4>)
 800eca4:	482a      	ldr	r0, [pc, #168]	@ (800ed50 <tcp_free_acked_segments+0xe8>)
 800eca6:	f005 fd45 	bl	8014734 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800ecb0:	8a7b      	ldrh	r3, [r7, #18]
 800ecb2:	1ad3      	subs	r3, r2, r3
 800ecb4:	b29a      	uxth	r2, r3
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	891a      	ldrh	r2, [r3, #8]
 800ecc0:	4b24      	ldr	r3, [pc, #144]	@ (800ed54 <tcp_free_acked_segments+0xec>)
 800ecc2:	881b      	ldrh	r3, [r3, #0]
 800ecc4:	4413      	add	r3, r2
 800ecc6:	b29a      	uxth	r2, r3
 800ecc8:	4b22      	ldr	r3, [pc, #136]	@ (800ed54 <tcp_free_acked_segments+0xec>)
 800ecca:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800eccc:	6978      	ldr	r0, [r7, #20]
 800ecce:	f7fe f9da 	bl	800d086 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d00c      	beq.n	800ecf6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d109      	bne.n	800ecf6 <tcp_free_acked_segments+0x8e>
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d106      	bne.n	800ecf6 <tcp_free_acked_segments+0x8e>
 800ece8:	4b17      	ldr	r3, [pc, #92]	@ (800ed48 <tcp_free_acked_segments+0xe0>)
 800ecea:	f240 4261 	movw	r2, #1121	@ 0x461
 800ecee:	491a      	ldr	r1, [pc, #104]	@ (800ed58 <tcp_free_acked_segments+0xf0>)
 800ecf0:	4817      	ldr	r0, [pc, #92]	@ (800ed50 <tcp_free_acked_segments+0xe8>)
 800ecf2:	f005 fd1f 	bl	8014734 <iprintf>
  while (seg_list != NULL &&
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d020      	beq.n	800ed3e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	68db      	ldr	r3, [r3, #12]
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7fb fb60 	bl	800a3c8 <lwip_htonl>
 800ed08:	4604      	mov	r4, r0
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	891b      	ldrh	r3, [r3, #8]
 800ed0e:	461d      	mov	r5, r3
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	68db      	ldr	r3, [r3, #12]
 800ed14:	899b      	ldrh	r3, [r3, #12]
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7fb fb3f 	bl	800a39c <lwip_htons>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	f003 0303 	and.w	r3, r3, #3
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d001      	beq.n	800ed2e <tcp_free_acked_segments+0xc6>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e000      	b.n	800ed30 <tcp_free_acked_segments+0xc8>
 800ed2e:	2300      	movs	r3, #0
 800ed30:	442b      	add	r3, r5
 800ed32:	18e2      	adds	r2, r4, r3
 800ed34:	4b09      	ldr	r3, [pc, #36]	@ (800ed5c <tcp_free_acked_segments+0xf4>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	dd9c      	ble.n	800ec78 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ed3e:	68bb      	ldr	r3, [r7, #8]
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3718      	adds	r7, #24
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bdb0      	pop	{r4, r5, r7, pc}
 800ed48:	08016790 	.word	0x08016790
 800ed4c:	08016a78 	.word	0x08016a78
 800ed50:	080167dc 	.word	0x080167dc
 800ed54:	2000b14c 	.word	0x2000b14c
 800ed58:	08016aa0 	.word	0x08016aa0
 800ed5c:	2000b148 	.word	0x2000b148

0800ed60 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ed60:	b5b0      	push	{r4, r5, r7, lr}
 800ed62:	b094      	sub	sp, #80	@ 0x50
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d106      	bne.n	800ed80 <tcp_receive+0x20>
 800ed72:	4b91      	ldr	r3, [pc, #580]	@ (800efb8 <tcp_receive+0x258>)
 800ed74:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ed78:	4990      	ldr	r1, [pc, #576]	@ (800efbc <tcp_receive+0x25c>)
 800ed7a:	4891      	ldr	r0, [pc, #580]	@ (800efc0 <tcp_receive+0x260>)
 800ed7c:	f005 fcda 	bl	8014734 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	7d1b      	ldrb	r3, [r3, #20]
 800ed84:	2b03      	cmp	r3, #3
 800ed86:	d806      	bhi.n	800ed96 <tcp_receive+0x36>
 800ed88:	4b8b      	ldr	r3, [pc, #556]	@ (800efb8 <tcp_receive+0x258>)
 800ed8a:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ed8e:	498d      	ldr	r1, [pc, #564]	@ (800efc4 <tcp_receive+0x264>)
 800ed90:	488b      	ldr	r0, [pc, #556]	@ (800efc0 <tcp_receive+0x260>)
 800ed92:	f005 fccf 	bl	8014734 <iprintf>

  if (flags & TCP_ACK) {
 800ed96:	4b8c      	ldr	r3, [pc, #560]	@ (800efc8 <tcp_receive+0x268>)
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	f003 0310 	and.w	r3, r3, #16
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	f000 8264 	beq.w	800f26c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800edaa:	461a      	mov	r2, r3
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800edb0:	4413      	add	r3, r2
 800edb2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800edb8:	4b84      	ldr	r3, [pc, #528]	@ (800efcc <tcp_receive+0x26c>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	db1b      	blt.n	800edfa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800edc6:	4b81      	ldr	r3, [pc, #516]	@ (800efcc <tcp_receive+0x26c>)
 800edc8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800edca:	429a      	cmp	r2, r3
 800edcc:	d106      	bne.n	800eddc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800edd2:	4b7f      	ldr	r3, [pc, #508]	@ (800efd0 <tcp_receive+0x270>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	1ad3      	subs	r3, r2, r3
 800edd8:	2b00      	cmp	r3, #0
 800edda:	db0e      	blt.n	800edfa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ede0:	4b7b      	ldr	r3, [pc, #492]	@ (800efd0 <tcp_receive+0x270>)
 800ede2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d125      	bne.n	800ee34 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ede8:	4b7a      	ldr	r3, [pc, #488]	@ (800efd4 <tcp_receive+0x274>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	89db      	ldrh	r3, [r3, #14]
 800edee:	b29a      	uxth	r2, r3
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d91c      	bls.n	800ee34 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800edfa:	4b76      	ldr	r3, [pc, #472]	@ (800efd4 <tcp_receive+0x274>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	89db      	ldrh	r3, [r3, #14]
 800ee00:	b29a      	uxth	r2, r3
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d205      	bcs.n	800ee24 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800ee24:	4b69      	ldr	r3, [pc, #420]	@ (800efcc <tcp_receive+0x26c>)
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800ee2c:	4b68      	ldr	r3, [pc, #416]	@ (800efd0 <tcp_receive+0x270>)
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ee34:	4b66      	ldr	r3, [pc, #408]	@ (800efd0 <tcp_receive+0x270>)
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee3c:	1ad3      	subs	r3, r2, r3
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	dc58      	bgt.n	800eef4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ee42:	4b65      	ldr	r3, [pc, #404]	@ (800efd8 <tcp_receive+0x278>)
 800ee44:	881b      	ldrh	r3, [r3, #0]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d14b      	bne.n	800eee2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800ee54:	4413      	add	r3, r2
 800ee56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d142      	bne.n	800eee2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	db3d      	blt.n	800eee2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ee6a:	4b59      	ldr	r3, [pc, #356]	@ (800efd0 <tcp_receive+0x270>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d137      	bne.n	800eee2 <tcp_receive+0x182>
              found_dupack = 1;
 800ee72:	2301      	movs	r3, #1
 800ee74:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ee7c:	2bff      	cmp	r3, #255	@ 0xff
 800ee7e:	d007      	beq.n	800ee90 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ee86:	3301      	adds	r3, #1
 800ee88:	b2da      	uxtb	r2, r3
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ee96:	2b03      	cmp	r3, #3
 800ee98:	d91b      	bls.n	800eed2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eea4:	4413      	add	r3, r2
 800eea6:	b29a      	uxth	r2, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d30a      	bcc.n	800eec8 <tcp_receive+0x168>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eebc:	4413      	add	r3, r2
 800eebe:	b29a      	uxth	r2, r3
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800eec6:	e004      	b.n	800eed2 <tcp_receive+0x172>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eece:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800eed8:	2b02      	cmp	r3, #2
 800eeda:	d902      	bls.n	800eee2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f001 fee7 	bl	8010cb0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800eee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	f040 8161 	bne.w	800f1ac <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2200      	movs	r2, #0
 800eeee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800eef2:	e15b      	b.n	800f1ac <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eef4:	4b36      	ldr	r3, [pc, #216]	@ (800efd0 <tcp_receive+0x270>)
 800eef6:	681a      	ldr	r2, [r3, #0]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eefc:	1ad3      	subs	r3, r2, r3
 800eefe:	3b01      	subs	r3, #1
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	f2c0 814e 	blt.w	800f1a2 <tcp_receive+0x442>
 800ef06:	4b32      	ldr	r3, [pc, #200]	@ (800efd0 <tcp_receive+0x270>)
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef0e:	1ad3      	subs	r3, r2, r3
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	f300 8146 	bgt.w	800f1a2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	8b5b      	ldrh	r3, [r3, #26]
 800ef1a:	f003 0304 	and.w	r3, r3, #4
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d010      	beq.n	800ef44 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	8b5b      	ldrh	r3, [r3, #26]
 800ef26:	f023 0304 	bic.w	r3, r3, #4
 800ef2a:	b29a      	uxth	r2, r3
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2200      	movs	r2, #0
 800ef48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ef52:	10db      	asrs	r3, r3, #3
 800ef54:	b21b      	sxth	r3, r3
 800ef56:	b29a      	uxth	r2, r3
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ef5e:	b29b      	uxth	r3, r3
 800ef60:	4413      	add	r3, r2
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	b21a      	sxth	r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ef6c:	4b18      	ldr	r3, [pc, #96]	@ (800efd0 <tcp_receive+0x270>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	b29a      	uxth	r2, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	1ad3      	subs	r3, r2, r3
 800ef7a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800ef84:	4b12      	ldr	r3, [pc, #72]	@ (800efd0 <tcp_receive+0x270>)
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	7d1b      	ldrb	r3, [r3, #20]
 800ef90:	2b03      	cmp	r3, #3
 800ef92:	f240 8097 	bls.w	800f0c4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d245      	bcs.n	800f032 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	8b5b      	ldrh	r3, [r3, #26]
 800efaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d014      	beq.n	800efdc <tcp_receive+0x27c>
 800efb2:	2301      	movs	r3, #1
 800efb4:	e013      	b.n	800efde <tcp_receive+0x27e>
 800efb6:	bf00      	nop
 800efb8:	08016790 	.word	0x08016790
 800efbc:	08016ac0 	.word	0x08016ac0
 800efc0:	080167dc 	.word	0x080167dc
 800efc4:	08016adc 	.word	0x08016adc
 800efc8:	2000b150 	.word	0x2000b150
 800efcc:	2000b144 	.word	0x2000b144
 800efd0:	2000b148 	.word	0x2000b148
 800efd4:	2000b134 	.word	0x2000b134
 800efd8:	2000b14e 	.word	0x2000b14e
 800efdc:	2302      	movs	r3, #2
 800efde:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800efe2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800efe6:	b29a      	uxth	r2, r3
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800efec:	fb12 f303 	smulbb	r3, r2, r3
 800eff0:	b29b      	uxth	r3, r3
 800eff2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800eff4:	4293      	cmp	r3, r2
 800eff6:	bf28      	it	cs
 800eff8:	4613      	movcs	r3, r2
 800effa:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f002:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f004:	4413      	add	r3, r2
 800f006:	b29a      	uxth	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f00e:	429a      	cmp	r2, r3
 800f010:	d309      	bcc.n	800f026 <tcp_receive+0x2c6>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f018:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f01a:	4413      	add	r3, r2
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f024:	e04e      	b.n	800f0c4 <tcp_receive+0x364>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f02c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f030:	e048      	b.n	800f0c4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f038:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f03a:	4413      	add	r3, r2
 800f03c:	b29a      	uxth	r2, r3
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f044:	429a      	cmp	r2, r3
 800f046:	d309      	bcc.n	800f05c <tcp_receive+0x2fc>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f04e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f050:	4413      	add	r3, r2
 800f052:	b29a      	uxth	r2, r3
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f05a:	e004      	b.n	800f066 <tcp_receive+0x306>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f062:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f072:	429a      	cmp	r2, r3
 800f074:	d326      	bcc.n	800f0c4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f082:	1ad3      	subs	r3, r2, r3
 800f084:	b29a      	uxth	r2, r3
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f096:	4413      	add	r3, r2
 800f098:	b29a      	uxth	r2, r3
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d30a      	bcc.n	800f0ba <tcp_receive+0x35a>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f0ae:	4413      	add	r3, r2
 800f0b0:	b29a      	uxth	r2, r3
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f0b8:	e004      	b.n	800f0c4 <tcp_receive+0x364>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f0c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0cc:	4a98      	ldr	r2, [pc, #608]	@ (800f330 <tcp_receive+0x5d0>)
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f7ff fdca 	bl	800ec68 <tcp_free_acked_segments>
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0e2:	4a94      	ldr	r2, [pc, #592]	@ (800f334 <tcp_receive+0x5d4>)
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff fdbf 	bl	800ec68 <tcp_free_acked_segments>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d104      	bne.n	800f102 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f0fe:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f100:	e002      	b.n	800f108 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2200      	movs	r2, #0
 800f106:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2200      	movs	r2, #0
 800f10c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f112:	2b00      	cmp	r3, #0
 800f114:	d103      	bne.n	800f11e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2200      	movs	r2, #0
 800f11a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f124:	4b84      	ldr	r3, [pc, #528]	@ (800f338 <tcp_receive+0x5d8>)
 800f126:	881b      	ldrh	r3, [r3, #0]
 800f128:	4413      	add	r3, r2
 800f12a:	b29a      	uxth	r2, r3
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	8b5b      	ldrh	r3, [r3, #26]
 800f136:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d035      	beq.n	800f1aa <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f142:	2b00      	cmp	r3, #0
 800f144:	d118      	bne.n	800f178 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d00c      	beq.n	800f168 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f156:	68db      	ldr	r3, [r3, #12]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7fb f934 	bl	800a3c8 <lwip_htonl>
 800f160:	4603      	mov	r3, r0
 800f162:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f164:	2b00      	cmp	r3, #0
 800f166:	dc20      	bgt.n	800f1aa <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	8b5b      	ldrh	r3, [r3, #26]
 800f16c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f170:	b29a      	uxth	r2, r3
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f176:	e018      	b.n	800f1aa <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f180:	68db      	ldr	r3, [r3, #12]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	4618      	mov	r0, r3
 800f186:	f7fb f91f 	bl	800a3c8 <lwip_htonl>
 800f18a:	4603      	mov	r3, r0
 800f18c:	1ae3      	subs	r3, r4, r3
 800f18e:	2b00      	cmp	r3, #0
 800f190:	dc0b      	bgt.n	800f1aa <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	8b5b      	ldrh	r3, [r3, #26]
 800f196:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f19a:	b29a      	uxth	r2, r3
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f1a0:	e003      	b.n	800f1aa <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f001 ff70 	bl	8011088 <tcp_send_empty_ack>
 800f1a8:	e000      	b.n	800f1ac <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f1aa:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d05b      	beq.n	800f26c <tcp_receive+0x50c>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f1b8:	4b60      	ldr	r3, [pc, #384]	@ (800f33c <tcp_receive+0x5dc>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	1ad3      	subs	r3, r2, r3
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	da54      	bge.n	800f26c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f1c2:	4b5f      	ldr	r3, [pc, #380]	@ (800f340 <tcp_receive+0x5e0>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	b29a      	uxth	r2, r3
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	1ad3      	subs	r3, r2, r3
 800f1d0:	b29b      	uxth	r3, r3
 800f1d2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f1d6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f1e0:	10db      	asrs	r3, r3, #3
 800f1e2:	b21b      	sxth	r3, r3
 800f1e4:	b29b      	uxth	r3, r3
 800f1e6:	1ad3      	subs	r3, r2, r3
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f1f4:	b29a      	uxth	r2, r3
 800f1f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f1fa:	4413      	add	r3, r2
 800f1fc:	b29b      	uxth	r3, r3
 800f1fe:	b21a      	sxth	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f204:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800f208:	2b00      	cmp	r3, #0
 800f20a:	da05      	bge.n	800f218 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f20c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f210:	425b      	negs	r3, r3
 800f212:	b29b      	uxth	r3, r3
 800f214:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f218:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f222:	109b      	asrs	r3, r3, #2
 800f224:	b21b      	sxth	r3, r3
 800f226:	b29b      	uxth	r3, r3
 800f228:	1ad3      	subs	r3, r2, r3
 800f22a:	b29b      	uxth	r3, r3
 800f22c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f236:	b29a      	uxth	r2, r3
 800f238:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f23c:	4413      	add	r3, r2
 800f23e:	b29b      	uxth	r3, r3
 800f240:	b21a      	sxth	r2, r3
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f24c:	10db      	asrs	r3, r3, #3
 800f24e:	b21b      	sxth	r3, r3
 800f250:	b29a      	uxth	r2, r3
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f258:	b29b      	uxth	r3, r3
 800f25a:	4413      	add	r3, r2
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	b21a      	sxth	r2, r3
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2200      	movs	r2, #0
 800f26a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f26c:	4b35      	ldr	r3, [pc, #212]	@ (800f344 <tcp_receive+0x5e4>)
 800f26e:	881b      	ldrh	r3, [r3, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	f000 84df 	beq.w	800fc34 <tcp_receive+0xed4>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	7d1b      	ldrb	r3, [r3, #20]
 800f27a:	2b06      	cmp	r3, #6
 800f27c:	f200 84da 	bhi.w	800fc34 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f284:	4b30      	ldr	r3, [pc, #192]	@ (800f348 <tcp_receive+0x5e8>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	1ad3      	subs	r3, r2, r3
 800f28a:	3b01      	subs	r3, #1
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	f2c0 808f 	blt.w	800f3b0 <tcp_receive+0x650>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f296:	4b2b      	ldr	r3, [pc, #172]	@ (800f344 <tcp_receive+0x5e4>)
 800f298:	881b      	ldrh	r3, [r3, #0]
 800f29a:	4619      	mov	r1, r3
 800f29c:	4b2a      	ldr	r3, [pc, #168]	@ (800f348 <tcp_receive+0x5e8>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	440b      	add	r3, r1
 800f2a2:	1ad3      	subs	r3, r2, r3
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f300 8082 	bgt.w	800f3b0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f2ac:	4b27      	ldr	r3, [pc, #156]	@ (800f34c <tcp_receive+0x5ec>)
 800f2ae:	685b      	ldr	r3, [r3, #4]
 800f2b0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f2b6:	4b24      	ldr	r3, [pc, #144]	@ (800f348 <tcp_receive+0x5e8>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	1ad3      	subs	r3, r2, r3
 800f2bc:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f2be:	4b23      	ldr	r3, [pc, #140]	@ (800f34c <tcp_receive+0x5ec>)
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d106      	bne.n	800f2d4 <tcp_receive+0x574>
 800f2c6:	4b22      	ldr	r3, [pc, #136]	@ (800f350 <tcp_receive+0x5f0>)
 800f2c8:	f240 5294 	movw	r2, #1428	@ 0x594
 800f2cc:	4921      	ldr	r1, [pc, #132]	@ (800f354 <tcp_receive+0x5f4>)
 800f2ce:	4822      	ldr	r0, [pc, #136]	@ (800f358 <tcp_receive+0x5f8>)
 800f2d0:	f005 fa30 	bl	8014734 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d906      	bls.n	800f2ec <tcp_receive+0x58c>
 800f2de:	4b1c      	ldr	r3, [pc, #112]	@ (800f350 <tcp_receive+0x5f0>)
 800f2e0:	f240 5295 	movw	r2, #1429	@ 0x595
 800f2e4:	491d      	ldr	r1, [pc, #116]	@ (800f35c <tcp_receive+0x5fc>)
 800f2e6:	481c      	ldr	r0, [pc, #112]	@ (800f358 <tcp_receive+0x5f8>)
 800f2e8:	f005 fa24 	bl	8014734 <iprintf>
      off = (u16_t)off32;
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f2f2:	4b16      	ldr	r3, [pc, #88]	@ (800f34c <tcp_receive+0x5ec>)
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	891b      	ldrh	r3, [r3, #8]
 800f2f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d906      	bls.n	800f30e <tcp_receive+0x5ae>
 800f300:	4b13      	ldr	r3, [pc, #76]	@ (800f350 <tcp_receive+0x5f0>)
 800f302:	f240 5297 	movw	r2, #1431	@ 0x597
 800f306:	4916      	ldr	r1, [pc, #88]	@ (800f360 <tcp_receive+0x600>)
 800f308:	4813      	ldr	r0, [pc, #76]	@ (800f358 <tcp_receive+0x5f8>)
 800f30a:	f005 fa13 	bl	8014734 <iprintf>
      inseg.len -= off;
 800f30e:	4b0f      	ldr	r3, [pc, #60]	@ (800f34c <tcp_receive+0x5ec>)
 800f310:	891a      	ldrh	r2, [r3, #8]
 800f312:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f316:	1ad3      	subs	r3, r2, r3
 800f318:	b29a      	uxth	r2, r3
 800f31a:	4b0c      	ldr	r3, [pc, #48]	@ (800f34c <tcp_receive+0x5ec>)
 800f31c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f31e:	4b0b      	ldr	r3, [pc, #44]	@ (800f34c <tcp_receive+0x5ec>)
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	891a      	ldrh	r2, [r3, #8]
 800f324:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f328:	1ad3      	subs	r3, r2, r3
 800f32a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f32c:	e02a      	b.n	800f384 <tcp_receive+0x624>
 800f32e:	bf00      	nop
 800f330:	08016af8 	.word	0x08016af8
 800f334:	08016b00 	.word	0x08016b00
 800f338:	2000b14c 	.word	0x2000b14c
 800f33c:	2000b148 	.word	0x2000b148
 800f340:	2000b10c 	.word	0x2000b10c
 800f344:	2000b14e 	.word	0x2000b14e
 800f348:	2000b144 	.word	0x2000b144
 800f34c:	2000b124 	.word	0x2000b124
 800f350:	08016790 	.word	0x08016790
 800f354:	08016b08 	.word	0x08016b08
 800f358:	080167dc 	.word	0x080167dc
 800f35c:	08016b18 	.word	0x08016b18
 800f360:	08016b28 	.word	0x08016b28
        off -= p->len;
 800f364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f366:	895b      	ldrh	r3, [r3, #10]
 800f368:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f36c:	1ad3      	subs	r3, r2, r3
 800f36e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f374:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f376:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f37a:	2200      	movs	r2, #0
 800f37c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f37e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800f384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f386:	895b      	ldrh	r3, [r3, #10]
 800f388:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d8e9      	bhi.n	800f364 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f390:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f394:	4619      	mov	r1, r3
 800f396:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f398:	f7fc fad8 	bl	800b94c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3a0:	4a90      	ldr	r2, [pc, #576]	@ (800f5e4 <tcp_receive+0x884>)
 800f3a2:	6013      	str	r3, [r2, #0]
 800f3a4:	4b90      	ldr	r3, [pc, #576]	@ (800f5e8 <tcp_receive+0x888>)
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	4a8e      	ldr	r2, [pc, #568]	@ (800f5e4 <tcp_receive+0x884>)
 800f3aa:	6812      	ldr	r2, [r2, #0]
 800f3ac:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f3ae:	e00d      	b.n	800f3cc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f3b0:	4b8c      	ldr	r3, [pc, #560]	@ (800f5e4 <tcp_receive+0x884>)
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3b8:	1ad3      	subs	r3, r2, r3
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	da06      	bge.n	800f3cc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	8b5b      	ldrh	r3, [r3, #26]
 800f3c2:	f043 0302 	orr.w	r3, r3, #2
 800f3c6:	b29a      	uxth	r2, r3
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f3cc:	4b85      	ldr	r3, [pc, #532]	@ (800f5e4 <tcp_receive+0x884>)
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3d4:	1ad3      	subs	r3, r2, r3
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	f2c0 8427 	blt.w	800fc2a <tcp_receive+0xeca>
 800f3dc:	4b81      	ldr	r3, [pc, #516]	@ (800f5e4 <tcp_receive+0x884>)
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3e4:	6879      	ldr	r1, [r7, #4]
 800f3e6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f3e8:	440b      	add	r3, r1
 800f3ea:	1ad3      	subs	r3, r2, r3
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f300 841b 	bgt.w	800fc2a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3f8:	4b7a      	ldr	r3, [pc, #488]	@ (800f5e4 <tcp_receive+0x884>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	f040 8298 	bne.w	800f932 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f402:	4b79      	ldr	r3, [pc, #484]	@ (800f5e8 <tcp_receive+0x888>)
 800f404:	891c      	ldrh	r4, [r3, #8]
 800f406:	4b78      	ldr	r3, [pc, #480]	@ (800f5e8 <tcp_receive+0x888>)
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	899b      	ldrh	r3, [r3, #12]
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fa ffc4 	bl	800a39c <lwip_htons>
 800f414:	4603      	mov	r3, r0
 800f416:	b2db      	uxtb	r3, r3
 800f418:	f003 0303 	and.w	r3, r3, #3
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d001      	beq.n	800f424 <tcp_receive+0x6c4>
 800f420:	2301      	movs	r3, #1
 800f422:	e000      	b.n	800f426 <tcp_receive+0x6c6>
 800f424:	2300      	movs	r3, #0
 800f426:	4423      	add	r3, r4
 800f428:	b29a      	uxth	r2, r3
 800f42a:	4b70      	ldr	r3, [pc, #448]	@ (800f5ec <tcp_receive+0x88c>)
 800f42c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f432:	4b6e      	ldr	r3, [pc, #440]	@ (800f5ec <tcp_receive+0x88c>)
 800f434:	881b      	ldrh	r3, [r3, #0]
 800f436:	429a      	cmp	r2, r3
 800f438:	d274      	bcs.n	800f524 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f43a:	4b6b      	ldr	r3, [pc, #428]	@ (800f5e8 <tcp_receive+0x888>)
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	899b      	ldrh	r3, [r3, #12]
 800f440:	b29b      	uxth	r3, r3
 800f442:	4618      	mov	r0, r3
 800f444:	f7fa ffaa 	bl	800a39c <lwip_htons>
 800f448:	4603      	mov	r3, r0
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	f003 0301 	and.w	r3, r3, #1
 800f450:	2b00      	cmp	r3, #0
 800f452:	d01e      	beq.n	800f492 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f454:	4b64      	ldr	r3, [pc, #400]	@ (800f5e8 <tcp_receive+0x888>)
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	899b      	ldrh	r3, [r3, #12]
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	b21b      	sxth	r3, r3
 800f45e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f462:	b21c      	sxth	r4, r3
 800f464:	4b60      	ldr	r3, [pc, #384]	@ (800f5e8 <tcp_receive+0x888>)
 800f466:	68db      	ldr	r3, [r3, #12]
 800f468:	899b      	ldrh	r3, [r3, #12]
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7fa ff95 	bl	800a39c <lwip_htons>
 800f472:	4603      	mov	r3, r0
 800f474:	b2db      	uxtb	r3, r3
 800f476:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f47a:	b29b      	uxth	r3, r3
 800f47c:	4618      	mov	r0, r3
 800f47e:	f7fa ff8d 	bl	800a39c <lwip_htons>
 800f482:	4603      	mov	r3, r0
 800f484:	b21b      	sxth	r3, r3
 800f486:	4323      	orrs	r3, r4
 800f488:	b21a      	sxth	r2, r3
 800f48a:	4b57      	ldr	r3, [pc, #348]	@ (800f5e8 <tcp_receive+0x888>)
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	b292      	uxth	r2, r2
 800f490:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f496:	4b54      	ldr	r3, [pc, #336]	@ (800f5e8 <tcp_receive+0x888>)
 800f498:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f49a:	4b53      	ldr	r3, [pc, #332]	@ (800f5e8 <tcp_receive+0x888>)
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	899b      	ldrh	r3, [r3, #12]
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7fa ff7a 	bl	800a39c <lwip_htons>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	f003 0302 	and.w	r3, r3, #2
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d005      	beq.n	800f4c0 <tcp_receive+0x760>
            inseg.len -= 1;
 800f4b4:	4b4c      	ldr	r3, [pc, #304]	@ (800f5e8 <tcp_receive+0x888>)
 800f4b6:	891b      	ldrh	r3, [r3, #8]
 800f4b8:	3b01      	subs	r3, #1
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	4b4a      	ldr	r3, [pc, #296]	@ (800f5e8 <tcp_receive+0x888>)
 800f4be:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f4c0:	4b49      	ldr	r3, [pc, #292]	@ (800f5e8 <tcp_receive+0x888>)
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	4a48      	ldr	r2, [pc, #288]	@ (800f5e8 <tcp_receive+0x888>)
 800f4c6:	8912      	ldrh	r2, [r2, #8]
 800f4c8:	4611      	mov	r1, r2
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7fc f93e 	bl	800b74c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f4d0:	4b45      	ldr	r3, [pc, #276]	@ (800f5e8 <tcp_receive+0x888>)
 800f4d2:	891c      	ldrh	r4, [r3, #8]
 800f4d4:	4b44      	ldr	r3, [pc, #272]	@ (800f5e8 <tcp_receive+0x888>)
 800f4d6:	68db      	ldr	r3, [r3, #12]
 800f4d8:	899b      	ldrh	r3, [r3, #12]
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7fa ff5d 	bl	800a39c <lwip_htons>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	b2db      	uxtb	r3, r3
 800f4e6:	f003 0303 	and.w	r3, r3, #3
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d001      	beq.n	800f4f2 <tcp_receive+0x792>
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	e000      	b.n	800f4f4 <tcp_receive+0x794>
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	4423      	add	r3, r4
 800f4f6:	b29a      	uxth	r2, r3
 800f4f8:	4b3c      	ldr	r3, [pc, #240]	@ (800f5ec <tcp_receive+0x88c>)
 800f4fa:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f4fc:	4b3b      	ldr	r3, [pc, #236]	@ (800f5ec <tcp_receive+0x88c>)
 800f4fe:	881b      	ldrh	r3, [r3, #0]
 800f500:	461a      	mov	r2, r3
 800f502:	4b38      	ldr	r3, [pc, #224]	@ (800f5e4 <tcp_receive+0x884>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	441a      	add	r2, r3
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f50c:	6879      	ldr	r1, [r7, #4]
 800f50e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f510:	440b      	add	r3, r1
 800f512:	429a      	cmp	r2, r3
 800f514:	d006      	beq.n	800f524 <tcp_receive+0x7c4>
 800f516:	4b36      	ldr	r3, [pc, #216]	@ (800f5f0 <tcp_receive+0x890>)
 800f518:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800f51c:	4935      	ldr	r1, [pc, #212]	@ (800f5f4 <tcp_receive+0x894>)
 800f51e:	4836      	ldr	r0, [pc, #216]	@ (800f5f8 <tcp_receive+0x898>)
 800f520:	f005 f908 	bl	8014734 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f000 80e6 	beq.w	800f6fa <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f52e:	4b2e      	ldr	r3, [pc, #184]	@ (800f5e8 <tcp_receive+0x888>)
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	899b      	ldrh	r3, [r3, #12]
 800f534:	b29b      	uxth	r3, r3
 800f536:	4618      	mov	r0, r3
 800f538:	f7fa ff30 	bl	800a39c <lwip_htons>
 800f53c:	4603      	mov	r3, r0
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	f003 0301 	and.w	r3, r3, #1
 800f544:	2b00      	cmp	r3, #0
 800f546:	d010      	beq.n	800f56a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f548:	e00a      	b.n	800f560 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f54e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800f55a:	68f8      	ldr	r0, [r7, #12]
 800f55c:	f7fd fd93 	bl	800d086 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f564:	2b00      	cmp	r3, #0
 800f566:	d1f0      	bne.n	800f54a <tcp_receive+0x7ea>
 800f568:	e0c7      	b.n	800f6fa <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f570:	e051      	b.n	800f616 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	899b      	ldrh	r3, [r3, #12]
 800f578:	b29b      	uxth	r3, r3
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7fa ff0e 	bl	800a39c <lwip_htons>
 800f580:	4603      	mov	r3, r0
 800f582:	b2db      	uxtb	r3, r3
 800f584:	f003 0301 	and.w	r3, r3, #1
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d03c      	beq.n	800f606 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f58c:	4b16      	ldr	r3, [pc, #88]	@ (800f5e8 <tcp_receive+0x888>)
 800f58e:	68db      	ldr	r3, [r3, #12]
 800f590:	899b      	ldrh	r3, [r3, #12]
 800f592:	b29b      	uxth	r3, r3
 800f594:	4618      	mov	r0, r3
 800f596:	f7fa ff01 	bl	800a39c <lwip_htons>
 800f59a:	4603      	mov	r3, r0
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d12f      	bne.n	800f606 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f5a6:	4b10      	ldr	r3, [pc, #64]	@ (800f5e8 <tcp_receive+0x888>)
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	899b      	ldrh	r3, [r3, #12]
 800f5ac:	b29c      	uxth	r4, r3
 800f5ae:	2001      	movs	r0, #1
 800f5b0:	f7fa fef4 	bl	800a39c <lwip_htons>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	4b0b      	ldr	r3, [pc, #44]	@ (800f5e8 <tcp_receive+0x888>)
 800f5ba:	68db      	ldr	r3, [r3, #12]
 800f5bc:	4322      	orrs	r2, r4
 800f5be:	b292      	uxth	r2, r2
 800f5c0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f5c2:	4b09      	ldr	r3, [pc, #36]	@ (800f5e8 <tcp_receive+0x888>)
 800f5c4:	891c      	ldrh	r4, [r3, #8]
 800f5c6:	4b08      	ldr	r3, [pc, #32]	@ (800f5e8 <tcp_receive+0x888>)
 800f5c8:	68db      	ldr	r3, [r3, #12]
 800f5ca:	899b      	ldrh	r3, [r3, #12]
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fa fee4 	bl	800a39c <lwip_htons>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	f003 0303 	and.w	r3, r3, #3
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d00d      	beq.n	800f5fc <tcp_receive+0x89c>
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	e00c      	b.n	800f5fe <tcp_receive+0x89e>
 800f5e4:	2000b144 	.word	0x2000b144
 800f5e8:	2000b124 	.word	0x2000b124
 800f5ec:	2000b14e 	.word	0x2000b14e
 800f5f0:	08016790 	.word	0x08016790
 800f5f4:	08016b38 	.word	0x08016b38
 800f5f8:	080167dc 	.word	0x080167dc
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	4423      	add	r3, r4
 800f600:	b29a      	uxth	r2, r3
 800f602:	4b98      	ldr	r3, [pc, #608]	@ (800f864 <tcp_receive+0xb04>)
 800f604:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f608:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800f610:	6938      	ldr	r0, [r7, #16]
 800f612:	f7fd fd38 	bl	800d086 <tcp_seg_free>
            while (next &&
 800f616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d00e      	beq.n	800f63a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f61c:	4b91      	ldr	r3, [pc, #580]	@ (800f864 <tcp_receive+0xb04>)
 800f61e:	881b      	ldrh	r3, [r3, #0]
 800f620:	461a      	mov	r2, r3
 800f622:	4b91      	ldr	r3, [pc, #580]	@ (800f868 <tcp_receive+0xb08>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	441a      	add	r2, r3
 800f628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f630:	8909      	ldrh	r1, [r1, #8]
 800f632:	440b      	add	r3, r1
 800f634:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f636:	2b00      	cmp	r3, #0
 800f638:	da9b      	bge.n	800f572 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f63a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d059      	beq.n	800f6f4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f640:	4b88      	ldr	r3, [pc, #544]	@ (800f864 <tcp_receive+0xb04>)
 800f642:	881b      	ldrh	r3, [r3, #0]
 800f644:	461a      	mov	r2, r3
 800f646:	4b88      	ldr	r3, [pc, #544]	@ (800f868 <tcp_receive+0xb08>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	441a      	add	r2, r3
 800f64c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f64e:	68db      	ldr	r3, [r3, #12]
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f654:	2b00      	cmp	r3, #0
 800f656:	dd4d      	ble.n	800f6f4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	b29a      	uxth	r2, r3
 800f660:	4b81      	ldr	r3, [pc, #516]	@ (800f868 <tcp_receive+0xb08>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	b29b      	uxth	r3, r3
 800f666:	1ad3      	subs	r3, r2, r3
 800f668:	b29a      	uxth	r2, r3
 800f66a:	4b80      	ldr	r3, [pc, #512]	@ (800f86c <tcp_receive+0xb0c>)
 800f66c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f66e:	4b7f      	ldr	r3, [pc, #508]	@ (800f86c <tcp_receive+0xb0c>)
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	899b      	ldrh	r3, [r3, #12]
 800f674:	b29b      	uxth	r3, r3
 800f676:	4618      	mov	r0, r3
 800f678:	f7fa fe90 	bl	800a39c <lwip_htons>
 800f67c:	4603      	mov	r3, r0
 800f67e:	b2db      	uxtb	r3, r3
 800f680:	f003 0302 	and.w	r3, r3, #2
 800f684:	2b00      	cmp	r3, #0
 800f686:	d005      	beq.n	800f694 <tcp_receive+0x934>
                inseg.len -= 1;
 800f688:	4b78      	ldr	r3, [pc, #480]	@ (800f86c <tcp_receive+0xb0c>)
 800f68a:	891b      	ldrh	r3, [r3, #8]
 800f68c:	3b01      	subs	r3, #1
 800f68e:	b29a      	uxth	r2, r3
 800f690:	4b76      	ldr	r3, [pc, #472]	@ (800f86c <tcp_receive+0xb0c>)
 800f692:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f694:	4b75      	ldr	r3, [pc, #468]	@ (800f86c <tcp_receive+0xb0c>)
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	4a74      	ldr	r2, [pc, #464]	@ (800f86c <tcp_receive+0xb0c>)
 800f69a:	8912      	ldrh	r2, [r2, #8]
 800f69c:	4611      	mov	r1, r2
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7fc f854 	bl	800b74c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f6a4:	4b71      	ldr	r3, [pc, #452]	@ (800f86c <tcp_receive+0xb0c>)
 800f6a6:	891c      	ldrh	r4, [r3, #8]
 800f6a8:	4b70      	ldr	r3, [pc, #448]	@ (800f86c <tcp_receive+0xb0c>)
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	899b      	ldrh	r3, [r3, #12]
 800f6ae:	b29b      	uxth	r3, r3
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7fa fe73 	bl	800a39c <lwip_htons>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	b2db      	uxtb	r3, r3
 800f6ba:	f003 0303 	and.w	r3, r3, #3
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d001      	beq.n	800f6c6 <tcp_receive+0x966>
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	e000      	b.n	800f6c8 <tcp_receive+0x968>
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	4423      	add	r3, r4
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	4b65      	ldr	r3, [pc, #404]	@ (800f864 <tcp_receive+0xb04>)
 800f6ce:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f6d0:	4b64      	ldr	r3, [pc, #400]	@ (800f864 <tcp_receive+0xb04>)
 800f6d2:	881b      	ldrh	r3, [r3, #0]
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	4b64      	ldr	r3, [pc, #400]	@ (800f868 <tcp_receive+0xb08>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	441a      	add	r2, r3
 800f6dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6de:	68db      	ldr	r3, [r3, #12]
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d006      	beq.n	800f6f4 <tcp_receive+0x994>
 800f6e6:	4b62      	ldr	r3, [pc, #392]	@ (800f870 <tcp_receive+0xb10>)
 800f6e8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800f6ec:	4961      	ldr	r1, [pc, #388]	@ (800f874 <tcp_receive+0xb14>)
 800f6ee:	4862      	ldr	r0, [pc, #392]	@ (800f878 <tcp_receive+0xb18>)
 800f6f0:	f005 f820 	bl	8014734 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f6f8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f6fa:	4b5a      	ldr	r3, [pc, #360]	@ (800f864 <tcp_receive+0xb04>)
 800f6fc:	881b      	ldrh	r3, [r3, #0]
 800f6fe:	461a      	mov	r2, r3
 800f700:	4b59      	ldr	r3, [pc, #356]	@ (800f868 <tcp_receive+0xb08>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	441a      	add	r2, r3
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f70e:	4b55      	ldr	r3, [pc, #340]	@ (800f864 <tcp_receive+0xb04>)
 800f710:	881b      	ldrh	r3, [r3, #0]
 800f712:	429a      	cmp	r2, r3
 800f714:	d206      	bcs.n	800f724 <tcp_receive+0x9c4>
 800f716:	4b56      	ldr	r3, [pc, #344]	@ (800f870 <tcp_receive+0xb10>)
 800f718:	f240 6207 	movw	r2, #1543	@ 0x607
 800f71c:	4957      	ldr	r1, [pc, #348]	@ (800f87c <tcp_receive+0xb1c>)
 800f71e:	4856      	ldr	r0, [pc, #344]	@ (800f878 <tcp_receive+0xb18>)
 800f720:	f005 f808 	bl	8014734 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f728:	4b4e      	ldr	r3, [pc, #312]	@ (800f864 <tcp_receive+0xb04>)
 800f72a:	881b      	ldrh	r3, [r3, #0]
 800f72c:	1ad3      	subs	r3, r2, r3
 800f72e:	b29a      	uxth	r2, r3
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f7fc ffc5 	bl	800c6c4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f73a:	4b4c      	ldr	r3, [pc, #304]	@ (800f86c <tcp_receive+0xb0c>)
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	891b      	ldrh	r3, [r3, #8]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d006      	beq.n	800f752 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f744:	4b49      	ldr	r3, [pc, #292]	@ (800f86c <tcp_receive+0xb0c>)
 800f746:	685b      	ldr	r3, [r3, #4]
 800f748:	4a4d      	ldr	r2, [pc, #308]	@ (800f880 <tcp_receive+0xb20>)
 800f74a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f74c:	4b47      	ldr	r3, [pc, #284]	@ (800f86c <tcp_receive+0xb0c>)
 800f74e:	2200      	movs	r2, #0
 800f750:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f752:	4b46      	ldr	r3, [pc, #280]	@ (800f86c <tcp_receive+0xb0c>)
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	899b      	ldrh	r3, [r3, #12]
 800f758:	b29b      	uxth	r3, r3
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7fa fe1e 	bl	800a39c <lwip_htons>
 800f760:	4603      	mov	r3, r0
 800f762:	b2db      	uxtb	r3, r3
 800f764:	f003 0301 	and.w	r3, r3, #1
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f000 80b8 	beq.w	800f8de <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f76e:	4b45      	ldr	r3, [pc, #276]	@ (800f884 <tcp_receive+0xb24>)
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	f043 0320 	orr.w	r3, r3, #32
 800f776:	b2da      	uxtb	r2, r3
 800f778:	4b42      	ldr	r3, [pc, #264]	@ (800f884 <tcp_receive+0xb24>)
 800f77a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f77c:	e0af      	b.n	800f8de <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f782:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f788:	68db      	ldr	r3, [r3, #12]
 800f78a:	685b      	ldr	r3, [r3, #4]
 800f78c:	4a36      	ldr	r2, [pc, #216]	@ (800f868 <tcp_receive+0xb08>)
 800f78e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	891b      	ldrh	r3, [r3, #8]
 800f794:	461c      	mov	r4, r3
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	68db      	ldr	r3, [r3, #12]
 800f79a:	899b      	ldrh	r3, [r3, #12]
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fa fdfc 	bl	800a39c <lwip_htons>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	b2db      	uxtb	r3, r3
 800f7a8:	f003 0303 	and.w	r3, r3, #3
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d001      	beq.n	800f7b4 <tcp_receive+0xa54>
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	e000      	b.n	800f7b6 <tcp_receive+0xa56>
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	191a      	adds	r2, r3, r4
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7bc:	441a      	add	r2, r3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7c6:	461c      	mov	r4, r3
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	891b      	ldrh	r3, [r3, #8]
 800f7cc:	461d      	mov	r5, r3
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	68db      	ldr	r3, [r3, #12]
 800f7d2:	899b      	ldrh	r3, [r3, #12]
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fa fde0 	bl	800a39c <lwip_htons>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	b2db      	uxtb	r3, r3
 800f7e0:	f003 0303 	and.w	r3, r3, #3
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d001      	beq.n	800f7ec <tcp_receive+0xa8c>
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	e000      	b.n	800f7ee <tcp_receive+0xa8e>
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	442b      	add	r3, r5
 800f7f0:	429c      	cmp	r4, r3
 800f7f2:	d206      	bcs.n	800f802 <tcp_receive+0xaa2>
 800f7f4:	4b1e      	ldr	r3, [pc, #120]	@ (800f870 <tcp_receive+0xb10>)
 800f7f6:	f240 622b 	movw	r2, #1579	@ 0x62b
 800f7fa:	4923      	ldr	r1, [pc, #140]	@ (800f888 <tcp_receive+0xb28>)
 800f7fc:	481e      	ldr	r0, [pc, #120]	@ (800f878 <tcp_receive+0xb18>)
 800f7fe:	f004 ff99 	bl	8014734 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	891b      	ldrh	r3, [r3, #8]
 800f806:	461c      	mov	r4, r3
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	899b      	ldrh	r3, [r3, #12]
 800f80e:	b29b      	uxth	r3, r3
 800f810:	4618      	mov	r0, r3
 800f812:	f7fa fdc3 	bl	800a39c <lwip_htons>
 800f816:	4603      	mov	r3, r0
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	f003 0303 	and.w	r3, r3, #3
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d001      	beq.n	800f826 <tcp_receive+0xac6>
 800f822:	2301      	movs	r3, #1
 800f824:	e000      	b.n	800f828 <tcp_receive+0xac8>
 800f826:	2300      	movs	r3, #0
 800f828:	1919      	adds	r1, r3, r4
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f82e:	b28b      	uxth	r3, r1
 800f830:	1ad3      	subs	r3, r2, r3
 800f832:	b29a      	uxth	r2, r3
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f7fc ff43 	bl	800c6c4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	685b      	ldr	r3, [r3, #4]
 800f842:	891b      	ldrh	r3, [r3, #8]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d028      	beq.n	800f89a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f848:	4b0d      	ldr	r3, [pc, #52]	@ (800f880 <tcp_receive+0xb20>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d01d      	beq.n	800f88c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f850:	4b0b      	ldr	r3, [pc, #44]	@ (800f880 <tcp_receive+0xb20>)
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	4619      	mov	r1, r3
 800f85a:	4610      	mov	r0, r2
 800f85c:	f7fc f9be 	bl	800bbdc <pbuf_cat>
 800f860:	e018      	b.n	800f894 <tcp_receive+0xb34>
 800f862:	bf00      	nop
 800f864:	2000b14e 	.word	0x2000b14e
 800f868:	2000b144 	.word	0x2000b144
 800f86c:	2000b124 	.word	0x2000b124
 800f870:	08016790 	.word	0x08016790
 800f874:	08016b70 	.word	0x08016b70
 800f878:	080167dc 	.word	0x080167dc
 800f87c:	08016bac 	.word	0x08016bac
 800f880:	2000b154 	.word	0x2000b154
 800f884:	2000b151 	.word	0x2000b151
 800f888:	08016bcc 	.word	0x08016bcc
            } else {
              recv_data = cseg->p;
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	4a70      	ldr	r2, [pc, #448]	@ (800fa54 <tcp_receive+0xcf4>)
 800f892:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	2200      	movs	r2, #0
 800f898:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	899b      	ldrh	r3, [r3, #12]
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7fa fd7a 	bl	800a39c <lwip_htons>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	f003 0301 	and.w	r3, r3, #1
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d00d      	beq.n	800f8d0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f8b4:	4b68      	ldr	r3, [pc, #416]	@ (800fa58 <tcp_receive+0xcf8>)
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	f043 0320 	orr.w	r3, r3, #32
 800f8bc:	b2da      	uxtb	r2, r3
 800f8be:	4b66      	ldr	r3, [pc, #408]	@ (800fa58 <tcp_receive+0xcf8>)
 800f8c0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	7d1b      	ldrb	r3, [r3, #20]
 800f8c6:	2b04      	cmp	r3, #4
 800f8c8:	d102      	bne.n	800f8d0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2207      	movs	r2, #7
 800f8ce:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800f8d8:	68b8      	ldr	r0, [r7, #8]
 800f8da:	f7fd fbd4 	bl	800d086 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d008      	beq.n	800f8f8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f8ea:	68db      	ldr	r3, [r3, #12]
 800f8ec:	685a      	ldr	r2, [r3, #4]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	f43f af43 	beq.w	800f77e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	8b5b      	ldrh	r3, [r3, #26]
 800f8fc:	f003 0301 	and.w	r3, r3, #1
 800f900:	2b00      	cmp	r3, #0
 800f902:	d00e      	beq.n	800f922 <tcp_receive+0xbc2>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	8b5b      	ldrh	r3, [r3, #26]
 800f908:	f023 0301 	bic.w	r3, r3, #1
 800f90c:	b29a      	uxth	r2, r3
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	835a      	strh	r2, [r3, #26]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	8b5b      	ldrh	r3, [r3, #26]
 800f916:	f043 0302 	orr.w	r3, r3, #2
 800f91a:	b29a      	uxth	r2, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f920:	e187      	b.n	800fc32 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	8b5b      	ldrh	r3, [r3, #26]
 800f926:	f043 0301 	orr.w	r3, r3, #1
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f930:	e17f      	b.n	800fc32 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f936:	2b00      	cmp	r3, #0
 800f938:	d106      	bne.n	800f948 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f93a:	4848      	ldr	r0, [pc, #288]	@ (800fa5c <tcp_receive+0xcfc>)
 800f93c:	f7fd fbbc 	bl	800d0b8 <tcp_seg_copy>
 800f940:	4602      	mov	r2, r0
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	675a      	str	r2, [r3, #116]	@ 0x74
 800f946:	e16c      	b.n	800fc22 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f948:	2300      	movs	r3, #0
 800f94a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f950:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f952:	e156      	b.n	800fc02 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800f954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f956:	68db      	ldr	r3, [r3, #12]
 800f958:	685a      	ldr	r2, [r3, #4]
 800f95a:	4b41      	ldr	r3, [pc, #260]	@ (800fa60 <tcp_receive+0xd00>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	429a      	cmp	r2, r3
 800f960:	d11d      	bne.n	800f99e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f962:	4b3e      	ldr	r3, [pc, #248]	@ (800fa5c <tcp_receive+0xcfc>)
 800f964:	891a      	ldrh	r2, [r3, #8]
 800f966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f968:	891b      	ldrh	r3, [r3, #8]
 800f96a:	429a      	cmp	r2, r3
 800f96c:	f240 814e 	bls.w	800fc0c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f970:	483a      	ldr	r0, [pc, #232]	@ (800fa5c <tcp_receive+0xcfc>)
 800f972:	f7fd fba1 	bl	800d0b8 <tcp_seg_copy>
 800f976:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	f000 8148 	beq.w	800fc10 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800f980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f982:	2b00      	cmp	r3, #0
 800f984:	d003      	beq.n	800f98e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f988:	697a      	ldr	r2, [r7, #20]
 800f98a:	601a      	str	r2, [r3, #0]
 800f98c:	e002      	b.n	800f994 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	697a      	ldr	r2, [r7, #20]
 800f992:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f994:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f996:	6978      	ldr	r0, [r7, #20]
 800f998:	f7ff f8de 	bl	800eb58 <tcp_oos_insert_segment>
                }
                break;
 800f99c:	e138      	b.n	800fc10 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f99e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d117      	bne.n	800f9d4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f9a4:	4b2e      	ldr	r3, [pc, #184]	@ (800fa60 <tcp_receive+0xd00>)
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	1ad3      	subs	r3, r2, r3
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	da57      	bge.n	800fa64 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f9b4:	4829      	ldr	r0, [pc, #164]	@ (800fa5c <tcp_receive+0xcfc>)
 800f9b6:	f7fd fb7f 	bl	800d0b8 <tcp_seg_copy>
 800f9ba:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f9bc:	69bb      	ldr	r3, [r7, #24]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	f000 8128 	beq.w	800fc14 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	69ba      	ldr	r2, [r7, #24]
 800f9c8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f9ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f9cc:	69b8      	ldr	r0, [r7, #24]
 800f9ce:	f7ff f8c3 	bl	800eb58 <tcp_oos_insert_segment>
                  }
                  break;
 800f9d2:	e11f      	b.n	800fc14 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f9d4:	4b22      	ldr	r3, [pc, #136]	@ (800fa60 <tcp_receive+0xd00>)
 800f9d6:	681a      	ldr	r2, [r3, #0]
 800f9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9da:	68db      	ldr	r3, [r3, #12]
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	1ad3      	subs	r3, r2, r3
 800f9e0:	3b01      	subs	r3, #1
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	db3e      	blt.n	800fa64 <tcp_receive+0xd04>
 800f9e6:	4b1e      	ldr	r3, [pc, #120]	@ (800fa60 <tcp_receive+0xd00>)
 800f9e8:	681a      	ldr	r2, [r3, #0]
 800f9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ec:	68db      	ldr	r3, [r3, #12]
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	1ad3      	subs	r3, r2, r3
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	dc35      	bgt.n	800fa64 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f9f8:	4818      	ldr	r0, [pc, #96]	@ (800fa5c <tcp_receive+0xcfc>)
 800f9fa:	f7fd fb5d 	bl	800d0b8 <tcp_seg_copy>
 800f9fe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	f000 8108 	beq.w	800fc18 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fa08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa10:	8912      	ldrh	r2, [r2, #8]
 800fa12:	441a      	add	r2, r3
 800fa14:	4b12      	ldr	r3, [pc, #72]	@ (800fa60 <tcp_receive+0xd00>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	1ad3      	subs	r3, r2, r3
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	dd12      	ble.n	800fa44 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fa1e:	4b10      	ldr	r3, [pc, #64]	@ (800fa60 <tcp_receive+0xd00>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	b29a      	uxth	r2, r3
 800fa24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa26:	68db      	ldr	r3, [r3, #12]
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	b29b      	uxth	r3, r3
 800fa2c:	1ad3      	subs	r3, r2, r3
 800fa2e:	b29a      	uxth	r2, r3
 800fa30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa32:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fa34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa36:	685a      	ldr	r2, [r3, #4]
 800fa38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa3a:	891b      	ldrh	r3, [r3, #8]
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	4610      	mov	r0, r2
 800fa40:	f7fb fe84 	bl	800b74c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fa44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa46:	69fa      	ldr	r2, [r7, #28]
 800fa48:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fa4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fa4c:	69f8      	ldr	r0, [r7, #28]
 800fa4e:	f7ff f883 	bl	800eb58 <tcp_oos_insert_segment>
                  }
                  break;
 800fa52:	e0e1      	b.n	800fc18 <tcp_receive+0xeb8>
 800fa54:	2000b154 	.word	0x2000b154
 800fa58:	2000b151 	.word	0x2000b151
 800fa5c:	2000b124 	.word	0x2000b124
 800fa60:	2000b144 	.word	0x2000b144
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fa64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa66:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fa68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	f040 80c5 	bne.w	800fbfc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fa72:	4b7f      	ldr	r3, [pc, #508]	@ (800fc70 <tcp_receive+0xf10>)
 800fa74:	681a      	ldr	r2, [r3, #0]
 800fa76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	f340 80bc 	ble.w	800fbfc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fa84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa86:	68db      	ldr	r3, [r3, #12]
 800fa88:	899b      	ldrh	r3, [r3, #12]
 800fa8a:	b29b      	uxth	r3, r3
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7fa fc85 	bl	800a39c <lwip_htons>
 800fa92:	4603      	mov	r3, r0
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	f003 0301 	and.w	r3, r3, #1
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	f040 80be 	bne.w	800fc1c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800faa0:	4874      	ldr	r0, [pc, #464]	@ (800fc74 <tcp_receive+0xf14>)
 800faa2:	f7fd fb09 	bl	800d0b8 <tcp_seg_copy>
 800faa6:	4602      	mov	r2, r0
 800faa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faaa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800faac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	f000 80b5 	beq.w	800fc20 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab8:	68db      	ldr	r3, [r3, #12]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fabe:	8912      	ldrh	r2, [r2, #8]
 800fac0:	441a      	add	r2, r3
 800fac2:	4b6b      	ldr	r3, [pc, #428]	@ (800fc70 <tcp_receive+0xf10>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	1ad3      	subs	r3, r2, r3
 800fac8:	2b00      	cmp	r3, #0
 800faca:	dd12      	ble.n	800faf2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800facc:	4b68      	ldr	r3, [pc, #416]	@ (800fc70 <tcp_receive+0xf10>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	b29a      	uxth	r2, r3
 800fad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fad4:	68db      	ldr	r3, [r3, #12]
 800fad6:	685b      	ldr	r3, [r3, #4]
 800fad8:	b29b      	uxth	r3, r3
 800fada:	1ad3      	subs	r3, r2, r3
 800fadc:	b29a      	uxth	r2, r3
 800fade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fae0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fae4:	685a      	ldr	r2, [r3, #4]
 800fae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fae8:	891b      	ldrh	r3, [r3, #8]
 800faea:	4619      	mov	r1, r3
 800faec:	4610      	mov	r0, r2
 800faee:	f7fb fe2d 	bl	800b74c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800faf2:	4b61      	ldr	r3, [pc, #388]	@ (800fc78 <tcp_receive+0xf18>)
 800faf4:	881b      	ldrh	r3, [r3, #0]
 800faf6:	461a      	mov	r2, r3
 800faf8:	4b5d      	ldr	r3, [pc, #372]	@ (800fc70 <tcp_receive+0xf10>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	441a      	add	r2, r3
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb02:	6879      	ldr	r1, [r7, #4]
 800fb04:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fb06:	440b      	add	r3, r1
 800fb08:	1ad3      	subs	r3, r2, r3
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	f340 8088 	ble.w	800fc20 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fb10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	68db      	ldr	r3, [r3, #12]
 800fb16:	899b      	ldrh	r3, [r3, #12]
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fa fc3e 	bl	800a39c <lwip_htons>
 800fb20:	4603      	mov	r3, r0
 800fb22:	b2db      	uxtb	r3, r3
 800fb24:	f003 0301 	and.w	r3, r3, #1
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d021      	beq.n	800fb70 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	68db      	ldr	r3, [r3, #12]
 800fb32:	899b      	ldrh	r3, [r3, #12]
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	b21b      	sxth	r3, r3
 800fb38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fb3c:	b21c      	sxth	r4, r3
 800fb3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	68db      	ldr	r3, [r3, #12]
 800fb44:	899b      	ldrh	r3, [r3, #12]
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7fa fc27 	bl	800a39c <lwip_htons>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	b2db      	uxtb	r3, r3
 800fb52:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7fa fc1f 	bl	800a39c <lwip_htons>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	b21b      	sxth	r3, r3
 800fb62:	4323      	orrs	r3, r4
 800fb64:	b21a      	sxth	r2, r3
 800fb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	68db      	ldr	r3, [r3, #12]
 800fb6c:	b292      	uxth	r2, r2
 800fb6e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb7a:	4413      	add	r3, r2
 800fb7c:	b299      	uxth	r1, r3
 800fb7e:	4b3c      	ldr	r3, [pc, #240]	@ (800fc70 <tcp_receive+0xf10>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	b29a      	uxth	r2, r3
 800fb84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	1a8a      	subs	r2, r1, r2
 800fb8a:	b292      	uxth	r2, r2
 800fb8c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fb8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	685a      	ldr	r2, [r3, #4]
 800fb94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	891b      	ldrh	r3, [r3, #8]
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	4610      	mov	r0, r2
 800fb9e:	f7fb fdd5 	bl	800b74c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	891c      	ldrh	r4, [r3, #8]
 800fba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	899b      	ldrh	r3, [r3, #12]
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fa fbf2 	bl	800a39c <lwip_htons>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	b2db      	uxtb	r3, r3
 800fbbc:	f003 0303 	and.w	r3, r3, #3
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d001      	beq.n	800fbc8 <tcp_receive+0xe68>
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	e000      	b.n	800fbca <tcp_receive+0xe6a>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	4423      	add	r3, r4
 800fbcc:	b29a      	uxth	r2, r3
 800fbce:	4b2a      	ldr	r3, [pc, #168]	@ (800fc78 <tcp_receive+0xf18>)
 800fbd0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fbd2:	4b29      	ldr	r3, [pc, #164]	@ (800fc78 <tcp_receive+0xf18>)
 800fbd4:	881b      	ldrh	r3, [r3, #0]
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	4b25      	ldr	r3, [pc, #148]	@ (800fc70 <tcp_receive+0xf10>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	441a      	add	r2, r3
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbe2:	6879      	ldr	r1, [r7, #4]
 800fbe4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fbe6:	440b      	add	r3, r1
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d019      	beq.n	800fc20 <tcp_receive+0xec0>
 800fbec:	4b23      	ldr	r3, [pc, #140]	@ (800fc7c <tcp_receive+0xf1c>)
 800fbee:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800fbf2:	4923      	ldr	r1, [pc, #140]	@ (800fc80 <tcp_receive+0xf20>)
 800fbf4:	4823      	ldr	r0, [pc, #140]	@ (800fc84 <tcp_receive+0xf24>)
 800fbf6:	f004 fd9d 	bl	8014734 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fbfa:	e011      	b.n	800fc20 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	f47f aea5 	bne.w	800f954 <tcp_receive+0xbf4>
 800fc0a:	e00a      	b.n	800fc22 <tcp_receive+0xec2>
                break;
 800fc0c:	bf00      	nop
 800fc0e:	e008      	b.n	800fc22 <tcp_receive+0xec2>
                break;
 800fc10:	bf00      	nop
 800fc12:	e006      	b.n	800fc22 <tcp_receive+0xec2>
                  break;
 800fc14:	bf00      	nop
 800fc16:	e004      	b.n	800fc22 <tcp_receive+0xec2>
                  break;
 800fc18:	bf00      	nop
 800fc1a:	e002      	b.n	800fc22 <tcp_receive+0xec2>
                  break;
 800fc1c:	bf00      	nop
 800fc1e:	e000      	b.n	800fc22 <tcp_receive+0xec2>
                break;
 800fc20:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f001 fa30 	bl	8011088 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fc28:	e003      	b.n	800fc32 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f001 fa2c 	bl	8011088 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fc30:	e01a      	b.n	800fc68 <tcp_receive+0xf08>
 800fc32:	e019      	b.n	800fc68 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fc34:	4b0e      	ldr	r3, [pc, #56]	@ (800fc70 <tcp_receive+0xf10>)
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc3c:	1ad3      	subs	r3, r2, r3
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	db0a      	blt.n	800fc58 <tcp_receive+0xef8>
 800fc42:	4b0b      	ldr	r3, [pc, #44]	@ (800fc70 <tcp_receive+0xf10>)
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc4a:	6879      	ldr	r1, [r7, #4]
 800fc4c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fc4e:	440b      	add	r3, r1
 800fc50:	1ad3      	subs	r3, r2, r3
 800fc52:	3301      	adds	r3, #1
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	dd07      	ble.n	800fc68 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	8b5b      	ldrh	r3, [r3, #26]
 800fc5c:	f043 0302 	orr.w	r3, r3, #2
 800fc60:	b29a      	uxth	r2, r3
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fc66:	e7ff      	b.n	800fc68 <tcp_receive+0xf08>
 800fc68:	bf00      	nop
 800fc6a:	3750      	adds	r7, #80	@ 0x50
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bdb0      	pop	{r4, r5, r7, pc}
 800fc70:	2000b144 	.word	0x2000b144
 800fc74:	2000b124 	.word	0x2000b124
 800fc78:	2000b14e 	.word	0x2000b14e
 800fc7c:	08016790 	.word	0x08016790
 800fc80:	08016b38 	.word	0x08016b38
 800fc84:	080167dc 	.word	0x080167dc

0800fc88 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b083      	sub	sp, #12
 800fc8c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fc8e:	4b15      	ldr	r3, [pc, #84]	@ (800fce4 <tcp_get_next_optbyte+0x5c>)
 800fc90:	881b      	ldrh	r3, [r3, #0]
 800fc92:	1c5a      	adds	r2, r3, #1
 800fc94:	b291      	uxth	r1, r2
 800fc96:	4a13      	ldr	r2, [pc, #76]	@ (800fce4 <tcp_get_next_optbyte+0x5c>)
 800fc98:	8011      	strh	r1, [r2, #0]
 800fc9a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fc9c:	4b12      	ldr	r3, [pc, #72]	@ (800fce8 <tcp_get_next_optbyte+0x60>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d004      	beq.n	800fcae <tcp_get_next_optbyte+0x26>
 800fca4:	4b11      	ldr	r3, [pc, #68]	@ (800fcec <tcp_get_next_optbyte+0x64>)
 800fca6:	881b      	ldrh	r3, [r3, #0]
 800fca8:	88fa      	ldrh	r2, [r7, #6]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d208      	bcs.n	800fcc0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fcae:	4b10      	ldr	r3, [pc, #64]	@ (800fcf0 <tcp_get_next_optbyte+0x68>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	3314      	adds	r3, #20
 800fcb4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fcb6:	88fb      	ldrh	r3, [r7, #6]
 800fcb8:	683a      	ldr	r2, [r7, #0]
 800fcba:	4413      	add	r3, r2
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	e00b      	b.n	800fcd8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fcc0:	88fb      	ldrh	r3, [r7, #6]
 800fcc2:	b2da      	uxtb	r2, r3
 800fcc4:	4b09      	ldr	r3, [pc, #36]	@ (800fcec <tcp_get_next_optbyte+0x64>)
 800fcc6:	881b      	ldrh	r3, [r3, #0]
 800fcc8:	b2db      	uxtb	r3, r3
 800fcca:	1ad3      	subs	r3, r2, r3
 800fccc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fcce:	4b06      	ldr	r3, [pc, #24]	@ (800fce8 <tcp_get_next_optbyte+0x60>)
 800fcd0:	681a      	ldr	r2, [r3, #0]
 800fcd2:	797b      	ldrb	r3, [r7, #5]
 800fcd4:	4413      	add	r3, r2
 800fcd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	370c      	adds	r7, #12
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce2:	4770      	bx	lr
 800fce4:	2000b140 	.word	0x2000b140
 800fce8:	2000b13c 	.word	0x2000b13c
 800fcec:	2000b13a 	.word	0x2000b13a
 800fcf0:	2000b134 	.word	0x2000b134

0800fcf4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b084      	sub	sp, #16
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d106      	bne.n	800fd10 <tcp_parseopt+0x1c>
 800fd02:	4b32      	ldr	r3, [pc, #200]	@ (800fdcc <tcp_parseopt+0xd8>)
 800fd04:	f240 727d 	movw	r2, #1917	@ 0x77d
 800fd08:	4931      	ldr	r1, [pc, #196]	@ (800fdd0 <tcp_parseopt+0xdc>)
 800fd0a:	4832      	ldr	r0, [pc, #200]	@ (800fdd4 <tcp_parseopt+0xe0>)
 800fd0c:	f004 fd12 	bl	8014734 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fd10:	4b31      	ldr	r3, [pc, #196]	@ (800fdd8 <tcp_parseopt+0xe4>)
 800fd12:	881b      	ldrh	r3, [r3, #0]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d056      	beq.n	800fdc6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fd18:	4b30      	ldr	r3, [pc, #192]	@ (800fddc <tcp_parseopt+0xe8>)
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	801a      	strh	r2, [r3, #0]
 800fd1e:	e046      	b.n	800fdae <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800fd20:	f7ff ffb2 	bl	800fc88 <tcp_get_next_optbyte>
 800fd24:	4603      	mov	r3, r0
 800fd26:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fd28:	7bfb      	ldrb	r3, [r7, #15]
 800fd2a:	2b02      	cmp	r3, #2
 800fd2c:	d006      	beq.n	800fd3c <tcp_parseopt+0x48>
 800fd2e:	2b02      	cmp	r3, #2
 800fd30:	dc2a      	bgt.n	800fd88 <tcp_parseopt+0x94>
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d042      	beq.n	800fdbc <tcp_parseopt+0xc8>
 800fd36:	2b01      	cmp	r3, #1
 800fd38:	d038      	beq.n	800fdac <tcp_parseopt+0xb8>
 800fd3a:	e025      	b.n	800fd88 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fd3c:	f7ff ffa4 	bl	800fc88 <tcp_get_next_optbyte>
 800fd40:	4603      	mov	r3, r0
 800fd42:	2b04      	cmp	r3, #4
 800fd44:	d13c      	bne.n	800fdc0 <tcp_parseopt+0xcc>
 800fd46:	4b25      	ldr	r3, [pc, #148]	@ (800fddc <tcp_parseopt+0xe8>)
 800fd48:	881b      	ldrh	r3, [r3, #0]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	4a22      	ldr	r2, [pc, #136]	@ (800fdd8 <tcp_parseopt+0xe4>)
 800fd4e:	8812      	ldrh	r2, [r2, #0]
 800fd50:	4293      	cmp	r3, r2
 800fd52:	da35      	bge.n	800fdc0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fd54:	f7ff ff98 	bl	800fc88 <tcp_get_next_optbyte>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	021b      	lsls	r3, r3, #8
 800fd5c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fd5e:	f7ff ff93 	bl	800fc88 <tcp_get_next_optbyte>
 800fd62:	4603      	mov	r3, r0
 800fd64:	461a      	mov	r2, r3
 800fd66:	89bb      	ldrh	r3, [r7, #12]
 800fd68:	4313      	orrs	r3, r2
 800fd6a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fd6c:	89bb      	ldrh	r3, [r7, #12]
 800fd6e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800fd72:	d804      	bhi.n	800fd7e <tcp_parseopt+0x8a>
 800fd74:	89bb      	ldrh	r3, [r7, #12]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d001      	beq.n	800fd7e <tcp_parseopt+0x8a>
 800fd7a:	89ba      	ldrh	r2, [r7, #12]
 800fd7c:	e001      	b.n	800fd82 <tcp_parseopt+0x8e>
 800fd7e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800fd86:	e012      	b.n	800fdae <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fd88:	f7ff ff7e 	bl	800fc88 <tcp_get_next_optbyte>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fd90:	7afb      	ldrb	r3, [r7, #11]
 800fd92:	2b01      	cmp	r3, #1
 800fd94:	d916      	bls.n	800fdc4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fd96:	7afb      	ldrb	r3, [r7, #11]
 800fd98:	b29a      	uxth	r2, r3
 800fd9a:	4b10      	ldr	r3, [pc, #64]	@ (800fddc <tcp_parseopt+0xe8>)
 800fd9c:	881b      	ldrh	r3, [r3, #0]
 800fd9e:	4413      	add	r3, r2
 800fda0:	b29b      	uxth	r3, r3
 800fda2:	3b02      	subs	r3, #2
 800fda4:	b29a      	uxth	r2, r3
 800fda6:	4b0d      	ldr	r3, [pc, #52]	@ (800fddc <tcp_parseopt+0xe8>)
 800fda8:	801a      	strh	r2, [r3, #0]
 800fdaa:	e000      	b.n	800fdae <tcp_parseopt+0xba>
          break;
 800fdac:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fdae:	4b0b      	ldr	r3, [pc, #44]	@ (800fddc <tcp_parseopt+0xe8>)
 800fdb0:	881a      	ldrh	r2, [r3, #0]
 800fdb2:	4b09      	ldr	r3, [pc, #36]	@ (800fdd8 <tcp_parseopt+0xe4>)
 800fdb4:	881b      	ldrh	r3, [r3, #0]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d3b2      	bcc.n	800fd20 <tcp_parseopt+0x2c>
 800fdba:	e004      	b.n	800fdc6 <tcp_parseopt+0xd2>
          return;
 800fdbc:	bf00      	nop
 800fdbe:	e002      	b.n	800fdc6 <tcp_parseopt+0xd2>
            return;
 800fdc0:	bf00      	nop
 800fdc2:	e000      	b.n	800fdc6 <tcp_parseopt+0xd2>
            return;
 800fdc4:	bf00      	nop
      }
    }
  }
}
 800fdc6:	3710      	adds	r7, #16
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	08016790 	.word	0x08016790
 800fdd0:	08016bf4 	.word	0x08016bf4
 800fdd4:	080167dc 	.word	0x080167dc
 800fdd8:	2000b138 	.word	0x2000b138
 800fddc:	2000b140 	.word	0x2000b140

0800fde0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fde0:	b480      	push	{r7}
 800fde2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fde4:	4b05      	ldr	r3, [pc, #20]	@ (800fdfc <tcp_trigger_input_pcb_close+0x1c>)
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	f043 0310 	orr.w	r3, r3, #16
 800fdec:	b2da      	uxtb	r2, r3
 800fdee:	4b03      	ldr	r3, [pc, #12]	@ (800fdfc <tcp_trigger_input_pcb_close+0x1c>)
 800fdf0:	701a      	strb	r2, [r3, #0]
}
 800fdf2:	bf00      	nop
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfa:	4770      	bx	lr
 800fdfc:	2000b151 	.word	0x2000b151

0800fe00 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b084      	sub	sp, #16
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	60f8      	str	r0, [r7, #12]
 800fe08:	60b9      	str	r1, [r7, #8]
 800fe0a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d00a      	beq.n	800fe28 <tcp_route+0x28>
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	7a1b      	ldrb	r3, [r3, #8]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d006      	beq.n	800fe28 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	7a1b      	ldrb	r3, [r3, #8]
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fb faba 	bl	800b398 <netif_get_by_index>
 800fe24:	4603      	mov	r3, r0
 800fe26:	e003      	b.n	800fe30 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f003 f997 	bl	801315c <ip4_route>
 800fe2e:	4603      	mov	r3, r0
  }
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3710      	adds	r7, #16
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fe38:	b590      	push	{r4, r7, lr}
 800fe3a:	b087      	sub	sp, #28
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	603b      	str	r3, [r7, #0]
 800fe44:	4613      	mov	r3, r2
 800fe46:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d105      	bne.n	800fe5a <tcp_create_segment+0x22>
 800fe4e:	4b43      	ldr	r3, [pc, #268]	@ (800ff5c <tcp_create_segment+0x124>)
 800fe50:	22a3      	movs	r2, #163	@ 0xa3
 800fe52:	4943      	ldr	r1, [pc, #268]	@ (800ff60 <tcp_create_segment+0x128>)
 800fe54:	4843      	ldr	r0, [pc, #268]	@ (800ff64 <tcp_create_segment+0x12c>)
 800fe56:	f004 fc6d 	bl	8014734 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d105      	bne.n	800fe6c <tcp_create_segment+0x34>
 800fe60:	4b3e      	ldr	r3, [pc, #248]	@ (800ff5c <tcp_create_segment+0x124>)
 800fe62:	22a4      	movs	r2, #164	@ 0xa4
 800fe64:	4940      	ldr	r1, [pc, #256]	@ (800ff68 <tcp_create_segment+0x130>)
 800fe66:	483f      	ldr	r0, [pc, #252]	@ (800ff64 <tcp_create_segment+0x12c>)
 800fe68:	f004 fc64 	bl	8014734 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fe6c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fe70:	009b      	lsls	r3, r3, #2
 800fe72:	b2db      	uxtb	r3, r3
 800fe74:	f003 0304 	and.w	r3, r3, #4
 800fe78:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fe7a:	2003      	movs	r0, #3
 800fe7c:	f7fa ff06 	bl	800ac8c <memp_malloc>
 800fe80:	6138      	str	r0, [r7, #16]
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d104      	bne.n	800fe92 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fe88:	68b8      	ldr	r0, [r7, #8]
 800fe8a:	f7fb fde5 	bl	800ba58 <pbuf_free>
    return NULL;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	e060      	b.n	800ff54 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800fe98:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	68ba      	ldr	r2, [r7, #8]
 800fea4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	891a      	ldrh	r2, [r3, #8]
 800feaa:	7dfb      	ldrb	r3, [r7, #23]
 800feac:	b29b      	uxth	r3, r3
 800feae:	429a      	cmp	r2, r3
 800feb0:	d205      	bcs.n	800febe <tcp_create_segment+0x86>
 800feb2:	4b2a      	ldr	r3, [pc, #168]	@ (800ff5c <tcp_create_segment+0x124>)
 800feb4:	22b0      	movs	r2, #176	@ 0xb0
 800feb6:	492d      	ldr	r1, [pc, #180]	@ (800ff6c <tcp_create_segment+0x134>)
 800feb8:	482a      	ldr	r0, [pc, #168]	@ (800ff64 <tcp_create_segment+0x12c>)
 800feba:	f004 fc3b 	bl	8014734 <iprintf>
  seg->len = p->tot_len - optlen;
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	891a      	ldrh	r2, [r3, #8]
 800fec2:	7dfb      	ldrb	r3, [r7, #23]
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	1ad3      	subs	r3, r2, r3
 800fec8:	b29a      	uxth	r2, r3
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fece:	2114      	movs	r1, #20
 800fed0:	68b8      	ldr	r0, [r7, #8]
 800fed2:	f7fb fd2b 	bl	800b92c <pbuf_add_header>
 800fed6:	4603      	mov	r3, r0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d004      	beq.n	800fee6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fedc:	6938      	ldr	r0, [r7, #16]
 800fede:	f7fd f8d2 	bl	800d086 <tcp_seg_free>
    return NULL;
 800fee2:	2300      	movs	r3, #0
 800fee4:	e036      	b.n	800ff54 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	685a      	ldr	r2, [r3, #4]
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	8ada      	ldrh	r2, [r3, #22]
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	68dc      	ldr	r4, [r3, #12]
 800fef8:	4610      	mov	r0, r2
 800fefa:	f7fa fa4f 	bl	800a39c <lwip_htons>
 800fefe:	4603      	mov	r3, r0
 800ff00:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	8b1a      	ldrh	r2, [r3, #24]
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	68dc      	ldr	r4, [r3, #12]
 800ff0a:	4610      	mov	r0, r2
 800ff0c:	f7fa fa46 	bl	800a39c <lwip_htons>
 800ff10:	4603      	mov	r3, r0
 800ff12:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	68dc      	ldr	r4, [r3, #12]
 800ff18:	6838      	ldr	r0, [r7, #0]
 800ff1a:	f7fa fa55 	bl	800a3c8 <lwip_htonl>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ff22:	7dfb      	ldrb	r3, [r7, #23]
 800ff24:	089b      	lsrs	r3, r3, #2
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	3305      	adds	r3, #5
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	031b      	lsls	r3, r3, #12
 800ff2e:	b29a      	uxth	r2, r3
 800ff30:	79fb      	ldrb	r3, [r7, #7]
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	4313      	orrs	r3, r2
 800ff36:	b29a      	uxth	r2, r3
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	68dc      	ldr	r4, [r3, #12]
 800ff3c:	4610      	mov	r0, r2
 800ff3e:	f7fa fa2d 	bl	800a39c <lwip_htons>
 800ff42:	4603      	mov	r3, r0
 800ff44:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	68db      	ldr	r3, [r3, #12]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	749a      	strb	r2, [r3, #18]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	74da      	strb	r2, [r3, #19]
  return seg;
 800ff52:	693b      	ldr	r3, [r7, #16]
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	371c      	adds	r7, #28
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd90      	pop	{r4, r7, pc}
 800ff5c:	08016c10 	.word	0x08016c10
 800ff60:	08016c44 	.word	0x08016c44
 800ff64:	08016c64 	.word	0x08016c64
 800ff68:	08016c8c 	.word	0x08016c8c
 800ff6c:	08016cb0 	.word	0x08016cb0

0800ff70 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ff70:	b590      	push	{r4, r7, lr}
 800ff72:	b08b      	sub	sp, #44	@ 0x2c
 800ff74:	af02      	add	r7, sp, #8
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	460b      	mov	r3, r1
 800ff7a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	61fb      	str	r3, [r7, #28]
 800ff80:	2300      	movs	r3, #0
 800ff82:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ff84:	2300      	movs	r3, #0
 800ff86:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d106      	bne.n	800ff9c <tcp_split_unsent_seg+0x2c>
 800ff8e:	4b95      	ldr	r3, [pc, #596]	@ (80101e4 <tcp_split_unsent_seg+0x274>)
 800ff90:	f240 324b 	movw	r2, #843	@ 0x34b
 800ff94:	4994      	ldr	r1, [pc, #592]	@ (80101e8 <tcp_split_unsent_seg+0x278>)
 800ff96:	4895      	ldr	r0, [pc, #596]	@ (80101ec <tcp_split_unsent_seg+0x27c>)
 800ff98:	f004 fbcc 	bl	8014734 <iprintf>

  useg = pcb->unsent;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffa0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d102      	bne.n	800ffae <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ffa8:	f04f 33ff 	mov.w	r3, #4294967295
 800ffac:	e116      	b.n	80101dc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ffae:	887b      	ldrh	r3, [r7, #2]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d109      	bne.n	800ffc8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ffb4:	4b8b      	ldr	r3, [pc, #556]	@ (80101e4 <tcp_split_unsent_seg+0x274>)
 800ffb6:	f240 3253 	movw	r2, #851	@ 0x353
 800ffba:	498d      	ldr	r1, [pc, #564]	@ (80101f0 <tcp_split_unsent_seg+0x280>)
 800ffbc:	488b      	ldr	r0, [pc, #556]	@ (80101ec <tcp_split_unsent_seg+0x27c>)
 800ffbe:	f004 fbb9 	bl	8014734 <iprintf>
    return ERR_VAL;
 800ffc2:	f06f 0305 	mvn.w	r3, #5
 800ffc6:	e109      	b.n	80101dc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	891b      	ldrh	r3, [r3, #8]
 800ffcc:	887a      	ldrh	r2, [r7, #2]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d301      	bcc.n	800ffd6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	e102      	b.n	80101dc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffda:	887a      	ldrh	r2, [r7, #2]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d906      	bls.n	800ffee <tcp_split_unsent_seg+0x7e>
 800ffe0:	4b80      	ldr	r3, [pc, #512]	@ (80101e4 <tcp_split_unsent_seg+0x274>)
 800ffe2:	f240 325b 	movw	r2, #859	@ 0x35b
 800ffe6:	4983      	ldr	r1, [pc, #524]	@ (80101f4 <tcp_split_unsent_seg+0x284>)
 800ffe8:	4880      	ldr	r0, [pc, #512]	@ (80101ec <tcp_split_unsent_seg+0x27c>)
 800ffea:	f004 fba3 	bl	8014734 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	891b      	ldrh	r3, [r3, #8]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d106      	bne.n	8010004 <tcp_split_unsent_seg+0x94>
 800fff6:	4b7b      	ldr	r3, [pc, #492]	@ (80101e4 <tcp_split_unsent_seg+0x274>)
 800fff8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800fffc:	497e      	ldr	r1, [pc, #504]	@ (80101f8 <tcp_split_unsent_seg+0x288>)
 800fffe:	487b      	ldr	r0, [pc, #492]	@ (80101ec <tcp_split_unsent_seg+0x27c>)
 8010000:	f004 fb98 	bl	8014734 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	7a9b      	ldrb	r3, [r3, #10]
 8010008:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801000a:	7bfb      	ldrb	r3, [r7, #15]
 801000c:	009b      	lsls	r3, r3, #2
 801000e:	b2db      	uxtb	r3, r3
 8010010:	f003 0304 	and.w	r3, r3, #4
 8010014:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	891a      	ldrh	r2, [r3, #8]
 801001a:	887b      	ldrh	r3, [r7, #2]
 801001c:	1ad3      	subs	r3, r2, r3
 801001e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010020:	7bbb      	ldrb	r3, [r7, #14]
 8010022:	b29a      	uxth	r2, r3
 8010024:	89bb      	ldrh	r3, [r7, #12]
 8010026:	4413      	add	r3, r2
 8010028:	b29b      	uxth	r3, r3
 801002a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801002e:	4619      	mov	r1, r3
 8010030:	2036      	movs	r0, #54	@ 0x36
 8010032:	f7fb fa2d 	bl	800b490 <pbuf_alloc>
 8010036:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	2b00      	cmp	r3, #0
 801003c:	f000 80b7 	beq.w	80101ae <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	891a      	ldrh	r2, [r3, #8]
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	891b      	ldrh	r3, [r3, #8]
 801004a:	1ad3      	subs	r3, r2, r3
 801004c:	b29a      	uxth	r2, r3
 801004e:	887b      	ldrh	r3, [r7, #2]
 8010050:	4413      	add	r3, r2
 8010052:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	6858      	ldr	r0, [r3, #4]
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	685a      	ldr	r2, [r3, #4]
 801005c:	7bbb      	ldrb	r3, [r7, #14]
 801005e:	18d1      	adds	r1, r2, r3
 8010060:	897b      	ldrh	r3, [r7, #10]
 8010062:	89ba      	ldrh	r2, [r7, #12]
 8010064:	f7fb fef2 	bl	800be4c <pbuf_copy_partial>
 8010068:	4603      	mov	r3, r0
 801006a:	461a      	mov	r2, r3
 801006c:	89bb      	ldrh	r3, [r7, #12]
 801006e:	4293      	cmp	r3, r2
 8010070:	f040 809f 	bne.w	80101b2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010074:	697b      	ldr	r3, [r7, #20]
 8010076:	68db      	ldr	r3, [r3, #12]
 8010078:	899b      	ldrh	r3, [r3, #12]
 801007a:	b29b      	uxth	r3, r3
 801007c:	4618      	mov	r0, r3
 801007e:	f7fa f98d 	bl	800a39c <lwip_htons>
 8010082:	4603      	mov	r3, r0
 8010084:	b2db      	uxtb	r3, r3
 8010086:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801008a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801008c:	2300      	movs	r3, #0
 801008e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010090:	7efb      	ldrb	r3, [r7, #27]
 8010092:	f003 0308 	and.w	r3, r3, #8
 8010096:	2b00      	cmp	r3, #0
 8010098:	d007      	beq.n	80100aa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801009a:	7efb      	ldrb	r3, [r7, #27]
 801009c:	f023 0308 	bic.w	r3, r3, #8
 80100a0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80100a2:	7ebb      	ldrb	r3, [r7, #26]
 80100a4:	f043 0308 	orr.w	r3, r3, #8
 80100a8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80100aa:	7efb      	ldrb	r3, [r7, #27]
 80100ac:	f003 0301 	and.w	r3, r3, #1
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d007      	beq.n	80100c4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80100b4:	7efb      	ldrb	r3, [r7, #27]
 80100b6:	f023 0301 	bic.w	r3, r3, #1
 80100ba:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80100bc:	7ebb      	ldrb	r3, [r7, #26]
 80100be:	f043 0301 	orr.w	r3, r3, #1
 80100c2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	68db      	ldr	r3, [r3, #12]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7fa f97c 	bl	800a3c8 <lwip_htonl>
 80100d0:	4602      	mov	r2, r0
 80100d2:	887b      	ldrh	r3, [r7, #2]
 80100d4:	18d1      	adds	r1, r2, r3
 80100d6:	7eba      	ldrb	r2, [r7, #26]
 80100d8:	7bfb      	ldrb	r3, [r7, #15]
 80100da:	9300      	str	r3, [sp, #0]
 80100dc:	460b      	mov	r3, r1
 80100de:	6939      	ldr	r1, [r7, #16]
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7ff fea9 	bl	800fe38 <tcp_create_segment>
 80100e6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d063      	beq.n	80101b6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	685b      	ldr	r3, [r3, #4]
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7fb fd38 	bl	800bb68 <pbuf_clen>
 80100f8:	4603      	mov	r3, r0
 80100fa:	461a      	mov	r2, r3
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010102:	1a9b      	subs	r3, r3, r2
 8010104:	b29a      	uxth	r2, r3
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	6858      	ldr	r0, [r3, #4]
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	891a      	ldrh	r2, [r3, #8]
 8010116:	89bb      	ldrh	r3, [r7, #12]
 8010118:	1ad3      	subs	r3, r2, r3
 801011a:	b29b      	uxth	r3, r3
 801011c:	4619      	mov	r1, r3
 801011e:	f7fb fb15 	bl	800b74c <pbuf_realloc>
  useg->len -= remainder;
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	891a      	ldrh	r2, [r3, #8]
 8010126:	89bb      	ldrh	r3, [r7, #12]
 8010128:	1ad3      	subs	r3, r2, r3
 801012a:	b29a      	uxth	r2, r3
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	899b      	ldrh	r3, [r3, #12]
 8010136:	b29c      	uxth	r4, r3
 8010138:	7efb      	ldrb	r3, [r7, #27]
 801013a:	b29b      	uxth	r3, r3
 801013c:	4618      	mov	r0, r3
 801013e:	f7fa f92d 	bl	800a39c <lwip_htons>
 8010142:	4603      	mov	r3, r0
 8010144:	461a      	mov	r2, r3
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	68db      	ldr	r3, [r3, #12]
 801014a:	4322      	orrs	r2, r4
 801014c:	b292      	uxth	r2, r2
 801014e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	4618      	mov	r0, r3
 8010156:	f7fb fd07 	bl	800bb68 <pbuf_clen>
 801015a:	4603      	mov	r3, r0
 801015c:	461a      	mov	r2, r3
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010164:	4413      	add	r3, r2
 8010166:	b29a      	uxth	r2, r3
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	4618      	mov	r0, r3
 8010174:	f7fb fcf8 	bl	800bb68 <pbuf_clen>
 8010178:	4603      	mov	r3, r0
 801017a:	461a      	mov	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010182:	4413      	add	r3, r2
 8010184:	b29a      	uxth	r2, r3
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	69fb      	ldr	r3, [r7, #28]
 8010192:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	69fa      	ldr	r2, [r7, #28]
 8010198:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801019a:	69fb      	ldr	r3, [r7, #28]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d103      	bne.n	80101aa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2200      	movs	r2, #0
 80101a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80101aa:	2300      	movs	r3, #0
 80101ac:	e016      	b.n	80101dc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80101ae:	bf00      	nop
 80101b0:	e002      	b.n	80101b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80101b2:	bf00      	nop
 80101b4:	e000      	b.n	80101b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80101b6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d006      	beq.n	80101cc <tcp_split_unsent_seg+0x25c>
 80101be:	4b09      	ldr	r3, [pc, #36]	@ (80101e4 <tcp_split_unsent_seg+0x274>)
 80101c0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80101c4:	490d      	ldr	r1, [pc, #52]	@ (80101fc <tcp_split_unsent_seg+0x28c>)
 80101c6:	4809      	ldr	r0, [pc, #36]	@ (80101ec <tcp_split_unsent_seg+0x27c>)
 80101c8:	f004 fab4 	bl	8014734 <iprintf>
  if (p != NULL) {
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d002      	beq.n	80101d8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80101d2:	6938      	ldr	r0, [r7, #16]
 80101d4:	f7fb fc40 	bl	800ba58 <pbuf_free>
  }

  return ERR_MEM;
 80101d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3724      	adds	r7, #36	@ 0x24
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd90      	pop	{r4, r7, pc}
 80101e4:	08016c10 	.word	0x08016c10
 80101e8:	08016fa4 	.word	0x08016fa4
 80101ec:	08016c64 	.word	0x08016c64
 80101f0:	08016fc8 	.word	0x08016fc8
 80101f4:	08016fec 	.word	0x08016fec
 80101f8:	08016ffc 	.word	0x08016ffc
 80101fc:	0801700c 	.word	0x0801700c

08010200 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010200:	b590      	push	{r4, r7, lr}
 8010202:	b085      	sub	sp, #20
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d106      	bne.n	801021c <tcp_send_fin+0x1c>
 801020e:	4b21      	ldr	r3, [pc, #132]	@ (8010294 <tcp_send_fin+0x94>)
 8010210:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010214:	4920      	ldr	r1, [pc, #128]	@ (8010298 <tcp_send_fin+0x98>)
 8010216:	4821      	ldr	r0, [pc, #132]	@ (801029c <tcp_send_fin+0x9c>)
 8010218:	f004 fa8c 	bl	8014734 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010220:	2b00      	cmp	r3, #0
 8010222:	d02e      	beq.n	8010282 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010228:	60fb      	str	r3, [r7, #12]
 801022a:	e002      	b.n	8010232 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d1f8      	bne.n	801022c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	68db      	ldr	r3, [r3, #12]
 801023e:	899b      	ldrh	r3, [r3, #12]
 8010240:	b29b      	uxth	r3, r3
 8010242:	4618      	mov	r0, r3
 8010244:	f7fa f8aa 	bl	800a39c <lwip_htons>
 8010248:	4603      	mov	r3, r0
 801024a:	b2db      	uxtb	r3, r3
 801024c:	f003 0307 	and.w	r3, r3, #7
 8010250:	2b00      	cmp	r3, #0
 8010252:	d116      	bne.n	8010282 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	68db      	ldr	r3, [r3, #12]
 8010258:	899b      	ldrh	r3, [r3, #12]
 801025a:	b29c      	uxth	r4, r3
 801025c:	2001      	movs	r0, #1
 801025e:	f7fa f89d 	bl	800a39c <lwip_htons>
 8010262:	4603      	mov	r3, r0
 8010264:	461a      	mov	r2, r3
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	68db      	ldr	r3, [r3, #12]
 801026a:	4322      	orrs	r2, r4
 801026c:	b292      	uxth	r2, r2
 801026e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	8b5b      	ldrh	r3, [r3, #26]
 8010274:	f043 0320 	orr.w	r3, r3, #32
 8010278:	b29a      	uxth	r2, r3
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801027e:	2300      	movs	r3, #0
 8010280:	e004      	b.n	801028c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010282:	2101      	movs	r1, #1
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 f80b 	bl	80102a0 <tcp_enqueue_flags>
 801028a:	4603      	mov	r3, r0
}
 801028c:	4618      	mov	r0, r3
 801028e:	3714      	adds	r7, #20
 8010290:	46bd      	mov	sp, r7
 8010292:	bd90      	pop	{r4, r7, pc}
 8010294:	08016c10 	.word	0x08016c10
 8010298:	08017018 	.word	0x08017018
 801029c:	08016c64 	.word	0x08016c64

080102a0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b08a      	sub	sp, #40	@ 0x28
 80102a4:	af02      	add	r7, sp, #8
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	460b      	mov	r3, r1
 80102aa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80102ac:	2300      	movs	r3, #0
 80102ae:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80102b0:	2300      	movs	r3, #0
 80102b2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80102b4:	78fb      	ldrb	r3, [r7, #3]
 80102b6:	f003 0303 	and.w	r3, r3, #3
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d106      	bne.n	80102cc <tcp_enqueue_flags+0x2c>
 80102be:	4b67      	ldr	r3, [pc, #412]	@ (801045c <tcp_enqueue_flags+0x1bc>)
 80102c0:	f240 4211 	movw	r2, #1041	@ 0x411
 80102c4:	4966      	ldr	r1, [pc, #408]	@ (8010460 <tcp_enqueue_flags+0x1c0>)
 80102c6:	4867      	ldr	r0, [pc, #412]	@ (8010464 <tcp_enqueue_flags+0x1c4>)
 80102c8:	f004 fa34 	bl	8014734 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d106      	bne.n	80102e0 <tcp_enqueue_flags+0x40>
 80102d2:	4b62      	ldr	r3, [pc, #392]	@ (801045c <tcp_enqueue_flags+0x1bc>)
 80102d4:	f240 4213 	movw	r2, #1043	@ 0x413
 80102d8:	4963      	ldr	r1, [pc, #396]	@ (8010468 <tcp_enqueue_flags+0x1c8>)
 80102da:	4862      	ldr	r0, [pc, #392]	@ (8010464 <tcp_enqueue_flags+0x1c4>)
 80102dc:	f004 fa2a 	bl	8014734 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80102e0:	78fb      	ldrb	r3, [r7, #3]
 80102e2:	f003 0302 	and.w	r3, r3, #2
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d001      	beq.n	80102ee <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80102ea:	2301      	movs	r3, #1
 80102ec:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80102ee:	7ffb      	ldrb	r3, [r7, #31]
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	f003 0304 	and.w	r3, r3, #4
 80102f8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80102fa:	7dfb      	ldrb	r3, [r7, #23]
 80102fc:	b29b      	uxth	r3, r3
 80102fe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010302:	4619      	mov	r1, r3
 8010304:	2036      	movs	r0, #54	@ 0x36
 8010306:	f7fb f8c3 	bl	800b490 <pbuf_alloc>
 801030a:	6138      	str	r0, [r7, #16]
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d109      	bne.n	8010326 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	8b5b      	ldrh	r3, [r3, #26]
 8010316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801031a:	b29a      	uxth	r2, r3
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010320:	f04f 33ff 	mov.w	r3, #4294967295
 8010324:	e095      	b.n	8010452 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	895a      	ldrh	r2, [r3, #10]
 801032a:	7dfb      	ldrb	r3, [r7, #23]
 801032c:	b29b      	uxth	r3, r3
 801032e:	429a      	cmp	r2, r3
 8010330:	d206      	bcs.n	8010340 <tcp_enqueue_flags+0xa0>
 8010332:	4b4a      	ldr	r3, [pc, #296]	@ (801045c <tcp_enqueue_flags+0x1bc>)
 8010334:	f240 4239 	movw	r2, #1081	@ 0x439
 8010338:	494c      	ldr	r1, [pc, #304]	@ (801046c <tcp_enqueue_flags+0x1cc>)
 801033a:	484a      	ldr	r0, [pc, #296]	@ (8010464 <tcp_enqueue_flags+0x1c4>)
 801033c:	f004 f9fa 	bl	8014734 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010344:	78fa      	ldrb	r2, [r7, #3]
 8010346:	7ffb      	ldrb	r3, [r7, #31]
 8010348:	9300      	str	r3, [sp, #0]
 801034a:	460b      	mov	r3, r1
 801034c:	6939      	ldr	r1, [r7, #16]
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f7ff fd72 	bl	800fe38 <tcp_create_segment>
 8010354:	60f8      	str	r0, [r7, #12]
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d109      	bne.n	8010370 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	8b5b      	ldrh	r3, [r3, #26]
 8010360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010364:	b29a      	uxth	r2, r3
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801036a:	f04f 33ff 	mov.w	r3, #4294967295
 801036e:	e070      	b.n	8010452 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	f003 0303 	and.w	r3, r3, #3
 8010378:	2b00      	cmp	r3, #0
 801037a:	d006      	beq.n	801038a <tcp_enqueue_flags+0xea>
 801037c:	4b37      	ldr	r3, [pc, #220]	@ (801045c <tcp_enqueue_flags+0x1bc>)
 801037e:	f240 4242 	movw	r2, #1090	@ 0x442
 8010382:	493b      	ldr	r1, [pc, #236]	@ (8010470 <tcp_enqueue_flags+0x1d0>)
 8010384:	4837      	ldr	r0, [pc, #220]	@ (8010464 <tcp_enqueue_flags+0x1c4>)
 8010386:	f004 f9d5 	bl	8014734 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	891b      	ldrh	r3, [r3, #8]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d006      	beq.n	80103a0 <tcp_enqueue_flags+0x100>
 8010392:	4b32      	ldr	r3, [pc, #200]	@ (801045c <tcp_enqueue_flags+0x1bc>)
 8010394:	f240 4243 	movw	r2, #1091	@ 0x443
 8010398:	4936      	ldr	r1, [pc, #216]	@ (8010474 <tcp_enqueue_flags+0x1d4>)
 801039a:	4832      	ldr	r0, [pc, #200]	@ (8010464 <tcp_enqueue_flags+0x1c4>)
 801039c:	f004 f9ca 	bl	8014734 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d103      	bne.n	80103b0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	68fa      	ldr	r2, [r7, #12]
 80103ac:	66da      	str	r2, [r3, #108]	@ 0x6c
 80103ae:	e00d      	b.n	80103cc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103b4:	61bb      	str	r3, [r7, #24]
 80103b6:	e002      	b.n	80103be <tcp_enqueue_flags+0x11e>
 80103b8:	69bb      	ldr	r3, [r7, #24]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	61bb      	str	r3, [r7, #24]
 80103be:	69bb      	ldr	r3, [r7, #24]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d1f8      	bne.n	80103b8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80103c6:	69bb      	ldr	r3, [r7, #24]
 80103c8:	68fa      	ldr	r2, [r7, #12]
 80103ca:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2200      	movs	r2, #0
 80103d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80103d4:	78fb      	ldrb	r3, [r7, #3]
 80103d6:	f003 0302 	and.w	r3, r3, #2
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d104      	bne.n	80103e8 <tcp_enqueue_flags+0x148>
 80103de:	78fb      	ldrb	r3, [r7, #3]
 80103e0:	f003 0301 	and.w	r3, r3, #1
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d004      	beq.n	80103f2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80103ec:	1c5a      	adds	r2, r3, #1
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80103f2:	78fb      	ldrb	r3, [r7, #3]
 80103f4:	f003 0301 	and.w	r3, r3, #1
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d006      	beq.n	801040a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	8b5b      	ldrh	r3, [r3, #26]
 8010400:	f043 0320 	orr.w	r3, r3, #32
 8010404:	b29a      	uxth	r2, r3
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	4618      	mov	r0, r3
 8010410:	f7fb fbaa 	bl	800bb68 <pbuf_clen>
 8010414:	4603      	mov	r3, r0
 8010416:	461a      	mov	r2, r3
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801041e:	4413      	add	r3, r2
 8010420:	b29a      	uxth	r2, r3
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801042e:	2b00      	cmp	r3, #0
 8010430:	d00e      	beq.n	8010450 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010436:	2b00      	cmp	r3, #0
 8010438:	d10a      	bne.n	8010450 <tcp_enqueue_flags+0x1b0>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801043e:	2b00      	cmp	r3, #0
 8010440:	d106      	bne.n	8010450 <tcp_enqueue_flags+0x1b0>
 8010442:	4b06      	ldr	r3, [pc, #24]	@ (801045c <tcp_enqueue_flags+0x1bc>)
 8010444:	f240 4265 	movw	r2, #1125	@ 0x465
 8010448:	490b      	ldr	r1, [pc, #44]	@ (8010478 <tcp_enqueue_flags+0x1d8>)
 801044a:	4806      	ldr	r0, [pc, #24]	@ (8010464 <tcp_enqueue_flags+0x1c4>)
 801044c:	f004 f972 	bl	8014734 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010450:	2300      	movs	r3, #0
}
 8010452:	4618      	mov	r0, r3
 8010454:	3720      	adds	r7, #32
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
 801045a:	bf00      	nop
 801045c:	08016c10 	.word	0x08016c10
 8010460:	08017034 	.word	0x08017034
 8010464:	08016c64 	.word	0x08016c64
 8010468:	0801708c 	.word	0x0801708c
 801046c:	080170ac 	.word	0x080170ac
 8010470:	080170e8 	.word	0x080170e8
 8010474:	08017100 	.word	0x08017100
 8010478:	0801712c 	.word	0x0801712c

0801047c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801047c:	b5b0      	push	{r4, r5, r7, lr}
 801047e:	b08a      	sub	sp, #40	@ 0x28
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d106      	bne.n	8010498 <tcp_output+0x1c>
 801048a:	4b8a      	ldr	r3, [pc, #552]	@ (80106b4 <tcp_output+0x238>)
 801048c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010490:	4989      	ldr	r1, [pc, #548]	@ (80106b8 <tcp_output+0x23c>)
 8010492:	488a      	ldr	r0, [pc, #552]	@ (80106bc <tcp_output+0x240>)
 8010494:	f004 f94e 	bl	8014734 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	7d1b      	ldrb	r3, [r3, #20]
 801049c:	2b01      	cmp	r3, #1
 801049e:	d106      	bne.n	80104ae <tcp_output+0x32>
 80104a0:	4b84      	ldr	r3, [pc, #528]	@ (80106b4 <tcp_output+0x238>)
 80104a2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80104a6:	4986      	ldr	r1, [pc, #536]	@ (80106c0 <tcp_output+0x244>)
 80104a8:	4884      	ldr	r0, [pc, #528]	@ (80106bc <tcp_output+0x240>)
 80104aa:	f004 f943 	bl	8014734 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80104ae:	4b85      	ldr	r3, [pc, #532]	@ (80106c4 <tcp_output+0x248>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	687a      	ldr	r2, [r7, #4]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d101      	bne.n	80104bc <tcp_output+0x40>
    return ERR_OK;
 80104b8:	2300      	movs	r3, #0
 80104ba:	e1ce      	b.n	801085a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80104c8:	4293      	cmp	r3, r2
 80104ca:	bf28      	it	cs
 80104cc:	4613      	movcs	r3, r2
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80104d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d10b      	bne.n	80104f6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	8b5b      	ldrh	r3, [r3, #26]
 80104e2:	f003 0302 	and.w	r3, r3, #2
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	f000 81aa 	beq.w	8010840 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 fdcb 	bl	8011088 <tcp_send_empty_ack>
 80104f2:	4603      	mov	r3, r0
 80104f4:	e1b1      	b.n	801085a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80104f6:	6879      	ldr	r1, [r7, #4]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	3304      	adds	r3, #4
 80104fc:	461a      	mov	r2, r3
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f7ff fc7e 	bl	800fe00 <tcp_route>
 8010504:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d102      	bne.n	8010512 <tcp_output+0x96>
    return ERR_RTE;
 801050c:	f06f 0303 	mvn.w	r3, #3
 8010510:	e1a3      	b.n	801085a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d003      	beq.n	8010520 <tcp_output+0xa4>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d111      	bne.n	8010544 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d002      	beq.n	801052c <tcp_output+0xb0>
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	3304      	adds	r3, #4
 801052a:	e000      	b.n	801052e <tcp_output+0xb2>
 801052c:	2300      	movs	r3, #0
 801052e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d102      	bne.n	801053c <tcp_output+0xc0>
      return ERR_RTE;
 8010536:	f06f 0303 	mvn.w	r3, #3
 801053a:	e18e      	b.n	801085a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	681a      	ldr	r2, [r3, #0]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010546:	68db      	ldr	r3, [r3, #12]
 8010548:	685b      	ldr	r3, [r3, #4]
 801054a:	4618      	mov	r0, r3
 801054c:	f7f9 ff3c 	bl	800a3c8 <lwip_htonl>
 8010550:	4602      	mov	r2, r0
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010556:	1ad3      	subs	r3, r2, r3
 8010558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801055a:	8912      	ldrh	r2, [r2, #8]
 801055c:	4413      	add	r3, r2
 801055e:	69ba      	ldr	r2, [r7, #24]
 8010560:	429a      	cmp	r2, r3
 8010562:	d227      	bcs.n	80105b4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801056a:	461a      	mov	r2, r3
 801056c:	69bb      	ldr	r3, [r7, #24]
 801056e:	4293      	cmp	r3, r2
 8010570:	d114      	bne.n	801059c <tcp_output+0x120>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010576:	2b00      	cmp	r3, #0
 8010578:	d110      	bne.n	801059c <tcp_output+0x120>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010580:	2b00      	cmp	r3, #0
 8010582:	d10b      	bne.n	801059c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2200      	movs	r2, #0
 8010588:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2201      	movs	r2, #1
 8010590:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2200      	movs	r2, #0
 8010598:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	8b5b      	ldrh	r3, [r3, #26]
 80105a0:	f003 0302 	and.w	r3, r3, #2
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	f000 814d 	beq.w	8010844 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 fd6c 	bl	8011088 <tcp_send_empty_ack>
 80105b0:	4603      	mov	r3, r0
 80105b2:	e152      	b.n	801085a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2200      	movs	r2, #0
 80105b8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80105c0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80105c2:	6a3b      	ldr	r3, [r7, #32]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	f000 811c 	beq.w	8010802 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80105ca:	e002      	b.n	80105d2 <tcp_output+0x156>
 80105cc:	6a3b      	ldr	r3, [r7, #32]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	623b      	str	r3, [r7, #32]
 80105d2:	6a3b      	ldr	r3, [r7, #32]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d1f8      	bne.n	80105cc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80105da:	e112      	b.n	8010802 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80105dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105de:	68db      	ldr	r3, [r3, #12]
 80105e0:	899b      	ldrh	r3, [r3, #12]
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7f9 fed9 	bl	800a39c <lwip_htons>
 80105ea:	4603      	mov	r3, r0
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	f003 0304 	and.w	r3, r3, #4
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d006      	beq.n	8010604 <tcp_output+0x188>
 80105f6:	4b2f      	ldr	r3, [pc, #188]	@ (80106b4 <tcp_output+0x238>)
 80105f8:	f240 5236 	movw	r2, #1334	@ 0x536
 80105fc:	4932      	ldr	r1, [pc, #200]	@ (80106c8 <tcp_output+0x24c>)
 80105fe:	482f      	ldr	r0, [pc, #188]	@ (80106bc <tcp_output+0x240>)
 8010600:	f004 f898 	bl	8014734 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010608:	2b00      	cmp	r3, #0
 801060a:	d01f      	beq.n	801064c <tcp_output+0x1d0>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	8b5b      	ldrh	r3, [r3, #26]
 8010610:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8010614:	2b00      	cmp	r3, #0
 8010616:	d119      	bne.n	801064c <tcp_output+0x1d0>
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801061c:	2b00      	cmp	r3, #0
 801061e:	d00b      	beq.n	8010638 <tcp_output+0x1bc>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d110      	bne.n	801064c <tcp_output+0x1d0>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801062e:	891a      	ldrh	r2, [r3, #8]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010634:	429a      	cmp	r2, r3
 8010636:	d209      	bcs.n	801064c <tcp_output+0x1d0>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801063e:	2b00      	cmp	r3, #0
 8010640:	d004      	beq.n	801064c <tcp_output+0x1d0>
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010648:	2b08      	cmp	r3, #8
 801064a:	d901      	bls.n	8010650 <tcp_output+0x1d4>
 801064c:	2301      	movs	r3, #1
 801064e:	e000      	b.n	8010652 <tcp_output+0x1d6>
 8010650:	2300      	movs	r3, #0
 8010652:	2b00      	cmp	r3, #0
 8010654:	d106      	bne.n	8010664 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	8b5b      	ldrh	r3, [r3, #26]
 801065a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801065e:	2b00      	cmp	r3, #0
 8010660:	f000 80e4 	beq.w	801082c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	7d1b      	ldrb	r3, [r3, #20]
 8010668:	2b02      	cmp	r3, #2
 801066a:	d00d      	beq.n	8010688 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801066c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801066e:	68db      	ldr	r3, [r3, #12]
 8010670:	899b      	ldrh	r3, [r3, #12]
 8010672:	b29c      	uxth	r4, r3
 8010674:	2010      	movs	r0, #16
 8010676:	f7f9 fe91 	bl	800a39c <lwip_htons>
 801067a:	4603      	mov	r3, r0
 801067c:	461a      	mov	r2, r3
 801067e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010680:	68db      	ldr	r3, [r3, #12]
 8010682:	4322      	orrs	r2, r4
 8010684:	b292      	uxth	r2, r2
 8010686:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010688:	697a      	ldr	r2, [r7, #20]
 801068a:	6879      	ldr	r1, [r7, #4]
 801068c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801068e:	f000 f909 	bl	80108a4 <tcp_output_segment>
 8010692:	4603      	mov	r3, r0
 8010694:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d016      	beq.n	80106cc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	8b5b      	ldrh	r3, [r3, #26]
 80106a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106a6:	b29a      	uxth	r2, r3
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	835a      	strh	r2, [r3, #26]
      return err;
 80106ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106b0:	e0d3      	b.n	801085a <tcp_output+0x3de>
 80106b2:	bf00      	nop
 80106b4:	08016c10 	.word	0x08016c10
 80106b8:	08017154 	.word	0x08017154
 80106bc:	08016c64 	.word	0x08016c64
 80106c0:	0801716c 	.word	0x0801716c
 80106c4:	2000b158 	.word	0x2000b158
 80106c8:	08017194 	.word	0x08017194
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80106cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	7d1b      	ldrb	r3, [r3, #20]
 80106d8:	2b02      	cmp	r3, #2
 80106da:	d006      	beq.n	80106ea <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	8b5b      	ldrh	r3, [r3, #26]
 80106e0:	f023 0303 	bic.w	r3, r3, #3
 80106e4:	b29a      	uxth	r2, r3
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80106ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ec:	68db      	ldr	r3, [r3, #12]
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7f9 fe69 	bl	800a3c8 <lwip_htonl>
 80106f6:	4604      	mov	r4, r0
 80106f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106fa:	891b      	ldrh	r3, [r3, #8]
 80106fc:	461d      	mov	r5, r3
 80106fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010700:	68db      	ldr	r3, [r3, #12]
 8010702:	899b      	ldrh	r3, [r3, #12]
 8010704:	b29b      	uxth	r3, r3
 8010706:	4618      	mov	r0, r3
 8010708:	f7f9 fe48 	bl	800a39c <lwip_htons>
 801070c:	4603      	mov	r3, r0
 801070e:	b2db      	uxtb	r3, r3
 8010710:	f003 0303 	and.w	r3, r3, #3
 8010714:	2b00      	cmp	r3, #0
 8010716:	d001      	beq.n	801071c <tcp_output+0x2a0>
 8010718:	2301      	movs	r3, #1
 801071a:	e000      	b.n	801071e <tcp_output+0x2a2>
 801071c:	2300      	movs	r3, #0
 801071e:	442b      	add	r3, r5
 8010720:	4423      	add	r3, r4
 8010722:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	1ad3      	subs	r3, r2, r3
 801072c:	2b00      	cmp	r3, #0
 801072e:	da02      	bge.n	8010736 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	68ba      	ldr	r2, [r7, #8]
 8010734:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010738:	891b      	ldrh	r3, [r3, #8]
 801073a:	461c      	mov	r4, r3
 801073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801073e:	68db      	ldr	r3, [r3, #12]
 8010740:	899b      	ldrh	r3, [r3, #12]
 8010742:	b29b      	uxth	r3, r3
 8010744:	4618      	mov	r0, r3
 8010746:	f7f9 fe29 	bl	800a39c <lwip_htons>
 801074a:	4603      	mov	r3, r0
 801074c:	b2db      	uxtb	r3, r3
 801074e:	f003 0303 	and.w	r3, r3, #3
 8010752:	2b00      	cmp	r3, #0
 8010754:	d001      	beq.n	801075a <tcp_output+0x2de>
 8010756:	2301      	movs	r3, #1
 8010758:	e000      	b.n	801075c <tcp_output+0x2e0>
 801075a:	2300      	movs	r3, #0
 801075c:	4423      	add	r3, r4
 801075e:	2b00      	cmp	r3, #0
 8010760:	d049      	beq.n	80107f6 <tcp_output+0x37a>
      seg->next = NULL;
 8010762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010764:	2200      	movs	r2, #0
 8010766:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801076c:	2b00      	cmp	r3, #0
 801076e:	d105      	bne.n	801077c <tcp_output+0x300>
        pcb->unacked = seg;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010774:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8010776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010778:	623b      	str	r3, [r7, #32]
 801077a:	e03f      	b.n	80107fc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801077c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	4618      	mov	r0, r3
 8010784:	f7f9 fe20 	bl	800a3c8 <lwip_htonl>
 8010788:	4604      	mov	r4, r0
 801078a:	6a3b      	ldr	r3, [r7, #32]
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	685b      	ldr	r3, [r3, #4]
 8010790:	4618      	mov	r0, r3
 8010792:	f7f9 fe19 	bl	800a3c8 <lwip_htonl>
 8010796:	4603      	mov	r3, r0
 8010798:	1ae3      	subs	r3, r4, r3
 801079a:	2b00      	cmp	r3, #0
 801079c:	da24      	bge.n	80107e8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	3370      	adds	r3, #112	@ 0x70
 80107a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80107a4:	e002      	b.n	80107ac <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80107a6:	69fb      	ldr	r3, [r7, #28]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80107ac:	69fb      	ldr	r3, [r7, #28]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d011      	beq.n	80107d8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	68db      	ldr	r3, [r3, #12]
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	4618      	mov	r0, r3
 80107be:	f7f9 fe03 	bl	800a3c8 <lwip_htonl>
 80107c2:	4604      	mov	r4, r0
 80107c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	685b      	ldr	r3, [r3, #4]
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7f9 fdfc 	bl	800a3c8 <lwip_htonl>
 80107d0:	4603      	mov	r3, r0
 80107d2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	dbe6      	blt.n	80107a6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80107d8:	69fb      	ldr	r3, [r7, #28]
 80107da:	681a      	ldr	r2, [r3, #0]
 80107dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107de:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80107e0:	69fb      	ldr	r3, [r7, #28]
 80107e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107e4:	601a      	str	r2, [r3, #0]
 80107e6:	e009      	b.n	80107fc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80107e8:	6a3b      	ldr	r3, [r7, #32]
 80107ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107ec:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80107ee:	6a3b      	ldr	r3, [r7, #32]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	623b      	str	r3, [r7, #32]
 80107f4:	e002      	b.n	80107fc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80107f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80107f8:	f7fc fc45 	bl	800d086 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010800:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8010802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010804:	2b00      	cmp	r3, #0
 8010806:	d012      	beq.n	801082e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801080a:	68db      	ldr	r3, [r3, #12]
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	4618      	mov	r0, r3
 8010810:	f7f9 fdda 	bl	800a3c8 <lwip_htonl>
 8010814:	4602      	mov	r2, r0
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801081a:	1ad3      	subs	r3, r2, r3
 801081c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801081e:	8912      	ldrh	r2, [r2, #8]
 8010820:	4413      	add	r3, r2
  while (seg != NULL &&
 8010822:	69ba      	ldr	r2, [r7, #24]
 8010824:	429a      	cmp	r2, r3
 8010826:	f4bf aed9 	bcs.w	80105dc <tcp_output+0x160>
 801082a:	e000      	b.n	801082e <tcp_output+0x3b2>
      break;
 801082c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010832:	2b00      	cmp	r3, #0
 8010834:	d108      	bne.n	8010848 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2200      	movs	r2, #0
 801083a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801083e:	e004      	b.n	801084a <tcp_output+0x3ce>
    goto output_done;
 8010840:	bf00      	nop
 8010842:	e002      	b.n	801084a <tcp_output+0x3ce>
    goto output_done;
 8010844:	bf00      	nop
 8010846:	e000      	b.n	801084a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010848:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	8b5b      	ldrh	r3, [r3, #26]
 801084e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010852:	b29a      	uxth	r2, r3
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010858:	2300      	movs	r3, #0
}
 801085a:	4618      	mov	r0, r3
 801085c:	3728      	adds	r7, #40	@ 0x28
 801085e:	46bd      	mov	sp, r7
 8010860:	bdb0      	pop	{r4, r5, r7, pc}
 8010862:	bf00      	nop

08010864 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b082      	sub	sp, #8
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d106      	bne.n	8010880 <tcp_output_segment_busy+0x1c>
 8010872:	4b09      	ldr	r3, [pc, #36]	@ (8010898 <tcp_output_segment_busy+0x34>)
 8010874:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010878:	4908      	ldr	r1, [pc, #32]	@ (801089c <tcp_output_segment_busy+0x38>)
 801087a:	4809      	ldr	r0, [pc, #36]	@ (80108a0 <tcp_output_segment_busy+0x3c>)
 801087c:	f003 ff5a 	bl	8014734 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	7b9b      	ldrb	r3, [r3, #14]
 8010886:	2b01      	cmp	r3, #1
 8010888:	d001      	beq.n	801088e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801088a:	2301      	movs	r3, #1
 801088c:	e000      	b.n	8010890 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801088e:	2300      	movs	r3, #0
}
 8010890:	4618      	mov	r0, r3
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	08016c10 	.word	0x08016c10
 801089c:	080171ac 	.word	0x080171ac
 80108a0:	08016c64 	.word	0x08016c64

080108a4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80108a4:	b5b0      	push	{r4, r5, r7, lr}
 80108a6:	b08c      	sub	sp, #48	@ 0x30
 80108a8:	af04      	add	r7, sp, #16
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	60b9      	str	r1, [r7, #8]
 80108ae:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d106      	bne.n	80108c4 <tcp_output_segment+0x20>
 80108b6:	4b64      	ldr	r3, [pc, #400]	@ (8010a48 <tcp_output_segment+0x1a4>)
 80108b8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80108bc:	4963      	ldr	r1, [pc, #396]	@ (8010a4c <tcp_output_segment+0x1a8>)
 80108be:	4864      	ldr	r0, [pc, #400]	@ (8010a50 <tcp_output_segment+0x1ac>)
 80108c0:	f003 ff38 	bl	8014734 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d106      	bne.n	80108d8 <tcp_output_segment+0x34>
 80108ca:	4b5f      	ldr	r3, [pc, #380]	@ (8010a48 <tcp_output_segment+0x1a4>)
 80108cc:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80108d0:	4960      	ldr	r1, [pc, #384]	@ (8010a54 <tcp_output_segment+0x1b0>)
 80108d2:	485f      	ldr	r0, [pc, #380]	@ (8010a50 <tcp_output_segment+0x1ac>)
 80108d4:	f003 ff2e 	bl	8014734 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d106      	bne.n	80108ec <tcp_output_segment+0x48>
 80108de:	4b5a      	ldr	r3, [pc, #360]	@ (8010a48 <tcp_output_segment+0x1a4>)
 80108e0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80108e4:	495c      	ldr	r1, [pc, #368]	@ (8010a58 <tcp_output_segment+0x1b4>)
 80108e6:	485a      	ldr	r0, [pc, #360]	@ (8010a50 <tcp_output_segment+0x1ac>)
 80108e8:	f003 ff24 	bl	8014734 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80108ec:	68f8      	ldr	r0, [r7, #12]
 80108ee:	f7ff ffb9 	bl	8010864 <tcp_output_segment_busy>
 80108f2:	4603      	mov	r3, r0
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d001      	beq.n	80108fc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80108f8:	2300      	movs	r3, #0
 80108fa:	e0a1      	b.n	8010a40 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	68dc      	ldr	r4, [r3, #12]
 8010904:	4610      	mov	r0, r2
 8010906:	f7f9 fd5f 	bl	800a3c8 <lwip_htonl>
 801090a:	4603      	mov	r3, r0
 801090c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	68dc      	ldr	r4, [r3, #12]
 8010916:	4610      	mov	r0, r2
 8010918:	f7f9 fd40 	bl	800a39c <lwip_htons>
 801091c:	4603      	mov	r3, r0
 801091e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010924:	68ba      	ldr	r2, [r7, #8]
 8010926:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010928:	441a      	add	r2, r3
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	68db      	ldr	r3, [r3, #12]
 8010932:	3314      	adds	r3, #20
 8010934:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	7a9b      	ldrb	r3, [r3, #10]
 801093a:	f003 0301 	and.w	r3, r3, #1
 801093e:	2b00      	cmp	r3, #0
 8010940:	d015      	beq.n	801096e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	3304      	adds	r3, #4
 8010946:	461a      	mov	r2, r3
 8010948:	6879      	ldr	r1, [r7, #4]
 801094a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801094e:	f7fc fe91 	bl	800d674 <tcp_eff_send_mss_netif>
 8010952:	4603      	mov	r3, r0
 8010954:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010956:	8b7b      	ldrh	r3, [r7, #26]
 8010958:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801095c:	4618      	mov	r0, r3
 801095e:	f7f9 fd33 	bl	800a3c8 <lwip_htonl>
 8010962:	4602      	mov	r2, r0
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010968:	69fb      	ldr	r3, [r7, #28]
 801096a:	3304      	adds	r3, #4
 801096c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010974:	2b00      	cmp	r3, #0
 8010976:	da02      	bge.n	801097e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	2200      	movs	r2, #0
 801097c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010982:	2b00      	cmp	r3, #0
 8010984:	d10c      	bne.n	80109a0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010986:	4b35      	ldr	r3, [pc, #212]	@ (8010a5c <tcp_output_segment+0x1b8>)
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	68db      	ldr	r3, [r3, #12]
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	4618      	mov	r0, r3
 8010996:	f7f9 fd17 	bl	800a3c8 <lwip_htonl>
 801099a:	4602      	mov	r2, r0
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	68da      	ldr	r2, [r3, #12]
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	685b      	ldr	r3, [r3, #4]
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	1ad3      	subs	r3, r2, r3
 80109ac:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	8959      	ldrh	r1, [r3, #10]
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	685b      	ldr	r3, [r3, #4]
 80109b8:	8b3a      	ldrh	r2, [r7, #24]
 80109ba:	1a8a      	subs	r2, r1, r2
 80109bc:	b292      	uxth	r2, r2
 80109be:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	8919      	ldrh	r1, [r3, #8]
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	685b      	ldr	r3, [r3, #4]
 80109ca:	8b3a      	ldrh	r2, [r7, #24]
 80109cc:	1a8a      	subs	r2, r1, r2
 80109ce:	b292      	uxth	r2, r2
 80109d0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	68fa      	ldr	r2, [r7, #12]
 80109d8:	68d2      	ldr	r2, [r2, #12]
 80109da:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	68db      	ldr	r3, [r3, #12]
 80109e0:	2200      	movs	r2, #0
 80109e2:	741a      	strb	r2, [r3, #16]
 80109e4:	2200      	movs	r2, #0
 80109e6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	68da      	ldr	r2, [r3, #12]
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	7a9b      	ldrb	r3, [r3, #10]
 80109f0:	f003 0301 	and.w	r3, r3, #1
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d001      	beq.n	80109fc <tcp_output_segment+0x158>
 80109f8:	2318      	movs	r3, #24
 80109fa:	e000      	b.n	80109fe <tcp_output_segment+0x15a>
 80109fc:	2314      	movs	r3, #20
 80109fe:	4413      	add	r3, r2
 8010a00:	69fa      	ldr	r2, [r7, #28]
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d006      	beq.n	8010a14 <tcp_output_segment+0x170>
 8010a06:	4b10      	ldr	r3, [pc, #64]	@ (8010a48 <tcp_output_segment+0x1a4>)
 8010a08:	f240 621c 	movw	r2, #1564	@ 0x61c
 8010a0c:	4914      	ldr	r1, [pc, #80]	@ (8010a60 <tcp_output_segment+0x1bc>)
 8010a0e:	4810      	ldr	r0, [pc, #64]	@ (8010a50 <tcp_output_segment+0x1ac>)
 8010a10:	f003 fe90 	bl	8014734 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	6858      	ldr	r0, [r3, #4]
 8010a18:	68b9      	ldr	r1, [r7, #8]
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	1d1c      	adds	r4, r3, #4
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	7add      	ldrb	r5, [r3, #11]
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	7a9b      	ldrb	r3, [r3, #10]
 8010a26:	687a      	ldr	r2, [r7, #4]
 8010a28:	9202      	str	r2, [sp, #8]
 8010a2a:	2206      	movs	r2, #6
 8010a2c:	9201      	str	r2, [sp, #4]
 8010a2e:	9300      	str	r3, [sp, #0]
 8010a30:	462b      	mov	r3, r5
 8010a32:	4622      	mov	r2, r4
 8010a34:	f002 fd50 	bl	80134d8 <ip4_output_if>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010a3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3720      	adds	r7, #32
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bdb0      	pop	{r4, r5, r7, pc}
 8010a48:	08016c10 	.word	0x08016c10
 8010a4c:	080171d4 	.word	0x080171d4
 8010a50:	08016c64 	.word	0x08016c64
 8010a54:	080171f4 	.word	0x080171f4
 8010a58:	08017214 	.word	0x08017214
 8010a5c:	2000b10c 	.word	0x2000b10c
 8010a60:	08017238 	.word	0x08017238

08010a64 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010a64:	b5b0      	push	{r4, r5, r7, lr}
 8010a66:	b084      	sub	sp, #16
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d106      	bne.n	8010a80 <tcp_rexmit_rto_prepare+0x1c>
 8010a72:	4b31      	ldr	r3, [pc, #196]	@ (8010b38 <tcp_rexmit_rto_prepare+0xd4>)
 8010a74:	f240 6263 	movw	r2, #1635	@ 0x663
 8010a78:	4930      	ldr	r1, [pc, #192]	@ (8010b3c <tcp_rexmit_rto_prepare+0xd8>)
 8010a7a:	4831      	ldr	r0, [pc, #196]	@ (8010b40 <tcp_rexmit_rto_prepare+0xdc>)
 8010a7c:	f003 fe5a 	bl	8014734 <iprintf>

  if (pcb->unacked == NULL) {
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d102      	bne.n	8010a8e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010a88:	f06f 0305 	mvn.w	r3, #5
 8010a8c:	e050      	b.n	8010b30 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a92:	60fb      	str	r3, [r7, #12]
 8010a94:	e00b      	b.n	8010aae <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010a96:	68f8      	ldr	r0, [r7, #12]
 8010a98:	f7ff fee4 	bl	8010864 <tcp_output_segment_busy>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d002      	beq.n	8010aa8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010aa2:	f06f 0305 	mvn.w	r3, #5
 8010aa6:	e043      	b.n	8010b30 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	60fb      	str	r3, [r7, #12]
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d1ef      	bne.n	8010a96 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010ab6:	68f8      	ldr	r0, [r7, #12]
 8010ab8:	f7ff fed4 	bl	8010864 <tcp_output_segment_busy>
 8010abc:	4603      	mov	r3, r0
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d002      	beq.n	8010ac8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010ac2:	f06f 0305 	mvn.w	r3, #5
 8010ac6:	e033      	b.n	8010b30 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2200      	movs	r2, #0
 8010adc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	8b5b      	ldrh	r3, [r3, #26]
 8010ae2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8010ae6:	b29a      	uxth	r2, r3
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	68db      	ldr	r3, [r3, #12]
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7f9 fc68 	bl	800a3c8 <lwip_htonl>
 8010af8:	4604      	mov	r4, r0
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	891b      	ldrh	r3, [r3, #8]
 8010afe:	461d      	mov	r5, r3
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	899b      	ldrh	r3, [r3, #12]
 8010b06:	b29b      	uxth	r3, r3
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7f9 fc47 	bl	800a39c <lwip_htons>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	f003 0303 	and.w	r3, r3, #3
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d001      	beq.n	8010b1e <tcp_rexmit_rto_prepare+0xba>
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	e000      	b.n	8010b20 <tcp_rexmit_rto_prepare+0xbc>
 8010b1e:	2300      	movs	r3, #0
 8010b20:	442b      	add	r3, r5
 8010b22:	18e2      	adds	r2, r4, r3
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8010b2e:	2300      	movs	r3, #0
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3710      	adds	r7, #16
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bdb0      	pop	{r4, r5, r7, pc}
 8010b38:	08016c10 	.word	0x08016c10
 8010b3c:	0801724c 	.word	0x0801724c
 8010b40:	08016c64 	.word	0x08016c64

08010b44 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d106      	bne.n	8010b60 <tcp_rexmit_rto_commit+0x1c>
 8010b52:	4b0d      	ldr	r3, [pc, #52]	@ (8010b88 <tcp_rexmit_rto_commit+0x44>)
 8010b54:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010b58:	490c      	ldr	r1, [pc, #48]	@ (8010b8c <tcp_rexmit_rto_commit+0x48>)
 8010b5a:	480d      	ldr	r0, [pc, #52]	@ (8010b90 <tcp_rexmit_rto_commit+0x4c>)
 8010b5c:	f003 fdea 	bl	8014734 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010b66:	2bff      	cmp	r3, #255	@ 0xff
 8010b68:	d007      	beq.n	8010b7a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010b70:	3301      	adds	r3, #1
 8010b72:	b2da      	uxtb	r2, r3
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f7ff fc7e 	bl	801047c <tcp_output>
}
 8010b80:	bf00      	nop
 8010b82:	3708      	adds	r7, #8
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}
 8010b88:	08016c10 	.word	0x08016c10
 8010b8c:	08017270 	.word	0x08017270
 8010b90:	08016c64 	.word	0x08016c64

08010b94 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b082      	sub	sp, #8
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d106      	bne.n	8010bb0 <tcp_rexmit_rto+0x1c>
 8010ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8010bcc <tcp_rexmit_rto+0x38>)
 8010ba4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8010ba8:	4909      	ldr	r1, [pc, #36]	@ (8010bd0 <tcp_rexmit_rto+0x3c>)
 8010baa:	480a      	ldr	r0, [pc, #40]	@ (8010bd4 <tcp_rexmit_rto+0x40>)
 8010bac:	f003 fdc2 	bl	8014734 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f7ff ff57 	bl	8010a64 <tcp_rexmit_rto_prepare>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d102      	bne.n	8010bc2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f7ff ffc1 	bl	8010b44 <tcp_rexmit_rto_commit>
  }
}
 8010bc2:	bf00      	nop
 8010bc4:	3708      	adds	r7, #8
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	bf00      	nop
 8010bcc:	08016c10 	.word	0x08016c10
 8010bd0:	08017294 	.word	0x08017294
 8010bd4:	08016c64 	.word	0x08016c64

08010bd8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010bd8:	b590      	push	{r4, r7, lr}
 8010bda:	b085      	sub	sp, #20
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d106      	bne.n	8010bf4 <tcp_rexmit+0x1c>
 8010be6:	4b2f      	ldr	r3, [pc, #188]	@ (8010ca4 <tcp_rexmit+0xcc>)
 8010be8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8010bec:	492e      	ldr	r1, [pc, #184]	@ (8010ca8 <tcp_rexmit+0xd0>)
 8010bee:	482f      	ldr	r0, [pc, #188]	@ (8010cac <tcp_rexmit+0xd4>)
 8010bf0:	f003 fda0 	bl	8014734 <iprintf>

  if (pcb->unacked == NULL) {
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d102      	bne.n	8010c02 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010bfc:	f06f 0305 	mvn.w	r3, #5
 8010c00:	e04c      	b.n	8010c9c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c06:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010c08:	68b8      	ldr	r0, [r7, #8]
 8010c0a:	f7ff fe2b 	bl	8010864 <tcp_output_segment_busy>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d002      	beq.n	8010c1a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010c14:	f06f 0305 	mvn.w	r3, #5
 8010c18:	e040      	b.n	8010c9c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	681a      	ldr	r2, [r3, #0]
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	336c      	adds	r3, #108	@ 0x6c
 8010c26:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010c28:	e002      	b.n	8010c30 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d011      	beq.n	8010c5c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	68db      	ldr	r3, [r3, #12]
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7f9 fbc1 	bl	800a3c8 <lwip_htonl>
 8010c46:	4604      	mov	r4, r0
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	685b      	ldr	r3, [r3, #4]
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7f9 fbba 	bl	800a3c8 <lwip_htonl>
 8010c54:	4603      	mov	r3, r0
 8010c56:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	dbe6      	blt.n	8010c2a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	681a      	ldr	r2, [r3, #0]
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	68ba      	ldr	r2, [r7, #8]
 8010c68:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d103      	bne.n	8010c7a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2200      	movs	r2, #0
 8010c76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010c80:	2bff      	cmp	r3, #255	@ 0xff
 8010c82:	d007      	beq.n	8010c94 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	b2da      	uxtb	r2, r3
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2200      	movs	r2, #0
 8010c98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010c9a:	2300      	movs	r3, #0
}
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	3714      	adds	r7, #20
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd90      	pop	{r4, r7, pc}
 8010ca4:	08016c10 	.word	0x08016c10
 8010ca8:	080172b0 	.word	0x080172b0
 8010cac:	08016c64 	.word	0x08016c64

08010cb0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d106      	bne.n	8010ccc <tcp_rexmit_fast+0x1c>
 8010cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8010d68 <tcp_rexmit_fast+0xb8>)
 8010cc0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8010cc4:	4929      	ldr	r1, [pc, #164]	@ (8010d6c <tcp_rexmit_fast+0xbc>)
 8010cc6:	482a      	ldr	r0, [pc, #168]	@ (8010d70 <tcp_rexmit_fast+0xc0>)
 8010cc8:	f003 fd34 	bl	8014734 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d044      	beq.n	8010d5e <tcp_rexmit_fast+0xae>
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	8b5b      	ldrh	r3, [r3, #26]
 8010cd8:	f003 0304 	and.w	r3, r3, #4
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d13e      	bne.n	8010d5e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f7ff ff79 	bl	8010bd8 <tcp_rexmit>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d138      	bne.n	8010d5e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010cf8:	4293      	cmp	r3, r2
 8010cfa:	bf28      	it	cs
 8010cfc:	4613      	movcs	r3, r2
 8010cfe:	b29b      	uxth	r3, r3
 8010d00:	0fda      	lsrs	r2, r3, #31
 8010d02:	4413      	add	r3, r2
 8010d04:	105b      	asrs	r3, r3, #1
 8010d06:	b29a      	uxth	r2, r3
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010d14:	461a      	mov	r2, r3
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d1a:	005b      	lsls	r3, r3, #1
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d206      	bcs.n	8010d2e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d24:	005b      	lsls	r3, r3, #1
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d38:	4619      	mov	r1, r3
 8010d3a:	0049      	lsls	r1, r1, #1
 8010d3c:	440b      	add	r3, r1
 8010d3e:	b29b      	uxth	r3, r3
 8010d40:	4413      	add	r3, r2
 8010d42:	b29a      	uxth	r2, r3
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	8b5b      	ldrh	r3, [r3, #26]
 8010d4e:	f043 0304 	orr.w	r3, r3, #4
 8010d52:	b29a      	uxth	r2, r3
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8010d5e:	bf00      	nop
 8010d60:	3708      	adds	r7, #8
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	08016c10 	.word	0x08016c10
 8010d6c:	080172c8 	.word	0x080172c8
 8010d70:	08016c64 	.word	0x08016c64

08010d74 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b086      	sub	sp, #24
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	60f8      	str	r0, [r7, #12]
 8010d7c:	607b      	str	r3, [r7, #4]
 8010d7e:	460b      	mov	r3, r1
 8010d80:	817b      	strh	r3, [r7, #10]
 8010d82:	4613      	mov	r3, r2
 8010d84:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010d86:	897a      	ldrh	r2, [r7, #10]
 8010d88:	893b      	ldrh	r3, [r7, #8]
 8010d8a:	4413      	add	r3, r2
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	3314      	adds	r3, #20
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010d96:	4619      	mov	r1, r3
 8010d98:	2022      	movs	r0, #34	@ 0x22
 8010d9a:	f7fa fb79 	bl	800b490 <pbuf_alloc>
 8010d9e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d04d      	beq.n	8010e42 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010da6:	897b      	ldrh	r3, [r7, #10]
 8010da8:	3313      	adds	r3, #19
 8010daa:	697a      	ldr	r2, [r7, #20]
 8010dac:	8952      	ldrh	r2, [r2, #10]
 8010dae:	4293      	cmp	r3, r2
 8010db0:	db06      	blt.n	8010dc0 <tcp_output_alloc_header_common+0x4c>
 8010db2:	4b26      	ldr	r3, [pc, #152]	@ (8010e4c <tcp_output_alloc_header_common+0xd8>)
 8010db4:	f240 7223 	movw	r2, #1827	@ 0x723
 8010db8:	4925      	ldr	r1, [pc, #148]	@ (8010e50 <tcp_output_alloc_header_common+0xdc>)
 8010dba:	4826      	ldr	r0, [pc, #152]	@ (8010e54 <tcp_output_alloc_header_common+0xe0>)
 8010dbc:	f003 fcba 	bl	8014734 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010dc6:	8c3b      	ldrh	r3, [r7, #32]
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7f9 fae7 	bl	800a39c <lwip_htons>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	461a      	mov	r2, r3
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010dd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7f9 fadf 	bl	800a39c <lwip_htons>
 8010dde:	4603      	mov	r3, r0
 8010de0:	461a      	mov	r2, r3
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010de6:	693b      	ldr	r3, [r7, #16]
 8010de8:	687a      	ldr	r2, [r7, #4]
 8010dea:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010dec:	68f8      	ldr	r0, [r7, #12]
 8010dee:	f7f9 faeb 	bl	800a3c8 <lwip_htonl>
 8010df2:	4602      	mov	r2, r0
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010df8:	897b      	ldrh	r3, [r7, #10]
 8010dfa:	089b      	lsrs	r3, r3, #2
 8010dfc:	b29b      	uxth	r3, r3
 8010dfe:	3305      	adds	r3, #5
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	031b      	lsls	r3, r3, #12
 8010e04:	b29a      	uxth	r2, r3
 8010e06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	4313      	orrs	r3, r2
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7f9 fac3 	bl	800a39c <lwip_htons>
 8010e16:	4603      	mov	r3, r0
 8010e18:	461a      	mov	r2, r3
 8010e1a:	693b      	ldr	r3, [r7, #16]
 8010e1c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010e1e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7f9 fabb 	bl	800a39c <lwip_htons>
 8010e26:	4603      	mov	r3, r0
 8010e28:	461a      	mov	r2, r3
 8010e2a:	693b      	ldr	r3, [r7, #16]
 8010e2c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	2200      	movs	r2, #0
 8010e32:	741a      	strb	r2, [r3, #16]
 8010e34:	2200      	movs	r2, #0
 8010e36:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	749a      	strb	r2, [r3, #18]
 8010e3e:	2200      	movs	r2, #0
 8010e40:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010e42:	697b      	ldr	r3, [r7, #20]
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3718      	adds	r7, #24
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	08016c10 	.word	0x08016c10
 8010e50:	080172e8 	.word	0x080172e8
 8010e54:	08016c64 	.word	0x08016c64

08010e58 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010e58:	b5b0      	push	{r4, r5, r7, lr}
 8010e5a:	b08a      	sub	sp, #40	@ 0x28
 8010e5c:	af04      	add	r7, sp, #16
 8010e5e:	60f8      	str	r0, [r7, #12]
 8010e60:	607b      	str	r3, [r7, #4]
 8010e62:	460b      	mov	r3, r1
 8010e64:	817b      	strh	r3, [r7, #10]
 8010e66:	4613      	mov	r3, r2
 8010e68:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d106      	bne.n	8010e7e <tcp_output_alloc_header+0x26>
 8010e70:	4b15      	ldr	r3, [pc, #84]	@ (8010ec8 <tcp_output_alloc_header+0x70>)
 8010e72:	f240 7242 	movw	r2, #1858	@ 0x742
 8010e76:	4915      	ldr	r1, [pc, #84]	@ (8010ecc <tcp_output_alloc_header+0x74>)
 8010e78:	4815      	ldr	r0, [pc, #84]	@ (8010ed0 <tcp_output_alloc_header+0x78>)
 8010e7a:	f003 fc5b 	bl	8014734 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	8adb      	ldrh	r3, [r3, #22]
 8010e86:	68fa      	ldr	r2, [r7, #12]
 8010e88:	8b12      	ldrh	r2, [r2, #24]
 8010e8a:	68f9      	ldr	r1, [r7, #12]
 8010e8c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8010e8e:	893d      	ldrh	r5, [r7, #8]
 8010e90:	897c      	ldrh	r4, [r7, #10]
 8010e92:	9103      	str	r1, [sp, #12]
 8010e94:	2110      	movs	r1, #16
 8010e96:	9102      	str	r1, [sp, #8]
 8010e98:	9201      	str	r2, [sp, #4]
 8010e9a:	9300      	str	r3, [sp, #0]
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	462a      	mov	r2, r5
 8010ea0:	4621      	mov	r1, r4
 8010ea2:	f7ff ff67 	bl	8010d74 <tcp_output_alloc_header_common>
 8010ea6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d006      	beq.n	8010ebc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010eb2:	68fa      	ldr	r2, [r7, #12]
 8010eb4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010eb6:	441a      	add	r2, r3
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8010ebc:	697b      	ldr	r3, [r7, #20]
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3718      	adds	r7, #24
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8010ec6:	bf00      	nop
 8010ec8:	08016c10 	.word	0x08016c10
 8010ecc:	08017318 	.word	0x08017318
 8010ed0:	08016c64 	.word	0x08016c64

08010ed4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b088      	sub	sp, #32
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	60f8      	str	r0, [r7, #12]
 8010edc:	60b9      	str	r1, [r7, #8]
 8010ede:	4611      	mov	r1, r2
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	460b      	mov	r3, r1
 8010ee4:	71fb      	strb	r3, [r7, #7]
 8010ee6:	4613      	mov	r3, r2
 8010ee8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010eea:	2300      	movs	r3, #0
 8010eec:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d106      	bne.n	8010f02 <tcp_output_fill_options+0x2e>
 8010ef4:	4b12      	ldr	r3, [pc, #72]	@ (8010f40 <tcp_output_fill_options+0x6c>)
 8010ef6:	f240 7256 	movw	r2, #1878	@ 0x756
 8010efa:	4912      	ldr	r1, [pc, #72]	@ (8010f44 <tcp_output_fill_options+0x70>)
 8010efc:	4812      	ldr	r0, [pc, #72]	@ (8010f48 <tcp_output_fill_options+0x74>)
 8010efe:	f003 fc19 	bl	8014734 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	3314      	adds	r3, #20
 8010f0c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010f0e:	8bfb      	ldrh	r3, [r7, #30]
 8010f10:	009b      	lsls	r3, r3, #2
 8010f12:	461a      	mov	r2, r3
 8010f14:	79fb      	ldrb	r3, [r7, #7]
 8010f16:	009b      	lsls	r3, r3, #2
 8010f18:	f003 0304 	and.w	r3, r3, #4
 8010f1c:	4413      	add	r3, r2
 8010f1e:	3314      	adds	r3, #20
 8010f20:	69ba      	ldr	r2, [r7, #24]
 8010f22:	4413      	add	r3, r2
 8010f24:	697a      	ldr	r2, [r7, #20]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d006      	beq.n	8010f38 <tcp_output_fill_options+0x64>
 8010f2a:	4b05      	ldr	r3, [pc, #20]	@ (8010f40 <tcp_output_fill_options+0x6c>)
 8010f2c:	f240 7275 	movw	r2, #1909	@ 0x775
 8010f30:	4906      	ldr	r1, [pc, #24]	@ (8010f4c <tcp_output_fill_options+0x78>)
 8010f32:	4805      	ldr	r0, [pc, #20]	@ (8010f48 <tcp_output_fill_options+0x74>)
 8010f34:	f003 fbfe 	bl	8014734 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010f38:	bf00      	nop
 8010f3a:	3720      	adds	r7, #32
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	08016c10 	.word	0x08016c10
 8010f44:	08017340 	.word	0x08017340
 8010f48:	08016c64 	.word	0x08016c64
 8010f4c:	08017238 	.word	0x08017238

08010f50 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b08a      	sub	sp, #40	@ 0x28
 8010f54:	af04      	add	r7, sp, #16
 8010f56:	60f8      	str	r0, [r7, #12]
 8010f58:	60b9      	str	r1, [r7, #8]
 8010f5a:	607a      	str	r2, [r7, #4]
 8010f5c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d106      	bne.n	8010f72 <tcp_output_control_segment+0x22>
 8010f64:	4b1c      	ldr	r3, [pc, #112]	@ (8010fd8 <tcp_output_control_segment+0x88>)
 8010f66:	f240 7287 	movw	r2, #1927	@ 0x787
 8010f6a:	491c      	ldr	r1, [pc, #112]	@ (8010fdc <tcp_output_control_segment+0x8c>)
 8010f6c:	481c      	ldr	r0, [pc, #112]	@ (8010fe0 <tcp_output_control_segment+0x90>)
 8010f6e:	f003 fbe1 	bl	8014734 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010f72:	683a      	ldr	r2, [r7, #0]
 8010f74:	6879      	ldr	r1, [r7, #4]
 8010f76:	68f8      	ldr	r0, [r7, #12]
 8010f78:	f7fe ff42 	bl	800fe00 <tcp_route>
 8010f7c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d102      	bne.n	8010f8a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010f84:	23fc      	movs	r3, #252	@ 0xfc
 8010f86:	75fb      	strb	r3, [r7, #23]
 8010f88:	e01c      	b.n	8010fc4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d006      	beq.n	8010f9e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	7adb      	ldrb	r3, [r3, #11]
 8010f94:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	7a9b      	ldrb	r3, [r3, #10]
 8010f9a:	757b      	strb	r3, [r7, #21]
 8010f9c:	e003      	b.n	8010fa6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010f9e:	23ff      	movs	r3, #255	@ 0xff
 8010fa0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010fa6:	7dba      	ldrb	r2, [r7, #22]
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	9302      	str	r3, [sp, #8]
 8010fac:	2306      	movs	r3, #6
 8010fae:	9301      	str	r3, [sp, #4]
 8010fb0:	7d7b      	ldrb	r3, [r7, #21]
 8010fb2:	9300      	str	r3, [sp, #0]
 8010fb4:	4613      	mov	r3, r2
 8010fb6:	683a      	ldr	r2, [r7, #0]
 8010fb8:	6879      	ldr	r1, [r7, #4]
 8010fba:	68b8      	ldr	r0, [r7, #8]
 8010fbc:	f002 fa8c 	bl	80134d8 <ip4_output_if>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010fc4:	68b8      	ldr	r0, [r7, #8]
 8010fc6:	f7fa fd47 	bl	800ba58 <pbuf_free>
  return err;
 8010fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3718      	adds	r7, #24
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	08016c10 	.word	0x08016c10
 8010fdc:	08017368 	.word	0x08017368
 8010fe0:	08016c64 	.word	0x08016c64

08010fe4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010fe4:	b590      	push	{r4, r7, lr}
 8010fe6:	b08b      	sub	sp, #44	@ 0x2c
 8010fe8:	af04      	add	r7, sp, #16
 8010fea:	60f8      	str	r0, [r7, #12]
 8010fec:	60b9      	str	r1, [r7, #8]
 8010fee:	607a      	str	r2, [r7, #4]
 8010ff0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d106      	bne.n	8011006 <tcp_rst+0x22>
 8010ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8011078 <tcp_rst+0x94>)
 8010ffa:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8010ffe:	491f      	ldr	r1, [pc, #124]	@ (801107c <tcp_rst+0x98>)
 8011000:	481f      	ldr	r0, [pc, #124]	@ (8011080 <tcp_rst+0x9c>)
 8011002:	f003 fb97 	bl	8014734 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011008:	2b00      	cmp	r3, #0
 801100a:	d106      	bne.n	801101a <tcp_rst+0x36>
 801100c:	4b1a      	ldr	r3, [pc, #104]	@ (8011078 <tcp_rst+0x94>)
 801100e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8011012:	491c      	ldr	r1, [pc, #112]	@ (8011084 <tcp_rst+0xa0>)
 8011014:	481a      	ldr	r0, [pc, #104]	@ (8011080 <tcp_rst+0x9c>)
 8011016:	f003 fb8d 	bl	8014734 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801101a:	2300      	movs	r3, #0
 801101c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801101e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8011022:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011024:	7dfb      	ldrb	r3, [r7, #23]
 8011026:	b29c      	uxth	r4, r3
 8011028:	68b8      	ldr	r0, [r7, #8]
 801102a:	f7f9 f9cd 	bl	800a3c8 <lwip_htonl>
 801102e:	4602      	mov	r2, r0
 8011030:	8abb      	ldrh	r3, [r7, #20]
 8011032:	9303      	str	r3, [sp, #12]
 8011034:	2314      	movs	r3, #20
 8011036:	9302      	str	r3, [sp, #8]
 8011038:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801103a:	9301      	str	r3, [sp, #4]
 801103c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801103e:	9300      	str	r3, [sp, #0]
 8011040:	4613      	mov	r3, r2
 8011042:	2200      	movs	r2, #0
 8011044:	4621      	mov	r1, r4
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f7ff fe94 	bl	8010d74 <tcp_output_alloc_header_common>
 801104c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d00c      	beq.n	801106e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011054:	7dfb      	ldrb	r3, [r7, #23]
 8011056:	2200      	movs	r2, #0
 8011058:	6939      	ldr	r1, [r7, #16]
 801105a:	68f8      	ldr	r0, [r7, #12]
 801105c:	f7ff ff3a 	bl	8010ed4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011062:	683a      	ldr	r2, [r7, #0]
 8011064:	6939      	ldr	r1, [r7, #16]
 8011066:	68f8      	ldr	r0, [r7, #12]
 8011068:	f7ff ff72 	bl	8010f50 <tcp_output_control_segment>
 801106c:	e000      	b.n	8011070 <tcp_rst+0x8c>
    return;
 801106e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011070:	371c      	adds	r7, #28
 8011072:	46bd      	mov	sp, r7
 8011074:	bd90      	pop	{r4, r7, pc}
 8011076:	bf00      	nop
 8011078:	08016c10 	.word	0x08016c10
 801107c:	08017394 	.word	0x08017394
 8011080:	08016c64 	.word	0x08016c64
 8011084:	080173b0 	.word	0x080173b0

08011088 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011088:	b590      	push	{r4, r7, lr}
 801108a:	b087      	sub	sp, #28
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011090:	2300      	movs	r3, #0
 8011092:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011094:	2300      	movs	r3, #0
 8011096:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d106      	bne.n	80110ac <tcp_send_empty_ack+0x24>
 801109e:	4b28      	ldr	r3, [pc, #160]	@ (8011140 <tcp_send_empty_ack+0xb8>)
 80110a0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80110a4:	4927      	ldr	r1, [pc, #156]	@ (8011144 <tcp_send_empty_ack+0xbc>)
 80110a6:	4828      	ldr	r0, [pc, #160]	@ (8011148 <tcp_send_empty_ack+0xc0>)
 80110a8:	f003 fb44 	bl	8014734 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80110ac:	7dfb      	ldrb	r3, [r7, #23]
 80110ae:	009b      	lsls	r3, r3, #2
 80110b0:	b2db      	uxtb	r3, r3
 80110b2:	f003 0304 	and.w	r3, r3, #4
 80110b6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80110b8:	7d7b      	ldrb	r3, [r7, #21]
 80110ba:	b29c      	uxth	r4, r3
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7f9 f981 	bl	800a3c8 <lwip_htonl>
 80110c6:	4603      	mov	r3, r0
 80110c8:	2200      	movs	r2, #0
 80110ca:	4621      	mov	r1, r4
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f7ff fec3 	bl	8010e58 <tcp_output_alloc_header>
 80110d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d109      	bne.n	80110ee <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	8b5b      	ldrh	r3, [r3, #26]
 80110de:	f043 0303 	orr.w	r3, r3, #3
 80110e2:	b29a      	uxth	r2, r3
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80110e8:	f06f 0301 	mvn.w	r3, #1
 80110ec:	e023      	b.n	8011136 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80110ee:	7dbb      	ldrb	r3, [r7, #22]
 80110f0:	7dfa      	ldrb	r2, [r7, #23]
 80110f2:	6939      	ldr	r1, [r7, #16]
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7ff feed 	bl	8010ed4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80110fa:	687a      	ldr	r2, [r7, #4]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	3304      	adds	r3, #4
 8011100:	6939      	ldr	r1, [r7, #16]
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f7ff ff24 	bl	8010f50 <tcp_output_control_segment>
 8011108:	4603      	mov	r3, r0
 801110a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801110c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d007      	beq.n	8011124 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	8b5b      	ldrh	r3, [r3, #26]
 8011118:	f043 0303 	orr.w	r3, r3, #3
 801111c:	b29a      	uxth	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	835a      	strh	r2, [r3, #26]
 8011122:	e006      	b.n	8011132 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	8b5b      	ldrh	r3, [r3, #26]
 8011128:	f023 0303 	bic.w	r3, r3, #3
 801112c:	b29a      	uxth	r2, r3
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011132:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011136:	4618      	mov	r0, r3
 8011138:	371c      	adds	r7, #28
 801113a:	46bd      	mov	sp, r7
 801113c:	bd90      	pop	{r4, r7, pc}
 801113e:	bf00      	nop
 8011140:	08016c10 	.word	0x08016c10
 8011144:	080173cc 	.word	0x080173cc
 8011148:	08016c64 	.word	0x08016c64

0801114c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801114c:	b590      	push	{r4, r7, lr}
 801114e:	b087      	sub	sp, #28
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011154:	2300      	movs	r3, #0
 8011156:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d106      	bne.n	801116c <tcp_keepalive+0x20>
 801115e:	4b18      	ldr	r3, [pc, #96]	@ (80111c0 <tcp_keepalive+0x74>)
 8011160:	f640 0224 	movw	r2, #2084	@ 0x824
 8011164:	4917      	ldr	r1, [pc, #92]	@ (80111c4 <tcp_keepalive+0x78>)
 8011166:	4818      	ldr	r0, [pc, #96]	@ (80111c8 <tcp_keepalive+0x7c>)
 8011168:	f003 fae4 	bl	8014734 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801116c:	7dfb      	ldrb	r3, [r7, #23]
 801116e:	b29c      	uxth	r4, r3
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011174:	3b01      	subs	r3, #1
 8011176:	4618      	mov	r0, r3
 8011178:	f7f9 f926 	bl	800a3c8 <lwip_htonl>
 801117c:	4603      	mov	r3, r0
 801117e:	2200      	movs	r2, #0
 8011180:	4621      	mov	r1, r4
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f7ff fe68 	bl	8010e58 <tcp_output_alloc_header>
 8011188:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d102      	bne.n	8011196 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011190:	f04f 33ff 	mov.w	r3, #4294967295
 8011194:	e010      	b.n	80111b8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011196:	7dfb      	ldrb	r3, [r7, #23]
 8011198:	2200      	movs	r2, #0
 801119a:	6939      	ldr	r1, [r7, #16]
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f7ff fe99 	bl	8010ed4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80111a2:	687a      	ldr	r2, [r7, #4]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	3304      	adds	r3, #4
 80111a8:	6939      	ldr	r1, [r7, #16]
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f7ff fed0 	bl	8010f50 <tcp_output_control_segment>
 80111b0:	4603      	mov	r3, r0
 80111b2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80111b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80111b8:	4618      	mov	r0, r3
 80111ba:	371c      	adds	r7, #28
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd90      	pop	{r4, r7, pc}
 80111c0:	08016c10 	.word	0x08016c10
 80111c4:	080173ec 	.word	0x080173ec
 80111c8:	08016c64 	.word	0x08016c64

080111cc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80111cc:	b590      	push	{r4, r7, lr}
 80111ce:	b08b      	sub	sp, #44	@ 0x2c
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80111d4:	2300      	movs	r3, #0
 80111d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d106      	bne.n	80111ee <tcp_zero_window_probe+0x22>
 80111e0:	4b4c      	ldr	r3, [pc, #304]	@ (8011314 <tcp_zero_window_probe+0x148>)
 80111e2:	f640 024f 	movw	r2, #2127	@ 0x84f
 80111e6:	494c      	ldr	r1, [pc, #304]	@ (8011318 <tcp_zero_window_probe+0x14c>)
 80111e8:	484c      	ldr	r0, [pc, #304]	@ (801131c <tcp_zero_window_probe+0x150>)
 80111ea:	f003 faa3 	bl	8014734 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111f2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80111f4:	6a3b      	ldr	r3, [r7, #32]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d101      	bne.n	80111fe <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80111fa:	2300      	movs	r3, #0
 80111fc:	e086      	b.n	801130c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011204:	2bff      	cmp	r3, #255	@ 0xff
 8011206:	d007      	beq.n	8011218 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801120e:	3301      	adds	r3, #1
 8011210:	b2da      	uxtb	r2, r3
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011218:	6a3b      	ldr	r3, [r7, #32]
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	899b      	ldrh	r3, [r3, #12]
 801121e:	b29b      	uxth	r3, r3
 8011220:	4618      	mov	r0, r3
 8011222:	f7f9 f8bb 	bl	800a39c <lwip_htons>
 8011226:	4603      	mov	r3, r0
 8011228:	b2db      	uxtb	r3, r3
 801122a:	f003 0301 	and.w	r3, r3, #1
 801122e:	2b00      	cmp	r3, #0
 8011230:	d005      	beq.n	801123e <tcp_zero_window_probe+0x72>
 8011232:	6a3b      	ldr	r3, [r7, #32]
 8011234:	891b      	ldrh	r3, [r3, #8]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d101      	bne.n	801123e <tcp_zero_window_probe+0x72>
 801123a:	2301      	movs	r3, #1
 801123c:	e000      	b.n	8011240 <tcp_zero_window_probe+0x74>
 801123e:	2300      	movs	r3, #0
 8011240:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011242:	7ffb      	ldrb	r3, [r7, #31]
 8011244:	2b00      	cmp	r3, #0
 8011246:	bf0c      	ite	eq
 8011248:	2301      	moveq	r3, #1
 801124a:	2300      	movne	r3, #0
 801124c:	b2db      	uxtb	r3, r3
 801124e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011254:	b299      	uxth	r1, r3
 8011256:	6a3b      	ldr	r3, [r7, #32]
 8011258:	68db      	ldr	r3, [r3, #12]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	8bba      	ldrh	r2, [r7, #28]
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f7ff fdfa 	bl	8010e58 <tcp_output_alloc_header>
 8011264:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011266:	69bb      	ldr	r3, [r7, #24]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d102      	bne.n	8011272 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801126c:	f04f 33ff 	mov.w	r3, #4294967295
 8011270:	e04c      	b.n	801130c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011272:	69bb      	ldr	r3, [r7, #24]
 8011274:	685b      	ldr	r3, [r3, #4]
 8011276:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011278:	7ffb      	ldrb	r3, [r7, #31]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d011      	beq.n	80112a2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	899b      	ldrh	r3, [r3, #12]
 8011282:	b29b      	uxth	r3, r3
 8011284:	b21b      	sxth	r3, r3
 8011286:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801128a:	b21c      	sxth	r4, r3
 801128c:	2011      	movs	r0, #17
 801128e:	f7f9 f885 	bl	800a39c <lwip_htons>
 8011292:	4603      	mov	r3, r0
 8011294:	b21b      	sxth	r3, r3
 8011296:	4323      	orrs	r3, r4
 8011298:	b21b      	sxth	r3, r3
 801129a:	b29a      	uxth	r2, r3
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	819a      	strh	r2, [r3, #12]
 80112a0:	e010      	b.n	80112c4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80112a2:	69bb      	ldr	r3, [r7, #24]
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	3314      	adds	r3, #20
 80112a8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80112aa:	6a3b      	ldr	r3, [r7, #32]
 80112ac:	6858      	ldr	r0, [r3, #4]
 80112ae:	6a3b      	ldr	r3, [r7, #32]
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	891a      	ldrh	r2, [r3, #8]
 80112b4:	6a3b      	ldr	r3, [r7, #32]
 80112b6:	891b      	ldrh	r3, [r3, #8]
 80112b8:	1ad3      	subs	r3, r2, r3
 80112ba:	b29b      	uxth	r3, r3
 80112bc:	2201      	movs	r2, #1
 80112be:	6939      	ldr	r1, [r7, #16]
 80112c0:	f7fa fdc4 	bl	800be4c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80112c4:	6a3b      	ldr	r3, [r7, #32]
 80112c6:	68db      	ldr	r3, [r3, #12]
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7f9 f87c 	bl	800a3c8 <lwip_htonl>
 80112d0:	4603      	mov	r3, r0
 80112d2:	3301      	adds	r3, #1
 80112d4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	1ad3      	subs	r3, r2, r3
 80112de:	2b00      	cmp	r3, #0
 80112e0:	da02      	bge.n	80112e8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	68fa      	ldr	r2, [r7, #12]
 80112e6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80112e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80112ec:	2200      	movs	r2, #0
 80112ee:	69b9      	ldr	r1, [r7, #24]
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f7ff fdef 	bl	8010ed4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	3304      	adds	r3, #4
 80112fc:	69b9      	ldr	r1, [r7, #24]
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f7ff fe26 	bl	8010f50 <tcp_output_control_segment>
 8011304:	4603      	mov	r3, r0
 8011306:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011308:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801130c:	4618      	mov	r0, r3
 801130e:	372c      	adds	r7, #44	@ 0x2c
 8011310:	46bd      	mov	sp, r7
 8011312:	bd90      	pop	{r4, r7, pc}
 8011314:	08016c10 	.word	0x08016c10
 8011318:	08017408 	.word	0x08017408
 801131c:	08016c64 	.word	0x08016c64

08011320 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011328:	f7fa ff10 	bl	800c14c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801132c:	4b0a      	ldr	r3, [pc, #40]	@ (8011358 <tcpip_tcp_timer+0x38>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d103      	bne.n	801133c <tcpip_tcp_timer+0x1c>
 8011334:	4b09      	ldr	r3, [pc, #36]	@ (801135c <tcpip_tcp_timer+0x3c>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d005      	beq.n	8011348 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801133c:	2200      	movs	r2, #0
 801133e:	4908      	ldr	r1, [pc, #32]	@ (8011360 <tcpip_tcp_timer+0x40>)
 8011340:	20fa      	movs	r0, #250	@ 0xfa
 8011342:	f000 f8f3 	bl	801152c <sys_timeout>
 8011346:	e003      	b.n	8011350 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011348:	4b06      	ldr	r3, [pc, #24]	@ (8011364 <tcpip_tcp_timer+0x44>)
 801134a:	2200      	movs	r2, #0
 801134c:	601a      	str	r2, [r3, #0]
  }
}
 801134e:	bf00      	nop
 8011350:	bf00      	nop
 8011352:	3708      	adds	r7, #8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}
 8011358:	2000b118 	.word	0x2000b118
 801135c:	2000b11c 	.word	0x2000b11c
 8011360:	08011321 	.word	0x08011321
 8011364:	2000b164 	.word	0x2000b164

08011368 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801136c:	4b0a      	ldr	r3, [pc, #40]	@ (8011398 <tcp_timer_needed+0x30>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d10f      	bne.n	8011394 <tcp_timer_needed+0x2c>
 8011374:	4b09      	ldr	r3, [pc, #36]	@ (801139c <tcp_timer_needed+0x34>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d103      	bne.n	8011384 <tcp_timer_needed+0x1c>
 801137c:	4b08      	ldr	r3, [pc, #32]	@ (80113a0 <tcp_timer_needed+0x38>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d007      	beq.n	8011394 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011384:	4b04      	ldr	r3, [pc, #16]	@ (8011398 <tcp_timer_needed+0x30>)
 8011386:	2201      	movs	r2, #1
 8011388:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801138a:	2200      	movs	r2, #0
 801138c:	4905      	ldr	r1, [pc, #20]	@ (80113a4 <tcp_timer_needed+0x3c>)
 801138e:	20fa      	movs	r0, #250	@ 0xfa
 8011390:	f000 f8cc 	bl	801152c <sys_timeout>
  }
}
 8011394:	bf00      	nop
 8011396:	bd80      	pop	{r7, pc}
 8011398:	2000b164 	.word	0x2000b164
 801139c:	2000b118 	.word	0x2000b118
 80113a0:	2000b11c 	.word	0x2000b11c
 80113a4:	08011321 	.word	0x08011321

080113a8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b086      	sub	sp, #24
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	60f8      	str	r0, [r7, #12]
 80113b0:	60b9      	str	r1, [r7, #8]
 80113b2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80113b4:	2006      	movs	r0, #6
 80113b6:	f7f9 fc69 	bl	800ac8c <memp_malloc>
 80113ba:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80113bc:	693b      	ldr	r3, [r7, #16]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d109      	bne.n	80113d6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d151      	bne.n	801146c <sys_timeout_abs+0xc4>
 80113c8:	4b2a      	ldr	r3, [pc, #168]	@ (8011474 <sys_timeout_abs+0xcc>)
 80113ca:	22be      	movs	r2, #190	@ 0xbe
 80113cc:	492a      	ldr	r1, [pc, #168]	@ (8011478 <sys_timeout_abs+0xd0>)
 80113ce:	482b      	ldr	r0, [pc, #172]	@ (801147c <sys_timeout_abs+0xd4>)
 80113d0:	f003 f9b0 	bl	8014734 <iprintf>
    return;
 80113d4:	e04a      	b.n	801146c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	2200      	movs	r2, #0
 80113da:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	68ba      	ldr	r2, [r7, #8]
 80113e0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	68fa      	ldr	r2, [r7, #12]
 80113ec:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80113ee:	4b24      	ldr	r3, [pc, #144]	@ (8011480 <sys_timeout_abs+0xd8>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d103      	bne.n	80113fe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80113f6:	4a22      	ldr	r2, [pc, #136]	@ (8011480 <sys_timeout_abs+0xd8>)
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	6013      	str	r3, [r2, #0]
    return;
 80113fc:	e037      	b.n	801146e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	685a      	ldr	r2, [r3, #4]
 8011402:	4b1f      	ldr	r3, [pc, #124]	@ (8011480 <sys_timeout_abs+0xd8>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	685b      	ldr	r3, [r3, #4]
 8011408:	1ad3      	subs	r3, r2, r3
 801140a:	0fdb      	lsrs	r3, r3, #31
 801140c:	f003 0301 	and.w	r3, r3, #1
 8011410:	b2db      	uxtb	r3, r3
 8011412:	2b00      	cmp	r3, #0
 8011414:	d007      	beq.n	8011426 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011416:	4b1a      	ldr	r3, [pc, #104]	@ (8011480 <sys_timeout_abs+0xd8>)
 8011418:	681a      	ldr	r2, [r3, #0]
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801141e:	4a18      	ldr	r2, [pc, #96]	@ (8011480 <sys_timeout_abs+0xd8>)
 8011420:	693b      	ldr	r3, [r7, #16]
 8011422:	6013      	str	r3, [r2, #0]
 8011424:	e023      	b.n	801146e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011426:	4b16      	ldr	r3, [pc, #88]	@ (8011480 <sys_timeout_abs+0xd8>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	617b      	str	r3, [r7, #20]
 801142c:	e01a      	b.n	8011464 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d00b      	beq.n	801144e <sys_timeout_abs+0xa6>
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	685a      	ldr	r2, [r3, #4]
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	685b      	ldr	r3, [r3, #4]
 8011440:	1ad3      	subs	r3, r2, r3
 8011442:	0fdb      	lsrs	r3, r3, #31
 8011444:	f003 0301 	and.w	r3, r3, #1
 8011448:	b2db      	uxtb	r3, r3
 801144a:	2b00      	cmp	r3, #0
 801144c:	d007      	beq.n	801145e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	681a      	ldr	r2, [r3, #0]
 8011452:	693b      	ldr	r3, [r7, #16]
 8011454:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	693a      	ldr	r2, [r7, #16]
 801145a:	601a      	str	r2, [r3, #0]
        break;
 801145c:	e007      	b.n	801146e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	617b      	str	r3, [r7, #20]
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d1e1      	bne.n	801142e <sys_timeout_abs+0x86>
 801146a:	e000      	b.n	801146e <sys_timeout_abs+0xc6>
    return;
 801146c:	bf00      	nop
      }
    }
  }
}
 801146e:	3718      	adds	r7, #24
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}
 8011474:	0801742c 	.word	0x0801742c
 8011478:	08017460 	.word	0x08017460
 801147c:	080174a0 	.word	0x080174a0
 8011480:	2000b15c 	.word	0x2000b15c

08011484 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b086      	sub	sp, #24
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	4798      	blx	r3

  now = sys_now();
 8011496:	f7f8 fd89 	bl	8009fac <sys_now>
 801149a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	4b0f      	ldr	r3, [pc, #60]	@ (80114e0 <lwip_cyclic_timer+0x5c>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	4413      	add	r3, r2
 80114a6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80114a8:	68fa      	ldr	r2, [r7, #12]
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	1ad3      	subs	r3, r2, r3
 80114ae:	0fdb      	lsrs	r3, r3, #31
 80114b0:	f003 0301 	and.w	r3, r3, #1
 80114b4:	b2db      	uxtb	r3, r3
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d009      	beq.n	80114ce <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	681a      	ldr	r2, [r3, #0]
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	4413      	add	r3, r2
 80114c2:	687a      	ldr	r2, [r7, #4]
 80114c4:	4907      	ldr	r1, [pc, #28]	@ (80114e4 <lwip_cyclic_timer+0x60>)
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7ff ff6e 	bl	80113a8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80114cc:	e004      	b.n	80114d8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80114ce:	687a      	ldr	r2, [r7, #4]
 80114d0:	4904      	ldr	r1, [pc, #16]	@ (80114e4 <lwip_cyclic_timer+0x60>)
 80114d2:	68f8      	ldr	r0, [r7, #12]
 80114d4:	f7ff ff68 	bl	80113a8 <sys_timeout_abs>
}
 80114d8:	bf00      	nop
 80114da:	3718      	adds	r7, #24
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}
 80114e0:	2000b160 	.word	0x2000b160
 80114e4:	08011485 	.word	0x08011485

080114e8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b082      	sub	sp, #8
 80114ec:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80114ee:	2301      	movs	r3, #1
 80114f0:	607b      	str	r3, [r7, #4]
 80114f2:	e00e      	b.n	8011512 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80114f4:	4a0b      	ldr	r2, [pc, #44]	@ (8011524 <sys_timeouts_init+0x3c>)
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	00db      	lsls	r3, r3, #3
 8011500:	4a08      	ldr	r2, [pc, #32]	@ (8011524 <sys_timeouts_init+0x3c>)
 8011502:	4413      	add	r3, r2
 8011504:	461a      	mov	r2, r3
 8011506:	4908      	ldr	r1, [pc, #32]	@ (8011528 <sys_timeouts_init+0x40>)
 8011508:	f000 f810 	bl	801152c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	3301      	adds	r3, #1
 8011510:	607b      	str	r3, [r7, #4]
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2b02      	cmp	r3, #2
 8011516:	d9ed      	bls.n	80114f4 <sys_timeouts_init+0xc>
  }
}
 8011518:	bf00      	nop
 801151a:	bf00      	nop
 801151c:	3708      	adds	r7, #8
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}
 8011522:	bf00      	nop
 8011524:	08018020 	.word	0x08018020
 8011528:	08011485 	.word	0x08011485

0801152c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b086      	sub	sp, #24
 8011530:	af00      	add	r7, sp, #0
 8011532:	60f8      	str	r0, [r7, #12]
 8011534:	60b9      	str	r1, [r7, #8]
 8011536:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801153e:	d306      	bcc.n	801154e <sys_timeout+0x22>
 8011540:	4b0a      	ldr	r3, [pc, #40]	@ (801156c <sys_timeout+0x40>)
 8011542:	f240 1229 	movw	r2, #297	@ 0x129
 8011546:	490a      	ldr	r1, [pc, #40]	@ (8011570 <sys_timeout+0x44>)
 8011548:	480a      	ldr	r0, [pc, #40]	@ (8011574 <sys_timeout+0x48>)
 801154a:	f003 f8f3 	bl	8014734 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801154e:	f7f8 fd2d 	bl	8009fac <sys_now>
 8011552:	4602      	mov	r2, r0
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	4413      	add	r3, r2
 8011558:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801155a:	687a      	ldr	r2, [r7, #4]
 801155c:	68b9      	ldr	r1, [r7, #8]
 801155e:	6978      	ldr	r0, [r7, #20]
 8011560:	f7ff ff22 	bl	80113a8 <sys_timeout_abs>
#endif
}
 8011564:	bf00      	nop
 8011566:	3718      	adds	r7, #24
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}
 801156c:	0801742c 	.word	0x0801742c
 8011570:	080174c8 	.word	0x080174c8
 8011574:	080174a0 	.word	0x080174a0

08011578 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b084      	sub	sp, #16
 801157c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801157e:	f7f8 fd15 	bl	8009fac <sys_now>
 8011582:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8011584:	4b1a      	ldr	r3, [pc, #104]	@ (80115f0 <sys_check_timeouts+0x78>)
 8011586:	781b      	ldrb	r3, [r3, #0]
 8011588:	b2db      	uxtb	r3, r3
 801158a:	2b00      	cmp	r3, #0
 801158c:	d001      	beq.n	8011592 <sys_check_timeouts+0x1a>
 801158e:	f7f9 ff29 	bl	800b3e4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8011592:	4b18      	ldr	r3, [pc, #96]	@ (80115f4 <sys_check_timeouts+0x7c>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d022      	beq.n	80115e4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	68fa      	ldr	r2, [r7, #12]
 80115a4:	1ad3      	subs	r3, r2, r3
 80115a6:	0fdb      	lsrs	r3, r3, #31
 80115a8:	f003 0301 	and.w	r3, r3, #1
 80115ac:	b2db      	uxtb	r3, r3
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d11a      	bne.n	80115e8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	4a0f      	ldr	r2, [pc, #60]	@ (80115f4 <sys_check_timeouts+0x7c>)
 80115b8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	689b      	ldr	r3, [r3, #8]
 80115be:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	685b      	ldr	r3, [r3, #4]
 80115ca:	4a0b      	ldr	r2, [pc, #44]	@ (80115f8 <sys_check_timeouts+0x80>)
 80115cc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80115ce:	68b9      	ldr	r1, [r7, #8]
 80115d0:	2006      	movs	r0, #6
 80115d2:	f7f9 fbcb 	bl	800ad6c <memp_free>
    if (handler != NULL) {
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d0d3      	beq.n	8011584 <sys_check_timeouts+0xc>
      handler(arg);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	6838      	ldr	r0, [r7, #0]
 80115e0:	4798      	blx	r3
  do {
 80115e2:	e7cf      	b.n	8011584 <sys_check_timeouts+0xc>
      return;
 80115e4:	bf00      	nop
 80115e6:	e000      	b.n	80115ea <sys_check_timeouts+0x72>
      return;
 80115e8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80115ea:	3710      	adds	r7, #16
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}
 80115f0:	2000b109 	.word	0x2000b109
 80115f4:	2000b15c 	.word	0x2000b15c
 80115f8:	2000b160 	.word	0x2000b160

080115fc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011600:	f002 ff98 	bl	8014534 <rand>
 8011604:	4603      	mov	r3, r0
 8011606:	b29b      	uxth	r3, r3
 8011608:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801160c:	b29b      	uxth	r3, r3
 801160e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011612:	b29a      	uxth	r2, r3
 8011614:	4b01      	ldr	r3, [pc, #4]	@ (801161c <udp_init+0x20>)
 8011616:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011618:	bf00      	nop
 801161a:	bd80      	pop	{r7, pc}
 801161c:	20000090 	.word	0x20000090

08011620 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011620:	b480      	push	{r7}
 8011622:	b083      	sub	sp, #12
 8011624:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011626:	2300      	movs	r3, #0
 8011628:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801162a:	4b17      	ldr	r3, [pc, #92]	@ (8011688 <udp_new_port+0x68>)
 801162c:	881b      	ldrh	r3, [r3, #0]
 801162e:	1c5a      	adds	r2, r3, #1
 8011630:	b291      	uxth	r1, r2
 8011632:	4a15      	ldr	r2, [pc, #84]	@ (8011688 <udp_new_port+0x68>)
 8011634:	8011      	strh	r1, [r2, #0]
 8011636:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801163a:	4293      	cmp	r3, r2
 801163c:	d103      	bne.n	8011646 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801163e:	4b12      	ldr	r3, [pc, #72]	@ (8011688 <udp_new_port+0x68>)
 8011640:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8011644:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011646:	4b11      	ldr	r3, [pc, #68]	@ (801168c <udp_new_port+0x6c>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	603b      	str	r3, [r7, #0]
 801164c:	e011      	b.n	8011672 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	8a5a      	ldrh	r2, [r3, #18]
 8011652:	4b0d      	ldr	r3, [pc, #52]	@ (8011688 <udp_new_port+0x68>)
 8011654:	881b      	ldrh	r3, [r3, #0]
 8011656:	429a      	cmp	r2, r3
 8011658:	d108      	bne.n	801166c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801165a:	88fb      	ldrh	r3, [r7, #6]
 801165c:	3301      	adds	r3, #1
 801165e:	80fb      	strh	r3, [r7, #6]
 8011660:	88fb      	ldrh	r3, [r7, #6]
 8011662:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011666:	d3e0      	bcc.n	801162a <udp_new_port+0xa>
        return 0;
 8011668:	2300      	movs	r3, #0
 801166a:	e007      	b.n	801167c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	68db      	ldr	r3, [r3, #12]
 8011670:	603b      	str	r3, [r7, #0]
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d1ea      	bne.n	801164e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011678:	4b03      	ldr	r3, [pc, #12]	@ (8011688 <udp_new_port+0x68>)
 801167a:	881b      	ldrh	r3, [r3, #0]
}
 801167c:	4618      	mov	r0, r3
 801167e:	370c      	adds	r7, #12
 8011680:	46bd      	mov	sp, r7
 8011682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011686:	4770      	bx	lr
 8011688:	20000090 	.word	0x20000090
 801168c:	2000b168 	.word	0x2000b168

08011690 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	4613      	mov	r3, r2
 801169c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d105      	bne.n	80116b0 <udp_input_local_match+0x20>
 80116a4:	4b27      	ldr	r3, [pc, #156]	@ (8011744 <udp_input_local_match+0xb4>)
 80116a6:	2287      	movs	r2, #135	@ 0x87
 80116a8:	4927      	ldr	r1, [pc, #156]	@ (8011748 <udp_input_local_match+0xb8>)
 80116aa:	4828      	ldr	r0, [pc, #160]	@ (801174c <udp_input_local_match+0xbc>)
 80116ac:	f003 f842 	bl	8014734 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d105      	bne.n	80116c2 <udp_input_local_match+0x32>
 80116b6:	4b23      	ldr	r3, [pc, #140]	@ (8011744 <udp_input_local_match+0xb4>)
 80116b8:	2288      	movs	r2, #136	@ 0x88
 80116ba:	4925      	ldr	r1, [pc, #148]	@ (8011750 <udp_input_local_match+0xc0>)
 80116bc:	4823      	ldr	r0, [pc, #140]	@ (801174c <udp_input_local_match+0xbc>)
 80116be:	f003 f839 	bl	8014734 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	7a1b      	ldrb	r3, [r3, #8]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d00b      	beq.n	80116e2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	7a1a      	ldrb	r2, [r3, #8]
 80116ce:	4b21      	ldr	r3, [pc, #132]	@ (8011754 <udp_input_local_match+0xc4>)
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80116d6:	3301      	adds	r3, #1
 80116d8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116da:	429a      	cmp	r2, r3
 80116dc:	d001      	beq.n	80116e2 <udp_input_local_match+0x52>
    return 0;
 80116de:	2300      	movs	r3, #0
 80116e0:	e02b      	b.n	801173a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80116e2:	79fb      	ldrb	r3, [r7, #7]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d018      	beq.n	801171a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d013      	beq.n	8011716 <udp_input_local_match+0x86>
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d00f      	beq.n	8011716 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80116f6:	4b17      	ldr	r3, [pc, #92]	@ (8011754 <udp_input_local_match+0xc4>)
 80116f8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80116fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116fe:	d00a      	beq.n	8011716 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	681a      	ldr	r2, [r3, #0]
 8011704:	4b13      	ldr	r3, [pc, #76]	@ (8011754 <udp_input_local_match+0xc4>)
 8011706:	695b      	ldr	r3, [r3, #20]
 8011708:	405a      	eors	r2, r3
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	3308      	adds	r3, #8
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011712:	2b00      	cmp	r3, #0
 8011714:	d110      	bne.n	8011738 <udp_input_local_match+0xa8>
          return 1;
 8011716:	2301      	movs	r3, #1
 8011718:	e00f      	b.n	801173a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d009      	beq.n	8011734 <udp_input_local_match+0xa4>
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d005      	beq.n	8011734 <udp_input_local_match+0xa4>
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	681a      	ldr	r2, [r3, #0]
 801172c:	4b09      	ldr	r3, [pc, #36]	@ (8011754 <udp_input_local_match+0xc4>)
 801172e:	695b      	ldr	r3, [r3, #20]
 8011730:	429a      	cmp	r2, r3
 8011732:	d101      	bne.n	8011738 <udp_input_local_match+0xa8>
        return 1;
 8011734:	2301      	movs	r3, #1
 8011736:	e000      	b.n	801173a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011738:	2300      	movs	r3, #0
}
 801173a:	4618      	mov	r0, r3
 801173c:	3710      	adds	r7, #16
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}
 8011742:	bf00      	nop
 8011744:	08017514 	.word	0x08017514
 8011748:	08017544 	.word	0x08017544
 801174c:	08017568 	.word	0x08017568
 8011750:	08017590 	.word	0x08017590
 8011754:	200059dc 	.word	0x200059dc

08011758 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011758:	b590      	push	{r4, r7, lr}
 801175a:	b08d      	sub	sp, #52	@ 0x34
 801175c:	af02      	add	r7, sp, #8
 801175e:	6078      	str	r0, [r7, #4]
 8011760:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011762:	2300      	movs	r3, #0
 8011764:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d105      	bne.n	8011778 <udp_input+0x20>
 801176c:	4b7c      	ldr	r3, [pc, #496]	@ (8011960 <udp_input+0x208>)
 801176e:	22cf      	movs	r2, #207	@ 0xcf
 8011770:	497c      	ldr	r1, [pc, #496]	@ (8011964 <udp_input+0x20c>)
 8011772:	487d      	ldr	r0, [pc, #500]	@ (8011968 <udp_input+0x210>)
 8011774:	f002 ffde 	bl	8014734 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d105      	bne.n	801178a <udp_input+0x32>
 801177e:	4b78      	ldr	r3, [pc, #480]	@ (8011960 <udp_input+0x208>)
 8011780:	22d0      	movs	r2, #208	@ 0xd0
 8011782:	497a      	ldr	r1, [pc, #488]	@ (801196c <udp_input+0x214>)
 8011784:	4878      	ldr	r0, [pc, #480]	@ (8011968 <udp_input+0x210>)
 8011786:	f002 ffd5 	bl	8014734 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	895b      	ldrh	r3, [r3, #10]
 801178e:	2b07      	cmp	r3, #7
 8011790:	d803      	bhi.n	801179a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f7fa f960 	bl	800ba58 <pbuf_free>
    goto end;
 8011798:	e0de      	b.n	8011958 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80117a0:	4b73      	ldr	r3, [pc, #460]	@ (8011970 <udp_input+0x218>)
 80117a2:	695b      	ldr	r3, [r3, #20]
 80117a4:	4a72      	ldr	r2, [pc, #456]	@ (8011970 <udp_input+0x218>)
 80117a6:	6812      	ldr	r2, [r2, #0]
 80117a8:	4611      	mov	r1, r2
 80117aa:	4618      	mov	r0, r3
 80117ac:	f001 ff6c 	bl	8013688 <ip4_addr_isbroadcast_u32>
 80117b0:	4603      	mov	r3, r0
 80117b2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	881b      	ldrh	r3, [r3, #0]
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	4618      	mov	r0, r3
 80117bc:	f7f8 fdee 	bl	800a39c <lwip_htons>
 80117c0:	4603      	mov	r3, r0
 80117c2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	885b      	ldrh	r3, [r3, #2]
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7f8 fde6 	bl	800a39c <lwip_htons>
 80117d0:	4603      	mov	r3, r0
 80117d2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80117d4:	2300      	movs	r3, #0
 80117d6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80117d8:	2300      	movs	r3, #0
 80117da:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80117dc:	2300      	movs	r3, #0
 80117de:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80117e0:	4b64      	ldr	r3, [pc, #400]	@ (8011974 <udp_input+0x21c>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80117e6:	e054      	b.n	8011892 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80117e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ea:	8a5b      	ldrh	r3, [r3, #18]
 80117ec:	89fa      	ldrh	r2, [r7, #14]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d14a      	bne.n	8011888 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80117f2:	7cfb      	ldrb	r3, [r7, #19]
 80117f4:	461a      	mov	r2, r3
 80117f6:	6839      	ldr	r1, [r7, #0]
 80117f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80117fa:	f7ff ff49 	bl	8011690 <udp_input_local_match>
 80117fe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011800:	2b00      	cmp	r3, #0
 8011802:	d041      	beq.n	8011888 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011806:	7c1b      	ldrb	r3, [r3, #16]
 8011808:	f003 0304 	and.w	r3, r3, #4
 801180c:	2b00      	cmp	r3, #0
 801180e:	d11d      	bne.n	801184c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011810:	69fb      	ldr	r3, [r7, #28]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d102      	bne.n	801181c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011818:	61fb      	str	r3, [r7, #28]
 801181a:	e017      	b.n	801184c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801181c:	7cfb      	ldrb	r3, [r7, #19]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d014      	beq.n	801184c <udp_input+0xf4>
 8011822:	4b53      	ldr	r3, [pc, #332]	@ (8011970 <udp_input+0x218>)
 8011824:	695b      	ldr	r3, [r3, #20]
 8011826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801182a:	d10f      	bne.n	801184c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	681a      	ldr	r2, [r3, #0]
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	3304      	adds	r3, #4
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	429a      	cmp	r2, r3
 8011838:	d008      	beq.n	801184c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801183c:	681a      	ldr	r2, [r3, #0]
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	3304      	adds	r3, #4
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	429a      	cmp	r2, r3
 8011846:	d101      	bne.n	801184c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801184a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801184e:	8a9b      	ldrh	r3, [r3, #20]
 8011850:	8a3a      	ldrh	r2, [r7, #16]
 8011852:	429a      	cmp	r2, r3
 8011854:	d118      	bne.n	8011888 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011858:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801185a:	2b00      	cmp	r3, #0
 801185c:	d005      	beq.n	801186a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011860:	685a      	ldr	r2, [r3, #4]
 8011862:	4b43      	ldr	r3, [pc, #268]	@ (8011970 <udp_input+0x218>)
 8011864:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011866:	429a      	cmp	r2, r3
 8011868:	d10e      	bne.n	8011888 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801186a:	6a3b      	ldr	r3, [r7, #32]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d014      	beq.n	801189a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011872:	68da      	ldr	r2, [r3, #12]
 8011874:	6a3b      	ldr	r3, [r7, #32]
 8011876:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011878:	4b3e      	ldr	r3, [pc, #248]	@ (8011974 <udp_input+0x21c>)
 801187a:	681a      	ldr	r2, [r3, #0]
 801187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801187e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011880:	4a3c      	ldr	r2, [pc, #240]	@ (8011974 <udp_input+0x21c>)
 8011882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011884:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011886:	e008      	b.n	801189a <udp_input+0x142>
      }
    }

    prev = pcb;
 8011888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801188a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801188e:	68db      	ldr	r3, [r3, #12]
 8011890:	627b      	str	r3, [r7, #36]	@ 0x24
 8011892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011894:	2b00      	cmp	r3, #0
 8011896:	d1a7      	bne.n	80117e8 <udp_input+0x90>
 8011898:	e000      	b.n	801189c <udp_input+0x144>
        break;
 801189a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d101      	bne.n	80118a6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80118a2:	69fb      	ldr	r3, [r7, #28]
 80118a4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80118a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d002      	beq.n	80118b2 <udp_input+0x15a>
    for_us = 1;
 80118ac:	2301      	movs	r3, #1
 80118ae:	76fb      	strb	r3, [r7, #27]
 80118b0:	e00a      	b.n	80118c8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	3304      	adds	r3, #4
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	4b2d      	ldr	r3, [pc, #180]	@ (8011970 <udp_input+0x218>)
 80118ba:	695b      	ldr	r3, [r3, #20]
 80118bc:	429a      	cmp	r2, r3
 80118be:	bf0c      	ite	eq
 80118c0:	2301      	moveq	r3, #1
 80118c2:	2300      	movne	r3, #0
 80118c4:	b2db      	uxtb	r3, r3
 80118c6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80118c8:	7efb      	ldrb	r3, [r7, #27]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d041      	beq.n	8011952 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80118ce:	2108      	movs	r1, #8
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f7fa f83b 	bl	800b94c <pbuf_remove_header>
 80118d6:	4603      	mov	r3, r0
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d00a      	beq.n	80118f2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80118dc:	4b20      	ldr	r3, [pc, #128]	@ (8011960 <udp_input+0x208>)
 80118de:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80118e2:	4925      	ldr	r1, [pc, #148]	@ (8011978 <udp_input+0x220>)
 80118e4:	4820      	ldr	r0, [pc, #128]	@ (8011968 <udp_input+0x210>)
 80118e6:	f002 ff25 	bl	8014734 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f7fa f8b4 	bl	800ba58 <pbuf_free>
      goto end;
 80118f0:	e032      	b.n	8011958 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80118f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d012      	beq.n	801191e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80118f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118fa:	699b      	ldr	r3, [r3, #24]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d00a      	beq.n	8011916 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011902:	699c      	ldr	r4, [r3, #24]
 8011904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011906:	69d8      	ldr	r0, [r3, #28]
 8011908:	8a3b      	ldrh	r3, [r7, #16]
 801190a:	9300      	str	r3, [sp, #0]
 801190c:	4b1b      	ldr	r3, [pc, #108]	@ (801197c <udp_input+0x224>)
 801190e:	687a      	ldr	r2, [r7, #4]
 8011910:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011912:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011914:	e021      	b.n	801195a <udp_input+0x202>
        pbuf_free(p);
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f7fa f89e 	bl	800ba58 <pbuf_free>
        goto end;
 801191c:	e01c      	b.n	8011958 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801191e:	7cfb      	ldrb	r3, [r7, #19]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d112      	bne.n	801194a <udp_input+0x1f2>
 8011924:	4b12      	ldr	r3, [pc, #72]	@ (8011970 <udp_input+0x218>)
 8011926:	695b      	ldr	r3, [r3, #20]
 8011928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801192c:	2be0      	cmp	r3, #224	@ 0xe0
 801192e:	d00c      	beq.n	801194a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011930:	4b0f      	ldr	r3, [pc, #60]	@ (8011970 <udp_input+0x218>)
 8011932:	899b      	ldrh	r3, [r3, #12]
 8011934:	3308      	adds	r3, #8
 8011936:	b29b      	uxth	r3, r3
 8011938:	b21b      	sxth	r3, r3
 801193a:	4619      	mov	r1, r3
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f7fa f878 	bl	800ba32 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011942:	2103      	movs	r1, #3
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f001 fb7f 	bl	8013048 <icmp_dest_unreach>
      pbuf_free(p);
 801194a:	6878      	ldr	r0, [r7, #4]
 801194c:	f7fa f884 	bl	800ba58 <pbuf_free>
  return;
 8011950:	e003      	b.n	801195a <udp_input+0x202>
    pbuf_free(p);
 8011952:	6878      	ldr	r0, [r7, #4]
 8011954:	f7fa f880 	bl	800ba58 <pbuf_free>
  return;
 8011958:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801195a:	372c      	adds	r7, #44	@ 0x2c
 801195c:	46bd      	mov	sp, r7
 801195e:	bd90      	pop	{r4, r7, pc}
 8011960:	08017514 	.word	0x08017514
 8011964:	080175b8 	.word	0x080175b8
 8011968:	08017568 	.word	0x08017568
 801196c:	080175d0 	.word	0x080175d0
 8011970:	200059dc 	.word	0x200059dc
 8011974:	2000b168 	.word	0x2000b168
 8011978:	080175ec 	.word	0x080175ec
 801197c:	200059ec 	.word	0x200059ec

08011980 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b088      	sub	sp, #32
 8011984:	af02      	add	r7, sp, #8
 8011986:	60f8      	str	r0, [r7, #12]
 8011988:	60b9      	str	r1, [r7, #8]
 801198a:	607a      	str	r2, [r7, #4]
 801198c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d109      	bne.n	80119a8 <udp_sendto+0x28>
 8011994:	4b23      	ldr	r3, [pc, #140]	@ (8011a24 <udp_sendto+0xa4>)
 8011996:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801199a:	4923      	ldr	r1, [pc, #140]	@ (8011a28 <udp_sendto+0xa8>)
 801199c:	4823      	ldr	r0, [pc, #140]	@ (8011a2c <udp_sendto+0xac>)
 801199e:	f002 fec9 	bl	8014734 <iprintf>
 80119a2:	f06f 030f 	mvn.w	r3, #15
 80119a6:	e038      	b.n	8011a1a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d109      	bne.n	80119c2 <udp_sendto+0x42>
 80119ae:	4b1d      	ldr	r3, [pc, #116]	@ (8011a24 <udp_sendto+0xa4>)
 80119b0:	f240 2219 	movw	r2, #537	@ 0x219
 80119b4:	491e      	ldr	r1, [pc, #120]	@ (8011a30 <udp_sendto+0xb0>)
 80119b6:	481d      	ldr	r0, [pc, #116]	@ (8011a2c <udp_sendto+0xac>)
 80119b8:	f002 febc 	bl	8014734 <iprintf>
 80119bc:	f06f 030f 	mvn.w	r3, #15
 80119c0:	e02b      	b.n	8011a1a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d109      	bne.n	80119dc <udp_sendto+0x5c>
 80119c8:	4b16      	ldr	r3, [pc, #88]	@ (8011a24 <udp_sendto+0xa4>)
 80119ca:	f240 221a 	movw	r2, #538	@ 0x21a
 80119ce:	4919      	ldr	r1, [pc, #100]	@ (8011a34 <udp_sendto+0xb4>)
 80119d0:	4816      	ldr	r0, [pc, #88]	@ (8011a2c <udp_sendto+0xac>)
 80119d2:	f002 feaf 	bl	8014734 <iprintf>
 80119d6:	f06f 030f 	mvn.w	r3, #15
 80119da:	e01e      	b.n	8011a1a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	7a1b      	ldrb	r3, [r3, #8]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d006      	beq.n	80119f2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	7a1b      	ldrb	r3, [r3, #8]
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7f9 fcd5 	bl	800b398 <netif_get_by_index>
 80119ee:	6178      	str	r0, [r7, #20]
 80119f0:	e003      	b.n	80119fa <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f001 fbb2 	bl	801315c <ip4_route>
 80119f8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d102      	bne.n	8011a06 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8011a00:	f06f 0303 	mvn.w	r3, #3
 8011a04:	e009      	b.n	8011a1a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8011a06:	887a      	ldrh	r2, [r7, #2]
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	9300      	str	r3, [sp, #0]
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	687a      	ldr	r2, [r7, #4]
 8011a10:	68b9      	ldr	r1, [r7, #8]
 8011a12:	68f8      	ldr	r0, [r7, #12]
 8011a14:	f000 f810 	bl	8011a38 <udp_sendto_if>
 8011a18:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3718      	adds	r7, #24
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}
 8011a22:	bf00      	nop
 8011a24:	08017514 	.word	0x08017514
 8011a28:	08017638 	.word	0x08017638
 8011a2c:	08017568 	.word	0x08017568
 8011a30:	08017650 	.word	0x08017650
 8011a34:	0801766c 	.word	0x0801766c

08011a38 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b088      	sub	sp, #32
 8011a3c:	af02      	add	r7, sp, #8
 8011a3e:	60f8      	str	r0, [r7, #12]
 8011a40:	60b9      	str	r1, [r7, #8]
 8011a42:	607a      	str	r2, [r7, #4]
 8011a44:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d109      	bne.n	8011a60 <udp_sendto_if+0x28>
 8011a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8011b08 <udp_sendto_if+0xd0>)
 8011a4e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011a52:	492e      	ldr	r1, [pc, #184]	@ (8011b0c <udp_sendto_if+0xd4>)
 8011a54:	482e      	ldr	r0, [pc, #184]	@ (8011b10 <udp_sendto_if+0xd8>)
 8011a56:	f002 fe6d 	bl	8014734 <iprintf>
 8011a5a:	f06f 030f 	mvn.w	r3, #15
 8011a5e:	e04f      	b.n	8011b00 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d109      	bne.n	8011a7a <udp_sendto_if+0x42>
 8011a66:	4b28      	ldr	r3, [pc, #160]	@ (8011b08 <udp_sendto_if+0xd0>)
 8011a68:	f240 2281 	movw	r2, #641	@ 0x281
 8011a6c:	4929      	ldr	r1, [pc, #164]	@ (8011b14 <udp_sendto_if+0xdc>)
 8011a6e:	4828      	ldr	r0, [pc, #160]	@ (8011b10 <udp_sendto_if+0xd8>)
 8011a70:	f002 fe60 	bl	8014734 <iprintf>
 8011a74:	f06f 030f 	mvn.w	r3, #15
 8011a78:	e042      	b.n	8011b00 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d109      	bne.n	8011a94 <udp_sendto_if+0x5c>
 8011a80:	4b21      	ldr	r3, [pc, #132]	@ (8011b08 <udp_sendto_if+0xd0>)
 8011a82:	f240 2282 	movw	r2, #642	@ 0x282
 8011a86:	4924      	ldr	r1, [pc, #144]	@ (8011b18 <udp_sendto_if+0xe0>)
 8011a88:	4821      	ldr	r0, [pc, #132]	@ (8011b10 <udp_sendto_if+0xd8>)
 8011a8a:	f002 fe53 	bl	8014734 <iprintf>
 8011a8e:	f06f 030f 	mvn.w	r3, #15
 8011a92:	e035      	b.n	8011b00 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011a94:	6a3b      	ldr	r3, [r7, #32]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d109      	bne.n	8011aae <udp_sendto_if+0x76>
 8011a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8011b08 <udp_sendto_if+0xd0>)
 8011a9c:	f240 2283 	movw	r2, #643	@ 0x283
 8011aa0:	491e      	ldr	r1, [pc, #120]	@ (8011b1c <udp_sendto_if+0xe4>)
 8011aa2:	481b      	ldr	r0, [pc, #108]	@ (8011b10 <udp_sendto_if+0xd8>)
 8011aa4:	f002 fe46 	bl	8014734 <iprintf>
 8011aa8:	f06f 030f 	mvn.w	r3, #15
 8011aac:	e028      	b.n	8011b00 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d009      	beq.n	8011ac8 <udp_sendto_if+0x90>
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d005      	beq.n	8011ac8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011ac4:	2be0      	cmp	r3, #224	@ 0xe0
 8011ac6:	d103      	bne.n	8011ad0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011ac8:	6a3b      	ldr	r3, [r7, #32]
 8011aca:	3304      	adds	r3, #4
 8011acc:	617b      	str	r3, [r7, #20]
 8011ace:	e00b      	b.n	8011ae8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	681a      	ldr	r2, [r3, #0]
 8011ad4:	6a3b      	ldr	r3, [r7, #32]
 8011ad6:	3304      	adds	r3, #4
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d002      	beq.n	8011ae4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011ade:	f06f 0303 	mvn.w	r3, #3
 8011ae2:	e00d      	b.n	8011b00 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011ae8:	887a      	ldrh	r2, [r7, #2]
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	9301      	str	r3, [sp, #4]
 8011aee:	6a3b      	ldr	r3, [r7, #32]
 8011af0:	9300      	str	r3, [sp, #0]
 8011af2:	4613      	mov	r3, r2
 8011af4:	687a      	ldr	r2, [r7, #4]
 8011af6:	68b9      	ldr	r1, [r7, #8]
 8011af8:	68f8      	ldr	r0, [r7, #12]
 8011afa:	f000 f811 	bl	8011b20 <udp_sendto_if_src>
 8011afe:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	3718      	adds	r7, #24
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}
 8011b08:	08017514 	.word	0x08017514
 8011b0c:	08017688 	.word	0x08017688
 8011b10:	08017568 	.word	0x08017568
 8011b14:	080176a4 	.word	0x080176a4
 8011b18:	080176c0 	.word	0x080176c0
 8011b1c:	080176e0 	.word	0x080176e0

08011b20 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b08c      	sub	sp, #48	@ 0x30
 8011b24:	af04      	add	r7, sp, #16
 8011b26:	60f8      	str	r0, [r7, #12]
 8011b28:	60b9      	str	r1, [r7, #8]
 8011b2a:	607a      	str	r2, [r7, #4]
 8011b2c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d109      	bne.n	8011b48 <udp_sendto_if_src+0x28>
 8011b34:	4b65      	ldr	r3, [pc, #404]	@ (8011ccc <udp_sendto_if_src+0x1ac>)
 8011b36:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8011b3a:	4965      	ldr	r1, [pc, #404]	@ (8011cd0 <udp_sendto_if_src+0x1b0>)
 8011b3c:	4865      	ldr	r0, [pc, #404]	@ (8011cd4 <udp_sendto_if_src+0x1b4>)
 8011b3e:	f002 fdf9 	bl	8014734 <iprintf>
 8011b42:	f06f 030f 	mvn.w	r3, #15
 8011b46:	e0bc      	b.n	8011cc2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d109      	bne.n	8011b62 <udp_sendto_if_src+0x42>
 8011b4e:	4b5f      	ldr	r3, [pc, #380]	@ (8011ccc <udp_sendto_if_src+0x1ac>)
 8011b50:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8011b54:	4960      	ldr	r1, [pc, #384]	@ (8011cd8 <udp_sendto_if_src+0x1b8>)
 8011b56:	485f      	ldr	r0, [pc, #380]	@ (8011cd4 <udp_sendto_if_src+0x1b4>)
 8011b58:	f002 fdec 	bl	8014734 <iprintf>
 8011b5c:	f06f 030f 	mvn.w	r3, #15
 8011b60:	e0af      	b.n	8011cc2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d109      	bne.n	8011b7c <udp_sendto_if_src+0x5c>
 8011b68:	4b58      	ldr	r3, [pc, #352]	@ (8011ccc <udp_sendto_if_src+0x1ac>)
 8011b6a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8011b6e:	495b      	ldr	r1, [pc, #364]	@ (8011cdc <udp_sendto_if_src+0x1bc>)
 8011b70:	4858      	ldr	r0, [pc, #352]	@ (8011cd4 <udp_sendto_if_src+0x1b4>)
 8011b72:	f002 fddf 	bl	8014734 <iprintf>
 8011b76:	f06f 030f 	mvn.w	r3, #15
 8011b7a:	e0a2      	b.n	8011cc2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d109      	bne.n	8011b96 <udp_sendto_if_src+0x76>
 8011b82:	4b52      	ldr	r3, [pc, #328]	@ (8011ccc <udp_sendto_if_src+0x1ac>)
 8011b84:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8011b88:	4955      	ldr	r1, [pc, #340]	@ (8011ce0 <udp_sendto_if_src+0x1c0>)
 8011b8a:	4852      	ldr	r0, [pc, #328]	@ (8011cd4 <udp_sendto_if_src+0x1b4>)
 8011b8c:	f002 fdd2 	bl	8014734 <iprintf>
 8011b90:	f06f 030f 	mvn.w	r3, #15
 8011b94:	e095      	b.n	8011cc2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d109      	bne.n	8011bb0 <udp_sendto_if_src+0x90>
 8011b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8011ccc <udp_sendto_if_src+0x1ac>)
 8011b9e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8011ba2:	4950      	ldr	r1, [pc, #320]	@ (8011ce4 <udp_sendto_if_src+0x1c4>)
 8011ba4:	484b      	ldr	r0, [pc, #300]	@ (8011cd4 <udp_sendto_if_src+0x1b4>)
 8011ba6:	f002 fdc5 	bl	8014734 <iprintf>
 8011baa:	f06f 030f 	mvn.w	r3, #15
 8011bae:	e088      	b.n	8011cc2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	8a5b      	ldrh	r3, [r3, #18]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d10f      	bne.n	8011bd8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011bb8:	68f9      	ldr	r1, [r7, #12]
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	8a5b      	ldrh	r3, [r3, #18]
 8011bbe:	461a      	mov	r2, r3
 8011bc0:	68f8      	ldr	r0, [r7, #12]
 8011bc2:	f000 f893 	bl	8011cec <udp_bind>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011bca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d002      	beq.n	8011bd8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011bd2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011bd6:	e074      	b.n	8011cc2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	891b      	ldrh	r3, [r3, #8]
 8011bdc:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8011be0:	4293      	cmp	r3, r2
 8011be2:	d902      	bls.n	8011bea <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011be4:	f04f 33ff 	mov.w	r3, #4294967295
 8011be8:	e06b      	b.n	8011cc2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011bea:	2108      	movs	r1, #8
 8011bec:	68b8      	ldr	r0, [r7, #8]
 8011bee:	f7f9 fe9d 	bl	800b92c <pbuf_add_header>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d015      	beq.n	8011c24 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011bf8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011bfc:	2108      	movs	r1, #8
 8011bfe:	2022      	movs	r0, #34	@ 0x22
 8011c00:	f7f9 fc46 	bl	800b490 <pbuf_alloc>
 8011c04:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011c06:	69fb      	ldr	r3, [r7, #28]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d102      	bne.n	8011c12 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c10:	e057      	b.n	8011cc2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	891b      	ldrh	r3, [r3, #8]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d006      	beq.n	8011c28 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011c1a:	68b9      	ldr	r1, [r7, #8]
 8011c1c:	69f8      	ldr	r0, [r7, #28]
 8011c1e:	f7fa f833 	bl	800bc88 <pbuf_chain>
 8011c22:	e001      	b.n	8011c28 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011c28:	69fb      	ldr	r3, [r7, #28]
 8011c2a:	895b      	ldrh	r3, [r3, #10]
 8011c2c:	2b07      	cmp	r3, #7
 8011c2e:	d806      	bhi.n	8011c3e <udp_sendto_if_src+0x11e>
 8011c30:	4b26      	ldr	r3, [pc, #152]	@ (8011ccc <udp_sendto_if_src+0x1ac>)
 8011c32:	f240 320d 	movw	r2, #781	@ 0x30d
 8011c36:	492c      	ldr	r1, [pc, #176]	@ (8011ce8 <udp_sendto_if_src+0x1c8>)
 8011c38:	4826      	ldr	r0, [pc, #152]	@ (8011cd4 <udp_sendto_if_src+0x1b4>)
 8011c3a:	f002 fd7b 	bl	8014734 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011c3e:	69fb      	ldr	r3, [r7, #28]
 8011c40:	685b      	ldr	r3, [r3, #4]
 8011c42:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	8a5b      	ldrh	r3, [r3, #18]
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7f8 fba7 	bl	800a39c <lwip_htons>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	461a      	mov	r2, r3
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011c56:	887b      	ldrh	r3, [r7, #2]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7f8 fb9f 	bl	800a39c <lwip_htons>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	461a      	mov	r2, r3
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	2200      	movs	r2, #0
 8011c6a:	719a      	strb	r2, [r3, #6]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	891b      	ldrh	r3, [r3, #8]
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7f8 fb91 	bl	800a39c <lwip_htons>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011c82:	2311      	movs	r3, #17
 8011c84:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	7adb      	ldrb	r3, [r3, #11]
 8011c8a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	7a9b      	ldrb	r3, [r3, #10]
 8011c90:	7cb9      	ldrb	r1, [r7, #18]
 8011c92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011c94:	9202      	str	r2, [sp, #8]
 8011c96:	7cfa      	ldrb	r2, [r7, #19]
 8011c98:	9201      	str	r2, [sp, #4]
 8011c9a:	9300      	str	r3, [sp, #0]
 8011c9c:	460b      	mov	r3, r1
 8011c9e:	687a      	ldr	r2, [r7, #4]
 8011ca0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ca2:	69f8      	ldr	r0, [r7, #28]
 8011ca4:	f001 fc42 	bl	801352c <ip4_output_if_src>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011cac:	69fa      	ldr	r2, [r7, #28]
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d004      	beq.n	8011cbe <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011cb4:	69f8      	ldr	r0, [r7, #28]
 8011cb6:	f7f9 fecf 	bl	800ba58 <pbuf_free>
    q = NULL;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011cbe:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3720      	adds	r7, #32
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	08017514 	.word	0x08017514
 8011cd0:	08017700 	.word	0x08017700
 8011cd4:	08017568 	.word	0x08017568
 8011cd8:	08017720 	.word	0x08017720
 8011cdc:	08017740 	.word	0x08017740
 8011ce0:	08017764 	.word	0x08017764
 8011ce4:	08017788 	.word	0x08017788
 8011ce8:	080177ac 	.word	0x080177ac

08011cec <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b086      	sub	sp, #24
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	60f8      	str	r0, [r7, #12]
 8011cf4:	60b9      	str	r1, [r7, #8]
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d101      	bne.n	8011d04 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011d00:	4b39      	ldr	r3, [pc, #228]	@ (8011de8 <udp_bind+0xfc>)
 8011d02:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d109      	bne.n	8011d1e <udp_bind+0x32>
 8011d0a:	4b38      	ldr	r3, [pc, #224]	@ (8011dec <udp_bind+0x100>)
 8011d0c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8011d10:	4937      	ldr	r1, [pc, #220]	@ (8011df0 <udp_bind+0x104>)
 8011d12:	4838      	ldr	r0, [pc, #224]	@ (8011df4 <udp_bind+0x108>)
 8011d14:	f002 fd0e 	bl	8014734 <iprintf>
 8011d18:	f06f 030f 	mvn.w	r3, #15
 8011d1c:	e060      	b.n	8011de0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d22:	4b35      	ldr	r3, [pc, #212]	@ (8011df8 <udp_bind+0x10c>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	617b      	str	r3, [r7, #20]
 8011d28:	e009      	b.n	8011d3e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011d2a:	68fa      	ldr	r2, [r7, #12]
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d102      	bne.n	8011d38 <udp_bind+0x4c>
      rebind = 1;
 8011d32:	2301      	movs	r3, #1
 8011d34:	74fb      	strb	r3, [r7, #19]
      break;
 8011d36:	e005      	b.n	8011d44 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d38:	697b      	ldr	r3, [r7, #20]
 8011d3a:	68db      	ldr	r3, [r3, #12]
 8011d3c:	617b      	str	r3, [r7, #20]
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d1f2      	bne.n	8011d2a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011d44:	88fb      	ldrh	r3, [r7, #6]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d109      	bne.n	8011d5e <udp_bind+0x72>
    port = udp_new_port();
 8011d4a:	f7ff fc69 	bl	8011620 <udp_new_port>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011d52:	88fb      	ldrh	r3, [r7, #6]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d12c      	bne.n	8011db2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011d58:	f06f 0307 	mvn.w	r3, #7
 8011d5c:	e040      	b.n	8011de0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d5e:	4b26      	ldr	r3, [pc, #152]	@ (8011df8 <udp_bind+0x10c>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	617b      	str	r3, [r7, #20]
 8011d64:	e022      	b.n	8011dac <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011d66:	68fa      	ldr	r2, [r7, #12]
 8011d68:	697b      	ldr	r3, [r7, #20]
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	d01b      	beq.n	8011da6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	8a5b      	ldrh	r3, [r3, #18]
 8011d72:	88fa      	ldrh	r2, [r7, #6]
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d116      	bne.n	8011da6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	681a      	ldr	r2, [r3, #0]
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d00d      	beq.n	8011da0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d00a      	beq.n	8011da0 <udp_bind+0xb4>
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d006      	beq.n	8011da0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011d92:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d003      	beq.n	8011da0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d102      	bne.n	8011da6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011da0:	f06f 0307 	mvn.w	r3, #7
 8011da4:	e01c      	b.n	8011de0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	68db      	ldr	r3, [r3, #12]
 8011daa:	617b      	str	r3, [r7, #20]
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d1d9      	bne.n	8011d66 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d002      	beq.n	8011dbe <udp_bind+0xd2>
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	e000      	b.n	8011dc0 <udp_bind+0xd4>
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	68fa      	ldr	r2, [r7, #12]
 8011dc2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	88fa      	ldrh	r2, [r7, #6]
 8011dc8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011dca:	7cfb      	ldrb	r3, [r7, #19]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d106      	bne.n	8011dde <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011dd0:	4b09      	ldr	r3, [pc, #36]	@ (8011df8 <udp_bind+0x10c>)
 8011dd2:	681a      	ldr	r2, [r3, #0]
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011dd8:	4a07      	ldr	r2, [pc, #28]	@ (8011df8 <udp_bind+0x10c>)
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011dde:	2300      	movs	r3, #0
}
 8011de0:	4618      	mov	r0, r3
 8011de2:	3718      	adds	r7, #24
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}
 8011de8:	08018038 	.word	0x08018038
 8011dec:	08017514 	.word	0x08017514
 8011df0:	080177dc 	.word	0x080177dc
 8011df4:	08017568 	.word	0x08017568
 8011df8:	2000b168 	.word	0x2000b168

08011dfc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b086      	sub	sp, #24
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	60f8      	str	r0, [r7, #12]
 8011e04:	60b9      	str	r1, [r7, #8]
 8011e06:	4613      	mov	r3, r2
 8011e08:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d109      	bne.n	8011e24 <udp_connect+0x28>
 8011e10:	4b2c      	ldr	r3, [pc, #176]	@ (8011ec4 <udp_connect+0xc8>)
 8011e12:	f240 4235 	movw	r2, #1077	@ 0x435
 8011e16:	492c      	ldr	r1, [pc, #176]	@ (8011ec8 <udp_connect+0xcc>)
 8011e18:	482c      	ldr	r0, [pc, #176]	@ (8011ecc <udp_connect+0xd0>)
 8011e1a:	f002 fc8b 	bl	8014734 <iprintf>
 8011e1e:	f06f 030f 	mvn.w	r3, #15
 8011e22:	e04b      	b.n	8011ebc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d109      	bne.n	8011e3e <udp_connect+0x42>
 8011e2a:	4b26      	ldr	r3, [pc, #152]	@ (8011ec4 <udp_connect+0xc8>)
 8011e2c:	f240 4236 	movw	r2, #1078	@ 0x436
 8011e30:	4927      	ldr	r1, [pc, #156]	@ (8011ed0 <udp_connect+0xd4>)
 8011e32:	4826      	ldr	r0, [pc, #152]	@ (8011ecc <udp_connect+0xd0>)
 8011e34:	f002 fc7e 	bl	8014734 <iprintf>
 8011e38:	f06f 030f 	mvn.w	r3, #15
 8011e3c:	e03e      	b.n	8011ebc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	8a5b      	ldrh	r3, [r3, #18]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d10f      	bne.n	8011e66 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011e46:	68f9      	ldr	r1, [r7, #12]
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	8a5b      	ldrh	r3, [r3, #18]
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	68f8      	ldr	r0, [r7, #12]
 8011e50:	f7ff ff4c 	bl	8011cec <udp_bind>
 8011e54:	4603      	mov	r3, r0
 8011e56:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011e58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d002      	beq.n	8011e66 <udp_connect+0x6a>
      return err;
 8011e60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e64:	e02a      	b.n	8011ebc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d002      	beq.n	8011e72 <udp_connect+0x76>
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	e000      	b.n	8011e74 <udp_connect+0x78>
 8011e72:	2300      	movs	r3, #0
 8011e74:	68fa      	ldr	r2, [r7, #12]
 8011e76:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	88fa      	ldrh	r2, [r7, #6]
 8011e7c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	7c1b      	ldrb	r3, [r3, #16]
 8011e82:	f043 0304 	orr.w	r3, r3, #4
 8011e86:	b2da      	uxtb	r2, r3
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011e8c:	4b11      	ldr	r3, [pc, #68]	@ (8011ed4 <udp_connect+0xd8>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	617b      	str	r3, [r7, #20]
 8011e92:	e008      	b.n	8011ea6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011e94:	68fa      	ldr	r2, [r7, #12]
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d101      	bne.n	8011ea0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	e00d      	b.n	8011ebc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ea0:	697b      	ldr	r3, [r7, #20]
 8011ea2:	68db      	ldr	r3, [r3, #12]
 8011ea4:	617b      	str	r3, [r7, #20]
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d1f3      	bne.n	8011e94 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011eac:	4b09      	ldr	r3, [pc, #36]	@ (8011ed4 <udp_connect+0xd8>)
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011eb4:	4a07      	ldr	r2, [pc, #28]	@ (8011ed4 <udp_connect+0xd8>)
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011eba:	2300      	movs	r3, #0
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3718      	adds	r7, #24
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}
 8011ec4:	08017514 	.word	0x08017514
 8011ec8:	080177f4 	.word	0x080177f4
 8011ecc:	08017568 	.word	0x08017568
 8011ed0:	08017810 	.word	0x08017810
 8011ed4:	2000b168 	.word	0x2000b168

08011ed8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	60f8      	str	r0, [r7, #12]
 8011ee0:	60b9      	str	r1, [r7, #8]
 8011ee2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d107      	bne.n	8011efa <udp_recv+0x22>
 8011eea:	4b08      	ldr	r3, [pc, #32]	@ (8011f0c <udp_recv+0x34>)
 8011eec:	f240 428a 	movw	r2, #1162	@ 0x48a
 8011ef0:	4907      	ldr	r1, [pc, #28]	@ (8011f10 <udp_recv+0x38>)
 8011ef2:	4808      	ldr	r0, [pc, #32]	@ (8011f14 <udp_recv+0x3c>)
 8011ef4:	f002 fc1e 	bl	8014734 <iprintf>
 8011ef8:	e005      	b.n	8011f06 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	68ba      	ldr	r2, [r7, #8]
 8011efe:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	687a      	ldr	r2, [r7, #4]
 8011f04:	61da      	str	r2, [r3, #28]
}
 8011f06:	3710      	adds	r7, #16
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}
 8011f0c:	08017514 	.word	0x08017514
 8011f10:	08017848 	.word	0x08017848
 8011f14:	08017568 	.word	0x08017568

08011f18 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011f1e:	2000      	movs	r0, #0
 8011f20:	f7f8 feb4 	bl	800ac8c <memp_malloc>
 8011f24:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d007      	beq.n	8011f3c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011f2c:	2220      	movs	r2, #32
 8011f2e:	2100      	movs	r1, #0
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f002 fc64 	bl	80147fe <memset>
    pcb->ttl = UDP_TTL;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	22ff      	movs	r2, #255	@ 0xff
 8011f3a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011f3c:	687b      	ldr	r3, [r7, #4]
}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3708      	adds	r7, #8
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
	...

08011f48 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011f48:	b480      	push	{r7}
 8011f4a:	b085      	sub	sp, #20
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d01e      	beq.n	8011f96 <udp_netif_ip_addr_changed+0x4e>
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d01a      	beq.n	8011f96 <udp_netif_ip_addr_changed+0x4e>
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d017      	beq.n	8011f96 <udp_netif_ip_addr_changed+0x4e>
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d013      	beq.n	8011f96 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8011fa4 <udp_netif_ip_addr_changed+0x5c>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	60fb      	str	r3, [r7, #12]
 8011f74:	e00c      	b.n	8011f90 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	681a      	ldr	r2, [r3, #0]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d103      	bne.n	8011f8a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	681a      	ldr	r2, [r3, #0]
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	68db      	ldr	r3, [r3, #12]
 8011f8e:	60fb      	str	r3, [r7, #12]
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d1ef      	bne.n	8011f76 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011f96:	bf00      	nop
 8011f98:	3714      	adds	r7, #20
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa0:	4770      	bx	lr
 8011fa2:	bf00      	nop
 8011fa4:	2000b168 	.word	0x2000b168

08011fa8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b082      	sub	sp, #8
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011fb0:	4915      	ldr	r1, [pc, #84]	@ (8012008 <etharp_free_entry+0x60>)
 8011fb2:	687a      	ldr	r2, [r7, #4]
 8011fb4:	4613      	mov	r3, r2
 8011fb6:	005b      	lsls	r3, r3, #1
 8011fb8:	4413      	add	r3, r2
 8011fba:	00db      	lsls	r3, r3, #3
 8011fbc:	440b      	add	r3, r1
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d013      	beq.n	8011fec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011fc4:	4910      	ldr	r1, [pc, #64]	@ (8012008 <etharp_free_entry+0x60>)
 8011fc6:	687a      	ldr	r2, [r7, #4]
 8011fc8:	4613      	mov	r3, r2
 8011fca:	005b      	lsls	r3, r3, #1
 8011fcc:	4413      	add	r3, r2
 8011fce:	00db      	lsls	r3, r3, #3
 8011fd0:	440b      	add	r3, r1
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7f9 fd3f 	bl	800ba58 <pbuf_free>
    arp_table[i].q = NULL;
 8011fda:	490b      	ldr	r1, [pc, #44]	@ (8012008 <etharp_free_entry+0x60>)
 8011fdc:	687a      	ldr	r2, [r7, #4]
 8011fde:	4613      	mov	r3, r2
 8011fe0:	005b      	lsls	r3, r3, #1
 8011fe2:	4413      	add	r3, r2
 8011fe4:	00db      	lsls	r3, r3, #3
 8011fe6:	440b      	add	r3, r1
 8011fe8:	2200      	movs	r2, #0
 8011fea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011fec:	4906      	ldr	r1, [pc, #24]	@ (8012008 <etharp_free_entry+0x60>)
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	4613      	mov	r3, r2
 8011ff2:	005b      	lsls	r3, r3, #1
 8011ff4:	4413      	add	r3, r2
 8011ff6:	00db      	lsls	r3, r3, #3
 8011ff8:	440b      	add	r3, r1
 8011ffa:	3314      	adds	r3, #20
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012000:	bf00      	nop
 8012002:	3708      	adds	r7, #8
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}
 8012008:	2000b16c 	.word	0x2000b16c

0801200c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b082      	sub	sp, #8
 8012010:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012012:	2300      	movs	r3, #0
 8012014:	607b      	str	r3, [r7, #4]
 8012016:	e096      	b.n	8012146 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012018:	494f      	ldr	r1, [pc, #316]	@ (8012158 <etharp_tmr+0x14c>)
 801201a:	687a      	ldr	r2, [r7, #4]
 801201c:	4613      	mov	r3, r2
 801201e:	005b      	lsls	r3, r3, #1
 8012020:	4413      	add	r3, r2
 8012022:	00db      	lsls	r3, r3, #3
 8012024:	440b      	add	r3, r1
 8012026:	3314      	adds	r3, #20
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801202c:	78fb      	ldrb	r3, [r7, #3]
 801202e:	2b00      	cmp	r3, #0
 8012030:	f000 8086 	beq.w	8012140 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012034:	4948      	ldr	r1, [pc, #288]	@ (8012158 <etharp_tmr+0x14c>)
 8012036:	687a      	ldr	r2, [r7, #4]
 8012038:	4613      	mov	r3, r2
 801203a:	005b      	lsls	r3, r3, #1
 801203c:	4413      	add	r3, r2
 801203e:	00db      	lsls	r3, r3, #3
 8012040:	440b      	add	r3, r1
 8012042:	3312      	adds	r3, #18
 8012044:	881b      	ldrh	r3, [r3, #0]
 8012046:	3301      	adds	r3, #1
 8012048:	b298      	uxth	r0, r3
 801204a:	4943      	ldr	r1, [pc, #268]	@ (8012158 <etharp_tmr+0x14c>)
 801204c:	687a      	ldr	r2, [r7, #4]
 801204e:	4613      	mov	r3, r2
 8012050:	005b      	lsls	r3, r3, #1
 8012052:	4413      	add	r3, r2
 8012054:	00db      	lsls	r3, r3, #3
 8012056:	440b      	add	r3, r1
 8012058:	3312      	adds	r3, #18
 801205a:	4602      	mov	r2, r0
 801205c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801205e:	493e      	ldr	r1, [pc, #248]	@ (8012158 <etharp_tmr+0x14c>)
 8012060:	687a      	ldr	r2, [r7, #4]
 8012062:	4613      	mov	r3, r2
 8012064:	005b      	lsls	r3, r3, #1
 8012066:	4413      	add	r3, r2
 8012068:	00db      	lsls	r3, r3, #3
 801206a:	440b      	add	r3, r1
 801206c:	3312      	adds	r3, #18
 801206e:	881b      	ldrh	r3, [r3, #0]
 8012070:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8012074:	d215      	bcs.n	80120a2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012076:	4938      	ldr	r1, [pc, #224]	@ (8012158 <etharp_tmr+0x14c>)
 8012078:	687a      	ldr	r2, [r7, #4]
 801207a:	4613      	mov	r3, r2
 801207c:	005b      	lsls	r3, r3, #1
 801207e:	4413      	add	r3, r2
 8012080:	00db      	lsls	r3, r3, #3
 8012082:	440b      	add	r3, r1
 8012084:	3314      	adds	r3, #20
 8012086:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012088:	2b01      	cmp	r3, #1
 801208a:	d10e      	bne.n	80120aa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801208c:	4932      	ldr	r1, [pc, #200]	@ (8012158 <etharp_tmr+0x14c>)
 801208e:	687a      	ldr	r2, [r7, #4]
 8012090:	4613      	mov	r3, r2
 8012092:	005b      	lsls	r3, r3, #1
 8012094:	4413      	add	r3, r2
 8012096:	00db      	lsls	r3, r3, #3
 8012098:	440b      	add	r3, r1
 801209a:	3312      	adds	r3, #18
 801209c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801209e:	2b04      	cmp	r3, #4
 80120a0:	d903      	bls.n	80120aa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f7ff ff80 	bl	8011fa8 <etharp_free_entry>
 80120a8:	e04a      	b.n	8012140 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80120aa:	492b      	ldr	r1, [pc, #172]	@ (8012158 <etharp_tmr+0x14c>)
 80120ac:	687a      	ldr	r2, [r7, #4]
 80120ae:	4613      	mov	r3, r2
 80120b0:	005b      	lsls	r3, r3, #1
 80120b2:	4413      	add	r3, r2
 80120b4:	00db      	lsls	r3, r3, #3
 80120b6:	440b      	add	r3, r1
 80120b8:	3314      	adds	r3, #20
 80120ba:	781b      	ldrb	r3, [r3, #0]
 80120bc:	2b03      	cmp	r3, #3
 80120be:	d10a      	bne.n	80120d6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80120c0:	4925      	ldr	r1, [pc, #148]	@ (8012158 <etharp_tmr+0x14c>)
 80120c2:	687a      	ldr	r2, [r7, #4]
 80120c4:	4613      	mov	r3, r2
 80120c6:	005b      	lsls	r3, r3, #1
 80120c8:	4413      	add	r3, r2
 80120ca:	00db      	lsls	r3, r3, #3
 80120cc:	440b      	add	r3, r1
 80120ce:	3314      	adds	r3, #20
 80120d0:	2204      	movs	r2, #4
 80120d2:	701a      	strb	r2, [r3, #0]
 80120d4:	e034      	b.n	8012140 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80120d6:	4920      	ldr	r1, [pc, #128]	@ (8012158 <etharp_tmr+0x14c>)
 80120d8:	687a      	ldr	r2, [r7, #4]
 80120da:	4613      	mov	r3, r2
 80120dc:	005b      	lsls	r3, r3, #1
 80120de:	4413      	add	r3, r2
 80120e0:	00db      	lsls	r3, r3, #3
 80120e2:	440b      	add	r3, r1
 80120e4:	3314      	adds	r3, #20
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	2b04      	cmp	r3, #4
 80120ea:	d10a      	bne.n	8012102 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80120ec:	491a      	ldr	r1, [pc, #104]	@ (8012158 <etharp_tmr+0x14c>)
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	4613      	mov	r3, r2
 80120f2:	005b      	lsls	r3, r3, #1
 80120f4:	4413      	add	r3, r2
 80120f6:	00db      	lsls	r3, r3, #3
 80120f8:	440b      	add	r3, r1
 80120fa:	3314      	adds	r3, #20
 80120fc:	2202      	movs	r2, #2
 80120fe:	701a      	strb	r2, [r3, #0]
 8012100:	e01e      	b.n	8012140 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012102:	4915      	ldr	r1, [pc, #84]	@ (8012158 <etharp_tmr+0x14c>)
 8012104:	687a      	ldr	r2, [r7, #4]
 8012106:	4613      	mov	r3, r2
 8012108:	005b      	lsls	r3, r3, #1
 801210a:	4413      	add	r3, r2
 801210c:	00db      	lsls	r3, r3, #3
 801210e:	440b      	add	r3, r1
 8012110:	3314      	adds	r3, #20
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	2b01      	cmp	r3, #1
 8012116:	d113      	bne.n	8012140 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012118:	490f      	ldr	r1, [pc, #60]	@ (8012158 <etharp_tmr+0x14c>)
 801211a:	687a      	ldr	r2, [r7, #4]
 801211c:	4613      	mov	r3, r2
 801211e:	005b      	lsls	r3, r3, #1
 8012120:	4413      	add	r3, r2
 8012122:	00db      	lsls	r3, r3, #3
 8012124:	440b      	add	r3, r1
 8012126:	3308      	adds	r3, #8
 8012128:	6818      	ldr	r0, [r3, #0]
 801212a:	687a      	ldr	r2, [r7, #4]
 801212c:	4613      	mov	r3, r2
 801212e:	005b      	lsls	r3, r3, #1
 8012130:	4413      	add	r3, r2
 8012132:	00db      	lsls	r3, r3, #3
 8012134:	4a08      	ldr	r2, [pc, #32]	@ (8012158 <etharp_tmr+0x14c>)
 8012136:	4413      	add	r3, r2
 8012138:	3304      	adds	r3, #4
 801213a:	4619      	mov	r1, r3
 801213c:	f000 fe6e 	bl	8012e1c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	3301      	adds	r3, #1
 8012144:	607b      	str	r3, [r7, #4]
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	2b09      	cmp	r3, #9
 801214a:	f77f af65 	ble.w	8012018 <etharp_tmr+0xc>
      }
    }
  }
}
 801214e:	bf00      	nop
 8012150:	bf00      	nop
 8012152:	3708      	adds	r7, #8
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}
 8012158:	2000b16c 	.word	0x2000b16c

0801215c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b08a      	sub	sp, #40	@ 0x28
 8012160:	af00      	add	r7, sp, #0
 8012162:	60f8      	str	r0, [r7, #12]
 8012164:	460b      	mov	r3, r1
 8012166:	607a      	str	r2, [r7, #4]
 8012168:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801216a:	230a      	movs	r3, #10
 801216c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801216e:	230a      	movs	r3, #10
 8012170:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012172:	230a      	movs	r3, #10
 8012174:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8012176:	2300      	movs	r3, #0
 8012178:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801217a:	230a      	movs	r3, #10
 801217c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801217e:	2300      	movs	r3, #0
 8012180:	83bb      	strh	r3, [r7, #28]
 8012182:	2300      	movs	r3, #0
 8012184:	837b      	strh	r3, [r7, #26]
 8012186:	2300      	movs	r3, #0
 8012188:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801218a:	2300      	movs	r3, #0
 801218c:	843b      	strh	r3, [r7, #32]
 801218e:	e0ae      	b.n	80122ee <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012190:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012194:	49a6      	ldr	r1, [pc, #664]	@ (8012430 <etharp_find_entry+0x2d4>)
 8012196:	4613      	mov	r3, r2
 8012198:	005b      	lsls	r3, r3, #1
 801219a:	4413      	add	r3, r2
 801219c:	00db      	lsls	r3, r3, #3
 801219e:	440b      	add	r3, r1
 80121a0:	3314      	adds	r3, #20
 80121a2:	781b      	ldrb	r3, [r3, #0]
 80121a4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80121a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80121aa:	2b0a      	cmp	r3, #10
 80121ac:	d105      	bne.n	80121ba <etharp_find_entry+0x5e>
 80121ae:	7dfb      	ldrb	r3, [r7, #23]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d102      	bne.n	80121ba <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80121b4:	8c3b      	ldrh	r3, [r7, #32]
 80121b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80121b8:	e095      	b.n	80122e6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80121ba:	7dfb      	ldrb	r3, [r7, #23]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	f000 8092 	beq.w	80122e6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80121c2:	7dfb      	ldrb	r3, [r7, #23]
 80121c4:	2b01      	cmp	r3, #1
 80121c6:	d009      	beq.n	80121dc <etharp_find_entry+0x80>
 80121c8:	7dfb      	ldrb	r3, [r7, #23]
 80121ca:	2b01      	cmp	r3, #1
 80121cc:	d806      	bhi.n	80121dc <etharp_find_entry+0x80>
 80121ce:	4b99      	ldr	r3, [pc, #612]	@ (8012434 <etharp_find_entry+0x2d8>)
 80121d0:	f240 1223 	movw	r2, #291	@ 0x123
 80121d4:	4998      	ldr	r1, [pc, #608]	@ (8012438 <etharp_find_entry+0x2dc>)
 80121d6:	4899      	ldr	r0, [pc, #612]	@ (801243c <etharp_find_entry+0x2e0>)
 80121d8:	f002 faac 	bl	8014734 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d020      	beq.n	8012224 <etharp_find_entry+0xc8>
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	6819      	ldr	r1, [r3, #0]
 80121e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121ea:	4891      	ldr	r0, [pc, #580]	@ (8012430 <etharp_find_entry+0x2d4>)
 80121ec:	4613      	mov	r3, r2
 80121ee:	005b      	lsls	r3, r3, #1
 80121f0:	4413      	add	r3, r2
 80121f2:	00db      	lsls	r3, r3, #3
 80121f4:	4403      	add	r3, r0
 80121f6:	3304      	adds	r3, #4
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	4299      	cmp	r1, r3
 80121fc:	d112      	bne.n	8012224 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d00c      	beq.n	801221e <etharp_find_entry+0xc2>
 8012204:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012208:	4989      	ldr	r1, [pc, #548]	@ (8012430 <etharp_find_entry+0x2d4>)
 801220a:	4613      	mov	r3, r2
 801220c:	005b      	lsls	r3, r3, #1
 801220e:	4413      	add	r3, r2
 8012210:	00db      	lsls	r3, r3, #3
 8012212:	440b      	add	r3, r1
 8012214:	3308      	adds	r3, #8
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	687a      	ldr	r2, [r7, #4]
 801221a:	429a      	cmp	r2, r3
 801221c:	d102      	bne.n	8012224 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801221e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012222:	e100      	b.n	8012426 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012224:	7dfb      	ldrb	r3, [r7, #23]
 8012226:	2b01      	cmp	r3, #1
 8012228:	d140      	bne.n	80122ac <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801222a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801222e:	4980      	ldr	r1, [pc, #512]	@ (8012430 <etharp_find_entry+0x2d4>)
 8012230:	4613      	mov	r3, r2
 8012232:	005b      	lsls	r3, r3, #1
 8012234:	4413      	add	r3, r2
 8012236:	00db      	lsls	r3, r3, #3
 8012238:	440b      	add	r3, r1
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d01a      	beq.n	8012276 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012240:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012244:	497a      	ldr	r1, [pc, #488]	@ (8012430 <etharp_find_entry+0x2d4>)
 8012246:	4613      	mov	r3, r2
 8012248:	005b      	lsls	r3, r3, #1
 801224a:	4413      	add	r3, r2
 801224c:	00db      	lsls	r3, r3, #3
 801224e:	440b      	add	r3, r1
 8012250:	3312      	adds	r3, #18
 8012252:	881b      	ldrh	r3, [r3, #0]
 8012254:	8bba      	ldrh	r2, [r7, #28]
 8012256:	429a      	cmp	r2, r3
 8012258:	d845      	bhi.n	80122e6 <etharp_find_entry+0x18a>
            old_queue = i;
 801225a:	8c3b      	ldrh	r3, [r7, #32]
 801225c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801225e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012262:	4973      	ldr	r1, [pc, #460]	@ (8012430 <etharp_find_entry+0x2d4>)
 8012264:	4613      	mov	r3, r2
 8012266:	005b      	lsls	r3, r3, #1
 8012268:	4413      	add	r3, r2
 801226a:	00db      	lsls	r3, r3, #3
 801226c:	440b      	add	r3, r1
 801226e:	3312      	adds	r3, #18
 8012270:	881b      	ldrh	r3, [r3, #0]
 8012272:	83bb      	strh	r3, [r7, #28]
 8012274:	e037      	b.n	80122e6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012276:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801227a:	496d      	ldr	r1, [pc, #436]	@ (8012430 <etharp_find_entry+0x2d4>)
 801227c:	4613      	mov	r3, r2
 801227e:	005b      	lsls	r3, r3, #1
 8012280:	4413      	add	r3, r2
 8012282:	00db      	lsls	r3, r3, #3
 8012284:	440b      	add	r3, r1
 8012286:	3312      	adds	r3, #18
 8012288:	881b      	ldrh	r3, [r3, #0]
 801228a:	8b7a      	ldrh	r2, [r7, #26]
 801228c:	429a      	cmp	r2, r3
 801228e:	d82a      	bhi.n	80122e6 <etharp_find_entry+0x18a>
            old_pending = i;
 8012290:	8c3b      	ldrh	r3, [r7, #32]
 8012292:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8012294:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012298:	4965      	ldr	r1, [pc, #404]	@ (8012430 <etharp_find_entry+0x2d4>)
 801229a:	4613      	mov	r3, r2
 801229c:	005b      	lsls	r3, r3, #1
 801229e:	4413      	add	r3, r2
 80122a0:	00db      	lsls	r3, r3, #3
 80122a2:	440b      	add	r3, r1
 80122a4:	3312      	adds	r3, #18
 80122a6:	881b      	ldrh	r3, [r3, #0]
 80122a8:	837b      	strh	r3, [r7, #26]
 80122aa:	e01c      	b.n	80122e6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80122ac:	7dfb      	ldrb	r3, [r7, #23]
 80122ae:	2b01      	cmp	r3, #1
 80122b0:	d919      	bls.n	80122e6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80122b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122b6:	495e      	ldr	r1, [pc, #376]	@ (8012430 <etharp_find_entry+0x2d4>)
 80122b8:	4613      	mov	r3, r2
 80122ba:	005b      	lsls	r3, r3, #1
 80122bc:	4413      	add	r3, r2
 80122be:	00db      	lsls	r3, r3, #3
 80122c0:	440b      	add	r3, r1
 80122c2:	3312      	adds	r3, #18
 80122c4:	881b      	ldrh	r3, [r3, #0]
 80122c6:	8b3a      	ldrh	r2, [r7, #24]
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d80c      	bhi.n	80122e6 <etharp_find_entry+0x18a>
            old_stable = i;
 80122cc:	8c3b      	ldrh	r3, [r7, #32]
 80122ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80122d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122d4:	4956      	ldr	r1, [pc, #344]	@ (8012430 <etharp_find_entry+0x2d4>)
 80122d6:	4613      	mov	r3, r2
 80122d8:	005b      	lsls	r3, r3, #1
 80122da:	4413      	add	r3, r2
 80122dc:	00db      	lsls	r3, r3, #3
 80122de:	440b      	add	r3, r1
 80122e0:	3312      	adds	r3, #18
 80122e2:	881b      	ldrh	r3, [r3, #0]
 80122e4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80122e6:	8c3b      	ldrh	r3, [r7, #32]
 80122e8:	3301      	adds	r3, #1
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	843b      	strh	r3, [r7, #32]
 80122ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80122f2:	2b09      	cmp	r3, #9
 80122f4:	f77f af4c 	ble.w	8012190 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80122f8:	7afb      	ldrb	r3, [r7, #11]
 80122fa:	f003 0302 	and.w	r3, r3, #2
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d108      	bne.n	8012314 <etharp_find_entry+0x1b8>
 8012302:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012306:	2b0a      	cmp	r3, #10
 8012308:	d107      	bne.n	801231a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801230a:	7afb      	ldrb	r3, [r7, #11]
 801230c:	f003 0301 	and.w	r3, r3, #1
 8012310:	2b00      	cmp	r3, #0
 8012312:	d102      	bne.n	801231a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012314:	f04f 33ff 	mov.w	r3, #4294967295
 8012318:	e085      	b.n	8012426 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801231a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801231e:	2b09      	cmp	r3, #9
 8012320:	dc02      	bgt.n	8012328 <etharp_find_entry+0x1cc>
    i = empty;
 8012322:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012324:	843b      	strh	r3, [r7, #32]
 8012326:	e039      	b.n	801239c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012328:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801232c:	2b09      	cmp	r3, #9
 801232e:	dc14      	bgt.n	801235a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012330:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012332:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012334:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012338:	493d      	ldr	r1, [pc, #244]	@ (8012430 <etharp_find_entry+0x2d4>)
 801233a:	4613      	mov	r3, r2
 801233c:	005b      	lsls	r3, r3, #1
 801233e:	4413      	add	r3, r2
 8012340:	00db      	lsls	r3, r3, #3
 8012342:	440b      	add	r3, r1
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d018      	beq.n	801237c <etharp_find_entry+0x220>
 801234a:	4b3a      	ldr	r3, [pc, #232]	@ (8012434 <etharp_find_entry+0x2d8>)
 801234c:	f240 126d 	movw	r2, #365	@ 0x16d
 8012350:	493b      	ldr	r1, [pc, #236]	@ (8012440 <etharp_find_entry+0x2e4>)
 8012352:	483a      	ldr	r0, [pc, #232]	@ (801243c <etharp_find_entry+0x2e0>)
 8012354:	f002 f9ee 	bl	8014734 <iprintf>
 8012358:	e010      	b.n	801237c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801235a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801235e:	2b09      	cmp	r3, #9
 8012360:	dc02      	bgt.n	8012368 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012362:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012364:	843b      	strh	r3, [r7, #32]
 8012366:	e009      	b.n	801237c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012368:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801236c:	2b09      	cmp	r3, #9
 801236e:	dc02      	bgt.n	8012376 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012370:	8bfb      	ldrh	r3, [r7, #30]
 8012372:	843b      	strh	r3, [r7, #32]
 8012374:	e002      	b.n	801237c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012376:	f04f 33ff 	mov.w	r3, #4294967295
 801237a:	e054      	b.n	8012426 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801237c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012380:	2b09      	cmp	r3, #9
 8012382:	dd06      	ble.n	8012392 <etharp_find_entry+0x236>
 8012384:	4b2b      	ldr	r3, [pc, #172]	@ (8012434 <etharp_find_entry+0x2d8>)
 8012386:	f240 127f 	movw	r2, #383	@ 0x17f
 801238a:	492e      	ldr	r1, [pc, #184]	@ (8012444 <etharp_find_entry+0x2e8>)
 801238c:	482b      	ldr	r0, [pc, #172]	@ (801243c <etharp_find_entry+0x2e0>)
 801238e:	f002 f9d1 	bl	8014734 <iprintf>
    etharp_free_entry(i);
 8012392:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012396:	4618      	mov	r0, r3
 8012398:	f7ff fe06 	bl	8011fa8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801239c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80123a0:	2b09      	cmp	r3, #9
 80123a2:	dd06      	ble.n	80123b2 <etharp_find_entry+0x256>
 80123a4:	4b23      	ldr	r3, [pc, #140]	@ (8012434 <etharp_find_entry+0x2d8>)
 80123a6:	f240 1283 	movw	r2, #387	@ 0x183
 80123aa:	4926      	ldr	r1, [pc, #152]	@ (8012444 <etharp_find_entry+0x2e8>)
 80123ac:	4823      	ldr	r0, [pc, #140]	@ (801243c <etharp_find_entry+0x2e0>)
 80123ae:	f002 f9c1 	bl	8014734 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80123b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123b6:	491e      	ldr	r1, [pc, #120]	@ (8012430 <etharp_find_entry+0x2d4>)
 80123b8:	4613      	mov	r3, r2
 80123ba:	005b      	lsls	r3, r3, #1
 80123bc:	4413      	add	r3, r2
 80123be:	00db      	lsls	r3, r3, #3
 80123c0:	440b      	add	r3, r1
 80123c2:	3314      	adds	r3, #20
 80123c4:	781b      	ldrb	r3, [r3, #0]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d006      	beq.n	80123d8 <etharp_find_entry+0x27c>
 80123ca:	4b1a      	ldr	r3, [pc, #104]	@ (8012434 <etharp_find_entry+0x2d8>)
 80123cc:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80123d0:	491d      	ldr	r1, [pc, #116]	@ (8012448 <etharp_find_entry+0x2ec>)
 80123d2:	481a      	ldr	r0, [pc, #104]	@ (801243c <etharp_find_entry+0x2e0>)
 80123d4:	f002 f9ae 	bl	8014734 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d00b      	beq.n	80123f6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80123de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	6819      	ldr	r1, [r3, #0]
 80123e6:	4812      	ldr	r0, [pc, #72]	@ (8012430 <etharp_find_entry+0x2d4>)
 80123e8:	4613      	mov	r3, r2
 80123ea:	005b      	lsls	r3, r3, #1
 80123ec:	4413      	add	r3, r2
 80123ee:	00db      	lsls	r3, r3, #3
 80123f0:	4403      	add	r3, r0
 80123f2:	3304      	adds	r3, #4
 80123f4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80123f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123fa:	490d      	ldr	r1, [pc, #52]	@ (8012430 <etharp_find_entry+0x2d4>)
 80123fc:	4613      	mov	r3, r2
 80123fe:	005b      	lsls	r3, r3, #1
 8012400:	4413      	add	r3, r2
 8012402:	00db      	lsls	r3, r3, #3
 8012404:	440b      	add	r3, r1
 8012406:	3312      	adds	r3, #18
 8012408:	2200      	movs	r2, #0
 801240a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801240c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012410:	4907      	ldr	r1, [pc, #28]	@ (8012430 <etharp_find_entry+0x2d4>)
 8012412:	4613      	mov	r3, r2
 8012414:	005b      	lsls	r3, r3, #1
 8012416:	4413      	add	r3, r2
 8012418:	00db      	lsls	r3, r3, #3
 801241a:	440b      	add	r3, r1
 801241c:	3308      	adds	r3, #8
 801241e:	687a      	ldr	r2, [r7, #4]
 8012420:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012422:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012426:	4618      	mov	r0, r3
 8012428:	3728      	adds	r7, #40	@ 0x28
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}
 801242e:	bf00      	nop
 8012430:	2000b16c 	.word	0x2000b16c
 8012434:	08017878 	.word	0x08017878
 8012438:	080178b0 	.word	0x080178b0
 801243c:	080178f0 	.word	0x080178f0
 8012440:	08017918 	.word	0x08017918
 8012444:	08017930 	.word	0x08017930
 8012448:	08017944 	.word	0x08017944

0801244c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b088      	sub	sp, #32
 8012450:	af02      	add	r7, sp, #8
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	607a      	str	r2, [r7, #4]
 8012458:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012460:	2b06      	cmp	r3, #6
 8012462:	d006      	beq.n	8012472 <etharp_update_arp_entry+0x26>
 8012464:	4b48      	ldr	r3, [pc, #288]	@ (8012588 <etharp_update_arp_entry+0x13c>)
 8012466:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801246a:	4948      	ldr	r1, [pc, #288]	@ (801258c <etharp_update_arp_entry+0x140>)
 801246c:	4848      	ldr	r0, [pc, #288]	@ (8012590 <etharp_update_arp_entry+0x144>)
 801246e:	f002 f961 	bl	8014734 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d012      	beq.n	801249e <etharp_update_arp_entry+0x52>
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d00e      	beq.n	801249e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	68f9      	ldr	r1, [r7, #12]
 8012486:	4618      	mov	r0, r3
 8012488:	f001 f8fe 	bl	8013688 <ip4_addr_isbroadcast_u32>
 801248c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801248e:	2b00      	cmp	r3, #0
 8012490:	d105      	bne.n	801249e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801249a:	2be0      	cmp	r3, #224	@ 0xe0
 801249c:	d102      	bne.n	80124a4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801249e:	f06f 030f 	mvn.w	r3, #15
 80124a2:	e06c      	b.n	801257e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80124a4:	78fb      	ldrb	r3, [r7, #3]
 80124a6:	68fa      	ldr	r2, [r7, #12]
 80124a8:	4619      	mov	r1, r3
 80124aa:	68b8      	ldr	r0, [r7, #8]
 80124ac:	f7ff fe56 	bl	801215c <etharp_find_entry>
 80124b0:	4603      	mov	r3, r0
 80124b2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80124b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	da02      	bge.n	80124c2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80124bc:	8afb      	ldrh	r3, [r7, #22]
 80124be:	b25b      	sxtb	r3, r3
 80124c0:	e05d      	b.n	801257e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80124c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124c6:	4933      	ldr	r1, [pc, #204]	@ (8012594 <etharp_update_arp_entry+0x148>)
 80124c8:	4613      	mov	r3, r2
 80124ca:	005b      	lsls	r3, r3, #1
 80124cc:	4413      	add	r3, r2
 80124ce:	00db      	lsls	r3, r3, #3
 80124d0:	440b      	add	r3, r1
 80124d2:	3314      	adds	r3, #20
 80124d4:	2202      	movs	r2, #2
 80124d6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80124d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124dc:	492d      	ldr	r1, [pc, #180]	@ (8012594 <etharp_update_arp_entry+0x148>)
 80124de:	4613      	mov	r3, r2
 80124e0:	005b      	lsls	r3, r3, #1
 80124e2:	4413      	add	r3, r2
 80124e4:	00db      	lsls	r3, r3, #3
 80124e6:	440b      	add	r3, r1
 80124e8:	3308      	adds	r3, #8
 80124ea:	68fa      	ldr	r2, [r7, #12]
 80124ec:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80124ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124f2:	4613      	mov	r3, r2
 80124f4:	005b      	lsls	r3, r3, #1
 80124f6:	4413      	add	r3, r2
 80124f8:	00db      	lsls	r3, r3, #3
 80124fa:	3308      	adds	r3, #8
 80124fc:	4a25      	ldr	r2, [pc, #148]	@ (8012594 <etharp_update_arp_entry+0x148>)
 80124fe:	4413      	add	r3, r2
 8012500:	3304      	adds	r3, #4
 8012502:	2206      	movs	r2, #6
 8012504:	6879      	ldr	r1, [r7, #4]
 8012506:	4618      	mov	r0, r3
 8012508:	f002 f9ef 	bl	80148ea <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801250c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012510:	4920      	ldr	r1, [pc, #128]	@ (8012594 <etharp_update_arp_entry+0x148>)
 8012512:	4613      	mov	r3, r2
 8012514:	005b      	lsls	r3, r3, #1
 8012516:	4413      	add	r3, r2
 8012518:	00db      	lsls	r3, r3, #3
 801251a:	440b      	add	r3, r1
 801251c:	3312      	adds	r3, #18
 801251e:	2200      	movs	r2, #0
 8012520:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012522:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012526:	491b      	ldr	r1, [pc, #108]	@ (8012594 <etharp_update_arp_entry+0x148>)
 8012528:	4613      	mov	r3, r2
 801252a:	005b      	lsls	r3, r3, #1
 801252c:	4413      	add	r3, r2
 801252e:	00db      	lsls	r3, r3, #3
 8012530:	440b      	add	r3, r1
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d021      	beq.n	801257c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012538:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801253c:	4915      	ldr	r1, [pc, #84]	@ (8012594 <etharp_update_arp_entry+0x148>)
 801253e:	4613      	mov	r3, r2
 8012540:	005b      	lsls	r3, r3, #1
 8012542:	4413      	add	r3, r2
 8012544:	00db      	lsls	r3, r3, #3
 8012546:	440b      	add	r3, r1
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801254c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012550:	4910      	ldr	r1, [pc, #64]	@ (8012594 <etharp_update_arp_entry+0x148>)
 8012552:	4613      	mov	r3, r2
 8012554:	005b      	lsls	r3, r3, #1
 8012556:	4413      	add	r3, r2
 8012558:	00db      	lsls	r3, r3, #3
 801255a:	440b      	add	r3, r1
 801255c:	2200      	movs	r2, #0
 801255e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8012566:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801256a:	9300      	str	r3, [sp, #0]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6939      	ldr	r1, [r7, #16]
 8012570:	68f8      	ldr	r0, [r7, #12]
 8012572:	f001 ff97 	bl	80144a4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012576:	6938      	ldr	r0, [r7, #16]
 8012578:	f7f9 fa6e 	bl	800ba58 <pbuf_free>
  }
  return ERR_OK;
 801257c:	2300      	movs	r3, #0
}
 801257e:	4618      	mov	r0, r3
 8012580:	3718      	adds	r7, #24
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}
 8012586:	bf00      	nop
 8012588:	08017878 	.word	0x08017878
 801258c:	08017970 	.word	0x08017970
 8012590:	080178f0 	.word	0x080178f0
 8012594:	2000b16c 	.word	0x2000b16c

08012598 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b084      	sub	sp, #16
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80125a0:	2300      	movs	r3, #0
 80125a2:	60fb      	str	r3, [r7, #12]
 80125a4:	e01e      	b.n	80125e4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80125a6:	4913      	ldr	r1, [pc, #76]	@ (80125f4 <etharp_cleanup_netif+0x5c>)
 80125a8:	68fa      	ldr	r2, [r7, #12]
 80125aa:	4613      	mov	r3, r2
 80125ac:	005b      	lsls	r3, r3, #1
 80125ae:	4413      	add	r3, r2
 80125b0:	00db      	lsls	r3, r3, #3
 80125b2:	440b      	add	r3, r1
 80125b4:	3314      	adds	r3, #20
 80125b6:	781b      	ldrb	r3, [r3, #0]
 80125b8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80125ba:	7afb      	ldrb	r3, [r7, #11]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d00e      	beq.n	80125de <etharp_cleanup_netif+0x46>
 80125c0:	490c      	ldr	r1, [pc, #48]	@ (80125f4 <etharp_cleanup_netif+0x5c>)
 80125c2:	68fa      	ldr	r2, [r7, #12]
 80125c4:	4613      	mov	r3, r2
 80125c6:	005b      	lsls	r3, r3, #1
 80125c8:	4413      	add	r3, r2
 80125ca:	00db      	lsls	r3, r3, #3
 80125cc:	440b      	add	r3, r1
 80125ce:	3308      	adds	r3, #8
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	687a      	ldr	r2, [r7, #4]
 80125d4:	429a      	cmp	r2, r3
 80125d6:	d102      	bne.n	80125de <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80125d8:	68f8      	ldr	r0, [r7, #12]
 80125da:	f7ff fce5 	bl	8011fa8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	3301      	adds	r3, #1
 80125e2:	60fb      	str	r3, [r7, #12]
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	2b09      	cmp	r3, #9
 80125e8:	dddd      	ble.n	80125a6 <etharp_cleanup_netif+0xe>
    }
  }
}
 80125ea:	bf00      	nop
 80125ec:	bf00      	nop
 80125ee:	3710      	adds	r7, #16
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}
 80125f4:	2000b16c 	.word	0x2000b16c

080125f8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80125f8:	b5b0      	push	{r4, r5, r7, lr}
 80125fa:	b08a      	sub	sp, #40	@ 0x28
 80125fc:	af04      	add	r7, sp, #16
 80125fe:	6078      	str	r0, [r7, #4]
 8012600:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d107      	bne.n	8012618 <etharp_input+0x20>
 8012608:	4b3d      	ldr	r3, [pc, #244]	@ (8012700 <etharp_input+0x108>)
 801260a:	f240 228a 	movw	r2, #650	@ 0x28a
 801260e:	493d      	ldr	r1, [pc, #244]	@ (8012704 <etharp_input+0x10c>)
 8012610:	483d      	ldr	r0, [pc, #244]	@ (8012708 <etharp_input+0x110>)
 8012612:	f002 f88f 	bl	8014734 <iprintf>
 8012616:	e06f      	b.n	80126f8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	685b      	ldr	r3, [r3, #4]
 801261c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	881b      	ldrh	r3, [r3, #0]
 8012622:	b29b      	uxth	r3, r3
 8012624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012628:	d10c      	bne.n	8012644 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801262a:	693b      	ldr	r3, [r7, #16]
 801262c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801262e:	2b06      	cmp	r3, #6
 8012630:	d108      	bne.n	8012644 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012632:	693b      	ldr	r3, [r7, #16]
 8012634:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012636:	2b04      	cmp	r3, #4
 8012638:	d104      	bne.n	8012644 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801263a:	693b      	ldr	r3, [r7, #16]
 801263c:	885b      	ldrh	r3, [r3, #2]
 801263e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012640:	2b08      	cmp	r3, #8
 8012642:	d003      	beq.n	801264c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f7f9 fa07 	bl	800ba58 <pbuf_free>
    return;
 801264a:	e055      	b.n	80126f8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801264c:	693b      	ldr	r3, [r7, #16]
 801264e:	330e      	adds	r3, #14
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012654:	693b      	ldr	r3, [r7, #16]
 8012656:	3318      	adds	r3, #24
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	3304      	adds	r3, #4
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d102      	bne.n	801266c <etharp_input+0x74>
    for_us = 0;
 8012666:	2300      	movs	r3, #0
 8012668:	75fb      	strb	r3, [r7, #23]
 801266a:	e009      	b.n	8012680 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801266c:	68ba      	ldr	r2, [r7, #8]
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	3304      	adds	r3, #4
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	429a      	cmp	r2, r3
 8012676:	bf0c      	ite	eq
 8012678:	2301      	moveq	r3, #1
 801267a:	2300      	movne	r3, #0
 801267c:	b2db      	uxtb	r3, r3
 801267e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012680:	693b      	ldr	r3, [r7, #16]
 8012682:	f103 0208 	add.w	r2, r3, #8
 8012686:	7dfb      	ldrb	r3, [r7, #23]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d001      	beq.n	8012690 <etharp_input+0x98>
 801268c:	2301      	movs	r3, #1
 801268e:	e000      	b.n	8012692 <etharp_input+0x9a>
 8012690:	2302      	movs	r3, #2
 8012692:	f107 010c 	add.w	r1, r7, #12
 8012696:	6838      	ldr	r0, [r7, #0]
 8012698:	f7ff fed8 	bl	801244c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801269c:	693b      	ldr	r3, [r7, #16]
 801269e:	88db      	ldrh	r3, [r3, #6]
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80126a6:	d003      	beq.n	80126b0 <etharp_input+0xb8>
 80126a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80126ac:	d01e      	beq.n	80126ec <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80126ae:	e020      	b.n	80126f2 <etharp_input+0xfa>
      if (for_us) {
 80126b0:	7dfb      	ldrb	r3, [r7, #23]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d01c      	beq.n	80126f0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80126b6:	683b      	ldr	r3, [r7, #0]
 80126b8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80126cc:	693a      	ldr	r2, [r7, #16]
 80126ce:	3208      	adds	r2, #8
        etharp_raw(netif,
 80126d0:	2102      	movs	r1, #2
 80126d2:	9103      	str	r1, [sp, #12]
 80126d4:	f107 010c 	add.w	r1, r7, #12
 80126d8:	9102      	str	r1, [sp, #8]
 80126da:	9201      	str	r2, [sp, #4]
 80126dc:	9300      	str	r3, [sp, #0]
 80126de:	462b      	mov	r3, r5
 80126e0:	4622      	mov	r2, r4
 80126e2:	4601      	mov	r1, r0
 80126e4:	6838      	ldr	r0, [r7, #0]
 80126e6:	f000 faeb 	bl	8012cc0 <etharp_raw>
      break;
 80126ea:	e001      	b.n	80126f0 <etharp_input+0xf8>
      break;
 80126ec:	bf00      	nop
 80126ee:	e000      	b.n	80126f2 <etharp_input+0xfa>
      break;
 80126f0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f7f9 f9b0 	bl	800ba58 <pbuf_free>
}
 80126f8:	3718      	adds	r7, #24
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bdb0      	pop	{r4, r5, r7, pc}
 80126fe:	bf00      	nop
 8012700:	08017878 	.word	0x08017878
 8012704:	080179c8 	.word	0x080179c8
 8012708:	080178f0 	.word	0x080178f0

0801270c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b086      	sub	sp, #24
 8012710:	af02      	add	r7, sp, #8
 8012712:	60f8      	str	r0, [r7, #12]
 8012714:	60b9      	str	r1, [r7, #8]
 8012716:	4613      	mov	r3, r2
 8012718:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801271a:	79fa      	ldrb	r2, [r7, #7]
 801271c:	4944      	ldr	r1, [pc, #272]	@ (8012830 <etharp_output_to_arp_index+0x124>)
 801271e:	4613      	mov	r3, r2
 8012720:	005b      	lsls	r3, r3, #1
 8012722:	4413      	add	r3, r2
 8012724:	00db      	lsls	r3, r3, #3
 8012726:	440b      	add	r3, r1
 8012728:	3314      	adds	r3, #20
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	2b01      	cmp	r3, #1
 801272e:	d806      	bhi.n	801273e <etharp_output_to_arp_index+0x32>
 8012730:	4b40      	ldr	r3, [pc, #256]	@ (8012834 <etharp_output_to_arp_index+0x128>)
 8012732:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012736:	4940      	ldr	r1, [pc, #256]	@ (8012838 <etharp_output_to_arp_index+0x12c>)
 8012738:	4840      	ldr	r0, [pc, #256]	@ (801283c <etharp_output_to_arp_index+0x130>)
 801273a:	f001 fffb 	bl	8014734 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801273e:	79fa      	ldrb	r2, [r7, #7]
 8012740:	493b      	ldr	r1, [pc, #236]	@ (8012830 <etharp_output_to_arp_index+0x124>)
 8012742:	4613      	mov	r3, r2
 8012744:	005b      	lsls	r3, r3, #1
 8012746:	4413      	add	r3, r2
 8012748:	00db      	lsls	r3, r3, #3
 801274a:	440b      	add	r3, r1
 801274c:	3314      	adds	r3, #20
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	2b02      	cmp	r3, #2
 8012752:	d153      	bne.n	80127fc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012754:	79fa      	ldrb	r2, [r7, #7]
 8012756:	4936      	ldr	r1, [pc, #216]	@ (8012830 <etharp_output_to_arp_index+0x124>)
 8012758:	4613      	mov	r3, r2
 801275a:	005b      	lsls	r3, r3, #1
 801275c:	4413      	add	r3, r2
 801275e:	00db      	lsls	r3, r3, #3
 8012760:	440b      	add	r3, r1
 8012762:	3312      	adds	r3, #18
 8012764:	881b      	ldrh	r3, [r3, #0]
 8012766:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801276a:	d919      	bls.n	80127a0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801276c:	79fa      	ldrb	r2, [r7, #7]
 801276e:	4613      	mov	r3, r2
 8012770:	005b      	lsls	r3, r3, #1
 8012772:	4413      	add	r3, r2
 8012774:	00db      	lsls	r3, r3, #3
 8012776:	4a2e      	ldr	r2, [pc, #184]	@ (8012830 <etharp_output_to_arp_index+0x124>)
 8012778:	4413      	add	r3, r2
 801277a:	3304      	adds	r3, #4
 801277c:	4619      	mov	r1, r3
 801277e:	68f8      	ldr	r0, [r7, #12]
 8012780:	f000 fb4c 	bl	8012e1c <etharp_request>
 8012784:	4603      	mov	r3, r0
 8012786:	2b00      	cmp	r3, #0
 8012788:	d138      	bne.n	80127fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801278a:	79fa      	ldrb	r2, [r7, #7]
 801278c:	4928      	ldr	r1, [pc, #160]	@ (8012830 <etharp_output_to_arp_index+0x124>)
 801278e:	4613      	mov	r3, r2
 8012790:	005b      	lsls	r3, r3, #1
 8012792:	4413      	add	r3, r2
 8012794:	00db      	lsls	r3, r3, #3
 8012796:	440b      	add	r3, r1
 8012798:	3314      	adds	r3, #20
 801279a:	2203      	movs	r2, #3
 801279c:	701a      	strb	r2, [r3, #0]
 801279e:	e02d      	b.n	80127fc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80127a0:	79fa      	ldrb	r2, [r7, #7]
 80127a2:	4923      	ldr	r1, [pc, #140]	@ (8012830 <etharp_output_to_arp_index+0x124>)
 80127a4:	4613      	mov	r3, r2
 80127a6:	005b      	lsls	r3, r3, #1
 80127a8:	4413      	add	r3, r2
 80127aa:	00db      	lsls	r3, r3, #3
 80127ac:	440b      	add	r3, r1
 80127ae:	3312      	adds	r3, #18
 80127b0:	881b      	ldrh	r3, [r3, #0]
 80127b2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80127b6:	d321      	bcc.n	80127fc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80127b8:	79fa      	ldrb	r2, [r7, #7]
 80127ba:	4613      	mov	r3, r2
 80127bc:	005b      	lsls	r3, r3, #1
 80127be:	4413      	add	r3, r2
 80127c0:	00db      	lsls	r3, r3, #3
 80127c2:	4a1b      	ldr	r2, [pc, #108]	@ (8012830 <etharp_output_to_arp_index+0x124>)
 80127c4:	4413      	add	r3, r2
 80127c6:	1d19      	adds	r1, r3, #4
 80127c8:	79fa      	ldrb	r2, [r7, #7]
 80127ca:	4613      	mov	r3, r2
 80127cc:	005b      	lsls	r3, r3, #1
 80127ce:	4413      	add	r3, r2
 80127d0:	00db      	lsls	r3, r3, #3
 80127d2:	3308      	adds	r3, #8
 80127d4:	4a16      	ldr	r2, [pc, #88]	@ (8012830 <etharp_output_to_arp_index+0x124>)
 80127d6:	4413      	add	r3, r2
 80127d8:	3304      	adds	r3, #4
 80127da:	461a      	mov	r2, r3
 80127dc:	68f8      	ldr	r0, [r7, #12]
 80127de:	f000 fafb 	bl	8012dd8 <etharp_request_dst>
 80127e2:	4603      	mov	r3, r0
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d109      	bne.n	80127fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80127e8:	79fa      	ldrb	r2, [r7, #7]
 80127ea:	4911      	ldr	r1, [pc, #68]	@ (8012830 <etharp_output_to_arp_index+0x124>)
 80127ec:	4613      	mov	r3, r2
 80127ee:	005b      	lsls	r3, r3, #1
 80127f0:	4413      	add	r3, r2
 80127f2:	00db      	lsls	r3, r3, #3
 80127f4:	440b      	add	r3, r1
 80127f6:	3314      	adds	r3, #20
 80127f8:	2203      	movs	r2, #3
 80127fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8012802:	79fa      	ldrb	r2, [r7, #7]
 8012804:	4613      	mov	r3, r2
 8012806:	005b      	lsls	r3, r3, #1
 8012808:	4413      	add	r3, r2
 801280a:	00db      	lsls	r3, r3, #3
 801280c:	3308      	adds	r3, #8
 801280e:	4a08      	ldr	r2, [pc, #32]	@ (8012830 <etharp_output_to_arp_index+0x124>)
 8012810:	4413      	add	r3, r2
 8012812:	3304      	adds	r3, #4
 8012814:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012818:	9200      	str	r2, [sp, #0]
 801281a:	460a      	mov	r2, r1
 801281c:	68b9      	ldr	r1, [r7, #8]
 801281e:	68f8      	ldr	r0, [r7, #12]
 8012820:	f001 fe40 	bl	80144a4 <ethernet_output>
 8012824:	4603      	mov	r3, r0
}
 8012826:	4618      	mov	r0, r3
 8012828:	3710      	adds	r7, #16
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}
 801282e:	bf00      	nop
 8012830:	2000b16c 	.word	0x2000b16c
 8012834:	08017878 	.word	0x08017878
 8012838:	080179e8 	.word	0x080179e8
 801283c:	080178f0 	.word	0x080178f0

08012840 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b08a      	sub	sp, #40	@ 0x28
 8012844:	af02      	add	r7, sp, #8
 8012846:	60f8      	str	r0, [r7, #12]
 8012848:	60b9      	str	r1, [r7, #8]
 801284a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d106      	bne.n	8012864 <etharp_output+0x24>
 8012856:	4b73      	ldr	r3, [pc, #460]	@ (8012a24 <etharp_output+0x1e4>)
 8012858:	f240 321e 	movw	r2, #798	@ 0x31e
 801285c:	4972      	ldr	r1, [pc, #456]	@ (8012a28 <etharp_output+0x1e8>)
 801285e:	4873      	ldr	r0, [pc, #460]	@ (8012a2c <etharp_output+0x1ec>)
 8012860:	f001 ff68 	bl	8014734 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d106      	bne.n	8012878 <etharp_output+0x38>
 801286a:	4b6e      	ldr	r3, [pc, #440]	@ (8012a24 <etharp_output+0x1e4>)
 801286c:	f240 321f 	movw	r2, #799	@ 0x31f
 8012870:	496f      	ldr	r1, [pc, #444]	@ (8012a30 <etharp_output+0x1f0>)
 8012872:	486e      	ldr	r0, [pc, #440]	@ (8012a2c <etharp_output+0x1ec>)
 8012874:	f001 ff5e 	bl	8014734 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d106      	bne.n	801288c <etharp_output+0x4c>
 801287e:	4b69      	ldr	r3, [pc, #420]	@ (8012a24 <etharp_output+0x1e4>)
 8012880:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8012884:	496b      	ldr	r1, [pc, #428]	@ (8012a34 <etharp_output+0x1f4>)
 8012886:	4869      	ldr	r0, [pc, #420]	@ (8012a2c <etharp_output+0x1ec>)
 8012888:	f001 ff54 	bl	8014734 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	68f9      	ldr	r1, [r7, #12]
 8012892:	4618      	mov	r0, r3
 8012894:	f000 fef8 	bl	8013688 <ip4_addr_isbroadcast_u32>
 8012898:	4603      	mov	r3, r0
 801289a:	2b00      	cmp	r3, #0
 801289c:	d002      	beq.n	80128a4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801289e:	4b66      	ldr	r3, [pc, #408]	@ (8012a38 <etharp_output+0x1f8>)
 80128a0:	61fb      	str	r3, [r7, #28]
 80128a2:	e0af      	b.n	8012a04 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80128ac:	2be0      	cmp	r3, #224	@ 0xe0
 80128ae:	d118      	bne.n	80128e2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80128b0:	2301      	movs	r3, #1
 80128b2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80128b4:	2300      	movs	r3, #0
 80128b6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80128b8:	235e      	movs	r3, #94	@ 0x5e
 80128ba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	3301      	adds	r3, #1
 80128c0:	781b      	ldrb	r3, [r3, #0]
 80128c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80128c6:	b2db      	uxtb	r3, r3
 80128c8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	3302      	adds	r3, #2
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	3303      	adds	r3, #3
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80128da:	f107 0310 	add.w	r3, r7, #16
 80128de:	61fb      	str	r3, [r7, #28]
 80128e0:	e090      	b.n	8012a04 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	681a      	ldr	r2, [r3, #0]
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	3304      	adds	r3, #4
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	405a      	eors	r2, r3
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	3308      	adds	r3, #8
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	4013      	ands	r3, r2
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d012      	beq.n	8012920 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012900:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8012904:	4293      	cmp	r3, r2
 8012906:	d00b      	beq.n	8012920 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	330c      	adds	r3, #12
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d003      	beq.n	801291a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	330c      	adds	r3, #12
 8012916:	61bb      	str	r3, [r7, #24]
 8012918:	e002      	b.n	8012920 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801291a:	f06f 0303 	mvn.w	r3, #3
 801291e:	e07d      	b.n	8012a1c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012920:	4b46      	ldr	r3, [pc, #280]	@ (8012a3c <etharp_output+0x1fc>)
 8012922:	781b      	ldrb	r3, [r3, #0]
 8012924:	4619      	mov	r1, r3
 8012926:	4a46      	ldr	r2, [pc, #280]	@ (8012a40 <etharp_output+0x200>)
 8012928:	460b      	mov	r3, r1
 801292a:	005b      	lsls	r3, r3, #1
 801292c:	440b      	add	r3, r1
 801292e:	00db      	lsls	r3, r3, #3
 8012930:	4413      	add	r3, r2
 8012932:	3314      	adds	r3, #20
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	2b01      	cmp	r3, #1
 8012938:	d925      	bls.n	8012986 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801293a:	4b40      	ldr	r3, [pc, #256]	@ (8012a3c <etharp_output+0x1fc>)
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	4619      	mov	r1, r3
 8012940:	4a3f      	ldr	r2, [pc, #252]	@ (8012a40 <etharp_output+0x200>)
 8012942:	460b      	mov	r3, r1
 8012944:	005b      	lsls	r3, r3, #1
 8012946:	440b      	add	r3, r1
 8012948:	00db      	lsls	r3, r3, #3
 801294a:	4413      	add	r3, r2
 801294c:	3308      	adds	r3, #8
 801294e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012950:	68fa      	ldr	r2, [r7, #12]
 8012952:	429a      	cmp	r2, r3
 8012954:	d117      	bne.n	8012986 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012956:	69bb      	ldr	r3, [r7, #24]
 8012958:	681a      	ldr	r2, [r3, #0]
 801295a:	4b38      	ldr	r3, [pc, #224]	@ (8012a3c <etharp_output+0x1fc>)
 801295c:	781b      	ldrb	r3, [r3, #0]
 801295e:	4618      	mov	r0, r3
 8012960:	4937      	ldr	r1, [pc, #220]	@ (8012a40 <etharp_output+0x200>)
 8012962:	4603      	mov	r3, r0
 8012964:	005b      	lsls	r3, r3, #1
 8012966:	4403      	add	r3, r0
 8012968:	00db      	lsls	r3, r3, #3
 801296a:	440b      	add	r3, r1
 801296c:	3304      	adds	r3, #4
 801296e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012970:	429a      	cmp	r2, r3
 8012972:	d108      	bne.n	8012986 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012974:	4b31      	ldr	r3, [pc, #196]	@ (8012a3c <etharp_output+0x1fc>)
 8012976:	781b      	ldrb	r3, [r3, #0]
 8012978:	461a      	mov	r2, r3
 801297a:	68b9      	ldr	r1, [r7, #8]
 801297c:	68f8      	ldr	r0, [r7, #12]
 801297e:	f7ff fec5 	bl	801270c <etharp_output_to_arp_index>
 8012982:	4603      	mov	r3, r0
 8012984:	e04a      	b.n	8012a1c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012986:	2300      	movs	r3, #0
 8012988:	75fb      	strb	r3, [r7, #23]
 801298a:	e031      	b.n	80129f0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801298c:	7dfa      	ldrb	r2, [r7, #23]
 801298e:	492c      	ldr	r1, [pc, #176]	@ (8012a40 <etharp_output+0x200>)
 8012990:	4613      	mov	r3, r2
 8012992:	005b      	lsls	r3, r3, #1
 8012994:	4413      	add	r3, r2
 8012996:	00db      	lsls	r3, r3, #3
 8012998:	440b      	add	r3, r1
 801299a:	3314      	adds	r3, #20
 801299c:	781b      	ldrb	r3, [r3, #0]
 801299e:	2b01      	cmp	r3, #1
 80129a0:	d923      	bls.n	80129ea <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80129a2:	7dfa      	ldrb	r2, [r7, #23]
 80129a4:	4926      	ldr	r1, [pc, #152]	@ (8012a40 <etharp_output+0x200>)
 80129a6:	4613      	mov	r3, r2
 80129a8:	005b      	lsls	r3, r3, #1
 80129aa:	4413      	add	r3, r2
 80129ac:	00db      	lsls	r3, r3, #3
 80129ae:	440b      	add	r3, r1
 80129b0:	3308      	adds	r3, #8
 80129b2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80129b4:	68fa      	ldr	r2, [r7, #12]
 80129b6:	429a      	cmp	r2, r3
 80129b8:	d117      	bne.n	80129ea <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80129ba:	69bb      	ldr	r3, [r7, #24]
 80129bc:	6819      	ldr	r1, [r3, #0]
 80129be:	7dfa      	ldrb	r2, [r7, #23]
 80129c0:	481f      	ldr	r0, [pc, #124]	@ (8012a40 <etharp_output+0x200>)
 80129c2:	4613      	mov	r3, r2
 80129c4:	005b      	lsls	r3, r3, #1
 80129c6:	4413      	add	r3, r2
 80129c8:	00db      	lsls	r3, r3, #3
 80129ca:	4403      	add	r3, r0
 80129cc:	3304      	adds	r3, #4
 80129ce:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80129d0:	4299      	cmp	r1, r3
 80129d2:	d10a      	bne.n	80129ea <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80129d4:	4a19      	ldr	r2, [pc, #100]	@ (8012a3c <etharp_output+0x1fc>)
 80129d6:	7dfb      	ldrb	r3, [r7, #23]
 80129d8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80129da:	7dfb      	ldrb	r3, [r7, #23]
 80129dc:	461a      	mov	r2, r3
 80129de:	68b9      	ldr	r1, [r7, #8]
 80129e0:	68f8      	ldr	r0, [r7, #12]
 80129e2:	f7ff fe93 	bl	801270c <etharp_output_to_arp_index>
 80129e6:	4603      	mov	r3, r0
 80129e8:	e018      	b.n	8012a1c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80129ea:	7dfb      	ldrb	r3, [r7, #23]
 80129ec:	3301      	adds	r3, #1
 80129ee:	75fb      	strb	r3, [r7, #23]
 80129f0:	7dfb      	ldrb	r3, [r7, #23]
 80129f2:	2b09      	cmp	r3, #9
 80129f4:	d9ca      	bls.n	801298c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80129f6:	68ba      	ldr	r2, [r7, #8]
 80129f8:	69b9      	ldr	r1, [r7, #24]
 80129fa:	68f8      	ldr	r0, [r7, #12]
 80129fc:	f000 f822 	bl	8012a44 <etharp_query>
 8012a00:	4603      	mov	r3, r0
 8012a02:	e00b      	b.n	8012a1c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8012a0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012a0e:	9300      	str	r3, [sp, #0]
 8012a10:	69fb      	ldr	r3, [r7, #28]
 8012a12:	68b9      	ldr	r1, [r7, #8]
 8012a14:	68f8      	ldr	r0, [r7, #12]
 8012a16:	f001 fd45 	bl	80144a4 <ethernet_output>
 8012a1a:	4603      	mov	r3, r0
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3720      	adds	r7, #32
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	08017878 	.word	0x08017878
 8012a28:	080179c8 	.word	0x080179c8
 8012a2c:	080178f0 	.word	0x080178f0
 8012a30:	08017a18 	.word	0x08017a18
 8012a34:	080179b8 	.word	0x080179b8
 8012a38:	0801803c 	.word	0x0801803c
 8012a3c:	2000b25c 	.word	0x2000b25c
 8012a40:	2000b16c 	.word	0x2000b16c

08012a44 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b08c      	sub	sp, #48	@ 0x30
 8012a48:	af02      	add	r7, sp, #8
 8012a4a:	60f8      	str	r0, [r7, #12]
 8012a4c:	60b9      	str	r1, [r7, #8]
 8012a4e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	3326      	adds	r3, #38	@ 0x26
 8012a54:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012a56:	23ff      	movs	r3, #255	@ 0xff
 8012a58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	68f9      	ldr	r1, [r7, #12]
 8012a66:	4618      	mov	r0, r3
 8012a68:	f000 fe0e 	bl	8013688 <ip4_addr_isbroadcast_u32>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d10c      	bne.n	8012a8c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012a7a:	2be0      	cmp	r3, #224	@ 0xe0
 8012a7c:	d006      	beq.n	8012a8c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d003      	beq.n	8012a8c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012a84:	68bb      	ldr	r3, [r7, #8]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d102      	bne.n	8012a92 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012a8c:	f06f 030f 	mvn.w	r3, #15
 8012a90:	e101      	b.n	8012c96 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012a92:	68fa      	ldr	r2, [r7, #12]
 8012a94:	2101      	movs	r1, #1
 8012a96:	68b8      	ldr	r0, [r7, #8]
 8012a98:	f7ff fb60 	bl	801215c <etharp_find_entry>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012aa0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	da02      	bge.n	8012aae <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012aa8:	8a7b      	ldrh	r3, [r7, #18]
 8012aaa:	b25b      	sxtb	r3, r3
 8012aac:	e0f3      	b.n	8012c96 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012aae:	8a7b      	ldrh	r3, [r7, #18]
 8012ab0:	2b7e      	cmp	r3, #126	@ 0x7e
 8012ab2:	d906      	bls.n	8012ac2 <etharp_query+0x7e>
 8012ab4:	4b7a      	ldr	r3, [pc, #488]	@ (8012ca0 <etharp_query+0x25c>)
 8012ab6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8012aba:	497a      	ldr	r1, [pc, #488]	@ (8012ca4 <etharp_query+0x260>)
 8012abc:	487a      	ldr	r0, [pc, #488]	@ (8012ca8 <etharp_query+0x264>)
 8012abe:	f001 fe39 	bl	8014734 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012ac2:	8a7b      	ldrh	r3, [r7, #18]
 8012ac4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012ac6:	7c7a      	ldrb	r2, [r7, #17]
 8012ac8:	4978      	ldr	r1, [pc, #480]	@ (8012cac <etharp_query+0x268>)
 8012aca:	4613      	mov	r3, r2
 8012acc:	005b      	lsls	r3, r3, #1
 8012ace:	4413      	add	r3, r2
 8012ad0:	00db      	lsls	r3, r3, #3
 8012ad2:	440b      	add	r3, r1
 8012ad4:	3314      	adds	r3, #20
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d115      	bne.n	8012b08 <etharp_query+0xc4>
    is_new_entry = 1;
 8012adc:	2301      	movs	r3, #1
 8012ade:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012ae0:	7c7a      	ldrb	r2, [r7, #17]
 8012ae2:	4972      	ldr	r1, [pc, #456]	@ (8012cac <etharp_query+0x268>)
 8012ae4:	4613      	mov	r3, r2
 8012ae6:	005b      	lsls	r3, r3, #1
 8012ae8:	4413      	add	r3, r2
 8012aea:	00db      	lsls	r3, r3, #3
 8012aec:	440b      	add	r3, r1
 8012aee:	3314      	adds	r3, #20
 8012af0:	2201      	movs	r2, #1
 8012af2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012af4:	7c7a      	ldrb	r2, [r7, #17]
 8012af6:	496d      	ldr	r1, [pc, #436]	@ (8012cac <etharp_query+0x268>)
 8012af8:	4613      	mov	r3, r2
 8012afa:	005b      	lsls	r3, r3, #1
 8012afc:	4413      	add	r3, r2
 8012afe:	00db      	lsls	r3, r3, #3
 8012b00:	440b      	add	r3, r1
 8012b02:	3308      	adds	r3, #8
 8012b04:	68fa      	ldr	r2, [r7, #12]
 8012b06:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012b08:	7c7a      	ldrb	r2, [r7, #17]
 8012b0a:	4968      	ldr	r1, [pc, #416]	@ (8012cac <etharp_query+0x268>)
 8012b0c:	4613      	mov	r3, r2
 8012b0e:	005b      	lsls	r3, r3, #1
 8012b10:	4413      	add	r3, r2
 8012b12:	00db      	lsls	r3, r3, #3
 8012b14:	440b      	add	r3, r1
 8012b16:	3314      	adds	r3, #20
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	2b01      	cmp	r3, #1
 8012b1c:	d011      	beq.n	8012b42 <etharp_query+0xfe>
 8012b1e:	7c7a      	ldrb	r2, [r7, #17]
 8012b20:	4962      	ldr	r1, [pc, #392]	@ (8012cac <etharp_query+0x268>)
 8012b22:	4613      	mov	r3, r2
 8012b24:	005b      	lsls	r3, r3, #1
 8012b26:	4413      	add	r3, r2
 8012b28:	00db      	lsls	r3, r3, #3
 8012b2a:	440b      	add	r3, r1
 8012b2c:	3314      	adds	r3, #20
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	2b01      	cmp	r3, #1
 8012b32:	d806      	bhi.n	8012b42 <etharp_query+0xfe>
 8012b34:	4b5a      	ldr	r3, [pc, #360]	@ (8012ca0 <etharp_query+0x25c>)
 8012b36:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8012b3a:	495d      	ldr	r1, [pc, #372]	@ (8012cb0 <etharp_query+0x26c>)
 8012b3c:	485a      	ldr	r0, [pc, #360]	@ (8012ca8 <etharp_query+0x264>)
 8012b3e:	f001 fdf9 	bl	8014734 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012b42:	6a3b      	ldr	r3, [r7, #32]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d102      	bne.n	8012b4e <etharp_query+0x10a>
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d10c      	bne.n	8012b68 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012b4e:	68b9      	ldr	r1, [r7, #8]
 8012b50:	68f8      	ldr	r0, [r7, #12]
 8012b52:	f000 f963 	bl	8012e1c <etharp_request>
 8012b56:	4603      	mov	r3, r0
 8012b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d102      	bne.n	8012b68 <etharp_query+0x124>
      return result;
 8012b62:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012b66:	e096      	b.n	8012c96 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d106      	bne.n	8012b7c <etharp_query+0x138>
 8012b6e:	4b4c      	ldr	r3, [pc, #304]	@ (8012ca0 <etharp_query+0x25c>)
 8012b70:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8012b74:	494f      	ldr	r1, [pc, #316]	@ (8012cb4 <etharp_query+0x270>)
 8012b76:	484c      	ldr	r0, [pc, #304]	@ (8012ca8 <etharp_query+0x264>)
 8012b78:	f001 fddc 	bl	8014734 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012b7c:	7c7a      	ldrb	r2, [r7, #17]
 8012b7e:	494b      	ldr	r1, [pc, #300]	@ (8012cac <etharp_query+0x268>)
 8012b80:	4613      	mov	r3, r2
 8012b82:	005b      	lsls	r3, r3, #1
 8012b84:	4413      	add	r3, r2
 8012b86:	00db      	lsls	r3, r3, #3
 8012b88:	440b      	add	r3, r1
 8012b8a:	3314      	adds	r3, #20
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	2b01      	cmp	r3, #1
 8012b90:	d917      	bls.n	8012bc2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012b92:	4a49      	ldr	r2, [pc, #292]	@ (8012cb8 <etharp_query+0x274>)
 8012b94:	7c7b      	ldrb	r3, [r7, #17]
 8012b96:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012b98:	7c7a      	ldrb	r2, [r7, #17]
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	005b      	lsls	r3, r3, #1
 8012b9e:	4413      	add	r3, r2
 8012ba0:	00db      	lsls	r3, r3, #3
 8012ba2:	3308      	adds	r3, #8
 8012ba4:	4a41      	ldr	r2, [pc, #260]	@ (8012cac <etharp_query+0x268>)
 8012ba6:	4413      	add	r3, r2
 8012ba8:	3304      	adds	r3, #4
 8012baa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012bae:	9200      	str	r2, [sp, #0]
 8012bb0:	697a      	ldr	r2, [r7, #20]
 8012bb2:	6879      	ldr	r1, [r7, #4]
 8012bb4:	68f8      	ldr	r0, [r7, #12]
 8012bb6:	f001 fc75 	bl	80144a4 <ethernet_output>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012bc0:	e067      	b.n	8012c92 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012bc2:	7c7a      	ldrb	r2, [r7, #17]
 8012bc4:	4939      	ldr	r1, [pc, #228]	@ (8012cac <etharp_query+0x268>)
 8012bc6:	4613      	mov	r3, r2
 8012bc8:	005b      	lsls	r3, r3, #1
 8012bca:	4413      	add	r3, r2
 8012bcc:	00db      	lsls	r3, r3, #3
 8012bce:	440b      	add	r3, r1
 8012bd0:	3314      	adds	r3, #20
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	2b01      	cmp	r3, #1
 8012bd6:	d15c      	bne.n	8012c92 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012be0:	e01c      	b.n	8012c1c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012be2:	69fb      	ldr	r3, [r7, #28]
 8012be4:	895a      	ldrh	r2, [r3, #10]
 8012be6:	69fb      	ldr	r3, [r7, #28]
 8012be8:	891b      	ldrh	r3, [r3, #8]
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d10a      	bne.n	8012c04 <etharp_query+0x1c0>
 8012bee:	69fb      	ldr	r3, [r7, #28]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d006      	beq.n	8012c04 <etharp_query+0x1c0>
 8012bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8012ca0 <etharp_query+0x25c>)
 8012bf8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8012bfc:	492f      	ldr	r1, [pc, #188]	@ (8012cbc <etharp_query+0x278>)
 8012bfe:	482a      	ldr	r0, [pc, #168]	@ (8012ca8 <etharp_query+0x264>)
 8012c00:	f001 fd98 	bl	8014734 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012c04:	69fb      	ldr	r3, [r7, #28]
 8012c06:	7b1b      	ldrb	r3, [r3, #12]
 8012c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d002      	beq.n	8012c16 <etharp_query+0x1d2>
        copy_needed = 1;
 8012c10:	2301      	movs	r3, #1
 8012c12:	61bb      	str	r3, [r7, #24]
        break;
 8012c14:	e005      	b.n	8012c22 <etharp_query+0x1de>
      }
      p = p->next;
 8012c16:	69fb      	ldr	r3, [r7, #28]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012c1c:	69fb      	ldr	r3, [r7, #28]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d1df      	bne.n	8012be2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012c22:	69bb      	ldr	r3, [r7, #24]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d007      	beq.n	8012c38 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012c28:	687a      	ldr	r2, [r7, #4]
 8012c2a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8012c2e:	200e      	movs	r0, #14
 8012c30:	f7f9 fa10 	bl	800c054 <pbuf_clone>
 8012c34:	61f8      	str	r0, [r7, #28]
 8012c36:	e004      	b.n	8012c42 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012c3c:	69f8      	ldr	r0, [r7, #28]
 8012c3e:	f7f8 ffab 	bl	800bb98 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012c42:	69fb      	ldr	r3, [r7, #28]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d021      	beq.n	8012c8c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012c48:	7c7a      	ldrb	r2, [r7, #17]
 8012c4a:	4918      	ldr	r1, [pc, #96]	@ (8012cac <etharp_query+0x268>)
 8012c4c:	4613      	mov	r3, r2
 8012c4e:	005b      	lsls	r3, r3, #1
 8012c50:	4413      	add	r3, r2
 8012c52:	00db      	lsls	r3, r3, #3
 8012c54:	440b      	add	r3, r1
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d00a      	beq.n	8012c72 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012c5c:	7c7a      	ldrb	r2, [r7, #17]
 8012c5e:	4913      	ldr	r1, [pc, #76]	@ (8012cac <etharp_query+0x268>)
 8012c60:	4613      	mov	r3, r2
 8012c62:	005b      	lsls	r3, r3, #1
 8012c64:	4413      	add	r3, r2
 8012c66:	00db      	lsls	r3, r3, #3
 8012c68:	440b      	add	r3, r1
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7f8 fef3 	bl	800ba58 <pbuf_free>
      }
      arp_table[i].q = p;
 8012c72:	7c7a      	ldrb	r2, [r7, #17]
 8012c74:	490d      	ldr	r1, [pc, #52]	@ (8012cac <etharp_query+0x268>)
 8012c76:	4613      	mov	r3, r2
 8012c78:	005b      	lsls	r3, r3, #1
 8012c7a:	4413      	add	r3, r2
 8012c7c:	00db      	lsls	r3, r3, #3
 8012c7e:	440b      	add	r3, r1
 8012c80:	69fa      	ldr	r2, [r7, #28]
 8012c82:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012c84:	2300      	movs	r3, #0
 8012c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012c8a:	e002      	b.n	8012c92 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012c8c:	23ff      	movs	r3, #255	@ 0xff
 8012c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8012c92:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	3728      	adds	r7, #40	@ 0x28
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	08017878 	.word	0x08017878
 8012ca4:	08017a24 	.word	0x08017a24
 8012ca8:	080178f0 	.word	0x080178f0
 8012cac:	2000b16c 	.word	0x2000b16c
 8012cb0:	08017a34 	.word	0x08017a34
 8012cb4:	08017a18 	.word	0x08017a18
 8012cb8:	2000b25c 	.word	0x2000b25c
 8012cbc:	08017a5c 	.word	0x08017a5c

08012cc0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b08a      	sub	sp, #40	@ 0x28
 8012cc4:	af02      	add	r7, sp, #8
 8012cc6:	60f8      	str	r0, [r7, #12]
 8012cc8:	60b9      	str	r1, [r7, #8]
 8012cca:	607a      	str	r2, [r7, #4]
 8012ccc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d106      	bne.n	8012ce6 <etharp_raw+0x26>
 8012cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8012dc4 <etharp_raw+0x104>)
 8012cda:	f240 4257 	movw	r2, #1111	@ 0x457
 8012cde:	493a      	ldr	r1, [pc, #232]	@ (8012dc8 <etharp_raw+0x108>)
 8012ce0:	483a      	ldr	r0, [pc, #232]	@ (8012dcc <etharp_raw+0x10c>)
 8012ce2:	f001 fd27 	bl	8014734 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012ce6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012cea:	211c      	movs	r1, #28
 8012cec:	200e      	movs	r0, #14
 8012cee:	f7f8 fbcf 	bl	800b490 <pbuf_alloc>
 8012cf2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012cf4:	69bb      	ldr	r3, [r7, #24]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d102      	bne.n	8012d00 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8012cfe:	e05d      	b.n	8012dbc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012d00:	69bb      	ldr	r3, [r7, #24]
 8012d02:	895b      	ldrh	r3, [r3, #10]
 8012d04:	2b1b      	cmp	r3, #27
 8012d06:	d806      	bhi.n	8012d16 <etharp_raw+0x56>
 8012d08:	4b2e      	ldr	r3, [pc, #184]	@ (8012dc4 <etharp_raw+0x104>)
 8012d0a:	f240 4262 	movw	r2, #1122	@ 0x462
 8012d0e:	4930      	ldr	r1, [pc, #192]	@ (8012dd0 <etharp_raw+0x110>)
 8012d10:	482e      	ldr	r0, [pc, #184]	@ (8012dcc <etharp_raw+0x10c>)
 8012d12:	f001 fd0f 	bl	8014734 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012d16:	69bb      	ldr	r3, [r7, #24]
 8012d18:	685b      	ldr	r3, [r3, #4]
 8012d1a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012d1c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7f7 fb3c 	bl	800a39c <lwip_htons>
 8012d24:	4603      	mov	r3, r0
 8012d26:	461a      	mov	r2, r3
 8012d28:	697b      	ldr	r3, [r7, #20]
 8012d2a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012d32:	2b06      	cmp	r3, #6
 8012d34:	d006      	beq.n	8012d44 <etharp_raw+0x84>
 8012d36:	4b23      	ldr	r3, [pc, #140]	@ (8012dc4 <etharp_raw+0x104>)
 8012d38:	f240 4269 	movw	r2, #1129	@ 0x469
 8012d3c:	4925      	ldr	r1, [pc, #148]	@ (8012dd4 <etharp_raw+0x114>)
 8012d3e:	4823      	ldr	r0, [pc, #140]	@ (8012dcc <etharp_raw+0x10c>)
 8012d40:	f001 fcf8 	bl	8014734 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	3308      	adds	r3, #8
 8012d48:	2206      	movs	r2, #6
 8012d4a:	6839      	ldr	r1, [r7, #0]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f001 fdcc 	bl	80148ea <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	3312      	adds	r3, #18
 8012d56:	2206      	movs	r2, #6
 8012d58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f001 fdc5 	bl	80148ea <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012d60:	697b      	ldr	r3, [r7, #20]
 8012d62:	330e      	adds	r3, #14
 8012d64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012d66:	6812      	ldr	r2, [r2, #0]
 8012d68:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	3318      	adds	r3, #24
 8012d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012d70:	6812      	ldr	r2, [r2, #0]
 8012d72:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012d74:	697b      	ldr	r3, [r7, #20]
 8012d76:	2200      	movs	r2, #0
 8012d78:	701a      	strb	r2, [r3, #0]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	f042 0201 	orr.w	r2, r2, #1
 8012d80:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012d82:	697b      	ldr	r3, [r7, #20]
 8012d84:	2200      	movs	r2, #0
 8012d86:	f042 0208 	orr.w	r2, r2, #8
 8012d8a:	709a      	strb	r2, [r3, #2]
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012d90:	697b      	ldr	r3, [r7, #20]
 8012d92:	2206      	movs	r2, #6
 8012d94:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	2204      	movs	r2, #4
 8012d9a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012d9c:	f640 0306 	movw	r3, #2054	@ 0x806
 8012da0:	9300      	str	r3, [sp, #0]
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	68ba      	ldr	r2, [r7, #8]
 8012da6:	69b9      	ldr	r1, [r7, #24]
 8012da8:	68f8      	ldr	r0, [r7, #12]
 8012daa:	f001 fb7b 	bl	80144a4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012dae:	69b8      	ldr	r0, [r7, #24]
 8012db0:	f7f8 fe52 	bl	800ba58 <pbuf_free>
  p = NULL;
 8012db4:	2300      	movs	r3, #0
 8012db6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012db8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3720      	adds	r7, #32
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}
 8012dc4:	08017878 	.word	0x08017878
 8012dc8:	080179c8 	.word	0x080179c8
 8012dcc:	080178f0 	.word	0x080178f0
 8012dd0:	08017a78 	.word	0x08017a78
 8012dd4:	08017aac 	.word	0x08017aac

08012dd8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b088      	sub	sp, #32
 8012ddc:	af04      	add	r7, sp, #16
 8012dde:	60f8      	str	r0, [r7, #12]
 8012de0:	60b9      	str	r1, [r7, #8]
 8012de2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012df4:	2201      	movs	r2, #1
 8012df6:	9203      	str	r2, [sp, #12]
 8012df8:	68ba      	ldr	r2, [r7, #8]
 8012dfa:	9202      	str	r2, [sp, #8]
 8012dfc:	4a06      	ldr	r2, [pc, #24]	@ (8012e18 <etharp_request_dst+0x40>)
 8012dfe:	9201      	str	r2, [sp, #4]
 8012e00:	9300      	str	r3, [sp, #0]
 8012e02:	4603      	mov	r3, r0
 8012e04:	687a      	ldr	r2, [r7, #4]
 8012e06:	68f8      	ldr	r0, [r7, #12]
 8012e08:	f7ff ff5a 	bl	8012cc0 <etharp_raw>
 8012e0c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	3710      	adds	r7, #16
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}
 8012e16:	bf00      	nop
 8012e18:	08018044 	.word	0x08018044

08012e1c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b082      	sub	sp, #8
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
 8012e24:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012e26:	4a05      	ldr	r2, [pc, #20]	@ (8012e3c <etharp_request+0x20>)
 8012e28:	6839      	ldr	r1, [r7, #0]
 8012e2a:	6878      	ldr	r0, [r7, #4]
 8012e2c:	f7ff ffd4 	bl	8012dd8 <etharp_request_dst>
 8012e30:	4603      	mov	r3, r0
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3708      	adds	r7, #8
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}
 8012e3a:	bf00      	nop
 8012e3c:	0801803c 	.word	0x0801803c

08012e40 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b08e      	sub	sp, #56	@ 0x38
 8012e44:	af04      	add	r7, sp, #16
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012e4a:	4b79      	ldr	r3, [pc, #484]	@ (8013030 <icmp_input+0x1f0>)
 8012e4c:	689b      	ldr	r3, [r3, #8]
 8012e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	f003 030f 	and.w	r3, r3, #15
 8012e58:	b2db      	uxtb	r3, r3
 8012e5a:	009b      	lsls	r3, r3, #2
 8012e5c:	b2db      	uxtb	r3, r3
 8012e5e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8012e60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012e62:	2b13      	cmp	r3, #19
 8012e64:	f240 80cd 	bls.w	8013002 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	895b      	ldrh	r3, [r3, #10]
 8012e6c:	2b03      	cmp	r3, #3
 8012e6e:	f240 80ca 	bls.w	8013006 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	781b      	ldrb	r3, [r3, #0]
 8012e78:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012e7c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	f000 80b7 	beq.w	8012ff4 <icmp_input+0x1b4>
 8012e86:	2b08      	cmp	r3, #8
 8012e88:	f040 80b7 	bne.w	8012ffa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012e8c:	4b69      	ldr	r3, [pc, #420]	@ (8013034 <icmp_input+0x1f4>)
 8012e8e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012e90:	4b67      	ldr	r3, [pc, #412]	@ (8013030 <icmp_input+0x1f0>)
 8012e92:	695b      	ldr	r3, [r3, #20]
 8012e94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012e98:	2be0      	cmp	r3, #224	@ 0xe0
 8012e9a:	f000 80bb 	beq.w	8013014 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012e9e:	4b64      	ldr	r3, [pc, #400]	@ (8013030 <icmp_input+0x1f0>)
 8012ea0:	695b      	ldr	r3, [r3, #20]
 8012ea2:	4a63      	ldr	r2, [pc, #396]	@ (8013030 <icmp_input+0x1f0>)
 8012ea4:	6812      	ldr	r2, [r2, #0]
 8012ea6:	4611      	mov	r1, r2
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f000 fbed 	bl	8013688 <ip4_addr_isbroadcast_u32>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	f040 80b1 	bne.w	8013018 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	891b      	ldrh	r3, [r3, #8]
 8012eba:	2b07      	cmp	r3, #7
 8012ebc:	f240 80a5 	bls.w	801300a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012ec0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012ec2:	330e      	adds	r3, #14
 8012ec4:	4619      	mov	r1, r3
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f7f8 fd30 	bl	800b92c <pbuf_add_header>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d04b      	beq.n	8012f6a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	891a      	ldrh	r2, [r3, #8]
 8012ed6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012ed8:	4413      	add	r3, r2
 8012eda:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	891b      	ldrh	r3, [r3, #8]
 8012ee0:	8b7a      	ldrh	r2, [r7, #26]
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	f0c0 809a 	bcc.w	801301c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012ee8:	8b7b      	ldrh	r3, [r7, #26]
 8012eea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012eee:	4619      	mov	r1, r3
 8012ef0:	200e      	movs	r0, #14
 8012ef2:	f7f8 facd 	bl	800b490 <pbuf_alloc>
 8012ef6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012ef8:	697b      	ldr	r3, [r7, #20]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	f000 8090 	beq.w	8013020 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	895b      	ldrh	r3, [r3, #10]
 8012f04:	461a      	mov	r2, r3
 8012f06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012f08:	3308      	adds	r3, #8
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d203      	bcs.n	8012f16 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012f0e:	6978      	ldr	r0, [r7, #20]
 8012f10:	f7f8 fda2 	bl	800ba58 <pbuf_free>
          goto icmperr;
 8012f14:	e085      	b.n	8013022 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012f16:	697b      	ldr	r3, [r7, #20]
 8012f18:	685b      	ldr	r3, [r3, #4]
 8012f1a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012f1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f001 fce3 	bl	80148ea <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012f24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012f26:	4619      	mov	r1, r3
 8012f28:	6978      	ldr	r0, [r7, #20]
 8012f2a:	f7f8 fd0f 	bl	800b94c <pbuf_remove_header>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d009      	beq.n	8012f48 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012f34:	4b40      	ldr	r3, [pc, #256]	@ (8013038 <icmp_input+0x1f8>)
 8012f36:	22b6      	movs	r2, #182	@ 0xb6
 8012f38:	4940      	ldr	r1, [pc, #256]	@ (801303c <icmp_input+0x1fc>)
 8012f3a:	4841      	ldr	r0, [pc, #260]	@ (8013040 <icmp_input+0x200>)
 8012f3c:	f001 fbfa 	bl	8014734 <iprintf>
          pbuf_free(r);
 8012f40:	6978      	ldr	r0, [r7, #20]
 8012f42:	f7f8 fd89 	bl	800ba58 <pbuf_free>
          goto icmperr;
 8012f46:	e06c      	b.n	8013022 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012f48:	6879      	ldr	r1, [r7, #4]
 8012f4a:	6978      	ldr	r0, [r7, #20]
 8012f4c:	f7f8 feac 	bl	800bca8 <pbuf_copy>
 8012f50:	4603      	mov	r3, r0
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d003      	beq.n	8012f5e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012f56:	6978      	ldr	r0, [r7, #20]
 8012f58:	f7f8 fd7e 	bl	800ba58 <pbuf_free>
          goto icmperr;
 8012f5c:	e061      	b.n	8013022 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012f5e:	6878      	ldr	r0, [r7, #4]
 8012f60:	f7f8 fd7a 	bl	800ba58 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012f64:	697b      	ldr	r3, [r7, #20]
 8012f66:	607b      	str	r3, [r7, #4]
 8012f68:	e00f      	b.n	8012f8a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012f6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012f6c:	330e      	adds	r3, #14
 8012f6e:	4619      	mov	r1, r3
 8012f70:	6878      	ldr	r0, [r7, #4]
 8012f72:	f7f8 fceb 	bl	800b94c <pbuf_remove_header>
 8012f76:	4603      	mov	r3, r0
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d006      	beq.n	8012f8a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8013038 <icmp_input+0x1f8>)
 8012f7e:	22c7      	movs	r2, #199	@ 0xc7
 8012f80:	4930      	ldr	r1, [pc, #192]	@ (8013044 <icmp_input+0x204>)
 8012f82:	482f      	ldr	r0, [pc, #188]	@ (8013040 <icmp_input+0x200>)
 8012f84:	f001 fbd6 	bl	8014734 <iprintf>
          goto icmperr;
 8012f88:	e04b      	b.n	8013022 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	685b      	ldr	r3, [r3, #4]
 8012f8e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012f90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012f92:	4619      	mov	r1, r3
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f7f8 fcc9 	bl	800b92c <pbuf_add_header>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d12b      	bne.n	8012ff8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	685b      	ldr	r3, [r3, #4]
 8012fa4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012fa6:	69fb      	ldr	r3, [r7, #28]
 8012fa8:	681a      	ldr	r2, [r3, #0]
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012fae:	4b20      	ldr	r3, [pc, #128]	@ (8013030 <icmp_input+0x1f0>)
 8012fb0:	691a      	ldr	r2, [r3, #16]
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012fb6:	693b      	ldr	r3, [r7, #16]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012fbc:	693b      	ldr	r3, [r7, #16]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	709a      	strb	r2, [r3, #2]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	22ff      	movs	r2, #255	@ 0xff
 8012fca:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	2200      	movs	r2, #0
 8012fd0:	729a      	strb	r2, [r3, #10]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	9302      	str	r3, [sp, #8]
 8012fda:	2301      	movs	r3, #1
 8012fdc:	9301      	str	r3, [sp, #4]
 8012fde:	2300      	movs	r3, #0
 8012fe0:	9300      	str	r3, [sp, #0]
 8012fe2:	23ff      	movs	r3, #255	@ 0xff
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	69f9      	ldr	r1, [r7, #28]
 8012fe8:	6878      	ldr	r0, [r7, #4]
 8012fea:	f000 fa75 	bl	80134d8 <ip4_output_if>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012ff2:	e001      	b.n	8012ff8 <icmp_input+0x1b8>
      break;
 8012ff4:	bf00      	nop
 8012ff6:	e000      	b.n	8012ffa <icmp_input+0x1ba>
      break;
 8012ff8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f7f8 fd2c 	bl	800ba58 <pbuf_free>
  return;
 8013000:	e013      	b.n	801302a <icmp_input+0x1ea>
    goto lenerr;
 8013002:	bf00      	nop
 8013004:	e002      	b.n	801300c <icmp_input+0x1cc>
    goto lenerr;
 8013006:	bf00      	nop
 8013008:	e000      	b.n	801300c <icmp_input+0x1cc>
        goto lenerr;
 801300a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f7f8 fd23 	bl	800ba58 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013012:	e00a      	b.n	801302a <icmp_input+0x1ea>
        goto icmperr;
 8013014:	bf00      	nop
 8013016:	e004      	b.n	8013022 <icmp_input+0x1e2>
        goto icmperr;
 8013018:	bf00      	nop
 801301a:	e002      	b.n	8013022 <icmp_input+0x1e2>
          goto icmperr;
 801301c:	bf00      	nop
 801301e:	e000      	b.n	8013022 <icmp_input+0x1e2>
          goto icmperr;
 8013020:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f7f8 fd18 	bl	800ba58 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013028:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801302a:	3728      	adds	r7, #40	@ 0x28
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}
 8013030:	200059dc 	.word	0x200059dc
 8013034:	200059f0 	.word	0x200059f0
 8013038:	08017af0 	.word	0x08017af0
 801303c:	08017b28 	.word	0x08017b28
 8013040:	08017b60 	.word	0x08017b60
 8013044:	08017b88 	.word	0x08017b88

08013048 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b082      	sub	sp, #8
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
 8013050:	460b      	mov	r3, r1
 8013052:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013054:	78fb      	ldrb	r3, [r7, #3]
 8013056:	461a      	mov	r2, r3
 8013058:	2103      	movs	r1, #3
 801305a:	6878      	ldr	r0, [r7, #4]
 801305c:	f000 f814 	bl	8013088 <icmp_send_response>
}
 8013060:	bf00      	nop
 8013062:	3708      	adds	r7, #8
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}

08013068 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b082      	sub	sp, #8
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	460b      	mov	r3, r1
 8013072:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013074:	78fb      	ldrb	r3, [r7, #3]
 8013076:	461a      	mov	r2, r3
 8013078:	210b      	movs	r1, #11
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f000 f804 	bl	8013088 <icmp_send_response>
}
 8013080:	bf00      	nop
 8013082:	3708      	adds	r7, #8
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}

08013088 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b08c      	sub	sp, #48	@ 0x30
 801308c:	af04      	add	r7, sp, #16
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	460b      	mov	r3, r1
 8013092:	70fb      	strb	r3, [r7, #3]
 8013094:	4613      	mov	r3, r2
 8013096:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013098:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801309c:	2124      	movs	r1, #36	@ 0x24
 801309e:	2022      	movs	r0, #34	@ 0x22
 80130a0:	f7f8 f9f6 	bl	800b490 <pbuf_alloc>
 80130a4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80130a6:	69fb      	ldr	r3, [r7, #28]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d04c      	beq.n	8013146 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80130ac:	69fb      	ldr	r3, [r7, #28]
 80130ae:	895b      	ldrh	r3, [r3, #10]
 80130b0:	2b23      	cmp	r3, #35	@ 0x23
 80130b2:	d806      	bhi.n	80130c2 <icmp_send_response+0x3a>
 80130b4:	4b26      	ldr	r3, [pc, #152]	@ (8013150 <icmp_send_response+0xc8>)
 80130b6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80130ba:	4926      	ldr	r1, [pc, #152]	@ (8013154 <icmp_send_response+0xcc>)
 80130bc:	4826      	ldr	r0, [pc, #152]	@ (8013158 <icmp_send_response+0xd0>)
 80130be:	f001 fb39 	bl	8014734 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80130c8:	69fb      	ldr	r3, [r7, #28]
 80130ca:	685b      	ldr	r3, [r3, #4]
 80130cc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	78fa      	ldrb	r2, [r7, #3]
 80130d2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	78ba      	ldrb	r2, [r7, #2]
 80130d8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	2200      	movs	r2, #0
 80130de:	711a      	strb	r2, [r3, #4]
 80130e0:	2200      	movs	r2, #0
 80130e2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80130e4:	697b      	ldr	r3, [r7, #20]
 80130e6:	2200      	movs	r2, #0
 80130e8:	719a      	strb	r2, [r3, #6]
 80130ea:	2200      	movs	r2, #0
 80130ec:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80130ee:	69fb      	ldr	r3, [r7, #28]
 80130f0:	685b      	ldr	r3, [r3, #4]
 80130f2:	f103 0008 	add.w	r0, r3, #8
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	685b      	ldr	r3, [r3, #4]
 80130fa:	221c      	movs	r2, #28
 80130fc:	4619      	mov	r1, r3
 80130fe:	f001 fbf4 	bl	80148ea <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013102:	69bb      	ldr	r3, [r7, #24]
 8013104:	68db      	ldr	r3, [r3, #12]
 8013106:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013108:	f107 030c 	add.w	r3, r7, #12
 801310c:	4618      	mov	r0, r3
 801310e:	f000 f825 	bl	801315c <ip4_route>
 8013112:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013114:	693b      	ldr	r3, [r7, #16]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d011      	beq.n	801313e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801311a:	697b      	ldr	r3, [r7, #20]
 801311c:	2200      	movs	r2, #0
 801311e:	709a      	strb	r2, [r3, #2]
 8013120:	2200      	movs	r2, #0
 8013122:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013124:	f107 020c 	add.w	r2, r7, #12
 8013128:	693b      	ldr	r3, [r7, #16]
 801312a:	9302      	str	r3, [sp, #8]
 801312c:	2301      	movs	r3, #1
 801312e:	9301      	str	r3, [sp, #4]
 8013130:	2300      	movs	r3, #0
 8013132:	9300      	str	r3, [sp, #0]
 8013134:	23ff      	movs	r3, #255	@ 0xff
 8013136:	2100      	movs	r1, #0
 8013138:	69f8      	ldr	r0, [r7, #28]
 801313a:	f000 f9cd 	bl	80134d8 <ip4_output_if>
  }
  pbuf_free(q);
 801313e:	69f8      	ldr	r0, [r7, #28]
 8013140:	f7f8 fc8a 	bl	800ba58 <pbuf_free>
 8013144:	e000      	b.n	8013148 <icmp_send_response+0xc0>
    return;
 8013146:	bf00      	nop
}
 8013148:	3720      	adds	r7, #32
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}
 801314e:	bf00      	nop
 8013150:	08017af0 	.word	0x08017af0
 8013154:	08017bbc 	.word	0x08017bbc
 8013158:	08017b60 	.word	0x08017b60

0801315c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801315c:	b480      	push	{r7}
 801315e:	b085      	sub	sp, #20
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013164:	4b33      	ldr	r3, [pc, #204]	@ (8013234 <ip4_route+0xd8>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	60fb      	str	r3, [r7, #12]
 801316a:	e036      	b.n	80131da <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013172:	f003 0301 	and.w	r3, r3, #1
 8013176:	b2db      	uxtb	r3, r3
 8013178:	2b00      	cmp	r3, #0
 801317a:	d02b      	beq.n	80131d4 <ip4_route+0x78>
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013182:	089b      	lsrs	r3, r3, #2
 8013184:	f003 0301 	and.w	r3, r3, #1
 8013188:	b2db      	uxtb	r3, r3
 801318a:	2b00      	cmp	r3, #0
 801318c:	d022      	beq.n	80131d4 <ip4_route+0x78>
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	3304      	adds	r3, #4
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d01d      	beq.n	80131d4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	681a      	ldr	r2, [r3, #0]
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	3304      	adds	r3, #4
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	405a      	eors	r2, r3
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	3308      	adds	r3, #8
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	4013      	ands	r3, r2
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d101      	bne.n	80131b4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	e038      	b.n	8013226 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80131ba:	f003 0302 	and.w	r3, r3, #2
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d108      	bne.n	80131d4 <ip4_route+0x78>
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	681a      	ldr	r2, [r3, #0]
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	330c      	adds	r3, #12
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	429a      	cmp	r2, r3
 80131ce:	d101      	bne.n	80131d4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	e028      	b.n	8013226 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	60fb      	str	r3, [r7, #12]
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d1c5      	bne.n	801316c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80131e0:	4b15      	ldr	r3, [pc, #84]	@ (8013238 <ip4_route+0xdc>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d01a      	beq.n	801321e <ip4_route+0xc2>
 80131e8:	4b13      	ldr	r3, [pc, #76]	@ (8013238 <ip4_route+0xdc>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80131f0:	f003 0301 	and.w	r3, r3, #1
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d012      	beq.n	801321e <ip4_route+0xc2>
 80131f8:	4b0f      	ldr	r3, [pc, #60]	@ (8013238 <ip4_route+0xdc>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013200:	f003 0304 	and.w	r3, r3, #4
 8013204:	2b00      	cmp	r3, #0
 8013206:	d00a      	beq.n	801321e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013208:	4b0b      	ldr	r3, [pc, #44]	@ (8013238 <ip4_route+0xdc>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	3304      	adds	r3, #4
 801320e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013210:	2b00      	cmp	r3, #0
 8013212:	d004      	beq.n	801321e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	b2db      	uxtb	r3, r3
 801321a:	2b7f      	cmp	r3, #127	@ 0x7f
 801321c:	d101      	bne.n	8013222 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801321e:	2300      	movs	r3, #0
 8013220:	e001      	b.n	8013226 <ip4_route+0xca>
  }

  return netif_default;
 8013222:	4b05      	ldr	r3, [pc, #20]	@ (8013238 <ip4_route+0xdc>)
 8013224:	681b      	ldr	r3, [r3, #0]
}
 8013226:	4618      	mov	r0, r3
 8013228:	3714      	adds	r7, #20
 801322a:	46bd      	mov	sp, r7
 801322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013230:	4770      	bx	lr
 8013232:	bf00      	nop
 8013234:	2000b100 	.word	0x2000b100
 8013238:	2000b104 	.word	0x2000b104

0801323c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b082      	sub	sp, #8
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801324a:	f003 0301 	and.w	r3, r3, #1
 801324e:	b2db      	uxtb	r3, r3
 8013250:	2b00      	cmp	r3, #0
 8013252:	d016      	beq.n	8013282 <ip4_input_accept+0x46>
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	3304      	adds	r3, #4
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d011      	beq.n	8013282 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801325e:	4b0b      	ldr	r3, [pc, #44]	@ (801328c <ip4_input_accept+0x50>)
 8013260:	695a      	ldr	r2, [r3, #20]
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	3304      	adds	r3, #4
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	429a      	cmp	r2, r3
 801326a:	d008      	beq.n	801327e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801326c:	4b07      	ldr	r3, [pc, #28]	@ (801328c <ip4_input_accept+0x50>)
 801326e:	695b      	ldr	r3, [r3, #20]
 8013270:	6879      	ldr	r1, [r7, #4]
 8013272:	4618      	mov	r0, r3
 8013274:	f000 fa08 	bl	8013688 <ip4_addr_isbroadcast_u32>
 8013278:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801327a:	2b00      	cmp	r3, #0
 801327c:	d001      	beq.n	8013282 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801327e:	2301      	movs	r3, #1
 8013280:	e000      	b.n	8013284 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013282:	2300      	movs	r3, #0
}
 8013284:	4618      	mov	r0, r3
 8013286:	3708      	adds	r7, #8
 8013288:	46bd      	mov	sp, r7
 801328a:	bd80      	pop	{r7, pc}
 801328c:	200059dc 	.word	0x200059dc

08013290 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b086      	sub	sp, #24
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	685b      	ldr	r3, [r3, #4]
 801329e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80132a0:	697b      	ldr	r3, [r7, #20]
 80132a2:	781b      	ldrb	r3, [r3, #0]
 80132a4:	091b      	lsrs	r3, r3, #4
 80132a6:	b2db      	uxtb	r3, r3
 80132a8:	2b04      	cmp	r3, #4
 80132aa:	d004      	beq.n	80132b6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f7f8 fbd3 	bl	800ba58 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80132b2:	2300      	movs	r3, #0
 80132b4:	e107      	b.n	80134c6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80132b6:	697b      	ldr	r3, [r7, #20]
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	f003 030f 	and.w	r3, r3, #15
 80132be:	b2db      	uxtb	r3, r3
 80132c0:	009b      	lsls	r3, r3, #2
 80132c2:	b2db      	uxtb	r3, r3
 80132c4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	885b      	ldrh	r3, [r3, #2]
 80132ca:	b29b      	uxth	r3, r3
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7f7 f865 	bl	800a39c <lwip_htons>
 80132d2:	4603      	mov	r3, r0
 80132d4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	891b      	ldrh	r3, [r3, #8]
 80132da:	89ba      	ldrh	r2, [r7, #12]
 80132dc:	429a      	cmp	r2, r3
 80132de:	d204      	bcs.n	80132ea <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80132e0:	89bb      	ldrh	r3, [r7, #12]
 80132e2:	4619      	mov	r1, r3
 80132e4:	6878      	ldr	r0, [r7, #4]
 80132e6:	f7f8 fa31 	bl	800b74c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	895b      	ldrh	r3, [r3, #10]
 80132ee:	89fa      	ldrh	r2, [r7, #14]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d807      	bhi.n	8013304 <ip4_input+0x74>
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	891b      	ldrh	r3, [r3, #8]
 80132f8:	89ba      	ldrh	r2, [r7, #12]
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d802      	bhi.n	8013304 <ip4_input+0x74>
 80132fe:	89fb      	ldrh	r3, [r7, #14]
 8013300:	2b13      	cmp	r3, #19
 8013302:	d804      	bhi.n	801330e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f7f8 fba7 	bl	800ba58 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801330a:	2300      	movs	r3, #0
 801330c:	e0db      	b.n	80134c6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	691b      	ldr	r3, [r3, #16]
 8013312:	4a6f      	ldr	r2, [pc, #444]	@ (80134d0 <ip4_input+0x240>)
 8013314:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	68db      	ldr	r3, [r3, #12]
 801331a:	4a6d      	ldr	r2, [pc, #436]	@ (80134d0 <ip4_input+0x240>)
 801331c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801331e:	4b6c      	ldr	r3, [pc, #432]	@ (80134d0 <ip4_input+0x240>)
 8013320:	695b      	ldr	r3, [r3, #20]
 8013322:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013326:	2be0      	cmp	r3, #224	@ 0xe0
 8013328:	d112      	bne.n	8013350 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013330:	f003 0301 	and.w	r3, r3, #1
 8013334:	b2db      	uxtb	r3, r3
 8013336:	2b00      	cmp	r3, #0
 8013338:	d007      	beq.n	801334a <ip4_input+0xba>
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	3304      	adds	r3, #4
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d002      	beq.n	801334a <ip4_input+0xba>
      netif = inp;
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	613b      	str	r3, [r7, #16]
 8013348:	e02a      	b.n	80133a0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801334a:	2300      	movs	r3, #0
 801334c:	613b      	str	r3, [r7, #16]
 801334e:	e027      	b.n	80133a0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013350:	6838      	ldr	r0, [r7, #0]
 8013352:	f7ff ff73 	bl	801323c <ip4_input_accept>
 8013356:	4603      	mov	r3, r0
 8013358:	2b00      	cmp	r3, #0
 801335a:	d002      	beq.n	8013362 <ip4_input+0xd2>
      netif = inp;
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	613b      	str	r3, [r7, #16]
 8013360:	e01e      	b.n	80133a0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013362:	2300      	movs	r3, #0
 8013364:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013366:	4b5a      	ldr	r3, [pc, #360]	@ (80134d0 <ip4_input+0x240>)
 8013368:	695b      	ldr	r3, [r3, #20]
 801336a:	b2db      	uxtb	r3, r3
 801336c:	2b7f      	cmp	r3, #127	@ 0x7f
 801336e:	d017      	beq.n	80133a0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013370:	4b58      	ldr	r3, [pc, #352]	@ (80134d4 <ip4_input+0x244>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	613b      	str	r3, [r7, #16]
 8013376:	e00e      	b.n	8013396 <ip4_input+0x106>
          if (netif == inp) {
 8013378:	693a      	ldr	r2, [r7, #16]
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	429a      	cmp	r2, r3
 801337e:	d006      	beq.n	801338e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013380:	6938      	ldr	r0, [r7, #16]
 8013382:	f7ff ff5b 	bl	801323c <ip4_input_accept>
 8013386:	4603      	mov	r3, r0
 8013388:	2b00      	cmp	r3, #0
 801338a:	d108      	bne.n	801339e <ip4_input+0x10e>
 801338c:	e000      	b.n	8013390 <ip4_input+0x100>
            continue;
 801338e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013390:	693b      	ldr	r3, [r7, #16]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	613b      	str	r3, [r7, #16]
 8013396:	693b      	ldr	r3, [r7, #16]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d1ed      	bne.n	8013378 <ip4_input+0xe8>
 801339c:	e000      	b.n	80133a0 <ip4_input+0x110>
            break;
 801339e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80133a0:	4b4b      	ldr	r3, [pc, #300]	@ (80134d0 <ip4_input+0x240>)
 80133a2:	691b      	ldr	r3, [r3, #16]
 80133a4:	6839      	ldr	r1, [r7, #0]
 80133a6:	4618      	mov	r0, r3
 80133a8:	f000 f96e 	bl	8013688 <ip4_addr_isbroadcast_u32>
 80133ac:	4603      	mov	r3, r0
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d105      	bne.n	80133be <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80133b2:	4b47      	ldr	r3, [pc, #284]	@ (80134d0 <ip4_input+0x240>)
 80133b4:	691b      	ldr	r3, [r3, #16]
 80133b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80133ba:	2be0      	cmp	r3, #224	@ 0xe0
 80133bc:	d104      	bne.n	80133c8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f7f8 fb4a 	bl	800ba58 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80133c4:	2300      	movs	r3, #0
 80133c6:	e07e      	b.n	80134c6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d104      	bne.n	80133d8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80133ce:	6878      	ldr	r0, [r7, #4]
 80133d0:	f7f8 fb42 	bl	800ba58 <pbuf_free>
    return ERR_OK;
 80133d4:	2300      	movs	r3, #0
 80133d6:	e076      	b.n	80134c6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	88db      	ldrh	r3, [r3, #6]
 80133dc:	b29b      	uxth	r3, r3
 80133de:	461a      	mov	r2, r3
 80133e0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80133e4:	4013      	ands	r3, r2
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d00b      	beq.n	8013402 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f000 fc92 	bl	8013d14 <ip4_reass>
 80133f0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d101      	bne.n	80133fc <ip4_input+0x16c>
      return ERR_OK;
 80133f8:	2300      	movs	r3, #0
 80133fa:	e064      	b.n	80134c6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	685b      	ldr	r3, [r3, #4]
 8013400:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013402:	4a33      	ldr	r2, [pc, #204]	@ (80134d0 <ip4_input+0x240>)
 8013404:	693b      	ldr	r3, [r7, #16]
 8013406:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013408:	4a31      	ldr	r2, [pc, #196]	@ (80134d0 <ip4_input+0x240>)
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801340e:	4a30      	ldr	r2, [pc, #192]	@ (80134d0 <ip4_input+0x240>)
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	781b      	ldrb	r3, [r3, #0]
 8013418:	f003 030f 	and.w	r3, r3, #15
 801341c:	b2db      	uxtb	r3, r3
 801341e:	009b      	lsls	r3, r3, #2
 8013420:	b2db      	uxtb	r3, r3
 8013422:	461a      	mov	r2, r3
 8013424:	4b2a      	ldr	r3, [pc, #168]	@ (80134d0 <ip4_input+0x240>)
 8013426:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013428:	89fb      	ldrh	r3, [r7, #14]
 801342a:	4619      	mov	r1, r3
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f7f8 fa8d 	bl	800b94c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013432:	697b      	ldr	r3, [r7, #20]
 8013434:	7a5b      	ldrb	r3, [r3, #9]
 8013436:	2b11      	cmp	r3, #17
 8013438:	d006      	beq.n	8013448 <ip4_input+0x1b8>
 801343a:	2b11      	cmp	r3, #17
 801343c:	dc13      	bgt.n	8013466 <ip4_input+0x1d6>
 801343e:	2b01      	cmp	r3, #1
 8013440:	d00c      	beq.n	801345c <ip4_input+0x1cc>
 8013442:	2b06      	cmp	r3, #6
 8013444:	d005      	beq.n	8013452 <ip4_input+0x1c2>
 8013446:	e00e      	b.n	8013466 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013448:	6839      	ldr	r1, [r7, #0]
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f7fe f984 	bl	8011758 <udp_input>
        break;
 8013450:	e026      	b.n	80134a0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013452:	6839      	ldr	r1, [r7, #0]
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f7fa f9cb 	bl	800d7f0 <tcp_input>
        break;
 801345a:	e021      	b.n	80134a0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801345c:	6839      	ldr	r1, [r7, #0]
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f7ff fcee 	bl	8012e40 <icmp_input>
        break;
 8013464:	e01c      	b.n	80134a0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013466:	4b1a      	ldr	r3, [pc, #104]	@ (80134d0 <ip4_input+0x240>)
 8013468:	695b      	ldr	r3, [r3, #20]
 801346a:	6939      	ldr	r1, [r7, #16]
 801346c:	4618      	mov	r0, r3
 801346e:	f000 f90b 	bl	8013688 <ip4_addr_isbroadcast_u32>
 8013472:	4603      	mov	r3, r0
 8013474:	2b00      	cmp	r3, #0
 8013476:	d10f      	bne.n	8013498 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013478:	4b15      	ldr	r3, [pc, #84]	@ (80134d0 <ip4_input+0x240>)
 801347a:	695b      	ldr	r3, [r3, #20]
 801347c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013480:	2be0      	cmp	r3, #224	@ 0xe0
 8013482:	d009      	beq.n	8013498 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013484:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013488:	4619      	mov	r1, r3
 801348a:	6878      	ldr	r0, [r7, #4]
 801348c:	f7f8 fad1 	bl	800ba32 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013490:	2102      	movs	r1, #2
 8013492:	6878      	ldr	r0, [r7, #4]
 8013494:	f7ff fdd8 	bl	8013048 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f7f8 fadd 	bl	800ba58 <pbuf_free>
        break;
 801349e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80134a0:	4b0b      	ldr	r3, [pc, #44]	@ (80134d0 <ip4_input+0x240>)
 80134a2:	2200      	movs	r2, #0
 80134a4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80134a6:	4b0a      	ldr	r3, [pc, #40]	@ (80134d0 <ip4_input+0x240>)
 80134a8:	2200      	movs	r2, #0
 80134aa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80134ac:	4b08      	ldr	r3, [pc, #32]	@ (80134d0 <ip4_input+0x240>)
 80134ae:	2200      	movs	r2, #0
 80134b0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80134b2:	4b07      	ldr	r3, [pc, #28]	@ (80134d0 <ip4_input+0x240>)
 80134b4:	2200      	movs	r2, #0
 80134b6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80134b8:	4b05      	ldr	r3, [pc, #20]	@ (80134d0 <ip4_input+0x240>)
 80134ba:	2200      	movs	r2, #0
 80134bc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80134be:	4b04      	ldr	r3, [pc, #16]	@ (80134d0 <ip4_input+0x240>)
 80134c0:	2200      	movs	r2, #0
 80134c2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80134c4:	2300      	movs	r3, #0
}
 80134c6:	4618      	mov	r0, r3
 80134c8:	3718      	adds	r7, #24
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}
 80134ce:	bf00      	nop
 80134d0:	200059dc 	.word	0x200059dc
 80134d4:	2000b100 	.word	0x2000b100

080134d8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b08a      	sub	sp, #40	@ 0x28
 80134dc:	af04      	add	r7, sp, #16
 80134de:	60f8      	str	r0, [r7, #12]
 80134e0:	60b9      	str	r1, [r7, #8]
 80134e2:	607a      	str	r2, [r7, #4]
 80134e4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80134e6:	68bb      	ldr	r3, [r7, #8]
 80134e8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d009      	beq.n	8013504 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d003      	beq.n	80134fe <ip4_output_if+0x26>
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d102      	bne.n	8013504 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80134fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013500:	3304      	adds	r3, #4
 8013502:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013504:	78fa      	ldrb	r2, [r7, #3]
 8013506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013508:	9302      	str	r3, [sp, #8]
 801350a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801350e:	9301      	str	r3, [sp, #4]
 8013510:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013514:	9300      	str	r3, [sp, #0]
 8013516:	4613      	mov	r3, r2
 8013518:	687a      	ldr	r2, [r7, #4]
 801351a:	6979      	ldr	r1, [r7, #20]
 801351c:	68f8      	ldr	r0, [r7, #12]
 801351e:	f000 f805 	bl	801352c <ip4_output_if_src>
 8013522:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013524:	4618      	mov	r0, r3
 8013526:	3718      	adds	r7, #24
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}

0801352c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b088      	sub	sp, #32
 8013530:	af00      	add	r7, sp, #0
 8013532:	60f8      	str	r0, [r7, #12]
 8013534:	60b9      	str	r1, [r7, #8]
 8013536:	607a      	str	r2, [r7, #4]
 8013538:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	7b9b      	ldrb	r3, [r3, #14]
 801353e:	2b01      	cmp	r3, #1
 8013540:	d006      	beq.n	8013550 <ip4_output_if_src+0x24>
 8013542:	4b4b      	ldr	r3, [pc, #300]	@ (8013670 <ip4_output_if_src+0x144>)
 8013544:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8013548:	494a      	ldr	r1, [pc, #296]	@ (8013674 <ip4_output_if_src+0x148>)
 801354a:	484b      	ldr	r0, [pc, #300]	@ (8013678 <ip4_output_if_src+0x14c>)
 801354c:	f001 f8f2 	bl	8014734 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d060      	beq.n	8013618 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013556:	2314      	movs	r3, #20
 8013558:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801355a:	2114      	movs	r1, #20
 801355c:	68f8      	ldr	r0, [r7, #12]
 801355e:	f7f8 f9e5 	bl	800b92c <pbuf_add_header>
 8013562:	4603      	mov	r3, r0
 8013564:	2b00      	cmp	r3, #0
 8013566:	d002      	beq.n	801356e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013568:	f06f 0301 	mvn.w	r3, #1
 801356c:	e07c      	b.n	8013668 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	685b      	ldr	r3, [r3, #4]
 8013572:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	895b      	ldrh	r3, [r3, #10]
 8013578:	2b13      	cmp	r3, #19
 801357a:	d806      	bhi.n	801358a <ip4_output_if_src+0x5e>
 801357c:	4b3c      	ldr	r3, [pc, #240]	@ (8013670 <ip4_output_if_src+0x144>)
 801357e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8013582:	493e      	ldr	r1, [pc, #248]	@ (801367c <ip4_output_if_src+0x150>)
 8013584:	483c      	ldr	r0, [pc, #240]	@ (8013678 <ip4_output_if_src+0x14c>)
 8013586:	f001 f8d5 	bl	8014734 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801358a:	69fb      	ldr	r3, [r7, #28]
 801358c:	78fa      	ldrb	r2, [r7, #3]
 801358e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013590:	69fb      	ldr	r3, [r7, #28]
 8013592:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013596:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681a      	ldr	r2, [r3, #0]
 801359c:	69fb      	ldr	r3, [r7, #28]
 801359e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80135a0:	8b7b      	ldrh	r3, [r7, #26]
 80135a2:	089b      	lsrs	r3, r3, #2
 80135a4:	b29b      	uxth	r3, r3
 80135a6:	b2db      	uxtb	r3, r3
 80135a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80135ac:	b2da      	uxtb	r2, r3
 80135ae:	69fb      	ldr	r3, [r7, #28]
 80135b0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80135b2:	69fb      	ldr	r3, [r7, #28]
 80135b4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80135b8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	891b      	ldrh	r3, [r3, #8]
 80135be:	4618      	mov	r0, r3
 80135c0:	f7f6 feec 	bl	800a39c <lwip_htons>
 80135c4:	4603      	mov	r3, r0
 80135c6:	461a      	mov	r2, r3
 80135c8:	69fb      	ldr	r3, [r7, #28]
 80135ca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80135cc:	69fb      	ldr	r3, [r7, #28]
 80135ce:	2200      	movs	r2, #0
 80135d0:	719a      	strb	r2, [r3, #6]
 80135d2:	2200      	movs	r2, #0
 80135d4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80135d6:	4b2a      	ldr	r3, [pc, #168]	@ (8013680 <ip4_output_if_src+0x154>)
 80135d8:	881b      	ldrh	r3, [r3, #0]
 80135da:	4618      	mov	r0, r3
 80135dc:	f7f6 fede 	bl	800a39c <lwip_htons>
 80135e0:	4603      	mov	r3, r0
 80135e2:	461a      	mov	r2, r3
 80135e4:	69fb      	ldr	r3, [r7, #28]
 80135e6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80135e8:	4b25      	ldr	r3, [pc, #148]	@ (8013680 <ip4_output_if_src+0x154>)
 80135ea:	881b      	ldrh	r3, [r3, #0]
 80135ec:	3301      	adds	r3, #1
 80135ee:	b29a      	uxth	r2, r3
 80135f0:	4b23      	ldr	r3, [pc, #140]	@ (8013680 <ip4_output_if_src+0x154>)
 80135f2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d104      	bne.n	8013604 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80135fa:	4b22      	ldr	r3, [pc, #136]	@ (8013684 <ip4_output_if_src+0x158>)
 80135fc:	681a      	ldr	r2, [r3, #0]
 80135fe:	69fb      	ldr	r3, [r7, #28]
 8013600:	60da      	str	r2, [r3, #12]
 8013602:	e003      	b.n	801360c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	681a      	ldr	r2, [r3, #0]
 8013608:	69fb      	ldr	r3, [r7, #28]
 801360a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801360c:	69fb      	ldr	r3, [r7, #28]
 801360e:	2200      	movs	r2, #0
 8013610:	729a      	strb	r2, [r3, #10]
 8013612:	2200      	movs	r2, #0
 8013614:	72da      	strb	r2, [r3, #11]
 8013616:	e00f      	b.n	8013638 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	895b      	ldrh	r3, [r3, #10]
 801361c:	2b13      	cmp	r3, #19
 801361e:	d802      	bhi.n	8013626 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013620:	f06f 0301 	mvn.w	r3, #1
 8013624:	e020      	b.n	8013668 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	685b      	ldr	r3, [r3, #4]
 801362a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801362c:	69fb      	ldr	r3, [r7, #28]
 801362e:	691b      	ldr	r3, [r3, #16]
 8013630:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013632:	f107 0314 	add.w	r3, r7, #20
 8013636:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801363a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801363c:	2b00      	cmp	r3, #0
 801363e:	d00c      	beq.n	801365a <ip4_output_if_src+0x12e>
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	891a      	ldrh	r2, [r3, #8]
 8013644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013646:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013648:	429a      	cmp	r2, r3
 801364a:	d906      	bls.n	801365a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801364c:	687a      	ldr	r2, [r7, #4]
 801364e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013650:	68f8      	ldr	r0, [r7, #12]
 8013652:	f000 fd53 	bl	80140fc <ip4_frag>
 8013656:	4603      	mov	r3, r0
 8013658:	e006      	b.n	8013668 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801365c:	695b      	ldr	r3, [r3, #20]
 801365e:	687a      	ldr	r2, [r7, #4]
 8013660:	68f9      	ldr	r1, [r7, #12]
 8013662:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013664:	4798      	blx	r3
 8013666:	4603      	mov	r3, r0
}
 8013668:	4618      	mov	r0, r3
 801366a:	3720      	adds	r7, #32
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}
 8013670:	08017be8 	.word	0x08017be8
 8013674:	08017c1c 	.word	0x08017c1c
 8013678:	08017c28 	.word	0x08017c28
 801367c:	08017c50 	.word	0x08017c50
 8013680:	2000b25e 	.word	0x2000b25e
 8013684:	08018038 	.word	0x08018038

08013688 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013688:	b480      	push	{r7}
 801368a:	b085      	sub	sp, #20
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
 8013690:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	f1b3 3fff 	cmp.w	r3, #4294967295
 801369c:	d002      	beq.n	80136a4 <ip4_addr_isbroadcast_u32+0x1c>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d101      	bne.n	80136a8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80136a4:	2301      	movs	r3, #1
 80136a6:	e02a      	b.n	80136fe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80136ae:	f003 0302 	and.w	r3, r3, #2
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d101      	bne.n	80136ba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80136b6:	2300      	movs	r3, #0
 80136b8:	e021      	b.n	80136fe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	3304      	adds	r3, #4
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	687a      	ldr	r2, [r7, #4]
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d101      	bne.n	80136ca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80136c6:	2300      	movs	r3, #0
 80136c8:	e019      	b.n	80136fe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80136ca:	68fa      	ldr	r2, [r7, #12]
 80136cc:	683b      	ldr	r3, [r7, #0]
 80136ce:	3304      	adds	r3, #4
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	405a      	eors	r2, r3
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	3308      	adds	r3, #8
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	4013      	ands	r3, r2
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d10d      	bne.n	80136fc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	3308      	adds	r3, #8
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	43da      	mvns	r2, r3
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	3308      	adds	r3, #8
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d101      	bne.n	80136fc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80136f8:	2301      	movs	r3, #1
 80136fa:	e000      	b.n	80136fe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80136fc:	2300      	movs	r3, #0
  }
}
 80136fe:	4618      	mov	r0, r3
 8013700:	3714      	adds	r7, #20
 8013702:	46bd      	mov	sp, r7
 8013704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013708:	4770      	bx	lr
	...

0801370c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b084      	sub	sp, #16
 8013710:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013712:	2300      	movs	r3, #0
 8013714:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013716:	4b12      	ldr	r3, [pc, #72]	@ (8013760 <ip_reass_tmr+0x54>)
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801371c:	e018      	b.n	8013750 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	7fdb      	ldrb	r3, [r3, #31]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d00b      	beq.n	801373e <ip_reass_tmr+0x32>
      r->timer--;
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	7fdb      	ldrb	r3, [r3, #31]
 801372a:	3b01      	subs	r3, #1
 801372c:	b2da      	uxtb	r2, r3
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	60fb      	str	r3, [r7, #12]
 801373c:	e008      	b.n	8013750 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013748:	68b9      	ldr	r1, [r7, #8]
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f000 f80a 	bl	8013764 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d1e3      	bne.n	801371e <ip_reass_tmr+0x12>
    }
  }
}
 8013756:	bf00      	nop
 8013758:	bf00      	nop
 801375a:	3710      	adds	r7, #16
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}
 8013760:	2000b260 	.word	0x2000b260

08013764 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b088      	sub	sp, #32
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
 801376c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801376e:	2300      	movs	r3, #0
 8013770:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013772:	683a      	ldr	r2, [r7, #0]
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	429a      	cmp	r2, r3
 8013778:	d105      	bne.n	8013786 <ip_reass_free_complete_datagram+0x22>
 801377a:	4b45      	ldr	r3, [pc, #276]	@ (8013890 <ip_reass_free_complete_datagram+0x12c>)
 801377c:	22ab      	movs	r2, #171	@ 0xab
 801377e:	4945      	ldr	r1, [pc, #276]	@ (8013894 <ip_reass_free_complete_datagram+0x130>)
 8013780:	4845      	ldr	r0, [pc, #276]	@ (8013898 <ip_reass_free_complete_datagram+0x134>)
 8013782:	f000 ffd7 	bl	8014734 <iprintf>
  if (prev != NULL) {
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d00a      	beq.n	80137a2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	687a      	ldr	r2, [r7, #4]
 8013792:	429a      	cmp	r2, r3
 8013794:	d005      	beq.n	80137a2 <ip_reass_free_complete_datagram+0x3e>
 8013796:	4b3e      	ldr	r3, [pc, #248]	@ (8013890 <ip_reass_free_complete_datagram+0x12c>)
 8013798:	22ad      	movs	r2, #173	@ 0xad
 801379a:	4940      	ldr	r1, [pc, #256]	@ (801389c <ip_reass_free_complete_datagram+0x138>)
 801379c:	483e      	ldr	r0, [pc, #248]	@ (8013898 <ip_reass_free_complete_datagram+0x134>)
 801379e:	f000 ffc9 	bl	8014734 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	685b      	ldr	r3, [r3, #4]
 80137a6:	685b      	ldr	r3, [r3, #4]
 80137a8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80137aa:	697b      	ldr	r3, [r7, #20]
 80137ac:	889b      	ldrh	r3, [r3, #4]
 80137ae:	b29b      	uxth	r3, r3
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d12a      	bne.n	801380a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	685b      	ldr	r3, [r3, #4]
 80137b8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	681a      	ldr	r2, [r3, #0]
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80137c2:	69bb      	ldr	r3, [r7, #24]
 80137c4:	6858      	ldr	r0, [r3, #4]
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	3308      	adds	r3, #8
 80137ca:	2214      	movs	r2, #20
 80137cc:	4619      	mov	r1, r3
 80137ce:	f001 f88c 	bl	80148ea <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80137d2:	2101      	movs	r1, #1
 80137d4:	69b8      	ldr	r0, [r7, #24]
 80137d6:	f7ff fc47 	bl	8013068 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80137da:	69b8      	ldr	r0, [r7, #24]
 80137dc:	f7f8 f9c4 	bl	800bb68 <pbuf_clen>
 80137e0:	4603      	mov	r3, r0
 80137e2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80137e4:	8bfa      	ldrh	r2, [r7, #30]
 80137e6:	8a7b      	ldrh	r3, [r7, #18]
 80137e8:	4413      	add	r3, r2
 80137ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80137ee:	db05      	blt.n	80137fc <ip_reass_free_complete_datagram+0x98>
 80137f0:	4b27      	ldr	r3, [pc, #156]	@ (8013890 <ip_reass_free_complete_datagram+0x12c>)
 80137f2:	22bc      	movs	r2, #188	@ 0xbc
 80137f4:	492a      	ldr	r1, [pc, #168]	@ (80138a0 <ip_reass_free_complete_datagram+0x13c>)
 80137f6:	4828      	ldr	r0, [pc, #160]	@ (8013898 <ip_reass_free_complete_datagram+0x134>)
 80137f8:	f000 ff9c 	bl	8014734 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80137fc:	8bfa      	ldrh	r2, [r7, #30]
 80137fe:	8a7b      	ldrh	r3, [r7, #18]
 8013800:	4413      	add	r3, r2
 8013802:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013804:	69b8      	ldr	r0, [r7, #24]
 8013806:	f7f8 f927 	bl	800ba58 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	685b      	ldr	r3, [r3, #4]
 801380e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013810:	e01f      	b.n	8013852 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013812:	69bb      	ldr	r3, [r7, #24]
 8013814:	685b      	ldr	r3, [r3, #4]
 8013816:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013818:	69bb      	ldr	r3, [r7, #24]
 801381a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801381c:	697b      	ldr	r3, [r7, #20]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013822:	68f8      	ldr	r0, [r7, #12]
 8013824:	f7f8 f9a0 	bl	800bb68 <pbuf_clen>
 8013828:	4603      	mov	r3, r0
 801382a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801382c:	8bfa      	ldrh	r2, [r7, #30]
 801382e:	8a7b      	ldrh	r3, [r7, #18]
 8013830:	4413      	add	r3, r2
 8013832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013836:	db05      	blt.n	8013844 <ip_reass_free_complete_datagram+0xe0>
 8013838:	4b15      	ldr	r3, [pc, #84]	@ (8013890 <ip_reass_free_complete_datagram+0x12c>)
 801383a:	22cc      	movs	r2, #204	@ 0xcc
 801383c:	4918      	ldr	r1, [pc, #96]	@ (80138a0 <ip_reass_free_complete_datagram+0x13c>)
 801383e:	4816      	ldr	r0, [pc, #88]	@ (8013898 <ip_reass_free_complete_datagram+0x134>)
 8013840:	f000 ff78 	bl	8014734 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013844:	8bfa      	ldrh	r2, [r7, #30]
 8013846:	8a7b      	ldrh	r3, [r7, #18]
 8013848:	4413      	add	r3, r2
 801384a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801384c:	68f8      	ldr	r0, [r7, #12]
 801384e:	f7f8 f903 	bl	800ba58 <pbuf_free>
  while (p != NULL) {
 8013852:	69bb      	ldr	r3, [r7, #24]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d1dc      	bne.n	8013812 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013858:	6839      	ldr	r1, [r7, #0]
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f000 f8c2 	bl	80139e4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013860:	4b10      	ldr	r3, [pc, #64]	@ (80138a4 <ip_reass_free_complete_datagram+0x140>)
 8013862:	881b      	ldrh	r3, [r3, #0]
 8013864:	8bfa      	ldrh	r2, [r7, #30]
 8013866:	429a      	cmp	r2, r3
 8013868:	d905      	bls.n	8013876 <ip_reass_free_complete_datagram+0x112>
 801386a:	4b09      	ldr	r3, [pc, #36]	@ (8013890 <ip_reass_free_complete_datagram+0x12c>)
 801386c:	22d2      	movs	r2, #210	@ 0xd2
 801386e:	490e      	ldr	r1, [pc, #56]	@ (80138a8 <ip_reass_free_complete_datagram+0x144>)
 8013870:	4809      	ldr	r0, [pc, #36]	@ (8013898 <ip_reass_free_complete_datagram+0x134>)
 8013872:	f000 ff5f 	bl	8014734 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013876:	4b0b      	ldr	r3, [pc, #44]	@ (80138a4 <ip_reass_free_complete_datagram+0x140>)
 8013878:	881a      	ldrh	r2, [r3, #0]
 801387a:	8bfb      	ldrh	r3, [r7, #30]
 801387c:	1ad3      	subs	r3, r2, r3
 801387e:	b29a      	uxth	r2, r3
 8013880:	4b08      	ldr	r3, [pc, #32]	@ (80138a4 <ip_reass_free_complete_datagram+0x140>)
 8013882:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013884:	8bfb      	ldrh	r3, [r7, #30]
}
 8013886:	4618      	mov	r0, r3
 8013888:	3720      	adds	r7, #32
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}
 801388e:	bf00      	nop
 8013890:	08017c80 	.word	0x08017c80
 8013894:	08017cbc 	.word	0x08017cbc
 8013898:	08017cc8 	.word	0x08017cc8
 801389c:	08017cf0 	.word	0x08017cf0
 80138a0:	08017d04 	.word	0x08017d04
 80138a4:	2000b264 	.word	0x2000b264
 80138a8:	08017d24 	.word	0x08017d24

080138ac <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b08a      	sub	sp, #40	@ 0x28
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80138b6:	2300      	movs	r3, #0
 80138b8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80138ba:	2300      	movs	r3, #0
 80138bc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80138be:	2300      	movs	r3, #0
 80138c0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80138c2:	2300      	movs	r3, #0
 80138c4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80138c6:	2300      	movs	r3, #0
 80138c8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80138ca:	4b28      	ldr	r3, [pc, #160]	@ (801396c <ip_reass_remove_oldest_datagram+0xc0>)
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80138d0:	e030      	b.n	8013934 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80138d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138d4:	695a      	ldr	r2, [r3, #20]
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	68db      	ldr	r3, [r3, #12]
 80138da:	429a      	cmp	r2, r3
 80138dc:	d10c      	bne.n	80138f8 <ip_reass_remove_oldest_datagram+0x4c>
 80138de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138e0:	699a      	ldr	r2, [r3, #24]
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	691b      	ldr	r3, [r3, #16]
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d106      	bne.n	80138f8 <ip_reass_remove_oldest_datagram+0x4c>
 80138ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ec:	899a      	ldrh	r2, [r3, #12]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	889b      	ldrh	r3, [r3, #4]
 80138f2:	b29b      	uxth	r3, r3
 80138f4:	429a      	cmp	r2, r3
 80138f6:	d014      	beq.n	8013922 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80138f8:	693b      	ldr	r3, [r7, #16]
 80138fa:	3301      	adds	r3, #1
 80138fc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80138fe:	6a3b      	ldr	r3, [r7, #32]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d104      	bne.n	801390e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013906:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013908:	69fb      	ldr	r3, [r7, #28]
 801390a:	61bb      	str	r3, [r7, #24]
 801390c:	e009      	b.n	8013922 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013910:	7fda      	ldrb	r2, [r3, #31]
 8013912:	6a3b      	ldr	r3, [r7, #32]
 8013914:	7fdb      	ldrb	r3, [r3, #31]
 8013916:	429a      	cmp	r2, r3
 8013918:	d803      	bhi.n	8013922 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801391c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801391e:	69fb      	ldr	r3, [r7, #28]
 8013920:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d001      	beq.n	801392e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801392c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013936:	2b00      	cmp	r3, #0
 8013938:	d1cb      	bne.n	80138d2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801393a:	6a3b      	ldr	r3, [r7, #32]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d008      	beq.n	8013952 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013940:	69b9      	ldr	r1, [r7, #24]
 8013942:	6a38      	ldr	r0, [r7, #32]
 8013944:	f7ff ff0e 	bl	8013764 <ip_reass_free_complete_datagram>
 8013948:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801394a:	697a      	ldr	r2, [r7, #20]
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	4413      	add	r3, r2
 8013950:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013952:	697a      	ldr	r2, [r7, #20]
 8013954:	683b      	ldr	r3, [r7, #0]
 8013956:	429a      	cmp	r2, r3
 8013958:	da02      	bge.n	8013960 <ip_reass_remove_oldest_datagram+0xb4>
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	2b01      	cmp	r3, #1
 801395e:	dcac      	bgt.n	80138ba <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013960:	697b      	ldr	r3, [r7, #20]
}
 8013962:	4618      	mov	r0, r3
 8013964:	3728      	adds	r7, #40	@ 0x28
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}
 801396a:	bf00      	nop
 801396c:	2000b260 	.word	0x2000b260

08013970 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b084      	sub	sp, #16
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801397a:	2004      	movs	r0, #4
 801397c:	f7f7 f986 	bl	800ac8c <memp_malloc>
 8013980:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d110      	bne.n	80139aa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013988:	6839      	ldr	r1, [r7, #0]
 801398a:	6878      	ldr	r0, [r7, #4]
 801398c:	f7ff ff8e 	bl	80138ac <ip_reass_remove_oldest_datagram>
 8013990:	4602      	mov	r2, r0
 8013992:	683b      	ldr	r3, [r7, #0]
 8013994:	4293      	cmp	r3, r2
 8013996:	dc03      	bgt.n	80139a0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013998:	2004      	movs	r0, #4
 801399a:	f7f7 f977 	bl	800ac8c <memp_malloc>
 801399e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d101      	bne.n	80139aa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80139a6:	2300      	movs	r3, #0
 80139a8:	e016      	b.n	80139d8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80139aa:	2220      	movs	r2, #32
 80139ac:	2100      	movs	r1, #0
 80139ae:	68f8      	ldr	r0, [r7, #12]
 80139b0:	f000 ff25 	bl	80147fe <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	220f      	movs	r2, #15
 80139b8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80139ba:	4b09      	ldr	r3, [pc, #36]	@ (80139e0 <ip_reass_enqueue_new_datagram+0x70>)
 80139bc:	681a      	ldr	r2, [r3, #0]
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80139c2:	4a07      	ldr	r2, [pc, #28]	@ (80139e0 <ip_reass_enqueue_new_datagram+0x70>)
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	3308      	adds	r3, #8
 80139cc:	2214      	movs	r2, #20
 80139ce:	6879      	ldr	r1, [r7, #4]
 80139d0:	4618      	mov	r0, r3
 80139d2:	f000 ff8a 	bl	80148ea <memcpy>
  return ipr;
 80139d6:	68fb      	ldr	r3, [r7, #12]
}
 80139d8:	4618      	mov	r0, r3
 80139da:	3710      	adds	r7, #16
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}
 80139e0:	2000b260 	.word	0x2000b260

080139e4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b082      	sub	sp, #8
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
 80139ec:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80139ee:	4b10      	ldr	r3, [pc, #64]	@ (8013a30 <ip_reass_dequeue_datagram+0x4c>)
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	687a      	ldr	r2, [r7, #4]
 80139f4:	429a      	cmp	r2, r3
 80139f6:	d104      	bne.n	8013a02 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	4a0c      	ldr	r2, [pc, #48]	@ (8013a30 <ip_reass_dequeue_datagram+0x4c>)
 80139fe:	6013      	str	r3, [r2, #0]
 8013a00:	e00d      	b.n	8013a1e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d106      	bne.n	8013a16 <ip_reass_dequeue_datagram+0x32>
 8013a08:	4b0a      	ldr	r3, [pc, #40]	@ (8013a34 <ip_reass_dequeue_datagram+0x50>)
 8013a0a:	f240 1245 	movw	r2, #325	@ 0x145
 8013a0e:	490a      	ldr	r1, [pc, #40]	@ (8013a38 <ip_reass_dequeue_datagram+0x54>)
 8013a10:	480a      	ldr	r0, [pc, #40]	@ (8013a3c <ip_reass_dequeue_datagram+0x58>)
 8013a12:	f000 fe8f 	bl	8014734 <iprintf>
    prev->next = ipr->next;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681a      	ldr	r2, [r3, #0]
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013a1e:	6879      	ldr	r1, [r7, #4]
 8013a20:	2004      	movs	r0, #4
 8013a22:	f7f7 f9a3 	bl	800ad6c <memp_free>
}
 8013a26:	bf00      	nop
 8013a28:	3708      	adds	r7, #8
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}
 8013a2e:	bf00      	nop
 8013a30:	2000b260 	.word	0x2000b260
 8013a34:	08017c80 	.word	0x08017c80
 8013a38:	08017d48 	.word	0x08017d48
 8013a3c:	08017cc8 	.word	0x08017cc8

08013a40 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b08c      	sub	sp, #48	@ 0x30
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	60f8      	str	r0, [r7, #12]
 8013a48:	60b9      	str	r1, [r7, #8]
 8013a4a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013a50:	2301      	movs	r3, #1
 8013a52:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013a54:	68bb      	ldr	r3, [r7, #8]
 8013a56:	685b      	ldr	r3, [r3, #4]
 8013a58:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013a5a:	69fb      	ldr	r3, [r7, #28]
 8013a5c:	885b      	ldrh	r3, [r3, #2]
 8013a5e:	b29b      	uxth	r3, r3
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7f6 fc9b 	bl	800a39c <lwip_htons>
 8013a66:	4603      	mov	r3, r0
 8013a68:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013a6a:	69fb      	ldr	r3, [r7, #28]
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	f003 030f 	and.w	r3, r3, #15
 8013a72:	b2db      	uxtb	r3, r3
 8013a74:	009b      	lsls	r3, r3, #2
 8013a76:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013a78:	7e7b      	ldrb	r3, [r7, #25]
 8013a7a:	b29b      	uxth	r3, r3
 8013a7c:	8b7a      	ldrh	r2, [r7, #26]
 8013a7e:	429a      	cmp	r2, r3
 8013a80:	d202      	bcs.n	8013a88 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013a82:	f04f 33ff 	mov.w	r3, #4294967295
 8013a86:	e135      	b.n	8013cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013a88:	7e7b      	ldrb	r3, [r7, #25]
 8013a8a:	b29b      	uxth	r3, r3
 8013a8c:	8b7a      	ldrh	r2, [r7, #26]
 8013a8e:	1ad3      	subs	r3, r2, r3
 8013a90:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013a92:	69fb      	ldr	r3, [r7, #28]
 8013a94:	88db      	ldrh	r3, [r3, #6]
 8013a96:	b29b      	uxth	r3, r3
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f7f6 fc7f 	bl	800a39c <lwip_htons>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013aa4:	b29b      	uxth	r3, r3
 8013aa6:	00db      	lsls	r3, r3, #3
 8013aa8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	685b      	ldr	r3, [r3, #4]
 8013aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8013ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	701a      	strb	r2, [r3, #0]
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	705a      	strb	r2, [r3, #1]
 8013aba:	2200      	movs	r2, #0
 8013abc:	709a      	strb	r2, [r3, #2]
 8013abe:	2200      	movs	r2, #0
 8013ac0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ac4:	8afa      	ldrh	r2, [r7, #22]
 8013ac6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013ac8:	8afa      	ldrh	r2, [r7, #22]
 8013aca:	8b7b      	ldrh	r3, [r7, #26]
 8013acc:	4413      	add	r3, r2
 8013ace:	b29a      	uxth	r2, r3
 8013ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ad2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ad6:	88db      	ldrh	r3, [r3, #6]
 8013ad8:	b29b      	uxth	r3, r3
 8013ada:	8afa      	ldrh	r2, [r7, #22]
 8013adc:	429a      	cmp	r2, r3
 8013ade:	d902      	bls.n	8013ae6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ae4:	e106      	b.n	8013cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	685b      	ldr	r3, [r3, #4]
 8013aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8013aec:	e068      	b.n	8013bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013af0:	685b      	ldr	r3, [r3, #4]
 8013af2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013af6:	889b      	ldrh	r3, [r3, #4]
 8013af8:	b29a      	uxth	r2, r3
 8013afa:	693b      	ldr	r3, [r7, #16]
 8013afc:	889b      	ldrh	r3, [r3, #4]
 8013afe:	b29b      	uxth	r3, r3
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d235      	bcs.n	8013b70 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b08:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d020      	beq.n	8013b52 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b12:	889b      	ldrh	r3, [r3, #4]
 8013b14:	b29a      	uxth	r2, r3
 8013b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b18:	88db      	ldrh	r3, [r3, #6]
 8013b1a:	b29b      	uxth	r3, r3
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d307      	bcc.n	8013b30 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b22:	88db      	ldrh	r3, [r3, #6]
 8013b24:	b29a      	uxth	r2, r3
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	889b      	ldrh	r3, [r3, #4]
 8013b2a:	b29b      	uxth	r3, r3
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d902      	bls.n	8013b36 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b30:	f04f 33ff 	mov.w	r3, #4294967295
 8013b34:	e0de      	b.n	8013cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b38:	68ba      	ldr	r2, [r7, #8]
 8013b3a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b3e:	88db      	ldrh	r3, [r3, #6]
 8013b40:	b29a      	uxth	r2, r3
 8013b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b44:	889b      	ldrh	r3, [r3, #4]
 8013b46:	b29b      	uxth	r3, r3
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d03d      	beq.n	8013bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013b50:	e03a      	b.n	8013bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b54:	88db      	ldrh	r3, [r3, #6]
 8013b56:	b29a      	uxth	r2, r3
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	889b      	ldrh	r3, [r3, #4]
 8013b5c:	b29b      	uxth	r3, r3
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d902      	bls.n	8013b68 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b62:	f04f 33ff 	mov.w	r3, #4294967295
 8013b66:	e0c5      	b.n	8013cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	68ba      	ldr	r2, [r7, #8]
 8013b6c:	605a      	str	r2, [r3, #4]
      break;
 8013b6e:	e02b      	b.n	8013bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b72:	889b      	ldrh	r3, [r3, #4]
 8013b74:	b29a      	uxth	r2, r3
 8013b76:	693b      	ldr	r3, [r7, #16]
 8013b78:	889b      	ldrh	r3, [r3, #4]
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	d102      	bne.n	8013b86 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b80:	f04f 33ff 	mov.w	r3, #4294967295
 8013b84:	e0b6      	b.n	8013cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b88:	889b      	ldrh	r3, [r3, #4]
 8013b8a:	b29a      	uxth	r2, r3
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	88db      	ldrh	r3, [r3, #6]
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	429a      	cmp	r2, r3
 8013b94:	d202      	bcs.n	8013b9c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b96:	f04f 33ff 	mov.w	r3, #4294967295
 8013b9a:	e0ab      	b.n	8013cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d009      	beq.n	8013bb6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ba4:	88db      	ldrh	r3, [r3, #6]
 8013ba6:	b29a      	uxth	r2, r3
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	889b      	ldrh	r3, [r3, #4]
 8013bac:	b29b      	uxth	r3, r3
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d001      	beq.n	8013bb6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013bb6:	693b      	ldr	r3, [r7, #16]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8013bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d193      	bne.n	8013aee <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013bc6:	e000      	b.n	8013bca <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013bc8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d12d      	bne.n	8013c2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d01c      	beq.n	8013c10 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bd8:	88db      	ldrh	r3, [r3, #6]
 8013bda:	b29a      	uxth	r2, r3
 8013bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bde:	889b      	ldrh	r3, [r3, #4]
 8013be0:	b29b      	uxth	r3, r3
 8013be2:	429a      	cmp	r2, r3
 8013be4:	d906      	bls.n	8013bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013be6:	4b45      	ldr	r3, [pc, #276]	@ (8013cfc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013be8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8013bec:	4944      	ldr	r1, [pc, #272]	@ (8013d00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013bee:	4845      	ldr	r0, [pc, #276]	@ (8013d04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013bf0:	f000 fda0 	bl	8014734 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bf6:	68ba      	ldr	r2, [r7, #8]
 8013bf8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bfc:	88db      	ldrh	r3, [r3, #6]
 8013bfe:	b29a      	uxth	r2, r3
 8013c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c02:	889b      	ldrh	r3, [r3, #4]
 8013c04:	b29b      	uxth	r3, r3
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d010      	beq.n	8013c2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	623b      	str	r3, [r7, #32]
 8013c0e:	e00d      	b.n	8013c2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	685b      	ldr	r3, [r3, #4]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d006      	beq.n	8013c26 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013c18:	4b38      	ldr	r3, [pc, #224]	@ (8013cfc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c1a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8013c1e:	493a      	ldr	r1, [pc, #232]	@ (8013d08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013c20:	4838      	ldr	r0, [pc, #224]	@ (8013d04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c22:	f000 fd87 	bl	8014734 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	68ba      	ldr	r2, [r7, #8]
 8013c2a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d105      	bne.n	8013c3e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	7f9b      	ldrb	r3, [r3, #30]
 8013c36:	f003 0301 	and.w	r3, r3, #1
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d059      	beq.n	8013cf2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013c3e:	6a3b      	ldr	r3, [r7, #32]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d04f      	beq.n	8013ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	685b      	ldr	r3, [r3, #4]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d006      	beq.n	8013c5a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	685b      	ldr	r3, [r3, #4]
 8013c52:	889b      	ldrh	r3, [r3, #4]
 8013c54:	b29b      	uxth	r3, r3
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d002      	beq.n	8013c60 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	623b      	str	r3, [r7, #32]
 8013c5e:	e041      	b.n	8013ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c62:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8013c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013c6a:	e012      	b.n	8013c92 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c6e:	685b      	ldr	r3, [r3, #4]
 8013c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8013c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c74:	88db      	ldrh	r3, [r3, #6]
 8013c76:	b29a      	uxth	r2, r3
 8013c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c7a:	889b      	ldrh	r3, [r3, #4]
 8013c7c:	b29b      	uxth	r3, r3
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d002      	beq.n	8013c88 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013c82:	2300      	movs	r3, #0
 8013c84:	623b      	str	r3, [r7, #32]
            break;
 8013c86:	e007      	b.n	8013c98 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8013c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d1e9      	bne.n	8013c6c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013c98:	6a3b      	ldr	r3, [r7, #32]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d022      	beq.n	8013ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	685b      	ldr	r3, [r3, #4]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d106      	bne.n	8013cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013ca6:	4b15      	ldr	r3, [pc, #84]	@ (8013cfc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013ca8:	f240 12df 	movw	r2, #479	@ 0x1df
 8013cac:	4917      	ldr	r1, [pc, #92]	@ (8013d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013cae:	4815      	ldr	r0, [pc, #84]	@ (8013d04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013cb0:	f000 fd40 	bl	8014734 <iprintf>
          LWIP_ASSERT("sanity check",
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	685b      	ldr	r3, [r3, #4]
 8013cb8:	685b      	ldr	r3, [r3, #4]
 8013cba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013cbc:	429a      	cmp	r2, r3
 8013cbe:	d106      	bne.n	8013cce <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8013cfc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013cc2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8013cc6:	4911      	ldr	r1, [pc, #68]	@ (8013d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013cc8:	480e      	ldr	r0, [pc, #56]	@ (8013d04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013cca:	f000 fd33 	bl	8014734 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d006      	beq.n	8013ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013cd6:	4b09      	ldr	r3, [pc, #36]	@ (8013cfc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013cd8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8013cdc:	490c      	ldr	r1, [pc, #48]	@ (8013d10 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013cde:	4809      	ldr	r0, [pc, #36]	@ (8013d04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013ce0:	f000 fd28 	bl	8014734 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013ce4:	6a3b      	ldr	r3, [r7, #32]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	bf14      	ite	ne
 8013cea:	2301      	movne	r3, #1
 8013cec:	2300      	moveq	r3, #0
 8013cee:	b2db      	uxtb	r3, r3
 8013cf0:	e000      	b.n	8013cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013cf2:	2300      	movs	r3, #0
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3730      	adds	r7, #48	@ 0x30
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}
 8013cfc:	08017c80 	.word	0x08017c80
 8013d00:	08017d64 	.word	0x08017d64
 8013d04:	08017cc8 	.word	0x08017cc8
 8013d08:	08017d84 	.word	0x08017d84
 8013d0c:	08017dbc 	.word	0x08017dbc
 8013d10:	08017dcc 	.word	0x08017dcc

08013d14 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b08e      	sub	sp, #56	@ 0x38
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	685b      	ldr	r3, [r3, #4]
 8013d20:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d24:	781b      	ldrb	r3, [r3, #0]
 8013d26:	f003 030f 	and.w	r3, r3, #15
 8013d2a:	b2db      	uxtb	r3, r3
 8013d2c:	009b      	lsls	r3, r3, #2
 8013d2e:	b2db      	uxtb	r3, r3
 8013d30:	2b14      	cmp	r3, #20
 8013d32:	f040 8171 	bne.w	8014018 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d38:	88db      	ldrh	r3, [r3, #6]
 8013d3a:	b29b      	uxth	r3, r3
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7f6 fb2d 	bl	800a39c <lwip_htons>
 8013d42:	4603      	mov	r3, r0
 8013d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d48:	b29b      	uxth	r3, r3
 8013d4a:	00db      	lsls	r3, r3, #3
 8013d4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d50:	885b      	ldrh	r3, [r3, #2]
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7f6 fb21 	bl	800a39c <lwip_htons>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d60:	781b      	ldrb	r3, [r3, #0]
 8013d62:	f003 030f 	and.w	r3, r3, #15
 8013d66:	b2db      	uxtb	r3, r3
 8013d68:	009b      	lsls	r3, r3, #2
 8013d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8013d6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013d72:	b29b      	uxth	r3, r3
 8013d74:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013d76:	429a      	cmp	r2, r3
 8013d78:	f0c0 8150 	bcc.w	801401c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013d7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013d80:	b29b      	uxth	r3, r3
 8013d82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013d84:	1ad3      	subs	r3, r2, r3
 8013d86:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	f7f7 feed 	bl	800bb68 <pbuf_clen>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013d92:	4b8c      	ldr	r3, [pc, #560]	@ (8013fc4 <ip4_reass+0x2b0>)
 8013d94:	881b      	ldrh	r3, [r3, #0]
 8013d96:	461a      	mov	r2, r3
 8013d98:	8c3b      	ldrh	r3, [r7, #32]
 8013d9a:	4413      	add	r3, r2
 8013d9c:	2b0a      	cmp	r3, #10
 8013d9e:	dd10      	ble.n	8013dc2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013da0:	8c3b      	ldrh	r3, [r7, #32]
 8013da2:	4619      	mov	r1, r3
 8013da4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013da6:	f7ff fd81 	bl	80138ac <ip_reass_remove_oldest_datagram>
 8013daa:	4603      	mov	r3, r0
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	f000 8137 	beq.w	8014020 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013db2:	4b84      	ldr	r3, [pc, #528]	@ (8013fc4 <ip4_reass+0x2b0>)
 8013db4:	881b      	ldrh	r3, [r3, #0]
 8013db6:	461a      	mov	r2, r3
 8013db8:	8c3b      	ldrh	r3, [r7, #32]
 8013dba:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013dbc:	2b0a      	cmp	r3, #10
 8013dbe:	f300 812f 	bgt.w	8014020 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013dc2:	4b81      	ldr	r3, [pc, #516]	@ (8013fc8 <ip4_reass+0x2b4>)
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8013dc8:	e015      	b.n	8013df6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dcc:	695a      	ldr	r2, [r3, #20]
 8013dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dd0:	68db      	ldr	r3, [r3, #12]
 8013dd2:	429a      	cmp	r2, r3
 8013dd4:	d10c      	bne.n	8013df0 <ip4_reass+0xdc>
 8013dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dd8:	699a      	ldr	r2, [r3, #24]
 8013dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ddc:	691b      	ldr	r3, [r3, #16]
 8013dde:	429a      	cmp	r2, r3
 8013de0:	d106      	bne.n	8013df0 <ip4_reass+0xdc>
 8013de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013de4:	899a      	ldrh	r2, [r3, #12]
 8013de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013de8:	889b      	ldrh	r3, [r3, #4]
 8013dea:	b29b      	uxth	r3, r3
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d006      	beq.n	8013dfe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8013df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d1e6      	bne.n	8013dca <ip4_reass+0xb6>
 8013dfc:	e000      	b.n	8013e00 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013dfe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d109      	bne.n	8013e1a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013e06:	8c3b      	ldrh	r3, [r7, #32]
 8013e08:	4619      	mov	r1, r3
 8013e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013e0c:	f7ff fdb0 	bl	8013970 <ip_reass_enqueue_new_datagram>
 8013e10:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d11c      	bne.n	8013e52 <ip4_reass+0x13e>
      goto nullreturn;
 8013e18:	e105      	b.n	8014026 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e1c:	88db      	ldrh	r3, [r3, #6]
 8013e1e:	b29b      	uxth	r3, r3
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7f6 fabb 	bl	800a39c <lwip_htons>
 8013e26:	4603      	mov	r3, r0
 8013e28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d110      	bne.n	8013e52 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e32:	89db      	ldrh	r3, [r3, #14]
 8013e34:	4618      	mov	r0, r3
 8013e36:	f7f6 fab1 	bl	800a39c <lwip_htons>
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d006      	beq.n	8013e52 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e46:	3308      	adds	r3, #8
 8013e48:	2214      	movs	r2, #20
 8013e4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f000 fd4c 	bl	80148ea <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e54:	88db      	ldrh	r3, [r3, #6]
 8013e56:	b29b      	uxth	r3, r3
 8013e58:	f003 0320 	and.w	r3, r3, #32
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	bf0c      	ite	eq
 8013e60:	2301      	moveq	r3, #1
 8013e62:	2300      	movne	r3, #0
 8013e64:	b2db      	uxtb	r3, r3
 8013e66:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013e68:	69fb      	ldr	r3, [r7, #28]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d00e      	beq.n	8013e8c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013e6e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013e70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e72:	4413      	add	r3, r2
 8013e74:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013e76:	8b7a      	ldrh	r2, [r7, #26]
 8013e78:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	f0c0 80a0 	bcc.w	8013fc0 <ip4_reass+0x2ac>
 8013e80:	8b7b      	ldrh	r3, [r7, #26]
 8013e82:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8013e86:	4293      	cmp	r3, r2
 8013e88:	f200 809a 	bhi.w	8013fc0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013e8c:	69fa      	ldr	r2, [r7, #28]
 8013e8e:	6879      	ldr	r1, [r7, #4]
 8013e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013e92:	f7ff fdd5 	bl	8013a40 <ip_reass_chain_frag_into_datagram_and_validate>
 8013e96:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013e98:	697b      	ldr	r3, [r7, #20]
 8013e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e9e:	f000 809b 	beq.w	8013fd8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013ea2:	4b48      	ldr	r3, [pc, #288]	@ (8013fc4 <ip4_reass+0x2b0>)
 8013ea4:	881a      	ldrh	r2, [r3, #0]
 8013ea6:	8c3b      	ldrh	r3, [r7, #32]
 8013ea8:	4413      	add	r3, r2
 8013eaa:	b29a      	uxth	r2, r3
 8013eac:	4b45      	ldr	r3, [pc, #276]	@ (8013fc4 <ip4_reass+0x2b0>)
 8013eae:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013eb0:	69fb      	ldr	r3, [r7, #28]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d00d      	beq.n	8013ed2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013eb6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013eb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013eba:	4413      	add	r3, r2
 8013ebc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ec0:	8a7a      	ldrh	r2, [r7, #18]
 8013ec2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ec6:	7f9b      	ldrb	r3, [r3, #30]
 8013ec8:	f043 0301 	orr.w	r3, r3, #1
 8013ecc:	b2da      	uxtb	r2, r3
 8013ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ed0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	2b01      	cmp	r3, #1
 8013ed6:	d171      	bne.n	8013fbc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eda:	8b9b      	ldrh	r3, [r3, #28]
 8013edc:	3314      	adds	r3, #20
 8013ede:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ee2:	685b      	ldr	r3, [r3, #4]
 8013ee4:	685b      	ldr	r3, [r3, #4]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eec:	685b      	ldr	r3, [r3, #4]
 8013eee:	685b      	ldr	r3, [r3, #4]
 8013ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ef4:	3308      	adds	r3, #8
 8013ef6:	2214      	movs	r2, #20
 8013ef8:	4619      	mov	r1, r3
 8013efa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013efc:	f000 fcf5 	bl	80148ea <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013f00:	8a3b      	ldrh	r3, [r7, #16]
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7f6 fa4a 	bl	800a39c <lwip_htons>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	461a      	mov	r2, r3
 8013f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f0e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f12:	2200      	movs	r2, #0
 8013f14:	719a      	strb	r2, [r3, #6]
 8013f16:	2200      	movs	r2, #0
 8013f18:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	729a      	strb	r2, [r3, #10]
 8013f20:	2200      	movs	r2, #0
 8013f22:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f26:	685b      	ldr	r3, [r3, #4]
 8013f28:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013f2a:	e00d      	b.n	8013f48 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f2e:	685b      	ldr	r3, [r3, #4]
 8013f30:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013f32:	2114      	movs	r1, #20
 8013f34:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013f36:	f7f7 fd09 	bl	800b94c <pbuf_remove_header>
      pbuf_cat(p, r);
 8013f3a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f7f7 fe4d 	bl	800bbdc <pbuf_cat>
      r = iprh->next_pbuf;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8013f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d1ee      	bne.n	8013f2c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8013fc8 <ip4_reass+0x2b4>)
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d102      	bne.n	8013f5e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013f58:	2300      	movs	r3, #0
 8013f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013f5c:	e010      	b.n	8013f80 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8013fc8 <ip4_reass+0x2b4>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013f64:	e007      	b.n	8013f76 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	d006      	beq.n	8013f7e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d1f4      	bne.n	8013f66 <ip4_reass+0x252>
 8013f7c:	e000      	b.n	8013f80 <ip4_reass+0x26c>
          break;
 8013f7e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013f80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013f82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013f84:	f7ff fd2e 	bl	80139e4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f7f7 fded 	bl	800bb68 <pbuf_clen>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013f92:	4b0c      	ldr	r3, [pc, #48]	@ (8013fc4 <ip4_reass+0x2b0>)
 8013f94:	881b      	ldrh	r3, [r3, #0]
 8013f96:	8c3a      	ldrh	r2, [r7, #32]
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	d906      	bls.n	8013faa <ip4_reass+0x296>
 8013f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8013fcc <ip4_reass+0x2b8>)
 8013f9e:	f240 229b 	movw	r2, #667	@ 0x29b
 8013fa2:	490b      	ldr	r1, [pc, #44]	@ (8013fd0 <ip4_reass+0x2bc>)
 8013fa4:	480b      	ldr	r0, [pc, #44]	@ (8013fd4 <ip4_reass+0x2c0>)
 8013fa6:	f000 fbc5 	bl	8014734 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013faa:	4b06      	ldr	r3, [pc, #24]	@ (8013fc4 <ip4_reass+0x2b0>)
 8013fac:	881a      	ldrh	r2, [r3, #0]
 8013fae:	8c3b      	ldrh	r3, [r7, #32]
 8013fb0:	1ad3      	subs	r3, r2, r3
 8013fb2:	b29a      	uxth	r2, r3
 8013fb4:	4b03      	ldr	r3, [pc, #12]	@ (8013fc4 <ip4_reass+0x2b0>)
 8013fb6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	e038      	b.n	801402e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	e036      	b.n	801402e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013fc0:	bf00      	nop
 8013fc2:	e00a      	b.n	8013fda <ip4_reass+0x2c6>
 8013fc4:	2000b264 	.word	0x2000b264
 8013fc8:	2000b260 	.word	0x2000b260
 8013fcc:	08017c80 	.word	0x08017c80
 8013fd0:	08017df0 	.word	0x08017df0
 8013fd4:	08017cc8 	.word	0x08017cc8
    goto nullreturn_ipr;
 8013fd8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d106      	bne.n	8013fee <ip4_reass+0x2da>
 8013fe0:	4b15      	ldr	r3, [pc, #84]	@ (8014038 <ip4_reass+0x324>)
 8013fe2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8013fe6:	4915      	ldr	r1, [pc, #84]	@ (801403c <ip4_reass+0x328>)
 8013fe8:	4815      	ldr	r0, [pc, #84]	@ (8014040 <ip4_reass+0x32c>)
 8013fea:	f000 fba3 	bl	8014734 <iprintf>
  if (ipr->p == NULL) {
 8013fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ff0:	685b      	ldr	r3, [r3, #4]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d116      	bne.n	8014024 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013ff6:	4b13      	ldr	r3, [pc, #76]	@ (8014044 <ip4_reass+0x330>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	d006      	beq.n	801400e <ip4_reass+0x2fa>
 8014000:	4b0d      	ldr	r3, [pc, #52]	@ (8014038 <ip4_reass+0x324>)
 8014002:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014006:	4910      	ldr	r1, [pc, #64]	@ (8014048 <ip4_reass+0x334>)
 8014008:	480d      	ldr	r0, [pc, #52]	@ (8014040 <ip4_reass+0x32c>)
 801400a:	f000 fb93 	bl	8014734 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801400e:	2100      	movs	r1, #0
 8014010:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014012:	f7ff fce7 	bl	80139e4 <ip_reass_dequeue_datagram>
 8014016:	e006      	b.n	8014026 <ip4_reass+0x312>
    goto nullreturn;
 8014018:	bf00      	nop
 801401a:	e004      	b.n	8014026 <ip4_reass+0x312>
    goto nullreturn;
 801401c:	bf00      	nop
 801401e:	e002      	b.n	8014026 <ip4_reass+0x312>
      goto nullreturn;
 8014020:	bf00      	nop
 8014022:	e000      	b.n	8014026 <ip4_reass+0x312>
  }

nullreturn:
 8014024:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	f7f7 fd16 	bl	800ba58 <pbuf_free>
  return NULL;
 801402c:	2300      	movs	r3, #0
}
 801402e:	4618      	mov	r0, r3
 8014030:	3738      	adds	r7, #56	@ 0x38
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}
 8014036:	bf00      	nop
 8014038:	08017c80 	.word	0x08017c80
 801403c:	08017e0c 	.word	0x08017e0c
 8014040:	08017cc8 	.word	0x08017cc8
 8014044:	2000b260 	.word	0x2000b260
 8014048:	08017e18 	.word	0x08017e18

0801404c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014050:	2005      	movs	r0, #5
 8014052:	f7f6 fe1b 	bl	800ac8c <memp_malloc>
 8014056:	4603      	mov	r3, r0
}
 8014058:	4618      	mov	r0, r3
 801405a:	bd80      	pop	{r7, pc}

0801405c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b082      	sub	sp, #8
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d106      	bne.n	8014078 <ip_frag_free_pbuf_custom_ref+0x1c>
 801406a:	4b07      	ldr	r3, [pc, #28]	@ (8014088 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801406c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8014070:	4906      	ldr	r1, [pc, #24]	@ (801408c <ip_frag_free_pbuf_custom_ref+0x30>)
 8014072:	4807      	ldr	r0, [pc, #28]	@ (8014090 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014074:	f000 fb5e 	bl	8014734 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014078:	6879      	ldr	r1, [r7, #4]
 801407a:	2005      	movs	r0, #5
 801407c:	f7f6 fe76 	bl	800ad6c <memp_free>
}
 8014080:	bf00      	nop
 8014082:	3708      	adds	r7, #8
 8014084:	46bd      	mov	sp, r7
 8014086:	bd80      	pop	{r7, pc}
 8014088:	08017c80 	.word	0x08017c80
 801408c:	08017e38 	.word	0x08017e38
 8014090:	08017cc8 	.word	0x08017cc8

08014094 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b084      	sub	sp, #16
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d106      	bne.n	80140b4 <ipfrag_free_pbuf_custom+0x20>
 80140a6:	4b11      	ldr	r3, [pc, #68]	@ (80140ec <ipfrag_free_pbuf_custom+0x58>)
 80140a8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80140ac:	4910      	ldr	r1, [pc, #64]	@ (80140f0 <ipfrag_free_pbuf_custom+0x5c>)
 80140ae:	4811      	ldr	r0, [pc, #68]	@ (80140f4 <ipfrag_free_pbuf_custom+0x60>)
 80140b0:	f000 fb40 	bl	8014734 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80140b4:	68fa      	ldr	r2, [r7, #12]
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	429a      	cmp	r2, r3
 80140ba:	d006      	beq.n	80140ca <ipfrag_free_pbuf_custom+0x36>
 80140bc:	4b0b      	ldr	r3, [pc, #44]	@ (80140ec <ipfrag_free_pbuf_custom+0x58>)
 80140be:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80140c2:	490d      	ldr	r1, [pc, #52]	@ (80140f8 <ipfrag_free_pbuf_custom+0x64>)
 80140c4:	480b      	ldr	r0, [pc, #44]	@ (80140f4 <ipfrag_free_pbuf_custom+0x60>)
 80140c6:	f000 fb35 	bl	8014734 <iprintf>
  if (pcr->original != NULL) {
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	695b      	ldr	r3, [r3, #20]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d004      	beq.n	80140dc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	695b      	ldr	r3, [r3, #20]
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7f7 fcbe 	bl	800ba58 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80140dc:	68f8      	ldr	r0, [r7, #12]
 80140de:	f7ff ffbd 	bl	801405c <ip_frag_free_pbuf_custom_ref>
}
 80140e2:	bf00      	nop
 80140e4:	3710      	adds	r7, #16
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd80      	pop	{r7, pc}
 80140ea:	bf00      	nop
 80140ec:	08017c80 	.word	0x08017c80
 80140f0:	08017e44 	.word	0x08017e44
 80140f4:	08017cc8 	.word	0x08017cc8
 80140f8:	08017e50 	.word	0x08017e50

080140fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b094      	sub	sp, #80	@ 0x50
 8014100:	af02      	add	r7, sp, #8
 8014102:	60f8      	str	r0, [r7, #12]
 8014104:	60b9      	str	r1, [r7, #8]
 8014106:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014108:	2300      	movs	r3, #0
 801410a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014112:	3b14      	subs	r3, #20
 8014114:	2b00      	cmp	r3, #0
 8014116:	da00      	bge.n	801411a <ip4_frag+0x1e>
 8014118:	3307      	adds	r3, #7
 801411a:	10db      	asrs	r3, r3, #3
 801411c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801411e:	2314      	movs	r3, #20
 8014120:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	685b      	ldr	r3, [r3, #4]
 8014126:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8014128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801412a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801412c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801412e:	781b      	ldrb	r3, [r3, #0]
 8014130:	f003 030f 	and.w	r3, r3, #15
 8014134:	b2db      	uxtb	r3, r3
 8014136:	009b      	lsls	r3, r3, #2
 8014138:	b2db      	uxtb	r3, r3
 801413a:	2b14      	cmp	r3, #20
 801413c:	d002      	beq.n	8014144 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801413e:	f06f 0305 	mvn.w	r3, #5
 8014142:	e110      	b.n	8014366 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	895b      	ldrh	r3, [r3, #10]
 8014148:	2b13      	cmp	r3, #19
 801414a:	d809      	bhi.n	8014160 <ip4_frag+0x64>
 801414c:	4b88      	ldr	r3, [pc, #544]	@ (8014370 <ip4_frag+0x274>)
 801414e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8014152:	4988      	ldr	r1, [pc, #544]	@ (8014374 <ip4_frag+0x278>)
 8014154:	4888      	ldr	r0, [pc, #544]	@ (8014378 <ip4_frag+0x27c>)
 8014156:	f000 faed 	bl	8014734 <iprintf>
 801415a:	f06f 0305 	mvn.w	r3, #5
 801415e:	e102      	b.n	8014366 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014162:	88db      	ldrh	r3, [r3, #6]
 8014164:	b29b      	uxth	r3, r3
 8014166:	4618      	mov	r0, r3
 8014168:	f7f6 f918 	bl	800a39c <lwip_htons>
 801416c:	4603      	mov	r3, r0
 801416e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8014170:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014172:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014176:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801417a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801417c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014180:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	891b      	ldrh	r3, [r3, #8]
 8014186:	3b14      	subs	r3, #20
 8014188:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801418c:	e0e1      	b.n	8014352 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801418e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014190:	00db      	lsls	r3, r3, #3
 8014192:	b29b      	uxth	r3, r3
 8014194:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014198:	4293      	cmp	r3, r2
 801419a:	bf28      	it	cs
 801419c:	4613      	movcs	r3, r2
 801419e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80141a0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80141a4:	2114      	movs	r1, #20
 80141a6:	200e      	movs	r0, #14
 80141a8:	f7f7 f972 	bl	800b490 <pbuf_alloc>
 80141ac:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80141ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	f000 80d5 	beq.w	8014360 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80141b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141b8:	895b      	ldrh	r3, [r3, #10]
 80141ba:	2b13      	cmp	r3, #19
 80141bc:	d806      	bhi.n	80141cc <ip4_frag+0xd0>
 80141be:	4b6c      	ldr	r3, [pc, #432]	@ (8014370 <ip4_frag+0x274>)
 80141c0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80141c4:	496d      	ldr	r1, [pc, #436]	@ (801437c <ip4_frag+0x280>)
 80141c6:	486c      	ldr	r0, [pc, #432]	@ (8014378 <ip4_frag+0x27c>)
 80141c8:	f000 fab4 	bl	8014734 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80141cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ce:	685b      	ldr	r3, [r3, #4]
 80141d0:	2214      	movs	r2, #20
 80141d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80141d4:	4618      	mov	r0, r3
 80141d6:	f000 fb88 	bl	80148ea <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80141da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141dc:	685b      	ldr	r3, [r3, #4]
 80141de:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80141e0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80141e2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80141e6:	e064      	b.n	80142b2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	895a      	ldrh	r2, [r3, #10]
 80141ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80141ee:	1ad3      	subs	r3, r2, r3
 80141f0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	895b      	ldrh	r3, [r3, #10]
 80141f6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80141f8:	429a      	cmp	r2, r3
 80141fa:	d906      	bls.n	801420a <ip4_frag+0x10e>
 80141fc:	4b5c      	ldr	r3, [pc, #368]	@ (8014370 <ip4_frag+0x274>)
 80141fe:	f240 322d 	movw	r2, #813	@ 0x32d
 8014202:	495f      	ldr	r1, [pc, #380]	@ (8014380 <ip4_frag+0x284>)
 8014204:	485c      	ldr	r0, [pc, #368]	@ (8014378 <ip4_frag+0x27c>)
 8014206:	f000 fa95 	bl	8014734 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801420a:	8bfa      	ldrh	r2, [r7, #30]
 801420c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014210:	4293      	cmp	r3, r2
 8014212:	bf28      	it	cs
 8014214:	4613      	movcs	r3, r2
 8014216:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801421a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801421e:	2b00      	cmp	r3, #0
 8014220:	d105      	bne.n	801422e <ip4_frag+0x132>
        poff = 0;
 8014222:	2300      	movs	r3, #0
 8014224:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	60fb      	str	r3, [r7, #12]
        continue;
 801422c:	e041      	b.n	80142b2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801422e:	f7ff ff0d 	bl	801404c <ip_frag_alloc_pbuf_custom_ref>
 8014232:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014234:	69bb      	ldr	r3, [r7, #24]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d103      	bne.n	8014242 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801423a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801423c:	f7f7 fc0c 	bl	800ba58 <pbuf_free>
        goto memerr;
 8014240:	e08f      	b.n	8014362 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014242:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014248:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801424a:	4413      	add	r3, r2
 801424c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8014250:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014254:	9201      	str	r2, [sp, #4]
 8014256:	9300      	str	r3, [sp, #0]
 8014258:	4603      	mov	r3, r0
 801425a:	2241      	movs	r2, #65	@ 0x41
 801425c:	2000      	movs	r0, #0
 801425e:	f7f7 fa41 	bl	800b6e4 <pbuf_alloced_custom>
 8014262:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d106      	bne.n	8014278 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801426a:	69b8      	ldr	r0, [r7, #24]
 801426c:	f7ff fef6 	bl	801405c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014270:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014272:	f7f7 fbf1 	bl	800ba58 <pbuf_free>
        goto memerr;
 8014276:	e074      	b.n	8014362 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014278:	68f8      	ldr	r0, [r7, #12]
 801427a:	f7f7 fc8d 	bl	800bb98 <pbuf_ref>
      pcr->original = p;
 801427e:	69bb      	ldr	r3, [r7, #24]
 8014280:	68fa      	ldr	r2, [r7, #12]
 8014282:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014284:	69bb      	ldr	r3, [r7, #24]
 8014286:	4a3f      	ldr	r2, [pc, #252]	@ (8014384 <ip4_frag+0x288>)
 8014288:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801428a:	6979      	ldr	r1, [r7, #20]
 801428c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801428e:	f7f7 fca5 	bl	800bbdc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014292:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8014296:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801429a:	1ad3      	subs	r3, r2, r3
 801429c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80142a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d004      	beq.n	80142b2 <ip4_frag+0x1b6>
        poff = 0;
 80142a8:	2300      	movs	r3, #0
 80142aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80142b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d196      	bne.n	80141e8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80142ba:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80142bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80142c0:	4413      	add	r3, r2
 80142c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80142c8:	f1a3 0213 	sub.w	r2, r3, #19
 80142cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80142d0:	429a      	cmp	r2, r3
 80142d2:	bfcc      	ite	gt
 80142d4:	2301      	movgt	r3, #1
 80142d6:	2300      	movle	r3, #0
 80142d8:	b2db      	uxtb	r3, r3
 80142da:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80142dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80142e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80142e4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80142e6:	6a3b      	ldr	r3, [r7, #32]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d002      	beq.n	80142f2 <ip4_frag+0x1f6>
 80142ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d003      	beq.n	80142fa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80142f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80142f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80142f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80142fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80142fc:	4618      	mov	r0, r3
 80142fe:	f7f6 f84d 	bl	800a39c <lwip_htons>
 8014302:	4603      	mov	r3, r0
 8014304:	461a      	mov	r2, r3
 8014306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014308:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801430a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801430c:	3314      	adds	r3, #20
 801430e:	b29b      	uxth	r3, r3
 8014310:	4618      	mov	r0, r3
 8014312:	f7f6 f843 	bl	800a39c <lwip_htons>
 8014316:	4603      	mov	r3, r0
 8014318:	461a      	mov	r2, r3
 801431a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801431c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014320:	2200      	movs	r2, #0
 8014322:	729a      	strb	r2, [r3, #10]
 8014324:	2200      	movs	r2, #0
 8014326:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	695b      	ldr	r3, [r3, #20]
 801432c:	687a      	ldr	r2, [r7, #4]
 801432e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014330:	68b8      	ldr	r0, [r7, #8]
 8014332:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014334:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014336:	f7f7 fb8f 	bl	800ba58 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801433a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801433e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014340:	1ad3      	subs	r3, r2, r3
 8014342:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8014346:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801434a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801434c:	4413      	add	r3, r2
 801434e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8014352:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014356:	2b00      	cmp	r3, #0
 8014358:	f47f af19 	bne.w	801418e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801435c:	2300      	movs	r3, #0
 801435e:	e002      	b.n	8014366 <ip4_frag+0x26a>
      goto memerr;
 8014360:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014362:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014366:	4618      	mov	r0, r3
 8014368:	3748      	adds	r7, #72	@ 0x48
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}
 801436e:	bf00      	nop
 8014370:	08017c80 	.word	0x08017c80
 8014374:	08017e5c 	.word	0x08017e5c
 8014378:	08017cc8 	.word	0x08017cc8
 801437c:	08017e78 	.word	0x08017e78
 8014380:	08017e98 	.word	0x08017e98
 8014384:	08014095 	.word	0x08014095

08014388 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b086      	sub	sp, #24
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
 8014390:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014392:	230e      	movs	r3, #14
 8014394:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	895b      	ldrh	r3, [r3, #10]
 801439a:	2b0e      	cmp	r3, #14
 801439c:	d96e      	bls.n	801447c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	7bdb      	ldrb	r3, [r3, #15]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d106      	bne.n	80143b4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80143ac:	3301      	adds	r3, #1
 80143ae:	b2da      	uxtb	r2, r3
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	685b      	ldr	r3, [r3, #4]
 80143b8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80143ba:	693b      	ldr	r3, [r7, #16]
 80143bc:	7b1a      	ldrb	r2, [r3, #12]
 80143be:	7b5b      	ldrb	r3, [r3, #13]
 80143c0:	021b      	lsls	r3, r3, #8
 80143c2:	4313      	orrs	r3, r2
 80143c4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80143c6:	693b      	ldr	r3, [r7, #16]
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	f003 0301 	and.w	r3, r3, #1
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d023      	beq.n	801441a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80143d2:	693b      	ldr	r3, [r7, #16]
 80143d4:	781b      	ldrb	r3, [r3, #0]
 80143d6:	2b01      	cmp	r3, #1
 80143d8:	d10f      	bne.n	80143fa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	785b      	ldrb	r3, [r3, #1]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d11b      	bne.n	801441a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80143e2:	693b      	ldr	r3, [r7, #16]
 80143e4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80143e6:	2b5e      	cmp	r3, #94	@ 0x5e
 80143e8:	d117      	bne.n	801441a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	7b5b      	ldrb	r3, [r3, #13]
 80143ee:	f043 0310 	orr.w	r3, r3, #16
 80143f2:	b2da      	uxtb	r2, r3
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	735a      	strb	r2, [r3, #13]
 80143f8:	e00f      	b.n	801441a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80143fa:	693b      	ldr	r3, [r7, #16]
 80143fc:	2206      	movs	r2, #6
 80143fe:	4928      	ldr	r1, [pc, #160]	@ (80144a0 <ethernet_input+0x118>)
 8014400:	4618      	mov	r0, r3
 8014402:	f000 f9ec 	bl	80147de <memcmp>
 8014406:	4603      	mov	r3, r0
 8014408:	2b00      	cmp	r3, #0
 801440a:	d106      	bne.n	801441a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	7b5b      	ldrb	r3, [r3, #13]
 8014410:	f043 0308 	orr.w	r3, r3, #8
 8014414:	b2da      	uxtb	r2, r3
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801441a:	89fb      	ldrh	r3, [r7, #14]
 801441c:	2b08      	cmp	r3, #8
 801441e:	d003      	beq.n	8014428 <ethernet_input+0xa0>
 8014420:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014424:	d014      	beq.n	8014450 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014426:	e032      	b.n	801448e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014428:	683b      	ldr	r3, [r7, #0]
 801442a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801442e:	f003 0308 	and.w	r3, r3, #8
 8014432:	2b00      	cmp	r3, #0
 8014434:	d024      	beq.n	8014480 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014436:	8afb      	ldrh	r3, [r7, #22]
 8014438:	4619      	mov	r1, r3
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f7f7 fa86 	bl	800b94c <pbuf_remove_header>
 8014440:	4603      	mov	r3, r0
 8014442:	2b00      	cmp	r3, #0
 8014444:	d11e      	bne.n	8014484 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014446:	6839      	ldr	r1, [r7, #0]
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f7fe ff21 	bl	8013290 <ip4_input>
      break;
 801444e:	e013      	b.n	8014478 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014450:	683b      	ldr	r3, [r7, #0]
 8014452:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014456:	f003 0308 	and.w	r3, r3, #8
 801445a:	2b00      	cmp	r3, #0
 801445c:	d014      	beq.n	8014488 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801445e:	8afb      	ldrh	r3, [r7, #22]
 8014460:	4619      	mov	r1, r3
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	f7f7 fa72 	bl	800b94c <pbuf_remove_header>
 8014468:	4603      	mov	r3, r0
 801446a:	2b00      	cmp	r3, #0
 801446c:	d10e      	bne.n	801448c <ethernet_input+0x104>
        etharp_input(p, netif);
 801446e:	6839      	ldr	r1, [r7, #0]
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f7fe f8c1 	bl	80125f8 <etharp_input>
      break;
 8014476:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014478:	2300      	movs	r3, #0
 801447a:	e00c      	b.n	8014496 <ethernet_input+0x10e>
    goto free_and_return;
 801447c:	bf00      	nop
 801447e:	e006      	b.n	801448e <ethernet_input+0x106>
        goto free_and_return;
 8014480:	bf00      	nop
 8014482:	e004      	b.n	801448e <ethernet_input+0x106>
        goto free_and_return;
 8014484:	bf00      	nop
 8014486:	e002      	b.n	801448e <ethernet_input+0x106>
        goto free_and_return;
 8014488:	bf00      	nop
 801448a:	e000      	b.n	801448e <ethernet_input+0x106>
        goto free_and_return;
 801448c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f7f7 fae2 	bl	800ba58 <pbuf_free>
  return ERR_OK;
 8014494:	2300      	movs	r3, #0
}
 8014496:	4618      	mov	r0, r3
 8014498:	3718      	adds	r7, #24
 801449a:	46bd      	mov	sp, r7
 801449c:	bd80      	pop	{r7, pc}
 801449e:	bf00      	nop
 80144a0:	0801803c 	.word	0x0801803c

080144a4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b086      	sub	sp, #24
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	60f8      	str	r0, [r7, #12]
 80144ac:	60b9      	str	r1, [r7, #8]
 80144ae:	607a      	str	r2, [r7, #4]
 80144b0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80144b2:	8c3b      	ldrh	r3, [r7, #32]
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7f5 ff71 	bl	800a39c <lwip_htons>
 80144ba:	4603      	mov	r3, r0
 80144bc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80144be:	210e      	movs	r1, #14
 80144c0:	68b8      	ldr	r0, [r7, #8]
 80144c2:	f7f7 fa33 	bl	800b92c <pbuf_add_header>
 80144c6:	4603      	mov	r3, r0
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d125      	bne.n	8014518 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	685b      	ldr	r3, [r3, #4]
 80144d0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80144d2:	693b      	ldr	r3, [r7, #16]
 80144d4:	8afa      	ldrh	r2, [r7, #22]
 80144d6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80144d8:	693b      	ldr	r3, [r7, #16]
 80144da:	2206      	movs	r2, #6
 80144dc:	6839      	ldr	r1, [r7, #0]
 80144de:	4618      	mov	r0, r3
 80144e0:	f000 fa03 	bl	80148ea <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80144e4:	693b      	ldr	r3, [r7, #16]
 80144e6:	3306      	adds	r3, #6
 80144e8:	2206      	movs	r2, #6
 80144ea:	6879      	ldr	r1, [r7, #4]
 80144ec:	4618      	mov	r0, r3
 80144ee:	f000 f9fc 	bl	80148ea <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80144f8:	2b06      	cmp	r3, #6
 80144fa:	d006      	beq.n	801450a <ethernet_output+0x66>
 80144fc:	4b0a      	ldr	r3, [pc, #40]	@ (8014528 <ethernet_output+0x84>)
 80144fe:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014502:	490a      	ldr	r1, [pc, #40]	@ (801452c <ethernet_output+0x88>)
 8014504:	480a      	ldr	r0, [pc, #40]	@ (8014530 <ethernet_output+0x8c>)
 8014506:	f000 f915 	bl	8014734 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	699b      	ldr	r3, [r3, #24]
 801450e:	68b9      	ldr	r1, [r7, #8]
 8014510:	68f8      	ldr	r0, [r7, #12]
 8014512:	4798      	blx	r3
 8014514:	4603      	mov	r3, r0
 8014516:	e002      	b.n	801451e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014518:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801451a:	f06f 0301 	mvn.w	r3, #1
}
 801451e:	4618      	mov	r0, r3
 8014520:	3718      	adds	r7, #24
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
 8014526:	bf00      	nop
 8014528:	08017ea8 	.word	0x08017ea8
 801452c:	08017ee0 	.word	0x08017ee0
 8014530:	08017f14 	.word	0x08017f14

08014534 <rand>:
 8014534:	4b16      	ldr	r3, [pc, #88]	@ (8014590 <rand+0x5c>)
 8014536:	b510      	push	{r4, lr}
 8014538:	681c      	ldr	r4, [r3, #0]
 801453a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801453c:	b9b3      	cbnz	r3, 801456c <rand+0x38>
 801453e:	2018      	movs	r0, #24
 8014540:	f000 fa4a 	bl	80149d8 <malloc>
 8014544:	4602      	mov	r2, r0
 8014546:	6320      	str	r0, [r4, #48]	@ 0x30
 8014548:	b920      	cbnz	r0, 8014554 <rand+0x20>
 801454a:	4b12      	ldr	r3, [pc, #72]	@ (8014594 <rand+0x60>)
 801454c:	4812      	ldr	r0, [pc, #72]	@ (8014598 <rand+0x64>)
 801454e:	2152      	movs	r1, #82	@ 0x52
 8014550:	f000 f9da 	bl	8014908 <__assert_func>
 8014554:	4911      	ldr	r1, [pc, #68]	@ (801459c <rand+0x68>)
 8014556:	4b12      	ldr	r3, [pc, #72]	@ (80145a0 <rand+0x6c>)
 8014558:	e9c0 1300 	strd	r1, r3, [r0]
 801455c:	4b11      	ldr	r3, [pc, #68]	@ (80145a4 <rand+0x70>)
 801455e:	6083      	str	r3, [r0, #8]
 8014560:	230b      	movs	r3, #11
 8014562:	8183      	strh	r3, [r0, #12]
 8014564:	2100      	movs	r1, #0
 8014566:	2001      	movs	r0, #1
 8014568:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801456c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801456e:	480e      	ldr	r0, [pc, #56]	@ (80145a8 <rand+0x74>)
 8014570:	690b      	ldr	r3, [r1, #16]
 8014572:	694c      	ldr	r4, [r1, #20]
 8014574:	4a0d      	ldr	r2, [pc, #52]	@ (80145ac <rand+0x78>)
 8014576:	4358      	muls	r0, r3
 8014578:	fb02 0004 	mla	r0, r2, r4, r0
 801457c:	fba3 3202 	umull	r3, r2, r3, r2
 8014580:	3301      	adds	r3, #1
 8014582:	eb40 0002 	adc.w	r0, r0, r2
 8014586:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801458a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801458e:	bd10      	pop	{r4, pc}
 8014590:	200000a0 	.word	0x200000a0
 8014594:	0801804a 	.word	0x0801804a
 8014598:	08018061 	.word	0x08018061
 801459c:	abcd330e 	.word	0xabcd330e
 80145a0:	e66d1234 	.word	0xe66d1234
 80145a4:	0005deec 	.word	0x0005deec
 80145a8:	5851f42d 	.word	0x5851f42d
 80145ac:	4c957f2d 	.word	0x4c957f2d

080145b0 <std>:
 80145b0:	2300      	movs	r3, #0
 80145b2:	b510      	push	{r4, lr}
 80145b4:	4604      	mov	r4, r0
 80145b6:	e9c0 3300 	strd	r3, r3, [r0]
 80145ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80145be:	6083      	str	r3, [r0, #8]
 80145c0:	8181      	strh	r1, [r0, #12]
 80145c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80145c4:	81c2      	strh	r2, [r0, #14]
 80145c6:	6183      	str	r3, [r0, #24]
 80145c8:	4619      	mov	r1, r3
 80145ca:	2208      	movs	r2, #8
 80145cc:	305c      	adds	r0, #92	@ 0x5c
 80145ce:	f000 f916 	bl	80147fe <memset>
 80145d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014608 <std+0x58>)
 80145d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80145d6:	4b0d      	ldr	r3, [pc, #52]	@ (801460c <std+0x5c>)
 80145d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80145da:	4b0d      	ldr	r3, [pc, #52]	@ (8014610 <std+0x60>)
 80145dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80145de:	4b0d      	ldr	r3, [pc, #52]	@ (8014614 <std+0x64>)
 80145e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80145e2:	4b0d      	ldr	r3, [pc, #52]	@ (8014618 <std+0x68>)
 80145e4:	6224      	str	r4, [r4, #32]
 80145e6:	429c      	cmp	r4, r3
 80145e8:	d006      	beq.n	80145f8 <std+0x48>
 80145ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80145ee:	4294      	cmp	r4, r2
 80145f0:	d002      	beq.n	80145f8 <std+0x48>
 80145f2:	33d0      	adds	r3, #208	@ 0xd0
 80145f4:	429c      	cmp	r4, r3
 80145f6:	d105      	bne.n	8014604 <std+0x54>
 80145f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80145fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014600:	f000 b970 	b.w	80148e4 <__retarget_lock_init_recursive>
 8014604:	bd10      	pop	{r4, pc}
 8014606:	bf00      	nop
 8014608:	08014759 	.word	0x08014759
 801460c:	0801477b 	.word	0x0801477b
 8014610:	080147b3 	.word	0x080147b3
 8014614:	080147d7 	.word	0x080147d7
 8014618:	2000b268 	.word	0x2000b268

0801461c <stdio_exit_handler>:
 801461c:	4a02      	ldr	r2, [pc, #8]	@ (8014628 <stdio_exit_handler+0xc>)
 801461e:	4903      	ldr	r1, [pc, #12]	@ (801462c <stdio_exit_handler+0x10>)
 8014620:	4803      	ldr	r0, [pc, #12]	@ (8014630 <stdio_exit_handler+0x14>)
 8014622:	f000 b869 	b.w	80146f8 <_fwalk_sglue>
 8014626:	bf00      	nop
 8014628:	20000094 	.word	0x20000094
 801462c:	080151e9 	.word	0x080151e9
 8014630:	200000a4 	.word	0x200000a4

08014634 <cleanup_stdio>:
 8014634:	6841      	ldr	r1, [r0, #4]
 8014636:	4b0c      	ldr	r3, [pc, #48]	@ (8014668 <cleanup_stdio+0x34>)
 8014638:	4299      	cmp	r1, r3
 801463a:	b510      	push	{r4, lr}
 801463c:	4604      	mov	r4, r0
 801463e:	d001      	beq.n	8014644 <cleanup_stdio+0x10>
 8014640:	f000 fdd2 	bl	80151e8 <_fflush_r>
 8014644:	68a1      	ldr	r1, [r4, #8]
 8014646:	4b09      	ldr	r3, [pc, #36]	@ (801466c <cleanup_stdio+0x38>)
 8014648:	4299      	cmp	r1, r3
 801464a:	d002      	beq.n	8014652 <cleanup_stdio+0x1e>
 801464c:	4620      	mov	r0, r4
 801464e:	f000 fdcb 	bl	80151e8 <_fflush_r>
 8014652:	68e1      	ldr	r1, [r4, #12]
 8014654:	4b06      	ldr	r3, [pc, #24]	@ (8014670 <cleanup_stdio+0x3c>)
 8014656:	4299      	cmp	r1, r3
 8014658:	d004      	beq.n	8014664 <cleanup_stdio+0x30>
 801465a:	4620      	mov	r0, r4
 801465c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014660:	f000 bdc2 	b.w	80151e8 <_fflush_r>
 8014664:	bd10      	pop	{r4, pc}
 8014666:	bf00      	nop
 8014668:	2000b268 	.word	0x2000b268
 801466c:	2000b2d0 	.word	0x2000b2d0
 8014670:	2000b338 	.word	0x2000b338

08014674 <global_stdio_init.part.0>:
 8014674:	b510      	push	{r4, lr}
 8014676:	4b0b      	ldr	r3, [pc, #44]	@ (80146a4 <global_stdio_init.part.0+0x30>)
 8014678:	4c0b      	ldr	r4, [pc, #44]	@ (80146a8 <global_stdio_init.part.0+0x34>)
 801467a:	4a0c      	ldr	r2, [pc, #48]	@ (80146ac <global_stdio_init.part.0+0x38>)
 801467c:	601a      	str	r2, [r3, #0]
 801467e:	4620      	mov	r0, r4
 8014680:	2200      	movs	r2, #0
 8014682:	2104      	movs	r1, #4
 8014684:	f7ff ff94 	bl	80145b0 <std>
 8014688:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801468c:	2201      	movs	r2, #1
 801468e:	2109      	movs	r1, #9
 8014690:	f7ff ff8e 	bl	80145b0 <std>
 8014694:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014698:	2202      	movs	r2, #2
 801469a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801469e:	2112      	movs	r1, #18
 80146a0:	f7ff bf86 	b.w	80145b0 <std>
 80146a4:	2000b3a0 	.word	0x2000b3a0
 80146a8:	2000b268 	.word	0x2000b268
 80146ac:	0801461d 	.word	0x0801461d

080146b0 <__sfp_lock_acquire>:
 80146b0:	4801      	ldr	r0, [pc, #4]	@ (80146b8 <__sfp_lock_acquire+0x8>)
 80146b2:	f000 b918 	b.w	80148e6 <__retarget_lock_acquire_recursive>
 80146b6:	bf00      	nop
 80146b8:	2000b3a9 	.word	0x2000b3a9

080146bc <__sfp_lock_release>:
 80146bc:	4801      	ldr	r0, [pc, #4]	@ (80146c4 <__sfp_lock_release+0x8>)
 80146be:	f000 b913 	b.w	80148e8 <__retarget_lock_release_recursive>
 80146c2:	bf00      	nop
 80146c4:	2000b3a9 	.word	0x2000b3a9

080146c8 <__sinit>:
 80146c8:	b510      	push	{r4, lr}
 80146ca:	4604      	mov	r4, r0
 80146cc:	f7ff fff0 	bl	80146b0 <__sfp_lock_acquire>
 80146d0:	6a23      	ldr	r3, [r4, #32]
 80146d2:	b11b      	cbz	r3, 80146dc <__sinit+0x14>
 80146d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146d8:	f7ff bff0 	b.w	80146bc <__sfp_lock_release>
 80146dc:	4b04      	ldr	r3, [pc, #16]	@ (80146f0 <__sinit+0x28>)
 80146de:	6223      	str	r3, [r4, #32]
 80146e0:	4b04      	ldr	r3, [pc, #16]	@ (80146f4 <__sinit+0x2c>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d1f5      	bne.n	80146d4 <__sinit+0xc>
 80146e8:	f7ff ffc4 	bl	8014674 <global_stdio_init.part.0>
 80146ec:	e7f2      	b.n	80146d4 <__sinit+0xc>
 80146ee:	bf00      	nop
 80146f0:	08014635 	.word	0x08014635
 80146f4:	2000b3a0 	.word	0x2000b3a0

080146f8 <_fwalk_sglue>:
 80146f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146fc:	4607      	mov	r7, r0
 80146fe:	4688      	mov	r8, r1
 8014700:	4614      	mov	r4, r2
 8014702:	2600      	movs	r6, #0
 8014704:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014708:	f1b9 0901 	subs.w	r9, r9, #1
 801470c:	d505      	bpl.n	801471a <_fwalk_sglue+0x22>
 801470e:	6824      	ldr	r4, [r4, #0]
 8014710:	2c00      	cmp	r4, #0
 8014712:	d1f7      	bne.n	8014704 <_fwalk_sglue+0xc>
 8014714:	4630      	mov	r0, r6
 8014716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801471a:	89ab      	ldrh	r3, [r5, #12]
 801471c:	2b01      	cmp	r3, #1
 801471e:	d907      	bls.n	8014730 <_fwalk_sglue+0x38>
 8014720:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014724:	3301      	adds	r3, #1
 8014726:	d003      	beq.n	8014730 <_fwalk_sglue+0x38>
 8014728:	4629      	mov	r1, r5
 801472a:	4638      	mov	r0, r7
 801472c:	47c0      	blx	r8
 801472e:	4306      	orrs	r6, r0
 8014730:	3568      	adds	r5, #104	@ 0x68
 8014732:	e7e9      	b.n	8014708 <_fwalk_sglue+0x10>

08014734 <iprintf>:
 8014734:	b40f      	push	{r0, r1, r2, r3}
 8014736:	b507      	push	{r0, r1, r2, lr}
 8014738:	4906      	ldr	r1, [pc, #24]	@ (8014754 <iprintf+0x20>)
 801473a:	ab04      	add	r3, sp, #16
 801473c:	6808      	ldr	r0, [r1, #0]
 801473e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014742:	6881      	ldr	r1, [r0, #8]
 8014744:	9301      	str	r3, [sp, #4]
 8014746:	f000 fa27 	bl	8014b98 <_vfiprintf_r>
 801474a:	b003      	add	sp, #12
 801474c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014750:	b004      	add	sp, #16
 8014752:	4770      	bx	lr
 8014754:	200000a0 	.word	0x200000a0

08014758 <__sread>:
 8014758:	b510      	push	{r4, lr}
 801475a:	460c      	mov	r4, r1
 801475c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014760:	f000 f878 	bl	8014854 <_read_r>
 8014764:	2800      	cmp	r0, #0
 8014766:	bfab      	itete	ge
 8014768:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801476a:	89a3      	ldrhlt	r3, [r4, #12]
 801476c:	181b      	addge	r3, r3, r0
 801476e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014772:	bfac      	ite	ge
 8014774:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014776:	81a3      	strhlt	r3, [r4, #12]
 8014778:	bd10      	pop	{r4, pc}

0801477a <__swrite>:
 801477a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801477e:	461f      	mov	r7, r3
 8014780:	898b      	ldrh	r3, [r1, #12]
 8014782:	05db      	lsls	r3, r3, #23
 8014784:	4605      	mov	r5, r0
 8014786:	460c      	mov	r4, r1
 8014788:	4616      	mov	r6, r2
 801478a:	d505      	bpl.n	8014798 <__swrite+0x1e>
 801478c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014790:	2302      	movs	r3, #2
 8014792:	2200      	movs	r2, #0
 8014794:	f000 f84c 	bl	8014830 <_lseek_r>
 8014798:	89a3      	ldrh	r3, [r4, #12]
 801479a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801479e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80147a2:	81a3      	strh	r3, [r4, #12]
 80147a4:	4632      	mov	r2, r6
 80147a6:	463b      	mov	r3, r7
 80147a8:	4628      	mov	r0, r5
 80147aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147ae:	f000 b863 	b.w	8014878 <_write_r>

080147b2 <__sseek>:
 80147b2:	b510      	push	{r4, lr}
 80147b4:	460c      	mov	r4, r1
 80147b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147ba:	f000 f839 	bl	8014830 <_lseek_r>
 80147be:	1c43      	adds	r3, r0, #1
 80147c0:	89a3      	ldrh	r3, [r4, #12]
 80147c2:	bf15      	itete	ne
 80147c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80147c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80147ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80147ce:	81a3      	strheq	r3, [r4, #12]
 80147d0:	bf18      	it	ne
 80147d2:	81a3      	strhne	r3, [r4, #12]
 80147d4:	bd10      	pop	{r4, pc}

080147d6 <__sclose>:
 80147d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147da:	f000 b819 	b.w	8014810 <_close_r>

080147de <memcmp>:
 80147de:	b510      	push	{r4, lr}
 80147e0:	3901      	subs	r1, #1
 80147e2:	4402      	add	r2, r0
 80147e4:	4290      	cmp	r0, r2
 80147e6:	d101      	bne.n	80147ec <memcmp+0xe>
 80147e8:	2000      	movs	r0, #0
 80147ea:	e005      	b.n	80147f8 <memcmp+0x1a>
 80147ec:	7803      	ldrb	r3, [r0, #0]
 80147ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80147f2:	42a3      	cmp	r3, r4
 80147f4:	d001      	beq.n	80147fa <memcmp+0x1c>
 80147f6:	1b18      	subs	r0, r3, r4
 80147f8:	bd10      	pop	{r4, pc}
 80147fa:	3001      	adds	r0, #1
 80147fc:	e7f2      	b.n	80147e4 <memcmp+0x6>

080147fe <memset>:
 80147fe:	4402      	add	r2, r0
 8014800:	4603      	mov	r3, r0
 8014802:	4293      	cmp	r3, r2
 8014804:	d100      	bne.n	8014808 <memset+0xa>
 8014806:	4770      	bx	lr
 8014808:	f803 1b01 	strb.w	r1, [r3], #1
 801480c:	e7f9      	b.n	8014802 <memset+0x4>
	...

08014810 <_close_r>:
 8014810:	b538      	push	{r3, r4, r5, lr}
 8014812:	4d06      	ldr	r5, [pc, #24]	@ (801482c <_close_r+0x1c>)
 8014814:	2300      	movs	r3, #0
 8014816:	4604      	mov	r4, r0
 8014818:	4608      	mov	r0, r1
 801481a:	602b      	str	r3, [r5, #0]
 801481c:	f7ed fe3e 	bl	800249c <_close>
 8014820:	1c43      	adds	r3, r0, #1
 8014822:	d102      	bne.n	801482a <_close_r+0x1a>
 8014824:	682b      	ldr	r3, [r5, #0]
 8014826:	b103      	cbz	r3, 801482a <_close_r+0x1a>
 8014828:	6023      	str	r3, [r4, #0]
 801482a:	bd38      	pop	{r3, r4, r5, pc}
 801482c:	2000b3a4 	.word	0x2000b3a4

08014830 <_lseek_r>:
 8014830:	b538      	push	{r3, r4, r5, lr}
 8014832:	4d07      	ldr	r5, [pc, #28]	@ (8014850 <_lseek_r+0x20>)
 8014834:	4604      	mov	r4, r0
 8014836:	4608      	mov	r0, r1
 8014838:	4611      	mov	r1, r2
 801483a:	2200      	movs	r2, #0
 801483c:	602a      	str	r2, [r5, #0]
 801483e:	461a      	mov	r2, r3
 8014840:	f7ed fe53 	bl	80024ea <_lseek>
 8014844:	1c43      	adds	r3, r0, #1
 8014846:	d102      	bne.n	801484e <_lseek_r+0x1e>
 8014848:	682b      	ldr	r3, [r5, #0]
 801484a:	b103      	cbz	r3, 801484e <_lseek_r+0x1e>
 801484c:	6023      	str	r3, [r4, #0]
 801484e:	bd38      	pop	{r3, r4, r5, pc}
 8014850:	2000b3a4 	.word	0x2000b3a4

08014854 <_read_r>:
 8014854:	b538      	push	{r3, r4, r5, lr}
 8014856:	4d07      	ldr	r5, [pc, #28]	@ (8014874 <_read_r+0x20>)
 8014858:	4604      	mov	r4, r0
 801485a:	4608      	mov	r0, r1
 801485c:	4611      	mov	r1, r2
 801485e:	2200      	movs	r2, #0
 8014860:	602a      	str	r2, [r5, #0]
 8014862:	461a      	mov	r2, r3
 8014864:	f7ed fde1 	bl	800242a <_read>
 8014868:	1c43      	adds	r3, r0, #1
 801486a:	d102      	bne.n	8014872 <_read_r+0x1e>
 801486c:	682b      	ldr	r3, [r5, #0]
 801486e:	b103      	cbz	r3, 8014872 <_read_r+0x1e>
 8014870:	6023      	str	r3, [r4, #0]
 8014872:	bd38      	pop	{r3, r4, r5, pc}
 8014874:	2000b3a4 	.word	0x2000b3a4

08014878 <_write_r>:
 8014878:	b538      	push	{r3, r4, r5, lr}
 801487a:	4d07      	ldr	r5, [pc, #28]	@ (8014898 <_write_r+0x20>)
 801487c:	4604      	mov	r4, r0
 801487e:	4608      	mov	r0, r1
 8014880:	4611      	mov	r1, r2
 8014882:	2200      	movs	r2, #0
 8014884:	602a      	str	r2, [r5, #0]
 8014886:	461a      	mov	r2, r3
 8014888:	f7ed fdec 	bl	8002464 <_write>
 801488c:	1c43      	adds	r3, r0, #1
 801488e:	d102      	bne.n	8014896 <_write_r+0x1e>
 8014890:	682b      	ldr	r3, [r5, #0]
 8014892:	b103      	cbz	r3, 8014896 <_write_r+0x1e>
 8014894:	6023      	str	r3, [r4, #0]
 8014896:	bd38      	pop	{r3, r4, r5, pc}
 8014898:	2000b3a4 	.word	0x2000b3a4

0801489c <__libc_init_array>:
 801489c:	b570      	push	{r4, r5, r6, lr}
 801489e:	4d0d      	ldr	r5, [pc, #52]	@ (80148d4 <__libc_init_array+0x38>)
 80148a0:	4c0d      	ldr	r4, [pc, #52]	@ (80148d8 <__libc_init_array+0x3c>)
 80148a2:	1b64      	subs	r4, r4, r5
 80148a4:	10a4      	asrs	r4, r4, #2
 80148a6:	2600      	movs	r6, #0
 80148a8:	42a6      	cmp	r6, r4
 80148aa:	d109      	bne.n	80148c0 <__libc_init_array+0x24>
 80148ac:	4d0b      	ldr	r5, [pc, #44]	@ (80148dc <__libc_init_array+0x40>)
 80148ae:	4c0c      	ldr	r4, [pc, #48]	@ (80148e0 <__libc_init_array+0x44>)
 80148b0:	f000 fe48 	bl	8015544 <_init>
 80148b4:	1b64      	subs	r4, r4, r5
 80148b6:	10a4      	asrs	r4, r4, #2
 80148b8:	2600      	movs	r6, #0
 80148ba:	42a6      	cmp	r6, r4
 80148bc:	d105      	bne.n	80148ca <__libc_init_array+0x2e>
 80148be:	bd70      	pop	{r4, r5, r6, pc}
 80148c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80148c4:	4798      	blx	r3
 80148c6:	3601      	adds	r6, #1
 80148c8:	e7ee      	b.n	80148a8 <__libc_init_array+0xc>
 80148ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80148ce:	4798      	blx	r3
 80148d0:	3601      	adds	r6, #1
 80148d2:	e7f2      	b.n	80148ba <__libc_init_array+0x1e>
 80148d4:	08018130 	.word	0x08018130
 80148d8:	08018130 	.word	0x08018130
 80148dc:	08018130 	.word	0x08018130
 80148e0:	08018134 	.word	0x08018134

080148e4 <__retarget_lock_init_recursive>:
 80148e4:	4770      	bx	lr

080148e6 <__retarget_lock_acquire_recursive>:
 80148e6:	4770      	bx	lr

080148e8 <__retarget_lock_release_recursive>:
 80148e8:	4770      	bx	lr

080148ea <memcpy>:
 80148ea:	440a      	add	r2, r1
 80148ec:	4291      	cmp	r1, r2
 80148ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80148f2:	d100      	bne.n	80148f6 <memcpy+0xc>
 80148f4:	4770      	bx	lr
 80148f6:	b510      	push	{r4, lr}
 80148f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80148fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014900:	4291      	cmp	r1, r2
 8014902:	d1f9      	bne.n	80148f8 <memcpy+0xe>
 8014904:	bd10      	pop	{r4, pc}
	...

08014908 <__assert_func>:
 8014908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801490a:	4614      	mov	r4, r2
 801490c:	461a      	mov	r2, r3
 801490e:	4b09      	ldr	r3, [pc, #36]	@ (8014934 <__assert_func+0x2c>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	4605      	mov	r5, r0
 8014914:	68d8      	ldr	r0, [r3, #12]
 8014916:	b14c      	cbz	r4, 801492c <__assert_func+0x24>
 8014918:	4b07      	ldr	r3, [pc, #28]	@ (8014938 <__assert_func+0x30>)
 801491a:	9100      	str	r1, [sp, #0]
 801491c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014920:	4906      	ldr	r1, [pc, #24]	@ (801493c <__assert_func+0x34>)
 8014922:	462b      	mov	r3, r5
 8014924:	f000 fc88 	bl	8015238 <fiprintf>
 8014928:	f000 fd3c 	bl	80153a4 <abort>
 801492c:	4b04      	ldr	r3, [pc, #16]	@ (8014940 <__assert_func+0x38>)
 801492e:	461c      	mov	r4, r3
 8014930:	e7f3      	b.n	801491a <__assert_func+0x12>
 8014932:	bf00      	nop
 8014934:	200000a0 	.word	0x200000a0
 8014938:	080180b9 	.word	0x080180b9
 801493c:	080180c6 	.word	0x080180c6
 8014940:	080180f4 	.word	0x080180f4

08014944 <_free_r>:
 8014944:	b538      	push	{r3, r4, r5, lr}
 8014946:	4605      	mov	r5, r0
 8014948:	2900      	cmp	r1, #0
 801494a:	d041      	beq.n	80149d0 <_free_r+0x8c>
 801494c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014950:	1f0c      	subs	r4, r1, #4
 8014952:	2b00      	cmp	r3, #0
 8014954:	bfb8      	it	lt
 8014956:	18e4      	addlt	r4, r4, r3
 8014958:	f000 f8e8 	bl	8014b2c <__malloc_lock>
 801495c:	4a1d      	ldr	r2, [pc, #116]	@ (80149d4 <_free_r+0x90>)
 801495e:	6813      	ldr	r3, [r2, #0]
 8014960:	b933      	cbnz	r3, 8014970 <_free_r+0x2c>
 8014962:	6063      	str	r3, [r4, #4]
 8014964:	6014      	str	r4, [r2, #0]
 8014966:	4628      	mov	r0, r5
 8014968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801496c:	f000 b8e4 	b.w	8014b38 <__malloc_unlock>
 8014970:	42a3      	cmp	r3, r4
 8014972:	d908      	bls.n	8014986 <_free_r+0x42>
 8014974:	6820      	ldr	r0, [r4, #0]
 8014976:	1821      	adds	r1, r4, r0
 8014978:	428b      	cmp	r3, r1
 801497a:	bf01      	itttt	eq
 801497c:	6819      	ldreq	r1, [r3, #0]
 801497e:	685b      	ldreq	r3, [r3, #4]
 8014980:	1809      	addeq	r1, r1, r0
 8014982:	6021      	streq	r1, [r4, #0]
 8014984:	e7ed      	b.n	8014962 <_free_r+0x1e>
 8014986:	461a      	mov	r2, r3
 8014988:	685b      	ldr	r3, [r3, #4]
 801498a:	b10b      	cbz	r3, 8014990 <_free_r+0x4c>
 801498c:	42a3      	cmp	r3, r4
 801498e:	d9fa      	bls.n	8014986 <_free_r+0x42>
 8014990:	6811      	ldr	r1, [r2, #0]
 8014992:	1850      	adds	r0, r2, r1
 8014994:	42a0      	cmp	r0, r4
 8014996:	d10b      	bne.n	80149b0 <_free_r+0x6c>
 8014998:	6820      	ldr	r0, [r4, #0]
 801499a:	4401      	add	r1, r0
 801499c:	1850      	adds	r0, r2, r1
 801499e:	4283      	cmp	r3, r0
 80149a0:	6011      	str	r1, [r2, #0]
 80149a2:	d1e0      	bne.n	8014966 <_free_r+0x22>
 80149a4:	6818      	ldr	r0, [r3, #0]
 80149a6:	685b      	ldr	r3, [r3, #4]
 80149a8:	6053      	str	r3, [r2, #4]
 80149aa:	4408      	add	r0, r1
 80149ac:	6010      	str	r0, [r2, #0]
 80149ae:	e7da      	b.n	8014966 <_free_r+0x22>
 80149b0:	d902      	bls.n	80149b8 <_free_r+0x74>
 80149b2:	230c      	movs	r3, #12
 80149b4:	602b      	str	r3, [r5, #0]
 80149b6:	e7d6      	b.n	8014966 <_free_r+0x22>
 80149b8:	6820      	ldr	r0, [r4, #0]
 80149ba:	1821      	adds	r1, r4, r0
 80149bc:	428b      	cmp	r3, r1
 80149be:	bf04      	itt	eq
 80149c0:	6819      	ldreq	r1, [r3, #0]
 80149c2:	685b      	ldreq	r3, [r3, #4]
 80149c4:	6063      	str	r3, [r4, #4]
 80149c6:	bf04      	itt	eq
 80149c8:	1809      	addeq	r1, r1, r0
 80149ca:	6021      	streq	r1, [r4, #0]
 80149cc:	6054      	str	r4, [r2, #4]
 80149ce:	e7ca      	b.n	8014966 <_free_r+0x22>
 80149d0:	bd38      	pop	{r3, r4, r5, pc}
 80149d2:	bf00      	nop
 80149d4:	2000b3b0 	.word	0x2000b3b0

080149d8 <malloc>:
 80149d8:	4b02      	ldr	r3, [pc, #8]	@ (80149e4 <malloc+0xc>)
 80149da:	4601      	mov	r1, r0
 80149dc:	6818      	ldr	r0, [r3, #0]
 80149de:	f000 b825 	b.w	8014a2c <_malloc_r>
 80149e2:	bf00      	nop
 80149e4:	200000a0 	.word	0x200000a0

080149e8 <sbrk_aligned>:
 80149e8:	b570      	push	{r4, r5, r6, lr}
 80149ea:	4e0f      	ldr	r6, [pc, #60]	@ (8014a28 <sbrk_aligned+0x40>)
 80149ec:	460c      	mov	r4, r1
 80149ee:	6831      	ldr	r1, [r6, #0]
 80149f0:	4605      	mov	r5, r0
 80149f2:	b911      	cbnz	r1, 80149fa <sbrk_aligned+0x12>
 80149f4:	f000 fcc6 	bl	8015384 <_sbrk_r>
 80149f8:	6030      	str	r0, [r6, #0]
 80149fa:	4621      	mov	r1, r4
 80149fc:	4628      	mov	r0, r5
 80149fe:	f000 fcc1 	bl	8015384 <_sbrk_r>
 8014a02:	1c43      	adds	r3, r0, #1
 8014a04:	d103      	bne.n	8014a0e <sbrk_aligned+0x26>
 8014a06:	f04f 34ff 	mov.w	r4, #4294967295
 8014a0a:	4620      	mov	r0, r4
 8014a0c:	bd70      	pop	{r4, r5, r6, pc}
 8014a0e:	1cc4      	adds	r4, r0, #3
 8014a10:	f024 0403 	bic.w	r4, r4, #3
 8014a14:	42a0      	cmp	r0, r4
 8014a16:	d0f8      	beq.n	8014a0a <sbrk_aligned+0x22>
 8014a18:	1a21      	subs	r1, r4, r0
 8014a1a:	4628      	mov	r0, r5
 8014a1c:	f000 fcb2 	bl	8015384 <_sbrk_r>
 8014a20:	3001      	adds	r0, #1
 8014a22:	d1f2      	bne.n	8014a0a <sbrk_aligned+0x22>
 8014a24:	e7ef      	b.n	8014a06 <sbrk_aligned+0x1e>
 8014a26:	bf00      	nop
 8014a28:	2000b3ac 	.word	0x2000b3ac

08014a2c <_malloc_r>:
 8014a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a30:	1ccd      	adds	r5, r1, #3
 8014a32:	f025 0503 	bic.w	r5, r5, #3
 8014a36:	3508      	adds	r5, #8
 8014a38:	2d0c      	cmp	r5, #12
 8014a3a:	bf38      	it	cc
 8014a3c:	250c      	movcc	r5, #12
 8014a3e:	2d00      	cmp	r5, #0
 8014a40:	4606      	mov	r6, r0
 8014a42:	db01      	blt.n	8014a48 <_malloc_r+0x1c>
 8014a44:	42a9      	cmp	r1, r5
 8014a46:	d904      	bls.n	8014a52 <_malloc_r+0x26>
 8014a48:	230c      	movs	r3, #12
 8014a4a:	6033      	str	r3, [r6, #0]
 8014a4c:	2000      	movs	r0, #0
 8014a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014b28 <_malloc_r+0xfc>
 8014a56:	f000 f869 	bl	8014b2c <__malloc_lock>
 8014a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8014a5e:	461c      	mov	r4, r3
 8014a60:	bb44      	cbnz	r4, 8014ab4 <_malloc_r+0x88>
 8014a62:	4629      	mov	r1, r5
 8014a64:	4630      	mov	r0, r6
 8014a66:	f7ff ffbf 	bl	80149e8 <sbrk_aligned>
 8014a6a:	1c43      	adds	r3, r0, #1
 8014a6c:	4604      	mov	r4, r0
 8014a6e:	d158      	bne.n	8014b22 <_malloc_r+0xf6>
 8014a70:	f8d8 4000 	ldr.w	r4, [r8]
 8014a74:	4627      	mov	r7, r4
 8014a76:	2f00      	cmp	r7, #0
 8014a78:	d143      	bne.n	8014b02 <_malloc_r+0xd6>
 8014a7a:	2c00      	cmp	r4, #0
 8014a7c:	d04b      	beq.n	8014b16 <_malloc_r+0xea>
 8014a7e:	6823      	ldr	r3, [r4, #0]
 8014a80:	4639      	mov	r1, r7
 8014a82:	4630      	mov	r0, r6
 8014a84:	eb04 0903 	add.w	r9, r4, r3
 8014a88:	f000 fc7c 	bl	8015384 <_sbrk_r>
 8014a8c:	4581      	cmp	r9, r0
 8014a8e:	d142      	bne.n	8014b16 <_malloc_r+0xea>
 8014a90:	6821      	ldr	r1, [r4, #0]
 8014a92:	1a6d      	subs	r5, r5, r1
 8014a94:	4629      	mov	r1, r5
 8014a96:	4630      	mov	r0, r6
 8014a98:	f7ff ffa6 	bl	80149e8 <sbrk_aligned>
 8014a9c:	3001      	adds	r0, #1
 8014a9e:	d03a      	beq.n	8014b16 <_malloc_r+0xea>
 8014aa0:	6823      	ldr	r3, [r4, #0]
 8014aa2:	442b      	add	r3, r5
 8014aa4:	6023      	str	r3, [r4, #0]
 8014aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8014aaa:	685a      	ldr	r2, [r3, #4]
 8014aac:	bb62      	cbnz	r2, 8014b08 <_malloc_r+0xdc>
 8014aae:	f8c8 7000 	str.w	r7, [r8]
 8014ab2:	e00f      	b.n	8014ad4 <_malloc_r+0xa8>
 8014ab4:	6822      	ldr	r2, [r4, #0]
 8014ab6:	1b52      	subs	r2, r2, r5
 8014ab8:	d420      	bmi.n	8014afc <_malloc_r+0xd0>
 8014aba:	2a0b      	cmp	r2, #11
 8014abc:	d917      	bls.n	8014aee <_malloc_r+0xc2>
 8014abe:	1961      	adds	r1, r4, r5
 8014ac0:	42a3      	cmp	r3, r4
 8014ac2:	6025      	str	r5, [r4, #0]
 8014ac4:	bf18      	it	ne
 8014ac6:	6059      	strne	r1, [r3, #4]
 8014ac8:	6863      	ldr	r3, [r4, #4]
 8014aca:	bf08      	it	eq
 8014acc:	f8c8 1000 	streq.w	r1, [r8]
 8014ad0:	5162      	str	r2, [r4, r5]
 8014ad2:	604b      	str	r3, [r1, #4]
 8014ad4:	4630      	mov	r0, r6
 8014ad6:	f000 f82f 	bl	8014b38 <__malloc_unlock>
 8014ada:	f104 000b 	add.w	r0, r4, #11
 8014ade:	1d23      	adds	r3, r4, #4
 8014ae0:	f020 0007 	bic.w	r0, r0, #7
 8014ae4:	1ac2      	subs	r2, r0, r3
 8014ae6:	bf1c      	itt	ne
 8014ae8:	1a1b      	subne	r3, r3, r0
 8014aea:	50a3      	strne	r3, [r4, r2]
 8014aec:	e7af      	b.n	8014a4e <_malloc_r+0x22>
 8014aee:	6862      	ldr	r2, [r4, #4]
 8014af0:	42a3      	cmp	r3, r4
 8014af2:	bf0c      	ite	eq
 8014af4:	f8c8 2000 	streq.w	r2, [r8]
 8014af8:	605a      	strne	r2, [r3, #4]
 8014afa:	e7eb      	b.n	8014ad4 <_malloc_r+0xa8>
 8014afc:	4623      	mov	r3, r4
 8014afe:	6864      	ldr	r4, [r4, #4]
 8014b00:	e7ae      	b.n	8014a60 <_malloc_r+0x34>
 8014b02:	463c      	mov	r4, r7
 8014b04:	687f      	ldr	r7, [r7, #4]
 8014b06:	e7b6      	b.n	8014a76 <_malloc_r+0x4a>
 8014b08:	461a      	mov	r2, r3
 8014b0a:	685b      	ldr	r3, [r3, #4]
 8014b0c:	42a3      	cmp	r3, r4
 8014b0e:	d1fb      	bne.n	8014b08 <_malloc_r+0xdc>
 8014b10:	2300      	movs	r3, #0
 8014b12:	6053      	str	r3, [r2, #4]
 8014b14:	e7de      	b.n	8014ad4 <_malloc_r+0xa8>
 8014b16:	230c      	movs	r3, #12
 8014b18:	6033      	str	r3, [r6, #0]
 8014b1a:	4630      	mov	r0, r6
 8014b1c:	f000 f80c 	bl	8014b38 <__malloc_unlock>
 8014b20:	e794      	b.n	8014a4c <_malloc_r+0x20>
 8014b22:	6005      	str	r5, [r0, #0]
 8014b24:	e7d6      	b.n	8014ad4 <_malloc_r+0xa8>
 8014b26:	bf00      	nop
 8014b28:	2000b3b0 	.word	0x2000b3b0

08014b2c <__malloc_lock>:
 8014b2c:	4801      	ldr	r0, [pc, #4]	@ (8014b34 <__malloc_lock+0x8>)
 8014b2e:	f7ff beda 	b.w	80148e6 <__retarget_lock_acquire_recursive>
 8014b32:	bf00      	nop
 8014b34:	2000b3a8 	.word	0x2000b3a8

08014b38 <__malloc_unlock>:
 8014b38:	4801      	ldr	r0, [pc, #4]	@ (8014b40 <__malloc_unlock+0x8>)
 8014b3a:	f7ff bed5 	b.w	80148e8 <__retarget_lock_release_recursive>
 8014b3e:	bf00      	nop
 8014b40:	2000b3a8 	.word	0x2000b3a8

08014b44 <__sfputc_r>:
 8014b44:	6893      	ldr	r3, [r2, #8]
 8014b46:	3b01      	subs	r3, #1
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	b410      	push	{r4}
 8014b4c:	6093      	str	r3, [r2, #8]
 8014b4e:	da08      	bge.n	8014b62 <__sfputc_r+0x1e>
 8014b50:	6994      	ldr	r4, [r2, #24]
 8014b52:	42a3      	cmp	r3, r4
 8014b54:	db01      	blt.n	8014b5a <__sfputc_r+0x16>
 8014b56:	290a      	cmp	r1, #10
 8014b58:	d103      	bne.n	8014b62 <__sfputc_r+0x1e>
 8014b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b5e:	f000 bb7d 	b.w	801525c <__swbuf_r>
 8014b62:	6813      	ldr	r3, [r2, #0]
 8014b64:	1c58      	adds	r0, r3, #1
 8014b66:	6010      	str	r0, [r2, #0]
 8014b68:	7019      	strb	r1, [r3, #0]
 8014b6a:	4608      	mov	r0, r1
 8014b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b70:	4770      	bx	lr

08014b72 <__sfputs_r>:
 8014b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b74:	4606      	mov	r6, r0
 8014b76:	460f      	mov	r7, r1
 8014b78:	4614      	mov	r4, r2
 8014b7a:	18d5      	adds	r5, r2, r3
 8014b7c:	42ac      	cmp	r4, r5
 8014b7e:	d101      	bne.n	8014b84 <__sfputs_r+0x12>
 8014b80:	2000      	movs	r0, #0
 8014b82:	e007      	b.n	8014b94 <__sfputs_r+0x22>
 8014b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b88:	463a      	mov	r2, r7
 8014b8a:	4630      	mov	r0, r6
 8014b8c:	f7ff ffda 	bl	8014b44 <__sfputc_r>
 8014b90:	1c43      	adds	r3, r0, #1
 8014b92:	d1f3      	bne.n	8014b7c <__sfputs_r+0xa>
 8014b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014b98 <_vfiprintf_r>:
 8014b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b9c:	460d      	mov	r5, r1
 8014b9e:	b09d      	sub	sp, #116	@ 0x74
 8014ba0:	4614      	mov	r4, r2
 8014ba2:	4698      	mov	r8, r3
 8014ba4:	4606      	mov	r6, r0
 8014ba6:	b118      	cbz	r0, 8014bb0 <_vfiprintf_r+0x18>
 8014ba8:	6a03      	ldr	r3, [r0, #32]
 8014baa:	b90b      	cbnz	r3, 8014bb0 <_vfiprintf_r+0x18>
 8014bac:	f7ff fd8c 	bl	80146c8 <__sinit>
 8014bb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014bb2:	07d9      	lsls	r1, r3, #31
 8014bb4:	d405      	bmi.n	8014bc2 <_vfiprintf_r+0x2a>
 8014bb6:	89ab      	ldrh	r3, [r5, #12]
 8014bb8:	059a      	lsls	r2, r3, #22
 8014bba:	d402      	bmi.n	8014bc2 <_vfiprintf_r+0x2a>
 8014bbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014bbe:	f7ff fe92 	bl	80148e6 <__retarget_lock_acquire_recursive>
 8014bc2:	89ab      	ldrh	r3, [r5, #12]
 8014bc4:	071b      	lsls	r3, r3, #28
 8014bc6:	d501      	bpl.n	8014bcc <_vfiprintf_r+0x34>
 8014bc8:	692b      	ldr	r3, [r5, #16]
 8014bca:	b99b      	cbnz	r3, 8014bf4 <_vfiprintf_r+0x5c>
 8014bcc:	4629      	mov	r1, r5
 8014bce:	4630      	mov	r0, r6
 8014bd0:	f000 fb82 	bl	80152d8 <__swsetup_r>
 8014bd4:	b170      	cbz	r0, 8014bf4 <_vfiprintf_r+0x5c>
 8014bd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014bd8:	07dc      	lsls	r4, r3, #31
 8014bda:	d504      	bpl.n	8014be6 <_vfiprintf_r+0x4e>
 8014bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8014be0:	b01d      	add	sp, #116	@ 0x74
 8014be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014be6:	89ab      	ldrh	r3, [r5, #12]
 8014be8:	0598      	lsls	r0, r3, #22
 8014bea:	d4f7      	bmi.n	8014bdc <_vfiprintf_r+0x44>
 8014bec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014bee:	f7ff fe7b 	bl	80148e8 <__retarget_lock_release_recursive>
 8014bf2:	e7f3      	b.n	8014bdc <_vfiprintf_r+0x44>
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8014bf8:	2320      	movs	r3, #32
 8014bfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c02:	2330      	movs	r3, #48	@ 0x30
 8014c04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014db4 <_vfiprintf_r+0x21c>
 8014c08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014c0c:	f04f 0901 	mov.w	r9, #1
 8014c10:	4623      	mov	r3, r4
 8014c12:	469a      	mov	sl, r3
 8014c14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c18:	b10a      	cbz	r2, 8014c1e <_vfiprintf_r+0x86>
 8014c1a:	2a25      	cmp	r2, #37	@ 0x25
 8014c1c:	d1f9      	bne.n	8014c12 <_vfiprintf_r+0x7a>
 8014c1e:	ebba 0b04 	subs.w	fp, sl, r4
 8014c22:	d00b      	beq.n	8014c3c <_vfiprintf_r+0xa4>
 8014c24:	465b      	mov	r3, fp
 8014c26:	4622      	mov	r2, r4
 8014c28:	4629      	mov	r1, r5
 8014c2a:	4630      	mov	r0, r6
 8014c2c:	f7ff ffa1 	bl	8014b72 <__sfputs_r>
 8014c30:	3001      	adds	r0, #1
 8014c32:	f000 80a7 	beq.w	8014d84 <_vfiprintf_r+0x1ec>
 8014c36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014c38:	445a      	add	r2, fp
 8014c3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8014c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	f000 809f 	beq.w	8014d84 <_vfiprintf_r+0x1ec>
 8014c46:	2300      	movs	r3, #0
 8014c48:	f04f 32ff 	mov.w	r2, #4294967295
 8014c4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c50:	f10a 0a01 	add.w	sl, sl, #1
 8014c54:	9304      	str	r3, [sp, #16]
 8014c56:	9307      	str	r3, [sp, #28]
 8014c58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014c5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8014c5e:	4654      	mov	r4, sl
 8014c60:	2205      	movs	r2, #5
 8014c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c66:	4853      	ldr	r0, [pc, #332]	@ (8014db4 <_vfiprintf_r+0x21c>)
 8014c68:	f7eb fab2 	bl	80001d0 <memchr>
 8014c6c:	9a04      	ldr	r2, [sp, #16]
 8014c6e:	b9d8      	cbnz	r0, 8014ca8 <_vfiprintf_r+0x110>
 8014c70:	06d1      	lsls	r1, r2, #27
 8014c72:	bf44      	itt	mi
 8014c74:	2320      	movmi	r3, #32
 8014c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014c7a:	0713      	lsls	r3, r2, #28
 8014c7c:	bf44      	itt	mi
 8014c7e:	232b      	movmi	r3, #43	@ 0x2b
 8014c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014c84:	f89a 3000 	ldrb.w	r3, [sl]
 8014c88:	2b2a      	cmp	r3, #42	@ 0x2a
 8014c8a:	d015      	beq.n	8014cb8 <_vfiprintf_r+0x120>
 8014c8c:	9a07      	ldr	r2, [sp, #28]
 8014c8e:	4654      	mov	r4, sl
 8014c90:	2000      	movs	r0, #0
 8014c92:	f04f 0c0a 	mov.w	ip, #10
 8014c96:	4621      	mov	r1, r4
 8014c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c9c:	3b30      	subs	r3, #48	@ 0x30
 8014c9e:	2b09      	cmp	r3, #9
 8014ca0:	d94b      	bls.n	8014d3a <_vfiprintf_r+0x1a2>
 8014ca2:	b1b0      	cbz	r0, 8014cd2 <_vfiprintf_r+0x13a>
 8014ca4:	9207      	str	r2, [sp, #28]
 8014ca6:	e014      	b.n	8014cd2 <_vfiprintf_r+0x13a>
 8014ca8:	eba0 0308 	sub.w	r3, r0, r8
 8014cac:	fa09 f303 	lsl.w	r3, r9, r3
 8014cb0:	4313      	orrs	r3, r2
 8014cb2:	9304      	str	r3, [sp, #16]
 8014cb4:	46a2      	mov	sl, r4
 8014cb6:	e7d2      	b.n	8014c5e <_vfiprintf_r+0xc6>
 8014cb8:	9b03      	ldr	r3, [sp, #12]
 8014cba:	1d19      	adds	r1, r3, #4
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	9103      	str	r1, [sp, #12]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	bfbb      	ittet	lt
 8014cc4:	425b      	neglt	r3, r3
 8014cc6:	f042 0202 	orrlt.w	r2, r2, #2
 8014cca:	9307      	strge	r3, [sp, #28]
 8014ccc:	9307      	strlt	r3, [sp, #28]
 8014cce:	bfb8      	it	lt
 8014cd0:	9204      	strlt	r2, [sp, #16]
 8014cd2:	7823      	ldrb	r3, [r4, #0]
 8014cd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8014cd6:	d10a      	bne.n	8014cee <_vfiprintf_r+0x156>
 8014cd8:	7863      	ldrb	r3, [r4, #1]
 8014cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8014cdc:	d132      	bne.n	8014d44 <_vfiprintf_r+0x1ac>
 8014cde:	9b03      	ldr	r3, [sp, #12]
 8014ce0:	1d1a      	adds	r2, r3, #4
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	9203      	str	r2, [sp, #12]
 8014ce6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014cea:	3402      	adds	r4, #2
 8014cec:	9305      	str	r3, [sp, #20]
 8014cee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014dc4 <_vfiprintf_r+0x22c>
 8014cf2:	7821      	ldrb	r1, [r4, #0]
 8014cf4:	2203      	movs	r2, #3
 8014cf6:	4650      	mov	r0, sl
 8014cf8:	f7eb fa6a 	bl	80001d0 <memchr>
 8014cfc:	b138      	cbz	r0, 8014d0e <_vfiprintf_r+0x176>
 8014cfe:	9b04      	ldr	r3, [sp, #16]
 8014d00:	eba0 000a 	sub.w	r0, r0, sl
 8014d04:	2240      	movs	r2, #64	@ 0x40
 8014d06:	4082      	lsls	r2, r0
 8014d08:	4313      	orrs	r3, r2
 8014d0a:	3401      	adds	r4, #1
 8014d0c:	9304      	str	r3, [sp, #16]
 8014d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d12:	4829      	ldr	r0, [pc, #164]	@ (8014db8 <_vfiprintf_r+0x220>)
 8014d14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014d18:	2206      	movs	r2, #6
 8014d1a:	f7eb fa59 	bl	80001d0 <memchr>
 8014d1e:	2800      	cmp	r0, #0
 8014d20:	d03f      	beq.n	8014da2 <_vfiprintf_r+0x20a>
 8014d22:	4b26      	ldr	r3, [pc, #152]	@ (8014dbc <_vfiprintf_r+0x224>)
 8014d24:	bb1b      	cbnz	r3, 8014d6e <_vfiprintf_r+0x1d6>
 8014d26:	9b03      	ldr	r3, [sp, #12]
 8014d28:	3307      	adds	r3, #7
 8014d2a:	f023 0307 	bic.w	r3, r3, #7
 8014d2e:	3308      	adds	r3, #8
 8014d30:	9303      	str	r3, [sp, #12]
 8014d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d34:	443b      	add	r3, r7
 8014d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d38:	e76a      	b.n	8014c10 <_vfiprintf_r+0x78>
 8014d3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d3e:	460c      	mov	r4, r1
 8014d40:	2001      	movs	r0, #1
 8014d42:	e7a8      	b.n	8014c96 <_vfiprintf_r+0xfe>
 8014d44:	2300      	movs	r3, #0
 8014d46:	3401      	adds	r4, #1
 8014d48:	9305      	str	r3, [sp, #20]
 8014d4a:	4619      	mov	r1, r3
 8014d4c:	f04f 0c0a 	mov.w	ip, #10
 8014d50:	4620      	mov	r0, r4
 8014d52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d56:	3a30      	subs	r2, #48	@ 0x30
 8014d58:	2a09      	cmp	r2, #9
 8014d5a:	d903      	bls.n	8014d64 <_vfiprintf_r+0x1cc>
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d0c6      	beq.n	8014cee <_vfiprintf_r+0x156>
 8014d60:	9105      	str	r1, [sp, #20]
 8014d62:	e7c4      	b.n	8014cee <_vfiprintf_r+0x156>
 8014d64:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d68:	4604      	mov	r4, r0
 8014d6a:	2301      	movs	r3, #1
 8014d6c:	e7f0      	b.n	8014d50 <_vfiprintf_r+0x1b8>
 8014d6e:	ab03      	add	r3, sp, #12
 8014d70:	9300      	str	r3, [sp, #0]
 8014d72:	462a      	mov	r2, r5
 8014d74:	4b12      	ldr	r3, [pc, #72]	@ (8014dc0 <_vfiprintf_r+0x228>)
 8014d76:	a904      	add	r1, sp, #16
 8014d78:	4630      	mov	r0, r6
 8014d7a:	f3af 8000 	nop.w
 8014d7e:	4607      	mov	r7, r0
 8014d80:	1c78      	adds	r0, r7, #1
 8014d82:	d1d6      	bne.n	8014d32 <_vfiprintf_r+0x19a>
 8014d84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d86:	07d9      	lsls	r1, r3, #31
 8014d88:	d405      	bmi.n	8014d96 <_vfiprintf_r+0x1fe>
 8014d8a:	89ab      	ldrh	r3, [r5, #12]
 8014d8c:	059a      	lsls	r2, r3, #22
 8014d8e:	d402      	bmi.n	8014d96 <_vfiprintf_r+0x1fe>
 8014d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d92:	f7ff fda9 	bl	80148e8 <__retarget_lock_release_recursive>
 8014d96:	89ab      	ldrh	r3, [r5, #12]
 8014d98:	065b      	lsls	r3, r3, #25
 8014d9a:	f53f af1f 	bmi.w	8014bdc <_vfiprintf_r+0x44>
 8014d9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014da0:	e71e      	b.n	8014be0 <_vfiprintf_r+0x48>
 8014da2:	ab03      	add	r3, sp, #12
 8014da4:	9300      	str	r3, [sp, #0]
 8014da6:	462a      	mov	r2, r5
 8014da8:	4b05      	ldr	r3, [pc, #20]	@ (8014dc0 <_vfiprintf_r+0x228>)
 8014daa:	a904      	add	r1, sp, #16
 8014dac:	4630      	mov	r0, r6
 8014dae:	f000 f879 	bl	8014ea4 <_printf_i>
 8014db2:	e7e4      	b.n	8014d7e <_vfiprintf_r+0x1e6>
 8014db4:	080180f5 	.word	0x080180f5
 8014db8:	080180ff 	.word	0x080180ff
 8014dbc:	00000000 	.word	0x00000000
 8014dc0:	08014b73 	.word	0x08014b73
 8014dc4:	080180fb 	.word	0x080180fb

08014dc8 <_printf_common>:
 8014dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014dcc:	4616      	mov	r6, r2
 8014dce:	4698      	mov	r8, r3
 8014dd0:	688a      	ldr	r2, [r1, #8]
 8014dd2:	690b      	ldr	r3, [r1, #16]
 8014dd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014dd8:	4293      	cmp	r3, r2
 8014dda:	bfb8      	it	lt
 8014ddc:	4613      	movlt	r3, r2
 8014dde:	6033      	str	r3, [r6, #0]
 8014de0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014de4:	4607      	mov	r7, r0
 8014de6:	460c      	mov	r4, r1
 8014de8:	b10a      	cbz	r2, 8014dee <_printf_common+0x26>
 8014dea:	3301      	adds	r3, #1
 8014dec:	6033      	str	r3, [r6, #0]
 8014dee:	6823      	ldr	r3, [r4, #0]
 8014df0:	0699      	lsls	r1, r3, #26
 8014df2:	bf42      	ittt	mi
 8014df4:	6833      	ldrmi	r3, [r6, #0]
 8014df6:	3302      	addmi	r3, #2
 8014df8:	6033      	strmi	r3, [r6, #0]
 8014dfa:	6825      	ldr	r5, [r4, #0]
 8014dfc:	f015 0506 	ands.w	r5, r5, #6
 8014e00:	d106      	bne.n	8014e10 <_printf_common+0x48>
 8014e02:	f104 0a19 	add.w	sl, r4, #25
 8014e06:	68e3      	ldr	r3, [r4, #12]
 8014e08:	6832      	ldr	r2, [r6, #0]
 8014e0a:	1a9b      	subs	r3, r3, r2
 8014e0c:	42ab      	cmp	r3, r5
 8014e0e:	dc26      	bgt.n	8014e5e <_printf_common+0x96>
 8014e10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014e14:	6822      	ldr	r2, [r4, #0]
 8014e16:	3b00      	subs	r3, #0
 8014e18:	bf18      	it	ne
 8014e1a:	2301      	movne	r3, #1
 8014e1c:	0692      	lsls	r2, r2, #26
 8014e1e:	d42b      	bmi.n	8014e78 <_printf_common+0xb0>
 8014e20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014e24:	4641      	mov	r1, r8
 8014e26:	4638      	mov	r0, r7
 8014e28:	47c8      	blx	r9
 8014e2a:	3001      	adds	r0, #1
 8014e2c:	d01e      	beq.n	8014e6c <_printf_common+0xa4>
 8014e2e:	6823      	ldr	r3, [r4, #0]
 8014e30:	6922      	ldr	r2, [r4, #16]
 8014e32:	f003 0306 	and.w	r3, r3, #6
 8014e36:	2b04      	cmp	r3, #4
 8014e38:	bf02      	ittt	eq
 8014e3a:	68e5      	ldreq	r5, [r4, #12]
 8014e3c:	6833      	ldreq	r3, [r6, #0]
 8014e3e:	1aed      	subeq	r5, r5, r3
 8014e40:	68a3      	ldr	r3, [r4, #8]
 8014e42:	bf0c      	ite	eq
 8014e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014e48:	2500      	movne	r5, #0
 8014e4a:	4293      	cmp	r3, r2
 8014e4c:	bfc4      	itt	gt
 8014e4e:	1a9b      	subgt	r3, r3, r2
 8014e50:	18ed      	addgt	r5, r5, r3
 8014e52:	2600      	movs	r6, #0
 8014e54:	341a      	adds	r4, #26
 8014e56:	42b5      	cmp	r5, r6
 8014e58:	d11a      	bne.n	8014e90 <_printf_common+0xc8>
 8014e5a:	2000      	movs	r0, #0
 8014e5c:	e008      	b.n	8014e70 <_printf_common+0xa8>
 8014e5e:	2301      	movs	r3, #1
 8014e60:	4652      	mov	r2, sl
 8014e62:	4641      	mov	r1, r8
 8014e64:	4638      	mov	r0, r7
 8014e66:	47c8      	blx	r9
 8014e68:	3001      	adds	r0, #1
 8014e6a:	d103      	bne.n	8014e74 <_printf_common+0xac>
 8014e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8014e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e74:	3501      	adds	r5, #1
 8014e76:	e7c6      	b.n	8014e06 <_printf_common+0x3e>
 8014e78:	18e1      	adds	r1, r4, r3
 8014e7a:	1c5a      	adds	r2, r3, #1
 8014e7c:	2030      	movs	r0, #48	@ 0x30
 8014e7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014e82:	4422      	add	r2, r4
 8014e84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014e88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014e8c:	3302      	adds	r3, #2
 8014e8e:	e7c7      	b.n	8014e20 <_printf_common+0x58>
 8014e90:	2301      	movs	r3, #1
 8014e92:	4622      	mov	r2, r4
 8014e94:	4641      	mov	r1, r8
 8014e96:	4638      	mov	r0, r7
 8014e98:	47c8      	blx	r9
 8014e9a:	3001      	adds	r0, #1
 8014e9c:	d0e6      	beq.n	8014e6c <_printf_common+0xa4>
 8014e9e:	3601      	adds	r6, #1
 8014ea0:	e7d9      	b.n	8014e56 <_printf_common+0x8e>
	...

08014ea4 <_printf_i>:
 8014ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014ea8:	7e0f      	ldrb	r7, [r1, #24]
 8014eaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014eac:	2f78      	cmp	r7, #120	@ 0x78
 8014eae:	4691      	mov	r9, r2
 8014eb0:	4680      	mov	r8, r0
 8014eb2:	460c      	mov	r4, r1
 8014eb4:	469a      	mov	sl, r3
 8014eb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014eba:	d807      	bhi.n	8014ecc <_printf_i+0x28>
 8014ebc:	2f62      	cmp	r7, #98	@ 0x62
 8014ebe:	d80a      	bhi.n	8014ed6 <_printf_i+0x32>
 8014ec0:	2f00      	cmp	r7, #0
 8014ec2:	f000 80d1 	beq.w	8015068 <_printf_i+0x1c4>
 8014ec6:	2f58      	cmp	r7, #88	@ 0x58
 8014ec8:	f000 80b8 	beq.w	801503c <_printf_i+0x198>
 8014ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014ed0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014ed4:	e03a      	b.n	8014f4c <_printf_i+0xa8>
 8014ed6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014eda:	2b15      	cmp	r3, #21
 8014edc:	d8f6      	bhi.n	8014ecc <_printf_i+0x28>
 8014ede:	a101      	add	r1, pc, #4	@ (adr r1, 8014ee4 <_printf_i+0x40>)
 8014ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014ee4:	08014f3d 	.word	0x08014f3d
 8014ee8:	08014f51 	.word	0x08014f51
 8014eec:	08014ecd 	.word	0x08014ecd
 8014ef0:	08014ecd 	.word	0x08014ecd
 8014ef4:	08014ecd 	.word	0x08014ecd
 8014ef8:	08014ecd 	.word	0x08014ecd
 8014efc:	08014f51 	.word	0x08014f51
 8014f00:	08014ecd 	.word	0x08014ecd
 8014f04:	08014ecd 	.word	0x08014ecd
 8014f08:	08014ecd 	.word	0x08014ecd
 8014f0c:	08014ecd 	.word	0x08014ecd
 8014f10:	0801504f 	.word	0x0801504f
 8014f14:	08014f7b 	.word	0x08014f7b
 8014f18:	08015009 	.word	0x08015009
 8014f1c:	08014ecd 	.word	0x08014ecd
 8014f20:	08014ecd 	.word	0x08014ecd
 8014f24:	08015071 	.word	0x08015071
 8014f28:	08014ecd 	.word	0x08014ecd
 8014f2c:	08014f7b 	.word	0x08014f7b
 8014f30:	08014ecd 	.word	0x08014ecd
 8014f34:	08014ecd 	.word	0x08014ecd
 8014f38:	08015011 	.word	0x08015011
 8014f3c:	6833      	ldr	r3, [r6, #0]
 8014f3e:	1d1a      	adds	r2, r3, #4
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	6032      	str	r2, [r6, #0]
 8014f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014f48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	e09c      	b.n	801508a <_printf_i+0x1e6>
 8014f50:	6833      	ldr	r3, [r6, #0]
 8014f52:	6820      	ldr	r0, [r4, #0]
 8014f54:	1d19      	adds	r1, r3, #4
 8014f56:	6031      	str	r1, [r6, #0]
 8014f58:	0606      	lsls	r6, r0, #24
 8014f5a:	d501      	bpl.n	8014f60 <_printf_i+0xbc>
 8014f5c:	681d      	ldr	r5, [r3, #0]
 8014f5e:	e003      	b.n	8014f68 <_printf_i+0xc4>
 8014f60:	0645      	lsls	r5, r0, #25
 8014f62:	d5fb      	bpl.n	8014f5c <_printf_i+0xb8>
 8014f64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014f68:	2d00      	cmp	r5, #0
 8014f6a:	da03      	bge.n	8014f74 <_printf_i+0xd0>
 8014f6c:	232d      	movs	r3, #45	@ 0x2d
 8014f6e:	426d      	negs	r5, r5
 8014f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014f74:	4858      	ldr	r0, [pc, #352]	@ (80150d8 <_printf_i+0x234>)
 8014f76:	230a      	movs	r3, #10
 8014f78:	e011      	b.n	8014f9e <_printf_i+0xfa>
 8014f7a:	6821      	ldr	r1, [r4, #0]
 8014f7c:	6833      	ldr	r3, [r6, #0]
 8014f7e:	0608      	lsls	r0, r1, #24
 8014f80:	f853 5b04 	ldr.w	r5, [r3], #4
 8014f84:	d402      	bmi.n	8014f8c <_printf_i+0xe8>
 8014f86:	0649      	lsls	r1, r1, #25
 8014f88:	bf48      	it	mi
 8014f8a:	b2ad      	uxthmi	r5, r5
 8014f8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8014f8e:	4852      	ldr	r0, [pc, #328]	@ (80150d8 <_printf_i+0x234>)
 8014f90:	6033      	str	r3, [r6, #0]
 8014f92:	bf14      	ite	ne
 8014f94:	230a      	movne	r3, #10
 8014f96:	2308      	moveq	r3, #8
 8014f98:	2100      	movs	r1, #0
 8014f9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014f9e:	6866      	ldr	r6, [r4, #4]
 8014fa0:	60a6      	str	r6, [r4, #8]
 8014fa2:	2e00      	cmp	r6, #0
 8014fa4:	db05      	blt.n	8014fb2 <_printf_i+0x10e>
 8014fa6:	6821      	ldr	r1, [r4, #0]
 8014fa8:	432e      	orrs	r6, r5
 8014faa:	f021 0104 	bic.w	r1, r1, #4
 8014fae:	6021      	str	r1, [r4, #0]
 8014fb0:	d04b      	beq.n	801504a <_printf_i+0x1a6>
 8014fb2:	4616      	mov	r6, r2
 8014fb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8014fb8:	fb03 5711 	mls	r7, r3, r1, r5
 8014fbc:	5dc7      	ldrb	r7, [r0, r7]
 8014fbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014fc2:	462f      	mov	r7, r5
 8014fc4:	42bb      	cmp	r3, r7
 8014fc6:	460d      	mov	r5, r1
 8014fc8:	d9f4      	bls.n	8014fb4 <_printf_i+0x110>
 8014fca:	2b08      	cmp	r3, #8
 8014fcc:	d10b      	bne.n	8014fe6 <_printf_i+0x142>
 8014fce:	6823      	ldr	r3, [r4, #0]
 8014fd0:	07df      	lsls	r7, r3, #31
 8014fd2:	d508      	bpl.n	8014fe6 <_printf_i+0x142>
 8014fd4:	6923      	ldr	r3, [r4, #16]
 8014fd6:	6861      	ldr	r1, [r4, #4]
 8014fd8:	4299      	cmp	r1, r3
 8014fda:	bfde      	ittt	le
 8014fdc:	2330      	movle	r3, #48	@ 0x30
 8014fde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014fe2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014fe6:	1b92      	subs	r2, r2, r6
 8014fe8:	6122      	str	r2, [r4, #16]
 8014fea:	f8cd a000 	str.w	sl, [sp]
 8014fee:	464b      	mov	r3, r9
 8014ff0:	aa03      	add	r2, sp, #12
 8014ff2:	4621      	mov	r1, r4
 8014ff4:	4640      	mov	r0, r8
 8014ff6:	f7ff fee7 	bl	8014dc8 <_printf_common>
 8014ffa:	3001      	adds	r0, #1
 8014ffc:	d14a      	bne.n	8015094 <_printf_i+0x1f0>
 8014ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8015002:	b004      	add	sp, #16
 8015004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015008:	6823      	ldr	r3, [r4, #0]
 801500a:	f043 0320 	orr.w	r3, r3, #32
 801500e:	6023      	str	r3, [r4, #0]
 8015010:	4832      	ldr	r0, [pc, #200]	@ (80150dc <_printf_i+0x238>)
 8015012:	2778      	movs	r7, #120	@ 0x78
 8015014:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015018:	6823      	ldr	r3, [r4, #0]
 801501a:	6831      	ldr	r1, [r6, #0]
 801501c:	061f      	lsls	r7, r3, #24
 801501e:	f851 5b04 	ldr.w	r5, [r1], #4
 8015022:	d402      	bmi.n	801502a <_printf_i+0x186>
 8015024:	065f      	lsls	r7, r3, #25
 8015026:	bf48      	it	mi
 8015028:	b2ad      	uxthmi	r5, r5
 801502a:	6031      	str	r1, [r6, #0]
 801502c:	07d9      	lsls	r1, r3, #31
 801502e:	bf44      	itt	mi
 8015030:	f043 0320 	orrmi.w	r3, r3, #32
 8015034:	6023      	strmi	r3, [r4, #0]
 8015036:	b11d      	cbz	r5, 8015040 <_printf_i+0x19c>
 8015038:	2310      	movs	r3, #16
 801503a:	e7ad      	b.n	8014f98 <_printf_i+0xf4>
 801503c:	4826      	ldr	r0, [pc, #152]	@ (80150d8 <_printf_i+0x234>)
 801503e:	e7e9      	b.n	8015014 <_printf_i+0x170>
 8015040:	6823      	ldr	r3, [r4, #0]
 8015042:	f023 0320 	bic.w	r3, r3, #32
 8015046:	6023      	str	r3, [r4, #0]
 8015048:	e7f6      	b.n	8015038 <_printf_i+0x194>
 801504a:	4616      	mov	r6, r2
 801504c:	e7bd      	b.n	8014fca <_printf_i+0x126>
 801504e:	6833      	ldr	r3, [r6, #0]
 8015050:	6825      	ldr	r5, [r4, #0]
 8015052:	6961      	ldr	r1, [r4, #20]
 8015054:	1d18      	adds	r0, r3, #4
 8015056:	6030      	str	r0, [r6, #0]
 8015058:	062e      	lsls	r6, r5, #24
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	d501      	bpl.n	8015062 <_printf_i+0x1be>
 801505e:	6019      	str	r1, [r3, #0]
 8015060:	e002      	b.n	8015068 <_printf_i+0x1c4>
 8015062:	0668      	lsls	r0, r5, #25
 8015064:	d5fb      	bpl.n	801505e <_printf_i+0x1ba>
 8015066:	8019      	strh	r1, [r3, #0]
 8015068:	2300      	movs	r3, #0
 801506a:	6123      	str	r3, [r4, #16]
 801506c:	4616      	mov	r6, r2
 801506e:	e7bc      	b.n	8014fea <_printf_i+0x146>
 8015070:	6833      	ldr	r3, [r6, #0]
 8015072:	1d1a      	adds	r2, r3, #4
 8015074:	6032      	str	r2, [r6, #0]
 8015076:	681e      	ldr	r6, [r3, #0]
 8015078:	6862      	ldr	r2, [r4, #4]
 801507a:	2100      	movs	r1, #0
 801507c:	4630      	mov	r0, r6
 801507e:	f7eb f8a7 	bl	80001d0 <memchr>
 8015082:	b108      	cbz	r0, 8015088 <_printf_i+0x1e4>
 8015084:	1b80      	subs	r0, r0, r6
 8015086:	6060      	str	r0, [r4, #4]
 8015088:	6863      	ldr	r3, [r4, #4]
 801508a:	6123      	str	r3, [r4, #16]
 801508c:	2300      	movs	r3, #0
 801508e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015092:	e7aa      	b.n	8014fea <_printf_i+0x146>
 8015094:	6923      	ldr	r3, [r4, #16]
 8015096:	4632      	mov	r2, r6
 8015098:	4649      	mov	r1, r9
 801509a:	4640      	mov	r0, r8
 801509c:	47d0      	blx	sl
 801509e:	3001      	adds	r0, #1
 80150a0:	d0ad      	beq.n	8014ffe <_printf_i+0x15a>
 80150a2:	6823      	ldr	r3, [r4, #0]
 80150a4:	079b      	lsls	r3, r3, #30
 80150a6:	d413      	bmi.n	80150d0 <_printf_i+0x22c>
 80150a8:	68e0      	ldr	r0, [r4, #12]
 80150aa:	9b03      	ldr	r3, [sp, #12]
 80150ac:	4298      	cmp	r0, r3
 80150ae:	bfb8      	it	lt
 80150b0:	4618      	movlt	r0, r3
 80150b2:	e7a6      	b.n	8015002 <_printf_i+0x15e>
 80150b4:	2301      	movs	r3, #1
 80150b6:	4632      	mov	r2, r6
 80150b8:	4649      	mov	r1, r9
 80150ba:	4640      	mov	r0, r8
 80150bc:	47d0      	blx	sl
 80150be:	3001      	adds	r0, #1
 80150c0:	d09d      	beq.n	8014ffe <_printf_i+0x15a>
 80150c2:	3501      	adds	r5, #1
 80150c4:	68e3      	ldr	r3, [r4, #12]
 80150c6:	9903      	ldr	r1, [sp, #12]
 80150c8:	1a5b      	subs	r3, r3, r1
 80150ca:	42ab      	cmp	r3, r5
 80150cc:	dcf2      	bgt.n	80150b4 <_printf_i+0x210>
 80150ce:	e7eb      	b.n	80150a8 <_printf_i+0x204>
 80150d0:	2500      	movs	r5, #0
 80150d2:	f104 0619 	add.w	r6, r4, #25
 80150d6:	e7f5      	b.n	80150c4 <_printf_i+0x220>
 80150d8:	08018106 	.word	0x08018106
 80150dc:	08018117 	.word	0x08018117

080150e0 <__sflush_r>:
 80150e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80150e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150e8:	0716      	lsls	r6, r2, #28
 80150ea:	4605      	mov	r5, r0
 80150ec:	460c      	mov	r4, r1
 80150ee:	d454      	bmi.n	801519a <__sflush_r+0xba>
 80150f0:	684b      	ldr	r3, [r1, #4]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	dc02      	bgt.n	80150fc <__sflush_r+0x1c>
 80150f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	dd48      	ble.n	801518e <__sflush_r+0xae>
 80150fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80150fe:	2e00      	cmp	r6, #0
 8015100:	d045      	beq.n	801518e <__sflush_r+0xae>
 8015102:	2300      	movs	r3, #0
 8015104:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015108:	682f      	ldr	r7, [r5, #0]
 801510a:	6a21      	ldr	r1, [r4, #32]
 801510c:	602b      	str	r3, [r5, #0]
 801510e:	d030      	beq.n	8015172 <__sflush_r+0x92>
 8015110:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015112:	89a3      	ldrh	r3, [r4, #12]
 8015114:	0759      	lsls	r1, r3, #29
 8015116:	d505      	bpl.n	8015124 <__sflush_r+0x44>
 8015118:	6863      	ldr	r3, [r4, #4]
 801511a:	1ad2      	subs	r2, r2, r3
 801511c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801511e:	b10b      	cbz	r3, 8015124 <__sflush_r+0x44>
 8015120:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015122:	1ad2      	subs	r2, r2, r3
 8015124:	2300      	movs	r3, #0
 8015126:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015128:	6a21      	ldr	r1, [r4, #32]
 801512a:	4628      	mov	r0, r5
 801512c:	47b0      	blx	r6
 801512e:	1c43      	adds	r3, r0, #1
 8015130:	89a3      	ldrh	r3, [r4, #12]
 8015132:	d106      	bne.n	8015142 <__sflush_r+0x62>
 8015134:	6829      	ldr	r1, [r5, #0]
 8015136:	291d      	cmp	r1, #29
 8015138:	d82b      	bhi.n	8015192 <__sflush_r+0xb2>
 801513a:	4a2a      	ldr	r2, [pc, #168]	@ (80151e4 <__sflush_r+0x104>)
 801513c:	40ca      	lsrs	r2, r1
 801513e:	07d6      	lsls	r6, r2, #31
 8015140:	d527      	bpl.n	8015192 <__sflush_r+0xb2>
 8015142:	2200      	movs	r2, #0
 8015144:	6062      	str	r2, [r4, #4]
 8015146:	04d9      	lsls	r1, r3, #19
 8015148:	6922      	ldr	r2, [r4, #16]
 801514a:	6022      	str	r2, [r4, #0]
 801514c:	d504      	bpl.n	8015158 <__sflush_r+0x78>
 801514e:	1c42      	adds	r2, r0, #1
 8015150:	d101      	bne.n	8015156 <__sflush_r+0x76>
 8015152:	682b      	ldr	r3, [r5, #0]
 8015154:	b903      	cbnz	r3, 8015158 <__sflush_r+0x78>
 8015156:	6560      	str	r0, [r4, #84]	@ 0x54
 8015158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801515a:	602f      	str	r7, [r5, #0]
 801515c:	b1b9      	cbz	r1, 801518e <__sflush_r+0xae>
 801515e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015162:	4299      	cmp	r1, r3
 8015164:	d002      	beq.n	801516c <__sflush_r+0x8c>
 8015166:	4628      	mov	r0, r5
 8015168:	f7ff fbec 	bl	8014944 <_free_r>
 801516c:	2300      	movs	r3, #0
 801516e:	6363      	str	r3, [r4, #52]	@ 0x34
 8015170:	e00d      	b.n	801518e <__sflush_r+0xae>
 8015172:	2301      	movs	r3, #1
 8015174:	4628      	mov	r0, r5
 8015176:	47b0      	blx	r6
 8015178:	4602      	mov	r2, r0
 801517a:	1c50      	adds	r0, r2, #1
 801517c:	d1c9      	bne.n	8015112 <__sflush_r+0x32>
 801517e:	682b      	ldr	r3, [r5, #0]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d0c6      	beq.n	8015112 <__sflush_r+0x32>
 8015184:	2b1d      	cmp	r3, #29
 8015186:	d001      	beq.n	801518c <__sflush_r+0xac>
 8015188:	2b16      	cmp	r3, #22
 801518a:	d11e      	bne.n	80151ca <__sflush_r+0xea>
 801518c:	602f      	str	r7, [r5, #0]
 801518e:	2000      	movs	r0, #0
 8015190:	e022      	b.n	80151d8 <__sflush_r+0xf8>
 8015192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015196:	b21b      	sxth	r3, r3
 8015198:	e01b      	b.n	80151d2 <__sflush_r+0xf2>
 801519a:	690f      	ldr	r7, [r1, #16]
 801519c:	2f00      	cmp	r7, #0
 801519e:	d0f6      	beq.n	801518e <__sflush_r+0xae>
 80151a0:	0793      	lsls	r3, r2, #30
 80151a2:	680e      	ldr	r6, [r1, #0]
 80151a4:	bf08      	it	eq
 80151a6:	694b      	ldreq	r3, [r1, #20]
 80151a8:	600f      	str	r7, [r1, #0]
 80151aa:	bf18      	it	ne
 80151ac:	2300      	movne	r3, #0
 80151ae:	eba6 0807 	sub.w	r8, r6, r7
 80151b2:	608b      	str	r3, [r1, #8]
 80151b4:	f1b8 0f00 	cmp.w	r8, #0
 80151b8:	dde9      	ble.n	801518e <__sflush_r+0xae>
 80151ba:	6a21      	ldr	r1, [r4, #32]
 80151bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80151be:	4643      	mov	r3, r8
 80151c0:	463a      	mov	r2, r7
 80151c2:	4628      	mov	r0, r5
 80151c4:	47b0      	blx	r6
 80151c6:	2800      	cmp	r0, #0
 80151c8:	dc08      	bgt.n	80151dc <__sflush_r+0xfc>
 80151ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80151d2:	81a3      	strh	r3, [r4, #12]
 80151d4:	f04f 30ff 	mov.w	r0, #4294967295
 80151d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151dc:	4407      	add	r7, r0
 80151de:	eba8 0800 	sub.w	r8, r8, r0
 80151e2:	e7e7      	b.n	80151b4 <__sflush_r+0xd4>
 80151e4:	20400001 	.word	0x20400001

080151e8 <_fflush_r>:
 80151e8:	b538      	push	{r3, r4, r5, lr}
 80151ea:	690b      	ldr	r3, [r1, #16]
 80151ec:	4605      	mov	r5, r0
 80151ee:	460c      	mov	r4, r1
 80151f0:	b913      	cbnz	r3, 80151f8 <_fflush_r+0x10>
 80151f2:	2500      	movs	r5, #0
 80151f4:	4628      	mov	r0, r5
 80151f6:	bd38      	pop	{r3, r4, r5, pc}
 80151f8:	b118      	cbz	r0, 8015202 <_fflush_r+0x1a>
 80151fa:	6a03      	ldr	r3, [r0, #32]
 80151fc:	b90b      	cbnz	r3, 8015202 <_fflush_r+0x1a>
 80151fe:	f7ff fa63 	bl	80146c8 <__sinit>
 8015202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d0f3      	beq.n	80151f2 <_fflush_r+0xa>
 801520a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801520c:	07d0      	lsls	r0, r2, #31
 801520e:	d404      	bmi.n	801521a <_fflush_r+0x32>
 8015210:	0599      	lsls	r1, r3, #22
 8015212:	d402      	bmi.n	801521a <_fflush_r+0x32>
 8015214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015216:	f7ff fb66 	bl	80148e6 <__retarget_lock_acquire_recursive>
 801521a:	4628      	mov	r0, r5
 801521c:	4621      	mov	r1, r4
 801521e:	f7ff ff5f 	bl	80150e0 <__sflush_r>
 8015222:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015224:	07da      	lsls	r2, r3, #31
 8015226:	4605      	mov	r5, r0
 8015228:	d4e4      	bmi.n	80151f4 <_fflush_r+0xc>
 801522a:	89a3      	ldrh	r3, [r4, #12]
 801522c:	059b      	lsls	r3, r3, #22
 801522e:	d4e1      	bmi.n	80151f4 <_fflush_r+0xc>
 8015230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015232:	f7ff fb59 	bl	80148e8 <__retarget_lock_release_recursive>
 8015236:	e7dd      	b.n	80151f4 <_fflush_r+0xc>

08015238 <fiprintf>:
 8015238:	b40e      	push	{r1, r2, r3}
 801523a:	b503      	push	{r0, r1, lr}
 801523c:	4601      	mov	r1, r0
 801523e:	ab03      	add	r3, sp, #12
 8015240:	4805      	ldr	r0, [pc, #20]	@ (8015258 <fiprintf+0x20>)
 8015242:	f853 2b04 	ldr.w	r2, [r3], #4
 8015246:	6800      	ldr	r0, [r0, #0]
 8015248:	9301      	str	r3, [sp, #4]
 801524a:	f7ff fca5 	bl	8014b98 <_vfiprintf_r>
 801524e:	b002      	add	sp, #8
 8015250:	f85d eb04 	ldr.w	lr, [sp], #4
 8015254:	b003      	add	sp, #12
 8015256:	4770      	bx	lr
 8015258:	200000a0 	.word	0x200000a0

0801525c <__swbuf_r>:
 801525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801525e:	460e      	mov	r6, r1
 8015260:	4614      	mov	r4, r2
 8015262:	4605      	mov	r5, r0
 8015264:	b118      	cbz	r0, 801526e <__swbuf_r+0x12>
 8015266:	6a03      	ldr	r3, [r0, #32]
 8015268:	b90b      	cbnz	r3, 801526e <__swbuf_r+0x12>
 801526a:	f7ff fa2d 	bl	80146c8 <__sinit>
 801526e:	69a3      	ldr	r3, [r4, #24]
 8015270:	60a3      	str	r3, [r4, #8]
 8015272:	89a3      	ldrh	r3, [r4, #12]
 8015274:	071a      	lsls	r2, r3, #28
 8015276:	d501      	bpl.n	801527c <__swbuf_r+0x20>
 8015278:	6923      	ldr	r3, [r4, #16]
 801527a:	b943      	cbnz	r3, 801528e <__swbuf_r+0x32>
 801527c:	4621      	mov	r1, r4
 801527e:	4628      	mov	r0, r5
 8015280:	f000 f82a 	bl	80152d8 <__swsetup_r>
 8015284:	b118      	cbz	r0, 801528e <__swbuf_r+0x32>
 8015286:	f04f 37ff 	mov.w	r7, #4294967295
 801528a:	4638      	mov	r0, r7
 801528c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801528e:	6823      	ldr	r3, [r4, #0]
 8015290:	6922      	ldr	r2, [r4, #16]
 8015292:	1a98      	subs	r0, r3, r2
 8015294:	6963      	ldr	r3, [r4, #20]
 8015296:	b2f6      	uxtb	r6, r6
 8015298:	4283      	cmp	r3, r0
 801529a:	4637      	mov	r7, r6
 801529c:	dc05      	bgt.n	80152aa <__swbuf_r+0x4e>
 801529e:	4621      	mov	r1, r4
 80152a0:	4628      	mov	r0, r5
 80152a2:	f7ff ffa1 	bl	80151e8 <_fflush_r>
 80152a6:	2800      	cmp	r0, #0
 80152a8:	d1ed      	bne.n	8015286 <__swbuf_r+0x2a>
 80152aa:	68a3      	ldr	r3, [r4, #8]
 80152ac:	3b01      	subs	r3, #1
 80152ae:	60a3      	str	r3, [r4, #8]
 80152b0:	6823      	ldr	r3, [r4, #0]
 80152b2:	1c5a      	adds	r2, r3, #1
 80152b4:	6022      	str	r2, [r4, #0]
 80152b6:	701e      	strb	r6, [r3, #0]
 80152b8:	6962      	ldr	r2, [r4, #20]
 80152ba:	1c43      	adds	r3, r0, #1
 80152bc:	429a      	cmp	r2, r3
 80152be:	d004      	beq.n	80152ca <__swbuf_r+0x6e>
 80152c0:	89a3      	ldrh	r3, [r4, #12]
 80152c2:	07db      	lsls	r3, r3, #31
 80152c4:	d5e1      	bpl.n	801528a <__swbuf_r+0x2e>
 80152c6:	2e0a      	cmp	r6, #10
 80152c8:	d1df      	bne.n	801528a <__swbuf_r+0x2e>
 80152ca:	4621      	mov	r1, r4
 80152cc:	4628      	mov	r0, r5
 80152ce:	f7ff ff8b 	bl	80151e8 <_fflush_r>
 80152d2:	2800      	cmp	r0, #0
 80152d4:	d0d9      	beq.n	801528a <__swbuf_r+0x2e>
 80152d6:	e7d6      	b.n	8015286 <__swbuf_r+0x2a>

080152d8 <__swsetup_r>:
 80152d8:	b538      	push	{r3, r4, r5, lr}
 80152da:	4b29      	ldr	r3, [pc, #164]	@ (8015380 <__swsetup_r+0xa8>)
 80152dc:	4605      	mov	r5, r0
 80152de:	6818      	ldr	r0, [r3, #0]
 80152e0:	460c      	mov	r4, r1
 80152e2:	b118      	cbz	r0, 80152ec <__swsetup_r+0x14>
 80152e4:	6a03      	ldr	r3, [r0, #32]
 80152e6:	b90b      	cbnz	r3, 80152ec <__swsetup_r+0x14>
 80152e8:	f7ff f9ee 	bl	80146c8 <__sinit>
 80152ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152f0:	0719      	lsls	r1, r3, #28
 80152f2:	d422      	bmi.n	801533a <__swsetup_r+0x62>
 80152f4:	06da      	lsls	r2, r3, #27
 80152f6:	d407      	bmi.n	8015308 <__swsetup_r+0x30>
 80152f8:	2209      	movs	r2, #9
 80152fa:	602a      	str	r2, [r5, #0]
 80152fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015300:	81a3      	strh	r3, [r4, #12]
 8015302:	f04f 30ff 	mov.w	r0, #4294967295
 8015306:	e033      	b.n	8015370 <__swsetup_r+0x98>
 8015308:	0758      	lsls	r0, r3, #29
 801530a:	d512      	bpl.n	8015332 <__swsetup_r+0x5a>
 801530c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801530e:	b141      	cbz	r1, 8015322 <__swsetup_r+0x4a>
 8015310:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015314:	4299      	cmp	r1, r3
 8015316:	d002      	beq.n	801531e <__swsetup_r+0x46>
 8015318:	4628      	mov	r0, r5
 801531a:	f7ff fb13 	bl	8014944 <_free_r>
 801531e:	2300      	movs	r3, #0
 8015320:	6363      	str	r3, [r4, #52]	@ 0x34
 8015322:	89a3      	ldrh	r3, [r4, #12]
 8015324:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015328:	81a3      	strh	r3, [r4, #12]
 801532a:	2300      	movs	r3, #0
 801532c:	6063      	str	r3, [r4, #4]
 801532e:	6923      	ldr	r3, [r4, #16]
 8015330:	6023      	str	r3, [r4, #0]
 8015332:	89a3      	ldrh	r3, [r4, #12]
 8015334:	f043 0308 	orr.w	r3, r3, #8
 8015338:	81a3      	strh	r3, [r4, #12]
 801533a:	6923      	ldr	r3, [r4, #16]
 801533c:	b94b      	cbnz	r3, 8015352 <__swsetup_r+0x7a>
 801533e:	89a3      	ldrh	r3, [r4, #12]
 8015340:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015348:	d003      	beq.n	8015352 <__swsetup_r+0x7a>
 801534a:	4621      	mov	r1, r4
 801534c:	4628      	mov	r0, r5
 801534e:	f000 f856 	bl	80153fe <__smakebuf_r>
 8015352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015356:	f013 0201 	ands.w	r2, r3, #1
 801535a:	d00a      	beq.n	8015372 <__swsetup_r+0x9a>
 801535c:	2200      	movs	r2, #0
 801535e:	60a2      	str	r2, [r4, #8]
 8015360:	6962      	ldr	r2, [r4, #20]
 8015362:	4252      	negs	r2, r2
 8015364:	61a2      	str	r2, [r4, #24]
 8015366:	6922      	ldr	r2, [r4, #16]
 8015368:	b942      	cbnz	r2, 801537c <__swsetup_r+0xa4>
 801536a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801536e:	d1c5      	bne.n	80152fc <__swsetup_r+0x24>
 8015370:	bd38      	pop	{r3, r4, r5, pc}
 8015372:	0799      	lsls	r1, r3, #30
 8015374:	bf58      	it	pl
 8015376:	6962      	ldrpl	r2, [r4, #20]
 8015378:	60a2      	str	r2, [r4, #8]
 801537a:	e7f4      	b.n	8015366 <__swsetup_r+0x8e>
 801537c:	2000      	movs	r0, #0
 801537e:	e7f7      	b.n	8015370 <__swsetup_r+0x98>
 8015380:	200000a0 	.word	0x200000a0

08015384 <_sbrk_r>:
 8015384:	b538      	push	{r3, r4, r5, lr}
 8015386:	4d06      	ldr	r5, [pc, #24]	@ (80153a0 <_sbrk_r+0x1c>)
 8015388:	2300      	movs	r3, #0
 801538a:	4604      	mov	r4, r0
 801538c:	4608      	mov	r0, r1
 801538e:	602b      	str	r3, [r5, #0]
 8015390:	f7ed f8b8 	bl	8002504 <_sbrk>
 8015394:	1c43      	adds	r3, r0, #1
 8015396:	d102      	bne.n	801539e <_sbrk_r+0x1a>
 8015398:	682b      	ldr	r3, [r5, #0]
 801539a:	b103      	cbz	r3, 801539e <_sbrk_r+0x1a>
 801539c:	6023      	str	r3, [r4, #0]
 801539e:	bd38      	pop	{r3, r4, r5, pc}
 80153a0:	2000b3a4 	.word	0x2000b3a4

080153a4 <abort>:
 80153a4:	b508      	push	{r3, lr}
 80153a6:	2006      	movs	r0, #6
 80153a8:	f000 f88e 	bl	80154c8 <raise>
 80153ac:	2001      	movs	r0, #1
 80153ae:	f7ed f831 	bl	8002414 <_exit>

080153b2 <__swhatbuf_r>:
 80153b2:	b570      	push	{r4, r5, r6, lr}
 80153b4:	460c      	mov	r4, r1
 80153b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153ba:	2900      	cmp	r1, #0
 80153bc:	b096      	sub	sp, #88	@ 0x58
 80153be:	4615      	mov	r5, r2
 80153c0:	461e      	mov	r6, r3
 80153c2:	da0d      	bge.n	80153e0 <__swhatbuf_r+0x2e>
 80153c4:	89a3      	ldrh	r3, [r4, #12]
 80153c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80153ca:	f04f 0100 	mov.w	r1, #0
 80153ce:	bf14      	ite	ne
 80153d0:	2340      	movne	r3, #64	@ 0x40
 80153d2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80153d6:	2000      	movs	r0, #0
 80153d8:	6031      	str	r1, [r6, #0]
 80153da:	602b      	str	r3, [r5, #0]
 80153dc:	b016      	add	sp, #88	@ 0x58
 80153de:	bd70      	pop	{r4, r5, r6, pc}
 80153e0:	466a      	mov	r2, sp
 80153e2:	f000 f879 	bl	80154d8 <_fstat_r>
 80153e6:	2800      	cmp	r0, #0
 80153e8:	dbec      	blt.n	80153c4 <__swhatbuf_r+0x12>
 80153ea:	9901      	ldr	r1, [sp, #4]
 80153ec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80153f0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80153f4:	4259      	negs	r1, r3
 80153f6:	4159      	adcs	r1, r3
 80153f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80153fc:	e7eb      	b.n	80153d6 <__swhatbuf_r+0x24>

080153fe <__smakebuf_r>:
 80153fe:	898b      	ldrh	r3, [r1, #12]
 8015400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015402:	079d      	lsls	r5, r3, #30
 8015404:	4606      	mov	r6, r0
 8015406:	460c      	mov	r4, r1
 8015408:	d507      	bpl.n	801541a <__smakebuf_r+0x1c>
 801540a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801540e:	6023      	str	r3, [r4, #0]
 8015410:	6123      	str	r3, [r4, #16]
 8015412:	2301      	movs	r3, #1
 8015414:	6163      	str	r3, [r4, #20]
 8015416:	b003      	add	sp, #12
 8015418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801541a:	ab01      	add	r3, sp, #4
 801541c:	466a      	mov	r2, sp
 801541e:	f7ff ffc8 	bl	80153b2 <__swhatbuf_r>
 8015422:	9f00      	ldr	r7, [sp, #0]
 8015424:	4605      	mov	r5, r0
 8015426:	4639      	mov	r1, r7
 8015428:	4630      	mov	r0, r6
 801542a:	f7ff faff 	bl	8014a2c <_malloc_r>
 801542e:	b948      	cbnz	r0, 8015444 <__smakebuf_r+0x46>
 8015430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015434:	059a      	lsls	r2, r3, #22
 8015436:	d4ee      	bmi.n	8015416 <__smakebuf_r+0x18>
 8015438:	f023 0303 	bic.w	r3, r3, #3
 801543c:	f043 0302 	orr.w	r3, r3, #2
 8015440:	81a3      	strh	r3, [r4, #12]
 8015442:	e7e2      	b.n	801540a <__smakebuf_r+0xc>
 8015444:	89a3      	ldrh	r3, [r4, #12]
 8015446:	6020      	str	r0, [r4, #0]
 8015448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801544c:	81a3      	strh	r3, [r4, #12]
 801544e:	9b01      	ldr	r3, [sp, #4]
 8015450:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015454:	b15b      	cbz	r3, 801546e <__smakebuf_r+0x70>
 8015456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801545a:	4630      	mov	r0, r6
 801545c:	f000 f84e 	bl	80154fc <_isatty_r>
 8015460:	b128      	cbz	r0, 801546e <__smakebuf_r+0x70>
 8015462:	89a3      	ldrh	r3, [r4, #12]
 8015464:	f023 0303 	bic.w	r3, r3, #3
 8015468:	f043 0301 	orr.w	r3, r3, #1
 801546c:	81a3      	strh	r3, [r4, #12]
 801546e:	89a3      	ldrh	r3, [r4, #12]
 8015470:	431d      	orrs	r5, r3
 8015472:	81a5      	strh	r5, [r4, #12]
 8015474:	e7cf      	b.n	8015416 <__smakebuf_r+0x18>

08015476 <_raise_r>:
 8015476:	291f      	cmp	r1, #31
 8015478:	b538      	push	{r3, r4, r5, lr}
 801547a:	4605      	mov	r5, r0
 801547c:	460c      	mov	r4, r1
 801547e:	d904      	bls.n	801548a <_raise_r+0x14>
 8015480:	2316      	movs	r3, #22
 8015482:	6003      	str	r3, [r0, #0]
 8015484:	f04f 30ff 	mov.w	r0, #4294967295
 8015488:	bd38      	pop	{r3, r4, r5, pc}
 801548a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801548c:	b112      	cbz	r2, 8015494 <_raise_r+0x1e>
 801548e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015492:	b94b      	cbnz	r3, 80154a8 <_raise_r+0x32>
 8015494:	4628      	mov	r0, r5
 8015496:	f000 f853 	bl	8015540 <_getpid_r>
 801549a:	4622      	mov	r2, r4
 801549c:	4601      	mov	r1, r0
 801549e:	4628      	mov	r0, r5
 80154a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154a4:	f000 b83a 	b.w	801551c <_kill_r>
 80154a8:	2b01      	cmp	r3, #1
 80154aa:	d00a      	beq.n	80154c2 <_raise_r+0x4c>
 80154ac:	1c59      	adds	r1, r3, #1
 80154ae:	d103      	bne.n	80154b8 <_raise_r+0x42>
 80154b0:	2316      	movs	r3, #22
 80154b2:	6003      	str	r3, [r0, #0]
 80154b4:	2001      	movs	r0, #1
 80154b6:	e7e7      	b.n	8015488 <_raise_r+0x12>
 80154b8:	2100      	movs	r1, #0
 80154ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80154be:	4620      	mov	r0, r4
 80154c0:	4798      	blx	r3
 80154c2:	2000      	movs	r0, #0
 80154c4:	e7e0      	b.n	8015488 <_raise_r+0x12>
	...

080154c8 <raise>:
 80154c8:	4b02      	ldr	r3, [pc, #8]	@ (80154d4 <raise+0xc>)
 80154ca:	4601      	mov	r1, r0
 80154cc:	6818      	ldr	r0, [r3, #0]
 80154ce:	f7ff bfd2 	b.w	8015476 <_raise_r>
 80154d2:	bf00      	nop
 80154d4:	200000a0 	.word	0x200000a0

080154d8 <_fstat_r>:
 80154d8:	b538      	push	{r3, r4, r5, lr}
 80154da:	4d07      	ldr	r5, [pc, #28]	@ (80154f8 <_fstat_r+0x20>)
 80154dc:	2300      	movs	r3, #0
 80154de:	4604      	mov	r4, r0
 80154e0:	4608      	mov	r0, r1
 80154e2:	4611      	mov	r1, r2
 80154e4:	602b      	str	r3, [r5, #0]
 80154e6:	f7ec ffe5 	bl	80024b4 <_fstat>
 80154ea:	1c43      	adds	r3, r0, #1
 80154ec:	d102      	bne.n	80154f4 <_fstat_r+0x1c>
 80154ee:	682b      	ldr	r3, [r5, #0]
 80154f0:	b103      	cbz	r3, 80154f4 <_fstat_r+0x1c>
 80154f2:	6023      	str	r3, [r4, #0]
 80154f4:	bd38      	pop	{r3, r4, r5, pc}
 80154f6:	bf00      	nop
 80154f8:	2000b3a4 	.word	0x2000b3a4

080154fc <_isatty_r>:
 80154fc:	b538      	push	{r3, r4, r5, lr}
 80154fe:	4d06      	ldr	r5, [pc, #24]	@ (8015518 <_isatty_r+0x1c>)
 8015500:	2300      	movs	r3, #0
 8015502:	4604      	mov	r4, r0
 8015504:	4608      	mov	r0, r1
 8015506:	602b      	str	r3, [r5, #0]
 8015508:	f7ec ffe4 	bl	80024d4 <_isatty>
 801550c:	1c43      	adds	r3, r0, #1
 801550e:	d102      	bne.n	8015516 <_isatty_r+0x1a>
 8015510:	682b      	ldr	r3, [r5, #0]
 8015512:	b103      	cbz	r3, 8015516 <_isatty_r+0x1a>
 8015514:	6023      	str	r3, [r4, #0]
 8015516:	bd38      	pop	{r3, r4, r5, pc}
 8015518:	2000b3a4 	.word	0x2000b3a4

0801551c <_kill_r>:
 801551c:	b538      	push	{r3, r4, r5, lr}
 801551e:	4d07      	ldr	r5, [pc, #28]	@ (801553c <_kill_r+0x20>)
 8015520:	2300      	movs	r3, #0
 8015522:	4604      	mov	r4, r0
 8015524:	4608      	mov	r0, r1
 8015526:	4611      	mov	r1, r2
 8015528:	602b      	str	r3, [r5, #0]
 801552a:	f7ec ff61 	bl	80023f0 <_kill>
 801552e:	1c43      	adds	r3, r0, #1
 8015530:	d102      	bne.n	8015538 <_kill_r+0x1c>
 8015532:	682b      	ldr	r3, [r5, #0]
 8015534:	b103      	cbz	r3, 8015538 <_kill_r+0x1c>
 8015536:	6023      	str	r3, [r4, #0]
 8015538:	bd38      	pop	{r3, r4, r5, pc}
 801553a:	bf00      	nop
 801553c:	2000b3a4 	.word	0x2000b3a4

08015540 <_getpid_r>:
 8015540:	f7ec bf4e 	b.w	80023e0 <_getpid>

08015544 <_init>:
 8015544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015546:	bf00      	nop
 8015548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801554a:	bc08      	pop	{r3}
 801554c:	469e      	mov	lr, r3
 801554e:	4770      	bx	lr

08015550 <_fini>:
 8015550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015552:	bf00      	nop
 8015554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015556:	bc08      	pop	{r3}
 8015558:	469e      	mov	lr, r3
 801555a:	4770      	bx	lr

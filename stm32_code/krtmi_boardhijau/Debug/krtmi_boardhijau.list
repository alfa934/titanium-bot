
krtmi_boardhijau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001510c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bcc  0801529c  0801529c  0001629c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017e68  08017e68  0001913c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017e68  08017e68  00018e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017e70  08017e70  0001913c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017e70  08017e70  00018e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017e74  08017e74  00018e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000013c  20000000  08017e78  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001913c  2**0
                  CONTENTS
 10 .bss          0000b374  2000013c  2000013c  0001913c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000b4b0  2000b4b0  0001913c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001913c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029cbe  00000000  00000000  0001916c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006ed8  00000000  00000000  00042e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002170  00000000  00000000  00049d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001aa9  00000000  00000000  0004be78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000334ba  00000000  00000000  0004d921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00037985  00000000  00000000  00080ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f690b  00000000  00000000  000b8760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001af06b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009280  00000000  00000000  001af0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  001b8330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000013c 	.word	0x2000013c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015284 	.word	0x08015284

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000140 	.word	0x20000140
 80001cc:	08015284 	.word	0x08015284

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ae:	4b21      	ldr	r3, [pc, #132]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005b0:	4a21      	ldr	r2, [pc, #132]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005dc:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005de:	4a17      	ldr	r2, [pc, #92]	@ (800063c <MX_ADC1_Init+0xa0>)
 80005e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fc:	480d      	ldr	r0, [pc, #52]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005fe:	f003 fc45 	bl	8003e8c <HAL_ADC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000608:	f001 f94a 	bl	80018a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800060c:	2304      	movs	r3, #4
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	@ (8000634 <MX_ADC1_Init+0x98>)
 800061e:	f003 fc79 	bl	8003f14 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000628:	f001 f93a 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000158 	.word	0x20000158
 8000638:	40012000 	.word	0x40012000
 800063c:	0f000001 	.word	0x0f000001

08000640 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	@ 0x30
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a31      	ldr	r2, [pc, #196]	@ (8000724 <HAL_ADC_MspInit+0xe4>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d15b      	bne.n	800071a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
 8000666:	4b30      	ldr	r3, [pc, #192]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066a:	4a2f      	ldr	r2, [pc, #188]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 800066c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000670:	6453      	str	r3, [r2, #68]	@ 0x44
 8000672:	4b2d      	ldr	r3, [pc, #180]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800067a:	61bb      	str	r3, [r7, #24]
 800067c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a28      	ldr	r2, [pc, #160]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a21      	ldr	r2, [pc, #132]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a1a      	ldr	r2, [pc, #104]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80006d2:	230d      	movs	r3, #13
 80006d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	4811      	ldr	r0, [pc, #68]	@ (800072c <HAL_ADC_MspInit+0xec>)
 80006e6:	f005 fd83 	bl	80061f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006ea:	2330      	movs	r3, #48	@ 0x30
 80006ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <HAL_ADC_MspInit+0xf0>)
 80006fe:	f005 fd77 	bl	80061f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000702:	2303      	movs	r3, #3
 8000704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	2303      	movs	r3, #3
 8000708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	4807      	ldr	r0, [pc, #28]	@ (8000734 <HAL_ADC_MspInit+0xf4>)
 8000716:	f005 fd6b 	bl	80061f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800071a:	bf00      	nop
 800071c:	3730      	adds	r7, #48	@ 0x30
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40012000 	.word	0x40012000
 8000728:	40023800 	.word	0x40023800
 800072c:	40020800 	.word	0x40020800
 8000730:	40020000 	.word	0x40020000
 8000734:	40020400 	.word	0x40020400

08000738 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800073c:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_CAN1_Init+0x60>)
 800073e:	4a17      	ldr	r2, [pc, #92]	@ (800079c <MX_CAN1_Init+0x64>)
 8000740:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000744:	2210      	movs	r2, #16
 8000746:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_CAN1_Init+0x60>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000754:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_CAN1_Init+0x60>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000760:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000762:	2200      	movs	r2, #0
 8000764:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000768:	2200      	movs	r2, #0
 800076a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_CAN1_Init+0x60>)
 800076e:	2200      	movs	r2, #0
 8000770:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000774:	2200      	movs	r2, #0
 8000776:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <MX_CAN1_Init+0x60>)
 800077a:	2200      	movs	r2, #0
 800077c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000780:	2200      	movs	r2, #0
 8000782:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000786:	f003 fde3 	bl	8004350 <HAL_CAN_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000790:	f001 f886 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001a0 	.word	0x200001a0
 800079c:	40006400 	.word	0x40006400

080007a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a19      	ldr	r2, [pc, #100]	@ (8000824 <HAL_CAN_MspInit+0x84>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d12c      	bne.n	800081c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <HAL_CAN_MspInit+0x88>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ca:	4a17      	ldr	r2, [pc, #92]	@ (8000828 <HAL_CAN_MspInit+0x88>)
 80007cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <HAL_CAN_MspInit+0x88>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <HAL_CAN_MspInit+0x88>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a10      	ldr	r2, [pc, #64]	@ (8000828 <HAL_CAN_MspInit+0x88>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <HAL_CAN_MspInit+0x88>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800080c:	2309      	movs	r3, #9
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <HAL_CAN_MspInit+0x8c>)
 8000818:	f005 fcea 	bl	80061f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	@ 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40006400 	.word	0x40006400
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000

08000830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b3f      	ldr	r3, [pc, #252]	@ (8000938 <MX_DMA_Init+0x108>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a3e      	ldr	r2, [pc, #248]	@ (8000938 <MX_DMA_Init+0x108>)
 8000840:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b3c      	ldr	r3, [pc, #240]	@ (8000938 <MX_DMA_Init+0x108>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b38      	ldr	r3, [pc, #224]	@ (8000938 <MX_DMA_Init+0x108>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a37      	ldr	r2, [pc, #220]	@ (8000938 <MX_DMA_Init+0x108>)
 800085c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b35      	ldr	r3, [pc, #212]	@ (8000938 <MX_DMA_Init+0x108>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	200b      	movs	r0, #11
 8000874:	f003 ff43 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000878:	200b      	movs	r0, #11
 800087a:	f003 ff5c 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	200c      	movs	r0, #12
 8000884:	f003 ff3b 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000888:	200c      	movs	r0, #12
 800088a:	f003 ff54 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	200d      	movs	r0, #13
 8000894:	f003 ff33 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000898:	200d      	movs	r0, #13
 800089a:	f003 ff4c 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	200e      	movs	r0, #14
 80008a4:	f003 ff2b 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80008a8:	200e      	movs	r0, #14
 80008aa:	f003 ff44 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	200f      	movs	r0, #15
 80008b4:	f003 ff23 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80008b8:	200f      	movs	r0, #15
 80008ba:	f003 ff3c 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	2010      	movs	r0, #16
 80008c4:	f003 ff1b 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008c8:	2010      	movs	r0, #16
 80008ca:	f003 ff34 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2011      	movs	r0, #17
 80008d4:	f003 ff13 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80008d8:	2011      	movs	r0, #17
 80008da:	f003 ff2c 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	202f      	movs	r0, #47	@ 0x2f
 80008e4:	f003 ff0b 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80008e8:	202f      	movs	r0, #47	@ 0x2f
 80008ea:	f003 ff24 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	2039      	movs	r0, #57	@ 0x39
 80008f4:	f003 ff03 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008f8:	2039      	movs	r0, #57	@ 0x39
 80008fa:	f003 ff1c 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	203a      	movs	r0, #58	@ 0x3a
 8000904:	f003 fefb 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000908:	203a      	movs	r0, #58	@ 0x3a
 800090a:	f003 ff14 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	2045      	movs	r0, #69	@ 0x45
 8000914:	f003 fef3 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000918:	2045      	movs	r0, #69	@ 0x45
 800091a:	f003 ff0c 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2046      	movs	r0, #70	@ 0x46
 8000924:	f003 feeb 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000928:	2046      	movs	r0, #70	@ 0x46
 800092a:	f003 ff04 	bl	8004736 <HAL_NVIC_EnableIRQ>

}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	@ 0x30
 8000940:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	4b50      	ldr	r3, [pc, #320]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a4f      	ldr	r2, [pc, #316]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b4d      	ldr	r3, [pc, #308]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	4b49      	ldr	r3, [pc, #292]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a48      	ldr	r2, [pc, #288]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b46      	ldr	r3, [pc, #280]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b42      	ldr	r3, [pc, #264]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a41      	ldr	r2, [pc, #260]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a3a      	ldr	r2, [pc, #232]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b38      	ldr	r3, [pc, #224]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b34      	ldr	r3, [pc, #208]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a33      	ldr	r2, [pc, #204]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b31      	ldr	r3, [pc, #196]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a2c      	ldr	r2, [pc, #176]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 80009fa:	2200      	movs	r2, #0
 80009fc:	f247 519f 	movw	r1, #30111	@ 0x759f
 8000a00:	4826      	ldr	r0, [pc, #152]	@ (8000a9c <MX_GPIO_Init+0x160>)
 8000a02:	f005 fda9 	bl	8006558 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8000a0c:	4824      	ldr	r0, [pc, #144]	@ (8000aa0 <MX_GPIO_Init+0x164>)
 8000a0e:	f005 fda3 	bl	8006558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 414d 	mov.w	r1, #52480	@ 0xcd00
 8000a18:	4822      	ldr	r0, [pc, #136]	@ (8000aa4 <MX_GPIO_Init+0x168>)
 8000a1a:	f005 fd9d 	bl	8006558 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE7
                           PE8 PE10 PE12 PE13
                           PE14 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 8000a1e:	f247 539f 	movw	r3, #30111	@ 0x759f
 8000a22:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4819      	ldr	r0, [pc, #100]	@ (8000a9c <MX_GPIO_Init+0x160>)
 8000a38:	f005 fbda 	bl	80061f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000a3c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4812      	ldr	r0, [pc, #72]	@ (8000aa0 <MX_GPIO_Init+0x164>)
 8000a56:	f005 fbcb 	bl	80061f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 PD11 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000a5a:	f44f 434d 	mov.w	r3, #52480	@ 0xcd00
 8000a5e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <MX_GPIO_Init+0x168>)
 8000a74:	f005 fbbc 	bl	80061f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000a78:	239b      	movs	r3, #155	@ 0x9b
 8000a7a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4806      	ldr	r0, [pc, #24]	@ (8000aa4 <MX_GPIO_Init+0x168>)
 8000a8c:	f005 fbb0 	bl	80061f0 <HAL_GPIO_Init>

}
 8000a90:	bf00      	nop
 8000a92:	3730      	adds	r7, #48	@ 0x30
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020c00 	.word	0x40020c00

08000aa8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000aae:	4a13      	ldr	r2, [pc, #76]	@ (8000afc <MX_I2C1_Init+0x54>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ab4:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <MX_I2C1_Init+0x58>)
 8000ab6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ac6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ae6:	f005 fd51 	bl	800658c <HAL_I2C_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af0:	f000 fed6 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200001c8 	.word	0x200001c8
 8000afc:	40005400 	.word	0x40005400
 8000b00:	000186a0 	.word	0x000186a0

08000b04 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b0a:	4a13      	ldr	r2, [pc, #76]	@ (8000b58 <MX_I2C3_Init+0x54>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b10:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <MX_I2C3_Init+0x58>)
 8000b12:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b26:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b42:	f005 fd23 	bl	800658c <HAL_I2C_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b4c:	f000 fea8 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000021c 	.word	0x2000021c
 8000b58:	40005c00 	.word	0x40005c00
 8000b5c:	000186a0 	.word	0x000186a0

08000b60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	@ 0x30
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a42      	ldr	r2, [pc, #264]	@ (8000c88 <HAL_I2C_MspInit+0x128>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d12c      	bne.n	8000bdc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
 8000b86:	4b41      	ldr	r3, [pc, #260]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a40      	ldr	r2, [pc, #256]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b3e      	ldr	r3, [pc, #248]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	61bb      	str	r3, [r7, #24]
 8000b9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b9e:	23c0      	movs	r3, #192	@ 0xc0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba2:	2312      	movs	r3, #18
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4835      	ldr	r0, [pc, #212]	@ (8000c90 <HAL_I2C_MspInit+0x130>)
 8000bba:	f005 fb19 	bl	80061f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	4b32      	ldr	r3, [pc, #200]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	4a31      	ldr	r2, [pc, #196]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000bc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bce:	4b2f      	ldr	r3, [pc, #188]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000bda:	e050      	b.n	8000c7e <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a2c      	ldr	r2, [pc, #176]	@ (8000c94 <HAL_I2C_MspInit+0x134>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d14b      	bne.n	8000c7e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b28      	ldr	r3, [pc, #160]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a27      	ldr	r2, [pc, #156]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b25      	ldr	r3, [pc, #148]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b21      	ldr	r3, [pc, #132]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a20      	ldr	r2, [pc, #128]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b1e      	ldr	r3, [pc, #120]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c24:	2312      	movs	r3, #18
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c30:	2304      	movs	r3, #4
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4817      	ldr	r0, [pc, #92]	@ (8000c98 <HAL_I2C_MspInit+0x138>)
 8000c3c:	f005 fad8 	bl	80061f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c46:	2312      	movs	r3, #18
 8000c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c52:	2304      	movs	r3, #4
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480f      	ldr	r0, [pc, #60]	@ (8000c9c <HAL_I2C_MspInit+0x13c>)
 8000c5e:	f005 fac7 	bl	80061f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000c6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
}
 8000c7e:	bf00      	nop
 8000c80:	3730      	adds	r7, #48	@ 0x30
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40005c00 	.word	0x40005c00
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ca4:	f3bf 8f4f 	dsb	sy
}
 8000ca8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <__NVIC_SystemReset+0x24>)
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000cb2:	4904      	ldr	r1, [pc, #16]	@ (8000cc4 <__NVIC_SystemReset+0x24>)
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <__NVIC_SystemReset+0x28>)
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cba:	f3bf 8f4f 	dsb	sy
}
 8000cbe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <__NVIC_SystemReset+0x20>
 8000cc4:	e000ed00 	.word	0xe000ed00
 8000cc8:	05fa0004 	.word	0x05fa0004

08000ccc <Robot_Init>:
//	vw = vw_controller;
//}


void Robot_Init()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af04      	add	r7, sp, #16
	Motor_Init(	&motorA,
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	9303      	str	r3, [sp, #12]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	9302      	str	r3, [sp, #8]
 8000cda:	4b4f      	ldr	r3, [pc, #316]	@ (8000e18 <Robot_Init+0x14c>)
 8000cdc:	9301      	str	r3, [sp, #4]
 8000cde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8000e1c <Robot_Init+0x150>)
 8000ce6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cea:	494c      	ldr	r1, [pc, #304]	@ (8000e1c <Robot_Init+0x150>)
 8000cec:	484c      	ldr	r0, [pc, #304]	@ (8000e20 <Robot_Init+0x154>)
 8000cee:	f000 fddd 	bl	80018ac <Motor_Init>
				GPIOC, GPIO_PIN_15,
				GPIOC, GPIO_PIN_13,
				&htim11, TIM_CHANNEL_1, 1);

	Motor_Init(	&motorB,
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	9303      	str	r3, [sp, #12]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9302      	str	r3, [sp, #8]
 8000cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8000e24 <Robot_Init+0x158>)
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	4b49      	ldr	r3, [pc, #292]	@ (8000e28 <Robot_Init+0x15c>)
 8000d04:	2208      	movs	r2, #8
 8000d06:	4948      	ldr	r1, [pc, #288]	@ (8000e28 <Robot_Init+0x15c>)
 8000d08:	4848      	ldr	r0, [pc, #288]	@ (8000e2c <Robot_Init+0x160>)
 8000d0a:	f000 fdcf 	bl	80018ac <Motor_Init>
				GPIOE, GPIO_PIN_3,
				GPIOE, GPIO_PIN_0,
				&htim10, TIM_CHANNEL_1, 0);

	Motor_Init(	&motorC,
 8000d0e:	2301      	movs	r3, #1
 8000d10:	9303      	str	r3, [sp, #12]
 8000d12:	2300      	movs	r3, #0
 8000d14:	9302      	str	r3, [sp, #8]
 8000d16:	4b46      	ldr	r3, [pc, #280]	@ (8000e30 <Robot_Init+0x164>)
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	4b44      	ldr	r3, [pc, #272]	@ (8000e34 <Robot_Init+0x168>)
 8000d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d26:	4943      	ldr	r1, [pc, #268]	@ (8000e34 <Robot_Init+0x168>)
 8000d28:	4843      	ldr	r0, [pc, #268]	@ (8000e38 <Robot_Init+0x16c>)
 8000d2a:	f000 fdbf 	bl	80018ac <Motor_Init>
				GPIOD, GPIO_PIN_10,
				GPIOD, GPIO_PIN_8,
				&htim12, TIM_CHANNEL_1, 1);

	Encoder_Init(&encA, &htim3, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4942      	ldr	r1, [pc, #264]	@ (8000e3c <Robot_Init+0x170>)
 8000d32:	4843      	ldr	r0, [pc, #268]	@ (8000e40 <Robot_Init+0x174>)
 8000d34:	f000 fe56 	bl	80019e4 <Encoder_Init>
	Encoder_Init(&encB, &htim4, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4942      	ldr	r1, [pc, #264]	@ (8000e44 <Robot_Init+0x178>)
 8000d3c:	4842      	ldr	r0, [pc, #264]	@ (8000e48 <Robot_Init+0x17c>)
 8000d3e:	f000 fe51 	bl	80019e4 <Encoder_Init>
	Encoder_Init(&encC, &htim2, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	4941      	ldr	r1, [pc, #260]	@ (8000e4c <Robot_Init+0x180>)
 8000d46:	4842      	ldr	r0, [pc, #264]	@ (8000e50 <Robot_Init+0x184>)
 8000d48:	f000 fe4c 	bl	80019e4 <Encoder_Init>

	kp = 45;
 8000d4c:	4b41      	ldr	r3, [pc, #260]	@ (8000e54 <Robot_Init+0x188>)
 8000d4e:	4a42      	ldr	r2, [pc, #264]	@ (8000e58 <Robot_Init+0x18c>)
 8000d50:	601a      	str	r2, [r3, #0]
	ki = 2.5;
 8000d52:	4b42      	ldr	r3, [pc, #264]	@ (8000e5c <Robot_Init+0x190>)
 8000d54:	4a42      	ldr	r2, [pc, #264]	@ (8000e60 <Robot_Init+0x194>)
 8000d56:	601a      	str	r2, [r3, #0]
	kd = 0;
 8000d58:	4b42      	ldr	r3, [pc, #264]	@ (8000e64 <Robot_Init+0x198>)
 8000d5a:	f04f 0200 	mov.w	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]

    PID_Init(&PID_A, kp, ki, kd);
 8000d60:	4b3c      	ldr	r3, [pc, #240]	@ (8000e54 <Robot_Init+0x188>)
 8000d62:	edd3 7a00 	vldr	s15, [r3]
 8000d66:	4b3d      	ldr	r3, [pc, #244]	@ (8000e5c <Robot_Init+0x190>)
 8000d68:	ed93 7a00 	vldr	s14, [r3]
 8000d6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e64 <Robot_Init+0x198>)
 8000d6e:	edd3 6a00 	vldr	s13, [r3]
 8000d72:	eeb0 1a66 	vmov.f32	s2, s13
 8000d76:	eef0 0a47 	vmov.f32	s1, s14
 8000d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7e:	483a      	ldr	r0, [pc, #232]	@ (8000e68 <Robot_Init+0x19c>)
 8000d80:	f000 fe76 	bl	8001a70 <PID_Init>
    PID_Init(&PID_B, kp, ki, kd);
 8000d84:	4b33      	ldr	r3, [pc, #204]	@ (8000e54 <Robot_Init+0x188>)
 8000d86:	edd3 7a00 	vldr	s15, [r3]
 8000d8a:	4b34      	ldr	r3, [pc, #208]	@ (8000e5c <Robot_Init+0x190>)
 8000d8c:	ed93 7a00 	vldr	s14, [r3]
 8000d90:	4b34      	ldr	r3, [pc, #208]	@ (8000e64 <Robot_Init+0x198>)
 8000d92:	edd3 6a00 	vldr	s13, [r3]
 8000d96:	eeb0 1a66 	vmov.f32	s2, s13
 8000d9a:	eef0 0a47 	vmov.f32	s1, s14
 8000d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000da2:	4832      	ldr	r0, [pc, #200]	@ (8000e6c <Robot_Init+0x1a0>)
 8000da4:	f000 fe64 	bl	8001a70 <PID_Init>
    PID_Init(&PID_C, kp, ki, kd);
 8000da8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e54 <Robot_Init+0x188>)
 8000daa:	edd3 7a00 	vldr	s15, [r3]
 8000dae:	4b2b      	ldr	r3, [pc, #172]	@ (8000e5c <Robot_Init+0x190>)
 8000db0:	ed93 7a00 	vldr	s14, [r3]
 8000db4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <Robot_Init+0x198>)
 8000db6:	edd3 6a00 	vldr	s13, [r3]
 8000dba:	eeb0 1a66 	vmov.f32	s2, s13
 8000dbe:	eef0 0a47 	vmov.f32	s1, s14
 8000dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc6:	482a      	ldr	r0, [pc, #168]	@ (8000e70 <Robot_Init+0x1a4>)
 8000dc8:	f000 fe52 	bl	8001a70 <PID_Init>

    HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8000dcc:	2235      	movs	r2, #53	@ 0x35
 8000dce:	4929      	ldr	r1, [pc, #164]	@ (8000e74 <Robot_Init+0x1a8>)
 8000dd0:	4829      	ldr	r0, [pc, #164]	@ (8000e78 <Robot_Init+0x1ac>)
 8000dd2:	f007 fac7 	bl	8008364 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
 8000dd6:	2217      	movs	r2, #23
 8000dd8:	4928      	ldr	r1, [pc, #160]	@ (8000e7c <Robot_Init+0x1b0>)
 8000dda:	4829      	ldr	r0, [pc, #164]	@ (8000e80 <Robot_Init+0x1b4>)
 8000ddc:	f007 fac2 	bl	8008364 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 8000de0:	222b      	movs	r2, #43	@ 0x2b
 8000de2:	4928      	ldr	r1, [pc, #160]	@ (8000e84 <Robot_Init+0x1b8>)
 8000de4:	4828      	ldr	r0, [pc, #160]	@ (8000e88 <Robot_Init+0x1bc>)
 8000de6:	f007 fabd 	bl	8008364 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 8000dea:	2235      	movs	r2, #53	@ 0x35
 8000dec:	4927      	ldr	r1, [pc, #156]	@ (8000e8c <Robot_Init+0x1c0>)
 8000dee:	4828      	ldr	r0, [pc, #160]	@ (8000e90 <Robot_Init+0x1c4>)
 8000df0:	f007 fab8 	bl	8008364 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 8000df4:	2217      	movs	r2, #23
 8000df6:	4927      	ldr	r1, [pc, #156]	@ (8000e94 <Robot_Init+0x1c8>)
 8000df8:	4827      	ldr	r0, [pc, #156]	@ (8000e98 <Robot_Init+0x1cc>)
 8000dfa:	f007 fab3 	bl	8008364 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 8000dfe:	2207      	movs	r2, #7
 8000e00:	4926      	ldr	r1, [pc, #152]	@ (8000e9c <Robot_Init+0x1d0>)
 8000e02:	4827      	ldr	r0, [pc, #156]	@ (8000ea0 <Robot_Init+0x1d4>)
 8000e04:	f007 faae 	bl	8008364 <HAL_UART_Receive_DMA>

	udpClient_connect();
 8000e08:	f002 f800 	bl	8002e0c <udpClient_connect>

	HAL_TIM_Base_Start_IT(&htim6);
 8000e0c:	4825      	ldr	r0, [pc, #148]	@ (8000ea4 <Robot_Init+0x1d8>)
 8000e0e:	f006 f9e9 	bl	80071e4 <HAL_TIM_Base_Start_IT>
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200006e4 	.word	0x200006e4
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	20000274 	.word	0x20000274
 8000e24:	2000069c 	.word	0x2000069c
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	20000290 	.word	0x20000290
 8000e30:	2000072c 	.word	0x2000072c
 8000e34:	40020c00 	.word	0x40020c00
 8000e38:	200002ac 	.word	0x200002ac
 8000e3c:	200004ec 	.word	0x200004ec
 8000e40:	200002c8 	.word	0x200002c8
 8000e44:	20000534 	.word	0x20000534
 8000e48:	200002d0 	.word	0x200002d0
 8000e4c:	200004a4 	.word	0x200004a4
 8000e50:	200002d8 	.word	0x200002d8
 8000e54:	20000370 	.word	0x20000370
 8000e58:	42340000 	.word	0x42340000
 8000e5c:	20000374 	.word	0x20000374
 8000e60:	40200000 	.word	0x40200000
 8000e64:	20000378 	.word	0x20000378
 8000e68:	200002e0 	.word	0x200002e0
 8000e6c:	20000310 	.word	0x20000310
 8000e70:	20000340 	.word	0x20000340
 8000e74:	2000037c 	.word	0x2000037c
 8000e78:	20000910 	.word	0x20000910
 8000e7c:	200003b4 	.word	0x200003b4
 8000e80:	20000958 	.word	0x20000958
 8000e84:	200003cc 	.word	0x200003cc
 8000e88:	200009a0 	.word	0x200009a0
 8000e8c:	200003f8 	.word	0x200003f8
 8000e90:	20000880 	.word	0x20000880
 8000e94:	20000430 	.word	0x20000430
 8000e98:	200008c8 	.word	0x200008c8
 8000e9c:	20000448 	.word	0x20000448
 8000ea0:	200009e8 	.word	0x200009e8
 8000ea4:	200005c4 	.word	0x200005c4

08000ea8 <Robot_Motor>:

void Robot_Motor()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	static uint16_t timer = 0;

	if(timer >= 9)
 8000eac:	4b4c      	ldr	r3, [pc, #304]	@ (8000fe0 <Robot_Motor+0x138>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	f240 808d 	bls.w	8000fd0 <Robot_Motor+0x128>
//		int16_t va = udp_rx.motor_a;
//		int16_t vb = udp_rx.motor_b;
//		int16_t vc = udp_rx.motor_c;


		Encoder_GetCount(&encA);
 8000eb6:	484b      	ldr	r0, [pc, #300]	@ (8000fe4 <Robot_Motor+0x13c>)
 8000eb8:	f000 fdab 	bl	8001a12 <Encoder_GetCount>
		Encoder_GetCount(&encB);
 8000ebc:	484a      	ldr	r0, [pc, #296]	@ (8000fe8 <Robot_Motor+0x140>)
 8000ebe:	f000 fda8 	bl	8001a12 <Encoder_GetCount>
		Encoder_GetCount(&encC);
 8000ec2:	484a      	ldr	r0, [pc, #296]	@ (8000fec <Robot_Motor+0x144>)
 8000ec4:	f000 fda5 	bl	8001a12 <Encoder_GetCount>

		/* Save UDP */
		udp_tx.enc_a = encA.count;
 8000ec8:	4b46      	ldr	r3, [pc, #280]	@ (8000fe4 <Robot_Motor+0x13c>)
 8000eca:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000ece:	4b48      	ldr	r3, [pc, #288]	@ (8000ff0 <Robot_Motor+0x148>)
 8000ed0:	801a      	strh	r2, [r3, #0]
		udp_tx.enc_b = encB.count;
 8000ed2:	4b45      	ldr	r3, [pc, #276]	@ (8000fe8 <Robot_Motor+0x140>)
 8000ed4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000ed8:	4b45      	ldr	r3, [pc, #276]	@ (8000ff0 <Robot_Motor+0x148>)
 8000eda:	805a      	strh	r2, [r3, #2]
		udp_tx.enc_c = encC.count;
 8000edc:	4b43      	ldr	r3, [pc, #268]	@ (8000fec <Robot_Motor+0x144>)
 8000ede:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000ee2:	4b43      	ldr	r3, [pc, #268]	@ (8000ff0 <Robot_Motor+0x148>)
 8000ee4:	809a      	strh	r2, [r3, #4]

		Encoder_ResetCount(&encA);
 8000ee6:	483f      	ldr	r0, [pc, #252]	@ (8000fe4 <Robot_Motor+0x13c>)
 8000ee8:	f000 fdb3 	bl	8001a52 <Encoder_ResetCount>
		Encoder_ResetCount(&encB);
 8000eec:	483e      	ldr	r0, [pc, #248]	@ (8000fe8 <Robot_Motor+0x140>)
 8000eee:	f000 fdb0 	bl	8001a52 <Encoder_ResetCount>
		Encoder_ResetCount(&encC);
 8000ef2:	483e      	ldr	r0, [pc, #248]	@ (8000fec <Robot_Motor+0x144>)
 8000ef4:	f000 fdad 	bl	8001a52 <Encoder_ResetCount>

		PID_Update(&PID_A, udp_rx.motorA_setpoint, (float)encA.count, 999);
 8000ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ff4 <Robot_Motor+0x14c>)
 8000efa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000efe:	ee07 3a90 	vmov	s15, r3
 8000f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f06:	4b37      	ldr	r3, [pc, #220]	@ (8000fe4 <Robot_Motor+0x13c>)
 8000f08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f0c:	ee07 3a10 	vmov	s14, r3
 8000f10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f14:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 8000ff8 <Robot_Motor+0x150>
 8000f18:	eef0 0a47 	vmov.f32	s1, s14
 8000f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f20:	4836      	ldr	r0, [pc, #216]	@ (8000ffc <Robot_Motor+0x154>)
 8000f22:	f000 fde2 	bl	8001aea <PID_Update>
		PID_Update(&PID_B, udp_rx.motorB_setpoint, (float)encB.count, 999);
 8000f26:	4b33      	ldr	r3, [pc, #204]	@ (8000ff4 <Robot_Motor+0x14c>)
 8000f28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f34:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe8 <Robot_Motor+0x140>)
 8000f36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f3a:	ee07 3a10 	vmov	s14, r3
 8000f3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f42:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 8000ff8 <Robot_Motor+0x150>
 8000f46:	eef0 0a47 	vmov.f32	s1, s14
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	482c      	ldr	r0, [pc, #176]	@ (8001000 <Robot_Motor+0x158>)
 8000f50:	f000 fdcb 	bl	8001aea <PID_Update>
		PID_Update(&PID_C, udp_rx.motorC_setpoint, (float)encC.count, 999);
 8000f54:	4b27      	ldr	r3, [pc, #156]	@ (8000ff4 <Robot_Motor+0x14c>)
 8000f56:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f62:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <Robot_Motor+0x144>)
 8000f64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f68:	ee07 3a10 	vmov	s14, r3
 8000f6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f70:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 8000ff8 <Robot_Motor+0x150>
 8000f74:	eef0 0a47 	vmov.f32	s1, s14
 8000f78:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7c:	4821      	ldr	r0, [pc, #132]	@ (8001004 <Robot_Motor+0x15c>)
 8000f7e:	f000 fdb4 	bl	8001aea <PID_Update>

		Motor_Run(&motorA, (int16_t)PID_A.output);
 8000f82:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <Robot_Motor+0x154>)
 8000f84:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f8c:	ee17 3a90 	vmov	r3, s15
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4619      	mov	r1, r3
 8000f94:	481c      	ldr	r0, [pc, #112]	@ (8001008 <Robot_Motor+0x160>)
 8000f96:	f000 fcb3 	bl	8001900 <Motor_Run>
		Motor_Run(&motorB, (int16_t)PID_B.output);
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <Robot_Motor+0x158>)
 8000f9c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa4:	ee17 3a90 	vmov	r3, s15
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4619      	mov	r1, r3
 8000fac:	4817      	ldr	r0, [pc, #92]	@ (800100c <Robot_Motor+0x164>)
 8000fae:	f000 fca7 	bl	8001900 <Motor_Run>
		Motor_Run(&motorC, (int16_t)PID_C.output);
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <Robot_Motor+0x15c>)
 8000fb4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fbc:	ee17 3a90 	vmov	r3, s15
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4812      	ldr	r0, [pc, #72]	@ (8001010 <Robot_Motor+0x168>)
 8000fc6:	f000 fc9b 	bl	8001900 <Motor_Run>

		timer = 0;
 8000fca:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <Robot_Motor+0x138>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	801a      	strh	r2, [r3, #0]
	}

	timer++;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	@ (8000fe0 <Robot_Motor+0x138>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	4b01      	ldr	r3, [pc, #4]	@ (8000fe0 <Robot_Motor+0x138>)
 8000fda:	801a      	strh	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000450 	.word	0x20000450
 8000fe4:	200002c8 	.word	0x200002c8
 8000fe8:	200002d0 	.word	0x200002d0
 8000fec:	200002d8 	.word	0x200002d8
 8000ff0:	200007c8 	.word	0x200007c8
 8000ff4:	20000810 	.word	0x20000810
 8000ff8:	4479c000 	.word	0x4479c000
 8000ffc:	200002e0 	.word	0x200002e0
 8001000:	20000310 	.word	0x20000310
 8001004:	20000340 	.word	0x20000340
 8001008:	20000274 	.word	0x20000274
 800100c:	20000290 	.word	0x20000290
 8001010:	200002ac 	.word	0x200002ac

08001014 <Robot_LED_Blink>:

void Robot_LED_Blink()
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	static uint16_t timer = 0;
	static uint8_t state = 0;

	if(timer >= 99)
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <Robot_LED_Blink+0x44>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	2b62      	cmp	r3, #98	@ 0x62
 800101e:	d913      	bls.n	8001048 <Robot_LED_Blink+0x34>
	{
		state = !(state);
 8001020:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <Robot_LED_Blink+0x48>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf0c      	ite	eq
 8001028:	2301      	moveq	r3, #1
 800102a:	2300      	movne	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	461a      	mov	r2, r3
 8001030:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <Robot_LED_Blink+0x48>)
 8001032:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, state);
 8001034:	4b09      	ldr	r3, [pc, #36]	@ (800105c <Robot_LED_Blink+0x48>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	2102      	movs	r1, #2
 800103c:	4808      	ldr	r0, [pc, #32]	@ (8001060 <Robot_LED_Blink+0x4c>)
 800103e:	f005 fa8b 	bl	8006558 <HAL_GPIO_WritePin>
		timer = 0;
 8001042:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <Robot_LED_Blink+0x44>)
 8001044:	2200      	movs	r2, #0
 8001046:	801a      	strh	r2, [r3, #0]
	}

	timer++;
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <Robot_LED_Blink+0x44>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b01      	ldr	r3, [pc, #4]	@ (8001058 <Robot_LED_Blink+0x44>)
 8001052:	801a      	strh	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000452 	.word	0x20000452
 800105c:	20000454 	.word	0x20000454
 8001060:	40021000 	.word	0x40021000

08001064 <Robot_Transmit_UART>:

void Robot_Transmit_UART()
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	//--- VGT ARM
	memcpy(UART1_TX_BUFFER + 3, &udp_rx.robot_start, 1);
 8001068:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <Robot_Transmit_UART+0x44>)
 800106a:	4a10      	ldr	r2, [pc, #64]	@ (80010ac <Robot_Transmit_UART+0x48>)
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	701a      	strb	r2, [r3, #0]
	memcpy(UART1_TX_BUFFER + 4, &udp_rx.robot_reset, 1);
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <Robot_Transmit_UART+0x4c>)
 8001072:	4a0e      	ldr	r2, [pc, #56]	@ (80010ac <Robot_Transmit_UART+0x48>)
 8001074:	7852      	ldrb	r2, [r2, #1]
 8001076:	701a      	strb	r2, [r3, #0]
	memcpy(UART1_TX_BUFFER + 5, &udp_rx.relay_state, 1);
 8001078:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <Robot_Transmit_UART+0x50>)
 800107a:	4a0c      	ldr	r2, [pc, #48]	@ (80010ac <Robot_Transmit_UART+0x48>)
 800107c:	7b92      	ldrb	r2, [r2, #14]
 800107e:	701a      	strb	r2, [r3, #0]
	memcpy(UART1_TX_BUFFER + 6, &udp_rx.rotation_setpoint, 2);
 8001080:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <Robot_Transmit_UART+0x54>)
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <Robot_Transmit_UART+0x48>)
 8001084:	891b      	ldrh	r3, [r3, #8]
 8001086:	8013      	strh	r3, [r2, #0]
	memcpy(UART1_TX_BUFFER + 8, &udp_rx.horizontal_setpoint, 2);
 8001088:	4a0c      	ldr	r2, [pc, #48]	@ (80010bc <Robot_Transmit_UART+0x58>)
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <Robot_Transmit_UART+0x48>)
 800108c:	895b      	ldrh	r3, [r3, #10]
 800108e:	8013      	strh	r3, [r2, #0]
	memcpy(UART1_TX_BUFFER + 10, &udp_rx.vertical_setpoint, 2);
 8001090:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <Robot_Transmit_UART+0x5c>)
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <Robot_Transmit_UART+0x48>)
 8001094:	899b      	ldrh	r3, [r3, #12]
 8001096:	8013      	strh	r3, [r2, #0]

	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)UART1_TX_BUFFER, sizeof(UART1_TX_BUFFER));
 8001098:	2235      	movs	r2, #53	@ 0x35
 800109a:	490a      	ldr	r1, [pc, #40]	@ (80010c4 <Robot_Transmit_UART+0x60>)
 800109c:	480a      	ldr	r0, [pc, #40]	@ (80010c8 <Robot_Transmit_UART+0x64>)
 800109e:	f007 f8e5 	bl	800826c <HAL_UART_Transmit_DMA>
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000003 	.word	0x20000003
 80010ac:	20000810 	.word	0x20000810
 80010b0:	20000004 	.word	0x20000004
 80010b4:	20000005 	.word	0x20000005
 80010b8:	20000006 	.word	0x20000006
 80010bc:	20000008 	.word	0x20000008
 80010c0:	2000000a 	.word	0x2000000a
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000910 	.word	0x20000910

080010cc <Read_Buttons>:

void Read_Buttons()
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	udp_tx.start_button = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);
 80010d0:	2101      	movs	r1, #1
 80010d2:	4816      	ldr	r0, [pc, #88]	@ (800112c <Read_Buttons+0x60>)
 80010d4:	f005 fa28 	bl	8006528 <HAL_GPIO_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <Read_Buttons+0x64>)
 80010de:	779a      	strb	r2, [r3, #30]
	udp_tx.reset_button = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 80010e0:	2102      	movs	r1, #2
 80010e2:	4812      	ldr	r0, [pc, #72]	@ (800112c <Read_Buttons+0x60>)
 80010e4:	f005 fa20 	bl	8006528 <HAL_GPIO_ReadPin>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <Read_Buttons+0x64>)
 80010ee:	77da      	strb	r2, [r3, #31]
	udp_tx.buttons[0] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 80010f0:	2110      	movs	r1, #16
 80010f2:	480e      	ldr	r0, [pc, #56]	@ (800112c <Read_Buttons+0x60>)
 80010f4:	f005 fa18 	bl	8006528 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <Read_Buttons+0x64>)
 80010fe:	f883 2020 	strb.w	r2, [r3, #32]
	udp_tx.buttons[1] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7);
 8001102:	2180      	movs	r1, #128	@ 0x80
 8001104:	4809      	ldr	r0, [pc, #36]	@ (800112c <Read_Buttons+0x60>)
 8001106:	f005 fa0f 	bl	8006528 <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <Read_Buttons+0x64>)
 8001110:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	udp_tx.buttons[2] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3);
 8001114:	2108      	movs	r1, #8
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <Read_Buttons+0x60>)
 8001118:	f005 fa06 	bl	8006528 <HAL_GPIO_ReadPin>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <Read_Buttons+0x64>)
 8001122:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40020c00 	.word	0x40020c00
 8001130:	200007c8 	.word	0x200007c8

08001134 <Robot_Loop>:

void Robot_Loop()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	if(udp_rx.robot_reset)
 8001138:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <Robot_Loop+0x30>)
 800113a:	785b      	ldrb	r3, [r3, #1]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <Robot_Loop+0x10>
	{
		NVIC_SystemReset();
 8001140:	f7ff fdae 	bl	8000ca0 <__NVIC_SystemReset>
	}

	Read_Buttons();
 8001144:	f7ff ffc2 	bl	80010cc <Read_Buttons>

	Robot_Transmit_UART();
 8001148:	f7ff ff8c 	bl	8001064 <Robot_Transmit_UART>

	Robot_Motor();
 800114c:	f7ff feac 	bl	8000ea8 <Robot_Motor>

	Robot_LED_Blink();
 8001150:	f7ff ff60 	bl	8001014 <Robot_LED_Blink>

	udp_cnt++;
 8001154:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <Robot_Loop+0x34>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b02      	ldr	r3, [pc, #8]	@ (8001168 <Robot_Loop+0x34>)
 800115e:	701a      	strb	r2, [r3, #0]
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000810 	.word	0x20000810
 8001168:	20000270 	.word	0x20000270

0800116c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

	if(htim == &htim6)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d101      	bne.n	8001180 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		Robot_Loop();
 800117c:	f7ff ffda 	bl	8001134 <Robot_Loop>
	}
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200005c4 	.word	0x200005c4

0800118c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //--- VGT ARM
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a96      	ldr	r2, [pc, #600]	@ (80013f0 <HAL_UART_RxCpltCallback+0x264>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d131      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x74>
	{
		if(UART1_RX_BUFFER[0] == 'A' && UART1_RX_BUFFER[1] == 'B' && UART1_RX_BUFFER[2] == 'C')
 800119c:	4b95      	ldr	r3, [pc, #596]	@ (80013f4 <HAL_UART_RxCpltCallback+0x268>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b41      	cmp	r3, #65	@ 0x41
 80011a2:	d128      	bne.n	80011f6 <HAL_UART_RxCpltCallback+0x6a>
 80011a4:	4b93      	ldr	r3, [pc, #588]	@ (80013f4 <HAL_UART_RxCpltCallback+0x268>)
 80011a6:	785b      	ldrb	r3, [r3, #1]
 80011a8:	2b42      	cmp	r3, #66	@ 0x42
 80011aa:	d124      	bne.n	80011f6 <HAL_UART_RxCpltCallback+0x6a>
 80011ac:	4b91      	ldr	r3, [pc, #580]	@ (80013f4 <HAL_UART_RxCpltCallback+0x268>)
 80011ae:	789b      	ldrb	r3, [r3, #2]
 80011b0:	2b43      	cmp	r3, #67	@ 0x43
 80011b2:	d120      	bne.n	80011f6 <HAL_UART_RxCpltCallback+0x6a>
		{
			/* Save UDP */
			memcpy(&udp_tx.buttons[3], UART1_RX_BUFFER + 3, 1);
 80011b4:	4b90      	ldr	r3, [pc, #576]	@ (80013f8 <HAL_UART_RxCpltCallback+0x26c>)
 80011b6:	781a      	ldrb	r2, [r3, #0]
 80011b8:	4b90      	ldr	r3, [pc, #576]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80011ba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			memcpy(&udp_tx.buttons[4], UART1_RX_BUFFER + 4, 1);
 80011be:	4b90      	ldr	r3, [pc, #576]	@ (8001400 <HAL_UART_RxCpltCallback+0x274>)
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	4b8e      	ldr	r3, [pc, #568]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80011c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			memcpy(&udp_tx.lim2, UART1_RX_BUFFER + 5, 1);
 80011c8:	4b8e      	ldr	r3, [pc, #568]	@ (8001404 <HAL_UART_RxCpltCallback+0x278>)
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	4b8b      	ldr	r3, [pc, #556]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80011ce:	771a      	strb	r2, [r3, #28]
			memcpy(&udp_tx.lim3, UART1_RX_BUFFER + 6, 1);
 80011d0:	4b8d      	ldr	r3, [pc, #564]	@ (8001408 <HAL_UART_RxCpltCallback+0x27c>)
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	4b89      	ldr	r3, [pc, #548]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80011d6:	775a      	strb	r2, [r3, #29]
			memcpy(&udp_tx.enc_1, UART1_RX_BUFFER + 7, 2);
 80011d8:	4b8c      	ldr	r3, [pc, #560]	@ (800140c <HAL_UART_RxCpltCallback+0x280>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b87      	ldr	r3, [pc, #540]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80011e0:	815a      	strh	r2, [r3, #10]
			memcpy(&udp_tx.enc_2, UART1_RX_BUFFER + 9, 2);
 80011e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001410 <HAL_UART_RxCpltCallback+0x284>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b84      	ldr	r3, [pc, #528]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80011ea:	819a      	strh	r2, [r3, #12]
			memcpy(&udp_tx.enc_3, UART1_RX_BUFFER + 11, 2);
 80011ec:	4b89      	ldr	r3, [pc, #548]	@ (8001414 <HAL_UART_RxCpltCallback+0x288>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	4b82      	ldr	r3, [pc, #520]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80011f4:	81da      	strh	r2, [r3, #14]
		}
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 80011f6:	2235      	movs	r2, #53	@ 0x35
 80011f8:	497e      	ldr	r1, [pc, #504]	@ (80013f4 <HAL_UART_RxCpltCallback+0x268>)
 80011fa:	487d      	ldr	r0, [pc, #500]	@ (80013f0 <HAL_UART_RxCpltCallback+0x264>)
 80011fc:	f007 f8b2 	bl	8008364 <HAL_UART_Receive_DMA>
//		udp_tx.yaw_degree = yaw_degree;
//
//		HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
//	}

	if(huart == &huart3)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a85      	ldr	r2, [pc, #532]	@ (8001418 <HAL_UART_RxCpltCallback+0x28c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	f040 80a9 	bne.w	800135c <HAL_UART_RxCpltCallback+0x1d0>
	{
		if(UART3_RX_BUFFER[0] == 'A' && UART3_RX_BUFFER[1] == 'B' && UART3_RX_BUFFER[2] == 'C')
 800120a:	4b84      	ldr	r3, [pc, #528]	@ (800141c <HAL_UART_RxCpltCallback+0x290>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b41      	cmp	r3, #65	@ 0x41
 8001210:	f040 809f 	bne.w	8001352 <HAL_UART_RxCpltCallback+0x1c6>
 8001214:	4b81      	ldr	r3, [pc, #516]	@ (800141c <HAL_UART_RxCpltCallback+0x290>)
 8001216:	785b      	ldrb	r3, [r3, #1]
 8001218:	2b42      	cmp	r3, #66	@ 0x42
 800121a:	f040 809a 	bne.w	8001352 <HAL_UART_RxCpltCallback+0x1c6>
 800121e:	4b7f      	ldr	r3, [pc, #508]	@ (800141c <HAL_UART_RxCpltCallback+0x290>)
 8001220:	789b      	ldrb	r3, [r3, #2]
 8001222:	2b43      	cmp	r3, #67	@ 0x43
 8001224:	f040 8095 	bne.w	8001352 <HAL_UART_RxCpltCallback+0x1c6>
		{
			/* Save UDP */
			memcpy(&udp_tx.rX, UART3_RX_BUFFER + 3, 1);
 8001228:	4b7d      	ldr	r3, [pc, #500]	@ (8001420 <HAL_UART_RxCpltCallback+0x294>)
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	4b73      	ldr	r3, [pc, #460]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 800122e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			memcpy(&udp_tx.rY, UART3_RX_BUFFER + 4, 1);
 8001232:	4b7c      	ldr	r3, [pc, #496]	@ (8001424 <HAL_UART_RxCpltCallback+0x298>)
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	4b71      	ldr	r3, [pc, #452]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 8001238:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			memcpy(&udp_tx.lX, UART3_RX_BUFFER + 5, 1);
 800123c:	4b7a      	ldr	r3, [pc, #488]	@ (8001428 <HAL_UART_RxCpltCallback+0x29c>)
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	4b6e      	ldr	r3, [pc, #440]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 8001242:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			memcpy(&udp_tx.lY, UART3_RX_BUFFER + 6, 1);
 8001246:	4b79      	ldr	r3, [pc, #484]	@ (800142c <HAL_UART_RxCpltCallback+0x2a0>)
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	4b6c      	ldr	r3, [pc, #432]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 800124c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			memcpy(&udp_tx.r2, UART3_RX_BUFFER + 7, 1);
 8001250:	4b77      	ldr	r3, [pc, #476]	@ (8001430 <HAL_UART_RxCpltCallback+0x2a4>)
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	4b69      	ldr	r3, [pc, #420]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 8001256:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			memcpy(&udp_tx.l2, UART3_RX_BUFFER + 8, 1);
 800125a:	4b76      	ldr	r3, [pc, #472]	@ (8001434 <HAL_UART_RxCpltCallback+0x2a8>)
 800125c:	781a      	ldrb	r2, [r3, #0]
 800125e:	4b67      	ldr	r3, [pc, #412]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 8001260:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			memcpy(&udp_tx.r1, UART3_RX_BUFFER + 9, 1);
 8001264:	4b74      	ldr	r3, [pc, #464]	@ (8001438 <HAL_UART_RxCpltCallback+0x2ac>)
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	4b64      	ldr	r3, [pc, #400]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 800126a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			memcpy(&udp_tx.l1, UART3_RX_BUFFER + 10, 1);
 800126e:	4b73      	ldr	r3, [pc, #460]	@ (800143c <HAL_UART_RxCpltCallback+0x2b0>)
 8001270:	781a      	ldrb	r2, [r3, #0]
 8001272:	4b62      	ldr	r3, [pc, #392]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 8001274:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			memcpy(&udp_tx.r3, UART3_RX_BUFFER + 11, 1);
 8001278:	4b71      	ldr	r3, [pc, #452]	@ (8001440 <HAL_UART_RxCpltCallback+0x2b4>)
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	4b5f      	ldr	r3, [pc, #380]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 800127e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			memcpy(&udp_tx.l3, UART3_RX_BUFFER + 12, 1);
 8001282:	4b70      	ldr	r3, [pc, #448]	@ (8001444 <HAL_UART_RxCpltCallback+0x2b8>)
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	4b5d      	ldr	r3, [pc, #372]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 8001288:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

			memcpy(&udp_tx.crs, UART3_RX_BUFFER + 13, 1);
 800128c:	4b6e      	ldr	r3, [pc, #440]	@ (8001448 <HAL_UART_RxCpltCallback+0x2bc>)
 800128e:	781a      	ldrb	r2, [r3, #0]
 8001290:	4b5a      	ldr	r3, [pc, #360]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 8001292:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
			memcpy(&udp_tx.sqr, UART3_RX_BUFFER + 14, 1);
 8001296:	4b6d      	ldr	r3, [pc, #436]	@ (800144c <HAL_UART_RxCpltCallback+0x2c0>)
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	4b58      	ldr	r3, [pc, #352]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 800129c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			memcpy(&udp_tx.tri, UART3_RX_BUFFER + 15, 1);
 80012a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001450 <HAL_UART_RxCpltCallback+0x2c4>)
 80012a2:	781a      	ldrb	r2, [r3, #0]
 80012a4:	4b55      	ldr	r3, [pc, #340]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80012a6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			memcpy(&udp_tx.cir, UART3_RX_BUFFER + 16, 1);
 80012aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001454 <HAL_UART_RxCpltCallback+0x2c8>)
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	4b53      	ldr	r3, [pc, #332]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80012b0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
			memcpy(&udp_tx.up, UART3_RX_BUFFER + 17, 1);
 80012b4:	4b68      	ldr	r3, [pc, #416]	@ (8001458 <HAL_UART_RxCpltCallback+0x2cc>)
 80012b6:	781a      	ldrb	r2, [r3, #0]
 80012b8:	4b50      	ldr	r3, [pc, #320]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80012ba:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
			memcpy(&udp_tx.down, UART3_RX_BUFFER + 18, 1);
 80012be:	4b67      	ldr	r3, [pc, #412]	@ (800145c <HAL_UART_RxCpltCallback+0x2d0>)
 80012c0:	781a      	ldrb	r2, [r3, #0]
 80012c2:	4b4e      	ldr	r3, [pc, #312]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80012c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			memcpy(&udp_tx.right, UART3_RX_BUFFER + 19, 1);
 80012c8:	4b65      	ldr	r3, [pc, #404]	@ (8001460 <HAL_UART_RxCpltCallback+0x2d4>)
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	4b4b      	ldr	r3, [pc, #300]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80012ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
			memcpy(&udp_tx.left, UART3_RX_BUFFER + 20, 1);
 80012d2:	4b64      	ldr	r3, [pc, #400]	@ (8001464 <HAL_UART_RxCpltCallback+0x2d8>)
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	4b49      	ldr	r3, [pc, #292]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80012d8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
			memcpy(&udp_tx.share, UART3_RX_BUFFER + 21, 1);
 80012dc:	4b62      	ldr	r3, [pc, #392]	@ (8001468 <HAL_UART_RxCpltCallback+0x2dc>)
 80012de:	781a      	ldrb	r2, [r3, #0]
 80012e0:	4b46      	ldr	r3, [pc, #280]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80012e2:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
			memcpy(&udp_tx.option, UART3_RX_BUFFER + 22, 1);
 80012e6:	4b61      	ldr	r3, [pc, #388]	@ (800146c <HAL_UART_RxCpltCallback+0x2e0>)
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	4b44      	ldr	r3, [pc, #272]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80012ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

			memcpy(&udp_tx.ps, UART3_RX_BUFFER + 23, 1);
 80012f0:	4b5f      	ldr	r3, [pc, #380]	@ (8001470 <HAL_UART_RxCpltCallback+0x2e4>)
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	4b41      	ldr	r3, [pc, #260]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80012f6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
			memcpy(&udp_tx.touchpad, UART3_RX_BUFFER + 24, 1);
 80012fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001474 <HAL_UART_RxCpltCallback+0x2e8>)
 80012fc:	781a      	ldrb	r2, [r3, #0]
 80012fe:	4b3f      	ldr	r3, [pc, #252]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 8001300:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
			memcpy(&udp_tx.battery, UART3_RX_BUFFER + 25, 1);
 8001304:	4b5c      	ldr	r3, [pc, #368]	@ (8001478 <HAL_UART_RxCpltCallback+0x2ec>)
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	4b3c      	ldr	r3, [pc, #240]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 800130a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

			memcpy(&udp_tx.gX, UART3_RX_BUFFER + 26, 2);
 800130e:	4b5b      	ldr	r3, [pc, #364]	@ (800147c <HAL_UART_RxCpltCallback+0x2f0>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	b29a      	uxth	r2, r3
 8001314:	4b39      	ldr	r3, [pc, #228]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 8001316:	879a      	strh	r2, [r3, #60]	@ 0x3c
			memcpy(&udp_tx.gY, UART3_RX_BUFFER + 28, 2);
 8001318:	4b59      	ldr	r3, [pc, #356]	@ (8001480 <HAL_UART_RxCpltCallback+0x2f4>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b37      	ldr	r3, [pc, #220]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 8001320:	87da      	strh	r2, [r3, #62]	@ 0x3e
			memcpy(&udp_tx.gZ, UART3_RX_BUFFER + 30, 2);
 8001322:	4b58      	ldr	r3, [pc, #352]	@ (8001484 <HAL_UART_RxCpltCallback+0x2f8>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b29a      	uxth	r2, r3
 8001328:	4b34      	ldr	r3, [pc, #208]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 800132a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
			memcpy(&udp_tx.aX, UART3_RX_BUFFER + 32, 2);
 800132e:	4b56      	ldr	r3, [pc, #344]	@ (8001488 <HAL_UART_RxCpltCallback+0x2fc>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b31      	ldr	r3, [pc, #196]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 8001336:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
			memcpy(&udp_tx.aY, UART3_RX_BUFFER + 34, 2);
 800133a:	4b54      	ldr	r3, [pc, #336]	@ (800148c <HAL_UART_RxCpltCallback+0x300>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	b29a      	uxth	r2, r3
 8001340:	4b2e      	ldr	r3, [pc, #184]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 8001342:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
			memcpy(&udp_tx.aZ, UART3_RX_BUFFER + 36, 2);
 8001346:	4b52      	ldr	r3, [pc, #328]	@ (8001490 <HAL_UART_RxCpltCallback+0x304>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	b29a      	uxth	r2, r3
 800134c:	4b2b      	ldr	r3, [pc, #172]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 800134e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		}
		HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 8001352:	222b      	movs	r2, #43	@ 0x2b
 8001354:	4931      	ldr	r1, [pc, #196]	@ (800141c <HAL_UART_RxCpltCallback+0x290>)
 8001356:	4830      	ldr	r0, [pc, #192]	@ (8001418 <HAL_UART_RxCpltCallback+0x28c>)
 8001358:	f007 f804 	bl	8008364 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart4)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a4d      	ldr	r2, [pc, #308]	@ (8001494 <HAL_UART_RxCpltCallback+0x308>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d124      	bne.n	80013ae <HAL_UART_RxCpltCallback+0x222>
	{
		if(UART4_RX_BUFFER[0] == 'A' && UART4_RX_BUFFER[1] == 'B' && UART4_RX_BUFFER[2] == 'C')
 8001364:	4b4c      	ldr	r3, [pc, #304]	@ (8001498 <HAL_UART_RxCpltCallback+0x30c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b41      	cmp	r3, #65	@ 0x41
 800136a:	d11b      	bne.n	80013a4 <HAL_UART_RxCpltCallback+0x218>
 800136c:	4b4a      	ldr	r3, [pc, #296]	@ (8001498 <HAL_UART_RxCpltCallback+0x30c>)
 800136e:	785b      	ldrb	r3, [r3, #1]
 8001370:	2b42      	cmp	r3, #66	@ 0x42
 8001372:	d117      	bne.n	80013a4 <HAL_UART_RxCpltCallback+0x218>
 8001374:	4b48      	ldr	r3, [pc, #288]	@ (8001498 <HAL_UART_RxCpltCallback+0x30c>)
 8001376:	789b      	ldrb	r3, [r3, #2]
 8001378:	2b43      	cmp	r3, #67	@ 0x43
 800137a:	d113      	bne.n	80013a4 <HAL_UART_RxCpltCallback+0x218>
		{
			/* Save UDP */
			memcpy(&udp_tx.ultrasonic[0], UART4_RX_BUFFER + 3, 2);
 800137c:	4b47      	ldr	r3, [pc, #284]	@ (800149c <HAL_UART_RxCpltCallback+0x310>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	b29a      	uxth	r2, r3
 8001382:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 8001384:	829a      	strh	r2, [r3, #20]
			memcpy(&udp_tx.ultrasonic[1], UART4_RX_BUFFER + 5, 2);
 8001386:	4b46      	ldr	r3, [pc, #280]	@ (80014a0 <HAL_UART_RxCpltCallback+0x314>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	b29a      	uxth	r2, r3
 800138c:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 800138e:	82da      	strh	r2, [r3, #22]
			memcpy(&udp_tx.ultrasonic[2], UART4_RX_BUFFER + 7, 2);
 8001390:	4b44      	ldr	r3, [pc, #272]	@ (80014a4 <HAL_UART_RxCpltCallback+0x318>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b29a      	uxth	r2, r3
 8001396:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 8001398:	831a      	strh	r2, [r3, #24]
			memcpy(&udp_tx.ultrasonic[3], UART4_RX_BUFFER + 9, 2);
 800139a:	4b43      	ldr	r3, [pc, #268]	@ (80014a8 <HAL_UART_RxCpltCallback+0x31c>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b29a      	uxth	r2, r3
 80013a0:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80013a2:	835a      	strh	r2, [r3, #26]
		}
		HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 80013a4:	2235      	movs	r2, #53	@ 0x35
 80013a6:	493c      	ldr	r1, [pc, #240]	@ (8001498 <HAL_UART_RxCpltCallback+0x30c>)
 80013a8:	483a      	ldr	r0, [pc, #232]	@ (8001494 <HAL_UART_RxCpltCallback+0x308>)
 80013aa:	f006 ffdb 	bl	8008364 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart5)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a3e      	ldr	r2, [pc, #248]	@ (80014ac <HAL_UART_RxCpltCallback+0x320>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	f040 8082 	bne.w	80014bc <HAL_UART_RxCpltCallback+0x330>
	{
		if(UART5_RX_BUFFER[0] == 'A' && UART5_RX_BUFFER[1] == 'B' && UART5_RX_BUFFER[2] == 'C')
 80013b8:	4b3d      	ldr	r3, [pc, #244]	@ (80014b0 <HAL_UART_RxCpltCallback+0x324>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b41      	cmp	r3, #65	@ 0x41
 80013be:	d111      	bne.n	80013e4 <HAL_UART_RxCpltCallback+0x258>
 80013c0:	4b3b      	ldr	r3, [pc, #236]	@ (80014b0 <HAL_UART_RxCpltCallback+0x324>)
 80013c2:	785b      	ldrb	r3, [r3, #1]
 80013c4:	2b42      	cmp	r3, #66	@ 0x42
 80013c6:	d10d      	bne.n	80013e4 <HAL_UART_RxCpltCallback+0x258>
 80013c8:	4b39      	ldr	r3, [pc, #228]	@ (80014b0 <HAL_UART_RxCpltCallback+0x324>)
 80013ca:	789b      	ldrb	r3, [r3, #2]
 80013cc:	2b43      	cmp	r3, #67	@ 0x43
 80013ce:	d109      	bne.n	80013e4 <HAL_UART_RxCpltCallback+0x258>
		{
			/* Save UDP */
			memcpy(&udp_tx.enc_x, UART5_RX_BUFFER + 3, 2);
 80013d0:	4b38      	ldr	r3, [pc, #224]	@ (80014b4 <HAL_UART_RxCpltCallback+0x328>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80013d8:	80da      	strh	r2, [r3, #6]
			memcpy(&udp_tx.enc_y, UART5_RX_BUFFER + 5, 2);
 80013da:	4b37      	ldr	r3, [pc, #220]	@ (80014b8 <HAL_UART_RxCpltCallback+0x32c>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_UART_RxCpltCallback+0x270>)
 80013e2:	811a      	strh	r2, [r3, #8]
		}
		HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 80013e4:	2217      	movs	r2, #23
 80013e6:	4932      	ldr	r1, [pc, #200]	@ (80014b0 <HAL_UART_RxCpltCallback+0x324>)
 80013e8:	4830      	ldr	r0, [pc, #192]	@ (80014ac <HAL_UART_RxCpltCallback+0x320>)
 80013ea:	f006 ffbb 	bl	8008364 <HAL_UART_Receive_DMA>
 80013ee:	e065      	b.n	80014bc <HAL_UART_RxCpltCallback+0x330>
 80013f0:	20000910 	.word	0x20000910
 80013f4:	2000037c 	.word	0x2000037c
 80013f8:	2000037f 	.word	0x2000037f
 80013fc:	200007c8 	.word	0x200007c8
 8001400:	20000380 	.word	0x20000380
 8001404:	20000381 	.word	0x20000381
 8001408:	20000382 	.word	0x20000382
 800140c:	20000383 	.word	0x20000383
 8001410:	20000385 	.word	0x20000385
 8001414:	20000387 	.word	0x20000387
 8001418:	200009a0 	.word	0x200009a0
 800141c:	200003cc 	.word	0x200003cc
 8001420:	200003cf 	.word	0x200003cf
 8001424:	200003d0 	.word	0x200003d0
 8001428:	200003d1 	.word	0x200003d1
 800142c:	200003d2 	.word	0x200003d2
 8001430:	200003d3 	.word	0x200003d3
 8001434:	200003d4 	.word	0x200003d4
 8001438:	200003d5 	.word	0x200003d5
 800143c:	200003d6 	.word	0x200003d6
 8001440:	200003d7 	.word	0x200003d7
 8001444:	200003d8 	.word	0x200003d8
 8001448:	200003d9 	.word	0x200003d9
 800144c:	200003da 	.word	0x200003da
 8001450:	200003db 	.word	0x200003db
 8001454:	200003dc 	.word	0x200003dc
 8001458:	200003dd 	.word	0x200003dd
 800145c:	200003de 	.word	0x200003de
 8001460:	200003df 	.word	0x200003df
 8001464:	200003e0 	.word	0x200003e0
 8001468:	200003e1 	.word	0x200003e1
 800146c:	200003e2 	.word	0x200003e2
 8001470:	200003e3 	.word	0x200003e3
 8001474:	200003e4 	.word	0x200003e4
 8001478:	200003e5 	.word	0x200003e5
 800147c:	200003e6 	.word	0x200003e6
 8001480:	200003e8 	.word	0x200003e8
 8001484:	200003ea 	.word	0x200003ea
 8001488:	200003ec 	.word	0x200003ec
 800148c:	200003ee 	.word	0x200003ee
 8001490:	200003f0 	.word	0x200003f0
 8001494:	20000880 	.word	0x20000880
 8001498:	200003f8 	.word	0x200003f8
 800149c:	200003fb 	.word	0x200003fb
 80014a0:	200003fd 	.word	0x200003fd
 80014a4:	200003ff 	.word	0x200003ff
 80014a8:	20000401 	.word	0x20000401
 80014ac:	200008c8 	.word	0x200008c8
 80014b0:	20000430 	.word	0x20000430
 80014b4:	20000433 	.word	0x20000433
 80014b8:	20000435 	.word	0x20000435
	}

	if(huart == &huart6) //--- NANO YAW
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a0e      	ldr	r2, [pc, #56]	@ (80014f8 <HAL_UART_RxCpltCallback+0x36c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d115      	bne.n	80014f0 <HAL_UART_RxCpltCallback+0x364>
	{
		if(UART6_RX_BUFFER[0] == 'A' && UART6_RX_BUFFER[1] == 'B' && UART6_RX_BUFFER[2] == 'C')
 80014c4:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <HAL_UART_RxCpltCallback+0x370>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b41      	cmp	r3, #65	@ 0x41
 80014ca:	d10c      	bne.n	80014e6 <HAL_UART_RxCpltCallback+0x35a>
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_UART_RxCpltCallback+0x370>)
 80014ce:	785b      	ldrb	r3, [r3, #1]
 80014d0:	2b42      	cmp	r3, #66	@ 0x42
 80014d2:	d108      	bne.n	80014e6 <HAL_UART_RxCpltCallback+0x35a>
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <HAL_UART_RxCpltCallback+0x370>)
 80014d6:	789b      	ldrb	r3, [r3, #2]
 80014d8:	2b43      	cmp	r3, #67	@ 0x43
 80014da:	d104      	bne.n	80014e6 <HAL_UART_RxCpltCallback+0x35a>
		{
			/* Save UDP */
			memcpy(&udp_tx.yaw_degree, UART6_RX_BUFFER + 3, 4);
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <HAL_UART_RxCpltCallback+0x374>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <HAL_UART_RxCpltCallback+0x378>)
 80014e4:	611a      	str	r2, [r3, #16]
		}
		HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 80014e6:	2207      	movs	r2, #7
 80014e8:	4904      	ldr	r1, [pc, #16]	@ (80014fc <HAL_UART_RxCpltCallback+0x370>)
 80014ea:	4803      	ldr	r0, [pc, #12]	@ (80014f8 <HAL_UART_RxCpltCallback+0x36c>)
 80014ec:	f006 ff3a 	bl	8008364 <HAL_UART_Receive_DMA>
	}

}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200009e8 	.word	0x200009e8
 80014fc:	20000448 	.word	0x20000448
 8001500:	2000044b 	.word	0x2000044b
 8001504:	200007c8 	.word	0x200007c8

08001508 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //--- VGT ARM
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a49      	ldr	r2, [pc, #292]	@ (8001638 <HAL_UART_RxHalfCpltCallback+0x130>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d113      	bne.n	8001540 <HAL_UART_RxHalfCpltCallback+0x38>
	{
		if(!(UART1_RX_BUFFER[0] == 'A' && UART1_RX_BUFFER[1] == 'B' && UART1_RX_BUFFER[2] == 'C'))
 8001518:	4b48      	ldr	r3, [pc, #288]	@ (800163c <HAL_UART_RxHalfCpltCallback+0x134>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b41      	cmp	r3, #65	@ 0x41
 800151e:	d107      	bne.n	8001530 <HAL_UART_RxHalfCpltCallback+0x28>
 8001520:	4b46      	ldr	r3, [pc, #280]	@ (800163c <HAL_UART_RxHalfCpltCallback+0x134>)
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	2b42      	cmp	r3, #66	@ 0x42
 8001526:	d103      	bne.n	8001530 <HAL_UART_RxHalfCpltCallback+0x28>
 8001528:	4b44      	ldr	r3, [pc, #272]	@ (800163c <HAL_UART_RxHalfCpltCallback+0x134>)
 800152a:	789b      	ldrb	r3, [r3, #2]
 800152c:	2b43      	cmp	r3, #67	@ 0x43
 800152e:	d007      	beq.n	8001540 <HAL_UART_RxHalfCpltCallback+0x38>
		{
			HAL_UART_AbortReceive(&huart1);
 8001530:	4841      	ldr	r0, [pc, #260]	@ (8001638 <HAL_UART_RxHalfCpltCallback+0x130>)
 8001532:	f006 ff3c 	bl	80083ae <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8001536:	2235      	movs	r2, #53	@ 0x35
 8001538:	4940      	ldr	r1, [pc, #256]	@ (800163c <HAL_UART_RxHalfCpltCallback+0x134>)
 800153a:	483f      	ldr	r0, [pc, #252]	@ (8001638 <HAL_UART_RxHalfCpltCallback+0x130>)
 800153c:	f006 ff12 	bl	8008364 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a3f      	ldr	r2, [pc, #252]	@ (8001640 <HAL_UART_RxHalfCpltCallback+0x138>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d113      	bne.n	8001570 <HAL_UART_RxHalfCpltCallback+0x68>
	{
		if(!(UART2_RX_BUFFER[0] == 'A' && UART2_RX_BUFFER[1] == 'B' && UART2_RX_BUFFER[2] == 'C'))
 8001548:	4b3e      	ldr	r3, [pc, #248]	@ (8001644 <HAL_UART_RxHalfCpltCallback+0x13c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b41      	cmp	r3, #65	@ 0x41
 800154e:	d107      	bne.n	8001560 <HAL_UART_RxHalfCpltCallback+0x58>
 8001550:	4b3c      	ldr	r3, [pc, #240]	@ (8001644 <HAL_UART_RxHalfCpltCallback+0x13c>)
 8001552:	785b      	ldrb	r3, [r3, #1]
 8001554:	2b42      	cmp	r3, #66	@ 0x42
 8001556:	d103      	bne.n	8001560 <HAL_UART_RxHalfCpltCallback+0x58>
 8001558:	4b3a      	ldr	r3, [pc, #232]	@ (8001644 <HAL_UART_RxHalfCpltCallback+0x13c>)
 800155a:	789b      	ldrb	r3, [r3, #2]
 800155c:	2b43      	cmp	r3, #67	@ 0x43
 800155e:	d007      	beq.n	8001570 <HAL_UART_RxHalfCpltCallback+0x68>
		{
			HAL_UART_AbortReceive(&huart2);
 8001560:	4837      	ldr	r0, [pc, #220]	@ (8001640 <HAL_UART_RxHalfCpltCallback+0x138>)
 8001562:	f006 ff24 	bl	80083ae <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
 8001566:	2217      	movs	r2, #23
 8001568:	4936      	ldr	r1, [pc, #216]	@ (8001644 <HAL_UART_RxHalfCpltCallback+0x13c>)
 800156a:	4835      	ldr	r0, [pc, #212]	@ (8001640 <HAL_UART_RxHalfCpltCallback+0x138>)
 800156c:	f006 fefa 	bl	8008364 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart3)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a35      	ldr	r2, [pc, #212]	@ (8001648 <HAL_UART_RxHalfCpltCallback+0x140>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d113      	bne.n	80015a0 <HAL_UART_RxHalfCpltCallback+0x98>
	{
		if(!(UART3_RX_BUFFER[0] == 'A' && UART3_RX_BUFFER[1] == 'B' && UART3_RX_BUFFER[2] == 'C'))
 8001578:	4b34      	ldr	r3, [pc, #208]	@ (800164c <HAL_UART_RxHalfCpltCallback+0x144>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b41      	cmp	r3, #65	@ 0x41
 800157e:	d107      	bne.n	8001590 <HAL_UART_RxHalfCpltCallback+0x88>
 8001580:	4b32      	ldr	r3, [pc, #200]	@ (800164c <HAL_UART_RxHalfCpltCallback+0x144>)
 8001582:	785b      	ldrb	r3, [r3, #1]
 8001584:	2b42      	cmp	r3, #66	@ 0x42
 8001586:	d103      	bne.n	8001590 <HAL_UART_RxHalfCpltCallback+0x88>
 8001588:	4b30      	ldr	r3, [pc, #192]	@ (800164c <HAL_UART_RxHalfCpltCallback+0x144>)
 800158a:	789b      	ldrb	r3, [r3, #2]
 800158c:	2b43      	cmp	r3, #67	@ 0x43
 800158e:	d007      	beq.n	80015a0 <HAL_UART_RxHalfCpltCallback+0x98>
		{
			HAL_UART_AbortReceive(&huart3);
 8001590:	482d      	ldr	r0, [pc, #180]	@ (8001648 <HAL_UART_RxHalfCpltCallback+0x140>)
 8001592:	f006 ff0c 	bl	80083ae <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 8001596:	222b      	movs	r2, #43	@ 0x2b
 8001598:	492c      	ldr	r1, [pc, #176]	@ (800164c <HAL_UART_RxHalfCpltCallback+0x144>)
 800159a:	482b      	ldr	r0, [pc, #172]	@ (8001648 <HAL_UART_RxHalfCpltCallback+0x140>)
 800159c:	f006 fee2 	bl	8008364 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart4)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001650 <HAL_UART_RxHalfCpltCallback+0x148>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d113      	bne.n	80015d0 <HAL_UART_RxHalfCpltCallback+0xc8>
	{
		if(!(UART4_RX_BUFFER[0] == 'A' && UART4_RX_BUFFER[1] == 'B' && UART4_RX_BUFFER[2] == 'C'))
 80015a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <HAL_UART_RxHalfCpltCallback+0x14c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b41      	cmp	r3, #65	@ 0x41
 80015ae:	d107      	bne.n	80015c0 <HAL_UART_RxHalfCpltCallback+0xb8>
 80015b0:	4b28      	ldr	r3, [pc, #160]	@ (8001654 <HAL_UART_RxHalfCpltCallback+0x14c>)
 80015b2:	785b      	ldrb	r3, [r3, #1]
 80015b4:	2b42      	cmp	r3, #66	@ 0x42
 80015b6:	d103      	bne.n	80015c0 <HAL_UART_RxHalfCpltCallback+0xb8>
 80015b8:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <HAL_UART_RxHalfCpltCallback+0x14c>)
 80015ba:	789b      	ldrb	r3, [r3, #2]
 80015bc:	2b43      	cmp	r3, #67	@ 0x43
 80015be:	d007      	beq.n	80015d0 <HAL_UART_RxHalfCpltCallback+0xc8>
		{
			HAL_UART_AbortReceive(&huart4);
 80015c0:	4823      	ldr	r0, [pc, #140]	@ (8001650 <HAL_UART_RxHalfCpltCallback+0x148>)
 80015c2:	f006 fef4 	bl	80083ae <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 80015c6:	2235      	movs	r2, #53	@ 0x35
 80015c8:	4922      	ldr	r1, [pc, #136]	@ (8001654 <HAL_UART_RxHalfCpltCallback+0x14c>)
 80015ca:	4821      	ldr	r0, [pc, #132]	@ (8001650 <HAL_UART_RxHalfCpltCallback+0x148>)
 80015cc:	f006 feca 	bl	8008364 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart5)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a21      	ldr	r2, [pc, #132]	@ (8001658 <HAL_UART_RxHalfCpltCallback+0x150>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d113      	bne.n	8001600 <HAL_UART_RxHalfCpltCallback+0xf8>
	{
		if(!(UART5_RX_BUFFER[0] == 'A' && UART5_RX_BUFFER[1] == 'B' && UART5_RX_BUFFER[2] == 'C'))
 80015d8:	4b20      	ldr	r3, [pc, #128]	@ (800165c <HAL_UART_RxHalfCpltCallback+0x154>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b41      	cmp	r3, #65	@ 0x41
 80015de:	d107      	bne.n	80015f0 <HAL_UART_RxHalfCpltCallback+0xe8>
 80015e0:	4b1e      	ldr	r3, [pc, #120]	@ (800165c <HAL_UART_RxHalfCpltCallback+0x154>)
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	2b42      	cmp	r3, #66	@ 0x42
 80015e6:	d103      	bne.n	80015f0 <HAL_UART_RxHalfCpltCallback+0xe8>
 80015e8:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <HAL_UART_RxHalfCpltCallback+0x154>)
 80015ea:	789b      	ldrb	r3, [r3, #2]
 80015ec:	2b43      	cmp	r3, #67	@ 0x43
 80015ee:	d007      	beq.n	8001600 <HAL_UART_RxHalfCpltCallback+0xf8>
		{
			HAL_UART_AbortReceive(&huart5);
 80015f0:	4819      	ldr	r0, [pc, #100]	@ (8001658 <HAL_UART_RxHalfCpltCallback+0x150>)
 80015f2:	f006 fedc 	bl	80083ae <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 80015f6:	2217      	movs	r2, #23
 80015f8:	4918      	ldr	r1, [pc, #96]	@ (800165c <HAL_UART_RxHalfCpltCallback+0x154>)
 80015fa:	4817      	ldr	r0, [pc, #92]	@ (8001658 <HAL_UART_RxHalfCpltCallback+0x150>)
 80015fc:	f006 feb2 	bl	8008364 <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart6) //--- NANO YAW
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_UART_RxHalfCpltCallback+0x158>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d113      	bne.n	8001630 <HAL_UART_RxHalfCpltCallback+0x128>
	{
		if(!(UART6_RX_BUFFER[0] == 'A' && UART6_RX_BUFFER[1] == 'B' && UART6_RX_BUFFER[2] == 'C'))
 8001608:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <HAL_UART_RxHalfCpltCallback+0x15c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b41      	cmp	r3, #65	@ 0x41
 800160e:	d107      	bne.n	8001620 <HAL_UART_RxHalfCpltCallback+0x118>
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <HAL_UART_RxHalfCpltCallback+0x15c>)
 8001612:	785b      	ldrb	r3, [r3, #1]
 8001614:	2b42      	cmp	r3, #66	@ 0x42
 8001616:	d103      	bne.n	8001620 <HAL_UART_RxHalfCpltCallback+0x118>
 8001618:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_UART_RxHalfCpltCallback+0x15c>)
 800161a:	789b      	ldrb	r3, [r3, #2]
 800161c:	2b43      	cmp	r3, #67	@ 0x43
 800161e:	d007      	beq.n	8001630 <HAL_UART_RxHalfCpltCallback+0x128>
		{
			HAL_UART_AbortReceive(&huart6);
 8001620:	480f      	ldr	r0, [pc, #60]	@ (8001660 <HAL_UART_RxHalfCpltCallback+0x158>)
 8001622:	f006 fec4 	bl	80083ae <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 8001626:	2207      	movs	r2, #7
 8001628:	490e      	ldr	r1, [pc, #56]	@ (8001664 <HAL_UART_RxHalfCpltCallback+0x15c>)
 800162a:	480d      	ldr	r0, [pc, #52]	@ (8001660 <HAL_UART_RxHalfCpltCallback+0x158>)
 800162c:	f006 fe9a 	bl	8008364 <HAL_UART_Receive_DMA>
		}
	}

}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000910 	.word	0x20000910
 800163c:	2000037c 	.word	0x2000037c
 8001640:	20000958 	.word	0x20000958
 8001644:	200003b4 	.word	0x200003b4
 8001648:	200009a0 	.word	0x200009a0
 800164c:	200003cc 	.word	0x200003cc
 8001650:	20000880 	.word	0x20000880
 8001654:	200003f8 	.word	0x200003f8
 8001658:	200008c8 	.word	0x200008c8
 800165c:	20000430 	.word	0x20000430
 8001660:	200009e8 	.word	0x200009e8
 8001664:	20000448 	.word	0x20000448

08001668 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //--- VGT ARM
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a25      	ldr	r2, [pc, #148]	@ (8001708 <HAL_UART_ErrorCallback+0xa0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d107      	bne.n	8001688 <HAL_UART_ErrorCallback+0x20>
	{
		HAL_UART_AbortReceive(&huart1);
 8001678:	4823      	ldr	r0, [pc, #140]	@ (8001708 <HAL_UART_ErrorCallback+0xa0>)
 800167a:	f006 fe98 	bl	80083ae <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 800167e:	2235      	movs	r2, #53	@ 0x35
 8001680:	4922      	ldr	r1, [pc, #136]	@ (800170c <HAL_UART_ErrorCallback+0xa4>)
 8001682:	4821      	ldr	r0, [pc, #132]	@ (8001708 <HAL_UART_ErrorCallback+0xa0>)
 8001684:	f006 fe6e 	bl	8008364 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a21      	ldr	r2, [pc, #132]	@ (8001710 <HAL_UART_ErrorCallback+0xa8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d107      	bne.n	80016a0 <HAL_UART_ErrorCallback+0x38>
	{
		HAL_UART_AbortReceive(&huart2);
 8001690:	481f      	ldr	r0, [pc, #124]	@ (8001710 <HAL_UART_ErrorCallback+0xa8>)
 8001692:	f006 fe8c 	bl	80083ae <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
 8001696:	2217      	movs	r2, #23
 8001698:	491e      	ldr	r1, [pc, #120]	@ (8001714 <HAL_UART_ErrorCallback+0xac>)
 800169a:	481d      	ldr	r0, [pc, #116]	@ (8001710 <HAL_UART_ErrorCallback+0xa8>)
 800169c:	f006 fe62 	bl	8008364 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart3)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001718 <HAL_UART_ErrorCallback+0xb0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d107      	bne.n	80016b8 <HAL_UART_ErrorCallback+0x50>
	{
		HAL_UART_AbortReceive(&huart3);
 80016a8:	481b      	ldr	r0, [pc, #108]	@ (8001718 <HAL_UART_ErrorCallback+0xb0>)
 80016aa:	f006 fe80 	bl	80083ae <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 80016ae:	222b      	movs	r2, #43	@ 0x2b
 80016b0:	491a      	ldr	r1, [pc, #104]	@ (800171c <HAL_UART_ErrorCallback+0xb4>)
 80016b2:	4819      	ldr	r0, [pc, #100]	@ (8001718 <HAL_UART_ErrorCallback+0xb0>)
 80016b4:	f006 fe56 	bl	8008364 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart4)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a19      	ldr	r2, [pc, #100]	@ (8001720 <HAL_UART_ErrorCallback+0xb8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d107      	bne.n	80016d0 <HAL_UART_ErrorCallback+0x68>
	{
		HAL_UART_AbortReceive(&huart4);
 80016c0:	4817      	ldr	r0, [pc, #92]	@ (8001720 <HAL_UART_ErrorCallback+0xb8>)
 80016c2:	f006 fe74 	bl	80083ae <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 80016c6:	2235      	movs	r2, #53	@ 0x35
 80016c8:	4916      	ldr	r1, [pc, #88]	@ (8001724 <HAL_UART_ErrorCallback+0xbc>)
 80016ca:	4815      	ldr	r0, [pc, #84]	@ (8001720 <HAL_UART_ErrorCallback+0xb8>)
 80016cc:	f006 fe4a 	bl	8008364 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart5)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a15      	ldr	r2, [pc, #84]	@ (8001728 <HAL_UART_ErrorCallback+0xc0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d107      	bne.n	80016e8 <HAL_UART_ErrorCallback+0x80>
	{
		HAL_UART_AbortReceive(&huart5);
 80016d8:	4813      	ldr	r0, [pc, #76]	@ (8001728 <HAL_UART_ErrorCallback+0xc0>)
 80016da:	f006 fe68 	bl	80083ae <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 80016de:	2217      	movs	r2, #23
 80016e0:	4912      	ldr	r1, [pc, #72]	@ (800172c <HAL_UART_ErrorCallback+0xc4>)
 80016e2:	4811      	ldr	r0, [pc, #68]	@ (8001728 <HAL_UART_ErrorCallback+0xc0>)
 80016e4:	f006 fe3e 	bl	8008364 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart6) //--- NANO YAW
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a11      	ldr	r2, [pc, #68]	@ (8001730 <HAL_UART_ErrorCallback+0xc8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d107      	bne.n	8001700 <HAL_UART_ErrorCallback+0x98>
	{
		HAL_UART_AbortReceive(&huart6);
 80016f0:	480f      	ldr	r0, [pc, #60]	@ (8001730 <HAL_UART_ErrorCallback+0xc8>)
 80016f2:	f006 fe5c 	bl	80083ae <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 80016f6:	2207      	movs	r2, #7
 80016f8:	490e      	ldr	r1, [pc, #56]	@ (8001734 <HAL_UART_ErrorCallback+0xcc>)
 80016fa:	480d      	ldr	r0, [pc, #52]	@ (8001730 <HAL_UART_ErrorCallback+0xc8>)
 80016fc:	f006 fe32 	bl	8008364 <HAL_UART_Receive_DMA>

	}

}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000910 	.word	0x20000910
 800170c:	2000037c 	.word	0x2000037c
 8001710:	20000958 	.word	0x20000958
 8001714:	200003b4 	.word	0x200003b4
 8001718:	200009a0 	.word	0x200009a0
 800171c:	200003cc 	.word	0x200003cc
 8001720:	20000880 	.word	0x20000880
 8001724:	200003f8 	.word	0x200003f8
 8001728:	200008c8 	.word	0x200008c8
 800172c:	20000430 	.word	0x20000430
 8001730:	200009e8 	.word	0x200009e8
 8001734:	20000448 	.word	0x20000448

08001738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173c:	f002 fb10 	bl	8003d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001740:	f000 f844 	bl	80017cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001744:	f7ff f8fa 	bl	800093c <MX_GPIO_Init>
  MX_DMA_Init();
 8001748:	f7ff f872 	bl	8000830 <MX_DMA_Init>
  MX_ADC1_Init();
 800174c:	f7fe ff26 	bl	800059c <MX_ADC1_Init>
  MX_CAN1_Init();
 8001750:	f7fe fff2 	bl	8000738 <MX_CAN1_Init>
  MX_I2C1_Init();
 8001754:	f7ff f9a8 	bl	8000aa8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001758:	f7ff f9d4 	bl	8000b04 <MX_I2C3_Init>
  MX_TIM1_Init();
 800175c:	f000 fc5c 	bl	8002018 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001760:	f000 fcb2 	bl	80020c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001764:	f000 fd04 	bl	8002170 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001768:	f000 fd56 	bl	8002218 <MX_TIM4_Init>
  /* Configure the system clock */
  SystemClock_Config();
 800176c:	f000 f82e 	bl	80017cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM5_Init();
 8001770:	f000 fda6 	bl	80022c0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001774:	f000 fe3e 	bl	80023f4 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001778:	f000 fec0 	bl	80024fc <MX_TIM9_Init>
  MX_TIM10_Init();
 800177c:	f000 ff0e 	bl	800259c <MX_TIM10_Init>
  MX_TIM11_Init();
 8001780:	f000 ff5a 	bl	8002638 <MX_TIM11_Init>
  MX_TIM12_Init();
 8001784:	f000 ffa6 	bl	80026d4 <MX_TIM12_Init>
  MX_TIM13_Init();
 8001788:	f000 fff4 	bl	8002774 <MX_TIM13_Init>
  MX_UART4_Init();
 800178c:	f001 fc90 	bl	80030b0 <MX_UART4_Init>
  MX_UART5_Init();
 8001790:	f001 fcb8 	bl	8003104 <MX_UART5_Init>
  MX_TIM6_Init();
 8001794:	f000 fdf8 	bl	8002388 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8001798:	f001 fd08 	bl	80031ac <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800179c:	f001 fcdc 	bl	8003158 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80017a0:	f001 fd2e 	bl	8003200 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80017a4:	f001 fd56 	bl	8003254 <MX_USART6_UART_Init>
  MX_LWIP_Init();
 80017a8:	f007 ffa4 	bl	80096f4 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  Robot_Init();
 80017ac:	f7ff fa8e 	bl	8000ccc <Robot_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(udp_cnt >= 1)
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <main+0x90>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0fb      	beq.n	80017b0 <main+0x78>
	  {
		  MX_LWIP_Process();
 80017b8:	f008 f8dc 	bl	8009974 <MX_LWIP_Process>
		  udpClient_send();
 80017bc:	f001 fc08 	bl	8002fd0 <udpClient_send>
		  udp_cnt = 0;
 80017c0:	4b01      	ldr	r3, [pc, #4]	@ (80017c8 <main+0x90>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
	  if(udp_cnt >= 1)
 80017c6:	e7f3      	b.n	80017b0 <main+0x78>
 80017c8:	20000270 	.word	0x20000270

080017cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b094      	sub	sp, #80	@ 0x50
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	2230      	movs	r2, #48	@ 0x30
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f012 feaf 	bl	801453e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	4b28      	ldr	r3, [pc, #160]	@ (8001898 <SystemClock_Config+0xcc>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	4a27      	ldr	r2, [pc, #156]	@ (8001898 <SystemClock_Config+0xcc>)
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001800:	4b25      	ldr	r3, [pc, #148]	@ (8001898 <SystemClock_Config+0xcc>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	4b22      	ldr	r3, [pc, #136]	@ (800189c <SystemClock_Config+0xd0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a21      	ldr	r2, [pc, #132]	@ (800189c <SystemClock_Config+0xd0>)
 8001816:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <SystemClock_Config+0xd0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001828:	2301      	movs	r3, #1
 800182a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800182c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001832:	2302      	movs	r3, #2
 8001834:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001836:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800183a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800183c:	2304      	movs	r3, #4
 800183e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001840:	23a8      	movs	r3, #168	@ 0xa8
 8001842:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001844:	2302      	movs	r3, #2
 8001846:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001848:	2304      	movs	r3, #4
 800184a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800184c:	f107 0320 	add.w	r3, r7, #32
 8001850:	4618      	mov	r0, r3
 8001852:	f004 ffdf 	bl	8006814 <HAL_RCC_OscConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800185c:	f000 f820 	bl	80018a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001860:	230f      	movs	r3, #15
 8001862:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001864:	2302      	movs	r3, #2
 8001866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800186c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001872:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001876:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2105      	movs	r1, #5
 800187e:	4618      	mov	r0, r3
 8001880:	f005 fa40 	bl	8006d04 <HAL_RCC_ClockConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800188a:	f000 f809 	bl	80018a0 <Error_Handler>
  }
}
 800188e:	bf00      	nop
 8001890:	3750      	adds	r7, #80	@ 0x50
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40007000 	.word	0x40007000

080018a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <Error_Handler+0x8>

080018ac <Motor_Init>:
void Motor_Init(Motor_t *uMotor,
               GPIO_TypeDef *GPIO_A, uint16_t GPIO_PIN_A,
               GPIO_TypeDef *GPIO_B, uint16_t GPIO_PIN_B,
               TIM_HandleTypeDef *htimx, uint32_t channel,
               uint8_t reversed)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	4613      	mov	r3, r2
 80018ba:	80fb      	strh	r3, [r7, #6]
	uMotor -> GPIO_A 		= GPIO_A;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	601a      	str	r2, [r3, #0]
	uMotor -> GPIO_PIN_A 	= GPIO_PIN_A;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	88fa      	ldrh	r2, [r7, #6]
 80018c6:	809a      	strh	r2, [r3, #4]
	uMotor -> GPIO_B 		= GPIO_B;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	609a      	str	r2, [r3, #8]
	uMotor -> GPIO_PIN_B 	= GPIO_PIN_B;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8b3a      	ldrh	r2, [r7, #24]
 80018d2:	819a      	strh	r2, [r3, #12]
	uMotor -> htimx 		= htimx;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	611a      	str	r2, [r3, #16]
	uMotor -> channel 		= channel;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6a3a      	ldr	r2, [r7, #32]
 80018de:	615a      	str	r2, [r3, #20]
	uMotor -> reversed 		= reversed;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80018e6:	761a      	strb	r2, [r3, #24]

	HAL_TIM_PWM_Start(uMotor->htimx, uMotor->channel);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	4619      	mov	r1, r3
 80018f2:	4610      	mov	r0, r2
 80018f4:	f005 fd36 	bl	8007364 <HAL_TIM_PWM_Start>

	return;
 80018f8:	bf00      	nop
}
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <Motor_Run>:


void Motor_Run(Motor_t *uMotor, int16_t speed)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
    if(uMotor -> reversed)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7e1b      	ldrb	r3, [r3, #24]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <Motor_Run+0x1c>
    {
        speed = -speed;
 8001914:	887b      	ldrh	r3, [r7, #2]
 8001916:	425b      	negs	r3, r3
 8001918:	b29b      	uxth	r3, r3
 800191a:	807b      	strh	r3, [r7, #2]
    }

	uint8_t dir_a = (speed >= 0);
 800191c:	887b      	ldrh	r3, [r7, #2]
 800191e:	43db      	mvns	r3, r3
 8001920:	b29b      	uxth	r3, r3
 8001922:	0bdb      	lsrs	r3, r3, #15
 8001924:	b2db      	uxtb	r3, r3
 8001926:	73fb      	strb	r3, [r7, #15]
	uint8_t dir_b = (speed <  0);
 8001928:	887b      	ldrh	r3, [r7, #2]
 800192a:	0bdb      	lsrs	r3, r3, #15
 800192c:	b2db      	uxtb	r3, r3
 800192e:	73bb      	strb	r3, [r7, #14]
	speed = abs(speed);
 8001930:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001934:	2b00      	cmp	r3, #0
 8001936:	bfb8      	it	lt
 8001938:	425b      	neglt	r3, r3
 800193a:	b29b      	uxth	r3, r3
 800193c:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(uMotor -> GPIO_A, uMotor -> GPIO_PIN_A, dir_a);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	889b      	ldrh	r3, [r3, #4]
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	4619      	mov	r1, r3
 800194a:	f004 fe05 	bl	8006558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(uMotor -> GPIO_B, uMotor -> GPIO_PIN_B, dir_b);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6898      	ldr	r0, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	899b      	ldrh	r3, [r3, #12]
 8001956:	7bba      	ldrb	r2, [r7, #14]
 8001958:	4619      	mov	r1, r3
 800195a:	f004 fdfd 	bl	8006558 <HAL_GPIO_WritePin>

	switch (uMotor->channel)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d838      	bhi.n	80019d8 <Motor_Run+0xd8>
 8001966:	a201      	add	r2, pc, #4	@ (adr r2, 800196c <Motor_Run+0x6c>)
 8001968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196c:	080019a1 	.word	0x080019a1
 8001970:	080019d9 	.word	0x080019d9
 8001974:	080019d9 	.word	0x080019d9
 8001978:	080019d9 	.word	0x080019d9
 800197c:	080019af 	.word	0x080019af
 8001980:	080019d9 	.word	0x080019d9
 8001984:	080019d9 	.word	0x080019d9
 8001988:	080019d9 	.word	0x080019d9
 800198c:	080019bd 	.word	0x080019bd
 8001990:	080019d9 	.word	0x080019d9
 8001994:	080019d9 	.word	0x080019d9
 8001998:	080019d9 	.word	0x080019d9
 800199c:	080019cb 	.word	0x080019cb
	{
		case TIM_CHANNEL_1:
			uMotor -> htimx -> Instance -> CCR1 = speed;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019aa:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80019ac:	e015      	b.n	80019da <Motor_Run+0xda>
		case TIM_CHANNEL_2:
			uMotor -> htimx -> Instance -> CCR2 = speed;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019b8:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80019ba:	e00e      	b.n	80019da <Motor_Run+0xda>
		case TIM_CHANNEL_3:
			uMotor -> htimx -> Instance -> CCR3 = speed;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019c6:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80019c8:	e007      	b.n	80019da <Motor_Run+0xda>
		case TIM_CHANNEL_4:
			uMotor -> htimx -> Instance -> CCR4 = speed;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019d4:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 80019d6:	e000      	b.n	80019da <Motor_Run+0xda>
		default:
			break;
 80019d8:	bf00      	nop
	}

	return;
 80019da:	bf00      	nop
}
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop

080019e4 <Encoder_Init>:


void Encoder_Init(Encoder_t *uEncoder, TIM_HandleTypeDef *htimx, uint8_t reversed)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	4613      	mov	r3, r2
 80019f0:	71fb      	strb	r3, [r7, #7]
	uEncoder -> htimx 		= htimx;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	601a      	str	r2, [r3, #0]
	uEncoder -> reversed 	= reversed;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	79fa      	ldrb	r2, [r7, #7]
 80019fc:	719a      	strb	r2, [r3, #6]

	HAL_TIM_Encoder_Start(uEncoder->htimx, TIM_CHANNEL_ALL);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	213c      	movs	r1, #60	@ 0x3c
 8001a04:	4618      	mov	r0, r3
 8001a06:	f005 fe1b 	bl	8007640 <HAL_TIM_Encoder_Start>

	return;
 8001a0a:	bf00      	nop
}
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <Encoder_GetCount>:


void Encoder_GetCount(Encoder_t *uEncoder)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
	if(uEncoder -> reversed)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	799b      	ldrb	r3, [r3, #6]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00a      	beq.n	8001a38 <Encoder_GetCount+0x26>
	{
		uEncoder -> count = -(uEncoder -> htimx -> Instance -> CNT);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	425b      	negs	r3, r3
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	b21a      	sxth	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	809a      	strh	r2, [r3, #4]
	else
	{
		uEncoder -> count = uEncoder -> htimx -> Instance -> CNT;
	}

	return;
 8001a36:	e007      	b.n	8001a48 <Encoder_GetCount+0x36>
		uEncoder -> count = uEncoder -> htimx -> Instance -> CNT;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	809a      	strh	r2, [r3, #4]
	return;
 8001a46:	bf00      	nop
}
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <Encoder_ResetCount>:


void Encoder_ResetCount(Encoder_t *uEncoder)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
	uEncoder -> htimx -> Instance -> CNT = 0;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2200      	movs	r2, #0
 8001a62:	625a      	str	r2, [r3, #36]	@ 0x24

	return;
 8001a64:	bf00      	nop
}
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <PID_Init>:

#include "pid.h"

/* Functions */
void PID_Init(PID_t *uPID, float kp, float ki, float kd)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a7c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a80:	ed87 1a00 	vstr	s2, [r7]
	uPID -> kp = kp;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	601a      	str	r2, [r3, #0]
	uPID -> ki = ki;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	605a      	str	r2, [r3, #4]
	uPID -> kd = kd;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	609a      	str	r2, [r3, #8]

	uPID -> proportional 	= 0;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
	uPID -> integral 		= 0;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
	uPID -> derivative 		= 0;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]

	uPID -> error 			= 0;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
	uPID -> prev_error 		= 0;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
	uPID -> setpoint 		= 0;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	621a      	str	r2, [r3, #32]
	uPID -> feedback		= 0;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	625a      	str	r2, [r3, #36]	@ 0x24

	uPID -> max_output		= 0;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	629a      	str	r2, [r3, #40]	@ 0x28
	uPID -> output			= 0;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	62da      	str	r2, [r3, #44]	@ 0x2c

	return;
 8001ade:	bf00      	nop
}
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <PID_Update>:


void PID_Update(PID_t *uPID, float setpoint, float feedback, float max_output)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	ed87 0a02 	vstr	s0, [r7, #8]
 8001af6:	edc7 0a01 	vstr	s1, [r7, #4]
 8001afa:	ed87 1a00 	vstr	s2, [r7]
	uPID->setpoint 		= setpoint;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	621a      	str	r2, [r3, #32]
	uPID->feedback 		= feedback;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24
	uPID->max_output 	= max_output;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	629a      	str	r2, [r3, #40]	@ 0x28

	uPID->error = uPID->setpoint - uPID->feedback;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	edc3 7a06 	vstr	s15, [r3, #24]
//	    if(uPID->error > 180) 			{ setpoint -= 360; }
//	    else if(uPID->error < -180) 	{ setpoint += 360; }
//	    uPID->error = setpoint - feedback;
//	}

	uPID->proportional = uPID->kp * uPID->error;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	ed93 7a00 	vldr	s14, [r3]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	edc3 7a03 	vstr	s15, [r3, #12]
	uPID->integral    += uPID->ki * uPID->error;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	edc3 7a04 	vstr	s15, [r3, #16]
	uPID->derivative   = uPID->kd * (uPID->error - uPID->prev_error);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	edd3 6a06 	vldr	s13, [r3, #24]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	edc3 7a05 	vstr	s15, [r3, #20]
	uPID->prev_error   = uPID->error;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	699a      	ldr	r2, [r3, #24]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	61da      	str	r2, [r3, #28]

	if(uPID->integral >= uPID->max_output) 			{ uPID->integral =   uPID->max_output;  }
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001b90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b98:	db04      	blt.n	8001ba4 <PID_Update+0xba>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	611a      	str	r2, [r3, #16]
 8001ba2:	e014      	b.n	8001bce <PID_Update+0xe4>
	else if(uPID->integral < -(uPID->max_output)) 	{ uPID->integral = -(uPID->max_output); }
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001bb0:	eef1 7a67 	vneg.f32	s15, s15
 8001bb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	d507      	bpl.n	8001bce <PID_Update+0xe4>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001bc4:	eef1 7a67 	vneg.f32	s15, s15
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	edc3 7a04 	vstr	s15, [r3, #16]

	uPID->output = (uPID->proportional) + (uPID->integral) + (uPID->derivative);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	if(uPID->output >= uPID->max_output) 			{ uPID->output =   uPID->max_output;  }
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	db04      	blt.n	8001c0e <PID_Update+0x124>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }

	return;
 8001c0c:	e016      	b.n	8001c3c <PID_Update+0x152>
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001c1a:	eef1 7a67 	vneg.f32	s15, s15
 8001c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	d400      	bmi.n	8001c2a <PID_Update+0x140>
	return;
 8001c28:	e008      	b.n	8001c3c <PID_Update+0x152>
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001c30:	eef1 7a67 	vneg.f32	s15, s15
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	return;
 8001c3a:	bf00      	nop
}
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <HAL_MspInit+0x4c>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	4a0f      	ldr	r2, [pc, #60]	@ (8001c94 <HAL_MspInit+0x4c>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <HAL_MspInit+0x4c>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <HAL_MspInit+0x4c>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	4a08      	ldr	r2, [pc, #32]	@ (8001c94 <HAL_MspInit+0x4c>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7a:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_MspInit+0x4c>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800

08001c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <NMI_Handler+0x4>

08001ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <HardFault_Handler+0x4>

08001ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <MemManage_Handler+0x4>

08001cb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cee:	f002 f889 	bl	8003e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001cfc:	4802      	ldr	r0, [pc, #8]	@ (8001d08 <DMA1_Stream0_IRQHandler+0x10>)
 8001cfe:	f002 fecd 	bl	8004a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000af0 	.word	0x20000af0

08001d0c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d10:	4802      	ldr	r0, [pc, #8]	@ (8001d1c <DMA1_Stream1_IRQHandler+0x10>)
 8001d12:	f002 fec3 	bl	8004a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000d30 	.word	0x20000d30

08001d20 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001d24:	4802      	ldr	r0, [pc, #8]	@ (8001d30 <DMA1_Stream2_IRQHandler+0x10>)
 8001d26:	f002 feb9 	bl	8004a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000a30 	.word	0x20000a30

08001d34 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <DMA1_Stream3_IRQHandler+0x10>)
 8001d3a:	f002 feaf 	bl	8004a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000d90 	.word	0x20000d90

08001d48 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001d4c:	4802      	ldr	r0, [pc, #8]	@ (8001d58 <DMA1_Stream4_IRQHandler+0x10>)
 8001d4e:	f002 fea5 	bl	8004a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000a90 	.word	0x20000a90

08001d5c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d60:	4802      	ldr	r0, [pc, #8]	@ (8001d6c <DMA1_Stream5_IRQHandler+0x10>)
 8001d62:	f002 fe9b 	bl	8004a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000c70 	.word	0x20000c70

08001d70 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d74:	4802      	ldr	r0, [pc, #8]	@ (8001d80 <DMA1_Stream6_IRQHandler+0x10>)
 8001d76:	f002 fe91 	bl	8004a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000cd0 	.word	0x20000cd0

08001d84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d88:	4802      	ldr	r0, [pc, #8]	@ (8001d94 <USART1_IRQHandler+0x10>)
 8001d8a:	f006 fbb3 	bl	80084f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000910 	.word	0x20000910

08001d98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d9c:	4802      	ldr	r0, [pc, #8]	@ (8001da8 <USART2_IRQHandler+0x10>)
 8001d9e:	f006 fba9 	bl	80084f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000958 	.word	0x20000958

08001dac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001db0:	4802      	ldr	r0, [pc, #8]	@ (8001dbc <USART3_IRQHandler+0x10>)
 8001db2:	f006 fb9f 	bl	80084f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200009a0 	.word	0x200009a0

08001dc0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001dc4:	4802      	ldr	r0, [pc, #8]	@ (8001dd0 <DMA1_Stream7_IRQHandler+0x10>)
 8001dc6:	f002 fe69 	bl	8004a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000b50 	.word	0x20000b50

08001dd4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001dd8:	4802      	ldr	r0, [pc, #8]	@ (8001de4 <UART4_IRQHandler+0x10>)
 8001dda:	f006 fb8b 	bl	80084f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000880 	.word	0x20000880

08001de8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001dec:	4802      	ldr	r0, [pc, #8]	@ (8001df8 <UART5_IRQHandler+0x10>)
 8001dee:	f006 fb81 	bl	80084f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200008c8 	.word	0x200008c8

08001dfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e00:	4802      	ldr	r0, [pc, #8]	@ (8001e0c <TIM6_DAC_IRQHandler+0x10>)
 8001e02:	f005 fcab 	bl	800775c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200005c4 	.word	0x200005c4

08001e10 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001e14:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <DMA2_Stream1_IRQHandler+0x10>)
 8001e16:	f002 fe41 	bl	8004a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000df0 	.word	0x20000df0

08001e24 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e28:	4802      	ldr	r0, [pc, #8]	@ (8001e34 <DMA2_Stream2_IRQHandler+0x10>)
 8001e2a:	f002 fe37 	bl	8004a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000bb0 	.word	0x20000bb0

08001e38 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001e3c:	4802      	ldr	r0, [pc, #8]	@ (8001e48 <DMA2_Stream6_IRQHandler+0x10>)
 8001e3e:	f002 fe2d 	bl	8004a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000e50 	.word	0x20000e50

08001e4c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e50:	4802      	ldr	r0, [pc, #8]	@ (8001e5c <DMA2_Stream7_IRQHandler+0x10>)
 8001e52:	f002 fe23 	bl	8004a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000c10 	.word	0x20000c10

08001e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return 1;
 8001e64:	2301      	movs	r3, #1
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <_kill>:

int _kill(int pid, int sig)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e7a:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <_kill+0x20>)
 8001e7c:	2216      	movs	r2, #22
 8001e7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	2000b4a0 	.word	0x2000b4a0

08001e94 <_exit>:

void _exit (int status)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ffe5 	bl	8001e70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ea6:	bf00      	nop
 8001ea8:	e7fd      	b.n	8001ea6 <_exit+0x12>

08001eaa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	e00a      	b.n	8001ed2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ebc:	f3af 8000 	nop.w
 8001ec0:	4601      	mov	r1, r0
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	60ba      	str	r2, [r7, #8]
 8001ec8:	b2ca      	uxtb	r2, r1
 8001eca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	dbf0      	blt.n	8001ebc <_read+0x12>
  }

  return len;
 8001eda:	687b      	ldr	r3, [r7, #4]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	e009      	b.n	8001f0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	60ba      	str	r2, [r7, #8]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	dbf1      	blt.n	8001ef6 <_write+0x12>
  }
  return len;
 8001f12:	687b      	ldr	r3, [r7, #4]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_close>:

int _close(int file)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f44:	605a      	str	r2, [r3, #4]
  return 0;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <_isatty>:

int _isatty(int file)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f5c:	2301      	movs	r3, #1
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b085      	sub	sp, #20
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f8c:	4a14      	ldr	r2, [pc, #80]	@ (8001fe0 <_sbrk+0x5c>)
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <_sbrk+0x60>)
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f98:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <_sbrk+0x64>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	@ (8001fec <_sbrk+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d205      	bcs.n	8001fc0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <_sbrk+0x6c>)
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	e009      	b.n	8001fd4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a06      	ldr	r2, [pc, #24]	@ (8001fe8 <_sbrk+0x64>)
 8001fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	20020000 	.word	0x20020000
 8001fe4:	00000400 	.word	0x00000400
 8001fe8:	20000458 	.word	0x20000458
 8001fec:	2000b4b0 	.word	0x2000b4b0
 8001ff0:	2000b4a0 	.word	0x2000b4a0

08001ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff8:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <SystemInit+0x20>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffe:	4a05      	ldr	r2, [pc, #20]	@ (8002014 <SystemInit+0x20>)
 8002000:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002004:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08c      	sub	sp, #48	@ 0x30
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800201e:	f107 030c 	add.w	r3, r7, #12
 8002022:	2224      	movs	r2, #36	@ 0x24
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f012 fa89 	bl	801453e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002034:	4b22      	ldr	r3, [pc, #136]	@ (80020c0 <MX_TIM1_Init+0xa8>)
 8002036:	4a23      	ldr	r2, [pc, #140]	@ (80020c4 <MX_TIM1_Init+0xac>)
 8002038:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800203a:	4b21      	ldr	r3, [pc, #132]	@ (80020c0 <MX_TIM1_Init+0xa8>)
 800203c:	2200      	movs	r2, #0
 800203e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002040:	4b1f      	ldr	r3, [pc, #124]	@ (80020c0 <MX_TIM1_Init+0xa8>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002046:	4b1e      	ldr	r3, [pc, #120]	@ (80020c0 <MX_TIM1_Init+0xa8>)
 8002048:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800204c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204e:	4b1c      	ldr	r3, [pc, #112]	@ (80020c0 <MX_TIM1_Init+0xa8>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002054:	4b1a      	ldr	r3, [pc, #104]	@ (80020c0 <MX_TIM1_Init+0xa8>)
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205a:	4b19      	ldr	r3, [pc, #100]	@ (80020c0 <MX_TIM1_Init+0xa8>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002060:	2301      	movs	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002068:	2301      	movs	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800206c:	2300      	movs	r3, #0
 800206e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002078:	2301      	movs	r3, #1
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800207c:	2300      	movs	r3, #0
 800207e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	4619      	mov	r1, r3
 800208a:	480d      	ldr	r0, [pc, #52]	@ (80020c0 <MX_TIM1_Init+0xa8>)
 800208c:	f005 fa32 	bl	80074f4 <HAL_TIM_Encoder_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002096:	f7ff fc03 	bl	80018a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209a:	2300      	movs	r3, #0
 800209c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4806      	ldr	r0, [pc, #24]	@ (80020c0 <MX_TIM1_Init+0xa8>)
 80020a8:	f005 ffae 	bl	8008008 <HAL_TIMEx_MasterConfigSynchronization>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80020b2:	f7ff fbf5 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	3730      	adds	r7, #48	@ 0x30
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2000045c 	.word	0x2000045c
 80020c4:	40010000 	.word	0x40010000

080020c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08c      	sub	sp, #48	@ 0x30
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	2224      	movs	r2, #36	@ 0x24
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f012 fa31 	bl	801453e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020e4:	4b21      	ldr	r3, [pc, #132]	@ (800216c <MX_TIM2_Init+0xa4>)
 80020e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020ec:	4b1f      	ldr	r3, [pc, #124]	@ (800216c <MX_TIM2_Init+0xa4>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f2:	4b1e      	ldr	r3, [pc, #120]	@ (800216c <MX_TIM2_Init+0xa4>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80020f8:	4b1c      	ldr	r3, [pc, #112]	@ (800216c <MX_TIM2_Init+0xa4>)
 80020fa:	f04f 32ff 	mov.w	r2, #4294967295
 80020fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002100:	4b1a      	ldr	r3, [pc, #104]	@ (800216c <MX_TIM2_Init+0xa4>)
 8002102:	2200      	movs	r2, #0
 8002104:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002106:	4b19      	ldr	r3, [pc, #100]	@ (800216c <MX_TIM2_Init+0xa4>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800210c:	2301      	movs	r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002114:	2301      	movs	r3, #1
 8002116:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002124:	2301      	movs	r3, #1
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002128:	2300      	movs	r3, #0
 800212a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	4619      	mov	r1, r3
 8002136:	480d      	ldr	r0, [pc, #52]	@ (800216c <MX_TIM2_Init+0xa4>)
 8002138:	f005 f9dc 	bl	80074f4 <HAL_TIM_Encoder_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002142:	f7ff fbad 	bl	80018a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	4619      	mov	r1, r3
 8002152:	4806      	ldr	r0, [pc, #24]	@ (800216c <MX_TIM2_Init+0xa4>)
 8002154:	f005 ff58 	bl	8008008 <HAL_TIMEx_MasterConfigSynchronization>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800215e:	f7ff fb9f 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	3730      	adds	r7, #48	@ 0x30
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200004a4 	.word	0x200004a4

08002170 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	@ 0x30
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	2224      	movs	r2, #36	@ 0x24
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f012 f9dd 	bl	801453e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800218c:	4b20      	ldr	r3, [pc, #128]	@ (8002210 <MX_TIM3_Init+0xa0>)
 800218e:	4a21      	ldr	r2, [pc, #132]	@ (8002214 <MX_TIM3_Init+0xa4>)
 8002190:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002192:	4b1f      	ldr	r3, [pc, #124]	@ (8002210 <MX_TIM3_Init+0xa0>)
 8002194:	2200      	movs	r2, #0
 8002196:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002198:	4b1d      	ldr	r3, [pc, #116]	@ (8002210 <MX_TIM3_Init+0xa0>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800219e:	4b1c      	ldr	r3, [pc, #112]	@ (8002210 <MX_TIM3_Init+0xa0>)
 80021a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <MX_TIM3_Init+0xa0>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ac:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <MX_TIM3_Init+0xa0>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021ba:	2301      	movs	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021ca:	2301      	movs	r3, #1
 80021cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021ce:	2300      	movs	r3, #0
 80021d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	4619      	mov	r1, r3
 80021dc:	480c      	ldr	r0, [pc, #48]	@ (8002210 <MX_TIM3_Init+0xa0>)
 80021de:	f005 f989 	bl	80074f4 <HAL_TIM_Encoder_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80021e8:	f7ff fb5a 	bl	80018a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ec:	2300      	movs	r3, #0
 80021ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	4619      	mov	r1, r3
 80021f8:	4805      	ldr	r0, [pc, #20]	@ (8002210 <MX_TIM3_Init+0xa0>)
 80021fa:	f005 ff05 	bl	8008008 <HAL_TIMEx_MasterConfigSynchronization>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002204:	f7ff fb4c 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002208:	bf00      	nop
 800220a:	3730      	adds	r7, #48	@ 0x30
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	200004ec 	.word	0x200004ec
 8002214:	40000400 	.word	0x40000400

08002218 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08c      	sub	sp, #48	@ 0x30
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800221e:	f107 030c 	add.w	r3, r7, #12
 8002222:	2224      	movs	r2, #36	@ 0x24
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f012 f989 	bl	801453e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002234:	4b20      	ldr	r3, [pc, #128]	@ (80022b8 <MX_TIM4_Init+0xa0>)
 8002236:	4a21      	ldr	r2, [pc, #132]	@ (80022bc <MX_TIM4_Init+0xa4>)
 8002238:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800223a:	4b1f      	ldr	r3, [pc, #124]	@ (80022b8 <MX_TIM4_Init+0xa0>)
 800223c:	2200      	movs	r2, #0
 800223e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002240:	4b1d      	ldr	r3, [pc, #116]	@ (80022b8 <MX_TIM4_Init+0xa0>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002246:	4b1c      	ldr	r3, [pc, #112]	@ (80022b8 <MX_TIM4_Init+0xa0>)
 8002248:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800224c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224e:	4b1a      	ldr	r3, [pc, #104]	@ (80022b8 <MX_TIM4_Init+0xa0>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002254:	4b18      	ldr	r3, [pc, #96]	@ (80022b8 <MX_TIM4_Init+0xa0>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800225a:	2301      	movs	r3, #1
 800225c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002262:	2301      	movs	r3, #1
 8002264:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002272:	2301      	movs	r3, #1
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002276:	2300      	movs	r3, #0
 8002278:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800227e:	f107 030c 	add.w	r3, r7, #12
 8002282:	4619      	mov	r1, r3
 8002284:	480c      	ldr	r0, [pc, #48]	@ (80022b8 <MX_TIM4_Init+0xa0>)
 8002286:	f005 f935 	bl	80074f4 <HAL_TIM_Encoder_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002290:	f7ff fb06 	bl	80018a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	4619      	mov	r1, r3
 80022a0:	4805      	ldr	r0, [pc, #20]	@ (80022b8 <MX_TIM4_Init+0xa0>)
 80022a2:	f005 feb1 	bl	8008008 <HAL_TIMEx_MasterConfigSynchronization>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80022ac:	f7ff faf8 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80022b0:	bf00      	nop
 80022b2:	3730      	adds	r7, #48	@ 0x30
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000534 	.word	0x20000534
 80022bc:	40000800 	.word	0x40000800

080022c0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	@ 0x28
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c6:	f107 0320 	add.w	r3, r7, #32
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
 80022dc:	611a      	str	r2, [r3, #16]
 80022de:	615a      	str	r2, [r3, #20]
 80022e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022e2:	4b27      	ldr	r3, [pc, #156]	@ (8002380 <MX_TIM5_Init+0xc0>)
 80022e4:	4a27      	ldr	r2, [pc, #156]	@ (8002384 <MX_TIM5_Init+0xc4>)
 80022e6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 80022e8:	4b25      	ldr	r3, [pc, #148]	@ (8002380 <MX_TIM5_Init+0xc0>)
 80022ea:	2253      	movs	r2, #83	@ 0x53
 80022ec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ee:	4b24      	ldr	r3, [pc, #144]	@ (8002380 <MX_TIM5_Init+0xc0>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80022f4:	4b22      	ldr	r3, [pc, #136]	@ (8002380 <MX_TIM5_Init+0xc0>)
 80022f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022fa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fc:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <MX_TIM5_Init+0xc0>)
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002302:	4b1f      	ldr	r3, [pc, #124]	@ (8002380 <MX_TIM5_Init+0xc0>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002308:	481d      	ldr	r0, [pc, #116]	@ (8002380 <MX_TIM5_Init+0xc0>)
 800230a:	f004 ffdb 	bl	80072c4 <HAL_TIM_PWM_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002314:	f7ff fac4 	bl	80018a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002320:	f107 0320 	add.w	r3, r7, #32
 8002324:	4619      	mov	r1, r3
 8002326:	4816      	ldr	r0, [pc, #88]	@ (8002380 <MX_TIM5_Init+0xc0>)
 8002328:	f005 fe6e 	bl	8008008 <HAL_TIMEx_MasterConfigSynchronization>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002332:	f7ff fab5 	bl	80018a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002336:	2360      	movs	r3, #96	@ 0x60
 8002338:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	2200      	movs	r2, #0
 800234a:	4619      	mov	r1, r3
 800234c:	480c      	ldr	r0, [pc, #48]	@ (8002380 <MX_TIM5_Init+0xc0>)
 800234e:	f005 faf5 	bl	800793c <HAL_TIM_PWM_ConfigChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002358:	f7ff faa2 	bl	80018a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	220c      	movs	r2, #12
 8002360:	4619      	mov	r1, r3
 8002362:	4807      	ldr	r0, [pc, #28]	@ (8002380 <MX_TIM5_Init+0xc0>)
 8002364:	f005 faea 	bl	800793c <HAL_TIM_PWM_ConfigChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800236e:	f7ff fa97 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002372:	4803      	ldr	r0, [pc, #12]	@ (8002380 <MX_TIM5_Init+0xc0>)
 8002374:	f000 fc22 	bl	8002bbc <HAL_TIM_MspPostInit>

}
 8002378:	bf00      	nop
 800237a:	3728      	adds	r7, #40	@ 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	2000057c 	.word	0x2000057c
 8002384:	40000c00 	.word	0x40000c00

08002388 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238e:	463b      	mov	r3, r7
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002396:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <MX_TIM6_Init+0x64>)
 8002398:	4a15      	ldr	r2, [pc, #84]	@ (80023f0 <MX_TIM6_Init+0x68>)
 800239a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800239c:	4b13      	ldr	r3, [pc, #76]	@ (80023ec <MX_TIM6_Init+0x64>)
 800239e:	2253      	movs	r2, #83	@ 0x53
 80023a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a2:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <MX_TIM6_Init+0x64>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 80023a8:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <MX_TIM6_Init+0x64>)
 80023aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b0:	4b0e      	ldr	r3, [pc, #56]	@ (80023ec <MX_TIM6_Init+0x64>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80023b6:	480d      	ldr	r0, [pc, #52]	@ (80023ec <MX_TIM6_Init+0x64>)
 80023b8:	f004 fec4 	bl	8007144 <HAL_TIM_Base_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80023c2:	f7ff fa6d 	bl	80018a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023ce:	463b      	mov	r3, r7
 80023d0:	4619      	mov	r1, r3
 80023d2:	4806      	ldr	r0, [pc, #24]	@ (80023ec <MX_TIM6_Init+0x64>)
 80023d4:	f005 fe18 	bl	8008008 <HAL_TIMEx_MasterConfigSynchronization>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80023de:	f7ff fa5f 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200005c4 	.word	0x200005c4
 80023f0:	40001000 	.word	0x40001000

080023f4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b092      	sub	sp, #72	@ 0x48
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
 8002414:	615a      	str	r2, [r3, #20]
 8002416:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	2220      	movs	r2, #32
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f012 f88d 	bl	801453e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002424:	4b33      	ldr	r3, [pc, #204]	@ (80024f4 <MX_TIM8_Init+0x100>)
 8002426:	4a34      	ldr	r2, [pc, #208]	@ (80024f8 <MX_TIM8_Init+0x104>)
 8002428:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800242a:	4b32      	ldr	r3, [pc, #200]	@ (80024f4 <MX_TIM8_Init+0x100>)
 800242c:	22a7      	movs	r2, #167	@ 0xa7
 800242e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002430:	4b30      	ldr	r3, [pc, #192]	@ (80024f4 <MX_TIM8_Init+0x100>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8002436:	4b2f      	ldr	r3, [pc, #188]	@ (80024f4 <MX_TIM8_Init+0x100>)
 8002438:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800243c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243e:	4b2d      	ldr	r3, [pc, #180]	@ (80024f4 <MX_TIM8_Init+0x100>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002444:	4b2b      	ldr	r3, [pc, #172]	@ (80024f4 <MX_TIM8_Init+0x100>)
 8002446:	2200      	movs	r2, #0
 8002448:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244a:	4b2a      	ldr	r3, [pc, #168]	@ (80024f4 <MX_TIM8_Init+0x100>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002450:	4828      	ldr	r0, [pc, #160]	@ (80024f4 <MX_TIM8_Init+0x100>)
 8002452:	f004 ff37 	bl	80072c4 <HAL_TIM_PWM_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800245c:	f7ff fa20 	bl	80018a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002460:	2300      	movs	r3, #0
 8002462:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002468:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800246c:	4619      	mov	r1, r3
 800246e:	4821      	ldr	r0, [pc, #132]	@ (80024f4 <MX_TIM8_Init+0x100>)
 8002470:	f005 fdca 	bl	8008008 <HAL_TIMEx_MasterConfigSynchronization>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800247a:	f7ff fa11 	bl	80018a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800247e:	2360      	movs	r3, #96	@ 0x60
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002486:	2300      	movs	r3, #0
 8002488:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800248a:	2300      	movs	r3, #0
 800248c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800249a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800249e:	2208      	movs	r2, #8
 80024a0:	4619      	mov	r1, r3
 80024a2:	4814      	ldr	r0, [pc, #80]	@ (80024f4 <MX_TIM8_Init+0x100>)
 80024a4:	f005 fa4a 	bl	800793c <HAL_TIM_PWM_ConfigChannel>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80024ae:	f7ff f9f7 	bl	80018a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	4619      	mov	r1, r3
 80024d4:	4807      	ldr	r0, [pc, #28]	@ (80024f4 <MX_TIM8_Init+0x100>)
 80024d6:	f005 fe13 	bl	8008100 <HAL_TIMEx_ConfigBreakDeadTime>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 80024e0:	f7ff f9de 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80024e4:	4803      	ldr	r0, [pc, #12]	@ (80024f4 <MX_TIM8_Init+0x100>)
 80024e6:	f000 fb69 	bl	8002bbc <HAL_TIM_MspPostInit>

}
 80024ea:	bf00      	nop
 80024ec:	3748      	adds	r7, #72	@ 0x48
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000060c 	.word	0x2000060c
 80024f8:	40010400 	.word	0x40010400

080024fc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
 8002510:	615a      	str	r2, [r3, #20]
 8002512:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002514:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <MX_TIM9_Init+0x98>)
 8002516:	4a20      	ldr	r2, [pc, #128]	@ (8002598 <MX_TIM9_Init+0x9c>)
 8002518:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 800251a:	4b1e      	ldr	r3, [pc, #120]	@ (8002594 <MX_TIM9_Init+0x98>)
 800251c:	22a7      	movs	r2, #167	@ 0xa7
 800251e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002520:	4b1c      	ldr	r3, [pc, #112]	@ (8002594 <MX_TIM9_Init+0x98>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8002526:	4b1b      	ldr	r3, [pc, #108]	@ (8002594 <MX_TIM9_Init+0x98>)
 8002528:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800252c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800252e:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <MX_TIM9_Init+0x98>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002534:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <MX_TIM9_Init+0x98>)
 8002536:	2200      	movs	r2, #0
 8002538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800253a:	4816      	ldr	r0, [pc, #88]	@ (8002594 <MX_TIM9_Init+0x98>)
 800253c:	f004 fec2 	bl	80072c4 <HAL_TIM_PWM_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8002546:	f7ff f9ab 	bl	80018a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800254a:	2360      	movs	r3, #96	@ 0x60
 800254c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	2200      	movs	r2, #0
 800255e:	4619      	mov	r1, r3
 8002560:	480c      	ldr	r0, [pc, #48]	@ (8002594 <MX_TIM9_Init+0x98>)
 8002562:	f005 f9eb 	bl	800793c <HAL_TIM_PWM_ConfigChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 800256c:	f7ff f998 	bl	80018a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	2204      	movs	r2, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4807      	ldr	r0, [pc, #28]	@ (8002594 <MX_TIM9_Init+0x98>)
 8002578:	f005 f9e0 	bl	800793c <HAL_TIM_PWM_ConfigChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002582:	f7ff f98d 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002586:	4803      	ldr	r0, [pc, #12]	@ (8002594 <MX_TIM9_Init+0x98>)
 8002588:	f000 fb18 	bl	8002bbc <HAL_TIM_MspPostInit>

}
 800258c:	bf00      	nop
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000654 	.word	0x20000654
 8002598:	40014000 	.word	0x40014000

0800259c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
 80025b0:	615a      	str	r2, [r3, #20]
 80025b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80025b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002630 <MX_TIM10_Init+0x94>)
 80025b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002634 <MX_TIM10_Init+0x98>)
 80025b8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80025ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002630 <MX_TIM10_Init+0x94>)
 80025bc:	22a7      	movs	r2, #167	@ 0xa7
 80025be:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002630 <MX_TIM10_Init+0x94>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 80025c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <MX_TIM10_Init+0x94>)
 80025c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025cc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ce:	4b18      	ldr	r3, [pc, #96]	@ (8002630 <MX_TIM10_Init+0x94>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d4:	4b16      	ldr	r3, [pc, #88]	@ (8002630 <MX_TIM10_Init+0x94>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80025da:	4815      	ldr	r0, [pc, #84]	@ (8002630 <MX_TIM10_Init+0x94>)
 80025dc:	f004 fdb2 	bl	8007144 <HAL_TIM_Base_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80025e6:	f7ff f95b 	bl	80018a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80025ea:	4811      	ldr	r0, [pc, #68]	@ (8002630 <MX_TIM10_Init+0x94>)
 80025ec:	f004 fe6a 	bl	80072c4 <HAL_TIM_PWM_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80025f6:	f7ff f953 	bl	80018a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025fa:	2360      	movs	r3, #96	@ 0x60
 80025fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2200      	movs	r2, #0
 800260e:	4619      	mov	r1, r3
 8002610:	4807      	ldr	r0, [pc, #28]	@ (8002630 <MX_TIM10_Init+0x94>)
 8002612:	f005 f993 	bl	800793c <HAL_TIM_PWM_ConfigChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800261c:	f7ff f940 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002620:	4803      	ldr	r0, [pc, #12]	@ (8002630 <MX_TIM10_Init+0x94>)
 8002622:	f000 facb 	bl	8002bbc <HAL_TIM_MspPostInit>

}
 8002626:	bf00      	nop
 8002628:	3720      	adds	r7, #32
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	2000069c 	.word	0x2000069c
 8002634:	40014400 	.word	0x40014400

08002638 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
 800264c:	615a      	str	r2, [r3, #20]
 800264e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002650:	4b1e      	ldr	r3, [pc, #120]	@ (80026cc <MX_TIM11_Init+0x94>)
 8002652:	4a1f      	ldr	r2, [pc, #124]	@ (80026d0 <MX_TIM11_Init+0x98>)
 8002654:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8002656:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <MX_TIM11_Init+0x94>)
 8002658:	22a7      	movs	r2, #167	@ 0xa7
 800265a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265c:	4b1b      	ldr	r3, [pc, #108]	@ (80026cc <MX_TIM11_Init+0x94>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8002662:	4b1a      	ldr	r3, [pc, #104]	@ (80026cc <MX_TIM11_Init+0x94>)
 8002664:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002668:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266a:	4b18      	ldr	r3, [pc, #96]	@ (80026cc <MX_TIM11_Init+0x94>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002670:	4b16      	ldr	r3, [pc, #88]	@ (80026cc <MX_TIM11_Init+0x94>)
 8002672:	2200      	movs	r2, #0
 8002674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002676:	4815      	ldr	r0, [pc, #84]	@ (80026cc <MX_TIM11_Init+0x94>)
 8002678:	f004 fd64 	bl	8007144 <HAL_TIM_Base_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002682:	f7ff f90d 	bl	80018a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002686:	4811      	ldr	r0, [pc, #68]	@ (80026cc <MX_TIM11_Init+0x94>)
 8002688:	f004 fe1c 	bl	80072c4 <HAL_TIM_PWM_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002692:	f7ff f905 	bl	80018a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002696:	2360      	movs	r3, #96	@ 0x60
 8002698:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2200      	movs	r2, #0
 80026aa:	4619      	mov	r1, r3
 80026ac:	4807      	ldr	r0, [pc, #28]	@ (80026cc <MX_TIM11_Init+0x94>)
 80026ae:	f005 f945 	bl	800793c <HAL_TIM_PWM_ConfigChannel>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80026b8:	f7ff f8f2 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80026bc:	4803      	ldr	r0, [pc, #12]	@ (80026cc <MX_TIM11_Init+0x94>)
 80026be:	f000 fa7d 	bl	8002bbc <HAL_TIM_MspPostInit>

}
 80026c2:	bf00      	nop
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200006e4 	.word	0x200006e4
 80026d0:	40014800 	.word	0x40014800

080026d4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
 80026e8:	615a      	str	r2, [r3, #20]
 80026ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80026ec:	4b1f      	ldr	r3, [pc, #124]	@ (800276c <MX_TIM12_Init+0x98>)
 80026ee:	4a20      	ldr	r2, [pc, #128]	@ (8002770 <MX_TIM12_Init+0x9c>)
 80026f0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 80026f2:	4b1e      	ldr	r3, [pc, #120]	@ (800276c <MX_TIM12_Init+0x98>)
 80026f4:	2253      	movs	r2, #83	@ 0x53
 80026f6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f8:	4b1c      	ldr	r3, [pc, #112]	@ (800276c <MX_TIM12_Init+0x98>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 80026fe:	4b1b      	ldr	r3, [pc, #108]	@ (800276c <MX_TIM12_Init+0x98>)
 8002700:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002704:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002706:	4b19      	ldr	r3, [pc, #100]	@ (800276c <MX_TIM12_Init+0x98>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270c:	4b17      	ldr	r3, [pc, #92]	@ (800276c <MX_TIM12_Init+0x98>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002712:	4816      	ldr	r0, [pc, #88]	@ (800276c <MX_TIM12_Init+0x98>)
 8002714:	f004 fdd6 	bl	80072c4 <HAL_TIM_PWM_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800271e:	f7ff f8bf 	bl	80018a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002722:	2360      	movs	r3, #96	@ 0x60
 8002724:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	2200      	movs	r2, #0
 8002736:	4619      	mov	r1, r3
 8002738:	480c      	ldr	r0, [pc, #48]	@ (800276c <MX_TIM12_Init+0x98>)
 800273a:	f005 f8ff 	bl	800793c <HAL_TIM_PWM_ConfigChannel>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002744:	f7ff f8ac 	bl	80018a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	2204      	movs	r2, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4807      	ldr	r0, [pc, #28]	@ (800276c <MX_TIM12_Init+0x98>)
 8002750:	f005 f8f4 	bl	800793c <HAL_TIM_PWM_ConfigChannel>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800275a:	f7ff f8a1 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800275e:	4803      	ldr	r0, [pc, #12]	@ (800276c <MX_TIM12_Init+0x98>)
 8002760:	f000 fa2c 	bl	8002bbc <HAL_TIM_MspPostInit>

}
 8002764:	bf00      	nop
 8002766:	3720      	adds	r7, #32
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	2000072c 	.word	0x2000072c
 8002770:	40001800 	.word	0x40001800

08002774 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
 8002788:	615a      	str	r2, [r3, #20]
 800278a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800278c:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <MX_TIM13_Init+0x94>)
 800278e:	4a1f      	ldr	r2, [pc, #124]	@ (800280c <MX_TIM13_Init+0x98>)
 8002790:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 8002792:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <MX_TIM13_Init+0x94>)
 8002794:	2253      	movs	r2, #83	@ 0x53
 8002796:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002798:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <MX_TIM13_Init+0x94>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 800279e:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <MX_TIM13_Init+0x94>)
 80027a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027a4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a6:	4b18      	ldr	r3, [pc, #96]	@ (8002808 <MX_TIM13_Init+0x94>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ac:	4b16      	ldr	r3, [pc, #88]	@ (8002808 <MX_TIM13_Init+0x94>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80027b2:	4815      	ldr	r0, [pc, #84]	@ (8002808 <MX_TIM13_Init+0x94>)
 80027b4:	f004 fcc6 	bl	8007144 <HAL_TIM_Base_Init>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80027be:	f7ff f86f 	bl	80018a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80027c2:	4811      	ldr	r0, [pc, #68]	@ (8002808 <MX_TIM13_Init+0x94>)
 80027c4:	f004 fd7e 	bl	80072c4 <HAL_TIM_PWM_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80027ce:	f7ff f867 	bl	80018a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027d2:	2360      	movs	r3, #96	@ 0x60
 80027d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	2200      	movs	r2, #0
 80027e6:	4619      	mov	r1, r3
 80027e8:	4807      	ldr	r0, [pc, #28]	@ (8002808 <MX_TIM13_Init+0x94>)
 80027ea:	f005 f8a7 	bl	800793c <HAL_TIM_PWM_ConfigChannel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80027f4:	f7ff f854 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80027f8:	4803      	ldr	r0, [pc, #12]	@ (8002808 <MX_TIM13_Init+0x94>)
 80027fa:	f000 f9df 	bl	8002bbc <HAL_TIM_MspPostInit>

}
 80027fe:	bf00      	nop
 8002800:	3720      	adds	r7, #32
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000774 	.word	0x20000774
 800280c:	40001c00 	.word	0x40001c00

08002810 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b090      	sub	sp, #64	@ 0x40
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a74      	ldr	r2, [pc, #464]	@ (8002a00 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d12d      	bne.n	800288e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002836:	4b73      	ldr	r3, [pc, #460]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283a:	4a72      	ldr	r2, [pc, #456]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6453      	str	r3, [r2, #68]	@ 0x44
 8002842:	4b70      	ldr	r3, [pc, #448]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800284c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
 8002852:	4b6c      	ldr	r3, [pc, #432]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	4a6b      	ldr	r2, [pc, #428]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002858:	f043 0310 	orr.w	r3, r3, #16
 800285c:	6313      	str	r3, [r2, #48]	@ 0x30
 800285e:	4b69      	ldr	r3, [pc, #420]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800286a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800286e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	2300      	movs	r3, #0
 800287a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800287c:	2301      	movs	r3, #1
 800287e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002880:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002884:	4619      	mov	r1, r3
 8002886:	4860      	ldr	r0, [pc, #384]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8002888:	f003 fcb2 	bl	80061f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800288c:	e0b4      	b.n	80029f8 <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(tim_encoderHandle->Instance==TIM2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002896:	d14b      	bne.n	8002930 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	623b      	str	r3, [r7, #32]
 800289c:	4b59      	ldr	r3, [pc, #356]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	4a58      	ldr	r2, [pc, #352]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a8:	4b56      	ldr	r3, [pc, #344]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	623b      	str	r3, [r7, #32]
 80028b2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	4b52      	ldr	r3, [pc, #328]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80028ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028bc:	4a51      	ldr	r2, [pc, #324]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80028c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80028da:	f043 0302 	orr.w	r3, r3, #2
 80028de:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e0:	4b48      	ldr	r3, [pc, #288]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028fe:	2301      	movs	r3, #1
 8002900:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002906:	4619      	mov	r1, r3
 8002908:	4840      	ldr	r0, [pc, #256]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x1fc>)
 800290a:	f003 fc71 	bl	80061f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800290e:	2308      	movs	r3, #8
 8002910:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800291e:	2301      	movs	r3, #1
 8002920:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002922:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002926:	4619      	mov	r1, r3
 8002928:	4839      	ldr	r0, [pc, #228]	@ (8002a10 <HAL_TIM_Encoder_MspInit+0x200>)
 800292a:	f003 fc61 	bl	80061f0 <HAL_GPIO_Init>
}
 800292e:	e063      	b.n	80029f8 <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(tim_encoderHandle->Instance==TIM3)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a37      	ldr	r2, [pc, #220]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x204>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d12c      	bne.n	8002994 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	4b31      	ldr	r3, [pc, #196]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	4a30      	ldr	r2, [pc, #192]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	6413      	str	r3, [r2, #64]	@ 0x40
 800294a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	4a29      	ldr	r2, [pc, #164]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	6313      	str	r3, [r2, #48]	@ 0x30
 8002966:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002972:	2330      	movs	r3, #48	@ 0x30
 8002974:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002976:	2302      	movs	r3, #2
 8002978:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	2300      	movs	r3, #0
 800297c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297e:	2300      	movs	r3, #0
 8002980:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002982:	2302      	movs	r3, #2
 8002984:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002986:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800298a:	4619      	mov	r1, r3
 800298c:	4820      	ldr	r0, [pc, #128]	@ (8002a10 <HAL_TIM_Encoder_MspInit+0x200>)
 800298e:	f003 fc2f 	bl	80061f0 <HAL_GPIO_Init>
}
 8002992:	e031      	b.n	80029f8 <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(tim_encoderHandle->Instance==TIM4)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1f      	ldr	r2, [pc, #124]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x208>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d12c      	bne.n	80029f8 <HAL_TIM_Encoder_MspInit+0x1e8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	4b18      	ldr	r3, [pc, #96]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	4a17      	ldr	r2, [pc, #92]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ae:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	4a10      	ldr	r2, [pc, #64]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80029c4:	f043 0308 	orr.w	r3, r3, #8
 80029c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80029d6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80029da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029e8:	2302      	movs	r3, #2
 80029ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029f0:	4619      	mov	r1, r3
 80029f2:	480a      	ldr	r0, [pc, #40]	@ (8002a1c <HAL_TIM_Encoder_MspInit+0x20c>)
 80029f4:	f003 fbfc 	bl	80061f0 <HAL_GPIO_Init>
}
 80029f8:	bf00      	nop
 80029fa:	3740      	adds	r7, #64	@ 0x40
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40010000 	.word	0x40010000
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40020000 	.word	0x40020000
 8002a10:	40020400 	.word	0x40020400
 8002a14:	40000400 	.word	0x40000400
 8002a18:	40000800 	.word	0x40000800
 8002a1c:	40020c00 	.word	0x40020c00

08002a20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a29      	ldr	r2, [pc, #164]	@ (8002ad4 <HAL_TIM_PWM_MspInit+0xb4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d10e      	bne.n	8002a50 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	4b28      	ldr	r3, [pc, #160]	@ (8002ad8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	4a27      	ldr	r2, [pc, #156]	@ (8002ad8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002a3c:	f043 0308 	orr.w	r3, r3, #8
 8002a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a42:	4b25      	ldr	r3, [pc, #148]	@ (8002ad8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002a4e:	e03a      	b.n	8002ac6 <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM8)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a21      	ldr	r2, [pc, #132]	@ (8002adc <HAL_TIM_PWM_MspInit+0xbc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d10e      	bne.n	8002a78 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	4a1d      	ldr	r2, [pc, #116]	@ (8002ad8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]
}
 8002a76:	e026      	b.n	8002ac6 <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM9)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a18      	ldr	r2, [pc, #96]	@ (8002ae0 <HAL_TIM_PWM_MspInit+0xc0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d10e      	bne.n	8002aa0 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	4a13      	ldr	r2, [pc, #76]	@ (8002ad8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a92:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
}
 8002a9e:	e012      	b.n	8002ac6 <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM12)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae4 <HAL_TIM_PWM_MspInit+0xc4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	4a09      	ldr	r2, [pc, #36]	@ (8002ad8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002ab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aba:	4b07      	ldr	r3, [pc, #28]	@ (8002ad8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40000c00 	.word	0x40000c00
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40010400 	.word	0x40010400
 8002ae0:	40014000 	.word	0x40014000
 8002ae4:	40001800 	.word	0x40001800

08002ae8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2c      	ldr	r2, [pc, #176]	@ (8002ba8 <HAL_TIM_Base_MspInit+0xc0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d116      	bne.n	8002b28 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	4b2b      	ldr	r3, [pc, #172]	@ (8002bac <HAL_TIM_Base_MspInit+0xc4>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	4a2a      	ldr	r2, [pc, #168]	@ (8002bac <HAL_TIM_Base_MspInit+0xc4>)
 8002b04:	f043 0310 	orr.w	r3, r3, #16
 8002b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b0a:	4b28      	ldr	r3, [pc, #160]	@ (8002bac <HAL_TIM_Base_MspInit+0xc4>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2100      	movs	r1, #0
 8002b1a:	2036      	movs	r0, #54	@ 0x36
 8002b1c:	f001 fdef 	bl	80046fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b20:	2036      	movs	r0, #54	@ 0x36
 8002b22:	f001 fe08 	bl	8004736 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002b26:	e03a      	b.n	8002b9e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a20      	ldr	r2, [pc, #128]	@ (8002bb0 <HAL_TIM_Base_MspInit+0xc8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d10e      	bne.n	8002b50 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	4b1d      	ldr	r3, [pc, #116]	@ (8002bac <HAL_TIM_Base_MspInit+0xc4>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bac <HAL_TIM_Base_MspInit+0xc4>)
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b42:	4b1a      	ldr	r3, [pc, #104]	@ (8002bac <HAL_TIM_Base_MspInit+0xc4>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
}
 8002b4e:	e026      	b.n	8002b9e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a17      	ldr	r2, [pc, #92]	@ (8002bb4 <HAL_TIM_Base_MspInit+0xcc>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d10e      	bne.n	8002b78 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	4b13      	ldr	r3, [pc, #76]	@ (8002bac <HAL_TIM_Base_MspInit+0xc4>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	4a12      	ldr	r2, [pc, #72]	@ (8002bac <HAL_TIM_Base_MspInit+0xc4>)
 8002b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b6a:	4b10      	ldr	r3, [pc, #64]	@ (8002bac <HAL_TIM_Base_MspInit+0xc4>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
}
 8002b76:	e012      	b.n	8002b9e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM13)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8002bb8 <HAL_TIM_Base_MspInit+0xd0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d10d      	bne.n	8002b9e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_TIM_Base_MspInit+0xc4>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	4a08      	ldr	r2, [pc, #32]	@ (8002bac <HAL_TIM_Base_MspInit+0xc4>)
 8002b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b92:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <HAL_TIM_Base_MspInit+0xc4>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40001000 	.word	0x40001000
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40014400 	.word	0x40014400
 8002bb4:	40014800 	.word	0x40014800
 8002bb8:	40001c00 	.word	0x40001c00

08002bbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08e      	sub	sp, #56	@ 0x38
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a80      	ldr	r2, [pc, #512]	@ (8002ddc <HAL_TIM_MspPostInit+0x220>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d11e      	bne.n	8002c1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
 8002be2:	4b7f      	ldr	r3, [pc, #508]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	4a7e      	ldr	r2, [pc, #504]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bee:	4b7c      	ldr	r3, [pc, #496]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	623b      	str	r3, [r7, #32]
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002bfa:	2309      	movs	r3, #9
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	2300      	movs	r3, #0
 8002c08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c12:	4619      	mov	r1, r3
 8002c14:	4873      	ldr	r0, [pc, #460]	@ (8002de4 <HAL_TIM_MspPostInit+0x228>)
 8002c16:	f003 faeb 	bl	80061f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002c1a:	e0da      	b.n	8002dd2 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM8)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a71      	ldr	r2, [pc, #452]	@ (8002de8 <HAL_TIM_MspPostInit+0x22c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d11f      	bne.n	8002c66 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	4a6c      	ldr	r2, [pc, #432]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002c30:	f043 0304 	orr.w	r3, r3, #4
 8002c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c36:	4b6a      	ldr	r3, [pc, #424]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c50:	2300      	movs	r3, #0
 8002c52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c54:	2303      	movs	r3, #3
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4863      	ldr	r0, [pc, #396]	@ (8002dec <HAL_TIM_MspPostInit+0x230>)
 8002c60:	f003 fac6 	bl	80061f0 <HAL_GPIO_Init>
}
 8002c64:	e0b5      	b.n	8002dd2 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM9)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a61      	ldr	r2, [pc, #388]	@ (8002df0 <HAL_TIM_MspPostInit+0x234>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d11e      	bne.n	8002cae <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c70:	2300      	movs	r3, #0
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	4b5a      	ldr	r3, [pc, #360]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c78:	4a59      	ldr	r2, [pc, #356]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002c7a:	f043 0310 	orr.w	r3, r3, #16
 8002c7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c80:	4b57      	ldr	r3, [pc, #348]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002c8c:	2360      	movs	r3, #96	@ 0x60
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ca0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4853      	ldr	r0, [pc, #332]	@ (8002df4 <HAL_TIM_MspPostInit+0x238>)
 8002ca8:	f003 faa2 	bl	80061f0 <HAL_GPIO_Init>
}
 8002cac:	e091      	b.n	8002dd2 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM10)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a51      	ldr	r2, [pc, #324]	@ (8002df8 <HAL_TIM_MspPostInit+0x23c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d11f      	bne.n	8002cf8 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	4b48      	ldr	r3, [pc, #288]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc0:	4a47      	ldr	r2, [pc, #284]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002cc2:	f043 0302 	orr.w	r3, r3, #2
 8002cc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc8:	4b45      	ldr	r3, [pc, #276]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002cd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4842      	ldr	r0, [pc, #264]	@ (8002dfc <HAL_TIM_MspPostInit+0x240>)
 8002cf2:	f003 fa7d 	bl	80061f0 <HAL_GPIO_Init>
}
 8002cf6:	e06c      	b.n	8002dd2 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM11)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a40      	ldr	r2, [pc, #256]	@ (8002e00 <HAL_TIM_MspPostInit+0x244>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d11f      	bne.n	8002d42 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	4b36      	ldr	r3, [pc, #216]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	4a35      	ldr	r2, [pc, #212]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002d0c:	f043 0302 	orr.w	r3, r3, #2
 8002d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d12:	4b33      	ldr	r3, [pc, #204]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002d30:	2303      	movs	r3, #3
 8002d32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4830      	ldr	r0, [pc, #192]	@ (8002dfc <HAL_TIM_MspPostInit+0x240>)
 8002d3c:	f003 fa58 	bl	80061f0 <HAL_GPIO_Init>
}
 8002d40:	e047      	b.n	8002dd2 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM12)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a2f      	ldr	r2, [pc, #188]	@ (8002e04 <HAL_TIM_MspPostInit+0x248>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d11f      	bne.n	8002d8c <HAL_TIM_MspPostInit+0x1d0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	4b23      	ldr	r3, [pc, #140]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d54:	4a22      	ldr	r2, [pc, #136]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002d56:	f043 0302 	orr.w	r3, r3, #2
 8002d5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d5c:	4b20      	ldr	r3, [pc, #128]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002d68:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d76:	2300      	movs	r3, #0
 8002d78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002d7a:	2309      	movs	r3, #9
 8002d7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d82:	4619      	mov	r1, r3
 8002d84:	481d      	ldr	r0, [pc, #116]	@ (8002dfc <HAL_TIM_MspPostInit+0x240>)
 8002d86:	f003 fa33 	bl	80061f0 <HAL_GPIO_Init>
}
 8002d8a:	e022      	b.n	8002dd2 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM13)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1d      	ldr	r2, [pc, #116]	@ (8002e08 <HAL_TIM_MspPostInit+0x24c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d11d      	bne.n	8002dd2 <HAL_TIM_MspPostInit+0x216>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	4b11      	ldr	r3, [pc, #68]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	4a10      	ldr	r2, [pc, #64]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da6:	4b0e      	ldr	r3, [pc, #56]	@ (8002de0 <HAL_TIM_MspPostInit+0x224>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002db2:	2340      	movs	r3, #64	@ 0x40
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002dc2:	2309      	movs	r3, #9
 8002dc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4805      	ldr	r0, [pc, #20]	@ (8002de4 <HAL_TIM_MspPostInit+0x228>)
 8002dce:	f003 fa0f 	bl	80061f0 <HAL_GPIO_Init>
}
 8002dd2:	bf00      	nop
 8002dd4:	3738      	adds	r7, #56	@ 0x38
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40000c00 	.word	0x40000c00
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40020000 	.word	0x40020000
 8002de8:	40010400 	.word	0x40010400
 8002dec:	40020800 	.word	0x40020800
 8002df0:	40014000 	.word	0x40014000
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40014400 	.word	0x40014400
 8002dfc:	40020400 	.word	0x40020400
 8002e00:	40014800 	.word	0x40014800
 8002e04:	40001800 	.word	0x40001800
 8002e08:	40001c00 	.word	0x40001c00

08002e0c <udpClient_connect>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port);

void udpClient_connect(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
	err_t err;
	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8002e12:	f00e ff21 	bl	8011c58 <udp_new>
 8002e16:	4603      	mov	r3, r0
 8002e18:	4a67      	ldr	r2, [pc, #412]	@ (8002fb8 <udpClient_connect+0x1ac>)
 8002e1a:	6013      	str	r3, [r2, #0]
	/* Bind the block to module's IP and port */
	IP_ADDR4(&stm32IPaddr, stm32_addr.a, stm32_addr.b, stm32_addr.c, stm32_addr.d); //--- stm32
 8002e1c:	4b67      	ldr	r3, [pc, #412]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	061a      	lsls	r2, r3, #24
 8002e22:	4b66      	ldr	r3, [pc, #408]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	4b63      	ldr	r3, [pc, #396]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	431a      	orrs	r2, r3
 8002e38:	4b60      	ldr	r3, [pc, #384]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	061a      	lsls	r2, r3, #24
 8002e42:	4b5e      	ldr	r3, [pc, #376]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	0619      	lsls	r1, r3, #24
 8002e48:	4b5c      	ldr	r3, [pc, #368]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	041b      	lsls	r3, r3, #16
 8002e4e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002e52:	4319      	orrs	r1, r3
 8002e54:	4b59      	ldr	r3, [pc, #356]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4319      	orrs	r1, r3
 8002e5e:	4b57      	ldr	r3, [pc, #348]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	430b      	orrs	r3, r1
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	4b53      	ldr	r3, [pc, #332]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	0619      	lsls	r1, r3, #24
 8002e74:	4b51      	ldr	r3, [pc, #324]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	041b      	lsls	r3, r3, #16
 8002e7a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002e7e:	4319      	orrs	r1, r3
 8002e80:	4b4e      	ldr	r3, [pc, #312]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	4319      	orrs	r1, r3
 8002e8a:	4b4c      	ldr	r3, [pc, #304]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	430b      	orrs	r3, r1
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	4b48      	ldr	r3, [pc, #288]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	0619      	lsls	r1, r3, #24
 8002ea0:	4b46      	ldr	r3, [pc, #280]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002eaa:	4319      	orrs	r1, r3
 8002eac:	4b43      	ldr	r3, [pc, #268]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	4319      	orrs	r1, r3
 8002eb6:	4b41      	ldr	r3, [pc, #260]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	0e1b      	lsrs	r3, r3, #24
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	4a3f      	ldr	r2, [pc, #252]	@ (8002fc0 <udpClient_connect+0x1b4>)
 8002ec4:	6013      	str	r3, [r2, #0]
	udp_bind(upcb, &stm32IPaddr, stm32_addr.port);
 8002ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb8 <udpClient_connect+0x1ac>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a3c      	ldr	r2, [pc, #240]	@ (8002fbc <udpClient_connect+0x1b0>)
 8002ecc:	6912      	ldr	r2, [r2, #16]
 8002ece:	b292      	uxth	r2, r2
 8002ed0:	493b      	ldr	r1, [pc, #236]	@ (8002fc0 <udpClient_connect+0x1b4>)
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f00e fdaa 	bl	8011a2c <udp_bind>
	/* configure destination IP address and port */
	IP_ADDR4(&pcIPaddr, pc_addr.a, pc_addr.b, pc_addr.c, pc_addr.d); //--- NUC/MINI PC
 8002ed8:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	061a      	lsls	r2, r3, #24
 8002ede:	4b39      	ldr	r3, [pc, #228]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	4b36      	ldr	r3, [pc, #216]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	4b33      	ldr	r3, [pc, #204]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	4313      	orrs	r3, r2
 8002efc:	061a      	lsls	r2, r3, #24
 8002efe:	4b31      	ldr	r3, [pc, #196]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	0619      	lsls	r1, r3, #24
 8002f04:	4b2f      	ldr	r3, [pc, #188]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	041b      	lsls	r3, r3, #16
 8002f0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002f0e:	4319      	orrs	r1, r3
 8002f10:	4b2c      	ldr	r3, [pc, #176]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	4319      	orrs	r1, r3
 8002f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	430b      	orrs	r3, r1
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	4b26      	ldr	r3, [pc, #152]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	0619      	lsls	r1, r3, #24
 8002f30:	4b24      	ldr	r3, [pc, #144]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	041b      	lsls	r3, r3, #16
 8002f36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002f3a:	4319      	orrs	r1, r3
 8002f3c:	4b21      	ldr	r3, [pc, #132]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	4319      	orrs	r1, r3
 8002f46:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002f54:	431a      	orrs	r2, r3
 8002f56:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	0619      	lsls	r1, r3, #24
 8002f5c:	4b19      	ldr	r3, [pc, #100]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002f66:	4319      	orrs	r1, r3
 8002f68:	4b16      	ldr	r3, [pc, #88]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	4319      	orrs	r1, r3
 8002f72:	4b14      	ldr	r3, [pc, #80]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	0e1b      	lsrs	r3, r3, #24
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	4a12      	ldr	r2, [pc, #72]	@ (8002fc8 <udpClient_connect+0x1bc>)
 8002f80:	6013      	str	r3, [r2, #0]
	err= udp_connect(upcb, &pcIPaddr, pc_addr.port);
 8002f82:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb8 <udpClient_connect+0x1ac>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a0f      	ldr	r2, [pc, #60]	@ (8002fc4 <udpClient_connect+0x1b8>)
 8002f88:	6912      	ldr	r2, [r2, #16]
 8002f8a:	b292      	uxth	r2, r2
 8002f8c:	490e      	ldr	r1, [pc, #56]	@ (8002fc8 <udpClient_connect+0x1bc>)
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f00e fdd4 	bl	8011b3c <udp_connect>
 8002f94:	4603      	mov	r3, r0
 8002f96:	71fb      	strb	r3, [r7, #7]

	if (err == ERR_OK)
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d106      	bne.n	8002fae <udpClient_connect+0x1a2>
	{
		udp_recv(upcb, udp_receive_callback, NULL);
 8002fa0:	4b05      	ldr	r3, [pc, #20]	@ (8002fb8 <udpClient_connect+0x1ac>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	4909      	ldr	r1, [pc, #36]	@ (8002fcc <udpClient_connect+0x1c0>)
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f00e fe35 	bl	8011c18 <udp_recv>
	}
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200007bc 	.word	0x200007bc
 8002fbc:	2000003c 	.word	0x2000003c
 8002fc0:	200007c0 	.word	0x200007c0
 8002fc4:	20000050 	.word	0x20000050
 8002fc8:	200007c4 	.word	0x200007c4
 8002fcc:	08003045 	.word	0x08003045

08002fd0 <udpClient_send>:


void udpClient_send(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
  struct pbuf *txBuf;

  int len = sizeof(udp_tx_buffer);
 8002fd6:	2351      	movs	r3, #81	@ 0x51
 8002fd8:	607b      	str	r3, [r7, #4]

  memcpy(udp_tx_buffer +  3, &udp_tx, sizeof(udpTx_t));
 8002fda:	4b14      	ldr	r3, [pc, #80]	@ (800302c <udpClient_send+0x5c>)
 8002fdc:	2248      	movs	r2, #72	@ 0x48
 8002fde:	4914      	ldr	r1, [pc, #80]	@ (8003030 <udpClient_send+0x60>)
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f011 fb22 	bl	801462a <memcpy>

  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_POOL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8002fee:	4619      	mov	r1, r3
 8002ff0:	2036      	movs	r0, #54	@ 0x36
 8002ff2:	f008 f8ed 	bl	800b1d0 <pbuf_alloc>
 8002ff6:	6038      	str	r0, [r7, #0]

  if (txBuf != NULL)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d012      	beq.n	8003024 <udpClient_send+0x54>
  {
    pbuf_take(txBuf, udp_tx_buffer, len);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	b29b      	uxth	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	490b      	ldr	r1, [pc, #44]	@ (8003034 <udpClient_send+0x64>)
 8003006:	6838      	ldr	r0, [r7, #0]
 8003008:	f008 fe32 	bl	800bc70 <pbuf_take>

    udp_sendto(upcb, txBuf, &pcIPaddr, pc_addr.port);
 800300c:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <udpClient_send+0x68>)
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	4b0a      	ldr	r3, [pc, #40]	@ (800303c <udpClient_send+0x6c>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	b29b      	uxth	r3, r3
 8003016:	4a0a      	ldr	r2, [pc, #40]	@ (8003040 <udpClient_send+0x70>)
 8003018:	6839      	ldr	r1, [r7, #0]
 800301a:	f00e fb51 	bl	80116c0 <udp_sendto>

    pbuf_free(txBuf);
 800301e:	6838      	ldr	r0, [r7, #0]
 8003020:	f008 fbba 	bl	800b798 <pbuf_free>
  }
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000067 	.word	0x20000067
 8003030:	200007c8 	.word	0x200007c8
 8003034:	20000064 	.word	0x20000064
 8003038:	200007bc 	.word	0x200007bc
 800303c:	20000050 	.word	0x20000050
 8003040:	200007c4 	.word	0x200007c4

08003044 <udp_receive_callback>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	memcpy(udp_rx_buffer, p->payload, p->len);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6859      	ldr	r1, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	895b      	ldrh	r3, [r3, #10]
 800305a:	461a      	mov	r2, r3
 800305c:	4811      	ldr	r0, [pc, #68]	@ (80030a4 <udp_receive_callback+0x60>)
 800305e:	f011 fae4 	bl	801462a <memcpy>

	memcpy(&udp_rx, udp_rx_buffer +  3, sizeof(udpRx_t));
 8003062:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <udp_receive_callback+0x64>)
 8003064:	221a      	movs	r2, #26
 8003066:	4619      	mov	r1, r3
 8003068:	4810      	ldr	r0, [pc, #64]	@ (80030ac <udp_receive_callback+0x68>)
 800306a:	f011 fade 	bl	801462a <memcpy>
//	memcpy(&udp_rx.rotation_setpoint, udp_rx_buffer + 11, 2);
//	memcpy(&udp_rx.horizontal_setpoint, udp_rx_buffer + 13, 2);
//	memcpy(&udp_rx.vertical_setpoint, udp_rx_buffer + 15, 2);
//	memcpy(&udp_rx.relay_state, udp_rx_buffer + 17, 1);

	for(int i = 0; i < 10; i++)
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e00d      	b.n	8003090 <udp_receive_callback+0x4c>
	{
		memcpy(&udp_rx.indicator[i], udp_rx_buffer + 18 + i, 1);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	3308      	adds	r3, #8
 8003078:	4a0c      	ldr	r2, [pc, #48]	@ (80030ac <udp_receive_callback+0x68>)
 800307a:	4413      	add	r3, r2
 800307c:	3307      	adds	r3, #7
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	3212      	adds	r2, #18
 8003082:	4908      	ldr	r1, [pc, #32]	@ (80030a4 <udp_receive_callback+0x60>)
 8003084:	440a      	add	r2, r1
 8003086:	7812      	ldrb	r2, [r2, #0]
 8003088:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	3301      	adds	r3, #1
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b09      	cmp	r3, #9
 8003094:	ddee      	ble.n	8003074 <udp_receive_callback+0x30>
	}

	pbuf_free(p);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f008 fb7e 	bl	800b798 <pbuf_free>
}
 800309c:	bf00      	nop
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2000082c 	.word	0x2000082c
 80030a8:	2000082f 	.word	0x2000082f
 80030ac:	20000810 	.word	0x20000810

080030b0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <MX_UART4_Init+0x4c>)
 80030b6:	4a12      	ldr	r2, [pc, #72]	@ (8003100 <MX_UART4_Init+0x50>)
 80030b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80030ba:	4b10      	ldr	r3, [pc, #64]	@ (80030fc <MX_UART4_Init+0x4c>)
 80030bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80030c2:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <MX_UART4_Init+0x4c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80030c8:	4b0c      	ldr	r3, [pc, #48]	@ (80030fc <MX_UART4_Init+0x4c>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80030ce:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <MX_UART4_Init+0x4c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80030d4:	4b09      	ldr	r3, [pc, #36]	@ (80030fc <MX_UART4_Init+0x4c>)
 80030d6:	220c      	movs	r2, #12
 80030d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030da:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <MX_UART4_Init+0x4c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e0:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <MX_UART4_Init+0x4c>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80030e6:	4805      	ldr	r0, [pc, #20]	@ (80030fc <MX_UART4_Init+0x4c>)
 80030e8:	f005 f870 	bl	80081cc <HAL_UART_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80030f2:	f7fe fbd5 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000880 	.word	0x20000880
 8003100:	40004c00 	.word	0x40004c00

08003104 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003108:	4b11      	ldr	r3, [pc, #68]	@ (8003150 <MX_UART5_Init+0x4c>)
 800310a:	4a12      	ldr	r2, [pc, #72]	@ (8003154 <MX_UART5_Init+0x50>)
 800310c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800310e:	4b10      	ldr	r3, [pc, #64]	@ (8003150 <MX_UART5_Init+0x4c>)
 8003110:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003114:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003116:	4b0e      	ldr	r3, [pc, #56]	@ (8003150 <MX_UART5_Init+0x4c>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800311c:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <MX_UART5_Init+0x4c>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003122:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <MX_UART5_Init+0x4c>)
 8003124:	2200      	movs	r2, #0
 8003126:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003128:	4b09      	ldr	r3, [pc, #36]	@ (8003150 <MX_UART5_Init+0x4c>)
 800312a:	220c      	movs	r2, #12
 800312c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800312e:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <MX_UART5_Init+0x4c>)
 8003130:	2200      	movs	r2, #0
 8003132:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003134:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <MX_UART5_Init+0x4c>)
 8003136:	2200      	movs	r2, #0
 8003138:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800313a:	4805      	ldr	r0, [pc, #20]	@ (8003150 <MX_UART5_Init+0x4c>)
 800313c:	f005 f846 	bl	80081cc <HAL_UART_Init>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003146:	f7fe fbab 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	200008c8 	.word	0x200008c8
 8003154:	40005000 	.word	0x40005000

08003158 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800315c:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <MX_USART1_UART_Init+0x4c>)
 800315e:	4a12      	ldr	r2, [pc, #72]	@ (80031a8 <MX_USART1_UART_Init+0x50>)
 8003160:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003162:	4b10      	ldr	r3, [pc, #64]	@ (80031a4 <MX_USART1_UART_Init+0x4c>)
 8003164:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003168:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800316a:	4b0e      	ldr	r3, [pc, #56]	@ (80031a4 <MX_USART1_UART_Init+0x4c>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003170:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <MX_USART1_UART_Init+0x4c>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003176:	4b0b      	ldr	r3, [pc, #44]	@ (80031a4 <MX_USART1_UART_Init+0x4c>)
 8003178:	2200      	movs	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800317c:	4b09      	ldr	r3, [pc, #36]	@ (80031a4 <MX_USART1_UART_Init+0x4c>)
 800317e:	220c      	movs	r2, #12
 8003180:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003182:	4b08      	ldr	r3, [pc, #32]	@ (80031a4 <MX_USART1_UART_Init+0x4c>)
 8003184:	2200      	movs	r2, #0
 8003186:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003188:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <MX_USART1_UART_Init+0x4c>)
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800318e:	4805      	ldr	r0, [pc, #20]	@ (80031a4 <MX_USART1_UART_Init+0x4c>)
 8003190:	f005 f81c 	bl	80081cc <HAL_UART_Init>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800319a:	f7fe fb81 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000910 	.word	0x20000910
 80031a8:	40011000 	.word	0x40011000

080031ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031b0:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031b2:	4a12      	ldr	r2, [pc, #72]	@ (80031fc <MX_USART2_UART_Init+0x50>)
 80031b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031b6:	4b10      	ldr	r3, [pc, #64]	@ (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031be:	4b0e      	ldr	r3, [pc, #56]	@ (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031c4:	4b0c      	ldr	r3, [pc, #48]	@ (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031ca:	4b0b      	ldr	r3, [pc, #44]	@ (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031d0:	4b09      	ldr	r3, [pc, #36]	@ (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031d2:	220c      	movs	r2, #12
 80031d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031d6:	4b08      	ldr	r3, [pc, #32]	@ (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031dc:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031e2:	4805      	ldr	r0, [pc, #20]	@ (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031e4:	f004 fff2 	bl	80081cc <HAL_UART_Init>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80031ee:	f7fe fb57 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000958 	.word	0x20000958
 80031fc:	40004400 	.word	0x40004400

08003200 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003204:	4b11      	ldr	r3, [pc, #68]	@ (800324c <MX_USART3_UART_Init+0x4c>)
 8003206:	4a12      	ldr	r2, [pc, #72]	@ (8003250 <MX_USART3_UART_Init+0x50>)
 8003208:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800320a:	4b10      	ldr	r3, [pc, #64]	@ (800324c <MX_USART3_UART_Init+0x4c>)
 800320c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003210:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003212:	4b0e      	ldr	r3, [pc, #56]	@ (800324c <MX_USART3_UART_Init+0x4c>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003218:	4b0c      	ldr	r3, [pc, #48]	@ (800324c <MX_USART3_UART_Init+0x4c>)
 800321a:	2200      	movs	r2, #0
 800321c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800321e:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <MX_USART3_UART_Init+0x4c>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003224:	4b09      	ldr	r3, [pc, #36]	@ (800324c <MX_USART3_UART_Init+0x4c>)
 8003226:	220c      	movs	r2, #12
 8003228:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800322a:	4b08      	ldr	r3, [pc, #32]	@ (800324c <MX_USART3_UART_Init+0x4c>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003230:	4b06      	ldr	r3, [pc, #24]	@ (800324c <MX_USART3_UART_Init+0x4c>)
 8003232:	2200      	movs	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003236:	4805      	ldr	r0, [pc, #20]	@ (800324c <MX_USART3_UART_Init+0x4c>)
 8003238:	f004 ffc8 	bl	80081cc <HAL_UART_Init>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003242:	f7fe fb2d 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	200009a0 	.word	0x200009a0
 8003250:	40004800 	.word	0x40004800

08003254 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003258:	4b11      	ldr	r3, [pc, #68]	@ (80032a0 <MX_USART6_UART_Init+0x4c>)
 800325a:	4a12      	ldr	r2, [pc, #72]	@ (80032a4 <MX_USART6_UART_Init+0x50>)
 800325c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800325e:	4b10      	ldr	r3, [pc, #64]	@ (80032a0 <MX_USART6_UART_Init+0x4c>)
 8003260:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003264:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003266:	4b0e      	ldr	r3, [pc, #56]	@ (80032a0 <MX_USART6_UART_Init+0x4c>)
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800326c:	4b0c      	ldr	r3, [pc, #48]	@ (80032a0 <MX_USART6_UART_Init+0x4c>)
 800326e:	2200      	movs	r2, #0
 8003270:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003272:	4b0b      	ldr	r3, [pc, #44]	@ (80032a0 <MX_USART6_UART_Init+0x4c>)
 8003274:	2200      	movs	r2, #0
 8003276:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003278:	4b09      	ldr	r3, [pc, #36]	@ (80032a0 <MX_USART6_UART_Init+0x4c>)
 800327a:	220c      	movs	r2, #12
 800327c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800327e:	4b08      	ldr	r3, [pc, #32]	@ (80032a0 <MX_USART6_UART_Init+0x4c>)
 8003280:	2200      	movs	r2, #0
 8003282:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003284:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <MX_USART6_UART_Init+0x4c>)
 8003286:	2200      	movs	r2, #0
 8003288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800328a:	4805      	ldr	r0, [pc, #20]	@ (80032a0 <MX_USART6_UART_Init+0x4c>)
 800328c:	f004 ff9e 	bl	80081cc <HAL_UART_Init>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003296:	f7fe fb03 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	200009e8 	.word	0x200009e8
 80032a4:	40011400 	.word	0x40011400

080032a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b096      	sub	sp, #88	@ 0x58
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a4a      	ldr	r2, [pc, #296]	@ (80033f0 <HAL_UART_MspInit+0x148>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	f040 80a0 	bne.w	800340c <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80032cc:	2300      	movs	r3, #0
 80032ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80032d0:	4b48      	ldr	r3, [pc, #288]	@ (80033f4 <HAL_UART_MspInit+0x14c>)
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	4a47      	ldr	r2, [pc, #284]	@ (80033f4 <HAL_UART_MspInit+0x14c>)
 80032d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80032da:	6413      	str	r3, [r2, #64]	@ 0x40
 80032dc:	4b45      	ldr	r3, [pc, #276]	@ (80033f4 <HAL_UART_MspInit+0x14c>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80032e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e8:	2300      	movs	r3, #0
 80032ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032ec:	4b41      	ldr	r3, [pc, #260]	@ (80033f4 <HAL_UART_MspInit+0x14c>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	4a40      	ldr	r2, [pc, #256]	@ (80033f4 <HAL_UART_MspInit+0x14c>)
 80032f2:	f043 0304 	orr.w	r3, r3, #4
 80032f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f8:	4b3e      	ldr	r3, [pc, #248]	@ (80033f4 <HAL_UART_MspInit+0x14c>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003304:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003308:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330a:	2302      	movs	r3, #2
 800330c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003312:	2303      	movs	r3, #3
 8003314:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003316:	2308      	movs	r3, #8
 8003318:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800331a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800331e:	4619      	mov	r1, r3
 8003320:	4835      	ldr	r0, [pc, #212]	@ (80033f8 <HAL_UART_MspInit+0x150>)
 8003322:	f002 ff65 	bl	80061f0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003326:	4b35      	ldr	r3, [pc, #212]	@ (80033fc <HAL_UART_MspInit+0x154>)
 8003328:	4a35      	ldr	r2, [pc, #212]	@ (8003400 <HAL_UART_MspInit+0x158>)
 800332a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800332c:	4b33      	ldr	r3, [pc, #204]	@ (80033fc <HAL_UART_MspInit+0x154>)
 800332e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003332:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003334:	4b31      	ldr	r3, [pc, #196]	@ (80033fc <HAL_UART_MspInit+0x154>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800333a:	4b30      	ldr	r3, [pc, #192]	@ (80033fc <HAL_UART_MspInit+0x154>)
 800333c:	2200      	movs	r2, #0
 800333e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003340:	4b2e      	ldr	r3, [pc, #184]	@ (80033fc <HAL_UART_MspInit+0x154>)
 8003342:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003346:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003348:	4b2c      	ldr	r3, [pc, #176]	@ (80033fc <HAL_UART_MspInit+0x154>)
 800334a:	2200      	movs	r2, #0
 800334c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800334e:	4b2b      	ldr	r3, [pc, #172]	@ (80033fc <HAL_UART_MspInit+0x154>)
 8003350:	2200      	movs	r2, #0
 8003352:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003354:	4b29      	ldr	r3, [pc, #164]	@ (80033fc <HAL_UART_MspInit+0x154>)
 8003356:	2200      	movs	r2, #0
 8003358:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800335a:	4b28      	ldr	r3, [pc, #160]	@ (80033fc <HAL_UART_MspInit+0x154>)
 800335c:	2200      	movs	r2, #0
 800335e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003360:	4b26      	ldr	r3, [pc, #152]	@ (80033fc <HAL_UART_MspInit+0x154>)
 8003362:	2200      	movs	r2, #0
 8003364:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003366:	4825      	ldr	r0, [pc, #148]	@ (80033fc <HAL_UART_MspInit+0x154>)
 8003368:	f001 fa00 	bl	800476c <HAL_DMA_Init>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003372:	f7fe fa95 	bl	80018a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a20      	ldr	r2, [pc, #128]	@ (80033fc <HAL_UART_MspInit+0x154>)
 800337a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800337c:	4a1f      	ldr	r2, [pc, #124]	@ (80033fc <HAL_UART_MspInit+0x154>)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003382:	4b20      	ldr	r3, [pc, #128]	@ (8003404 <HAL_UART_MspInit+0x15c>)
 8003384:	4a20      	ldr	r2, [pc, #128]	@ (8003408 <HAL_UART_MspInit+0x160>)
 8003386:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8003388:	4b1e      	ldr	r3, [pc, #120]	@ (8003404 <HAL_UART_MspInit+0x15c>)
 800338a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800338e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003390:	4b1c      	ldr	r3, [pc, #112]	@ (8003404 <HAL_UART_MspInit+0x15c>)
 8003392:	2240      	movs	r2, #64	@ 0x40
 8003394:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003396:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <HAL_UART_MspInit+0x15c>)
 8003398:	2200      	movs	r2, #0
 800339a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800339c:	4b19      	ldr	r3, [pc, #100]	@ (8003404 <HAL_UART_MspInit+0x15c>)
 800339e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033a2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033a4:	4b17      	ldr	r3, [pc, #92]	@ (8003404 <HAL_UART_MspInit+0x15c>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033aa:	4b16      	ldr	r3, [pc, #88]	@ (8003404 <HAL_UART_MspInit+0x15c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80033b0:	4b14      	ldr	r3, [pc, #80]	@ (8003404 <HAL_UART_MspInit+0x15c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033b6:	4b13      	ldr	r3, [pc, #76]	@ (8003404 <HAL_UART_MspInit+0x15c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033bc:	4b11      	ldr	r3, [pc, #68]	@ (8003404 <HAL_UART_MspInit+0x15c>)
 80033be:	2200      	movs	r2, #0
 80033c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80033c2:	4810      	ldr	r0, [pc, #64]	@ (8003404 <HAL_UART_MspInit+0x15c>)
 80033c4:	f001 f9d2 	bl	800476c <HAL_DMA_Init>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80033ce:	f7fe fa67 	bl	80018a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003404 <HAL_UART_MspInit+0x15c>)
 80033d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80033d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003404 <HAL_UART_MspInit+0x15c>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2100      	movs	r1, #0
 80033e2:	2034      	movs	r0, #52	@ 0x34
 80033e4:	f001 f98b 	bl	80046fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80033e8:	2034      	movs	r0, #52	@ 0x34
 80033ea:	f001 f9a4 	bl	8004736 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80033ee:	e375      	b.n	8003adc <HAL_UART_MspInit+0x834>
 80033f0:	40004c00 	.word	0x40004c00
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40020800 	.word	0x40020800
 80033fc:	20000a30 	.word	0x20000a30
 8003400:	40026040 	.word	0x40026040
 8003404:	20000a90 	.word	0x20000a90
 8003408:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a5a      	ldr	r2, [pc, #360]	@ (800357c <HAL_UART_MspInit+0x2d4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	f040 80c2 	bne.w	800359c <HAL_UART_MspInit+0x2f4>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003418:	2300      	movs	r3, #0
 800341a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800341c:	4b58      	ldr	r3, [pc, #352]	@ (8003580 <HAL_UART_MspInit+0x2d8>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	4a57      	ldr	r2, [pc, #348]	@ (8003580 <HAL_UART_MspInit+0x2d8>)
 8003422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003426:	6413      	str	r3, [r2, #64]	@ 0x40
 8003428:	4b55      	ldr	r3, [pc, #340]	@ (8003580 <HAL_UART_MspInit+0x2d8>)
 800342a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003430:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003434:	2300      	movs	r3, #0
 8003436:	637b      	str	r3, [r7, #52]	@ 0x34
 8003438:	4b51      	ldr	r3, [pc, #324]	@ (8003580 <HAL_UART_MspInit+0x2d8>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343c:	4a50      	ldr	r2, [pc, #320]	@ (8003580 <HAL_UART_MspInit+0x2d8>)
 800343e:	f043 0304 	orr.w	r3, r3, #4
 8003442:	6313      	str	r3, [r2, #48]	@ 0x30
 8003444:	4b4e      	ldr	r3, [pc, #312]	@ (8003580 <HAL_UART_MspInit+0x2d8>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	637b      	str	r3, [r7, #52]	@ 0x34
 800344e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003450:	2300      	movs	r3, #0
 8003452:	633b      	str	r3, [r7, #48]	@ 0x30
 8003454:	4b4a      	ldr	r3, [pc, #296]	@ (8003580 <HAL_UART_MspInit+0x2d8>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003458:	4a49      	ldr	r2, [pc, #292]	@ (8003580 <HAL_UART_MspInit+0x2d8>)
 800345a:	f043 0308 	orr.w	r3, r3, #8
 800345e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003460:	4b47      	ldr	r3, [pc, #284]	@ (8003580 <HAL_UART_MspInit+0x2d8>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	633b      	str	r3, [r7, #48]	@ 0x30
 800346a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800346c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003470:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003472:	2302      	movs	r3, #2
 8003474:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800347a:	2303      	movs	r3, #3
 800347c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800347e:	2308      	movs	r3, #8
 8003480:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003482:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003486:	4619      	mov	r1, r3
 8003488:	483e      	ldr	r0, [pc, #248]	@ (8003584 <HAL_UART_MspInit+0x2dc>)
 800348a:	f002 feb1 	bl	80061f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800348e:	2304      	movs	r3, #4
 8003490:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	2302      	movs	r3, #2
 8003494:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349a:	2303      	movs	r3, #3
 800349c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800349e:	2308      	movs	r3, #8
 80034a0:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034a2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80034a6:	4619      	mov	r1, r3
 80034a8:	4837      	ldr	r0, [pc, #220]	@ (8003588 <HAL_UART_MspInit+0x2e0>)
 80034aa:	f002 fea1 	bl	80061f0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80034ae:	4b37      	ldr	r3, [pc, #220]	@ (800358c <HAL_UART_MspInit+0x2e4>)
 80034b0:	4a37      	ldr	r2, [pc, #220]	@ (8003590 <HAL_UART_MspInit+0x2e8>)
 80034b2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80034b4:	4b35      	ldr	r3, [pc, #212]	@ (800358c <HAL_UART_MspInit+0x2e4>)
 80034b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80034ba:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034bc:	4b33      	ldr	r3, [pc, #204]	@ (800358c <HAL_UART_MspInit+0x2e4>)
 80034be:	2200      	movs	r2, #0
 80034c0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c2:	4b32      	ldr	r3, [pc, #200]	@ (800358c <HAL_UART_MspInit+0x2e4>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034c8:	4b30      	ldr	r3, [pc, #192]	@ (800358c <HAL_UART_MspInit+0x2e4>)
 80034ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034ce:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034d0:	4b2e      	ldr	r3, [pc, #184]	@ (800358c <HAL_UART_MspInit+0x2e4>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034d6:	4b2d      	ldr	r3, [pc, #180]	@ (800358c <HAL_UART_MspInit+0x2e4>)
 80034d8:	2200      	movs	r2, #0
 80034da:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80034dc:	4b2b      	ldr	r3, [pc, #172]	@ (800358c <HAL_UART_MspInit+0x2e4>)
 80034de:	2200      	movs	r2, #0
 80034e0:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80034e2:	4b2a      	ldr	r3, [pc, #168]	@ (800358c <HAL_UART_MspInit+0x2e4>)
 80034e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034e8:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034ea:	4b28      	ldr	r3, [pc, #160]	@ (800358c <HAL_UART_MspInit+0x2e4>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80034f0:	4826      	ldr	r0, [pc, #152]	@ (800358c <HAL_UART_MspInit+0x2e4>)
 80034f2:	f001 f93b 	bl	800476c <HAL_DMA_Init>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80034fc:	f7fe f9d0 	bl	80018a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a22      	ldr	r2, [pc, #136]	@ (800358c <HAL_UART_MspInit+0x2e4>)
 8003504:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003506:	4a21      	ldr	r2, [pc, #132]	@ (800358c <HAL_UART_MspInit+0x2e4>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800350c:	4b21      	ldr	r3, [pc, #132]	@ (8003594 <HAL_UART_MspInit+0x2ec>)
 800350e:	4a22      	ldr	r2, [pc, #136]	@ (8003598 <HAL_UART_MspInit+0x2f0>)
 8003510:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8003512:	4b20      	ldr	r3, [pc, #128]	@ (8003594 <HAL_UART_MspInit+0x2ec>)
 8003514:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003518:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800351a:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <HAL_UART_MspInit+0x2ec>)
 800351c:	2240      	movs	r2, #64	@ 0x40
 800351e:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003520:	4b1c      	ldr	r3, [pc, #112]	@ (8003594 <HAL_UART_MspInit+0x2ec>)
 8003522:	2200      	movs	r2, #0
 8003524:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003526:	4b1b      	ldr	r3, [pc, #108]	@ (8003594 <HAL_UART_MspInit+0x2ec>)
 8003528:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800352c:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800352e:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <HAL_UART_MspInit+0x2ec>)
 8003530:	2200      	movs	r2, #0
 8003532:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003534:	4b17      	ldr	r3, [pc, #92]	@ (8003594 <HAL_UART_MspInit+0x2ec>)
 8003536:	2200      	movs	r2, #0
 8003538:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800353a:	4b16      	ldr	r3, [pc, #88]	@ (8003594 <HAL_UART_MspInit+0x2ec>)
 800353c:	2200      	movs	r2, #0
 800353e:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003540:	4b14      	ldr	r3, [pc, #80]	@ (8003594 <HAL_UART_MspInit+0x2ec>)
 8003542:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003546:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003548:	4b12      	ldr	r3, [pc, #72]	@ (8003594 <HAL_UART_MspInit+0x2ec>)
 800354a:	2200      	movs	r2, #0
 800354c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800354e:	4811      	ldr	r0, [pc, #68]	@ (8003594 <HAL_UART_MspInit+0x2ec>)
 8003550:	f001 f90c 	bl	800476c <HAL_DMA_Init>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_UART_MspInit+0x2b6>
      Error_Handler();
 800355a:	f7fe f9a1 	bl	80018a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a0c      	ldr	r2, [pc, #48]	@ (8003594 <HAL_UART_MspInit+0x2ec>)
 8003562:	639a      	str	r2, [r3, #56]	@ 0x38
 8003564:	4a0b      	ldr	r2, [pc, #44]	@ (8003594 <HAL_UART_MspInit+0x2ec>)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800356a:	2200      	movs	r2, #0
 800356c:	2100      	movs	r1, #0
 800356e:	2035      	movs	r0, #53	@ 0x35
 8003570:	f001 f8c5 	bl	80046fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003574:	2035      	movs	r0, #53	@ 0x35
 8003576:	f001 f8de 	bl	8004736 <HAL_NVIC_EnableIRQ>
}
 800357a:	e2af      	b.n	8003adc <HAL_UART_MspInit+0x834>
 800357c:	40005000 	.word	0x40005000
 8003580:	40023800 	.word	0x40023800
 8003584:	40020800 	.word	0x40020800
 8003588:	40020c00 	.word	0x40020c00
 800358c:	20000af0 	.word	0x20000af0
 8003590:	40026010 	.word	0x40026010
 8003594:	20000b50 	.word	0x20000b50
 8003598:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a96      	ldr	r2, [pc, #600]	@ (80037fc <HAL_UART_MspInit+0x554>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	f040 8092 	bne.w	80036cc <HAL_UART_MspInit+0x424>
    __HAL_RCC_USART1_CLK_ENABLE();
 80035a8:	2300      	movs	r3, #0
 80035aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ac:	4b94      	ldr	r3, [pc, #592]	@ (8003800 <HAL_UART_MspInit+0x558>)
 80035ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b0:	4a93      	ldr	r2, [pc, #588]	@ (8003800 <HAL_UART_MspInit+0x558>)
 80035b2:	f043 0310 	orr.w	r3, r3, #16
 80035b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80035b8:	4b91      	ldr	r3, [pc, #580]	@ (8003800 <HAL_UART_MspInit+0x558>)
 80035ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c4:	2300      	movs	r3, #0
 80035c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035c8:	4b8d      	ldr	r3, [pc, #564]	@ (8003800 <HAL_UART_MspInit+0x558>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	4a8c      	ldr	r2, [pc, #560]	@ (8003800 <HAL_UART_MspInit+0x558>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d4:	4b8a      	ldr	r3, [pc, #552]	@ (8003800 <HAL_UART_MspInit+0x558>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80035e0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80035e4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e6:	2302      	movs	r3, #2
 80035e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ee:	2303      	movs	r3, #3
 80035f0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035f2:	2307      	movs	r3, #7
 80035f4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80035fa:	4619      	mov	r1, r3
 80035fc:	4881      	ldr	r0, [pc, #516]	@ (8003804 <HAL_UART_MspInit+0x55c>)
 80035fe:	f002 fdf7 	bl	80061f0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003602:	4b81      	ldr	r3, [pc, #516]	@ (8003808 <HAL_UART_MspInit+0x560>)
 8003604:	4a81      	ldr	r2, [pc, #516]	@ (800380c <HAL_UART_MspInit+0x564>)
 8003606:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003608:	4b7f      	ldr	r3, [pc, #508]	@ (8003808 <HAL_UART_MspInit+0x560>)
 800360a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800360e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003610:	4b7d      	ldr	r3, [pc, #500]	@ (8003808 <HAL_UART_MspInit+0x560>)
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003616:	4b7c      	ldr	r3, [pc, #496]	@ (8003808 <HAL_UART_MspInit+0x560>)
 8003618:	2200      	movs	r2, #0
 800361a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800361c:	4b7a      	ldr	r3, [pc, #488]	@ (8003808 <HAL_UART_MspInit+0x560>)
 800361e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003622:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003624:	4b78      	ldr	r3, [pc, #480]	@ (8003808 <HAL_UART_MspInit+0x560>)
 8003626:	2200      	movs	r2, #0
 8003628:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800362a:	4b77      	ldr	r3, [pc, #476]	@ (8003808 <HAL_UART_MspInit+0x560>)
 800362c:	2200      	movs	r2, #0
 800362e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003630:	4b75      	ldr	r3, [pc, #468]	@ (8003808 <HAL_UART_MspInit+0x560>)
 8003632:	2200      	movs	r2, #0
 8003634:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003636:	4b74      	ldr	r3, [pc, #464]	@ (8003808 <HAL_UART_MspInit+0x560>)
 8003638:	2200      	movs	r2, #0
 800363a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800363c:	4b72      	ldr	r3, [pc, #456]	@ (8003808 <HAL_UART_MspInit+0x560>)
 800363e:	2200      	movs	r2, #0
 8003640:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003642:	4871      	ldr	r0, [pc, #452]	@ (8003808 <HAL_UART_MspInit+0x560>)
 8003644:	f001 f892 	bl	800476c <HAL_DMA_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_UART_MspInit+0x3aa>
      Error_Handler();
 800364e:	f7fe f927 	bl	80018a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a6c      	ldr	r2, [pc, #432]	@ (8003808 <HAL_UART_MspInit+0x560>)
 8003656:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003658:	4a6b      	ldr	r2, [pc, #428]	@ (8003808 <HAL_UART_MspInit+0x560>)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800365e:	4b6c      	ldr	r3, [pc, #432]	@ (8003810 <HAL_UART_MspInit+0x568>)
 8003660:	4a6c      	ldr	r2, [pc, #432]	@ (8003814 <HAL_UART_MspInit+0x56c>)
 8003662:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003664:	4b6a      	ldr	r3, [pc, #424]	@ (8003810 <HAL_UART_MspInit+0x568>)
 8003666:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800366a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800366c:	4b68      	ldr	r3, [pc, #416]	@ (8003810 <HAL_UART_MspInit+0x568>)
 800366e:	2240      	movs	r2, #64	@ 0x40
 8003670:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003672:	4b67      	ldr	r3, [pc, #412]	@ (8003810 <HAL_UART_MspInit+0x568>)
 8003674:	2200      	movs	r2, #0
 8003676:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003678:	4b65      	ldr	r3, [pc, #404]	@ (8003810 <HAL_UART_MspInit+0x568>)
 800367a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800367e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003680:	4b63      	ldr	r3, [pc, #396]	@ (8003810 <HAL_UART_MspInit+0x568>)
 8003682:	2200      	movs	r2, #0
 8003684:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003686:	4b62      	ldr	r3, [pc, #392]	@ (8003810 <HAL_UART_MspInit+0x568>)
 8003688:	2200      	movs	r2, #0
 800368a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800368c:	4b60      	ldr	r3, [pc, #384]	@ (8003810 <HAL_UART_MspInit+0x568>)
 800368e:	2200      	movs	r2, #0
 8003690:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003692:	4b5f      	ldr	r3, [pc, #380]	@ (8003810 <HAL_UART_MspInit+0x568>)
 8003694:	2200      	movs	r2, #0
 8003696:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003698:	4b5d      	ldr	r3, [pc, #372]	@ (8003810 <HAL_UART_MspInit+0x568>)
 800369a:	2200      	movs	r2, #0
 800369c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800369e:	485c      	ldr	r0, [pc, #368]	@ (8003810 <HAL_UART_MspInit+0x568>)
 80036a0:	f001 f864 	bl	800476c <HAL_DMA_Init>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_UART_MspInit+0x406>
      Error_Handler();
 80036aa:	f7fe f8f9 	bl	80018a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a57      	ldr	r2, [pc, #348]	@ (8003810 <HAL_UART_MspInit+0x568>)
 80036b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80036b4:	4a56      	ldr	r2, [pc, #344]	@ (8003810 <HAL_UART_MspInit+0x568>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80036ba:	2200      	movs	r2, #0
 80036bc:	2100      	movs	r1, #0
 80036be:	2025      	movs	r0, #37	@ 0x25
 80036c0:	f001 f81d 	bl	80046fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036c4:	2025      	movs	r0, #37	@ 0x25
 80036c6:	f001 f836 	bl	8004736 <HAL_NVIC_EnableIRQ>
}
 80036ca:	e207      	b.n	8003adc <HAL_UART_MspInit+0x834>
  else if(uartHandle->Instance==USART2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a51      	ldr	r2, [pc, #324]	@ (8003818 <HAL_UART_MspInit+0x570>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	f040 80ac 	bne.w	8003830 <HAL_UART_MspInit+0x588>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036d8:	2300      	movs	r3, #0
 80036da:	627b      	str	r3, [r7, #36]	@ 0x24
 80036dc:	4b48      	ldr	r3, [pc, #288]	@ (8003800 <HAL_UART_MspInit+0x558>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e0:	4a47      	ldr	r2, [pc, #284]	@ (8003800 <HAL_UART_MspInit+0x558>)
 80036e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80036e8:	4b45      	ldr	r3, [pc, #276]	@ (8003800 <HAL_UART_MspInit+0x558>)
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036f4:	2300      	movs	r3, #0
 80036f6:	623b      	str	r3, [r7, #32]
 80036f8:	4b41      	ldr	r3, [pc, #260]	@ (8003800 <HAL_UART_MspInit+0x558>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fc:	4a40      	ldr	r2, [pc, #256]	@ (8003800 <HAL_UART_MspInit+0x558>)
 80036fe:	f043 0308 	orr.w	r3, r3, #8
 8003702:	6313      	str	r3, [r2, #48]	@ 0x30
 8003704:	4b3e      	ldr	r3, [pc, #248]	@ (8003800 <HAL_UART_MspInit+0x558>)
 8003706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	623b      	str	r3, [r7, #32]
 800370e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003710:	2360      	movs	r3, #96	@ 0x60
 8003712:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003714:	2302      	movs	r3, #2
 8003716:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003718:	2300      	movs	r3, #0
 800371a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371c:	2303      	movs	r3, #3
 800371e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003720:	2307      	movs	r3, #7
 8003722:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003724:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003728:	4619      	mov	r1, r3
 800372a:	483c      	ldr	r0, [pc, #240]	@ (800381c <HAL_UART_MspInit+0x574>)
 800372c:	f002 fd60 	bl	80061f0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003730:	4b3b      	ldr	r3, [pc, #236]	@ (8003820 <HAL_UART_MspInit+0x578>)
 8003732:	4a3c      	ldr	r2, [pc, #240]	@ (8003824 <HAL_UART_MspInit+0x57c>)
 8003734:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003736:	4b3a      	ldr	r3, [pc, #232]	@ (8003820 <HAL_UART_MspInit+0x578>)
 8003738:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800373c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800373e:	4b38      	ldr	r3, [pc, #224]	@ (8003820 <HAL_UART_MspInit+0x578>)
 8003740:	2200      	movs	r2, #0
 8003742:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003744:	4b36      	ldr	r3, [pc, #216]	@ (8003820 <HAL_UART_MspInit+0x578>)
 8003746:	2200      	movs	r2, #0
 8003748:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800374a:	4b35      	ldr	r3, [pc, #212]	@ (8003820 <HAL_UART_MspInit+0x578>)
 800374c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003750:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003752:	4b33      	ldr	r3, [pc, #204]	@ (8003820 <HAL_UART_MspInit+0x578>)
 8003754:	2200      	movs	r2, #0
 8003756:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003758:	4b31      	ldr	r3, [pc, #196]	@ (8003820 <HAL_UART_MspInit+0x578>)
 800375a:	2200      	movs	r2, #0
 800375c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800375e:	4b30      	ldr	r3, [pc, #192]	@ (8003820 <HAL_UART_MspInit+0x578>)
 8003760:	2200      	movs	r2, #0
 8003762:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003764:	4b2e      	ldr	r3, [pc, #184]	@ (8003820 <HAL_UART_MspInit+0x578>)
 8003766:	2200      	movs	r2, #0
 8003768:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800376a:	4b2d      	ldr	r3, [pc, #180]	@ (8003820 <HAL_UART_MspInit+0x578>)
 800376c:	2200      	movs	r2, #0
 800376e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003770:	482b      	ldr	r0, [pc, #172]	@ (8003820 <HAL_UART_MspInit+0x578>)
 8003772:	f000 fffb 	bl	800476c <HAL_DMA_Init>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_UART_MspInit+0x4d8>
      Error_Handler();
 800377c:	f7fe f890 	bl	80018a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a27      	ldr	r2, [pc, #156]	@ (8003820 <HAL_UART_MspInit+0x578>)
 8003784:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003786:	4a26      	ldr	r2, [pc, #152]	@ (8003820 <HAL_UART_MspInit+0x578>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800378c:	4b26      	ldr	r3, [pc, #152]	@ (8003828 <HAL_UART_MspInit+0x580>)
 800378e:	4a27      	ldr	r2, [pc, #156]	@ (800382c <HAL_UART_MspInit+0x584>)
 8003790:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003792:	4b25      	ldr	r3, [pc, #148]	@ (8003828 <HAL_UART_MspInit+0x580>)
 8003794:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003798:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800379a:	4b23      	ldr	r3, [pc, #140]	@ (8003828 <HAL_UART_MspInit+0x580>)
 800379c:	2240      	movs	r2, #64	@ 0x40
 800379e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037a0:	4b21      	ldr	r3, [pc, #132]	@ (8003828 <HAL_UART_MspInit+0x580>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037a6:	4b20      	ldr	r3, [pc, #128]	@ (8003828 <HAL_UART_MspInit+0x580>)
 80037a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003828 <HAL_UART_MspInit+0x580>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003828 <HAL_UART_MspInit+0x580>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80037ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003828 <HAL_UART_MspInit+0x580>)
 80037bc:	2200      	movs	r2, #0
 80037be:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037c0:	4b19      	ldr	r3, [pc, #100]	@ (8003828 <HAL_UART_MspInit+0x580>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037c6:	4b18      	ldr	r3, [pc, #96]	@ (8003828 <HAL_UART_MspInit+0x580>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80037cc:	4816      	ldr	r0, [pc, #88]	@ (8003828 <HAL_UART_MspInit+0x580>)
 80037ce:	f000 ffcd 	bl	800476c <HAL_DMA_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_UART_MspInit+0x534>
      Error_Handler();
 80037d8:	f7fe f862 	bl	80018a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a12      	ldr	r2, [pc, #72]	@ (8003828 <HAL_UART_MspInit+0x580>)
 80037e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80037e2:	4a11      	ldr	r2, [pc, #68]	@ (8003828 <HAL_UART_MspInit+0x580>)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037e8:	2200      	movs	r2, #0
 80037ea:	2100      	movs	r1, #0
 80037ec:	2026      	movs	r0, #38	@ 0x26
 80037ee:	f000 ff86 	bl	80046fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037f2:	2026      	movs	r0, #38	@ 0x26
 80037f4:	f000 ff9f 	bl	8004736 <HAL_NVIC_EnableIRQ>
}
 80037f8:	e170      	b.n	8003adc <HAL_UART_MspInit+0x834>
 80037fa:	bf00      	nop
 80037fc:	40011000 	.word	0x40011000
 8003800:	40023800 	.word	0x40023800
 8003804:	40020000 	.word	0x40020000
 8003808:	20000bb0 	.word	0x20000bb0
 800380c:	40026440 	.word	0x40026440
 8003810:	20000c10 	.word	0x20000c10
 8003814:	400264b8 	.word	0x400264b8
 8003818:	40004400 	.word	0x40004400
 800381c:	40020c00 	.word	0x40020c00
 8003820:	20000c70 	.word	0x20000c70
 8003824:	40026088 	.word	0x40026088
 8003828:	20000cd0 	.word	0x20000cd0
 800382c:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a5a      	ldr	r2, [pc, #360]	@ (80039a0 <HAL_UART_MspInit+0x6f8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	f040 80c2 	bne.w	80039c0 <HAL_UART_MspInit+0x718>
    __HAL_RCC_USART3_CLK_ENABLE();
 800383c:	2300      	movs	r3, #0
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	4b58      	ldr	r3, [pc, #352]	@ (80039a4 <HAL_UART_MspInit+0x6fc>)
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	4a57      	ldr	r2, [pc, #348]	@ (80039a4 <HAL_UART_MspInit+0x6fc>)
 8003846:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800384a:	6413      	str	r3, [r2, #64]	@ 0x40
 800384c:	4b55      	ldr	r3, [pc, #340]	@ (80039a4 <HAL_UART_MspInit+0x6fc>)
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003858:	2300      	movs	r3, #0
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	4b51      	ldr	r3, [pc, #324]	@ (80039a4 <HAL_UART_MspInit+0x6fc>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003860:	4a50      	ldr	r2, [pc, #320]	@ (80039a4 <HAL_UART_MspInit+0x6fc>)
 8003862:	f043 0302 	orr.w	r3, r3, #2
 8003866:	6313      	str	r3, [r2, #48]	@ 0x30
 8003868:	4b4e      	ldr	r3, [pc, #312]	@ (80039a4 <HAL_UART_MspInit+0x6fc>)
 800386a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	4b4a      	ldr	r3, [pc, #296]	@ (80039a4 <HAL_UART_MspInit+0x6fc>)
 800387a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387c:	4a49      	ldr	r2, [pc, #292]	@ (80039a4 <HAL_UART_MspInit+0x6fc>)
 800387e:	f043 0308 	orr.w	r3, r3, #8
 8003882:	6313      	str	r3, [r2, #48]	@ 0x30
 8003884:	4b47      	ldr	r3, [pc, #284]	@ (80039a4 <HAL_UART_MspInit+0x6fc>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003890:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003894:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003896:	2302      	movs	r3, #2
 8003898:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389a:	2300      	movs	r3, #0
 800389c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389e:	2303      	movs	r3, #3
 80038a0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038a2:	2307      	movs	r3, #7
 80038a4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80038aa:	4619      	mov	r1, r3
 80038ac:	483e      	ldr	r0, [pc, #248]	@ (80039a8 <HAL_UART_MspInit+0x700>)
 80038ae:	f002 fc9f 	bl	80061f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80038b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038b6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b8:	2302      	movs	r3, #2
 80038ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c0:	2303      	movs	r3, #3
 80038c2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038c4:	2307      	movs	r3, #7
 80038c6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038c8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80038cc:	4619      	mov	r1, r3
 80038ce:	4837      	ldr	r0, [pc, #220]	@ (80039ac <HAL_UART_MspInit+0x704>)
 80038d0:	f002 fc8e 	bl	80061f0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80038d4:	4b36      	ldr	r3, [pc, #216]	@ (80039b0 <HAL_UART_MspInit+0x708>)
 80038d6:	4a37      	ldr	r2, [pc, #220]	@ (80039b4 <HAL_UART_MspInit+0x70c>)
 80038d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80038da:	4b35      	ldr	r3, [pc, #212]	@ (80039b0 <HAL_UART_MspInit+0x708>)
 80038dc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80038e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038e2:	4b33      	ldr	r3, [pc, #204]	@ (80039b0 <HAL_UART_MspInit+0x708>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038e8:	4b31      	ldr	r3, [pc, #196]	@ (80039b0 <HAL_UART_MspInit+0x708>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038ee:	4b30      	ldr	r3, [pc, #192]	@ (80039b0 <HAL_UART_MspInit+0x708>)
 80038f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038f6:	4b2e      	ldr	r3, [pc, #184]	@ (80039b0 <HAL_UART_MspInit+0x708>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038fc:	4b2c      	ldr	r3, [pc, #176]	@ (80039b0 <HAL_UART_MspInit+0x708>)
 80038fe:	2200      	movs	r2, #0
 8003900:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003902:	4b2b      	ldr	r3, [pc, #172]	@ (80039b0 <HAL_UART_MspInit+0x708>)
 8003904:	2200      	movs	r2, #0
 8003906:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003908:	4b29      	ldr	r3, [pc, #164]	@ (80039b0 <HAL_UART_MspInit+0x708>)
 800390a:	2200      	movs	r2, #0
 800390c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800390e:	4b28      	ldr	r3, [pc, #160]	@ (80039b0 <HAL_UART_MspInit+0x708>)
 8003910:	2200      	movs	r2, #0
 8003912:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003914:	4826      	ldr	r0, [pc, #152]	@ (80039b0 <HAL_UART_MspInit+0x708>)
 8003916:	f000 ff29 	bl	800476c <HAL_DMA_Init>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_UART_MspInit+0x67c>
      Error_Handler();
 8003920:	f7fd ffbe 	bl	80018a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a22      	ldr	r2, [pc, #136]	@ (80039b0 <HAL_UART_MspInit+0x708>)
 8003928:	63da      	str	r2, [r3, #60]	@ 0x3c
 800392a:	4a21      	ldr	r2, [pc, #132]	@ (80039b0 <HAL_UART_MspInit+0x708>)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003930:	4b21      	ldr	r3, [pc, #132]	@ (80039b8 <HAL_UART_MspInit+0x710>)
 8003932:	4a22      	ldr	r2, [pc, #136]	@ (80039bc <HAL_UART_MspInit+0x714>)
 8003934:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003936:	4b20      	ldr	r3, [pc, #128]	@ (80039b8 <HAL_UART_MspInit+0x710>)
 8003938:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800393c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800393e:	4b1e      	ldr	r3, [pc, #120]	@ (80039b8 <HAL_UART_MspInit+0x710>)
 8003940:	2240      	movs	r2, #64	@ 0x40
 8003942:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003944:	4b1c      	ldr	r3, [pc, #112]	@ (80039b8 <HAL_UART_MspInit+0x710>)
 8003946:	2200      	movs	r2, #0
 8003948:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800394a:	4b1b      	ldr	r3, [pc, #108]	@ (80039b8 <HAL_UART_MspInit+0x710>)
 800394c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003950:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003952:	4b19      	ldr	r3, [pc, #100]	@ (80039b8 <HAL_UART_MspInit+0x710>)
 8003954:	2200      	movs	r2, #0
 8003956:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003958:	4b17      	ldr	r3, [pc, #92]	@ (80039b8 <HAL_UART_MspInit+0x710>)
 800395a:	2200      	movs	r2, #0
 800395c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800395e:	4b16      	ldr	r3, [pc, #88]	@ (80039b8 <HAL_UART_MspInit+0x710>)
 8003960:	2200      	movs	r2, #0
 8003962:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003964:	4b14      	ldr	r3, [pc, #80]	@ (80039b8 <HAL_UART_MspInit+0x710>)
 8003966:	2200      	movs	r2, #0
 8003968:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800396a:	4b13      	ldr	r3, [pc, #76]	@ (80039b8 <HAL_UART_MspInit+0x710>)
 800396c:	2200      	movs	r2, #0
 800396e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003970:	4811      	ldr	r0, [pc, #68]	@ (80039b8 <HAL_UART_MspInit+0x710>)
 8003972:	f000 fefb 	bl	800476c <HAL_DMA_Init>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_UART_MspInit+0x6d8>
      Error_Handler();
 800397c:	f7fd ff90 	bl	80018a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a0d      	ldr	r2, [pc, #52]	@ (80039b8 <HAL_UART_MspInit+0x710>)
 8003984:	639a      	str	r2, [r3, #56]	@ 0x38
 8003986:	4a0c      	ldr	r2, [pc, #48]	@ (80039b8 <HAL_UART_MspInit+0x710>)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800398c:	2200      	movs	r2, #0
 800398e:	2100      	movs	r1, #0
 8003990:	2027      	movs	r0, #39	@ 0x27
 8003992:	f000 feb4 	bl	80046fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003996:	2027      	movs	r0, #39	@ 0x27
 8003998:	f000 fecd 	bl	8004736 <HAL_NVIC_EnableIRQ>
}
 800399c:	e09e      	b.n	8003adc <HAL_UART_MspInit+0x834>
 800399e:	bf00      	nop
 80039a0:	40004800 	.word	0x40004800
 80039a4:	40023800 	.word	0x40023800
 80039a8:	40020400 	.word	0x40020400
 80039ac:	40020c00 	.word	0x40020c00
 80039b0:	20000d30 	.word	0x20000d30
 80039b4:	40026028 	.word	0x40026028
 80039b8:	20000d90 	.word	0x20000d90
 80039bc:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a47      	ldr	r2, [pc, #284]	@ (8003ae4 <HAL_UART_MspInit+0x83c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	f040 8088 	bne.w	8003adc <HAL_UART_MspInit+0x834>
    __HAL_RCC_USART6_CLK_ENABLE();
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	4b45      	ldr	r3, [pc, #276]	@ (8003ae8 <HAL_UART_MspInit+0x840>)
 80039d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d4:	4a44      	ldr	r2, [pc, #272]	@ (8003ae8 <HAL_UART_MspInit+0x840>)
 80039d6:	f043 0320 	orr.w	r3, r3, #32
 80039da:	6453      	str	r3, [r2, #68]	@ 0x44
 80039dc:	4b42      	ldr	r3, [pc, #264]	@ (8003ae8 <HAL_UART_MspInit+0x840>)
 80039de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	4b3e      	ldr	r3, [pc, #248]	@ (8003ae8 <HAL_UART_MspInit+0x840>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f0:	4a3d      	ldr	r2, [pc, #244]	@ (8003ae8 <HAL_UART_MspInit+0x840>)
 80039f2:	f043 0304 	orr.w	r3, r3, #4
 80039f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80039f8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae8 <HAL_UART_MspInit+0x840>)
 80039fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a04:	23c0      	movs	r3, #192	@ 0xc0
 8003a06:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a10:	2303      	movs	r3, #3
 8003a12:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a14:	2308      	movs	r3, #8
 8003a16:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a18:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4833      	ldr	r0, [pc, #204]	@ (8003aec <HAL_UART_MspInit+0x844>)
 8003a20:	f002 fbe6 	bl	80061f0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003a24:	4b32      	ldr	r3, [pc, #200]	@ (8003af0 <HAL_UART_MspInit+0x848>)
 8003a26:	4a33      	ldr	r2, [pc, #204]	@ (8003af4 <HAL_UART_MspInit+0x84c>)
 8003a28:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003a2a:	4b31      	ldr	r3, [pc, #196]	@ (8003af0 <HAL_UART_MspInit+0x848>)
 8003a2c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003a30:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a32:	4b2f      	ldr	r3, [pc, #188]	@ (8003af0 <HAL_UART_MspInit+0x848>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a38:	4b2d      	ldr	r3, [pc, #180]	@ (8003af0 <HAL_UART_MspInit+0x848>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003af0 <HAL_UART_MspInit+0x848>)
 8003a40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a44:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a46:	4b2a      	ldr	r3, [pc, #168]	@ (8003af0 <HAL_UART_MspInit+0x848>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a4c:	4b28      	ldr	r3, [pc, #160]	@ (8003af0 <HAL_UART_MspInit+0x848>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003a52:	4b27      	ldr	r3, [pc, #156]	@ (8003af0 <HAL_UART_MspInit+0x848>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a58:	4b25      	ldr	r3, [pc, #148]	@ (8003af0 <HAL_UART_MspInit+0x848>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a5e:	4b24      	ldr	r3, [pc, #144]	@ (8003af0 <HAL_UART_MspInit+0x848>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003a64:	4822      	ldr	r0, [pc, #136]	@ (8003af0 <HAL_UART_MspInit+0x848>)
 8003a66:	f000 fe81 	bl	800476c <HAL_DMA_Init>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_UART_MspInit+0x7cc>
      Error_Handler();
 8003a70:	f7fd ff16 	bl	80018a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a1e      	ldr	r2, [pc, #120]	@ (8003af0 <HAL_UART_MspInit+0x848>)
 8003a78:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003af0 <HAL_UART_MspInit+0x848>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003a80:	4b1d      	ldr	r3, [pc, #116]	@ (8003af8 <HAL_UART_MspInit+0x850>)
 8003a82:	4a1e      	ldr	r2, [pc, #120]	@ (8003afc <HAL_UART_MspInit+0x854>)
 8003a84:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003a86:	4b1c      	ldr	r3, [pc, #112]	@ (8003af8 <HAL_UART_MspInit+0x850>)
 8003a88:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003a8c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003af8 <HAL_UART_MspInit+0x850>)
 8003a90:	2240      	movs	r2, #64	@ 0x40
 8003a92:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a94:	4b18      	ldr	r3, [pc, #96]	@ (8003af8 <HAL_UART_MspInit+0x850>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a9a:	4b17      	ldr	r3, [pc, #92]	@ (8003af8 <HAL_UART_MspInit+0x850>)
 8003a9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003aa0:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aa2:	4b15      	ldr	r3, [pc, #84]	@ (8003af8 <HAL_UART_MspInit+0x850>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003aa8:	4b13      	ldr	r3, [pc, #76]	@ (8003af8 <HAL_UART_MspInit+0x850>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003aae:	4b12      	ldr	r3, [pc, #72]	@ (8003af8 <HAL_UART_MspInit+0x850>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ab4:	4b10      	ldr	r3, [pc, #64]	@ (8003af8 <HAL_UART_MspInit+0x850>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aba:	4b0f      	ldr	r3, [pc, #60]	@ (8003af8 <HAL_UART_MspInit+0x850>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003ac0:	480d      	ldr	r0, [pc, #52]	@ (8003af8 <HAL_UART_MspInit+0x850>)
 8003ac2:	f000 fe53 	bl	800476c <HAL_DMA_Init>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_UART_MspInit+0x828>
      Error_Handler();
 8003acc:	f7fd fee8 	bl	80018a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a09      	ldr	r2, [pc, #36]	@ (8003af8 <HAL_UART_MspInit+0x850>)
 8003ad4:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ad6:	4a08      	ldr	r2, [pc, #32]	@ (8003af8 <HAL_UART_MspInit+0x850>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003adc:	bf00      	nop
 8003ade:	3758      	adds	r7, #88	@ 0x58
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40011400 	.word	0x40011400
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40020800 	.word	0x40020800
 8003af0:	20000df0 	.word	0x20000df0
 8003af4:	40026428 	.word	0x40026428
 8003af8:	20000e50 	.word	0x20000e50
 8003afc:	400264a0 	.word	0x400264a0

08003b00 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  


  ldr   sp, =_estack     /* set stack pointer */
 8003b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b04:	f7fe fa76 	bl	8001ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b08:	480c      	ldr	r0, [pc, #48]	@ (8003b3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b0a:	490d      	ldr	r1, [pc, #52]	@ (8003b40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b10:	e002      	b.n	8003b18 <LoopCopyDataInit>

08003b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b16:	3304      	adds	r3, #4

08003b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b1c:	d3f9      	bcc.n	8003b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b20:	4c0a      	ldr	r4, [pc, #40]	@ (8003b4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b24:	e001      	b.n	8003b2a <LoopFillZerobss>

08003b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b28:	3204      	adds	r2, #4

08003b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b2c:	d3fb      	bcc.n	8003b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b2e:	f010 fd55 	bl	80145dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b32:	f7fd fe01 	bl	8001738 <main>
  bx  lr    
 8003b36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b40:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8003b44:	08017e78 	.word	0x08017e78
  ldr r2, =_sbss
 8003b48:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8003b4c:	2000b4b0 	.word	0x2000b4b0

08003b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b50:	e7fe      	b.n	8003b50 <ADC_IRQHandler>

08003b52 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <LAN8742_RegisterBusIO+0x28>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <LAN8742_RegisterBusIO+0x28>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <LAN8742_RegisterBusIO+0x28>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d102      	bne.n	8003b80 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7e:	e014      	b.n	8003baa <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b086      	sub	sp, #24
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d139      	bne.n	8003c46 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	e01c      	b.n	8003c26 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f107 020c 	add.w	r2, r7, #12
 8003bf4:	2112      	movs	r1, #18
 8003bf6:	6978      	ldr	r0, [r7, #20]
 8003bf8:	4798      	blx	r3
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	da03      	bge.n	8003c08 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8003c00:	f06f 0304 	mvn.w	r3, #4
 8003c04:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8003c06:	e00b      	b.n	8003c20 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d105      	bne.n	8003c20 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
         break;
 8003c1e:	e005      	b.n	8003c2c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	3301      	adds	r3, #1
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b1f      	cmp	r3, #31
 8003c2a:	d9df      	bls.n	8003bec <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b1f      	cmp	r3, #31
 8003c32:	d902      	bls.n	8003c3a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003c34:	f06f 0302 	mvn.w	r3, #2
 8003c38:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8003c46:	693b      	ldr	r3, [r7, #16]
 }
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6810      	ldr	r0, [r2, #0]
 8003c64:	f107 020c 	add.w	r2, r7, #12
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4798      	blx	r3
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	da02      	bge.n	8003c78 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003c72:	f06f 0304 	mvn.w	r3, #4
 8003c76:	e06e      	b.n	8003d56 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6810      	ldr	r0, [r2, #0]
 8003c80:	f107 020c 	add.w	r2, r7, #12
 8003c84:	2101      	movs	r1, #1
 8003c86:	4798      	blx	r3
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	da02      	bge.n	8003c94 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003c8e:	f06f 0304 	mvn.w	r3, #4
 8003c92:	e060      	b.n	8003d56 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e059      	b.n	8003d56 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6810      	ldr	r0, [r2, #0]
 8003caa:	f107 020c 	add.w	r2, r7, #12
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4798      	blx	r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	da02      	bge.n	8003cbe <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003cb8:	f06f 0304 	mvn.w	r3, #4
 8003cbc:	e04b      	b.n	8003d56 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d11b      	bne.n	8003d00 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d006      	beq.n	8003ce0 <LAN8742_GetLinkState+0x90>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e03a      	b.n	8003d56 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e033      	b.n	8003d56 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	e02c      	b.n	8003d56 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003cfc:	2305      	movs	r3, #5
 8003cfe:	e02a      	b.n	8003d56 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6810      	ldr	r0, [r2, #0]
 8003d08:	f107 020c 	add.w	r2, r7, #12
 8003d0c:	211f      	movs	r1, #31
 8003d0e:	4798      	blx	r3
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	da02      	bge.n	8003d1c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003d16:	f06f 0304 	mvn.w	r3, #4
 8003d1a:	e01c      	b.n	8003d56 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003d26:	2306      	movs	r3, #6
 8003d28:	e015      	b.n	8003d56 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 031c 	and.w	r3, r3, #28
 8003d30:	2b18      	cmp	r3, #24
 8003d32:	d101      	bne.n	8003d38 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003d34:	2302      	movs	r3, #2
 8003d36:	e00e      	b.n	8003d56 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 031c 	and.w	r3, r3, #28
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d101      	bne.n	8003d46 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e007      	b.n	8003d56 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 031c 	and.w	r3, r3, #28
 8003d4c:	2b14      	cmp	r3, #20
 8003d4e:	d101      	bne.n	8003d54 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003d50:	2304      	movs	r3, #4
 8003d52:	e000      	b.n	8003d56 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003d54:	2305      	movs	r3, #5
    }
  }
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d64:	4b0e      	ldr	r3, [pc, #56]	@ (8003da0 <HAL_Init+0x40>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0d      	ldr	r2, [pc, #52]	@ (8003da0 <HAL_Init+0x40>)
 8003d6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d70:	4b0b      	ldr	r3, [pc, #44]	@ (8003da0 <HAL_Init+0x40>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a0a      	ldr	r2, [pc, #40]	@ (8003da0 <HAL_Init+0x40>)
 8003d76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d7c:	4b08      	ldr	r3, [pc, #32]	@ (8003da0 <HAL_Init+0x40>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a07      	ldr	r2, [pc, #28]	@ (8003da0 <HAL_Init+0x40>)
 8003d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d88:	2003      	movs	r0, #3
 8003d8a:	f000 fcad 	bl	80046e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d8e:	200f      	movs	r0, #15
 8003d90:	f000 f808 	bl	8003da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d94:	f7fd ff58 	bl	8001c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023c00 	.word	0x40023c00

08003da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dac:	4b12      	ldr	r3, [pc, #72]	@ (8003df8 <HAL_InitTick+0x54>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b12      	ldr	r3, [pc, #72]	@ (8003dfc <HAL_InitTick+0x58>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	4619      	mov	r1, r3
 8003db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fcc5 	bl	8004752 <HAL_SYSTICK_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e00e      	b.n	8003df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b0f      	cmp	r3, #15
 8003dd6:	d80a      	bhi.n	8003dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dd8:	2200      	movs	r2, #0
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8003de0:	f000 fc8d 	bl	80046fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003de4:	4a06      	ldr	r2, [pc, #24]	@ (8003e00 <HAL_InitTick+0x5c>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e000      	b.n	8003df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20000038 	.word	0x20000038
 8003dfc:	200000bc 	.word	0x200000bc
 8003e00:	200000b8 	.word	0x200000b8

08003e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e08:	4b06      	ldr	r3, [pc, #24]	@ (8003e24 <HAL_IncTick+0x20>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <HAL_IncTick+0x24>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4413      	add	r3, r2
 8003e14:	4a04      	ldr	r2, [pc, #16]	@ (8003e28 <HAL_IncTick+0x24>)
 8003e16:	6013      	str	r3, [r2, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	200000bc 	.word	0x200000bc
 8003e28:	20000eb0 	.word	0x20000eb0

08003e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e30:	4b03      	ldr	r3, [pc, #12]	@ (8003e40 <HAL_GetTick+0x14>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000eb0 	.word	0x20000eb0

08003e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e4c:	f7ff ffee 	bl	8003e2c <HAL_GetTick>
 8003e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d005      	beq.n	8003e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e88 <HAL_Delay+0x44>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e6a:	bf00      	nop
 8003e6c:	f7ff ffde 	bl	8003e2c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d8f7      	bhi.n	8003e6c <HAL_Delay+0x28>
  {
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200000bc 	.word	0x200000bc

08003e8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e033      	b.n	8003f0a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fc fbc8 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	f003 0310 	and.w	r3, r3, #16
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d118      	bne.n	8003efc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ece:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ed2:	f023 0302 	bic.w	r3, r3, #2
 8003ed6:	f043 0202 	orr.w	r2, r3, #2
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f93a 	bl	8004158 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	f023 0303 	bic.w	r3, r3, #3
 8003ef2:	f043 0201 	orr.w	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	641a      	str	r2, [r3, #64]	@ 0x40
 8003efa:	e001      	b.n	8003f00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x1c>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e105      	b.n	800413c <HAL_ADC_ConfigChannel+0x228>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b09      	cmp	r3, #9
 8003f3e:	d925      	bls.n	8003f8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68d9      	ldr	r1, [r3, #12]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4613      	mov	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4413      	add	r3, r2
 8003f54:	3b1e      	subs	r3, #30
 8003f56:	2207      	movs	r2, #7
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43da      	mvns	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	400a      	ands	r2, r1
 8003f64:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68d9      	ldr	r1, [r3, #12]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	4618      	mov	r0, r3
 8003f78:	4603      	mov	r3, r0
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	4403      	add	r3, r0
 8003f7e:	3b1e      	subs	r3, #30
 8003f80:	409a      	lsls	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	60da      	str	r2, [r3, #12]
 8003f8a:	e022      	b.n	8003fd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6919      	ldr	r1, [r3, #16]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	2207      	movs	r2, #7
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43da      	mvns	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	400a      	ands	r2, r1
 8003fae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6919      	ldr	r1, [r3, #16]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	4403      	add	r3, r0
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b06      	cmp	r3, #6
 8003fd8:	d824      	bhi.n	8004024 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	3b05      	subs	r3, #5
 8003fec:	221f      	movs	r2, #31
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	400a      	ands	r2, r1
 8003ffa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	b29b      	uxth	r3, r3
 8004008:	4618      	mov	r0, r3
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	3b05      	subs	r3, #5
 8004016:	fa00 f203 	lsl.w	r2, r0, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	635a      	str	r2, [r3, #52]	@ 0x34
 8004022:	e04c      	b.n	80040be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b0c      	cmp	r3, #12
 800402a:	d824      	bhi.n	8004076 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	3b23      	subs	r3, #35	@ 0x23
 800403e:	221f      	movs	r2, #31
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	43da      	mvns	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	400a      	ands	r2, r1
 800404c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	4618      	mov	r0, r3
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	3b23      	subs	r3, #35	@ 0x23
 8004068:	fa00 f203 	lsl.w	r2, r0, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	631a      	str	r2, [r3, #48]	@ 0x30
 8004074:	e023      	b.n	80040be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	3b41      	subs	r3, #65	@ 0x41
 8004088:	221f      	movs	r2, #31
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43da      	mvns	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	400a      	ands	r2, r1
 8004096:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	4618      	mov	r0, r3
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	3b41      	subs	r3, #65	@ 0x41
 80040b2:	fa00 f203 	lsl.w	r2, r0, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040be:	4b22      	ldr	r3, [pc, #136]	@ (8004148 <HAL_ADC_ConfigChannel+0x234>)
 80040c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a21      	ldr	r2, [pc, #132]	@ (800414c <HAL_ADC_ConfigChannel+0x238>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d109      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x1cc>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b12      	cmp	r3, #18
 80040d2:	d105      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a19      	ldr	r2, [pc, #100]	@ (800414c <HAL_ADC_ConfigChannel+0x238>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d123      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x21e>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d003      	beq.n	80040fa <HAL_ADC_ConfigChannel+0x1e6>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b11      	cmp	r3, #17
 80040f8:	d11b      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b10      	cmp	r3, #16
 800410c:	d111      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800410e:	4b10      	ldr	r3, [pc, #64]	@ (8004150 <HAL_ADC_ConfigChannel+0x23c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a10      	ldr	r2, [pc, #64]	@ (8004154 <HAL_ADC_ConfigChannel+0x240>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	0c9a      	lsrs	r2, r3, #18
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004124:	e002      	b.n	800412c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	3b01      	subs	r3, #1
 800412a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f9      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	40012300 	.word	0x40012300
 800414c:	40012000 	.word	0x40012000
 8004150:	20000038 	.word	0x20000038
 8004154:	431bde83 	.word	0x431bde83

08004158 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004160:	4b79      	ldr	r3, [pc, #484]	@ (8004348 <ADC_Init+0x1f0>)
 8004162:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	431a      	orrs	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800418c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	021a      	lsls	r2, r3, #8
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80041b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6859      	ldr	r1, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6899      	ldr	r1, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ea:	4a58      	ldr	r2, [pc, #352]	@ (800434c <ADC_Init+0x1f4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d022      	beq.n	8004236 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6899      	ldr	r1, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6899      	ldr	r1, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	e00f      	b.n	8004256 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004254:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0202 	bic.w	r2, r2, #2
 8004264:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6899      	ldr	r1, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	7e1b      	ldrb	r3, [r3, #24]
 8004270:	005a      	lsls	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01b      	beq.n	80042bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004292:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80042a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	3b01      	subs	r3, #1
 80042b0:	035a      	lsls	r2, r3, #13
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	e007      	b.n	80042cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042ca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80042da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	051a      	lsls	r2, r3, #20
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6899      	ldr	r1, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800430e:	025a      	lsls	r2, r3, #9
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6899      	ldr	r1, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	029a      	lsls	r2, r3, #10
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	609a      	str	r2, [r3, #8]
}
 800433c:	bf00      	nop
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	40012300 	.word	0x40012300
 800434c:	0f000001 	.word	0x0f000001

08004350 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e0ed      	b.n	800453e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fc fa16 	bl	80007a0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004384:	f7ff fd52 	bl	8003e2c <HAL_GetTick>
 8004388:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800438a:	e012      	b.n	80043b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800438c:	f7ff fd4e 	bl	8003e2c <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b0a      	cmp	r3, #10
 8004398:	d90b      	bls.n	80043b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2205      	movs	r2, #5
 80043aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e0c5      	b.n	800453e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0e5      	beq.n	800438c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0202 	bic.w	r2, r2, #2
 80043ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043d0:	f7ff fd2c 	bl	8003e2c <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043d6:	e012      	b.n	80043fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80043d8:	f7ff fd28 	bl	8003e2c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b0a      	cmp	r3, #10
 80043e4:	d90b      	bls.n	80043fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2205      	movs	r2, #5
 80043f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e09f      	b.n	800453e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e5      	bne.n	80043d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7e1b      	ldrb	r3, [r3, #24]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d108      	bne.n	8004426 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e007      	b.n	8004436 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004434:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	7e5b      	ldrb	r3, [r3, #25]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d108      	bne.n	8004450 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e007      	b.n	8004460 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800445e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7e9b      	ldrb	r3, [r3, #26]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d108      	bne.n	800447a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0220 	orr.w	r2, r2, #32
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	e007      	b.n	800448a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0220 	bic.w	r2, r2, #32
 8004488:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	7edb      	ldrb	r3, [r3, #27]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d108      	bne.n	80044a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0210 	bic.w	r2, r2, #16
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	e007      	b.n	80044b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0210 	orr.w	r2, r2, #16
 80044b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	7f1b      	ldrb	r3, [r3, #28]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d108      	bne.n	80044ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0208 	orr.w	r2, r2, #8
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e007      	b.n	80044de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0208 	bic.w	r2, r2, #8
 80044dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	7f5b      	ldrb	r3, [r3, #29]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d108      	bne.n	80044f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0204 	orr.w	r2, r2, #4
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e007      	b.n	8004508 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0204 	bic.w	r2, r2, #4
 8004506:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	ea42 0103 	orr.w	r1, r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	1e5a      	subs	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <__NVIC_SetPriorityGrouping>:
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004558:	4b0c      	ldr	r3, [pc, #48]	@ (800458c <__NVIC_SetPriorityGrouping+0x44>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004564:	4013      	ands	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004570:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800457a:	4a04      	ldr	r2, [pc, #16]	@ (800458c <__NVIC_SetPriorityGrouping+0x44>)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	60d3      	str	r3, [r2, #12]
}
 8004580:	bf00      	nop
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	e000ed00 	.word	0xe000ed00

08004590 <__NVIC_GetPriorityGrouping>:
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004594:	4b04      	ldr	r3, [pc, #16]	@ (80045a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	0a1b      	lsrs	r3, r3, #8
 800459a:	f003 0307 	and.w	r3, r3, #7
}
 800459e:	4618      	mov	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	e000ed00 	.word	0xe000ed00

080045ac <__NVIC_EnableIRQ>:
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	db0b      	blt.n	80045d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	f003 021f 	and.w	r2, r3, #31
 80045c4:	4907      	ldr	r1, [pc, #28]	@ (80045e4 <__NVIC_EnableIRQ+0x38>)
 80045c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	2001      	movs	r0, #1
 80045ce:	fa00 f202 	lsl.w	r2, r0, r2
 80045d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	e000e100 	.word	0xe000e100

080045e8 <__NVIC_SetPriority>:
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	6039      	str	r1, [r7, #0]
 80045f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	db0a      	blt.n	8004612 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	490c      	ldr	r1, [pc, #48]	@ (8004634 <__NVIC_SetPriority+0x4c>)
 8004602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004606:	0112      	lsls	r2, r2, #4
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	440b      	add	r3, r1
 800460c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004610:	e00a      	b.n	8004628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	4908      	ldr	r1, [pc, #32]	@ (8004638 <__NVIC_SetPriority+0x50>)
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	3b04      	subs	r3, #4
 8004620:	0112      	lsls	r2, r2, #4
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	440b      	add	r3, r1
 8004626:	761a      	strb	r2, [r3, #24]
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	e000e100 	.word	0xe000e100
 8004638:	e000ed00 	.word	0xe000ed00

0800463c <NVIC_EncodePriority>:
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	@ 0x24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f1c3 0307 	rsb	r3, r3, #7
 8004656:	2b04      	cmp	r3, #4
 8004658:	bf28      	it	cs
 800465a:	2304      	movcs	r3, #4
 800465c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3304      	adds	r3, #4
 8004662:	2b06      	cmp	r3, #6
 8004664:	d902      	bls.n	800466c <NVIC_EncodePriority+0x30>
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	3b03      	subs	r3, #3
 800466a:	e000      	b.n	800466e <NVIC_EncodePriority+0x32>
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004670:	f04f 32ff 	mov.w	r2, #4294967295
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43da      	mvns	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	401a      	ands	r2, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004684:	f04f 31ff 	mov.w	r1, #4294967295
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	fa01 f303 	lsl.w	r3, r1, r3
 800468e:	43d9      	mvns	r1, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004694:	4313      	orrs	r3, r2
}
 8004696:	4618      	mov	r0, r3
 8004698:	3724      	adds	r7, #36	@ 0x24
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046b4:	d301      	bcc.n	80046ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046b6:	2301      	movs	r3, #1
 80046b8:	e00f      	b.n	80046da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ba:	4a0a      	ldr	r2, [pc, #40]	@ (80046e4 <SysTick_Config+0x40>)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3b01      	subs	r3, #1
 80046c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046c2:	210f      	movs	r1, #15
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	f7ff ff8e 	bl	80045e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046cc:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <SysTick_Config+0x40>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046d2:	4b04      	ldr	r3, [pc, #16]	@ (80046e4 <SysTick_Config+0x40>)
 80046d4:	2207      	movs	r2, #7
 80046d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	e000e010 	.word	0xe000e010

080046e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff ff29 	bl	8004548 <__NVIC_SetPriorityGrouping>
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046fe:	b580      	push	{r7, lr}
 8004700:	b086      	sub	sp, #24
 8004702:	af00      	add	r7, sp, #0
 8004704:	4603      	mov	r3, r0
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
 800470a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004710:	f7ff ff3e 	bl	8004590 <__NVIC_GetPriorityGrouping>
 8004714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	6978      	ldr	r0, [r7, #20]
 800471c:	f7ff ff8e 	bl	800463c <NVIC_EncodePriority>
 8004720:	4602      	mov	r2, r0
 8004722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004726:	4611      	mov	r1, r2
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff ff5d 	bl	80045e8 <__NVIC_SetPriority>
}
 800472e:	bf00      	nop
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	4603      	mov	r3, r0
 800473e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff ff31 	bl	80045ac <__NVIC_EnableIRQ>
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff ffa2 	bl	80046a4 <SysTick_Config>
 8004760:	4603      	mov	r3, r0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004778:	f7ff fb58 	bl	8003e2c <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e099      	b.n	80048bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0201 	bic.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047a8:	e00f      	b.n	80047ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047aa:	f7ff fb3f 	bl	8003e2c <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b05      	cmp	r3, #5
 80047b6:	d908      	bls.n	80047ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2203      	movs	r2, #3
 80047c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e078      	b.n	80048bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e8      	bne.n	80047aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4b38      	ldr	r3, [pc, #224]	@ (80048c4 <HAL_DMA_Init+0x158>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004802:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800480e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	2b04      	cmp	r3, #4
 8004822:	d107      	bne.n	8004834 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482c:	4313      	orrs	r3, r2
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f023 0307 	bic.w	r3, r3, #7
 800484a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485a:	2b04      	cmp	r3, #4
 800485c:	d117      	bne.n	800488e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00e      	beq.n	800488e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fb0d 	bl	8004e90 <DMA_CheckFifoParam>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2240      	movs	r2, #64	@ 0x40
 8004880:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800488a:	2301      	movs	r3, #1
 800488c:	e016      	b.n	80048bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fac4 	bl	8004e24 <DMA_CalcBaseAndBitshift>
 800489c:	4603      	mov	r3, r0
 800489e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a4:	223f      	movs	r2, #63	@ 0x3f
 80048a6:	409a      	lsls	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	f010803f 	.word	0xf010803f

080048c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_DMA_Start_IT+0x26>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e040      	b.n	8004970 <HAL_DMA_Start_IT+0xa8>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d12f      	bne.n	8004962 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2202      	movs	r2, #2
 8004906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fa56 	bl	8004dc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004920:	223f      	movs	r2, #63	@ 0x3f
 8004922:	409a      	lsls	r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0216 	orr.w	r2, r2, #22
 8004936:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0208 	orr.w	r2, r2, #8
 800494e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e005      	b.n	800496e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800496a:	2302      	movs	r3, #2
 800496c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800496e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004984:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004986:	f7ff fa51 	bl	8003e2c <HAL_GetTick>
 800498a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d008      	beq.n	80049aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2280      	movs	r2, #128	@ 0x80
 800499c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e052      	b.n	8004a50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0216 	bic.w	r2, r2, #22
 80049b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695a      	ldr	r2, [r3, #20]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <HAL_DMA_Abort+0x62>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0208 	bic.w	r2, r2, #8
 80049e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049fa:	e013      	b.n	8004a24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049fc:	f7ff fa16 	bl	8003e2c <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b05      	cmp	r3, #5
 8004a08:	d90c      	bls.n	8004a24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2203      	movs	r2, #3
 8004a14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e015      	b.n	8004a50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e4      	bne.n	80049fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a36:	223f      	movs	r2, #63	@ 0x3f
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d004      	beq.n	8004a76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2280      	movs	r2, #128	@ 0x80
 8004a70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e00c      	b.n	8004a90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2205      	movs	r2, #5
 8004a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0201 	bic.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004aa8:	4b8e      	ldr	r3, [pc, #568]	@ (8004ce4 <HAL_DMA_IRQHandler+0x248>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a8e      	ldr	r2, [pc, #568]	@ (8004ce8 <HAL_DMA_IRQHandler+0x24c>)
 8004aae:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab2:	0a9b      	lsrs	r3, r3, #10
 8004ab4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac6:	2208      	movs	r2, #8
 8004ac8:	409a      	lsls	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d01a      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d013      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0204 	bic.w	r2, r2, #4
 8004aee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af4:	2208      	movs	r2, #8
 8004af6:	409a      	lsls	r2, r3
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b00:	f043 0201 	orr.w	r2, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	409a      	lsls	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d012      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00b      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	409a      	lsls	r2, r3
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b36:	f043 0202 	orr.w	r2, r3, #2
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b42:	2204      	movs	r2, #4
 8004b44:	409a      	lsls	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d012      	beq.n	8004b74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00b      	beq.n	8004b74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b60:	2204      	movs	r2, #4
 8004b62:	409a      	lsls	r2, r3
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6c:	f043 0204 	orr.w	r2, r3, #4
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b78:	2210      	movs	r2, #16
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d043      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d03c      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b96:	2210      	movs	r2, #16
 8004b98:	409a      	lsls	r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d018      	beq.n	8004bde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d108      	bne.n	8004bcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d024      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	4798      	blx	r3
 8004bca:	e01f      	b.n	8004c0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01b      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	4798      	blx	r3
 8004bdc:	e016      	b.n	8004c0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d107      	bne.n	8004bfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0208 	bic.w	r2, r2, #8
 8004bfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c10:	2220      	movs	r2, #32
 8004c12:	409a      	lsls	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 808f 	beq.w	8004d3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8087 	beq.w	8004d3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c32:	2220      	movs	r2, #32
 8004c34:	409a      	lsls	r2, r3
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b05      	cmp	r3, #5
 8004c44:	d136      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0216 	bic.w	r2, r2, #22
 8004c54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695a      	ldr	r2, [r3, #20]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d103      	bne.n	8004c76 <HAL_DMA_IRQHandler+0x1da>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0208 	bic.w	r2, r2, #8
 8004c84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c8a:	223f      	movs	r2, #63	@ 0x3f
 8004c8c:	409a      	lsls	r2, r3
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d07e      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	4798      	blx	r3
        }
        return;
 8004cb2:	e079      	b.n	8004da8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01d      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10d      	bne.n	8004cec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d031      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	4798      	blx	r3
 8004ce0:	e02c      	b.n	8004d3c <HAL_DMA_IRQHandler+0x2a0>
 8004ce2:	bf00      	nop
 8004ce4:	20000038 	.word	0x20000038
 8004ce8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d023      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	4798      	blx	r3
 8004cfc:	e01e      	b.n	8004d3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10f      	bne.n	8004d2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0210 	bic.w	r2, r2, #16
 8004d1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d032      	beq.n	8004daa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d022      	beq.n	8004d96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2205      	movs	r2, #5
 8004d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d307      	bcc.n	8004d84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f2      	bne.n	8004d68 <HAL_DMA_IRQHandler+0x2cc>
 8004d82:	e000      	b.n	8004d86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	4798      	blx	r3
 8004da6:	e000      	b.n	8004daa <HAL_DMA_IRQHandler+0x30e>
        return;
 8004da8:	bf00      	nop
    }
  }
}
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004de4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b40      	cmp	r3, #64	@ 0x40
 8004df4:	d108      	bne.n	8004e08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e06:	e007      	b.n	8004e18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	60da      	str	r2, [r3, #12]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	3b10      	subs	r3, #16
 8004e34:	4a14      	ldr	r2, [pc, #80]	@ (8004e88 <DMA_CalcBaseAndBitshift+0x64>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	091b      	lsrs	r3, r3, #4
 8004e3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e3e:	4a13      	ldr	r2, [pc, #76]	@ (8004e8c <DMA_CalcBaseAndBitshift+0x68>)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d909      	bls.n	8004e66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e5a:	f023 0303 	bic.w	r3, r3, #3
 8004e5e:	1d1a      	adds	r2, r3, #4
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e64:	e007      	b.n	8004e76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	aaaaaaab 	.word	0xaaaaaaab
 8004e8c:	08017c94 	.word	0x08017c94

08004e90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d11f      	bne.n	8004eea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d856      	bhi.n	8004f5e <DMA_CheckFifoParam+0xce>
 8004eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb8 <DMA_CheckFifoParam+0x28>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004ec9 	.word	0x08004ec9
 8004ebc:	08004edb 	.word	0x08004edb
 8004ec0:	08004ec9 	.word	0x08004ec9
 8004ec4:	08004f5f 	.word	0x08004f5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d046      	beq.n	8004f62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed8:	e043      	b.n	8004f62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ede:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ee2:	d140      	bne.n	8004f66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ee8:	e03d      	b.n	8004f66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ef2:	d121      	bne.n	8004f38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d837      	bhi.n	8004f6a <DMA_CheckFifoParam+0xda>
 8004efa:	a201      	add	r2, pc, #4	@ (adr r2, 8004f00 <DMA_CheckFifoParam+0x70>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f11 	.word	0x08004f11
 8004f04:	08004f17 	.word	0x08004f17
 8004f08:	08004f11 	.word	0x08004f11
 8004f0c:	08004f29 	.word	0x08004f29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	73fb      	strb	r3, [r7, #15]
      break;
 8004f14:	e030      	b.n	8004f78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d025      	beq.n	8004f6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f26:	e022      	b.n	8004f6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f30:	d11f      	bne.n	8004f72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f36:	e01c      	b.n	8004f72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d903      	bls.n	8004f46 <DMA_CheckFifoParam+0xb6>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d003      	beq.n	8004f4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f44:	e018      	b.n	8004f78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	73fb      	strb	r3, [r7, #15]
      break;
 8004f4a:	e015      	b.n	8004f78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00e      	beq.n	8004f76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f5c:	e00b      	b.n	8004f76 <DMA_CheckFifoParam+0xe6>
      break;
 8004f5e:	bf00      	nop
 8004f60:	e00a      	b.n	8004f78 <DMA_CheckFifoParam+0xe8>
      break;
 8004f62:	bf00      	nop
 8004f64:	e008      	b.n	8004f78 <DMA_CheckFifoParam+0xe8>
      break;
 8004f66:	bf00      	nop
 8004f68:	e006      	b.n	8004f78 <DMA_CheckFifoParam+0xe8>
      break;
 8004f6a:	bf00      	nop
 8004f6c:	e004      	b.n	8004f78 <DMA_CheckFifoParam+0xe8>
      break;
 8004f6e:	bf00      	nop
 8004f70:	e002      	b.n	8004f78 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f72:	bf00      	nop
 8004f74:	e000      	b.n	8004f78 <DMA_CheckFifoParam+0xe8>
      break;
 8004f76:	bf00      	nop
    }
  } 
  
  return status; 
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop

08004f88 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e08a      	b.n	80050b0 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d106      	bne.n	8004fb2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f004 fea5 	bl	8009cfc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	4b40      	ldr	r3, [pc, #256]	@ (80050b8 <HAL_ETH_Init+0x130>)
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fba:	4a3f      	ldr	r2, [pc, #252]	@ (80050b8 <HAL_ETH_Init+0x130>)
 8004fbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80050b8 <HAL_ETH_Init+0x130>)
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fca:	60bb      	str	r3, [r7, #8]
 8004fcc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004fce:	4b3b      	ldr	r3, [pc, #236]	@ (80050bc <HAL_ETH_Init+0x134>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	4a3a      	ldr	r2, [pc, #232]	@ (80050bc <HAL_ETH_Init+0x134>)
 8004fd4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004fd8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004fda:	4b38      	ldr	r3, [pc, #224]	@ (80050bc <HAL_ETH_Init+0x134>)
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	4936      	ldr	r1, [pc, #216]	@ (80050bc <HAL_ETH_Init+0x134>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004fe8:	4b34      	ldr	r3, [pc, #208]	@ (80050bc <HAL_ETH_Init+0x134>)
 8004fea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6812      	ldr	r2, [r2, #0]
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005002:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005004:	f7fe ff12 	bl	8003e2c <HAL_GetTick>
 8005008:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800500a:	e011      	b.n	8005030 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800500c:	f7fe ff0e 	bl	8003e2c <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800501a:	d909      	bls.n	8005030 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2204      	movs	r2, #4
 8005020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	22e0      	movs	r2, #224	@ 0xe0
 8005028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e03f      	b.n	80050b0 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e4      	bne.n	800500c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fe16 	bl	8005c74 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fec1 	bl	8005dd0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 ff17 	bl	8005e82 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	461a      	mov	r2, r3
 800505a:	2100      	movs	r1, #0
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fe7f 	bl	8005d60 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8005070:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6812      	ldr	r2, [r2, #0]
 800507e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005082:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005086:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800509a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2210      	movs	r2, #16
 80050aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40023800 	.word	0x40023800
 80050bc:	40013800 	.word	0x40013800

080050c0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ce:	2b10      	cmp	r3, #16
 80050d0:	d150      	bne.n	8005174 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2204      	movs	r2, #4
 80050de:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f9f8 	bl	80054d6 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0208 	orr.w	r2, r2, #8
 80050f4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80050fe:	2001      	movs	r0, #1
 8005100:	f7fe fea0 	bl	8003e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0204 	orr.w	r2, r2, #4
 800511a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005124:	2001      	movs	r0, #1
 8005126:	f7fe fe8d 	bl	8003e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fc3a 	bl	80059ac <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6812      	ldr	r2, [r2, #0]
 8005146:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800514a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800514e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	f043 0302 	orr.w	r3, r3, #2
 8005162:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005166:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2240      	movs	r2, #64	@ 0x40
 800516c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	e000      	b.n	8005176 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
  }
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800518c:	2b40      	cmp	r3, #64	@ 0x40
 800518e:	d14a      	bne.n	8005226 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80051ae:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	f023 0302 	bic.w	r3, r3, #2
 80051c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80051c6:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0204 	bic.w	r2, r2, #4
 80051d6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80051e0:	2001      	movs	r0, #1
 80051e2:	f7fe fe2f 	bl	8003e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fbdc 	bl	80059ac <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0208 	bic.w	r2, r2, #8
 8005202:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800520c:	2001      	movs	r0, #1
 800520e:	f7fe fe19 	bl	8003e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2210      	movs	r2, #16
 800521e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	e000      	b.n	8005228 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
  }
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005248:	f043 0201 	orr.w	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e07c      	b.n	8005350 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800525c:	2b40      	cmp	r3, #64	@ 0x40
 800525e:	d176      	bne.n	800534e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8005260:	2200      	movs	r2, #0
 8005262:	68b9      	ldr	r1, [r7, #8]
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 fe7b 	bl	8005f60 <ETH_Prepare_Tx_Descriptors>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d009      	beq.n	8005284 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005276:	f043 0202 	orr.w	r2, r3, #2
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e065      	b.n	8005350 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8005284:	f3bf 8f4f 	dsb	sy
}
 8005288:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3206      	adds	r2, #6
 8005292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005296:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d904      	bls.n	80052b4 <HAL_ETH_Transmit+0x84>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ae:	1f1a      	subs	r2, r3, #4
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3106      	adds	r1, #6
 80052c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80052c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80052c8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80052ca:	f7fe fdaf 	bl	8003e2c <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80052d0:	e037      	b.n	8005342 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d011      	beq.n	8005308 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ea:	f043 0208 	orr.w	r2, r3, #8
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e023      	b.n	8005350 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d018      	beq.n	8005342 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005310:	f7fe fd8c 	bl	8003e2c <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	429a      	cmp	r2, r3
 800531e:	d302      	bcc.n	8005326 <HAL_ETH_Transmit+0xf6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10d      	bne.n	8005342 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532c:	f043 0204 	orr.w	r2, r3, #4
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800533c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e006      	b.n	8005350 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	dbc3      	blt.n	80052d2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	e000      	b.n	8005350 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
  }
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d109      	bne.n	8005384 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005376:	f043 0201 	orr.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0a4      	b.n	80054ce <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800538a:	2b40      	cmp	r3, #64	@ 0x40
 800538c:	d001      	beq.n	8005392 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e09d      	b.n	80054ce <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005396:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	3212      	adds	r2, #18
 800539e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053a8:	f1c3 0304 	rsb	r3, r3, #4
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80053ae:	e066      	b.n	800547e <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d007      	beq.n	80053cc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	69da      	ldr	r2, [r3, #28]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	699a      	ldr	r2, [r3, #24]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d103      	bne.n	80053e0 <HAL_ETH_ReadData+0x88>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d03c      	beq.n	800545a <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005402:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8005418:	2301      	movs	r3, #1
 800541a:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005434:	461a      	mov	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f004 fe0f 	bl	800a05c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	441a      	add	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2200      	movs	r2, #0
 8005458:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	3301      	adds	r3, #1
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2b03      	cmp	r3, #3
 8005464:	d902      	bls.n	800546c <HAL_ETH_ReadData+0x114>
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	3b04      	subs	r3, #4
 800546a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69fa      	ldr	r2, [r7, #28]
 8005470:	3212      	adds	r2, #18
 8005472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005476:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	3301      	adds	r3, #1
 800547c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8005482:	2b00      	cmp	r3, #0
 8005484:	db06      	blt.n	8005494 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	429a      	cmp	r2, r3
 800548c:	d202      	bcs.n	8005494 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800548e:	7cfb      	ldrb	r3, [r7, #19]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d08d      	beq.n	80053b0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	441a      	add	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f814 	bl	80054d6 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80054b4:	7cfb      	ldrb	r3, [r7, #19]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d108      	bne.n	80054cc <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	e000      	b.n	80054ce <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3720      	adds	r7, #32
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b088      	sub	sp, #32
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80054e2:	2301      	movs	r3, #1
 80054e4:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054ea:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	3212      	adds	r2, #18
 80054f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f6:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054fc:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80054fe:	e044      	b.n	800558a <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d112      	bne.n	800552e <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8005508:	f107 0308 	add.w	r3, r7, #8
 800550c:	4618      	mov	r0, r3
 800550e:	f004 fd75 	bl	8009ffc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	74fb      	strb	r3, [r7, #19]
 800551c:	e007      	b.n	800552e <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	461a      	mov	r2, r3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	461a      	mov	r2, r3
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800552e:	7cfb      	ldrb	r3, [r7, #19]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d02a      	beq.n	800558a <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005538:	2b00      	cmp	r3, #0
 800553a:	d108      	bne.n	800554e <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005544:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	6053      	str	r3, [r2, #4]
 800554c:	e005      	b.n	800555a <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	3301      	adds	r3, #1
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	2b03      	cmp	r3, #3
 8005570:	d902      	bls.n	8005578 <ETH_UpdateDescriptor+0xa2>
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3b04      	subs	r3, #4
 8005576:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	3212      	adds	r2, #18
 800557e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005582:	617b      	str	r3, [r7, #20]
      desccount--;
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	3b01      	subs	r3, #1
 8005588:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <ETH_UpdateDescriptor+0xc0>
 8005590:	7cfb      	ldrb	r3, [r7, #19]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1b4      	bne.n	8005500 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	429a      	cmp	r2, r3
 800559e:	d01a      	beq.n	80055d6 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	3303      	adds	r3, #3
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80055aa:	f3bf 8f5f 	dmb	sy
}
 80055ae:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6919      	ldr	r1, [r3, #16]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	18ca      	adds	r2, r1, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055c8:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80055d6:	bf00      	nop
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b086      	sub	sp, #24
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	607a      	str	r2, [r7, #4]
 80055ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f003 031c 	and.w	r3, r3, #28
 80055fa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	02db      	lsls	r3, r3, #11
 8005600:	b29b      	uxth	r3, r3
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	019b      	lsls	r3, r3, #6
 800560c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 0302 	bic.w	r3, r3, #2
 800561c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f043 0301 	orr.w	r3, r3, #1
 8005624:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800562e:	f7fe fbfd 	bl	8003e2c <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005634:	e00d      	b.n	8005652 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8005636:	f7fe fbf9 	bl	8003e2c <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005644:	d301      	bcc.n	800564a <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e010      	b.n	800566c <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1ec      	bne.n	8005636 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	b29b      	uxth	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f003 031c 	and.w	r3, r3, #28
 8005690:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	02db      	lsls	r3, r3, #11
 8005696:	b29b      	uxth	r3, r3
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	4313      	orrs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	019b      	lsls	r3, r3, #6
 80056a2:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f043 0302 	orr.w	r3, r3, #2
 80056b2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056ce:	f7fe fbad 	bl	8003e2c <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80056d4:	e00d      	b.n	80056f2 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80056d6:	f7fe fba9 	bl	8003e2c <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e4:	d301      	bcc.n	80056ea <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e009      	b.n	80056fe <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1ec      	bne.n	80056d6 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e0e6      	b.n	80058e8 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b00      	cmp	r3, #0
 8005726:	bf14      	ite	ne
 8005728:	2301      	movne	r3, #1
 800572a:	2300      	moveq	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800574e:	2b00      	cmp	r3, #0
 8005750:	bf0c      	ite	eq
 8005752:	2301      	moveq	r3, #1
 8005754:	2300      	movne	r3, #0
 8005756:	b2db      	uxtb	r3, r3
 8005758:	461a      	mov	r2, r3
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 800576a:	2b00      	cmp	r3, #0
 800576c:	bf14      	ite	ne
 800576e:	2301      	movne	r3, #1
 8005770:	2300      	moveq	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005784:	2b00      	cmp	r3, #0
 8005786:	bf0c      	ite	eq
 8005788:	2301      	moveq	r3, #1
 800578a:	2300      	movne	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	461a      	mov	r2, r3
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bf14      	ite	ne
 80057a2:	2301      	movne	r3, #1
 80057a4:	2300      	moveq	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	461a      	mov	r2, r3
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	bf0c      	ite	eq
 80057d8:	2301      	moveq	r3, #1
 80057da:	2300      	movne	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	bf0c      	ite	eq
 80057f2:	2301      	moveq	r3, #1
 80057f4:	2300      	movne	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005808:	2b00      	cmp	r3, #0
 800580a:	bf14      	ite	ne
 800580c:	2301      	movne	r3, #1
 800580e:	2300      	moveq	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	461a      	mov	r2, r3
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005830:	2b00      	cmp	r3, #0
 8005832:	bf14      	ite	ne
 8005834:	2301      	movne	r3, #1
 8005836:	2300      	moveq	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	461a      	mov	r2, r3
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	bf14      	ite	ne
 800584e:	2301      	movne	r3, #1
 8005850:	2300      	moveq	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005880:	2b00      	cmp	r3, #0
 8005882:	bf0c      	ite	eq
 8005884:	2301      	moveq	r3, #1
 8005886:	2300      	movne	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	0c1b      	lsrs	r3, r3, #16
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	bf14      	ite	ne
 80058bc:	2301      	movne	r3, #1
 80058be:	2300      	moveq	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	461a      	mov	r2, r3
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bf14      	ite	ne
 80058d8:	2301      	movne	r3, #1
 80058da:	2300      	moveq	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e00b      	b.n	8005920 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800590e:	2b10      	cmp	r3, #16
 8005910:	d105      	bne.n	800591e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f86f 	bl	80059f8 <ETH_SetMACConfig>

    return HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	e000      	b.n	8005920 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
  }
}
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 031c 	bic.w	r3, r3, #28
 800593e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005940:	f001 fbcc 	bl	80070dc <HAL_RCC_GetHCLKFreq>
 8005944:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4a14      	ldr	r2, [pc, #80]	@ (800599c <HAL_ETH_SetMDIOClockRange+0x74>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d804      	bhi.n	8005958 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f043 0308 	orr.w	r3, r3, #8
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	e019      	b.n	800598c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	4a11      	ldr	r2, [pc, #68]	@ (80059a0 <HAL_ETH_SetMDIOClockRange+0x78>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d204      	bcs.n	800596a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f043 030c 	orr.w	r3, r3, #12
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	e010      	b.n	800598c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	4a0d      	ldr	r2, [pc, #52]	@ (80059a4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d90c      	bls.n	800598c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	4a0c      	ldr	r2, [pc, #48]	@ (80059a8 <HAL_ETH_SetMDIOClockRange+0x80>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d804      	bhi.n	8005984 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f043 0304 	orr.w	r3, r3, #4
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	e003      	b.n	800598c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f043 0310 	orr.w	r3, r3, #16
 800598a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	611a      	str	r2, [r3, #16]
}
 8005994:	bf00      	nop
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	02160ebf 	.word	0x02160ebf
 80059a0:	03938700 	.word	0x03938700
 80059a4:	05f5e0ff 	.word	0x05f5e0ff
 80059a8:	08f0d17f 	.word	0x08f0d17f

080059ac <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6812      	ldr	r2, [r2, #0]
 80059c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059ce:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80059dc:	2001      	movs	r0, #1
 80059de:	f7fe fa31 	bl	8003e44 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059ec:	6193      	str	r3, [r2, #24]
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4b53      	ldr	r3, [pc, #332]	@ (8005b5c <ETH_SetMACConfig+0x164>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	7b9b      	ldrb	r3, [r3, #14]
 8005a16:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	7c12      	ldrb	r2, [r2, #16]
 8005a1c:	2a00      	cmp	r2, #0
 8005a1e:	d102      	bne.n	8005a26 <ETH_SetMACConfig+0x2e>
 8005a20:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005a24:	e000      	b.n	8005a28 <ETH_SetMACConfig+0x30>
 8005a26:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005a28:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	7c52      	ldrb	r2, [r2, #17]
 8005a2e:	2a00      	cmp	r2, #0
 8005a30:	d102      	bne.n	8005a38 <ETH_SetMACConfig+0x40>
 8005a32:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8005a36:	e000      	b.n	8005a3a <ETH_SetMACConfig+0x42>
 8005a38:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005a3a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005a40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	7fdb      	ldrb	r3, [r3, #31]
 8005a46:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005a48:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005a4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	7f92      	ldrb	r2, [r2, #30]
 8005a54:	2a00      	cmp	r2, #0
 8005a56:	d102      	bne.n	8005a5e <ETH_SetMACConfig+0x66>
 8005a58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a5c:	e000      	b.n	8005a60 <ETH_SetMACConfig+0x68>
 8005a5e:	2200      	movs	r2, #0
                        macconf->Speed |
 8005a60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	7f1b      	ldrb	r3, [r3, #28]
 8005a66:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005a68:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005a6e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	791b      	ldrb	r3, [r3, #4]
 8005a74:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005a76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005a7e:	2a00      	cmp	r2, #0
 8005a80:	d102      	bne.n	8005a88 <ETH_SetMACConfig+0x90>
 8005a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a86:	e000      	b.n	8005a8a <ETH_SetMACConfig+0x92>
 8005a88:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005a8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	7bdb      	ldrb	r3, [r3, #15]
 8005a90:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005a92:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005a98:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005aa0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005aba:	2001      	movs	r0, #1
 8005abc:	f7fe f9c2 	bl	8003e44 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ade:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005ae6:	2a00      	cmp	r2, #0
 8005ae8:	d101      	bne.n	8005aee <ETH_SetMACConfig+0xf6>
 8005aea:	2280      	movs	r2, #128	@ 0x80
 8005aec:	e000      	b.n	8005af0 <ETH_SetMACConfig+0xf8>
 8005aee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005af0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005af6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8005afe:	2a01      	cmp	r2, #1
 8005b00:	d101      	bne.n	8005b06 <ETH_SetMACConfig+0x10e>
 8005b02:	2208      	movs	r2, #8
 8005b04:	e000      	b.n	8005b08 <ETH_SetMACConfig+0x110>
 8005b06:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005b08:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005b10:	2a01      	cmp	r2, #1
 8005b12:	d101      	bne.n	8005b18 <ETH_SetMACConfig+0x120>
 8005b14:	2204      	movs	r2, #4
 8005b16:	e000      	b.n	8005b1a <ETH_SetMACConfig+0x122>
 8005b18:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005b1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8005b22:	2a01      	cmp	r2, #1
 8005b24:	d101      	bne.n	8005b2a <ETH_SetMACConfig+0x132>
 8005b26:	2202      	movs	r2, #2
 8005b28:	e000      	b.n	8005b2c <ETH_SetMACConfig+0x134>
 8005b2a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b44:	2001      	movs	r0, #1
 8005b46:	f7fe f97d 	bl	8003e44 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	619a      	str	r2, [r3, #24]
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	fd20810f 	.word	0xfd20810f

08005b60 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4b3d      	ldr	r3, [pc, #244]	@ (8005c70 <ETH_SetDMAConfig+0x110>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	7b1b      	ldrb	r3, [r3, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d102      	bne.n	8005b8c <ETH_SetDMAConfig+0x2c>
 8005b86:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005b8a:	e000      	b.n	8005b8e <ETH_SetDMAConfig+0x2e>
 8005b8c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	7b5b      	ldrb	r3, [r3, #13]
 8005b92:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005b94:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	7f52      	ldrb	r2, [r2, #29]
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	d102      	bne.n	8005ba4 <ETH_SetDMAConfig+0x44>
 8005b9e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005ba2:	e000      	b.n	8005ba6 <ETH_SetDMAConfig+0x46>
 8005ba4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005ba6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	7b9b      	ldrb	r3, [r3, #14]
 8005bac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005bae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005bb4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	7f1b      	ldrb	r3, [r3, #28]
 8005bba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005bbc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	7f9b      	ldrb	r3, [r3, #30]
 8005bc2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005bc4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005bca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005bd2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005be4:	461a      	mov	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005bf6:	2001      	movs	r0, #1
 8005bf8:	f7fe f924 	bl	8003e44 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c04:	461a      	mov	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	791b      	ldrb	r3, [r3, #4]
 8005c0e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005c14:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005c1a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005c20:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c28:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005c2a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c30:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005c32:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005c38:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c46:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c54:	2001      	movs	r0, #1
 8005c56:	f7fe f8f5 	bl	8003e44 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c62:	461a      	mov	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6013      	str	r3, [r2, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	f8de3f23 	.word	0xf8de3f23

08005c74 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b0a6      	sub	sp, #152	@ 0x98
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8005c82:	2301      	movs	r3, #1
 8005c84:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005c92:	2301      	movs	r3, #1
 8005c94:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005caa:	2300      	movs	r3, #0
 8005cac:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005cdc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005ce2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005cee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff fe7f 	bl	80059f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005d02:	2301      	movs	r3, #1
 8005d04:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005d16:	2300      	movs	r3, #0
 8005d18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005d20:	2301      	movs	r3, #1
 8005d22:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005d26:	2301      	movs	r3, #1
 8005d28:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005d2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005d2e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005d30:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005d34:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005d36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d3a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005d4a:	f107 0308 	add.w	r3, r7, #8
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff ff05 	bl	8005b60 <ETH_SetDMAConfig>
}
 8005d56:	bf00      	nop
 8005d58:	3798      	adds	r7, #152	@ 0x98
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3305      	adds	r3, #5
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	3204      	adds	r2, #4
 8005d78:	7812      	ldrb	r2, [r2, #0]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	4b11      	ldr	r3, [pc, #68]	@ (8005dc8 <ETH_MACAddressConfig+0x68>)
 8005d82:	4413      	add	r3, r2
 8005d84:	461a      	mov	r2, r3
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3303      	adds	r3, #3
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	061a      	lsls	r2, r3, #24
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3302      	adds	r3, #2
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	4313      	orrs	r3, r2
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	7812      	ldrb	r2, [r2, #0]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	4b06      	ldr	r3, [pc, #24]	@ (8005dcc <ETH_MACAddressConfig+0x6c>)
 8005db2:	4413      	add	r3, r2
 8005db4:	461a      	mov	r2, r3
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	6013      	str	r3, [r2, #0]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40028040 	.word	0x40028040
 8005dcc:	40028044 	.word	0x40028044

08005dd0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e03e      	b.n	8005e5c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68d9      	ldr	r1, [r3, #12]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	440b      	add	r3, r1
 8005dee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2200      	movs	r2, #0
 8005e06:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	3206      	adds	r2, #6
 8005e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d80c      	bhi.n	8005e40 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68d9      	ldr	r1, [r3, #12]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	440b      	add	r3, r1
 8005e38:	461a      	mov	r2, r3
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	60da      	str	r2, [r3, #12]
 8005e3e:	e004      	b.n	8005e4a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	461a      	mov	r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d9bd      	bls.n	8005dde <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e74:	611a      	str	r2, [r3, #16]
}
 8005e76:	bf00      	nop
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	e048      	b.n	8005f22 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6919      	ldr	r1, [r3, #16]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	440b      	add	r3, r1
 8005ea0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005ecc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	3212      	adds	r2, #18
 8005eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d80c      	bhi.n	8005f12 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6919      	ldr	r1, [r3, #16]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	4613      	mov	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	440b      	add	r3, r1
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	60da      	str	r2, [r3, #12]
 8005f10:	e004      	b.n	8005f1c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	461a      	mov	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d9b3      	bls.n	8005e90 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f52:	60da      	str	r2, [r3, #12]
}
 8005f54:	bf00      	nop
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b091      	sub	sp, #68	@ 0x44
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3318      	adds	r3, #24
 8005f70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fa2:	d007      	beq.n	8005fb4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fa8:	3304      	adds	r3, #4
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e115      	b.n	80061e4 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fba:	3301      	adds	r3, #1
 8005fbc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8005fd0:	f023 031f 	bic.w	r3, r3, #31
 8005fd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fd6:	6852      	ldr	r2, [r2, #4]
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d008      	beq.n	8005ffc <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffa:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8006008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	431a      	orrs	r2, r3
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8006026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006030:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800603e:	e084      	b.n	800614a <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d006      	beq.n	8006060 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800605a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	e005      	b.n	800606c <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800606c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800606e:	3301      	adds	r3, #1
 8006070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006074:	2b03      	cmp	r3, #3
 8006076:	d902      	bls.n	800607e <ETH_Prepare_Tx_Descriptors+0x11e>
 8006078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800607a:	3b04      	subs	r3, #4
 800607c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006086:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8006088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006090:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006094:	d007      	beq.n	80060a6 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800609a:	3304      	adds	r3, #4
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d029      	beq.n	80060fa <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80060aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80060ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80060b4:	2300      	movs	r3, #0
 80060b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060b8:	e019      	b.n	80060ee <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 80060ba:	f3bf 8f5f 	dmb	sy
}
 80060be:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80060c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80060c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ca:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80060cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ce:	3301      	adds	r3, #1
 80060d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d902      	bls.n	80060de <ETH_Prepare_Tx_Descriptors+0x17e>
 80060d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060da:	3b04      	subs	r3, #4
 80060dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80060e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e6:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80060e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ea:	3301      	adds	r3, #1
 80060ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d3e1      	bcc.n	80060ba <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 80060f6:	2302      	movs	r3, #2
 80060f8:	e074      	b.n	80061e4 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8006106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006108:	3301      	adds	r3, #1
 800610a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800610c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8006112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8006124:	f023 031f 	bic.w	r3, r3, #31
 8006128:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800612a:	6852      	ldr	r2, [r2, #4]
 800612c:	431a      	orrs	r2, r3
 800612e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006130:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8006132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006134:	3301      	adds	r3, #1
 8006136:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8006138:	f3bf 8f5f 	dmb	sy
}
 800613c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006148:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800614a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f47f af76 	bne.w	8006040 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d006      	beq.n	8006168 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	e005      	b.n	8006174 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006172:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006182:	6a3a      	ldr	r2, [r7, #32]
 8006184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006188:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800618a:	f3bf 8f5f 	dmb	sy
}
 800618e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a4:	3304      	adds	r3, #4
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80061b0:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80061b2:	f3ef 8310 	mrs	r3, PRIMASK
 80061b6:	613b      	str	r3, [r7, #16]
  return(result);
 80061b8:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	2301      	movs	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f383 8810 	msr	PRIMASK, r3
}
 80061c6:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ce:	4413      	add	r3, r2
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	f383 8810 	msr	PRIMASK, r3
}
 80061e0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3744      	adds	r7, #68	@ 0x44
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b089      	sub	sp, #36	@ 0x24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80061fe:	2300      	movs	r3, #0
 8006200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006202:	2300      	movs	r3, #0
 8006204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006206:	2300      	movs	r3, #0
 8006208:	61fb      	str	r3, [r7, #28]
 800620a:	e16b      	b.n	80064e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800620c:	2201      	movs	r2, #1
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4013      	ands	r3, r2
 800621e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	429a      	cmp	r2, r3
 8006226:	f040 815a 	bne.w	80064de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	2b01      	cmp	r3, #1
 8006234:	d005      	beq.n	8006242 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800623e:	2b02      	cmp	r3, #2
 8006240:	d130      	bne.n	80062a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	2203      	movs	r2, #3
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	43db      	mvns	r3, r3
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	4013      	ands	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	4313      	orrs	r3, r2
 800626a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006278:	2201      	movs	r2, #1
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	43db      	mvns	r3, r3
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	4013      	ands	r3, r2
 8006286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	091b      	lsrs	r3, r3, #4
 800628e:	f003 0201 	and.w	r2, r3, #1
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	4313      	orrs	r3, r2
 800629c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d017      	beq.n	80062e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	2203      	movs	r2, #3
 80062bc:	fa02 f303 	lsl.w	r3, r2, r3
 80062c0:	43db      	mvns	r3, r3
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	4013      	ands	r3, r2
 80062c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f003 0303 	and.w	r3, r3, #3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d123      	bne.n	8006334 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	08da      	lsrs	r2, r3, #3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3208      	adds	r2, #8
 80062f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	220f      	movs	r2, #15
 8006304:	fa02 f303 	lsl.w	r3, r2, r3
 8006308:	43db      	mvns	r3, r3
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	4013      	ands	r3, r2
 800630e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	fa02 f303 	lsl.w	r3, r2, r3
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	4313      	orrs	r3, r2
 8006324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	08da      	lsrs	r2, r3, #3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3208      	adds	r2, #8
 800632e:	69b9      	ldr	r1, [r7, #24]
 8006330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	2203      	movs	r2, #3
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	43db      	mvns	r3, r3
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	4013      	ands	r3, r2
 800634a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f003 0203 	and.w	r2, r3, #3
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	4313      	orrs	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 80b4 	beq.w	80064de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006376:	2300      	movs	r3, #0
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	4b60      	ldr	r3, [pc, #384]	@ (80064fc <HAL_GPIO_Init+0x30c>)
 800637c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637e:	4a5f      	ldr	r2, [pc, #380]	@ (80064fc <HAL_GPIO_Init+0x30c>)
 8006380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006384:	6453      	str	r3, [r2, #68]	@ 0x44
 8006386:	4b5d      	ldr	r3, [pc, #372]	@ (80064fc <HAL_GPIO_Init+0x30c>)
 8006388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006392:	4a5b      	ldr	r2, [pc, #364]	@ (8006500 <HAL_GPIO_Init+0x310>)
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	089b      	lsrs	r3, r3, #2
 8006398:	3302      	adds	r3, #2
 800639a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800639e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	220f      	movs	r2, #15
 80063aa:	fa02 f303 	lsl.w	r3, r2, r3
 80063ae:	43db      	mvns	r3, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	4013      	ands	r3, r2
 80063b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a52      	ldr	r2, [pc, #328]	@ (8006504 <HAL_GPIO_Init+0x314>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d02b      	beq.n	8006416 <HAL_GPIO_Init+0x226>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a51      	ldr	r2, [pc, #324]	@ (8006508 <HAL_GPIO_Init+0x318>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d025      	beq.n	8006412 <HAL_GPIO_Init+0x222>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a50      	ldr	r2, [pc, #320]	@ (800650c <HAL_GPIO_Init+0x31c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d01f      	beq.n	800640e <HAL_GPIO_Init+0x21e>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a4f      	ldr	r2, [pc, #316]	@ (8006510 <HAL_GPIO_Init+0x320>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d019      	beq.n	800640a <HAL_GPIO_Init+0x21a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a4e      	ldr	r2, [pc, #312]	@ (8006514 <HAL_GPIO_Init+0x324>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d013      	beq.n	8006406 <HAL_GPIO_Init+0x216>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a4d      	ldr	r2, [pc, #308]	@ (8006518 <HAL_GPIO_Init+0x328>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00d      	beq.n	8006402 <HAL_GPIO_Init+0x212>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a4c      	ldr	r2, [pc, #304]	@ (800651c <HAL_GPIO_Init+0x32c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d007      	beq.n	80063fe <HAL_GPIO_Init+0x20e>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a4b      	ldr	r2, [pc, #300]	@ (8006520 <HAL_GPIO_Init+0x330>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d101      	bne.n	80063fa <HAL_GPIO_Init+0x20a>
 80063f6:	2307      	movs	r3, #7
 80063f8:	e00e      	b.n	8006418 <HAL_GPIO_Init+0x228>
 80063fa:	2308      	movs	r3, #8
 80063fc:	e00c      	b.n	8006418 <HAL_GPIO_Init+0x228>
 80063fe:	2306      	movs	r3, #6
 8006400:	e00a      	b.n	8006418 <HAL_GPIO_Init+0x228>
 8006402:	2305      	movs	r3, #5
 8006404:	e008      	b.n	8006418 <HAL_GPIO_Init+0x228>
 8006406:	2304      	movs	r3, #4
 8006408:	e006      	b.n	8006418 <HAL_GPIO_Init+0x228>
 800640a:	2303      	movs	r3, #3
 800640c:	e004      	b.n	8006418 <HAL_GPIO_Init+0x228>
 800640e:	2302      	movs	r3, #2
 8006410:	e002      	b.n	8006418 <HAL_GPIO_Init+0x228>
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <HAL_GPIO_Init+0x228>
 8006416:	2300      	movs	r3, #0
 8006418:	69fa      	ldr	r2, [r7, #28]
 800641a:	f002 0203 	and.w	r2, r2, #3
 800641e:	0092      	lsls	r2, r2, #2
 8006420:	4093      	lsls	r3, r2
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	4313      	orrs	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006428:	4935      	ldr	r1, [pc, #212]	@ (8006500 <HAL_GPIO_Init+0x310>)
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	089b      	lsrs	r3, r3, #2
 800642e:	3302      	adds	r3, #2
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006436:	4b3b      	ldr	r3, [pc, #236]	@ (8006524 <HAL_GPIO_Init+0x334>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	43db      	mvns	r3, r3
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	4013      	ands	r3, r2
 8006444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	4313      	orrs	r3, r2
 8006458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800645a:	4a32      	ldr	r2, [pc, #200]	@ (8006524 <HAL_GPIO_Init+0x334>)
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006460:	4b30      	ldr	r3, [pc, #192]	@ (8006524 <HAL_GPIO_Init+0x334>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	43db      	mvns	r3, r3
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	4013      	ands	r3, r2
 800646e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4313      	orrs	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006484:	4a27      	ldr	r2, [pc, #156]	@ (8006524 <HAL_GPIO_Init+0x334>)
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800648a:	4b26      	ldr	r3, [pc, #152]	@ (8006524 <HAL_GPIO_Init+0x334>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	43db      	mvns	r3, r3
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	4013      	ands	r3, r2
 8006498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006524 <HAL_GPIO_Init+0x334>)
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006524 <HAL_GPIO_Init+0x334>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	43db      	mvns	r3, r3
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	4013      	ands	r3, r2
 80064c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80064d8:	4a12      	ldr	r2, [pc, #72]	@ (8006524 <HAL_GPIO_Init+0x334>)
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	3301      	adds	r3, #1
 80064e2:	61fb      	str	r3, [r7, #28]
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	2b0f      	cmp	r3, #15
 80064e8:	f67f ae90 	bls.w	800620c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80064ec:	bf00      	nop
 80064ee:	bf00      	nop
 80064f0:	3724      	adds	r7, #36	@ 0x24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40023800 	.word	0x40023800
 8006500:	40013800 	.word	0x40013800
 8006504:	40020000 	.word	0x40020000
 8006508:	40020400 	.word	0x40020400
 800650c:	40020800 	.word	0x40020800
 8006510:	40020c00 	.word	0x40020c00
 8006514:	40021000 	.word	0x40021000
 8006518:	40021400 	.word	0x40021400
 800651c:	40021800 	.word	0x40021800
 8006520:	40021c00 	.word	0x40021c00
 8006524:	40013c00 	.word	0x40013c00

08006528 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	887b      	ldrh	r3, [r7, #2]
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006540:	2301      	movs	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]
 8006544:	e001      	b.n	800654a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800654a:	7bfb      	ldrb	r3, [r7, #15]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	807b      	strh	r3, [r7, #2]
 8006564:	4613      	mov	r3, r2
 8006566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006568:	787b      	ldrb	r3, [r7, #1]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800656e:	887a      	ldrh	r2, [r7, #2]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006574:	e003      	b.n	800657e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006576:	887b      	ldrh	r3, [r7, #2]
 8006578:	041a      	lsls	r2, r3, #16
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	619a      	str	r2, [r3, #24]
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
	...

0800658c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e12b      	b.n	80067f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d106      	bne.n	80065b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7fa fad4 	bl	8000b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2224      	movs	r2, #36	@ 0x24
 80065bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0201 	bic.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80065f0:	f000 fd80 	bl	80070f4 <HAL_RCC_GetPCLK1Freq>
 80065f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	4a81      	ldr	r2, [pc, #516]	@ (8006800 <HAL_I2C_Init+0x274>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d807      	bhi.n	8006610 <HAL_I2C_Init+0x84>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4a80      	ldr	r2, [pc, #512]	@ (8006804 <HAL_I2C_Init+0x278>)
 8006604:	4293      	cmp	r3, r2
 8006606:	bf94      	ite	ls
 8006608:	2301      	movls	r3, #1
 800660a:	2300      	movhi	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	e006      	b.n	800661e <HAL_I2C_Init+0x92>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4a7d      	ldr	r2, [pc, #500]	@ (8006808 <HAL_I2C_Init+0x27c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	bf94      	ite	ls
 8006618:	2301      	movls	r3, #1
 800661a:	2300      	movhi	r3, #0
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e0e7      	b.n	80067f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4a78      	ldr	r2, [pc, #480]	@ (800680c <HAL_I2C_Init+0x280>)
 800662a:	fba2 2303 	umull	r2, r3, r2, r3
 800662e:	0c9b      	lsrs	r3, r3, #18
 8006630:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	430a      	orrs	r2, r1
 8006644:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	4a6a      	ldr	r2, [pc, #424]	@ (8006800 <HAL_I2C_Init+0x274>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d802      	bhi.n	8006660 <HAL_I2C_Init+0xd4>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	3301      	adds	r3, #1
 800665e:	e009      	b.n	8006674 <HAL_I2C_Init+0xe8>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006666:	fb02 f303 	mul.w	r3, r2, r3
 800666a:	4a69      	ldr	r2, [pc, #420]	@ (8006810 <HAL_I2C_Init+0x284>)
 800666c:	fba2 2303 	umull	r2, r3, r2, r3
 8006670:	099b      	lsrs	r3, r3, #6
 8006672:	3301      	adds	r3, #1
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6812      	ldr	r2, [r2, #0]
 8006678:	430b      	orrs	r3, r1
 800667a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006686:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	495c      	ldr	r1, [pc, #368]	@ (8006800 <HAL_I2C_Init+0x274>)
 8006690:	428b      	cmp	r3, r1
 8006692:	d819      	bhi.n	80066c8 <HAL_I2C_Init+0x13c>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	1e59      	subs	r1, r3, #1
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	fbb1 f3f3 	udiv	r3, r1, r3
 80066a2:	1c59      	adds	r1, r3, #1
 80066a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80066a8:	400b      	ands	r3, r1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <HAL_I2C_Init+0x138>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	1e59      	subs	r1, r3, #1
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80066bc:	3301      	adds	r3, #1
 80066be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066c2:	e051      	b.n	8006768 <HAL_I2C_Init+0x1dc>
 80066c4:	2304      	movs	r3, #4
 80066c6:	e04f      	b.n	8006768 <HAL_I2C_Init+0x1dc>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d111      	bne.n	80066f4 <HAL_I2C_Init+0x168>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	1e58      	subs	r0, r3, #1
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6859      	ldr	r1, [r3, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	440b      	add	r3, r1
 80066de:	fbb0 f3f3 	udiv	r3, r0, r3
 80066e2:	3301      	adds	r3, #1
 80066e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	bf0c      	ite	eq
 80066ec:	2301      	moveq	r3, #1
 80066ee:	2300      	movne	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	e012      	b.n	800671a <HAL_I2C_Init+0x18e>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	1e58      	subs	r0, r3, #1
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6859      	ldr	r1, [r3, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	440b      	add	r3, r1
 8006702:	0099      	lsls	r1, r3, #2
 8006704:	440b      	add	r3, r1
 8006706:	fbb0 f3f3 	udiv	r3, r0, r3
 800670a:	3301      	adds	r3, #1
 800670c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006710:	2b00      	cmp	r3, #0
 8006712:	bf0c      	ite	eq
 8006714:	2301      	moveq	r3, #1
 8006716:	2300      	movne	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_I2C_Init+0x196>
 800671e:	2301      	movs	r3, #1
 8006720:	e022      	b.n	8006768 <HAL_I2C_Init+0x1dc>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10e      	bne.n	8006748 <HAL_I2C_Init+0x1bc>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	1e58      	subs	r0, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6859      	ldr	r1, [r3, #4]
 8006732:	460b      	mov	r3, r1
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	440b      	add	r3, r1
 8006738:	fbb0 f3f3 	udiv	r3, r0, r3
 800673c:	3301      	adds	r3, #1
 800673e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006746:	e00f      	b.n	8006768 <HAL_I2C_Init+0x1dc>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	1e58      	subs	r0, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6859      	ldr	r1, [r3, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	440b      	add	r3, r1
 8006756:	0099      	lsls	r1, r3, #2
 8006758:	440b      	add	r3, r1
 800675a:	fbb0 f3f3 	udiv	r3, r0, r3
 800675e:	3301      	adds	r3, #1
 8006760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006764:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006768:	6879      	ldr	r1, [r7, #4]
 800676a:	6809      	ldr	r1, [r1, #0]
 800676c:	4313      	orrs	r3, r2
 800676e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69da      	ldr	r2, [r3, #28]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	430a      	orrs	r2, r1
 800678a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006796:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6911      	ldr	r1, [r2, #16]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	68d2      	ldr	r2, [r2, #12]
 80067a2:	4311      	orrs	r1, r2
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	430b      	orrs	r3, r1
 80067aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	695a      	ldr	r2, [r3, #20]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0201 	orr.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	000186a0 	.word	0x000186a0
 8006804:	001e847f 	.word	0x001e847f
 8006808:	003d08ff 	.word	0x003d08ff
 800680c:	431bde83 	.word	0x431bde83
 8006810:	10624dd3 	.word	0x10624dd3

08006814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e267      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d075      	beq.n	800691e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006832:	4b88      	ldr	r3, [pc, #544]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 030c 	and.w	r3, r3, #12
 800683a:	2b04      	cmp	r3, #4
 800683c:	d00c      	beq.n	8006858 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800683e:	4b85      	ldr	r3, [pc, #532]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006846:	2b08      	cmp	r3, #8
 8006848:	d112      	bne.n	8006870 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800684a:	4b82      	ldr	r3, [pc, #520]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006856:	d10b      	bne.n	8006870 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006858:	4b7e      	ldr	r3, [pc, #504]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d05b      	beq.n	800691c <HAL_RCC_OscConfig+0x108>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d157      	bne.n	800691c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e242      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006878:	d106      	bne.n	8006888 <HAL_RCC_OscConfig+0x74>
 800687a:	4b76      	ldr	r3, [pc, #472]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a75      	ldr	r2, [pc, #468]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	e01d      	b.n	80068c4 <HAL_RCC_OscConfig+0xb0>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006890:	d10c      	bne.n	80068ac <HAL_RCC_OscConfig+0x98>
 8006892:	4b70      	ldr	r3, [pc, #448]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a6f      	ldr	r2, [pc, #444]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	4b6d      	ldr	r3, [pc, #436]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a6c      	ldr	r2, [pc, #432]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 80068a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	e00b      	b.n	80068c4 <HAL_RCC_OscConfig+0xb0>
 80068ac:	4b69      	ldr	r3, [pc, #420]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a68      	ldr	r2, [pc, #416]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 80068b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	4b66      	ldr	r3, [pc, #408]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a65      	ldr	r2, [pc, #404]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 80068be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d013      	beq.n	80068f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068cc:	f7fd faae 	bl	8003e2c <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068d4:	f7fd faaa 	bl	8003e2c <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b64      	cmp	r3, #100	@ 0x64
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e207      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e6:	4b5b      	ldr	r3, [pc, #364]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0f0      	beq.n	80068d4 <HAL_RCC_OscConfig+0xc0>
 80068f2:	e014      	b.n	800691e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f4:	f7fd fa9a 	bl	8003e2c <HAL_GetTick>
 80068f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068fc:	f7fd fa96 	bl	8003e2c <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b64      	cmp	r3, #100	@ 0x64
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e1f3      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800690e:	4b51      	ldr	r3, [pc, #324]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f0      	bne.n	80068fc <HAL_RCC_OscConfig+0xe8>
 800691a:	e000      	b.n	800691e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800691c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d063      	beq.n	80069f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800692a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 030c 	and.w	r3, r3, #12
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00b      	beq.n	800694e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006936:	4b47      	ldr	r3, [pc, #284]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800693e:	2b08      	cmp	r3, #8
 8006940:	d11c      	bne.n	800697c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006942:	4b44      	ldr	r3, [pc, #272]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d116      	bne.n	800697c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800694e:	4b41      	ldr	r3, [pc, #260]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <HAL_RCC_OscConfig+0x152>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d001      	beq.n	8006966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e1c7      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006966:	4b3b      	ldr	r3, [pc, #236]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	4937      	ldr	r1, [pc, #220]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006976:	4313      	orrs	r3, r2
 8006978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800697a:	e03a      	b.n	80069f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d020      	beq.n	80069c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006984:	4b34      	ldr	r3, [pc, #208]	@ (8006a58 <HAL_RCC_OscConfig+0x244>)
 8006986:	2201      	movs	r2, #1
 8006988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698a:	f7fd fa4f 	bl	8003e2c <HAL_GetTick>
 800698e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006990:	e008      	b.n	80069a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006992:	f7fd fa4b 	bl	8003e2c <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e1a8      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0f0      	beq.n	8006992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069b0:	4b28      	ldr	r3, [pc, #160]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	4925      	ldr	r1, [pc, #148]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	600b      	str	r3, [r1, #0]
 80069c4:	e015      	b.n	80069f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069c6:	4b24      	ldr	r3, [pc, #144]	@ (8006a58 <HAL_RCC_OscConfig+0x244>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069cc:	f7fd fa2e 	bl	8003e2c <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069d4:	f7fd fa2a 	bl	8003e2c <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e187      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1f0      	bne.n	80069d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d036      	beq.n	8006a6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d016      	beq.n	8006a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a06:	4b15      	ldr	r3, [pc, #84]	@ (8006a5c <HAL_RCC_OscConfig+0x248>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0c:	f7fd fa0e 	bl	8003e2c <HAL_GetTick>
 8006a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a14:	f7fd fa0a 	bl	8003e2c <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e167      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a26:	4b0b      	ldr	r3, [pc, #44]	@ (8006a54 <HAL_RCC_OscConfig+0x240>)
 8006a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0f0      	beq.n	8006a14 <HAL_RCC_OscConfig+0x200>
 8006a32:	e01b      	b.n	8006a6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a34:	4b09      	ldr	r3, [pc, #36]	@ (8006a5c <HAL_RCC_OscConfig+0x248>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a3a:	f7fd f9f7 	bl	8003e2c <HAL_GetTick>
 8006a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a40:	e00e      	b.n	8006a60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a42:	f7fd f9f3 	bl	8003e2c <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d907      	bls.n	8006a60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e150      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
 8006a54:	40023800 	.word	0x40023800
 8006a58:	42470000 	.word	0x42470000
 8006a5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a60:	4b88      	ldr	r3, [pc, #544]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1ea      	bne.n	8006a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8097 	beq.w	8006ba8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a7e:	4b81      	ldr	r3, [pc, #516]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10f      	bne.n	8006aaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	4b7d      	ldr	r3, [pc, #500]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a92:	4a7c      	ldr	r2, [pc, #496]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a9a:	4b7a      	ldr	r3, [pc, #488]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aa2:	60bb      	str	r3, [r7, #8]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aaa:	4b77      	ldr	r3, [pc, #476]	@ (8006c88 <HAL_RCC_OscConfig+0x474>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d118      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ab6:	4b74      	ldr	r3, [pc, #464]	@ (8006c88 <HAL_RCC_OscConfig+0x474>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a73      	ldr	r2, [pc, #460]	@ (8006c88 <HAL_RCC_OscConfig+0x474>)
 8006abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ac2:	f7fd f9b3 	bl	8003e2c <HAL_GetTick>
 8006ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac8:	e008      	b.n	8006adc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aca:	f7fd f9af 	bl	8003e2c <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e10c      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006adc:	4b6a      	ldr	r3, [pc, #424]	@ (8006c88 <HAL_RCC_OscConfig+0x474>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0f0      	beq.n	8006aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d106      	bne.n	8006afe <HAL_RCC_OscConfig+0x2ea>
 8006af0:	4b64      	ldr	r3, [pc, #400]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af4:	4a63      	ldr	r2, [pc, #396]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8006afc:	e01c      	b.n	8006b38 <HAL_RCC_OscConfig+0x324>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	2b05      	cmp	r3, #5
 8006b04:	d10c      	bne.n	8006b20 <HAL_RCC_OscConfig+0x30c>
 8006b06:	4b5f      	ldr	r3, [pc, #380]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b0a:	4a5e      	ldr	r2, [pc, #376]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b0c:	f043 0304 	orr.w	r3, r3, #4
 8006b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b12:	4b5c      	ldr	r3, [pc, #368]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b16:	4a5b      	ldr	r2, [pc, #364]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b18:	f043 0301 	orr.w	r3, r3, #1
 8006b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b1e:	e00b      	b.n	8006b38 <HAL_RCC_OscConfig+0x324>
 8006b20:	4b58      	ldr	r3, [pc, #352]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b24:	4a57      	ldr	r2, [pc, #348]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b26:	f023 0301 	bic.w	r3, r3, #1
 8006b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b2c:	4b55      	ldr	r3, [pc, #340]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b30:	4a54      	ldr	r2, [pc, #336]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b32:	f023 0304 	bic.w	r3, r3, #4
 8006b36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d015      	beq.n	8006b6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b40:	f7fd f974 	bl	8003e2c <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b46:	e00a      	b.n	8006b5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b48:	f7fd f970 	bl	8003e2c <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e0cb      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b5e:	4b49      	ldr	r3, [pc, #292]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0ee      	beq.n	8006b48 <HAL_RCC_OscConfig+0x334>
 8006b6a:	e014      	b.n	8006b96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b6c:	f7fd f95e 	bl	8003e2c <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b72:	e00a      	b.n	8006b8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b74:	f7fd f95a 	bl	8003e2c <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e0b5      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1ee      	bne.n	8006b74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d105      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b9c:	4b39      	ldr	r3, [pc, #228]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba0:	4a38      	ldr	r2, [pc, #224]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ba6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 80a1 	beq.w	8006cf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bb2:	4b34      	ldr	r3, [pc, #208]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 030c 	and.w	r3, r3, #12
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d05c      	beq.n	8006c78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d141      	bne.n	8006c4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bc6:	4b31      	ldr	r3, [pc, #196]	@ (8006c8c <HAL_RCC_OscConfig+0x478>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bcc:	f7fd f92e 	bl	8003e2c <HAL_GetTick>
 8006bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bd4:	f7fd f92a 	bl	8003e2c <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e087      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006be6:	4b27      	ldr	r3, [pc, #156]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1f0      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69da      	ldr	r2, [r3, #28]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c00:	019b      	lsls	r3, r3, #6
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c08:	085b      	lsrs	r3, r3, #1
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	041b      	lsls	r3, r3, #16
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c14:	061b      	lsls	r3, r3, #24
 8006c16:	491b      	ldr	r1, [pc, #108]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c8c <HAL_RCC_OscConfig+0x478>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c22:	f7fd f903 	bl	8003e2c <HAL_GetTick>
 8006c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c28:	e008      	b.n	8006c3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c2a:	f7fd f8ff 	bl	8003e2c <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d901      	bls.n	8006c3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e05c      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c3c:	4b11      	ldr	r3, [pc, #68]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0f0      	beq.n	8006c2a <HAL_RCC_OscConfig+0x416>
 8006c48:	e054      	b.n	8006cf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c4a:	4b10      	ldr	r3, [pc, #64]	@ (8006c8c <HAL_RCC_OscConfig+0x478>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c50:	f7fd f8ec 	bl	8003e2c <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c58:	f7fd f8e8 	bl	8003e2c <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e045      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c6a:	4b06      	ldr	r3, [pc, #24]	@ (8006c84 <HAL_RCC_OscConfig+0x470>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f0      	bne.n	8006c58 <HAL_RCC_OscConfig+0x444>
 8006c76:	e03d      	b.n	8006cf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d107      	bne.n	8006c90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e038      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
 8006c84:	40023800 	.word	0x40023800
 8006c88:	40007000 	.word	0x40007000
 8006c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c90:	4b1b      	ldr	r3, [pc, #108]	@ (8006d00 <HAL_RCC_OscConfig+0x4ec>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d028      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d121      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d11a      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d111      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d107      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d001      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	40023800 	.word	0x40023800

08006d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e0cc      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d18:	4b68      	ldr	r3, [pc, #416]	@ (8006ebc <HAL_RCC_ClockConfig+0x1b8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d90c      	bls.n	8006d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d26:	4b65      	ldr	r3, [pc, #404]	@ (8006ebc <HAL_RCC_ClockConfig+0x1b8>)
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d2e:	4b63      	ldr	r3, [pc, #396]	@ (8006ebc <HAL_RCC_ClockConfig+0x1b8>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d001      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e0b8      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d020      	beq.n	8006d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d005      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d58:	4b59      	ldr	r3, [pc, #356]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	4a58      	ldr	r2, [pc, #352]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d70:	4b53      	ldr	r3, [pc, #332]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	4a52      	ldr	r2, [pc, #328]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d7c:	4b50      	ldr	r3, [pc, #320]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	494d      	ldr	r1, [pc, #308]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d044      	beq.n	8006e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d107      	bne.n	8006db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006da2:	4b47      	ldr	r3, [pc, #284]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d119      	bne.n	8006de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e07f      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d003      	beq.n	8006dc2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d107      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d109      	bne.n	8006de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e06f      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e067      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006de2:	4b37      	ldr	r3, [pc, #220]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f023 0203 	bic.w	r2, r3, #3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	4934      	ldr	r1, [pc, #208]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006df4:	f7fd f81a 	bl	8003e2c <HAL_GetTick>
 8006df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dfa:	e00a      	b.n	8006e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dfc:	f7fd f816 	bl	8003e2c <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e04f      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e12:	4b2b      	ldr	r3, [pc, #172]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f003 020c 	and.w	r2, r3, #12
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d1eb      	bne.n	8006dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e24:	4b25      	ldr	r3, [pc, #148]	@ (8006ebc <HAL_RCC_ClockConfig+0x1b8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d20c      	bcs.n	8006e4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e32:	4b22      	ldr	r3, [pc, #136]	@ (8006ebc <HAL_RCC_ClockConfig+0x1b8>)
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3a:	4b20      	ldr	r3, [pc, #128]	@ (8006ebc <HAL_RCC_ClockConfig+0x1b8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0307 	and.w	r3, r3, #7
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d001      	beq.n	8006e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e032      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d008      	beq.n	8006e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e58:	4b19      	ldr	r3, [pc, #100]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	4916      	ldr	r1, [pc, #88]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d009      	beq.n	8006e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e76:	4b12      	ldr	r3, [pc, #72]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	490e      	ldr	r1, [pc, #56]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e8a:	f000 f821 	bl	8006ed0 <HAL_RCC_GetSysClockFreq>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	091b      	lsrs	r3, r3, #4
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	490a      	ldr	r1, [pc, #40]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8006e9c:	5ccb      	ldrb	r3, [r1, r3]
 8006e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea2:	4a09      	ldr	r2, [pc, #36]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006ea6:	4b09      	ldr	r3, [pc, #36]	@ (8006ecc <HAL_RCC_ClockConfig+0x1c8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fc ff7a 	bl	8003da4 <HAL_InitTick>

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	40023c00 	.word	0x40023c00
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	08017c7c 	.word	0x08017c7c
 8006ec8:	20000038 	.word	0x20000038
 8006ecc:	200000b8 	.word	0x200000b8

08006ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ed4:	b094      	sub	sp, #80	@ 0x50
 8006ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ee8:	4b79      	ldr	r3, [pc, #484]	@ (80070d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 030c 	and.w	r3, r3, #12
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d00d      	beq.n	8006f10 <HAL_RCC_GetSysClockFreq+0x40>
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	f200 80e1 	bhi.w	80070bc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <HAL_RCC_GetSysClockFreq+0x34>
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d003      	beq.n	8006f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8006f02:	e0db      	b.n	80070bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f04:	4b73      	ldr	r3, [pc, #460]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f08:	e0db      	b.n	80070c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f0a:	4b73      	ldr	r3, [pc, #460]	@ (80070d8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f0e:	e0d8      	b.n	80070c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f10:	4b6f      	ldr	r3, [pc, #444]	@ (80070d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80070d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d063      	beq.n	8006fee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f26:	4b6a      	ldr	r3, [pc, #424]	@ (80070d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	099b      	lsrs	r3, r3, #6
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f38:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006f42:	4622      	mov	r2, r4
 8006f44:	462b      	mov	r3, r5
 8006f46:	f04f 0000 	mov.w	r0, #0
 8006f4a:	f04f 0100 	mov.w	r1, #0
 8006f4e:	0159      	lsls	r1, r3, #5
 8006f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f54:	0150      	lsls	r0, r2, #5
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	1a51      	subs	r1, r2, r1
 8006f5e:	6139      	str	r1, [r7, #16]
 8006f60:	4629      	mov	r1, r5
 8006f62:	eb63 0301 	sbc.w	r3, r3, r1
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	f04f 0300 	mov.w	r3, #0
 8006f70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f74:	4659      	mov	r1, fp
 8006f76:	018b      	lsls	r3, r1, #6
 8006f78:	4651      	mov	r1, sl
 8006f7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f7e:	4651      	mov	r1, sl
 8006f80:	018a      	lsls	r2, r1, #6
 8006f82:	4651      	mov	r1, sl
 8006f84:	ebb2 0801 	subs.w	r8, r2, r1
 8006f88:	4659      	mov	r1, fp
 8006f8a:	eb63 0901 	sbc.w	r9, r3, r1
 8006f8e:	f04f 0200 	mov.w	r2, #0
 8006f92:	f04f 0300 	mov.w	r3, #0
 8006f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fa2:	4690      	mov	r8, r2
 8006fa4:	4699      	mov	r9, r3
 8006fa6:	4623      	mov	r3, r4
 8006fa8:	eb18 0303 	adds.w	r3, r8, r3
 8006fac:	60bb      	str	r3, [r7, #8]
 8006fae:	462b      	mov	r3, r5
 8006fb0:	eb49 0303 	adc.w	r3, r9, r3
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	024b      	lsls	r3, r1, #9
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fcc:	4621      	mov	r1, r4
 8006fce:	024a      	lsls	r2, r1, #9
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fe0:	f7f9 f946 	bl	8000270 <__aeabi_uldivmod>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4613      	mov	r3, r2
 8006fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fec:	e058      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fee:	4b38      	ldr	r3, [pc, #224]	@ (80070d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	099b      	lsrs	r3, r3, #6
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ffe:	623b      	str	r3, [r7, #32]
 8007000:	2300      	movs	r3, #0
 8007002:	627b      	str	r3, [r7, #36]	@ 0x24
 8007004:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007008:	4642      	mov	r2, r8
 800700a:	464b      	mov	r3, r9
 800700c:	f04f 0000 	mov.w	r0, #0
 8007010:	f04f 0100 	mov.w	r1, #0
 8007014:	0159      	lsls	r1, r3, #5
 8007016:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800701a:	0150      	lsls	r0, r2, #5
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4641      	mov	r1, r8
 8007022:	ebb2 0a01 	subs.w	sl, r2, r1
 8007026:	4649      	mov	r1, r9
 8007028:	eb63 0b01 	sbc.w	fp, r3, r1
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	f04f 0300 	mov.w	r3, #0
 8007034:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007038:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800703c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007040:	ebb2 040a 	subs.w	r4, r2, sl
 8007044:	eb63 050b 	sbc.w	r5, r3, fp
 8007048:	f04f 0200 	mov.w	r2, #0
 800704c:	f04f 0300 	mov.w	r3, #0
 8007050:	00eb      	lsls	r3, r5, #3
 8007052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007056:	00e2      	lsls	r2, r4, #3
 8007058:	4614      	mov	r4, r2
 800705a:	461d      	mov	r5, r3
 800705c:	4643      	mov	r3, r8
 800705e:	18e3      	adds	r3, r4, r3
 8007060:	603b      	str	r3, [r7, #0]
 8007062:	464b      	mov	r3, r9
 8007064:	eb45 0303 	adc.w	r3, r5, r3
 8007068:	607b      	str	r3, [r7, #4]
 800706a:	f04f 0200 	mov.w	r2, #0
 800706e:	f04f 0300 	mov.w	r3, #0
 8007072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007076:	4629      	mov	r1, r5
 8007078:	028b      	lsls	r3, r1, #10
 800707a:	4621      	mov	r1, r4
 800707c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007080:	4621      	mov	r1, r4
 8007082:	028a      	lsls	r2, r1, #10
 8007084:	4610      	mov	r0, r2
 8007086:	4619      	mov	r1, r3
 8007088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800708a:	2200      	movs	r2, #0
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	61fa      	str	r2, [r7, #28]
 8007090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007094:	f7f9 f8ec 	bl	8000270 <__aeabi_uldivmod>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4613      	mov	r3, r2
 800709e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80070a0:	4b0b      	ldr	r3, [pc, #44]	@ (80070d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	0c1b      	lsrs	r3, r3, #16
 80070a6:	f003 0303 	and.w	r3, r3, #3
 80070aa:	3301      	adds	r3, #1
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80070b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070ba:	e002      	b.n	80070c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070bc:	4b05      	ldr	r3, [pc, #20]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80070be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3750      	adds	r7, #80	@ 0x50
 80070c8:	46bd      	mov	sp, r7
 80070ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ce:	bf00      	nop
 80070d0:	40023800 	.word	0x40023800
 80070d4:	00f42400 	.word	0x00f42400
 80070d8:	007a1200 	.word	0x007a1200

080070dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070e0:	4b03      	ldr	r3, [pc, #12]	@ (80070f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070e2:	681b      	ldr	r3, [r3, #0]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20000038 	.word	0x20000038

080070f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070f8:	f7ff fff0 	bl	80070dc <HAL_RCC_GetHCLKFreq>
 80070fc:	4602      	mov	r2, r0
 80070fe:	4b05      	ldr	r3, [pc, #20]	@ (8007114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	0a9b      	lsrs	r3, r3, #10
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	4903      	ldr	r1, [pc, #12]	@ (8007118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800710a:	5ccb      	ldrb	r3, [r1, r3]
 800710c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007110:	4618      	mov	r0, r3
 8007112:	bd80      	pop	{r7, pc}
 8007114:	40023800 	.word	0x40023800
 8007118:	08017c8c 	.word	0x08017c8c

0800711c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007120:	f7ff ffdc 	bl	80070dc <HAL_RCC_GetHCLKFreq>
 8007124:	4602      	mov	r2, r0
 8007126:	4b05      	ldr	r3, [pc, #20]	@ (800713c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	0b5b      	lsrs	r3, r3, #13
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	4903      	ldr	r1, [pc, #12]	@ (8007140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007132:	5ccb      	ldrb	r3, [r1, r3]
 8007134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007138:	4618      	mov	r0, r3
 800713a:	bd80      	pop	{r7, pc}
 800713c:	40023800 	.word	0x40023800
 8007140:	08017c8c 	.word	0x08017c8c

08007144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e041      	b.n	80071da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d106      	bne.n	8007170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7fb fcbc 	bl	8002ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3304      	adds	r3, #4
 8007180:	4619      	mov	r1, r3
 8007182:	4610      	mov	r0, r2
 8007184:	f000 fcc4 	bl	8007b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d001      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e04e      	b.n	800729a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0201 	orr.w	r2, r2, #1
 8007212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a23      	ldr	r2, [pc, #140]	@ (80072a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d022      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x80>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007226:	d01d      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x80>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a1f      	ldr	r2, [pc, #124]	@ (80072ac <HAL_TIM_Base_Start_IT+0xc8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d018      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x80>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1e      	ldr	r2, [pc, #120]	@ (80072b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d013      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x80>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1c      	ldr	r2, [pc, #112]	@ (80072b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d00e      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x80>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1b      	ldr	r2, [pc, #108]	@ (80072b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d009      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x80>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a19      	ldr	r2, [pc, #100]	@ (80072bc <HAL_TIM_Base_Start_IT+0xd8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d004      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x80>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a18      	ldr	r2, [pc, #96]	@ (80072c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d111      	bne.n	8007288 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b06      	cmp	r3, #6
 8007274:	d010      	beq.n	8007298 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f042 0201 	orr.w	r2, r2, #1
 8007284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007286:	e007      	b.n	8007298 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0201 	orr.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	40010000 	.word	0x40010000
 80072ac:	40000400 	.word	0x40000400
 80072b0:	40000800 	.word	0x40000800
 80072b4:	40000c00 	.word	0x40000c00
 80072b8:	40010400 	.word	0x40010400
 80072bc:	40014000 	.word	0x40014000
 80072c0:	40001800 	.word	0x40001800

080072c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e041      	b.n	800735a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d106      	bne.n	80072f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7fb fb98 	bl	8002a20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3304      	adds	r3, #4
 8007300:	4619      	mov	r1, r3
 8007302:	4610      	mov	r0, r2
 8007304:	f000 fc04 	bl	8007b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d109      	bne.n	8007388 <HAL_TIM_PWM_Start+0x24>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b01      	cmp	r3, #1
 800737e:	bf14      	ite	ne
 8007380:	2301      	movne	r3, #1
 8007382:	2300      	moveq	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	e022      	b.n	80073ce <HAL_TIM_PWM_Start+0x6a>
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2b04      	cmp	r3, #4
 800738c:	d109      	bne.n	80073a2 <HAL_TIM_PWM_Start+0x3e>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b01      	cmp	r3, #1
 8007398:	bf14      	ite	ne
 800739a:	2301      	movne	r3, #1
 800739c:	2300      	moveq	r3, #0
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	e015      	b.n	80073ce <HAL_TIM_PWM_Start+0x6a>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d109      	bne.n	80073bc <HAL_TIM_PWM_Start+0x58>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	bf14      	ite	ne
 80073b4:	2301      	movne	r3, #1
 80073b6:	2300      	moveq	r3, #0
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	e008      	b.n	80073ce <HAL_TIM_PWM_Start+0x6a>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	bf14      	ite	ne
 80073c8:	2301      	movne	r3, #1
 80073ca:	2300      	moveq	r3, #0
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e07c      	b.n	80074d0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d104      	bne.n	80073e6 <HAL_TIM_PWM_Start+0x82>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073e4:	e013      	b.n	800740e <HAL_TIM_PWM_Start+0xaa>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d104      	bne.n	80073f6 <HAL_TIM_PWM_Start+0x92>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073f4:	e00b      	b.n	800740e <HAL_TIM_PWM_Start+0xaa>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d104      	bne.n	8007406 <HAL_TIM_PWM_Start+0xa2>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007404:	e003      	b.n	800740e <HAL_TIM_PWM_Start+0xaa>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2202      	movs	r2, #2
 800740a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2201      	movs	r2, #1
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	4618      	mov	r0, r3
 8007418:	f000 fdd0 	bl	8007fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a2d      	ldr	r2, [pc, #180]	@ (80074d8 <HAL_TIM_PWM_Start+0x174>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d004      	beq.n	8007430 <HAL_TIM_PWM_Start+0xcc>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a2c      	ldr	r2, [pc, #176]	@ (80074dc <HAL_TIM_PWM_Start+0x178>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d101      	bne.n	8007434 <HAL_TIM_PWM_Start+0xd0>
 8007430:	2301      	movs	r3, #1
 8007432:	e000      	b.n	8007436 <HAL_TIM_PWM_Start+0xd2>
 8007434:	2300      	movs	r3, #0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d007      	beq.n	800744a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007448:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a22      	ldr	r2, [pc, #136]	@ (80074d8 <HAL_TIM_PWM_Start+0x174>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d022      	beq.n	800749a <HAL_TIM_PWM_Start+0x136>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800745c:	d01d      	beq.n	800749a <HAL_TIM_PWM_Start+0x136>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a1f      	ldr	r2, [pc, #124]	@ (80074e0 <HAL_TIM_PWM_Start+0x17c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d018      	beq.n	800749a <HAL_TIM_PWM_Start+0x136>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a1d      	ldr	r2, [pc, #116]	@ (80074e4 <HAL_TIM_PWM_Start+0x180>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d013      	beq.n	800749a <HAL_TIM_PWM_Start+0x136>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a1c      	ldr	r2, [pc, #112]	@ (80074e8 <HAL_TIM_PWM_Start+0x184>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00e      	beq.n	800749a <HAL_TIM_PWM_Start+0x136>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a16      	ldr	r2, [pc, #88]	@ (80074dc <HAL_TIM_PWM_Start+0x178>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d009      	beq.n	800749a <HAL_TIM_PWM_Start+0x136>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a18      	ldr	r2, [pc, #96]	@ (80074ec <HAL_TIM_PWM_Start+0x188>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d004      	beq.n	800749a <HAL_TIM_PWM_Start+0x136>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a16      	ldr	r2, [pc, #88]	@ (80074f0 <HAL_TIM_PWM_Start+0x18c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d111      	bne.n	80074be <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f003 0307 	and.w	r3, r3, #7
 80074a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b06      	cmp	r3, #6
 80074aa:	d010      	beq.n	80074ce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074bc:	e007      	b.n	80074ce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f042 0201 	orr.w	r2, r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	40010000 	.word	0x40010000
 80074dc:	40010400 	.word	0x40010400
 80074e0:	40000400 	.word	0x40000400
 80074e4:	40000800 	.word	0x40000800
 80074e8:	40000c00 	.word	0x40000c00
 80074ec:	40014000 	.word	0x40014000
 80074f0:	40001800 	.word	0x40001800

080074f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e097      	b.n	8007638 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	d106      	bne.n	8007522 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7fb f977 	bl	8002810 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2202      	movs	r2, #2
 8007526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6812      	ldr	r2, [r2, #0]
 8007534:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007538:	f023 0307 	bic.w	r3, r3, #7
 800753c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	3304      	adds	r3, #4
 8007546:	4619      	mov	r1, r3
 8007548:	4610      	mov	r0, r2
 800754a:	f000 fae1 	bl	8007b10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	4313      	orrs	r3, r2
 800756e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007576:	f023 0303 	bic.w	r3, r3, #3
 800757a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	4313      	orrs	r3, r2
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4313      	orrs	r3, r2
 800758c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007594:	f023 030c 	bic.w	r3, r3, #12
 8007598:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68da      	ldr	r2, [r3, #12]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	021b      	lsls	r3, r3, #8
 80075b0:	4313      	orrs	r3, r2
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	011a      	lsls	r2, r3, #4
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	031b      	lsls	r3, r3, #12
 80075c4:	4313      	orrs	r3, r2
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80075d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80075da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	011b      	lsls	r3, r3, #4
 80075e6:	4313      	orrs	r3, r2
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007650:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007658:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007660:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007668:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d110      	bne.n	8007692 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d102      	bne.n	800767c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007676:	7b7b      	ldrb	r3, [r7, #13]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d001      	beq.n	8007680 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e069      	b.n	8007754 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007690:	e031      	b.n	80076f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b04      	cmp	r3, #4
 8007696:	d110      	bne.n	80076ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d102      	bne.n	80076a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800769e:	7b3b      	ldrb	r3, [r7, #12]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d001      	beq.n	80076a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e055      	b.n	8007754 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2202      	movs	r2, #2
 80076ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076b8:	e01d      	b.n	80076f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d108      	bne.n	80076d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076c0:	7bbb      	ldrb	r3, [r7, #14]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d105      	bne.n	80076d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076c6:	7b7b      	ldrb	r3, [r7, #13]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d102      	bne.n	80076d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076cc:	7b3b      	ldrb	r3, [r7, #12]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d001      	beq.n	80076d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e03e      	b.n	8007754 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2202      	movs	r2, #2
 80076da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2202      	movs	r2, #2
 80076ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2202      	movs	r2, #2
 80076f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <HAL_TIM_Encoder_Start+0xc4>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d008      	beq.n	8007714 <HAL_TIM_Encoder_Start+0xd4>
 8007702:	e00f      	b.n	8007724 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2201      	movs	r2, #1
 800770a:	2100      	movs	r1, #0
 800770c:	4618      	mov	r0, r3
 800770e:	f000 fc55 	bl	8007fbc <TIM_CCxChannelCmd>
      break;
 8007712:	e016      	b.n	8007742 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2201      	movs	r2, #1
 800771a:	2104      	movs	r1, #4
 800771c:	4618      	mov	r0, r3
 800771e:	f000 fc4d 	bl	8007fbc <TIM_CCxChannelCmd>
      break;
 8007722:	e00e      	b.n	8007742 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2201      	movs	r2, #1
 800772a:	2100      	movs	r1, #0
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fc45 	bl	8007fbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2201      	movs	r2, #1
 8007738:	2104      	movs	r1, #4
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fc3e 	bl	8007fbc <TIM_CCxChannelCmd>
      break;
 8007740:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f042 0201 	orr.w	r2, r2, #1
 8007750:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f003 0302 	and.w	r3, r3, #2
 800777a:	2b00      	cmp	r3, #0
 800777c:	d020      	beq.n	80077c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b00      	cmp	r3, #0
 8007786:	d01b      	beq.n	80077c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f06f 0202 	mvn.w	r2, #2
 8007790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	f003 0303 	and.w	r3, r3, #3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f994 	bl	8007ad4 <HAL_TIM_IC_CaptureCallback>
 80077ac:	e005      	b.n	80077ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f986 	bl	8007ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f997 	bl	8007ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f003 0304 	and.w	r3, r3, #4
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d020      	beq.n	800780c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f003 0304 	and.w	r3, r3, #4
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d01b      	beq.n	800780c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f06f 0204 	mvn.w	r2, #4
 80077dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2202      	movs	r2, #2
 80077e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f96e 	bl	8007ad4 <HAL_TIM_IC_CaptureCallback>
 80077f8:	e005      	b.n	8007806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f960 	bl	8007ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f971 	bl	8007ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	2b00      	cmp	r3, #0
 8007814:	d020      	beq.n	8007858 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f003 0308 	and.w	r3, r3, #8
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01b      	beq.n	8007858 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f06f 0208 	mvn.w	r2, #8
 8007828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2204      	movs	r2, #4
 800782e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	f003 0303 	and.w	r3, r3, #3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f948 	bl	8007ad4 <HAL_TIM_IC_CaptureCallback>
 8007844:	e005      	b.n	8007852 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f93a 	bl	8007ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f94b 	bl	8007ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f003 0310 	and.w	r3, r3, #16
 800785e:	2b00      	cmp	r3, #0
 8007860:	d020      	beq.n	80078a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f003 0310 	and.w	r3, r3, #16
 8007868:	2b00      	cmp	r3, #0
 800786a:	d01b      	beq.n	80078a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0210 	mvn.w	r2, #16
 8007874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2208      	movs	r2, #8
 800787a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f922 	bl	8007ad4 <HAL_TIM_IC_CaptureCallback>
 8007890:	e005      	b.n	800789e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f914 	bl	8007ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f925 	bl	8007ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00c      	beq.n	80078c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d007      	beq.n	80078c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f06f 0201 	mvn.w	r2, #1
 80078c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7f9 fc52 	bl	800116c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00c      	beq.n	80078ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d007      	beq.n	80078ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80078e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fc66 	bl	80081b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00c      	beq.n	8007910 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d007      	beq.n	8007910 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f8f6 	bl	8007afc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00c      	beq.n	8007934 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f003 0320 	and.w	r3, r3, #32
 8007920:	2b00      	cmp	r3, #0
 8007922:	d007      	beq.n	8007934 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f06f 0220 	mvn.w	r2, #32
 800792c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fc38 	bl	80081a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007934:	bf00      	nop
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007952:	2b01      	cmp	r3, #1
 8007954:	d101      	bne.n	800795a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007956:	2302      	movs	r3, #2
 8007958:	e0ae      	b.n	8007ab8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b0c      	cmp	r3, #12
 8007966:	f200 809f 	bhi.w	8007aa8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800796a:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	080079a5 	.word	0x080079a5
 8007974:	08007aa9 	.word	0x08007aa9
 8007978:	08007aa9 	.word	0x08007aa9
 800797c:	08007aa9 	.word	0x08007aa9
 8007980:	080079e5 	.word	0x080079e5
 8007984:	08007aa9 	.word	0x08007aa9
 8007988:	08007aa9 	.word	0x08007aa9
 800798c:	08007aa9 	.word	0x08007aa9
 8007990:	08007a27 	.word	0x08007a27
 8007994:	08007aa9 	.word	0x08007aa9
 8007998:	08007aa9 	.word	0x08007aa9
 800799c:	08007aa9 	.word	0x08007aa9
 80079a0:	08007a67 	.word	0x08007a67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68b9      	ldr	r1, [r7, #8]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 f956 	bl	8007c5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699a      	ldr	r2, [r3, #24]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f042 0208 	orr.w	r2, r2, #8
 80079be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699a      	ldr	r2, [r3, #24]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 0204 	bic.w	r2, r2, #4
 80079ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6999      	ldr	r1, [r3, #24]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	691a      	ldr	r2, [r3, #16]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	619a      	str	r2, [r3, #24]
      break;
 80079e2:	e064      	b.n	8007aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 f9a6 	bl	8007d3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	699a      	ldr	r2, [r3, #24]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699a      	ldr	r2, [r3, #24]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6999      	ldr	r1, [r3, #24]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	021a      	lsls	r2, r3, #8
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	619a      	str	r2, [r3, #24]
      break;
 8007a24:	e043      	b.n	8007aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68b9      	ldr	r1, [r7, #8]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 f9fb 	bl	8007e28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69da      	ldr	r2, [r3, #28]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 0208 	orr.w	r2, r2, #8
 8007a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	69da      	ldr	r2, [r3, #28]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0204 	bic.w	r2, r2, #4
 8007a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69d9      	ldr	r1, [r3, #28]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	691a      	ldr	r2, [r3, #16]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	430a      	orrs	r2, r1
 8007a62:	61da      	str	r2, [r3, #28]
      break;
 8007a64:	e023      	b.n	8007aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68b9      	ldr	r1, [r7, #8]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 fa4f 	bl	8007f10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69da      	ldr	r2, [r3, #28]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	69da      	ldr	r2, [r3, #28]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69d9      	ldr	r1, [r3, #28]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	021a      	lsls	r2, r3, #8
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	61da      	str	r2, [r3, #28]
      break;
 8007aa6:	e002      	b.n	8007aae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8007aac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a43      	ldr	r2, [pc, #268]	@ (8007c30 <TIM_Base_SetConfig+0x120>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d013      	beq.n	8007b50 <TIM_Base_SetConfig+0x40>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b2e:	d00f      	beq.n	8007b50 <TIM_Base_SetConfig+0x40>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a40      	ldr	r2, [pc, #256]	@ (8007c34 <TIM_Base_SetConfig+0x124>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d00b      	beq.n	8007b50 <TIM_Base_SetConfig+0x40>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a3f      	ldr	r2, [pc, #252]	@ (8007c38 <TIM_Base_SetConfig+0x128>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d007      	beq.n	8007b50 <TIM_Base_SetConfig+0x40>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a3e      	ldr	r2, [pc, #248]	@ (8007c3c <TIM_Base_SetConfig+0x12c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d003      	beq.n	8007b50 <TIM_Base_SetConfig+0x40>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a3d      	ldr	r2, [pc, #244]	@ (8007c40 <TIM_Base_SetConfig+0x130>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d108      	bne.n	8007b62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a32      	ldr	r2, [pc, #200]	@ (8007c30 <TIM_Base_SetConfig+0x120>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d02b      	beq.n	8007bc2 <TIM_Base_SetConfig+0xb2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b70:	d027      	beq.n	8007bc2 <TIM_Base_SetConfig+0xb2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a2f      	ldr	r2, [pc, #188]	@ (8007c34 <TIM_Base_SetConfig+0x124>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d023      	beq.n	8007bc2 <TIM_Base_SetConfig+0xb2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a2e      	ldr	r2, [pc, #184]	@ (8007c38 <TIM_Base_SetConfig+0x128>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d01f      	beq.n	8007bc2 <TIM_Base_SetConfig+0xb2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a2d      	ldr	r2, [pc, #180]	@ (8007c3c <TIM_Base_SetConfig+0x12c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d01b      	beq.n	8007bc2 <TIM_Base_SetConfig+0xb2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a2c      	ldr	r2, [pc, #176]	@ (8007c40 <TIM_Base_SetConfig+0x130>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d017      	beq.n	8007bc2 <TIM_Base_SetConfig+0xb2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a2b      	ldr	r2, [pc, #172]	@ (8007c44 <TIM_Base_SetConfig+0x134>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d013      	beq.n	8007bc2 <TIM_Base_SetConfig+0xb2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a2a      	ldr	r2, [pc, #168]	@ (8007c48 <TIM_Base_SetConfig+0x138>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d00f      	beq.n	8007bc2 <TIM_Base_SetConfig+0xb2>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a29      	ldr	r2, [pc, #164]	@ (8007c4c <TIM_Base_SetConfig+0x13c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00b      	beq.n	8007bc2 <TIM_Base_SetConfig+0xb2>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a28      	ldr	r2, [pc, #160]	@ (8007c50 <TIM_Base_SetConfig+0x140>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d007      	beq.n	8007bc2 <TIM_Base_SetConfig+0xb2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a27      	ldr	r2, [pc, #156]	@ (8007c54 <TIM_Base_SetConfig+0x144>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d003      	beq.n	8007bc2 <TIM_Base_SetConfig+0xb2>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a26      	ldr	r2, [pc, #152]	@ (8007c58 <TIM_Base_SetConfig+0x148>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d108      	bne.n	8007bd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	689a      	ldr	r2, [r3, #8]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a0e      	ldr	r2, [pc, #56]	@ (8007c30 <TIM_Base_SetConfig+0x120>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d003      	beq.n	8007c02 <TIM_Base_SetConfig+0xf2>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a10      	ldr	r2, [pc, #64]	@ (8007c40 <TIM_Base_SetConfig+0x130>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d103      	bne.n	8007c0a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	691a      	ldr	r2, [r3, #16]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f043 0204 	orr.w	r2, r3, #4
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	601a      	str	r2, [r3, #0]
}
 8007c22:	bf00      	nop
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	40010000 	.word	0x40010000
 8007c34:	40000400 	.word	0x40000400
 8007c38:	40000800 	.word	0x40000800
 8007c3c:	40000c00 	.word	0x40000c00
 8007c40:	40010400 	.word	0x40010400
 8007c44:	40014000 	.word	0x40014000
 8007c48:	40014400 	.word	0x40014400
 8007c4c:	40014800 	.word	0x40014800
 8007c50:	40001800 	.word	0x40001800
 8007c54:	40001c00 	.word	0x40001c00
 8007c58:	40002000 	.word	0x40002000

08007c5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	f023 0201 	bic.w	r2, r3, #1
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f023 0303 	bic.w	r3, r3, #3
 8007c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f023 0302 	bic.w	r3, r3, #2
 8007ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a20      	ldr	r2, [pc, #128]	@ (8007d34 <TIM_OC1_SetConfig+0xd8>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d003      	beq.n	8007cc0 <TIM_OC1_SetConfig+0x64>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a1f      	ldr	r2, [pc, #124]	@ (8007d38 <TIM_OC1_SetConfig+0xdc>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d10c      	bne.n	8007cda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f023 0308 	bic.w	r3, r3, #8
 8007cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f023 0304 	bic.w	r3, r3, #4
 8007cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a15      	ldr	r2, [pc, #84]	@ (8007d34 <TIM_OC1_SetConfig+0xd8>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d003      	beq.n	8007cea <TIM_OC1_SetConfig+0x8e>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a14      	ldr	r2, [pc, #80]	@ (8007d38 <TIM_OC1_SetConfig+0xdc>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d111      	bne.n	8007d0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	621a      	str	r2, [r3, #32]
}
 8007d28:	bf00      	nop
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	40010000 	.word	0x40010000
 8007d38:	40010400 	.word	0x40010400

08007d3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	f023 0210 	bic.w	r2, r3, #16
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	021b      	lsls	r3, r3, #8
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f023 0320 	bic.w	r3, r3, #32
 8007d86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a22      	ldr	r2, [pc, #136]	@ (8007e20 <TIM_OC2_SetConfig+0xe4>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d003      	beq.n	8007da4 <TIM_OC2_SetConfig+0x68>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a21      	ldr	r2, [pc, #132]	@ (8007e24 <TIM_OC2_SetConfig+0xe8>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d10d      	bne.n	8007dc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a17      	ldr	r2, [pc, #92]	@ (8007e20 <TIM_OC2_SetConfig+0xe4>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d003      	beq.n	8007dd0 <TIM_OC2_SetConfig+0x94>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a16      	ldr	r2, [pc, #88]	@ (8007e24 <TIM_OC2_SetConfig+0xe8>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d113      	bne.n	8007df8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	621a      	str	r2, [r3, #32]
}
 8007e12:	bf00      	nop
 8007e14:	371c      	adds	r7, #28
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	40010000 	.word	0x40010000
 8007e24:	40010400 	.word	0x40010400

08007e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0303 	bic.w	r3, r3, #3
 8007e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	021b      	lsls	r3, r3, #8
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a21      	ldr	r2, [pc, #132]	@ (8007f08 <TIM_OC3_SetConfig+0xe0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d003      	beq.n	8007e8e <TIM_OC3_SetConfig+0x66>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a20      	ldr	r2, [pc, #128]	@ (8007f0c <TIM_OC3_SetConfig+0xe4>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d10d      	bne.n	8007eaa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	021b      	lsls	r3, r3, #8
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a16      	ldr	r2, [pc, #88]	@ (8007f08 <TIM_OC3_SetConfig+0xe0>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d003      	beq.n	8007eba <TIM_OC3_SetConfig+0x92>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a15      	ldr	r2, [pc, #84]	@ (8007f0c <TIM_OC3_SetConfig+0xe4>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d113      	bne.n	8007ee2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	011b      	lsls	r3, r3, #4
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	011b      	lsls	r3, r3, #4
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	621a      	str	r2, [r3, #32]
}
 8007efc:	bf00      	nop
 8007efe:	371c      	adds	r7, #28
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	40010000 	.word	0x40010000
 8007f0c:	40010400 	.word	0x40010400

08007f10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	021b      	lsls	r3, r3, #8
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	031b      	lsls	r3, r3, #12
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a12      	ldr	r2, [pc, #72]	@ (8007fb4 <TIM_OC4_SetConfig+0xa4>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d003      	beq.n	8007f78 <TIM_OC4_SetConfig+0x68>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a11      	ldr	r2, [pc, #68]	@ (8007fb8 <TIM_OC4_SetConfig+0xa8>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d109      	bne.n	8007f8c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	019b      	lsls	r3, r3, #6
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	621a      	str	r2, [r3, #32]
}
 8007fa6:	bf00      	nop
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	40010000 	.word	0x40010000
 8007fb8:	40010400 	.word	0x40010400

08007fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f003 031f 	and.w	r3, r3, #31
 8007fce:	2201      	movs	r2, #1
 8007fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6a1a      	ldr	r2, [r3, #32]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	43db      	mvns	r3, r3
 8007fde:	401a      	ands	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a1a      	ldr	r2, [r3, #32]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f003 031f 	and.w	r3, r3, #31
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff4:	431a      	orrs	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	621a      	str	r2, [r3, #32]
}
 8007ffa:	bf00      	nop
 8007ffc:	371c      	adds	r7, #28
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
	...

08008008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008018:	2b01      	cmp	r3, #1
 800801a:	d101      	bne.n	8008020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800801c:	2302      	movs	r3, #2
 800801e:	e05a      	b.n	80080d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	4313      	orrs	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a21      	ldr	r2, [pc, #132]	@ (80080e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d022      	beq.n	80080aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800806c:	d01d      	beq.n	80080aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a1d      	ldr	r2, [pc, #116]	@ (80080e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d018      	beq.n	80080aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a1b      	ldr	r2, [pc, #108]	@ (80080ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d013      	beq.n	80080aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a1a      	ldr	r2, [pc, #104]	@ (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d00e      	beq.n	80080aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a18      	ldr	r2, [pc, #96]	@ (80080f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d009      	beq.n	80080aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a17      	ldr	r2, [pc, #92]	@ (80080f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d004      	beq.n	80080aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a15      	ldr	r2, [pc, #84]	@ (80080fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d10c      	bne.n	80080c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	40010000 	.word	0x40010000
 80080e8:	40000400 	.word	0x40000400
 80080ec:	40000800 	.word	0x40000800
 80080f0:	40000c00 	.word	0x40000c00
 80080f4:	40010400 	.word	0x40010400
 80080f8:	40014000 	.word	0x40014000
 80080fc:	40001800 	.word	0x40001800

08008100 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008114:	2b01      	cmp	r3, #1
 8008116:	d101      	bne.n	800811c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008118:	2302      	movs	r3, #2
 800811a:	e03d      	b.n	8008198 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	4313      	orrs	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	4313      	orrs	r3, r2
 800813e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	4313      	orrs	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4313      	orrs	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	4313      	orrs	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e042      	b.n	8008264 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d106      	bne.n	80081f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7fb f858 	bl	80032a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2224      	movs	r2, #36	@ 0x24
 80081fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800820e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fffb 	bl	800920c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	691a      	ldr	r2, [r3, #16]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008224:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	695a      	ldr	r2, [r3, #20]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008234:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68da      	ldr	r2, [r3, #12]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008244:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2220      	movs	r2, #32
 8008250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08c      	sub	sp, #48	@ 0x30
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	4613      	mov	r3, r2
 8008278:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b20      	cmp	r3, #32
 8008284:	d162      	bne.n	800834c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d002      	beq.n	8008292 <HAL_UART_Transmit_DMA+0x26>
 800828c:	88fb      	ldrh	r3, [r7, #6]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e05b      	b.n	800834e <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	88fa      	ldrh	r2, [r7, #6]
 80082a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	88fa      	ldrh	r2, [r7, #6]
 80082a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2221      	movs	r2, #33	@ 0x21
 80082b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ba:	4a27      	ldr	r2, [pc, #156]	@ (8008358 <HAL_UART_Transmit_DMA+0xec>)
 80082bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c2:	4a26      	ldr	r2, [pc, #152]	@ (800835c <HAL_UART_Transmit_DMA+0xf0>)
 80082c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ca:	4a25      	ldr	r2, [pc, #148]	@ (8008360 <HAL_UART_Transmit_DMA+0xf4>)
 80082cc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d2:	2200      	movs	r2, #0
 80082d4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80082d6:	f107 0308 	add.w	r3, r7, #8
 80082da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80082e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e2:	6819      	ldr	r1, [r3, #0]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3304      	adds	r3, #4
 80082ea:	461a      	mov	r2, r3
 80082ec:	88fb      	ldrh	r3, [r7, #6]
 80082ee:	f7fc faeb 	bl	80048c8 <HAL_DMA_Start_IT>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d008      	beq.n	800830a <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2210      	movs	r2, #16
 80082fc:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2220      	movs	r2, #32
 8008302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e021      	b.n	800834e <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008312:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3314      	adds	r3, #20
 800831a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	e853 3f00 	ldrex	r3, [r3]
 8008322:	617b      	str	r3, [r7, #20]
   return(result);
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800832a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3314      	adds	r3, #20
 8008332:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008334:	627a      	str	r2, [r7, #36]	@ 0x24
 8008336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008338:	6a39      	ldr	r1, [r7, #32]
 800833a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800833c:	e841 2300 	strex	r3, r2, [r1]
 8008340:	61fb      	str	r3, [r7, #28]
   return(result);
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1e5      	bne.n	8008314 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	e000      	b.n	800834e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800834c:	2302      	movs	r3, #2
  }
}
 800834e:	4618      	mov	r0, r3
 8008350:	3730      	adds	r7, #48	@ 0x30
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	08008a89 	.word	0x08008a89
 800835c:	08008b23 	.word	0x08008b23
 8008360:	08008ca7 	.word	0x08008ca7

08008364 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	4613      	mov	r3, r2
 8008370:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b20      	cmp	r3, #32
 800837c:	d112      	bne.n	80083a4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <HAL_UART_Receive_DMA+0x26>
 8008384:	88fb      	ldrh	r3, [r7, #6]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e00b      	b.n	80083a6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008394:	88fb      	ldrh	r3, [r7, #6]
 8008396:	461a      	mov	r2, r3
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 fcce 	bl	8008d3c <UART_Start_Receive_DMA>
 80083a0:	4603      	mov	r3, r0
 80083a2:	e000      	b.n	80083a6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80083a4:	2302      	movs	r3, #2
  }
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b09a      	sub	sp, #104	@ 0x68
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	330c      	adds	r3, #12
 80083bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80083c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	330c      	adds	r3, #12
 80083d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80083d6:	657a      	str	r2, [r7, #84]	@ 0x54
 80083d8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80083dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80083de:	e841 2300 	strex	r3, r2, [r1]
 80083e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80083e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1e5      	bne.n	80083b6 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3314      	adds	r3, #20
 80083f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f4:	e853 3f00 	ldrex	r3, [r3]
 80083f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fc:	f023 0301 	bic.w	r3, r3, #1
 8008400:	663b      	str	r3, [r7, #96]	@ 0x60
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3314      	adds	r3, #20
 8008408:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800840a:	643a      	str	r2, [r7, #64]	@ 0x40
 800840c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008410:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e5      	bne.n	80083ea <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008422:	2b01      	cmp	r3, #1
 8008424:	d119      	bne.n	800845a <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	330c      	adds	r3, #12
 800842c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	61fb      	str	r3, [r7, #28]
   return(result);
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	f023 0310 	bic.w	r3, r3, #16
 800843c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	330c      	adds	r3, #12
 8008444:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008446:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008448:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800844c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e5      	bne.n	8008426 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008464:	2b40      	cmp	r3, #64	@ 0x40
 8008466:	d136      	bne.n	80084d6 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3314      	adds	r3, #20
 800846e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	e853 3f00 	ldrex	r3, [r3]
 8008476:	60bb      	str	r3, [r7, #8]
   return(result);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800847e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3314      	adds	r3, #20
 8008486:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008488:	61ba      	str	r2, [r7, #24]
 800848a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	6979      	ldr	r1, [r7, #20]
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	e841 2300 	strex	r3, r2, [r1]
 8008494:	613b      	str	r3, [r7, #16]
   return(result);
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e5      	bne.n	8008468 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d018      	beq.n	80084d6 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084a8:	2200      	movs	r2, #0
 80084aa:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fc fa61 	bl	8004978 <HAL_DMA_Abort>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00c      	beq.n	80084d6 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fc fc75 	bl	8004db0 <HAL_DMA_GetError>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b20      	cmp	r3, #32
 80084ca:	d104      	bne.n	80084d6 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2210      	movs	r2, #16
 80084d0:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e00a      	b.n	80084ec <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2220      	movs	r2, #32
 80084e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3768      	adds	r7, #104	@ 0x68
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b0ba      	sub	sp, #232	@ 0xe8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800851a:	2300      	movs	r3, #0
 800851c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008520:	2300      	movs	r3, #0
 8008522:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800852a:	f003 030f 	and.w	r3, r3, #15
 800852e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10f      	bne.n	800855a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800853a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b00      	cmp	r3, #0
 8008544:	d009      	beq.n	800855a <HAL_UART_IRQHandler+0x66>
 8008546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800854a:	f003 0320 	and.w	r3, r3, #32
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fd9c 	bl	8009090 <UART_Receive_IT>
      return;
 8008558:	e273      	b.n	8008a42 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800855a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 80de 	beq.w	8008720 <HAL_UART_IRQHandler+0x22c>
 8008564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	2b00      	cmp	r3, #0
 800856e:	d106      	bne.n	800857e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008574:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 80d1 	beq.w	8008720 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800857e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00b      	beq.n	80085a2 <HAL_UART_IRQHandler+0xae>
 800858a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800858e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008592:	2b00      	cmp	r3, #0
 8008594:	d005      	beq.n	80085a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800859a:	f043 0201 	orr.w	r2, r3, #1
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a6:	f003 0304 	and.w	r3, r3, #4
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00b      	beq.n	80085c6 <HAL_UART_IRQHandler+0xd2>
 80085ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d005      	beq.n	80085c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085be:	f043 0202 	orr.w	r2, r3, #2
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ca:	f003 0302 	and.w	r3, r3, #2
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00b      	beq.n	80085ea <HAL_UART_IRQHandler+0xf6>
 80085d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d005      	beq.n	80085ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e2:	f043 0204 	orr.w	r2, r3, #4
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80085ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ee:	f003 0308 	and.w	r3, r3, #8
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d011      	beq.n	800861a <HAL_UART_IRQHandler+0x126>
 80085f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085fa:	f003 0320 	and.w	r3, r3, #32
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d105      	bne.n	800860e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d005      	beq.n	800861a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008612:	f043 0208 	orr.w	r2, r3, #8
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 820a 	beq.w	8008a38 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008628:	f003 0320 	and.w	r3, r3, #32
 800862c:	2b00      	cmp	r3, #0
 800862e:	d008      	beq.n	8008642 <HAL_UART_IRQHandler+0x14e>
 8008630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008634:	f003 0320 	and.w	r3, r3, #32
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fd27 	bl	8009090 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800864c:	2b40      	cmp	r3, #64	@ 0x40
 800864e:	bf0c      	ite	eq
 8008650:	2301      	moveq	r3, #1
 8008652:	2300      	movne	r3, #0
 8008654:	b2db      	uxtb	r3, r3
 8008656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800865e:	f003 0308 	and.w	r3, r3, #8
 8008662:	2b00      	cmp	r3, #0
 8008664:	d103      	bne.n	800866e <HAL_UART_IRQHandler+0x17a>
 8008666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800866a:	2b00      	cmp	r3, #0
 800866c:	d04f      	beq.n	800870e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fc32 	bl	8008ed8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800867e:	2b40      	cmp	r3, #64	@ 0x40
 8008680:	d141      	bne.n	8008706 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3314      	adds	r3, #20
 8008688:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008698:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800869c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3314      	adds	r3, #20
 80086aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80086ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80086b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80086ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80086c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1d9      	bne.n	8008682 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d013      	beq.n	80086fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086da:	4a8a      	ldr	r2, [pc, #552]	@ (8008904 <HAL_UART_IRQHandler+0x410>)
 80086dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fc f9b8 	bl	8004a58 <HAL_DMA_Abort_IT>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d016      	beq.n	800871c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80086f8:	4610      	mov	r0, r2
 80086fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086fc:	e00e      	b.n	800871c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7f8 ffb2 	bl	8001668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008704:	e00a      	b.n	800871c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7f8 ffae 	bl	8001668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800870c:	e006      	b.n	800871c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7f8 ffaa 	bl	8001668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800871a:	e18d      	b.n	8008a38 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800871c:	bf00      	nop
    return;
 800871e:	e18b      	b.n	8008a38 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008724:	2b01      	cmp	r3, #1
 8008726:	f040 8167 	bne.w	80089f8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800872a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800872e:	f003 0310 	and.w	r3, r3, #16
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 8160 	beq.w	80089f8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 8159 	beq.w	80089f8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008746:	2300      	movs	r3, #0
 8008748:	60bb      	str	r3, [r7, #8]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	60bb      	str	r3, [r7, #8]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	60bb      	str	r3, [r7, #8]
 800875a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008766:	2b40      	cmp	r3, #64	@ 0x40
 8008768:	f040 80ce 	bne.w	8008908 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008778:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 80a9 	beq.w	80088d4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800878a:	429a      	cmp	r2, r3
 800878c:	f080 80a2 	bcs.w	80088d4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008796:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087a2:	f000 8088 	beq.w	80088b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	330c      	adds	r3, #12
 80087ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80087b4:	e853 3f00 	ldrex	r3, [r3]
 80087b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80087bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80087c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	330c      	adds	r3, #12
 80087ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80087d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80087d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80087de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80087e2:	e841 2300 	strex	r3, r2, [r1]
 80087e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80087ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1d9      	bne.n	80087a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3314      	adds	r3, #20
 80087f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008802:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008804:	f023 0301 	bic.w	r3, r3, #1
 8008808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3314      	adds	r3, #20
 8008812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008816:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800881a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800881e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008822:	e841 2300 	strex	r3, r2, [r1]
 8008826:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008828:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1e1      	bne.n	80087f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3314      	adds	r3, #20
 8008834:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800883e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008844:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3314      	adds	r3, #20
 800884e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008852:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008854:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008856:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008858:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800885a:	e841 2300 	strex	r3, r2, [r1]
 800885e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008860:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e3      	bne.n	800882e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2220      	movs	r2, #32
 800886a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	330c      	adds	r3, #12
 800887a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800887e:	e853 3f00 	ldrex	r3, [r3]
 8008882:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008886:	f023 0310 	bic.w	r3, r3, #16
 800888a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	330c      	adds	r3, #12
 8008894:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008898:	65ba      	str	r2, [r7, #88]	@ 0x58
 800889a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800889e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088a0:	e841 2300 	strex	r3, r2, [r1]
 80088a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1e3      	bne.n	8008874 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fc f861 	bl	8004978 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2202      	movs	r2, #2
 80088ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f8cf 	bl	8008a70 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80088d2:	e0b3      	b.n	8008a3c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088dc:	429a      	cmp	r2, r3
 80088de:	f040 80ad 	bne.w	8008a3c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e6:	69db      	ldr	r3, [r3, #28]
 80088e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088ec:	f040 80a6 	bne.w	8008a3c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f8b7 	bl	8008a70 <HAL_UARTEx_RxEventCallback>
      return;
 8008902:	e09b      	b.n	8008a3c <HAL_UART_IRQHandler+0x548>
 8008904:	08008f9f 	.word	0x08008f9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008910:	b29b      	uxth	r3, r3
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800891c:	b29b      	uxth	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 808e 	beq.w	8008a40 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8008924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 8089 	beq.w	8008a40 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	330c      	adds	r3, #12
 8008934:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800893e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008944:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	330c      	adds	r3, #12
 800894e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008952:	647a      	str	r2, [r7, #68]	@ 0x44
 8008954:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008956:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800895a:	e841 2300 	strex	r3, r2, [r1]
 800895e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1e3      	bne.n	800892e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3314      	adds	r3, #20
 800896c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008970:	e853 3f00 	ldrex	r3, [r3]
 8008974:	623b      	str	r3, [r7, #32]
   return(result);
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	f023 0301 	bic.w	r3, r3, #1
 800897c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3314      	adds	r3, #20
 8008986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800898a:	633a      	str	r2, [r7, #48]	@ 0x30
 800898c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008992:	e841 2300 	strex	r3, r2, [r1]
 8008996:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1e3      	bne.n	8008966 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2220      	movs	r2, #32
 80089a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	330c      	adds	r3, #12
 80089b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	e853 3f00 	ldrex	r3, [r3]
 80089ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f023 0310 	bic.w	r3, r3, #16
 80089c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	330c      	adds	r3, #12
 80089cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80089d0:	61fa      	str	r2, [r7, #28]
 80089d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	69b9      	ldr	r1, [r7, #24]
 80089d6:	69fa      	ldr	r2, [r7, #28]
 80089d8:	e841 2300 	strex	r3, r2, [r1]
 80089dc:	617b      	str	r3, [r7, #20]
   return(result);
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e3      	bne.n	80089ac <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f83d 	bl	8008a70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089f6:	e023      	b.n	8008a40 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80089f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d009      	beq.n	8008a18 <HAL_UART_IRQHandler+0x524>
 8008a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fad5 	bl	8008fc0 <UART_Transmit_IT>
    return;
 8008a16:	e014      	b.n	8008a42 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00e      	beq.n	8008a42 <HAL_UART_IRQHandler+0x54e>
 8008a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d008      	beq.n	8008a42 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fb15 	bl	8009060 <UART_EndTransmit_IT>
    return;
 8008a36:	e004      	b.n	8008a42 <HAL_UART_IRQHandler+0x54e>
    return;
 8008a38:	bf00      	nop
 8008a3a:	e002      	b.n	8008a42 <HAL_UART_IRQHandler+0x54e>
      return;
 8008a3c:	bf00      	nop
 8008a3e:	e000      	b.n	8008a42 <HAL_UART_IRQHandler+0x54e>
      return;
 8008a40:	bf00      	nop
  }
}
 8008a42:	37e8      	adds	r7, #232	@ 0xe8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b090      	sub	sp, #64	@ 0x40
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d137      	bne.n	8008b14 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3314      	adds	r3, #20
 8008ab0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	3314      	adds	r3, #20
 8008ac8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008aca:	633a      	str	r2, [r7, #48]	@ 0x30
 8008acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e5      	bne.n	8008aaa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	330c      	adds	r3, #12
 8008ae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	e853 3f00 	ldrex	r3, [r3]
 8008aec:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	330c      	adds	r3, #12
 8008afc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008afe:	61fa      	str	r2, [r7, #28]
 8008b00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b02:	69b9      	ldr	r1, [r7, #24]
 8008b04:	69fa      	ldr	r2, [r7, #28]
 8008b06:	e841 2300 	strex	r3, r2, [r1]
 8008b0a:	617b      	str	r3, [r7, #20]
   return(result);
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1e5      	bne.n	8008ade <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b12:	e002      	b.n	8008b1a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008b14:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008b16:	f7ff ff97 	bl	8008a48 <HAL_UART_TxCpltCallback>
}
 8008b1a:	bf00      	nop
 8008b1c:	3740      	adds	r7, #64	@ 0x40
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b2e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7ff ff93 	bl	8008a5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b36:	bf00      	nop
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b09c      	sub	sp, #112	@ 0x70
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d172      	bne.n	8008c40 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008b5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	330c      	adds	r3, #12
 8008b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b6a:	e853 3f00 	ldrex	r3, [r3]
 8008b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	330c      	adds	r3, #12
 8008b7e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008b80:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008b82:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b88:	e841 2300 	strex	r3, r2, [r1]
 8008b8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1e5      	bne.n	8008b60 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3314      	adds	r3, #20
 8008b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9e:	e853 3f00 	ldrex	r3, [r3]
 8008ba2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba6:	f023 0301 	bic.w	r3, r3, #1
 8008baa:	667b      	str	r3, [r7, #100]	@ 0x64
 8008bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3314      	adds	r3, #20
 8008bb2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008bb4:	647a      	str	r2, [r7, #68]	@ 0x44
 8008bb6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bbc:	e841 2300 	strex	r3, r2, [r1]
 8008bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1e5      	bne.n	8008b94 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3314      	adds	r3, #20
 8008bce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	623b      	str	r3, [r7, #32]
   return(result);
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bde:	663b      	str	r3, [r7, #96]	@ 0x60
 8008be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3314      	adds	r3, #20
 8008be6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008be8:	633a      	str	r2, [r7, #48]	@ 0x30
 8008bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e5      	bne.n	8008bc8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bfe:	2220      	movs	r2, #32
 8008c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d119      	bne.n	8008c40 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	330c      	adds	r3, #12
 8008c12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	e853 3f00 	ldrex	r3, [r3]
 8008c1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f023 0310 	bic.w	r3, r3, #16
 8008c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	330c      	adds	r3, #12
 8008c2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008c2c:	61fa      	str	r2, [r7, #28]
 8008c2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c30:	69b9      	ldr	r1, [r7, #24]
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	e841 2300 	strex	r3, r2, [r1]
 8008c38:	617b      	str	r3, [r7, #20]
   return(result);
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1e5      	bne.n	8008c0c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c42:	2200      	movs	r2, #0
 8008c44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d106      	bne.n	8008c5c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c52:	4619      	mov	r1, r3
 8008c54:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008c56:	f7ff ff0b 	bl	8008a70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c5a:	e002      	b.n	8008c62 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008c5c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008c5e:	f7f8 fa95 	bl	800118c <HAL_UART_RxCpltCallback>
}
 8008c62:	bf00      	nop
 8008c64:	3770      	adds	r7, #112	@ 0x70
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d108      	bne.n	8008c98 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c8a:	085b      	lsrs	r3, r3, #1
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	4619      	mov	r1, r3
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f7ff feed 	bl	8008a70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c96:	e002      	b.n	8008c9e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f7f8 fc35 	bl	8001508 <HAL_UART_RxHalfCpltCallback>
}
 8008c9e:	bf00      	nop
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cc2:	2b80      	cmp	r3, #128	@ 0x80
 8008cc4:	bf0c      	ite	eq
 8008cc6:	2301      	moveq	r3, #1
 8008cc8:	2300      	movne	r3, #0
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b21      	cmp	r3, #33	@ 0x21
 8008cd8:	d108      	bne.n	8008cec <UART_DMAError+0x46>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d005      	beq.n	8008cec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008ce6:	68b8      	ldr	r0, [r7, #8]
 8008ce8:	f000 f8ce 	bl	8008e88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cf6:	2b40      	cmp	r3, #64	@ 0x40
 8008cf8:	bf0c      	ite	eq
 8008cfa:	2301      	moveq	r3, #1
 8008cfc:	2300      	movne	r3, #0
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b22      	cmp	r3, #34	@ 0x22
 8008d0c:	d108      	bne.n	8008d20 <UART_DMAError+0x7a>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	2200      	movs	r2, #0
 8008d18:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008d1a:	68b8      	ldr	r0, [r7, #8]
 8008d1c:	f000 f8dc 	bl	8008ed8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d24:	f043 0210 	orr.w	r2, r3, #16
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d2c:	68b8      	ldr	r0, [r7, #8]
 8008d2e:	f7f8 fc9b 	bl	8001668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d32:	bf00      	nop
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b098      	sub	sp, #96	@ 0x60
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	4613      	mov	r3, r2
 8008d48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	88fa      	ldrh	r2, [r7, #6]
 8008d54:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2222      	movs	r2, #34	@ 0x22
 8008d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d68:	4a44      	ldr	r2, [pc, #272]	@ (8008e7c <UART_Start_Receive_DMA+0x140>)
 8008d6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d70:	4a43      	ldr	r2, [pc, #268]	@ (8008e80 <UART_Start_Receive_DMA+0x144>)
 8008d72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d78:	4a42      	ldr	r2, [pc, #264]	@ (8008e84 <UART_Start_Receive_DMA+0x148>)
 8008d7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d80:	2200      	movs	r2, #0
 8008d82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008d84:	f107 0308 	add.w	r3, r7, #8
 8008d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3304      	adds	r3, #4
 8008d94:	4619      	mov	r1, r3
 8008d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	88fb      	ldrh	r3, [r7, #6]
 8008d9c:	f7fb fd94 	bl	80048c8 <HAL_DMA_Start_IT>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d008      	beq.n	8008db8 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2210      	movs	r2, #16
 8008daa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e05d      	b.n	8008e74 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008db8:	2300      	movs	r3, #0
 8008dba:	613b      	str	r3, [r7, #16]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	613b      	str	r3, [r7, #16]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	613b      	str	r3, [r7, #16]
 8008dcc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d019      	beq.n	8008e0a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	330c      	adds	r3, #12
 8008ddc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008de0:	e853 3f00 	ldrex	r3, [r3]
 8008de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	330c      	adds	r3, #12
 8008df4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008df6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008df8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008dfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1e5      	bne.n	8008dd6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3314      	adds	r3, #20
 8008e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e14:	e853 3f00 	ldrex	r3, [r3]
 8008e18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1c:	f043 0301 	orr.w	r3, r3, #1
 8008e20:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3314      	adds	r3, #20
 8008e28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e2a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008e2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008e30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e32:	e841 2300 	strex	r3, r2, [r1]
 8008e36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1e5      	bne.n	8008e0a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3314      	adds	r3, #20
 8008e44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	e853 3f00 	ldrex	r3, [r3]
 8008e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e54:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3314      	adds	r3, #20
 8008e5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008e5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e62:	6a39      	ldr	r1, [r7, #32]
 8008e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e66:	e841 2300 	strex	r3, r2, [r1]
 8008e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1e5      	bne.n	8008e3e <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3760      	adds	r7, #96	@ 0x60
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	08008b3f 	.word	0x08008b3f
 8008e80:	08008c6b 	.word	0x08008c6b
 8008e84:	08008ca7 	.word	0x08008ca7

08008e88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b089      	sub	sp, #36	@ 0x24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	330c      	adds	r3, #12
 8008e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008ea6:	61fb      	str	r3, [r7, #28]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	330c      	adds	r3, #12
 8008eae:	69fa      	ldr	r2, [r7, #28]
 8008eb0:	61ba      	str	r2, [r7, #24]
 8008eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	6979      	ldr	r1, [r7, #20]
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e5      	bne.n	8008e90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008ecc:	bf00      	nop
 8008ece:	3724      	adds	r7, #36	@ 0x24
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b095      	sub	sp, #84	@ 0x54
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	330c      	adds	r3, #12
 8008ee6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eea:	e853 3f00 	ldrex	r3, [r3]
 8008eee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	330c      	adds	r3, #12
 8008efe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008f00:	643a      	str	r2, [r7, #64]	@ 0x40
 8008f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f08:	e841 2300 	strex	r3, r2, [r1]
 8008f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1e5      	bne.n	8008ee0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3314      	adds	r3, #20
 8008f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1c:	6a3b      	ldr	r3, [r7, #32]
 8008f1e:	e853 3f00 	ldrex	r3, [r3]
 8008f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	f023 0301 	bic.w	r3, r3, #1
 8008f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3314      	adds	r3, #20
 8008f32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f3c:	e841 2300 	strex	r3, r2, [r1]
 8008f40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1e5      	bne.n	8008f14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d119      	bne.n	8008f84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	330c      	adds	r3, #12
 8008f56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	e853 3f00 	ldrex	r3, [r3]
 8008f5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f023 0310 	bic.w	r3, r3, #16
 8008f66:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	330c      	adds	r3, #12
 8008f6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f70:	61ba      	str	r2, [r7, #24]
 8008f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f74:	6979      	ldr	r1, [r7, #20]
 8008f76:	69ba      	ldr	r2, [r7, #24]
 8008f78:	e841 2300 	strex	r3, r2, [r1]
 8008f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e5      	bne.n	8008f50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2220      	movs	r2, #32
 8008f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008f92:	bf00      	nop
 8008f94:	3754      	adds	r7, #84	@ 0x54
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008faa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f7f8 fb58 	bl	8001668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fb8:	bf00      	nop
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b21      	cmp	r3, #33	@ 0x21
 8008fd2:	d13e      	bne.n	8009052 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fdc:	d114      	bne.n	8009008 <UART_Transmit_IT+0x48>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d110      	bne.n	8009008 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ffa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a1b      	ldr	r3, [r3, #32]
 8009000:	1c9a      	adds	r2, r3, #2
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	621a      	str	r2, [r3, #32]
 8009006:	e008      	b.n	800901a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	1c59      	adds	r1, r3, #1
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	6211      	str	r1, [r2, #32]
 8009012:	781a      	ldrb	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800901e:	b29b      	uxth	r3, r3
 8009020:	3b01      	subs	r3, #1
 8009022:	b29b      	uxth	r3, r3
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	4619      	mov	r1, r3
 8009028:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10f      	bne.n	800904e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68da      	ldr	r2, [r3, #12]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800903c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68da      	ldr	r2, [r3, #12]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800904c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	e000      	b.n	8009054 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009052:	2302      	movs	r3, #2
  }
}
 8009054:	4618      	mov	r0, r3
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68da      	ldr	r2, [r3, #12]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009076:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2220      	movs	r2, #32
 800907c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f7ff fce1 	bl	8008a48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b08c      	sub	sp, #48	@ 0x30
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009098:	2300      	movs	r3, #0
 800909a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800909c:	2300      	movs	r3, #0
 800909e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b22      	cmp	r3, #34	@ 0x22
 80090aa:	f040 80aa 	bne.w	8009202 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090b6:	d115      	bne.n	80090e4 <UART_Receive_IT+0x54>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d111      	bne.n	80090e4 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090dc:	1c9a      	adds	r2, r3, #2
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80090e2:	e024      	b.n	800912e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090f2:	d007      	beq.n	8009104 <UART_Receive_IT+0x74>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10a      	bne.n	8009112 <UART_Receive_IT+0x82>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d106      	bne.n	8009112 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	b2da      	uxtb	r2, r3
 800910c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910e:	701a      	strb	r2, [r3, #0]
 8009110:	e008      	b.n	8009124 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	b2db      	uxtb	r3, r3
 800911a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800911e:	b2da      	uxtb	r2, r3
 8009120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009122:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009128:	1c5a      	adds	r2, r3, #1
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009132:	b29b      	uxth	r3, r3
 8009134:	3b01      	subs	r3, #1
 8009136:	b29b      	uxth	r3, r3
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	4619      	mov	r1, r3
 800913c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800913e:	2b00      	cmp	r3, #0
 8009140:	d15d      	bne.n	80091fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68da      	ldr	r2, [r3, #12]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f022 0220 	bic.w	r2, r2, #32
 8009150:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68da      	ldr	r2, [r3, #12]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009160:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	695a      	ldr	r2, [r3, #20]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 0201 	bic.w	r2, r2, #1
 8009170:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2220      	movs	r2, #32
 8009176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009184:	2b01      	cmp	r3, #1
 8009186:	d135      	bne.n	80091f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	330c      	adds	r3, #12
 8009194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	e853 3f00 	ldrex	r3, [r3]
 800919c:	613b      	str	r3, [r7, #16]
   return(result);
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	f023 0310 	bic.w	r3, r3, #16
 80091a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	330c      	adds	r3, #12
 80091ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091ae:	623a      	str	r2, [r7, #32]
 80091b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	69f9      	ldr	r1, [r7, #28]
 80091b4:	6a3a      	ldr	r2, [r7, #32]
 80091b6:	e841 2300 	strex	r3, r2, [r1]
 80091ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e5      	bne.n	800918e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 0310 	and.w	r3, r3, #16
 80091cc:	2b10      	cmp	r3, #16
 80091ce:	d10a      	bne.n	80091e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80091d0:	2300      	movs	r3, #0
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	60fb      	str	r3, [r7, #12]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	60fb      	str	r3, [r7, #12]
 80091e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80091ea:	4619      	mov	r1, r3
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7ff fc3f 	bl	8008a70 <HAL_UARTEx_RxEventCallback>
 80091f2:	e002      	b.n	80091fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7f7 ffc9 	bl	800118c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	e002      	b.n	8009204 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	e000      	b.n	8009204 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009202:	2302      	movs	r3, #2
  }
}
 8009204:	4618      	mov	r0, r3
 8009206:	3730      	adds	r7, #48	@ 0x30
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800920c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009210:	b0c0      	sub	sp, #256	@ 0x100
 8009212:	af00      	add	r7, sp, #0
 8009214:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009228:	68d9      	ldr	r1, [r3, #12]
 800922a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	ea40 0301 	orr.w	r3, r0, r1
 8009234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800923a:	689a      	ldr	r2, [r3, #8]
 800923c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	431a      	orrs	r2, r3
 8009244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	431a      	orrs	r2, r3
 800924c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009250:	69db      	ldr	r3, [r3, #28]
 8009252:	4313      	orrs	r3, r2
 8009254:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009264:	f021 010c 	bic.w	r1, r1, #12
 8009268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009272:	430b      	orrs	r3, r1
 8009274:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009286:	6999      	ldr	r1, [r3, #24]
 8009288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	ea40 0301 	orr.w	r3, r0, r1
 8009292:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	4b8f      	ldr	r3, [pc, #572]	@ (80094d8 <UART_SetConfig+0x2cc>)
 800929c:	429a      	cmp	r2, r3
 800929e:	d005      	beq.n	80092ac <UART_SetConfig+0xa0>
 80092a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	4b8d      	ldr	r3, [pc, #564]	@ (80094dc <UART_SetConfig+0x2d0>)
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d104      	bne.n	80092b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80092ac:	f7fd ff36 	bl	800711c <HAL_RCC_GetPCLK2Freq>
 80092b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80092b4:	e003      	b.n	80092be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092b6:	f7fd ff1d 	bl	80070f4 <HAL_RCC_GetPCLK1Freq>
 80092ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092c8:	f040 810c 	bne.w	80094e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092d0:	2200      	movs	r2, #0
 80092d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80092d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80092da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80092de:	4622      	mov	r2, r4
 80092e0:	462b      	mov	r3, r5
 80092e2:	1891      	adds	r1, r2, r2
 80092e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80092e6:	415b      	adcs	r3, r3
 80092e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80092ee:	4621      	mov	r1, r4
 80092f0:	eb12 0801 	adds.w	r8, r2, r1
 80092f4:	4629      	mov	r1, r5
 80092f6:	eb43 0901 	adc.w	r9, r3, r1
 80092fa:	f04f 0200 	mov.w	r2, #0
 80092fe:	f04f 0300 	mov.w	r3, #0
 8009302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800930a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800930e:	4690      	mov	r8, r2
 8009310:	4699      	mov	r9, r3
 8009312:	4623      	mov	r3, r4
 8009314:	eb18 0303 	adds.w	r3, r8, r3
 8009318:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800931c:	462b      	mov	r3, r5
 800931e:	eb49 0303 	adc.w	r3, r9, r3
 8009322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009332:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009336:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800933a:	460b      	mov	r3, r1
 800933c:	18db      	adds	r3, r3, r3
 800933e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009340:	4613      	mov	r3, r2
 8009342:	eb42 0303 	adc.w	r3, r2, r3
 8009346:	657b      	str	r3, [r7, #84]	@ 0x54
 8009348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800934c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009350:	f7f6 ff8e 	bl	8000270 <__aeabi_uldivmod>
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	4b61      	ldr	r3, [pc, #388]	@ (80094e0 <UART_SetConfig+0x2d4>)
 800935a:	fba3 2302 	umull	r2, r3, r3, r2
 800935e:	095b      	lsrs	r3, r3, #5
 8009360:	011c      	lsls	r4, r3, #4
 8009362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009366:	2200      	movs	r2, #0
 8009368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800936c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009370:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009374:	4642      	mov	r2, r8
 8009376:	464b      	mov	r3, r9
 8009378:	1891      	adds	r1, r2, r2
 800937a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800937c:	415b      	adcs	r3, r3
 800937e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009380:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009384:	4641      	mov	r1, r8
 8009386:	eb12 0a01 	adds.w	sl, r2, r1
 800938a:	4649      	mov	r1, r9
 800938c:	eb43 0b01 	adc.w	fp, r3, r1
 8009390:	f04f 0200 	mov.w	r2, #0
 8009394:	f04f 0300 	mov.w	r3, #0
 8009398:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800939c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80093a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093a4:	4692      	mov	sl, r2
 80093a6:	469b      	mov	fp, r3
 80093a8:	4643      	mov	r3, r8
 80093aa:	eb1a 0303 	adds.w	r3, sl, r3
 80093ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093b2:	464b      	mov	r3, r9
 80093b4:	eb4b 0303 	adc.w	r3, fp, r3
 80093b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80093bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80093cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80093d0:	460b      	mov	r3, r1
 80093d2:	18db      	adds	r3, r3, r3
 80093d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80093d6:	4613      	mov	r3, r2
 80093d8:	eb42 0303 	adc.w	r3, r2, r3
 80093dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80093de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80093e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80093e6:	f7f6 ff43 	bl	8000270 <__aeabi_uldivmod>
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	4611      	mov	r1, r2
 80093f0:	4b3b      	ldr	r3, [pc, #236]	@ (80094e0 <UART_SetConfig+0x2d4>)
 80093f2:	fba3 2301 	umull	r2, r3, r3, r1
 80093f6:	095b      	lsrs	r3, r3, #5
 80093f8:	2264      	movs	r2, #100	@ 0x64
 80093fa:	fb02 f303 	mul.w	r3, r2, r3
 80093fe:	1acb      	subs	r3, r1, r3
 8009400:	00db      	lsls	r3, r3, #3
 8009402:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009406:	4b36      	ldr	r3, [pc, #216]	@ (80094e0 <UART_SetConfig+0x2d4>)
 8009408:	fba3 2302 	umull	r2, r3, r3, r2
 800940c:	095b      	lsrs	r3, r3, #5
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009414:	441c      	add	r4, r3
 8009416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800941a:	2200      	movs	r2, #0
 800941c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009420:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009424:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009428:	4642      	mov	r2, r8
 800942a:	464b      	mov	r3, r9
 800942c:	1891      	adds	r1, r2, r2
 800942e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009430:	415b      	adcs	r3, r3
 8009432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009438:	4641      	mov	r1, r8
 800943a:	1851      	adds	r1, r2, r1
 800943c:	6339      	str	r1, [r7, #48]	@ 0x30
 800943e:	4649      	mov	r1, r9
 8009440:	414b      	adcs	r3, r1
 8009442:	637b      	str	r3, [r7, #52]	@ 0x34
 8009444:	f04f 0200 	mov.w	r2, #0
 8009448:	f04f 0300 	mov.w	r3, #0
 800944c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009450:	4659      	mov	r1, fp
 8009452:	00cb      	lsls	r3, r1, #3
 8009454:	4651      	mov	r1, sl
 8009456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800945a:	4651      	mov	r1, sl
 800945c:	00ca      	lsls	r2, r1, #3
 800945e:	4610      	mov	r0, r2
 8009460:	4619      	mov	r1, r3
 8009462:	4603      	mov	r3, r0
 8009464:	4642      	mov	r2, r8
 8009466:	189b      	adds	r3, r3, r2
 8009468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800946c:	464b      	mov	r3, r9
 800946e:	460a      	mov	r2, r1
 8009470:	eb42 0303 	adc.w	r3, r2, r3
 8009474:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009484:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800948c:	460b      	mov	r3, r1
 800948e:	18db      	adds	r3, r3, r3
 8009490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009492:	4613      	mov	r3, r2
 8009494:	eb42 0303 	adc.w	r3, r2, r3
 8009498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800949a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800949e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80094a2:	f7f6 fee5 	bl	8000270 <__aeabi_uldivmod>
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	4b0d      	ldr	r3, [pc, #52]	@ (80094e0 <UART_SetConfig+0x2d4>)
 80094ac:	fba3 1302 	umull	r1, r3, r3, r2
 80094b0:	095b      	lsrs	r3, r3, #5
 80094b2:	2164      	movs	r1, #100	@ 0x64
 80094b4:	fb01 f303 	mul.w	r3, r1, r3
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	3332      	adds	r3, #50	@ 0x32
 80094be:	4a08      	ldr	r2, [pc, #32]	@ (80094e0 <UART_SetConfig+0x2d4>)
 80094c0:	fba2 2303 	umull	r2, r3, r2, r3
 80094c4:	095b      	lsrs	r3, r3, #5
 80094c6:	f003 0207 	and.w	r2, r3, #7
 80094ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4422      	add	r2, r4
 80094d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80094d4:	e106      	b.n	80096e4 <UART_SetConfig+0x4d8>
 80094d6:	bf00      	nop
 80094d8:	40011000 	.word	0x40011000
 80094dc:	40011400 	.word	0x40011400
 80094e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094e8:	2200      	movs	r2, #0
 80094ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80094ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80094f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80094f6:	4642      	mov	r2, r8
 80094f8:	464b      	mov	r3, r9
 80094fa:	1891      	adds	r1, r2, r2
 80094fc:	6239      	str	r1, [r7, #32]
 80094fe:	415b      	adcs	r3, r3
 8009500:	627b      	str	r3, [r7, #36]	@ 0x24
 8009502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009506:	4641      	mov	r1, r8
 8009508:	1854      	adds	r4, r2, r1
 800950a:	4649      	mov	r1, r9
 800950c:	eb43 0501 	adc.w	r5, r3, r1
 8009510:	f04f 0200 	mov.w	r2, #0
 8009514:	f04f 0300 	mov.w	r3, #0
 8009518:	00eb      	lsls	r3, r5, #3
 800951a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800951e:	00e2      	lsls	r2, r4, #3
 8009520:	4614      	mov	r4, r2
 8009522:	461d      	mov	r5, r3
 8009524:	4643      	mov	r3, r8
 8009526:	18e3      	adds	r3, r4, r3
 8009528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800952c:	464b      	mov	r3, r9
 800952e:	eb45 0303 	adc.w	r3, r5, r3
 8009532:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009542:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009546:	f04f 0200 	mov.w	r2, #0
 800954a:	f04f 0300 	mov.w	r3, #0
 800954e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009552:	4629      	mov	r1, r5
 8009554:	008b      	lsls	r3, r1, #2
 8009556:	4621      	mov	r1, r4
 8009558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800955c:	4621      	mov	r1, r4
 800955e:	008a      	lsls	r2, r1, #2
 8009560:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009564:	f7f6 fe84 	bl	8000270 <__aeabi_uldivmod>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4b60      	ldr	r3, [pc, #384]	@ (80096f0 <UART_SetConfig+0x4e4>)
 800956e:	fba3 2302 	umull	r2, r3, r3, r2
 8009572:	095b      	lsrs	r3, r3, #5
 8009574:	011c      	lsls	r4, r3, #4
 8009576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800957a:	2200      	movs	r2, #0
 800957c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009580:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009584:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009588:	4642      	mov	r2, r8
 800958a:	464b      	mov	r3, r9
 800958c:	1891      	adds	r1, r2, r2
 800958e:	61b9      	str	r1, [r7, #24]
 8009590:	415b      	adcs	r3, r3
 8009592:	61fb      	str	r3, [r7, #28]
 8009594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009598:	4641      	mov	r1, r8
 800959a:	1851      	adds	r1, r2, r1
 800959c:	6139      	str	r1, [r7, #16]
 800959e:	4649      	mov	r1, r9
 80095a0:	414b      	adcs	r3, r1
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	f04f 0200 	mov.w	r2, #0
 80095a8:	f04f 0300 	mov.w	r3, #0
 80095ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80095b0:	4659      	mov	r1, fp
 80095b2:	00cb      	lsls	r3, r1, #3
 80095b4:	4651      	mov	r1, sl
 80095b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095ba:	4651      	mov	r1, sl
 80095bc:	00ca      	lsls	r2, r1, #3
 80095be:	4610      	mov	r0, r2
 80095c0:	4619      	mov	r1, r3
 80095c2:	4603      	mov	r3, r0
 80095c4:	4642      	mov	r2, r8
 80095c6:	189b      	adds	r3, r3, r2
 80095c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80095cc:	464b      	mov	r3, r9
 80095ce:	460a      	mov	r2, r1
 80095d0:	eb42 0303 	adc.w	r3, r2, r3
 80095d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80095e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80095e4:	f04f 0200 	mov.w	r2, #0
 80095e8:	f04f 0300 	mov.w	r3, #0
 80095ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80095f0:	4649      	mov	r1, r9
 80095f2:	008b      	lsls	r3, r1, #2
 80095f4:	4641      	mov	r1, r8
 80095f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095fa:	4641      	mov	r1, r8
 80095fc:	008a      	lsls	r2, r1, #2
 80095fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009602:	f7f6 fe35 	bl	8000270 <__aeabi_uldivmod>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	4611      	mov	r1, r2
 800960c:	4b38      	ldr	r3, [pc, #224]	@ (80096f0 <UART_SetConfig+0x4e4>)
 800960e:	fba3 2301 	umull	r2, r3, r3, r1
 8009612:	095b      	lsrs	r3, r3, #5
 8009614:	2264      	movs	r2, #100	@ 0x64
 8009616:	fb02 f303 	mul.w	r3, r2, r3
 800961a:	1acb      	subs	r3, r1, r3
 800961c:	011b      	lsls	r3, r3, #4
 800961e:	3332      	adds	r3, #50	@ 0x32
 8009620:	4a33      	ldr	r2, [pc, #204]	@ (80096f0 <UART_SetConfig+0x4e4>)
 8009622:	fba2 2303 	umull	r2, r3, r2, r3
 8009626:	095b      	lsrs	r3, r3, #5
 8009628:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800962c:	441c      	add	r4, r3
 800962e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009632:	2200      	movs	r2, #0
 8009634:	673b      	str	r3, [r7, #112]	@ 0x70
 8009636:	677a      	str	r2, [r7, #116]	@ 0x74
 8009638:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800963c:	4642      	mov	r2, r8
 800963e:	464b      	mov	r3, r9
 8009640:	1891      	adds	r1, r2, r2
 8009642:	60b9      	str	r1, [r7, #8]
 8009644:	415b      	adcs	r3, r3
 8009646:	60fb      	str	r3, [r7, #12]
 8009648:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800964c:	4641      	mov	r1, r8
 800964e:	1851      	adds	r1, r2, r1
 8009650:	6039      	str	r1, [r7, #0]
 8009652:	4649      	mov	r1, r9
 8009654:	414b      	adcs	r3, r1
 8009656:	607b      	str	r3, [r7, #4]
 8009658:	f04f 0200 	mov.w	r2, #0
 800965c:	f04f 0300 	mov.w	r3, #0
 8009660:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009664:	4659      	mov	r1, fp
 8009666:	00cb      	lsls	r3, r1, #3
 8009668:	4651      	mov	r1, sl
 800966a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800966e:	4651      	mov	r1, sl
 8009670:	00ca      	lsls	r2, r1, #3
 8009672:	4610      	mov	r0, r2
 8009674:	4619      	mov	r1, r3
 8009676:	4603      	mov	r3, r0
 8009678:	4642      	mov	r2, r8
 800967a:	189b      	adds	r3, r3, r2
 800967c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800967e:	464b      	mov	r3, r9
 8009680:	460a      	mov	r2, r1
 8009682:	eb42 0303 	adc.w	r3, r2, r3
 8009686:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	663b      	str	r3, [r7, #96]	@ 0x60
 8009692:	667a      	str	r2, [r7, #100]	@ 0x64
 8009694:	f04f 0200 	mov.w	r2, #0
 8009698:	f04f 0300 	mov.w	r3, #0
 800969c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80096a0:	4649      	mov	r1, r9
 80096a2:	008b      	lsls	r3, r1, #2
 80096a4:	4641      	mov	r1, r8
 80096a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096aa:	4641      	mov	r1, r8
 80096ac:	008a      	lsls	r2, r1, #2
 80096ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80096b2:	f7f6 fddd 	bl	8000270 <__aeabi_uldivmod>
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	4b0d      	ldr	r3, [pc, #52]	@ (80096f0 <UART_SetConfig+0x4e4>)
 80096bc:	fba3 1302 	umull	r1, r3, r3, r2
 80096c0:	095b      	lsrs	r3, r3, #5
 80096c2:	2164      	movs	r1, #100	@ 0x64
 80096c4:	fb01 f303 	mul.w	r3, r1, r3
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	011b      	lsls	r3, r3, #4
 80096cc:	3332      	adds	r3, #50	@ 0x32
 80096ce:	4a08      	ldr	r2, [pc, #32]	@ (80096f0 <UART_SetConfig+0x4e4>)
 80096d0:	fba2 2303 	umull	r2, r3, r2, r3
 80096d4:	095b      	lsrs	r3, r3, #5
 80096d6:	f003 020f 	and.w	r2, r3, #15
 80096da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4422      	add	r2, r4
 80096e2:	609a      	str	r2, [r3, #8]
}
 80096e4:	bf00      	nop
 80096e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80096ea:	46bd      	mov	sp, r7
 80096ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096f0:	51eb851f 	.word	0x51eb851f

080096f4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80096fa:	4b87      	ldr	r3, [pc, #540]	@ (8009918 <MX_LWIP_Init+0x224>)
 80096fc:	22c0      	movs	r2, #192	@ 0xc0
 80096fe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009700:	4b85      	ldr	r3, [pc, #532]	@ (8009918 <MX_LWIP_Init+0x224>)
 8009702:	22a8      	movs	r2, #168	@ 0xa8
 8009704:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 13;
 8009706:	4b84      	ldr	r3, [pc, #528]	@ (8009918 <MX_LWIP_Init+0x224>)
 8009708:	220d      	movs	r2, #13
 800970a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 800970c:	4b82      	ldr	r3, [pc, #520]	@ (8009918 <MX_LWIP_Init+0x224>)
 800970e:	226f      	movs	r2, #111	@ 0x6f
 8009710:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009712:	4b82      	ldr	r3, [pc, #520]	@ (800991c <MX_LWIP_Init+0x228>)
 8009714:	22ff      	movs	r2, #255	@ 0xff
 8009716:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009718:	4b80      	ldr	r3, [pc, #512]	@ (800991c <MX_LWIP_Init+0x228>)
 800971a:	22ff      	movs	r2, #255	@ 0xff
 800971c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800971e:	4b7f      	ldr	r3, [pc, #508]	@ (800991c <MX_LWIP_Init+0x228>)
 8009720:	22ff      	movs	r2, #255	@ 0xff
 8009722:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009724:	4b7d      	ldr	r3, [pc, #500]	@ (800991c <MX_LWIP_Init+0x228>)
 8009726:	2200      	movs	r2, #0
 8009728:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800972a:	4b7d      	ldr	r3, [pc, #500]	@ (8009920 <MX_LWIP_Init+0x22c>)
 800972c:	22c0      	movs	r2, #192	@ 0xc0
 800972e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009730:	4b7b      	ldr	r3, [pc, #492]	@ (8009920 <MX_LWIP_Init+0x22c>)
 8009732:	22a8      	movs	r2, #168	@ 0xa8
 8009734:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 13;
 8009736:	4b7a      	ldr	r3, [pc, #488]	@ (8009920 <MX_LWIP_Init+0x22c>)
 8009738:	220d      	movs	r2, #13
 800973a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 800973c:	4b78      	ldr	r3, [pc, #480]	@ (8009920 <MX_LWIP_Init+0x22c>)
 800973e:	2264      	movs	r2, #100	@ 0x64
 8009740:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8009742:	f000 fcfa 	bl	800a13a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009746:	4b74      	ldr	r3, [pc, #464]	@ (8009918 <MX_LWIP_Init+0x224>)
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	061a      	lsls	r2, r3, #24
 800974c:	4b72      	ldr	r3, [pc, #456]	@ (8009918 <MX_LWIP_Init+0x224>)
 800974e:	785b      	ldrb	r3, [r3, #1]
 8009750:	041b      	lsls	r3, r3, #16
 8009752:	431a      	orrs	r2, r3
 8009754:	4b70      	ldr	r3, [pc, #448]	@ (8009918 <MX_LWIP_Init+0x224>)
 8009756:	789b      	ldrb	r3, [r3, #2]
 8009758:	021b      	lsls	r3, r3, #8
 800975a:	4313      	orrs	r3, r2
 800975c:	4a6e      	ldr	r2, [pc, #440]	@ (8009918 <MX_LWIP_Init+0x224>)
 800975e:	78d2      	ldrb	r2, [r2, #3]
 8009760:	4313      	orrs	r3, r2
 8009762:	061a      	lsls	r2, r3, #24
 8009764:	4b6c      	ldr	r3, [pc, #432]	@ (8009918 <MX_LWIP_Init+0x224>)
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	0619      	lsls	r1, r3, #24
 800976a:	4b6b      	ldr	r3, [pc, #428]	@ (8009918 <MX_LWIP_Init+0x224>)
 800976c:	785b      	ldrb	r3, [r3, #1]
 800976e:	041b      	lsls	r3, r3, #16
 8009770:	4319      	orrs	r1, r3
 8009772:	4b69      	ldr	r3, [pc, #420]	@ (8009918 <MX_LWIP_Init+0x224>)
 8009774:	789b      	ldrb	r3, [r3, #2]
 8009776:	021b      	lsls	r3, r3, #8
 8009778:	430b      	orrs	r3, r1
 800977a:	4967      	ldr	r1, [pc, #412]	@ (8009918 <MX_LWIP_Init+0x224>)
 800977c:	78c9      	ldrb	r1, [r1, #3]
 800977e:	430b      	orrs	r3, r1
 8009780:	021b      	lsls	r3, r3, #8
 8009782:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009786:	431a      	orrs	r2, r3
 8009788:	4b63      	ldr	r3, [pc, #396]	@ (8009918 <MX_LWIP_Init+0x224>)
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	0619      	lsls	r1, r3, #24
 800978e:	4b62      	ldr	r3, [pc, #392]	@ (8009918 <MX_LWIP_Init+0x224>)
 8009790:	785b      	ldrb	r3, [r3, #1]
 8009792:	041b      	lsls	r3, r3, #16
 8009794:	4319      	orrs	r1, r3
 8009796:	4b60      	ldr	r3, [pc, #384]	@ (8009918 <MX_LWIP_Init+0x224>)
 8009798:	789b      	ldrb	r3, [r3, #2]
 800979a:	021b      	lsls	r3, r3, #8
 800979c:	430b      	orrs	r3, r1
 800979e:	495e      	ldr	r1, [pc, #376]	@ (8009918 <MX_LWIP_Init+0x224>)
 80097a0:	78c9      	ldrb	r1, [r1, #3]
 80097a2:	430b      	orrs	r3, r1
 80097a4:	0a1b      	lsrs	r3, r3, #8
 80097a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80097aa:	431a      	orrs	r2, r3
 80097ac:	4b5a      	ldr	r3, [pc, #360]	@ (8009918 <MX_LWIP_Init+0x224>)
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	0619      	lsls	r1, r3, #24
 80097b2:	4b59      	ldr	r3, [pc, #356]	@ (8009918 <MX_LWIP_Init+0x224>)
 80097b4:	785b      	ldrb	r3, [r3, #1]
 80097b6:	041b      	lsls	r3, r3, #16
 80097b8:	4319      	orrs	r1, r3
 80097ba:	4b57      	ldr	r3, [pc, #348]	@ (8009918 <MX_LWIP_Init+0x224>)
 80097bc:	789b      	ldrb	r3, [r3, #2]
 80097be:	021b      	lsls	r3, r3, #8
 80097c0:	430b      	orrs	r3, r1
 80097c2:	4955      	ldr	r1, [pc, #340]	@ (8009918 <MX_LWIP_Init+0x224>)
 80097c4:	78c9      	ldrb	r1, [r1, #3]
 80097c6:	430b      	orrs	r3, r1
 80097c8:	0e1b      	lsrs	r3, r3, #24
 80097ca:	4313      	orrs	r3, r2
 80097cc:	4a55      	ldr	r2, [pc, #340]	@ (8009924 <MX_LWIP_Init+0x230>)
 80097ce:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80097d0:	4b52      	ldr	r3, [pc, #328]	@ (800991c <MX_LWIP_Init+0x228>)
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	061a      	lsls	r2, r3, #24
 80097d6:	4b51      	ldr	r3, [pc, #324]	@ (800991c <MX_LWIP_Init+0x228>)
 80097d8:	785b      	ldrb	r3, [r3, #1]
 80097da:	041b      	lsls	r3, r3, #16
 80097dc:	431a      	orrs	r2, r3
 80097de:	4b4f      	ldr	r3, [pc, #316]	@ (800991c <MX_LWIP_Init+0x228>)
 80097e0:	789b      	ldrb	r3, [r3, #2]
 80097e2:	021b      	lsls	r3, r3, #8
 80097e4:	4313      	orrs	r3, r2
 80097e6:	4a4d      	ldr	r2, [pc, #308]	@ (800991c <MX_LWIP_Init+0x228>)
 80097e8:	78d2      	ldrb	r2, [r2, #3]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	061a      	lsls	r2, r3, #24
 80097ee:	4b4b      	ldr	r3, [pc, #300]	@ (800991c <MX_LWIP_Init+0x228>)
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	0619      	lsls	r1, r3, #24
 80097f4:	4b49      	ldr	r3, [pc, #292]	@ (800991c <MX_LWIP_Init+0x228>)
 80097f6:	785b      	ldrb	r3, [r3, #1]
 80097f8:	041b      	lsls	r3, r3, #16
 80097fa:	4319      	orrs	r1, r3
 80097fc:	4b47      	ldr	r3, [pc, #284]	@ (800991c <MX_LWIP_Init+0x228>)
 80097fe:	789b      	ldrb	r3, [r3, #2]
 8009800:	021b      	lsls	r3, r3, #8
 8009802:	430b      	orrs	r3, r1
 8009804:	4945      	ldr	r1, [pc, #276]	@ (800991c <MX_LWIP_Init+0x228>)
 8009806:	78c9      	ldrb	r1, [r1, #3]
 8009808:	430b      	orrs	r3, r1
 800980a:	021b      	lsls	r3, r3, #8
 800980c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009810:	431a      	orrs	r2, r3
 8009812:	4b42      	ldr	r3, [pc, #264]	@ (800991c <MX_LWIP_Init+0x228>)
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	0619      	lsls	r1, r3, #24
 8009818:	4b40      	ldr	r3, [pc, #256]	@ (800991c <MX_LWIP_Init+0x228>)
 800981a:	785b      	ldrb	r3, [r3, #1]
 800981c:	041b      	lsls	r3, r3, #16
 800981e:	4319      	orrs	r1, r3
 8009820:	4b3e      	ldr	r3, [pc, #248]	@ (800991c <MX_LWIP_Init+0x228>)
 8009822:	789b      	ldrb	r3, [r3, #2]
 8009824:	021b      	lsls	r3, r3, #8
 8009826:	430b      	orrs	r3, r1
 8009828:	493c      	ldr	r1, [pc, #240]	@ (800991c <MX_LWIP_Init+0x228>)
 800982a:	78c9      	ldrb	r1, [r1, #3]
 800982c:	430b      	orrs	r3, r1
 800982e:	0a1b      	lsrs	r3, r3, #8
 8009830:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009834:	431a      	orrs	r2, r3
 8009836:	4b39      	ldr	r3, [pc, #228]	@ (800991c <MX_LWIP_Init+0x228>)
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	0619      	lsls	r1, r3, #24
 800983c:	4b37      	ldr	r3, [pc, #220]	@ (800991c <MX_LWIP_Init+0x228>)
 800983e:	785b      	ldrb	r3, [r3, #1]
 8009840:	041b      	lsls	r3, r3, #16
 8009842:	4319      	orrs	r1, r3
 8009844:	4b35      	ldr	r3, [pc, #212]	@ (800991c <MX_LWIP_Init+0x228>)
 8009846:	789b      	ldrb	r3, [r3, #2]
 8009848:	021b      	lsls	r3, r3, #8
 800984a:	430b      	orrs	r3, r1
 800984c:	4933      	ldr	r1, [pc, #204]	@ (800991c <MX_LWIP_Init+0x228>)
 800984e:	78c9      	ldrb	r1, [r1, #3]
 8009850:	430b      	orrs	r3, r1
 8009852:	0e1b      	lsrs	r3, r3, #24
 8009854:	4313      	orrs	r3, r2
 8009856:	4a34      	ldr	r2, [pc, #208]	@ (8009928 <MX_LWIP_Init+0x234>)
 8009858:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800985a:	4b31      	ldr	r3, [pc, #196]	@ (8009920 <MX_LWIP_Init+0x22c>)
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	061a      	lsls	r2, r3, #24
 8009860:	4b2f      	ldr	r3, [pc, #188]	@ (8009920 <MX_LWIP_Init+0x22c>)
 8009862:	785b      	ldrb	r3, [r3, #1]
 8009864:	041b      	lsls	r3, r3, #16
 8009866:	431a      	orrs	r2, r3
 8009868:	4b2d      	ldr	r3, [pc, #180]	@ (8009920 <MX_LWIP_Init+0x22c>)
 800986a:	789b      	ldrb	r3, [r3, #2]
 800986c:	021b      	lsls	r3, r3, #8
 800986e:	4313      	orrs	r3, r2
 8009870:	4a2b      	ldr	r2, [pc, #172]	@ (8009920 <MX_LWIP_Init+0x22c>)
 8009872:	78d2      	ldrb	r2, [r2, #3]
 8009874:	4313      	orrs	r3, r2
 8009876:	061a      	lsls	r2, r3, #24
 8009878:	4b29      	ldr	r3, [pc, #164]	@ (8009920 <MX_LWIP_Init+0x22c>)
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	0619      	lsls	r1, r3, #24
 800987e:	4b28      	ldr	r3, [pc, #160]	@ (8009920 <MX_LWIP_Init+0x22c>)
 8009880:	785b      	ldrb	r3, [r3, #1]
 8009882:	041b      	lsls	r3, r3, #16
 8009884:	4319      	orrs	r1, r3
 8009886:	4b26      	ldr	r3, [pc, #152]	@ (8009920 <MX_LWIP_Init+0x22c>)
 8009888:	789b      	ldrb	r3, [r3, #2]
 800988a:	021b      	lsls	r3, r3, #8
 800988c:	430b      	orrs	r3, r1
 800988e:	4924      	ldr	r1, [pc, #144]	@ (8009920 <MX_LWIP_Init+0x22c>)
 8009890:	78c9      	ldrb	r1, [r1, #3]
 8009892:	430b      	orrs	r3, r1
 8009894:	021b      	lsls	r3, r3, #8
 8009896:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800989a:	431a      	orrs	r2, r3
 800989c:	4b20      	ldr	r3, [pc, #128]	@ (8009920 <MX_LWIP_Init+0x22c>)
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	0619      	lsls	r1, r3, #24
 80098a2:	4b1f      	ldr	r3, [pc, #124]	@ (8009920 <MX_LWIP_Init+0x22c>)
 80098a4:	785b      	ldrb	r3, [r3, #1]
 80098a6:	041b      	lsls	r3, r3, #16
 80098a8:	4319      	orrs	r1, r3
 80098aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009920 <MX_LWIP_Init+0x22c>)
 80098ac:	789b      	ldrb	r3, [r3, #2]
 80098ae:	021b      	lsls	r3, r3, #8
 80098b0:	430b      	orrs	r3, r1
 80098b2:	491b      	ldr	r1, [pc, #108]	@ (8009920 <MX_LWIP_Init+0x22c>)
 80098b4:	78c9      	ldrb	r1, [r1, #3]
 80098b6:	430b      	orrs	r3, r1
 80098b8:	0a1b      	lsrs	r3, r3, #8
 80098ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80098be:	431a      	orrs	r2, r3
 80098c0:	4b17      	ldr	r3, [pc, #92]	@ (8009920 <MX_LWIP_Init+0x22c>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	0619      	lsls	r1, r3, #24
 80098c6:	4b16      	ldr	r3, [pc, #88]	@ (8009920 <MX_LWIP_Init+0x22c>)
 80098c8:	785b      	ldrb	r3, [r3, #1]
 80098ca:	041b      	lsls	r3, r3, #16
 80098cc:	4319      	orrs	r1, r3
 80098ce:	4b14      	ldr	r3, [pc, #80]	@ (8009920 <MX_LWIP_Init+0x22c>)
 80098d0:	789b      	ldrb	r3, [r3, #2]
 80098d2:	021b      	lsls	r3, r3, #8
 80098d4:	430b      	orrs	r3, r1
 80098d6:	4912      	ldr	r1, [pc, #72]	@ (8009920 <MX_LWIP_Init+0x22c>)
 80098d8:	78c9      	ldrb	r1, [r1, #3]
 80098da:	430b      	orrs	r3, r1
 80098dc:	0e1b      	lsrs	r3, r3, #24
 80098de:	4313      	orrs	r3, r2
 80098e0:	4a12      	ldr	r2, [pc, #72]	@ (800992c <MX_LWIP_Init+0x238>)
 80098e2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80098e4:	4b12      	ldr	r3, [pc, #72]	@ (8009930 <MX_LWIP_Init+0x23c>)
 80098e6:	9302      	str	r3, [sp, #8]
 80098e8:	4b12      	ldr	r3, [pc, #72]	@ (8009934 <MX_LWIP_Init+0x240>)
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	2300      	movs	r3, #0
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	4b0e      	ldr	r3, [pc, #56]	@ (800992c <MX_LWIP_Init+0x238>)
 80098f2:	4a0d      	ldr	r2, [pc, #52]	@ (8009928 <MX_LWIP_Init+0x234>)
 80098f4:	490b      	ldr	r1, [pc, #44]	@ (8009924 <MX_LWIP_Init+0x230>)
 80098f6:	4810      	ldr	r0, [pc, #64]	@ (8009938 <MX_LWIP_Init+0x244>)
 80098f8:	f001 f90a 	bl	800ab10 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80098fc:	480e      	ldr	r0, [pc, #56]	@ (8009938 <MX_LWIP_Init+0x244>)
 80098fe:	f001 fab9 	bl	800ae74 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8009902:	480d      	ldr	r0, [pc, #52]	@ (8009938 <MX_LWIP_Init+0x244>)
 8009904:	f001 fac6 	bl	800ae94 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009908:	490c      	ldr	r1, [pc, #48]	@ (800993c <MX_LWIP_Init+0x248>)
 800990a:	480b      	ldr	r0, [pc, #44]	@ (8009938 <MX_LWIP_Init+0x244>)
 800990c:	f001 fbc4 	bl	800b098 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009910:	bf00      	nop
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	20000ef8 	.word	0x20000ef8
 800991c:	20000efc 	.word	0x20000efc
 8009920:	20000f00 	.word	0x20000f00
 8009924:	20000eec 	.word	0x20000eec
 8009928:	20000ef0 	.word	0x20000ef0
 800992c:	20000ef4 	.word	0x20000ef4
 8009930:	080140c9 	.word	0x080140c9
 8009934:	08009c5d 	.word	0x08009c5d
 8009938:	20000eb8 	.word	0x20000eb8
 800993c:	08009991 	.word	0x08009991

08009940 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8009948:	f7fa fa70 	bl	8003e2c <HAL_GetTick>
 800994c:	4602      	mov	r2, r0
 800994e:	4b08      	ldr	r3, [pc, #32]	@ (8009970 <Ethernet_Link_Periodic_Handle+0x30>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	2b63      	cmp	r3, #99	@ 0x63
 8009956:	d907      	bls.n	8009968 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8009958:	f7fa fa68 	bl	8003e2c <HAL_GetTick>
 800995c:	4603      	mov	r3, r0
 800995e:	4a04      	ldr	r2, [pc, #16]	@ (8009970 <Ethernet_Link_Periodic_Handle+0x30>)
 8009960:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fabe 	bl	8009ee4 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8009968:	bf00      	nop
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	20000eb4 	.word	0x20000eb4

08009974 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8009978:	4804      	ldr	r0, [pc, #16]	@ (800998c <MX_LWIP_Process+0x18>)
 800997a:	f000 f94f 	bl	8009c1c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800997e:	f007 fc9b 	bl	80112b8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8009982:	4802      	ldr	r0, [pc, #8]	@ (800998c <MX_LWIP_Process+0x18>)
 8009984:	f7ff ffdc 	bl	8009940 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8009988:	bf00      	nop
 800998a:	bd80      	pop	{r7, pc}
 800998c:	20000eb8 	.word	0x20000eb8

08009990 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80099b0:	4b44      	ldr	r3, [pc, #272]	@ (8009ac4 <low_level_init+0x120>)
 80099b2:	4a45      	ldr	r2, [pc, #276]	@ (8009ac8 <low_level_init+0x124>)
 80099b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x12;
 80099b6:	2312      	movs	r3, #18
 80099b8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x34;
 80099ba:	2334      	movs	r3, #52	@ 0x34
 80099bc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x56;
 80099be:	2356      	movs	r3, #86	@ 0x56
 80099c0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x12;
 80099c2:	2312      	movs	r3, #18
 80099c4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x34;
 80099c6:	2334      	movs	r3, #52	@ 0x34
 80099c8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x56;
 80099ca:	2356      	movs	r3, #86	@ 0x56
 80099cc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80099ce:	4a3d      	ldr	r2, [pc, #244]	@ (8009ac4 <low_level_init+0x120>)
 80099d0:	f107 0308 	add.w	r3, r7, #8
 80099d4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80099d6:	4b3b      	ldr	r3, [pc, #236]	@ (8009ac4 <low_level_init+0x120>)
 80099d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80099dc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80099de:	4b39      	ldr	r3, [pc, #228]	@ (8009ac4 <low_level_init+0x120>)
 80099e0:	4a3a      	ldr	r2, [pc, #232]	@ (8009acc <low_level_init+0x128>)
 80099e2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80099e4:	4b37      	ldr	r3, [pc, #220]	@ (8009ac4 <low_level_init+0x120>)
 80099e6:	4a3a      	ldr	r2, [pc, #232]	@ (8009ad0 <low_level_init+0x12c>)
 80099e8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80099ea:	4b36      	ldr	r3, [pc, #216]	@ (8009ac4 <low_level_init+0x120>)
 80099ec:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80099f0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80099f2:	4834      	ldr	r0, [pc, #208]	@ (8009ac4 <low_level_init+0x120>)
 80099f4:	f7fb fac8 	bl	8004f88 <HAL_ETH_Init>
 80099f8:	4603      	mov	r3, r0
 80099fa:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80099fc:	2238      	movs	r2, #56	@ 0x38
 80099fe:	2100      	movs	r1, #0
 8009a00:	4834      	ldr	r0, [pc, #208]	@ (8009ad4 <low_level_init+0x130>)
 8009a02:	f00a fd9c 	bl	801453e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009a06:	4b33      	ldr	r3, [pc, #204]	@ (8009ad4 <low_level_init+0x130>)
 8009a08:	2221      	movs	r2, #33	@ 0x21
 8009a0a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009a0c:	4b31      	ldr	r3, [pc, #196]	@ (8009ad4 <low_level_init+0x130>)
 8009a0e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8009a12:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009a14:	4b2f      	ldr	r3, [pc, #188]	@ (8009ad4 <low_level_init+0x130>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009a1a:	482f      	ldr	r0, [pc, #188]	@ (8009ad8 <low_level_init+0x134>)
 8009a1c:	f000 ff40 	bl	800a8a0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2206      	movs	r2, #6
 8009a24:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009a28:	4b26      	ldr	r3, [pc, #152]	@ (8009ac4 <low_level_init+0x120>)
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	781a      	ldrb	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009a34:	4b23      	ldr	r3, [pc, #140]	@ (8009ac4 <low_level_init+0x120>)
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	785a      	ldrb	r2, [r3, #1]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009a40:	4b20      	ldr	r3, [pc, #128]	@ (8009ac4 <low_level_init+0x120>)
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	789a      	ldrb	r2, [r3, #2]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8009ac4 <low_level_init+0x120>)
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	78da      	ldrb	r2, [r3, #3]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009a58:	4b1a      	ldr	r3, [pc, #104]	@ (8009ac4 <low_level_init+0x120>)
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	791a      	ldrb	r2, [r3, #4]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009a64:	4b17      	ldr	r3, [pc, #92]	@ (8009ac4 <low_level_init+0x120>)
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	795a      	ldrb	r2, [r3, #5]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8009a76:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009a7e:	f043 030a 	orr.w	r3, r3, #10
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009a8a:	4914      	ldr	r1, [pc, #80]	@ (8009adc <low_level_init+0x138>)
 8009a8c:	4814      	ldr	r0, [pc, #80]	@ (8009ae0 <low_level_init+0x13c>)
 8009a8e:	f7fa f860 	bl	8003b52 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8009a92:	4813      	ldr	r0, [pc, #76]	@ (8009ae0 <low_level_init+0x13c>)
 8009a94:	f7fa f88f 	bl	8003bb6 <LAN8742_Init>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d006      	beq.n	8009aac <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f001 faca 	bl	800b038 <netif_set_link_down>
    netif_set_down(netif);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 fa61 	bl	800af6c <netif_set_down>
 8009aaa:	e008      	b.n	8009abe <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d103      	bne.n	8009aba <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fa16 	bl	8009ee4 <ethernet_link_check_state>
 8009ab8:	e001      	b.n	8009abe <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8009aba:	f7f7 fef1 	bl	80018a0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	200059d0 	.word	0x200059d0
 8009ac8:	40028000 	.word	0x40028000
 8009acc:	20005930 	.word	0x20005930
 8009ad0:	20005890 	.word	0x20005890
 8009ad4:	20005a80 	.word	0x20005a80
 8009ad8:	08017c9c 	.word	0x08017c9c
 8009adc:	200000c0 	.word	0x200000c0
 8009ae0:	20005ab8 	.word	0x20005ab8

08009ae4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b092      	sub	sp, #72	@ 0x48
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8009af2:	2300      	movs	r3, #0
 8009af4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009afc:	f107 030c 	add.w	r3, r7, #12
 8009b00:	2230      	movs	r2, #48	@ 0x30
 8009b02:	2100      	movs	r1, #0
 8009b04:	4618      	mov	r0, r3
 8009b06:	f00a fd1a 	bl	801453e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009b0a:	f107 030c 	add.w	r3, r7, #12
 8009b0e:	2230      	movs	r2, #48	@ 0x30
 8009b10:	2100      	movs	r1, #0
 8009b12:	4618      	mov	r0, r3
 8009b14:	f00a fd13 	bl	801453e <memset>

  for(q = p; q != NULL; q = q->next)
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b1c:	e045      	b.n	8009baa <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d902      	bls.n	8009b2a <low_level_output+0x46>
      return ERR_IF;
 8009b24:	f06f 030b 	mvn.w	r3, #11
 8009b28:	e055      	b.n	8009bd6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8009b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b2c:	6859      	ldr	r1, [r3, #4]
 8009b2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b30:	4613      	mov	r3, r2
 8009b32:	005b      	lsls	r3, r3, #1
 8009b34:	4413      	add	r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	3348      	adds	r3, #72	@ 0x48
 8009b3a:	443b      	add	r3, r7
 8009b3c:	3b3c      	subs	r3, #60	@ 0x3c
 8009b3e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b42:	895b      	ldrh	r3, [r3, #10]
 8009b44:	4619      	mov	r1, r3
 8009b46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b48:	4613      	mov	r3, r2
 8009b4a:	005b      	lsls	r3, r3, #1
 8009b4c:	4413      	add	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	3348      	adds	r3, #72	@ 0x48
 8009b52:	443b      	add	r3, r7
 8009b54:	3b38      	subs	r3, #56	@ 0x38
 8009b56:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d011      	beq.n	8009b82 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009b5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b60:	1e5a      	subs	r2, r3, #1
 8009b62:	f107 000c 	add.w	r0, r7, #12
 8009b66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b68:	460b      	mov	r3, r1
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	440b      	add	r3, r1
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	18c1      	adds	r1, r0, r3
 8009b72:	4613      	mov	r3, r2
 8009b74:	005b      	lsls	r3, r3, #1
 8009b76:	4413      	add	r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	3348      	adds	r3, #72	@ 0x48
 8009b7c:	443b      	add	r3, r7
 8009b7e:	3b34      	subs	r3, #52	@ 0x34
 8009b80:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d109      	bne.n	8009b9e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8009b8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	005b      	lsls	r3, r3, #1
 8009b90:	4413      	add	r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	3348      	adds	r3, #72	@ 0x48
 8009b96:	443b      	add	r3, r7
 8009b98:	3b34      	subs	r3, #52	@ 0x34
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009b9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8009ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1b6      	bne.n	8009b1e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	891b      	ldrh	r3, [r3, #8]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8009be0 <low_level_output+0xfc>)
 8009bb8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009bba:	4a09      	ldr	r2, [pc, #36]	@ (8009be0 <low_level_output+0xfc>)
 8009bbc:	f107 030c 	add.w	r3, r7, #12
 8009bc0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009bc2:	4a07      	ldr	r2, [pc, #28]	@ (8009be0 <low_level_output+0xfc>)
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009bc8:	2214      	movs	r2, #20
 8009bca:	4905      	ldr	r1, [pc, #20]	@ (8009be0 <low_level_output+0xfc>)
 8009bcc:	4805      	ldr	r0, [pc, #20]	@ (8009be4 <low_level_output+0x100>)
 8009bce:	f7fb fb2f 	bl	8005230 <HAL_ETH_Transmit>

  return errval;
 8009bd2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3748      	adds	r7, #72	@ 0x48
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	20005a80 	.word	0x20005a80
 8009be4:	200059d0 	.word	0x200059d0

08009be8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009bf4:	4b07      	ldr	r3, [pc, #28]	@ (8009c14 <low_level_input+0x2c>)
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d105      	bne.n	8009c08 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009bfc:	f107 030c 	add.w	r3, r7, #12
 8009c00:	4619      	mov	r1, r3
 8009c02:	4805      	ldr	r0, [pc, #20]	@ (8009c18 <low_level_input+0x30>)
 8009c04:	f7fb fba8 	bl	8005358 <HAL_ETH_ReadData>
  }

  return p;
 8009c08:	68fb      	ldr	r3, [r7, #12]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	2000588c 	.word	0x2000588c
 8009c18:	200059d0 	.word	0x200059d0

08009c1c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009c24:	2300      	movs	r3, #0
 8009c26:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7ff ffdd 	bl	8009be8 <low_level_input>
 8009c2e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00a      	beq.n	8009c4c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	6879      	ldr	r1, [r7, #4]
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	4798      	blx	r3
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f001 fda6 	bl	800b798 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1ea      	bne.n	8009c28 <ethernetif_input+0xc>
}
 8009c52:	bf00      	nop
 8009c54:	bf00      	nop
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d106      	bne.n	8009c78 <ethernetif_init+0x1c>
 8009c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca4 <ethernetif_init+0x48>)
 8009c6c:	f240 126f 	movw	r2, #367	@ 0x16f
 8009c70:	490d      	ldr	r1, [pc, #52]	@ (8009ca8 <ethernetif_init+0x4c>)
 8009c72:	480e      	ldr	r0, [pc, #56]	@ (8009cac <ethernetif_init+0x50>)
 8009c74:	f00a fbfe 	bl	8014474 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2273      	movs	r2, #115	@ 0x73
 8009c7c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2274      	movs	r2, #116	@ 0x74
 8009c84:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a09      	ldr	r2, [pc, #36]	@ (8009cb0 <ethernetif_init+0x54>)
 8009c8c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a08      	ldr	r2, [pc, #32]	@ (8009cb4 <ethernetif_init+0x58>)
 8009c92:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7ff fe85 	bl	80099a4 <low_level_init>

  return ERR_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	0801529c 	.word	0x0801529c
 8009ca8:	080152b8 	.word	0x080152b8
 8009cac:	080152c8 	.word	0x080152c8
 8009cb0:	08012581 	.word	0x08012581
 8009cb4:	08009ae5 	.word	0x08009ae5

08009cb8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009cc4:	68f9      	ldr	r1, [r7, #12]
 8009cc6:	4807      	ldr	r0, [pc, #28]	@ (8009ce4 <pbuf_free_custom+0x2c>)
 8009cc8:	f000 fecc 	bl	800aa64 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009ccc:	4b06      	ldr	r3, [pc, #24]	@ (8009ce8 <pbuf_free_custom+0x30>)
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d102      	bne.n	8009cda <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009cd4:	4b04      	ldr	r3, [pc, #16]	@ (8009ce8 <pbuf_free_custom+0x30>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	701a      	strb	r2, [r3, #0]
  }
}
 8009cda:	bf00      	nop
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	08017c9c 	.word	0x08017c9c
 8009ce8:	2000588c 	.word	0x2000588c

08009cec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009cf0:	f7fa f89c 	bl	8003e2c <HAL_GetTick>
 8009cf4:	4603      	mov	r3, r0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	bd80      	pop	{r7, pc}
	...

08009cfc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08e      	sub	sp, #56	@ 0x38
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d08:	2200      	movs	r2, #0
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	605a      	str	r2, [r3, #4]
 8009d0e:	609a      	str	r2, [r3, #8]
 8009d10:	60da      	str	r2, [r3, #12]
 8009d12:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a46      	ldr	r2, [pc, #280]	@ (8009e34 <HAL_ETH_MspInit+0x138>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	f040 8085 	bne.w	8009e2a <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009d20:	2300      	movs	r3, #0
 8009d22:	623b      	str	r3, [r7, #32]
 8009d24:	4b44      	ldr	r3, [pc, #272]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d28:	4a43      	ldr	r2, [pc, #268]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009d2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009d2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8009d30:	4b41      	ldr	r3, [pc, #260]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d38:	623b      	str	r3, [r7, #32]
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	61fb      	str	r3, [r7, #28]
 8009d40:	4b3d      	ldr	r3, [pc, #244]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d44:	4a3c      	ldr	r2, [pc, #240]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009d46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009d4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8009d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009d54:	61fb      	str	r3, [r7, #28]
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	2300      	movs	r3, #0
 8009d5a:	61bb      	str	r3, [r7, #24]
 8009d5c:	4b36      	ldr	r3, [pc, #216]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d60:	4a35      	ldr	r2, [pc, #212]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009d62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d66:	6313      	str	r3, [r2, #48]	@ 0x30
 8009d68:	4b33      	ldr	r3, [pc, #204]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d70:	61bb      	str	r3, [r7, #24]
 8009d72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d74:	2300      	movs	r3, #0
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	4b2f      	ldr	r3, [pc, #188]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d7c:	4a2e      	ldr	r2, [pc, #184]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009d7e:	f043 0304 	orr.w	r3, r3, #4
 8009d82:	6313      	str	r3, [r2, #48]	@ 0x30
 8009d84:	4b2c      	ldr	r3, [pc, #176]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d88:	f003 0304 	and.w	r3, r3, #4
 8009d8c:	617b      	str	r3, [r7, #20]
 8009d8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d90:	2300      	movs	r3, #0
 8009d92:	613b      	str	r3, [r7, #16]
 8009d94:	4b28      	ldr	r3, [pc, #160]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d98:	4a27      	ldr	r2, [pc, #156]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009d9a:	f043 0301 	orr.w	r3, r3, #1
 8009d9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8009da0:	4b25      	ldr	r3, [pc, #148]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	613b      	str	r3, [r7, #16]
 8009daa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009dac:	2300      	movs	r3, #0
 8009dae:	60fb      	str	r3, [r7, #12]
 8009db0:	4b21      	ldr	r3, [pc, #132]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009db4:	4a20      	ldr	r2, [pc, #128]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009db6:	f043 0302 	orr.w	r3, r3, #2
 8009dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8009dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8009e38 <HAL_ETH_MspInit+0x13c>)
 8009dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dc0:	f003 0302 	and.w	r3, r3, #2
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009dc8:	2332      	movs	r3, #50	@ 0x32
 8009dca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009dd8:	230b      	movs	r3, #11
 8009dda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009de0:	4619      	mov	r1, r3
 8009de2:	4816      	ldr	r0, [pc, #88]	@ (8009e3c <HAL_ETH_MspInit+0x140>)
 8009de4:	f7fc fa04 	bl	80061f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009de8:	2386      	movs	r3, #134	@ 0x86
 8009dea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dec:	2302      	movs	r3, #2
 8009dee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009df0:	2300      	movs	r3, #0
 8009df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009df4:	2303      	movs	r3, #3
 8009df6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009df8:	230b      	movs	r3, #11
 8009dfa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e00:	4619      	mov	r1, r3
 8009e02:	480f      	ldr	r0, [pc, #60]	@ (8009e40 <HAL_ETH_MspInit+0x144>)
 8009e04:	f7fc f9f4 	bl	80061f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8009e08:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8009e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e0e:	2302      	movs	r3, #2
 8009e10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e16:	2303      	movs	r3, #3
 8009e18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009e1a:	230b      	movs	r3, #11
 8009e1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e22:	4619      	mov	r1, r3
 8009e24:	4807      	ldr	r0, [pc, #28]	@ (8009e44 <HAL_ETH_MspInit+0x148>)
 8009e26:	f7fc f9e3 	bl	80061f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009e2a:	bf00      	nop
 8009e2c:	3738      	adds	r7, #56	@ 0x38
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	40028000 	.word	0x40028000
 8009e38:	40023800 	.word	0x40023800
 8009e3c:	40020800 	.word	0x40020800
 8009e40:	40020000 	.word	0x40020000
 8009e44:	40020400 	.word	0x40020400

08009e48 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009e4c:	4802      	ldr	r0, [pc, #8]	@ (8009e58 <ETH_PHY_IO_Init+0x10>)
 8009e4e:	f7fb fd6b 	bl	8005928 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	200059d0 	.word	0x200059d0

08009e5c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	af00      	add	r7, sp, #0
  return 0;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	68f9      	ldr	r1, [r7, #12]
 8009e7e:	4807      	ldr	r0, [pc, #28]	@ (8009e9c <ETH_PHY_IO_ReadReg+0x30>)
 8009e80:	f7fb fbad 	bl	80055de <HAL_ETH_ReadPHYRegister>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d002      	beq.n	8009e90 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e8e:	e000      	b.n	8009e92 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	200059d0 	.word	0x200059d0

08009ea0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	68f9      	ldr	r1, [r7, #12]
 8009eb2:	4807      	ldr	r0, [pc, #28]	@ (8009ed0 <ETH_PHY_IO_WriteReg+0x30>)
 8009eb4:	f7fb fbde 	bl	8005674 <HAL_ETH_WritePHYRegister>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8009ec2:	e000      	b.n	8009ec6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	200059d0 	.word	0x200059d0

08009ed4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009ed8:	f7f9 ffa8 	bl	8003e2c <HAL_GetTick>
 8009edc:	4603      	mov	r3, r0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	bd80      	pop	{r7, pc}
	...

08009ee4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b0a0      	sub	sp, #128	@ 0x80
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009eec:	f107 030c 	add.w	r3, r7, #12
 8009ef0:	2264      	movs	r2, #100	@ 0x64
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f00a fb22 	bl	801453e <memset>
  int32_t PHYLinkState = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009efe:	2300      	movs	r3, #0
 8009f00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f02:	2300      	movs	r3, #0
 8009f04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f06:	2300      	movs	r3, #0
 8009f08:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009f0a:	483a      	ldr	r0, [pc, #232]	@ (8009ff4 <ethernet_link_check_state+0x110>)
 8009f0c:	f7f9 fea0 	bl	8003c50 <LAN8742_GetLinkState>
 8009f10:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009f18:	089b      	lsrs	r3, r3, #2
 8009f1a:	f003 0301 	and.w	r3, r3, #1
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00c      	beq.n	8009f3e <ethernet_link_check_state+0x5a>
 8009f24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	dc09      	bgt.n	8009f3e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8009f2a:	4833      	ldr	r0, [pc, #204]	@ (8009ff8 <ethernet_link_check_state+0x114>)
 8009f2c:	f7fb f927 	bl	800517e <HAL_ETH_Stop>
    netif_set_down(netif);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f001 f81b 	bl	800af6c <netif_set_down>
    netif_set_link_down(netif);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 f87e 	bl	800b038 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8009f3c:	e055      	b.n	8009fea <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009f44:	f003 0304 	and.w	r3, r3, #4
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d14e      	bne.n	8009fea <ethernet_link_check_state+0x106>
 8009f4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	dd4b      	ble.n	8009fea <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8009f52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f54:	3b02      	subs	r3, #2
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d82a      	bhi.n	8009fb0 <ethernet_link_check_state+0xcc>
 8009f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f60 <ethernet_link_check_state+0x7c>)
 8009f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f60:	08009f71 	.word	0x08009f71
 8009f64:	08009f83 	.word	0x08009f83
 8009f68:	08009f93 	.word	0x08009f93
 8009f6c:	08009fa3 	.word	0x08009fa3
      duplex = ETH_FULLDUPLEX_MODE;
 8009f70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f74:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009f76:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009f7a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009f80:	e017      	b.n	8009fb2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009f82:	2300      	movs	r3, #0
 8009f84:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009f86:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009f8a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009f90:	e00f      	b.n	8009fb2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8009f92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f96:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009fa0:	e007      	b.n	8009fb2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009faa:	2301      	movs	r3, #1
 8009fac:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009fae:	e000      	b.n	8009fb2 <ethernet_link_check_state+0xce>
      break;
 8009fb0:	bf00      	nop
    if(linkchanged)
 8009fb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d018      	beq.n	8009fea <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009fb8:	f107 030c 	add.w	r3, r7, #12
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	480e      	ldr	r0, [pc, #56]	@ (8009ff8 <ethernet_link_check_state+0x114>)
 8009fc0:	f7fb fba1 	bl	8005706 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009fc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009fc6:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8009fc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fca:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009fcc:	f107 030c 	add.w	r3, r7, #12
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	4809      	ldr	r0, [pc, #36]	@ (8009ff8 <ethernet_link_check_state+0x114>)
 8009fd4:	f7fb fc8e 	bl	80058f4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8009fd8:	4807      	ldr	r0, [pc, #28]	@ (8009ff8 <ethernet_link_check_state+0x114>)
 8009fda:	f7fb f871 	bl	80050c0 <HAL_ETH_Start>
      netif_set_up(netif);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 ff58 	bl	800ae94 <netif_set_up>
      netif_set_link_up(netif);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 fff3 	bl	800afd0 <netif_set_link_up>
}
 8009fea:	bf00      	nop
 8009fec:	3780      	adds	r7, #128	@ 0x80
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	20005ab8 	.word	0x20005ab8
 8009ff8:	200059d0 	.word	0x200059d0

08009ffc <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af02      	add	r7, sp, #8
 800a002:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a004:	4812      	ldr	r0, [pc, #72]	@ (800a050 <HAL_ETH_RxAllocateCallback+0x54>)
 800a006:	f000 fcbf 	bl	800a988 <memp_malloc_pool>
 800a00a:	60f8      	str	r0, [r7, #12]
  if (p)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d014      	beq.n	800a03c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f103 0220 	add.w	r2, r3, #32
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4a0d      	ldr	r2, [pc, #52]	@ (800a054 <HAL_ETH_RxAllocateCallback+0x58>)
 800a020:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a02a:	9201      	str	r2, [sp, #4]
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2241      	movs	r2, #65	@ 0x41
 800a032:	2100      	movs	r1, #0
 800a034:	2000      	movs	r0, #0
 800a036:	f001 f9f5 	bl	800b424 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a03a:	e005      	b.n	800a048 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a03c:	4b06      	ldr	r3, [pc, #24]	@ (800a058 <HAL_ETH_RxAllocateCallback+0x5c>)
 800a03e:	2201      	movs	r2, #1
 800a040:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	601a      	str	r2, [r3, #0]
}
 800a048:	bf00      	nop
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	08017c9c 	.word	0x08017c9c
 800a054:	08009cb9 	.word	0x08009cb9
 800a058:	2000588c 	.word	0x2000588c

0800a05c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b089      	sub	sp, #36	@ 0x24
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
 800a068:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a072:	2300      	movs	r3, #0
 800a074:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	3b20      	subs	r3, #32
 800a07a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	2200      	movs	r2, #0
 800a080:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	2200      	movs	r2, #0
 800a086:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	887a      	ldrh	r2, [r7, #2]
 800a08c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d103      	bne.n	800a09e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	69fa      	ldr	r2, [r7, #28]
 800a09a:	601a      	str	r2, [r3, #0]
 800a09c:	e003      	b.n	800a0a6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	69fa      	ldr	r2, [r7, #28]
 800a0a4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	69fa      	ldr	r2, [r7, #28]
 800a0aa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	61fb      	str	r3, [r7, #28]
 800a0b2:	e009      	b.n	800a0c8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	891a      	ldrh	r2, [r3, #8]
 800a0b8:	887b      	ldrh	r3, [r7, #2]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	61fb      	str	r3, [r7, #28]
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1f2      	bne.n	800a0b4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800a0ce:	bf00      	nop
 800a0d0:	bf00      	nop
 800a0d2:	3724      	adds	r7, #36	@ 0x24
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a0e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0ea:	021b      	lsls	r3, r3, #8
 800a0ec:	b21a      	sxth	r2, r3
 800a0ee:	88fb      	ldrh	r3, [r7, #6]
 800a0f0:	0a1b      	lsrs	r3, r3, #8
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	b21b      	sxth	r3, r3
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	b21b      	sxth	r3, r3
 800a0fa:	b29b      	uxth	r3, r3
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	061a      	lsls	r2, r3, #24
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	021b      	lsls	r3, r3, #8
 800a118:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a11c:	431a      	orrs	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	0a1b      	lsrs	r3, r3, #8
 800a122:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a126:	431a      	orrs	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	0e1b      	lsrs	r3, r3, #24
 800a12c:	4313      	orrs	r3, r2
}
 800a12e:	4618      	mov	r0, r3
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b082      	sub	sp, #8
 800a13e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a144:	f000 f8d4 	bl	800a2f0 <mem_init>
  memp_init();
 800a148:	f000 fbda 	bl	800a900 <memp_init>
  pbuf_init();
  netif_init();
 800a14c:	f000 fcd8 	bl	800ab00 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a150:	f007 f8f4 	bl	801133c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a154:	f001 fe50 	bl	800bdf8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a158:	f007 f866 	bl	8011228 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a15c:	bf00      	nop
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	4603      	mov	r3, r0
 800a16c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a16e:	4b05      	ldr	r3, [pc, #20]	@ (800a184 <ptr_to_mem+0x20>)
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	88fb      	ldrh	r3, [r7, #6]
 800a174:	4413      	add	r3, r2
}
 800a176:	4618      	mov	r0, r3
 800a178:	370c      	adds	r7, #12
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	20008304 	.word	0x20008304

0800a188 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a190:	4b05      	ldr	r3, [pc, #20]	@ (800a1a8 <mem_to_ptr+0x20>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	b29b      	uxth	r3, r3
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	370c      	adds	r7, #12
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	20008304 	.word	0x20008304

0800a1ac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a1ac:	b590      	push	{r4, r7, lr}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a1b4:	4b45      	ldr	r3, [pc, #276]	@ (800a2cc <plug_holes+0x120>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d206      	bcs.n	800a1cc <plug_holes+0x20>
 800a1be:	4b44      	ldr	r3, [pc, #272]	@ (800a2d0 <plug_holes+0x124>)
 800a1c0:	f240 12df 	movw	r2, #479	@ 0x1df
 800a1c4:	4943      	ldr	r1, [pc, #268]	@ (800a2d4 <plug_holes+0x128>)
 800a1c6:	4844      	ldr	r0, [pc, #272]	@ (800a2d8 <plug_holes+0x12c>)
 800a1c8:	f00a f954 	bl	8014474 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a1cc:	4b43      	ldr	r3, [pc, #268]	@ (800a2dc <plug_holes+0x130>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d306      	bcc.n	800a1e4 <plug_holes+0x38>
 800a1d6:	4b3e      	ldr	r3, [pc, #248]	@ (800a2d0 <plug_holes+0x124>)
 800a1d8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a1dc:	4940      	ldr	r1, [pc, #256]	@ (800a2e0 <plug_holes+0x134>)
 800a1de:	483e      	ldr	r0, [pc, #248]	@ (800a2d8 <plug_holes+0x12c>)
 800a1e0:	f00a f948 	bl	8014474 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	791b      	ldrb	r3, [r3, #4]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d006      	beq.n	800a1fa <plug_holes+0x4e>
 800a1ec:	4b38      	ldr	r3, [pc, #224]	@ (800a2d0 <plug_holes+0x124>)
 800a1ee:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a1f2:	493c      	ldr	r1, [pc, #240]	@ (800a2e4 <plug_holes+0x138>)
 800a1f4:	4838      	ldr	r0, [pc, #224]	@ (800a2d8 <plug_holes+0x12c>)
 800a1f6:	f00a f93d 	bl	8014474 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	881b      	ldrh	r3, [r3, #0]
 800a1fe:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a202:	d906      	bls.n	800a212 <plug_holes+0x66>
 800a204:	4b32      	ldr	r3, [pc, #200]	@ (800a2d0 <plug_holes+0x124>)
 800a206:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a20a:	4937      	ldr	r1, [pc, #220]	@ (800a2e8 <plug_holes+0x13c>)
 800a20c:	4832      	ldr	r0, [pc, #200]	@ (800a2d8 <plug_holes+0x12c>)
 800a20e:	f00a f931 	bl	8014474 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff ffa4 	bl	800a164 <ptr_to_mem>
 800a21c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	429a      	cmp	r2, r3
 800a224:	d024      	beq.n	800a270 <plug_holes+0xc4>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	791b      	ldrb	r3, [r3, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d120      	bne.n	800a270 <plug_holes+0xc4>
 800a22e:	4b2b      	ldr	r3, [pc, #172]	@ (800a2dc <plug_holes+0x130>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	429a      	cmp	r2, r3
 800a236:	d01b      	beq.n	800a270 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a238:	4b2c      	ldr	r3, [pc, #176]	@ (800a2ec <plug_holes+0x140>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d102      	bne.n	800a248 <plug_holes+0x9c>
      lfree = mem;
 800a242:	4a2a      	ldr	r2, [pc, #168]	@ (800a2ec <plug_holes+0x140>)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	881a      	ldrh	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	881b      	ldrh	r3, [r3, #0]
 800a254:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a258:	d00a      	beq.n	800a270 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	4618      	mov	r0, r3
 800a260:	f7ff ff80 	bl	800a164 <ptr_to_mem>
 800a264:	4604      	mov	r4, r0
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7ff ff8e 	bl	800a188 <mem_to_ptr>
 800a26c:	4603      	mov	r3, r0
 800a26e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	885b      	ldrh	r3, [r3, #2]
 800a274:	4618      	mov	r0, r3
 800a276:	f7ff ff75 	bl	800a164 <ptr_to_mem>
 800a27a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	429a      	cmp	r2, r3
 800a282:	d01f      	beq.n	800a2c4 <plug_holes+0x118>
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	791b      	ldrb	r3, [r3, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d11b      	bne.n	800a2c4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a28c:	4b17      	ldr	r3, [pc, #92]	@ (800a2ec <plug_holes+0x140>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	429a      	cmp	r2, r3
 800a294:	d102      	bne.n	800a29c <plug_holes+0xf0>
      lfree = pmem;
 800a296:	4a15      	ldr	r2, [pc, #84]	@ (800a2ec <plug_holes+0x140>)
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	881a      	ldrh	r2, [r3, #0]
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	881b      	ldrh	r3, [r3, #0]
 800a2a8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a2ac:	d00a      	beq.n	800a2c4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	881b      	ldrh	r3, [r3, #0]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7ff ff56 	bl	800a164 <ptr_to_mem>
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	68b8      	ldr	r0, [r7, #8]
 800a2bc:	f7ff ff64 	bl	800a188 <mem_to_ptr>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a2c4:	bf00      	nop
 800a2c6:	3714      	adds	r7, #20
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd90      	pop	{r4, r7, pc}
 800a2cc:	20008304 	.word	0x20008304
 800a2d0:	080152f0 	.word	0x080152f0
 800a2d4:	08015320 	.word	0x08015320
 800a2d8:	08015338 	.word	0x08015338
 800a2dc:	20008308 	.word	0x20008308
 800a2e0:	08015360 	.word	0x08015360
 800a2e4:	0801537c 	.word	0x0801537c
 800a2e8:	08015398 	.word	0x08015398
 800a2ec:	2000830c 	.word	0x2000830c

0800a2f0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a2f6:	4b18      	ldr	r3, [pc, #96]	@ (800a358 <mem_init+0x68>)
 800a2f8:	3303      	adds	r3, #3
 800a2fa:	f023 0303 	bic.w	r3, r3, #3
 800a2fe:	461a      	mov	r2, r3
 800a300:	4b16      	ldr	r3, [pc, #88]	@ (800a35c <mem_init+0x6c>)
 800a302:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a304:	4b15      	ldr	r3, [pc, #84]	@ (800a35c <mem_init+0x6c>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800a310:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a31e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800a322:	f7ff ff1f 	bl	800a164 <ptr_to_mem>
 800a326:	4603      	mov	r3, r0
 800a328:	4a0d      	ldr	r2, [pc, #52]	@ (800a360 <mem_init+0x70>)
 800a32a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a32c:	4b0c      	ldr	r3, [pc, #48]	@ (800a360 <mem_init+0x70>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2201      	movs	r2, #1
 800a332:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a334:	4b0a      	ldr	r3, [pc, #40]	@ (800a360 <mem_init+0x70>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800a33c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a33e:	4b08      	ldr	r3, [pc, #32]	@ (800a360 <mem_init+0x70>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800a346:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a348:	4b04      	ldr	r3, [pc, #16]	@ (800a35c <mem_init+0x6c>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a05      	ldr	r2, [pc, #20]	@ (800a364 <mem_init+0x74>)
 800a34e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a350:	bf00      	nop
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	20005af0 	.word	0x20005af0
 800a35c:	20008304 	.word	0x20008304
 800a360:	20008308 	.word	0x20008308
 800a364:	2000830c 	.word	0x2000830c

0800a368 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7ff ff09 	bl	800a188 <mem_to_ptr>
 800a376:	4603      	mov	r3, r0
 800a378:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	881b      	ldrh	r3, [r3, #0]
 800a37e:	4618      	mov	r0, r3
 800a380:	f7ff fef0 	bl	800a164 <ptr_to_mem>
 800a384:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	885b      	ldrh	r3, [r3, #2]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7ff feea 	bl	800a164 <ptr_to_mem>
 800a390:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	881b      	ldrh	r3, [r3, #0]
 800a396:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a39a:	d818      	bhi.n	800a3ce <mem_link_valid+0x66>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	885b      	ldrh	r3, [r3, #2]
 800a3a0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a3a4:	d813      	bhi.n	800a3ce <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a3aa:	8afa      	ldrh	r2, [r7, #22]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d004      	beq.n	800a3ba <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	8afa      	ldrh	r2, [r7, #22]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d109      	bne.n	800a3ce <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a3ba:	4b08      	ldr	r3, [pc, #32]	@ (800a3dc <mem_link_valid+0x74>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d006      	beq.n	800a3d2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	885b      	ldrh	r3, [r3, #2]
 800a3c8:	8afa      	ldrh	r2, [r7, #22]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d001      	beq.n	800a3d2 <mem_link_valid+0x6a>
    return 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	e000      	b.n	800a3d4 <mem_link_valid+0x6c>
  }
  return 1;
 800a3d2:	2301      	movs	r3, #1
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3718      	adds	r7, #24
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	20008308 	.word	0x20008308

0800a3e0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d04c      	beq.n	800a488 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f003 0303 	and.w	r3, r3, #3
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d007      	beq.n	800a408 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a3f8:	4b25      	ldr	r3, [pc, #148]	@ (800a490 <mem_free+0xb0>)
 800a3fa:	f240 2273 	movw	r2, #627	@ 0x273
 800a3fe:	4925      	ldr	r1, [pc, #148]	@ (800a494 <mem_free+0xb4>)
 800a400:	4825      	ldr	r0, [pc, #148]	@ (800a498 <mem_free+0xb8>)
 800a402:	f00a f837 	bl	8014474 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a406:	e040      	b.n	800a48a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	3b08      	subs	r3, #8
 800a40c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a40e:	4b23      	ldr	r3, [pc, #140]	@ (800a49c <mem_free+0xbc>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	429a      	cmp	r2, r3
 800a416:	d306      	bcc.n	800a426 <mem_free+0x46>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f103 020c 	add.w	r2, r3, #12
 800a41e:	4b20      	ldr	r3, [pc, #128]	@ (800a4a0 <mem_free+0xc0>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	429a      	cmp	r2, r3
 800a424:	d907      	bls.n	800a436 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a426:	4b1a      	ldr	r3, [pc, #104]	@ (800a490 <mem_free+0xb0>)
 800a428:	f240 227f 	movw	r2, #639	@ 0x27f
 800a42c:	491d      	ldr	r1, [pc, #116]	@ (800a4a4 <mem_free+0xc4>)
 800a42e:	481a      	ldr	r0, [pc, #104]	@ (800a498 <mem_free+0xb8>)
 800a430:	f00a f820 	bl	8014474 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a434:	e029      	b.n	800a48a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	791b      	ldrb	r3, [r3, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d107      	bne.n	800a44e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a43e:	4b14      	ldr	r3, [pc, #80]	@ (800a490 <mem_free+0xb0>)
 800a440:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a444:	4918      	ldr	r1, [pc, #96]	@ (800a4a8 <mem_free+0xc8>)
 800a446:	4814      	ldr	r0, [pc, #80]	@ (800a498 <mem_free+0xb8>)
 800a448:	f00a f814 	bl	8014474 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a44c:	e01d      	b.n	800a48a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f7ff ff8a 	bl	800a368 <mem_link_valid>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d107      	bne.n	800a46a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a45a:	4b0d      	ldr	r3, [pc, #52]	@ (800a490 <mem_free+0xb0>)
 800a45c:	f240 2295 	movw	r2, #661	@ 0x295
 800a460:	4912      	ldr	r1, [pc, #72]	@ (800a4ac <mem_free+0xcc>)
 800a462:	480d      	ldr	r0, [pc, #52]	@ (800a498 <mem_free+0xb8>)
 800a464:	f00a f806 	bl	8014474 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a468:	e00f      	b.n	800a48a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a470:	4b0f      	ldr	r3, [pc, #60]	@ (800a4b0 <mem_free+0xd0>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	429a      	cmp	r2, r3
 800a478:	d202      	bcs.n	800a480 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a47a:	4a0d      	ldr	r2, [pc, #52]	@ (800a4b0 <mem_free+0xd0>)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f7ff fe93 	bl	800a1ac <plug_holes>
 800a486:	e000      	b.n	800a48a <mem_free+0xaa>
    return;
 800a488:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	080152f0 	.word	0x080152f0
 800a494:	080153c4 	.word	0x080153c4
 800a498:	08015338 	.word	0x08015338
 800a49c:	20008304 	.word	0x20008304
 800a4a0:	20008308 	.word	0x20008308
 800a4a4:	080153e8 	.word	0x080153e8
 800a4a8:	08015404 	.word	0x08015404
 800a4ac:	0801542c 	.word	0x0801542c
 800a4b0:	2000830c 	.word	0x2000830c

0800a4b4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b088      	sub	sp, #32
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a4c0:	887b      	ldrh	r3, [r7, #2]
 800a4c2:	3303      	adds	r3, #3
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	f023 0303 	bic.w	r3, r3, #3
 800a4ca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a4cc:	8bfb      	ldrh	r3, [r7, #30]
 800a4ce:	2b0b      	cmp	r3, #11
 800a4d0:	d801      	bhi.n	800a4d6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a4d2:	230c      	movs	r3, #12
 800a4d4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a4d6:	8bfb      	ldrh	r3, [r7, #30]
 800a4d8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a4dc:	d803      	bhi.n	800a4e6 <mem_trim+0x32>
 800a4de:	8bfa      	ldrh	r2, [r7, #30]
 800a4e0:	887b      	ldrh	r3, [r7, #2]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d201      	bcs.n	800a4ea <mem_trim+0x36>
    return NULL;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	e0cc      	b.n	800a684 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a4ea:	4b68      	ldr	r3, [pc, #416]	@ (800a68c <mem_trim+0x1d8>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d304      	bcc.n	800a4fe <mem_trim+0x4a>
 800a4f4:	4b66      	ldr	r3, [pc, #408]	@ (800a690 <mem_trim+0x1dc>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d306      	bcc.n	800a50c <mem_trim+0x58>
 800a4fe:	4b65      	ldr	r3, [pc, #404]	@ (800a694 <mem_trim+0x1e0>)
 800a500:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a504:	4964      	ldr	r1, [pc, #400]	@ (800a698 <mem_trim+0x1e4>)
 800a506:	4865      	ldr	r0, [pc, #404]	@ (800a69c <mem_trim+0x1e8>)
 800a508:	f009 ffb4 	bl	8014474 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a50c:	4b5f      	ldr	r3, [pc, #380]	@ (800a68c <mem_trim+0x1d8>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	429a      	cmp	r2, r3
 800a514:	d304      	bcc.n	800a520 <mem_trim+0x6c>
 800a516:	4b5e      	ldr	r3, [pc, #376]	@ (800a690 <mem_trim+0x1dc>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d301      	bcc.n	800a524 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	e0af      	b.n	800a684 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	3b08      	subs	r3, #8
 800a528:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a52a:	69b8      	ldr	r0, [r7, #24]
 800a52c:	f7ff fe2c 	bl	800a188 <mem_to_ptr>
 800a530:	4603      	mov	r3, r0
 800a532:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	881a      	ldrh	r2, [r3, #0]
 800a538:	8afb      	ldrh	r3, [r7, #22]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	3b08      	subs	r3, #8
 800a540:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a542:	8bfa      	ldrh	r2, [r7, #30]
 800a544:	8abb      	ldrh	r3, [r7, #20]
 800a546:	429a      	cmp	r2, r3
 800a548:	d906      	bls.n	800a558 <mem_trim+0xa4>
 800a54a:	4b52      	ldr	r3, [pc, #328]	@ (800a694 <mem_trim+0x1e0>)
 800a54c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800a550:	4953      	ldr	r1, [pc, #332]	@ (800a6a0 <mem_trim+0x1ec>)
 800a552:	4852      	ldr	r0, [pc, #328]	@ (800a69c <mem_trim+0x1e8>)
 800a554:	f009 ff8e 	bl	8014474 <iprintf>
  if (newsize > size) {
 800a558:	8bfa      	ldrh	r2, [r7, #30]
 800a55a:	8abb      	ldrh	r3, [r7, #20]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d901      	bls.n	800a564 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a560:	2300      	movs	r3, #0
 800a562:	e08f      	b.n	800a684 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a564:	8bfa      	ldrh	r2, [r7, #30]
 800a566:	8abb      	ldrh	r3, [r7, #20]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d101      	bne.n	800a570 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	e089      	b.n	800a684 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	881b      	ldrh	r3, [r3, #0]
 800a574:	4618      	mov	r0, r3
 800a576:	f7ff fdf5 	bl	800a164 <ptr_to_mem>
 800a57a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	791b      	ldrb	r3, [r3, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d13f      	bne.n	800a604 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a58c:	d106      	bne.n	800a59c <mem_trim+0xe8>
 800a58e:	4b41      	ldr	r3, [pc, #260]	@ (800a694 <mem_trim+0x1e0>)
 800a590:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a594:	4943      	ldr	r1, [pc, #268]	@ (800a6a4 <mem_trim+0x1f0>)
 800a596:	4841      	ldr	r0, [pc, #260]	@ (800a69c <mem_trim+0x1e8>)
 800a598:	f009 ff6c 	bl	8014474 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	881b      	ldrh	r3, [r3, #0]
 800a5a0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a5a2:	8afa      	ldrh	r2, [r7, #22]
 800a5a4:	8bfb      	ldrh	r3, [r7, #30]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	3308      	adds	r3, #8
 800a5ac:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a5ae:	4b3e      	ldr	r3, [pc, #248]	@ (800a6a8 <mem_trim+0x1f4>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	693a      	ldr	r2, [r7, #16]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d106      	bne.n	800a5c6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a5b8:	89fb      	ldrh	r3, [r7, #14]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7ff fdd2 	bl	800a164 <ptr_to_mem>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	4a39      	ldr	r2, [pc, #228]	@ (800a6a8 <mem_trim+0x1f4>)
 800a5c4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a5c6:	89fb      	ldrh	r3, [r7, #14]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7ff fdcb 	bl	800a164 <ptr_to_mem>
 800a5ce:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	89ba      	ldrh	r2, [r7, #12]
 800a5da:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	8afa      	ldrh	r2, [r7, #22]
 800a5e0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	89fa      	ldrh	r2, [r7, #14]
 800a5e6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	881b      	ldrh	r3, [r3, #0]
 800a5ec:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a5f0:	d047      	beq.n	800a682 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	881b      	ldrh	r3, [r3, #0]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7ff fdb4 	bl	800a164 <ptr_to_mem>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	89fb      	ldrh	r3, [r7, #14]
 800a600:	8053      	strh	r3, [r2, #2]
 800a602:	e03e      	b.n	800a682 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a604:	8bfb      	ldrh	r3, [r7, #30]
 800a606:	f103 0214 	add.w	r2, r3, #20
 800a60a:	8abb      	ldrh	r3, [r7, #20]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d838      	bhi.n	800a682 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a610:	8afa      	ldrh	r2, [r7, #22]
 800a612:	8bfb      	ldrh	r3, [r7, #30]
 800a614:	4413      	add	r3, r2
 800a616:	b29b      	uxth	r3, r3
 800a618:	3308      	adds	r3, #8
 800a61a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	881b      	ldrh	r3, [r3, #0]
 800a620:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a624:	d106      	bne.n	800a634 <mem_trim+0x180>
 800a626:	4b1b      	ldr	r3, [pc, #108]	@ (800a694 <mem_trim+0x1e0>)
 800a628:	f240 3216 	movw	r2, #790	@ 0x316
 800a62c:	491d      	ldr	r1, [pc, #116]	@ (800a6a4 <mem_trim+0x1f0>)
 800a62e:	481b      	ldr	r0, [pc, #108]	@ (800a69c <mem_trim+0x1e8>)
 800a630:	f009 ff20 	bl	8014474 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a634:	89fb      	ldrh	r3, [r7, #14]
 800a636:	4618      	mov	r0, r3
 800a638:	f7ff fd94 	bl	800a164 <ptr_to_mem>
 800a63c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a63e:	4b1a      	ldr	r3, [pc, #104]	@ (800a6a8 <mem_trim+0x1f4>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	429a      	cmp	r2, r3
 800a646:	d202      	bcs.n	800a64e <mem_trim+0x19a>
      lfree = mem2;
 800a648:	4a17      	ldr	r2, [pc, #92]	@ (800a6a8 <mem_trim+0x1f4>)
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	2200      	movs	r2, #0
 800a652:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	881a      	ldrh	r2, [r3, #0]
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	8afa      	ldrh	r2, [r7, #22]
 800a660:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	89fa      	ldrh	r2, [r7, #14]
 800a666:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	881b      	ldrh	r3, [r3, #0]
 800a66c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a670:	d007      	beq.n	800a682 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	4618      	mov	r0, r3
 800a678:	f7ff fd74 	bl	800a164 <ptr_to_mem>
 800a67c:	4602      	mov	r2, r0
 800a67e:	89fb      	ldrh	r3, [r7, #14]
 800a680:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a682:	687b      	ldr	r3, [r7, #4]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3720      	adds	r7, #32
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	20008304 	.word	0x20008304
 800a690:	20008308 	.word	0x20008308
 800a694:	080152f0 	.word	0x080152f0
 800a698:	08015460 	.word	0x08015460
 800a69c:	08015338 	.word	0x08015338
 800a6a0:	08015478 	.word	0x08015478
 800a6a4:	08015498 	.word	0x08015498
 800a6a8:	2000830c 	.word	0x2000830c

0800a6ac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b088      	sub	sp, #32
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a6b6:	88fb      	ldrh	r3, [r7, #6]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d101      	bne.n	800a6c0 <mem_malloc+0x14>
    return NULL;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	e0d9      	b.n	800a874 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a6c0:	88fb      	ldrh	r3, [r7, #6]
 800a6c2:	3303      	adds	r3, #3
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	f023 0303 	bic.w	r3, r3, #3
 800a6ca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a6cc:	8bbb      	ldrh	r3, [r7, #28]
 800a6ce:	2b0b      	cmp	r3, #11
 800a6d0:	d801      	bhi.n	800a6d6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a6d2:	230c      	movs	r3, #12
 800a6d4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a6d6:	8bbb      	ldrh	r3, [r7, #28]
 800a6d8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a6dc:	d803      	bhi.n	800a6e6 <mem_malloc+0x3a>
 800a6de:	8bba      	ldrh	r2, [r7, #28]
 800a6e0:	88fb      	ldrh	r3, [r7, #6]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d201      	bcs.n	800a6ea <mem_malloc+0x3e>
    return NULL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	e0c4      	b.n	800a874 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a6ea:	4b64      	ldr	r3, [pc, #400]	@ (800a87c <mem_malloc+0x1d0>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7ff fd4a 	bl	800a188 <mem_to_ptr>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	83fb      	strh	r3, [r7, #30]
 800a6f8:	e0b4      	b.n	800a864 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a6fa:	8bfb      	ldrh	r3, [r7, #30]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff fd31 	bl	800a164 <ptr_to_mem>
 800a702:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	791b      	ldrb	r3, [r3, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f040 80a4 	bne.w	800a856 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	881b      	ldrh	r3, [r3, #0]
 800a712:	461a      	mov	r2, r3
 800a714:	8bfb      	ldrh	r3, [r7, #30]
 800a716:	1ad3      	subs	r3, r2, r3
 800a718:	f1a3 0208 	sub.w	r2, r3, #8
 800a71c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a71e:	429a      	cmp	r2, r3
 800a720:	f0c0 8099 	bcc.w	800a856 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	881b      	ldrh	r3, [r3, #0]
 800a728:	461a      	mov	r2, r3
 800a72a:	8bfb      	ldrh	r3, [r7, #30]
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	f1a3 0208 	sub.w	r2, r3, #8
 800a732:	8bbb      	ldrh	r3, [r7, #28]
 800a734:	3314      	adds	r3, #20
 800a736:	429a      	cmp	r2, r3
 800a738:	d333      	bcc.n	800a7a2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a73a:	8bfa      	ldrh	r2, [r7, #30]
 800a73c:	8bbb      	ldrh	r3, [r7, #28]
 800a73e:	4413      	add	r3, r2
 800a740:	b29b      	uxth	r3, r3
 800a742:	3308      	adds	r3, #8
 800a744:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a746:	8a7b      	ldrh	r3, [r7, #18]
 800a748:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a74c:	d106      	bne.n	800a75c <mem_malloc+0xb0>
 800a74e:	4b4c      	ldr	r3, [pc, #304]	@ (800a880 <mem_malloc+0x1d4>)
 800a750:	f240 3287 	movw	r2, #903	@ 0x387
 800a754:	494b      	ldr	r1, [pc, #300]	@ (800a884 <mem_malloc+0x1d8>)
 800a756:	484c      	ldr	r0, [pc, #304]	@ (800a888 <mem_malloc+0x1dc>)
 800a758:	f009 fe8c 	bl	8014474 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a75c:	8a7b      	ldrh	r3, [r7, #18]
 800a75e:	4618      	mov	r0, r3
 800a760:	f7ff fd00 	bl	800a164 <ptr_to_mem>
 800a764:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	881a      	ldrh	r2, [r3, #0]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	8bfa      	ldrh	r2, [r7, #30]
 800a778:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	8a7a      	ldrh	r2, [r7, #18]
 800a77e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	2201      	movs	r2, #1
 800a784:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	881b      	ldrh	r3, [r3, #0]
 800a78a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a78e:	d00b      	beq.n	800a7a8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	881b      	ldrh	r3, [r3, #0]
 800a794:	4618      	mov	r0, r3
 800a796:	f7ff fce5 	bl	800a164 <ptr_to_mem>
 800a79a:	4602      	mov	r2, r0
 800a79c:	8a7b      	ldrh	r3, [r7, #18]
 800a79e:	8053      	strh	r3, [r2, #2]
 800a7a0:	e002      	b.n	800a7a8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a7a8:	4b34      	ldr	r3, [pc, #208]	@ (800a87c <mem_malloc+0x1d0>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	697a      	ldr	r2, [r7, #20]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d127      	bne.n	800a802 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a7b2:	4b32      	ldr	r3, [pc, #200]	@ (800a87c <mem_malloc+0x1d0>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a7b8:	e005      	b.n	800a7c6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	881b      	ldrh	r3, [r3, #0]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7ff fcd0 	bl	800a164 <ptr_to_mem>
 800a7c4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	791b      	ldrb	r3, [r3, #4]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d004      	beq.n	800a7d8 <mem_malloc+0x12c>
 800a7ce:	4b2f      	ldr	r3, [pc, #188]	@ (800a88c <mem_malloc+0x1e0>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	69ba      	ldr	r2, [r7, #24]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d1f0      	bne.n	800a7ba <mem_malloc+0x10e>
          }
          lfree = cur;
 800a7d8:	4a28      	ldr	r2, [pc, #160]	@ (800a87c <mem_malloc+0x1d0>)
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a7de:	4b27      	ldr	r3, [pc, #156]	@ (800a87c <mem_malloc+0x1d0>)
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	4b2a      	ldr	r3, [pc, #168]	@ (800a88c <mem_malloc+0x1e0>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d00b      	beq.n	800a802 <mem_malloc+0x156>
 800a7ea:	4b24      	ldr	r3, [pc, #144]	@ (800a87c <mem_malloc+0x1d0>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	791b      	ldrb	r3, [r3, #4]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d006      	beq.n	800a802 <mem_malloc+0x156>
 800a7f4:	4b22      	ldr	r3, [pc, #136]	@ (800a880 <mem_malloc+0x1d4>)
 800a7f6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800a7fa:	4925      	ldr	r1, [pc, #148]	@ (800a890 <mem_malloc+0x1e4>)
 800a7fc:	4822      	ldr	r0, [pc, #136]	@ (800a888 <mem_malloc+0x1dc>)
 800a7fe:	f009 fe39 	bl	8014474 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a802:	8bba      	ldrh	r2, [r7, #28]
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	4413      	add	r3, r2
 800a808:	3308      	adds	r3, #8
 800a80a:	4a20      	ldr	r2, [pc, #128]	@ (800a88c <mem_malloc+0x1e0>)
 800a80c:	6812      	ldr	r2, [r2, #0]
 800a80e:	4293      	cmp	r3, r2
 800a810:	d906      	bls.n	800a820 <mem_malloc+0x174>
 800a812:	4b1b      	ldr	r3, [pc, #108]	@ (800a880 <mem_malloc+0x1d4>)
 800a814:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800a818:	491e      	ldr	r1, [pc, #120]	@ (800a894 <mem_malloc+0x1e8>)
 800a81a:	481b      	ldr	r0, [pc, #108]	@ (800a888 <mem_malloc+0x1dc>)
 800a81c:	f009 fe2a 	bl	8014474 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	f003 0303 	and.w	r3, r3, #3
 800a826:	2b00      	cmp	r3, #0
 800a828:	d006      	beq.n	800a838 <mem_malloc+0x18c>
 800a82a:	4b15      	ldr	r3, [pc, #84]	@ (800a880 <mem_malloc+0x1d4>)
 800a82c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800a830:	4919      	ldr	r1, [pc, #100]	@ (800a898 <mem_malloc+0x1ec>)
 800a832:	4815      	ldr	r0, [pc, #84]	@ (800a888 <mem_malloc+0x1dc>)
 800a834:	f009 fe1e 	bl	8014474 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f003 0303 	and.w	r3, r3, #3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d006      	beq.n	800a850 <mem_malloc+0x1a4>
 800a842:	4b0f      	ldr	r3, [pc, #60]	@ (800a880 <mem_malloc+0x1d4>)
 800a844:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800a848:	4914      	ldr	r1, [pc, #80]	@ (800a89c <mem_malloc+0x1f0>)
 800a84a:	480f      	ldr	r0, [pc, #60]	@ (800a888 <mem_malloc+0x1dc>)
 800a84c:	f009 fe12 	bl	8014474 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	3308      	adds	r3, #8
 800a854:	e00e      	b.n	800a874 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a856:	8bfb      	ldrh	r3, [r7, #30]
 800a858:	4618      	mov	r0, r3
 800a85a:	f7ff fc83 	bl	800a164 <ptr_to_mem>
 800a85e:	4603      	mov	r3, r0
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a864:	8bfa      	ldrh	r2, [r7, #30]
 800a866:	8bbb      	ldrh	r3, [r7, #28]
 800a868:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800a86c:	429a      	cmp	r2, r3
 800a86e:	f4ff af44 	bcc.w	800a6fa <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3720      	adds	r7, #32
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	2000830c 	.word	0x2000830c
 800a880:	080152f0 	.word	0x080152f0
 800a884:	08015498 	.word	0x08015498
 800a888:	08015338 	.word	0x08015338
 800a88c:	20008308 	.word	0x20008308
 800a890:	080154ac 	.word	0x080154ac
 800a894:	080154c8 	.word	0x080154c8
 800a898:	080154f8 	.word	0x080154f8
 800a89c:	08015528 	.word	0x08015528

0800a8a0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	3303      	adds	r3, #3
 800a8b6:	f023 0303 	bic.w	r3, r3, #3
 800a8ba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a8bc:	2300      	movs	r3, #0
 800a8be:	60fb      	str	r3, [r7, #12]
 800a8c0:	e011      	b.n	800a8e6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	68ba      	ldr	r2, [r7, #8]
 800a8d2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	881b      	ldrh	r3, [r3, #0]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	4413      	add	r3, r2
 800a8de:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	60fb      	str	r3, [r7, #12]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	885b      	ldrh	r3, [r3, #2]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	dbe7      	blt.n	800a8c2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a8f2:	bf00      	nop
 800a8f4:	bf00      	nop
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a906:	2300      	movs	r3, #0
 800a908:	80fb      	strh	r3, [r7, #6]
 800a90a:	e009      	b.n	800a920 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a90c:	88fb      	ldrh	r3, [r7, #6]
 800a90e:	4a08      	ldr	r2, [pc, #32]	@ (800a930 <memp_init+0x30>)
 800a910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a914:	4618      	mov	r0, r3
 800a916:	f7ff ffc3 	bl	800a8a0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a91a:	88fb      	ldrh	r3, [r7, #6]
 800a91c:	3301      	adds	r3, #1
 800a91e:	80fb      	strh	r3, [r7, #6]
 800a920:	88fb      	ldrh	r3, [r7, #6]
 800a922:	2b08      	cmp	r3, #8
 800a924:	d9f2      	bls.n	800a90c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a926:	bf00      	nop
 800a928:	bf00      	nop
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	08017d14 	.word	0x08017d14

0800a934 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d012      	beq.n	800a970 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	6812      	ldr	r2, [r2, #0]
 800a952:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f003 0303 	and.w	r3, r3, #3
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d006      	beq.n	800a96c <do_memp_malloc_pool+0x38>
 800a95e:	4b07      	ldr	r3, [pc, #28]	@ (800a97c <do_memp_malloc_pool+0x48>)
 800a960:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800a964:	4906      	ldr	r1, [pc, #24]	@ (800a980 <do_memp_malloc_pool+0x4c>)
 800a966:	4807      	ldr	r0, [pc, #28]	@ (800a984 <do_memp_malloc_pool+0x50>)
 800a968:	f009 fd84 	bl	8014474 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	e000      	b.n	800a972 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	0801554c 	.word	0x0801554c
 800a980:	0801557c 	.word	0x0801557c
 800a984:	080155a0 	.word	0x080155a0

0800a988 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d106      	bne.n	800a9a4 <memp_malloc_pool+0x1c>
 800a996:	4b0a      	ldr	r3, [pc, #40]	@ (800a9c0 <memp_malloc_pool+0x38>)
 800a998:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800a99c:	4909      	ldr	r1, [pc, #36]	@ (800a9c4 <memp_malloc_pool+0x3c>)
 800a99e:	480a      	ldr	r0, [pc, #40]	@ (800a9c8 <memp_malloc_pool+0x40>)
 800a9a0:	f009 fd68 	bl	8014474 <iprintf>
  if (desc == NULL) {
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d101      	bne.n	800a9ae <memp_malloc_pool+0x26>
    return NULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	e003      	b.n	800a9b6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7ff ffc0 	bl	800a934 <do_memp_malloc_pool>
 800a9b4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	0801554c 	.word	0x0801554c
 800a9c4:	080155c8 	.word	0x080155c8
 800a9c8:	080155a0 	.word	0x080155a0

0800a9cc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a9d6:	79fb      	ldrb	r3, [r7, #7]
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	d908      	bls.n	800a9ee <memp_malloc+0x22>
 800a9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800aa08 <memp_malloc+0x3c>)
 800a9de:	f240 1257 	movw	r2, #343	@ 0x157
 800a9e2:	490a      	ldr	r1, [pc, #40]	@ (800aa0c <memp_malloc+0x40>)
 800a9e4:	480a      	ldr	r0, [pc, #40]	@ (800aa10 <memp_malloc+0x44>)
 800a9e6:	f009 fd45 	bl	8014474 <iprintf>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	e008      	b.n	800aa00 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a9ee:	79fb      	ldrb	r3, [r7, #7]
 800a9f0:	4a08      	ldr	r2, [pc, #32]	@ (800aa14 <memp_malloc+0x48>)
 800a9f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7ff ff9c 	bl	800a934 <do_memp_malloc_pool>
 800a9fc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	0801554c 	.word	0x0801554c
 800aa0c:	080155dc 	.word	0x080155dc
 800aa10:	080155a0 	.word	0x080155a0
 800aa14:	08017d14 	.word	0x08017d14

0800aa18 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	f003 0303 	and.w	r3, r3, #3
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d006      	beq.n	800aa3a <do_memp_free_pool+0x22>
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa58 <do_memp_free_pool+0x40>)
 800aa2e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800aa32:	490a      	ldr	r1, [pc, #40]	@ (800aa5c <do_memp_free_pool+0x44>)
 800aa34:	480a      	ldr	r0, [pc, #40]	@ (800aa60 <do_memp_free_pool+0x48>)
 800aa36:	f009 fd1d 	bl	8014474 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800aa50:	bf00      	nop
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	0801554c 	.word	0x0801554c
 800aa5c:	080155fc 	.word	0x080155fc
 800aa60:	080155a0 	.word	0x080155a0

0800aa64 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d106      	bne.n	800aa82 <memp_free_pool+0x1e>
 800aa74:	4b0a      	ldr	r3, [pc, #40]	@ (800aaa0 <memp_free_pool+0x3c>)
 800aa76:	f240 1295 	movw	r2, #405	@ 0x195
 800aa7a:	490a      	ldr	r1, [pc, #40]	@ (800aaa4 <memp_free_pool+0x40>)
 800aa7c:	480a      	ldr	r0, [pc, #40]	@ (800aaa8 <memp_free_pool+0x44>)
 800aa7e:	f009 fcf9 	bl	8014474 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d007      	beq.n	800aa98 <memp_free_pool+0x34>
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d004      	beq.n	800aa98 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800aa8e:	6839      	ldr	r1, [r7, #0]
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7ff ffc1 	bl	800aa18 <do_memp_free_pool>
 800aa96:	e000      	b.n	800aa9a <memp_free_pool+0x36>
    return;
 800aa98:	bf00      	nop
}
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	0801554c 	.word	0x0801554c
 800aaa4:	080155c8 	.word	0x080155c8
 800aaa8:	080155a0 	.word	0x080155a0

0800aaac <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	4603      	mov	r3, r0
 800aab4:	6039      	str	r1, [r7, #0]
 800aab6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800aab8:	79fb      	ldrb	r3, [r7, #7]
 800aaba:	2b08      	cmp	r3, #8
 800aabc:	d907      	bls.n	800aace <memp_free+0x22>
 800aabe:	4b0c      	ldr	r3, [pc, #48]	@ (800aaf0 <memp_free+0x44>)
 800aac0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800aac4:	490b      	ldr	r1, [pc, #44]	@ (800aaf4 <memp_free+0x48>)
 800aac6:	480c      	ldr	r0, [pc, #48]	@ (800aaf8 <memp_free+0x4c>)
 800aac8:	f009 fcd4 	bl	8014474 <iprintf>
 800aacc:	e00c      	b.n	800aae8 <memp_free+0x3c>

  if (mem == NULL) {
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d008      	beq.n	800aae6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800aad4:	79fb      	ldrb	r3, [r7, #7]
 800aad6:	4a09      	ldr	r2, [pc, #36]	@ (800aafc <memp_free+0x50>)
 800aad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	4618      	mov	r0, r3
 800aae0:	f7ff ff9a 	bl	800aa18 <do_memp_free_pool>
 800aae4:	e000      	b.n	800aae8 <memp_free+0x3c>
    return;
 800aae6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	0801554c 	.word	0x0801554c
 800aaf4:	0801561c 	.word	0x0801561c
 800aaf8:	080155a0 	.word	0x080155a0
 800aafc:	08017d14 	.word	0x08017d14

0800ab00 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ab00:	b480      	push	{r7}
 800ab02:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ab04:	bf00      	nop
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
	...

0800ab10 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	607a      	str	r2, [r7, #4]
 800ab1c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d108      	bne.n	800ab36 <netif_add+0x26>
 800ab24:	4b57      	ldr	r3, [pc, #348]	@ (800ac84 <netif_add+0x174>)
 800ab26:	f240 1227 	movw	r2, #295	@ 0x127
 800ab2a:	4957      	ldr	r1, [pc, #348]	@ (800ac88 <netif_add+0x178>)
 800ab2c:	4857      	ldr	r0, [pc, #348]	@ (800ac8c <netif_add+0x17c>)
 800ab2e:	f009 fca1 	bl	8014474 <iprintf>
 800ab32:	2300      	movs	r3, #0
 800ab34:	e0a2      	b.n	800ac7c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ab36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d108      	bne.n	800ab4e <netif_add+0x3e>
 800ab3c:	4b51      	ldr	r3, [pc, #324]	@ (800ac84 <netif_add+0x174>)
 800ab3e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ab42:	4953      	ldr	r1, [pc, #332]	@ (800ac90 <netif_add+0x180>)
 800ab44:	4851      	ldr	r0, [pc, #324]	@ (800ac8c <netif_add+0x17c>)
 800ab46:	f009 fc95 	bl	8014474 <iprintf>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	e096      	b.n	800ac7c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d101      	bne.n	800ab58 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ab54:	4b4f      	ldr	r3, [pc, #316]	@ (800ac94 <netif_add+0x184>)
 800ab56:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d101      	bne.n	800ab62 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ab5e:	4b4d      	ldr	r3, [pc, #308]	@ (800ac94 <netif_add+0x184>)
 800ab60:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ab68:	4b4a      	ldr	r3, [pc, #296]	@ (800ac94 <netif_add+0x184>)
 800ab6a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2200      	movs	r2, #0
 800ab76:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	4a45      	ldr	r2, [pc, #276]	@ (800ac98 <netif_add+0x188>)
 800ab82:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2200      	movs	r2, #0
 800ab96:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6a3a      	ldr	r2, [r7, #32]
 800ab9c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ab9e:	4b3f      	ldr	r3, [pc, #252]	@ (800ac9c <netif_add+0x18c>)
 800aba0:	781a      	ldrb	r2, [r3, #0]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abac:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	68b9      	ldr	r1, [r7, #8]
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f000 f913 	bl	800ade0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800abba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbc:	68f8      	ldr	r0, [r7, #12]
 800abbe:	4798      	blx	r3
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <netif_add+0xba>
    return NULL;
 800abc6:	2300      	movs	r3, #0
 800abc8:	e058      	b.n	800ac7c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800abd0:	2bff      	cmp	r3, #255	@ 0xff
 800abd2:	d103      	bne.n	800abdc <netif_add+0xcc>
        netif->num = 0;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800abe0:	4b2f      	ldr	r3, [pc, #188]	@ (800aca0 <netif_add+0x190>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	617b      	str	r3, [r7, #20]
 800abe6:	e02b      	b.n	800ac40 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	429a      	cmp	r2, r3
 800abee:	d106      	bne.n	800abfe <netif_add+0xee>
 800abf0:	4b24      	ldr	r3, [pc, #144]	@ (800ac84 <netif_add+0x174>)
 800abf2:	f240 128b 	movw	r2, #395	@ 0x18b
 800abf6:	492b      	ldr	r1, [pc, #172]	@ (800aca4 <netif_add+0x194>)
 800abf8:	4824      	ldr	r0, [pc, #144]	@ (800ac8c <netif_add+0x17c>)
 800abfa:	f009 fc3b 	bl	8014474 <iprintf>
        num_netifs++;
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	3301      	adds	r3, #1
 800ac02:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	2bff      	cmp	r3, #255	@ 0xff
 800ac08:	dd06      	ble.n	800ac18 <netif_add+0x108>
 800ac0a:	4b1e      	ldr	r3, [pc, #120]	@ (800ac84 <netif_add+0x174>)
 800ac0c:	f240 128d 	movw	r2, #397	@ 0x18d
 800ac10:	4925      	ldr	r1, [pc, #148]	@ (800aca8 <netif_add+0x198>)
 800ac12:	481e      	ldr	r0, [pc, #120]	@ (800ac8c <netif_add+0x17c>)
 800ac14:	f009 fc2e 	bl	8014474 <iprintf>
        if (netif2->num == netif->num) {
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d108      	bne.n	800ac3a <netif_add+0x12a>
          netif->num++;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac2e:	3301      	adds	r3, #1
 800ac30:	b2da      	uxtb	r2, r3
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800ac38:	e005      	b.n	800ac46 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	617b      	str	r3, [r7, #20]
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1d0      	bne.n	800abe8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1be      	bne.n	800abca <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac52:	2bfe      	cmp	r3, #254	@ 0xfe
 800ac54:	d103      	bne.n	800ac5e <netif_add+0x14e>
    netif_num = 0;
 800ac56:	4b11      	ldr	r3, [pc, #68]	@ (800ac9c <netif_add+0x18c>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	701a      	strb	r2, [r3, #0]
 800ac5c:	e006      	b.n	800ac6c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac64:	3301      	adds	r3, #1
 800ac66:	b2da      	uxtb	r2, r3
 800ac68:	4b0c      	ldr	r3, [pc, #48]	@ (800ac9c <netif_add+0x18c>)
 800ac6a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ac6c:	4b0c      	ldr	r3, [pc, #48]	@ (800aca0 <netif_add+0x190>)
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ac74:	4a0a      	ldr	r2, [pc, #40]	@ (800aca0 <netif_add+0x190>)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3718      	adds	r7, #24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	08015638 	.word	0x08015638
 800ac88:	080156cc 	.word	0x080156cc
 800ac8c:	08015688 	.word	0x08015688
 800ac90:	080156e8 	.word	0x080156e8
 800ac94:	08017d78 	.word	0x08017d78
 800ac98:	0800b0bb 	.word	0x0800b0bb
 800ac9c:	2000b204 	.word	0x2000b204
 800aca0:	2000b1fc 	.word	0x2000b1fc
 800aca4:	0801570c 	.word	0x0801570c
 800aca8:	08015720 	.word	0x08015720

0800acac <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f002 fbe7 	bl	800d48c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800acbe:	6839      	ldr	r1, [r7, #0]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f006 ffe1 	bl	8011c88 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800acc6:	bf00      	nop
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
	...

0800acd0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d106      	bne.n	800acf0 <netif_do_set_ipaddr+0x20>
 800ace2:	4b1d      	ldr	r3, [pc, #116]	@ (800ad58 <netif_do_set_ipaddr+0x88>)
 800ace4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800ace8:	491c      	ldr	r1, [pc, #112]	@ (800ad5c <netif_do_set_ipaddr+0x8c>)
 800acea:	481d      	ldr	r0, [pc, #116]	@ (800ad60 <netif_do_set_ipaddr+0x90>)
 800acec:	f009 fbc2 	bl	8014474 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d106      	bne.n	800ad04 <netif_do_set_ipaddr+0x34>
 800acf6:	4b18      	ldr	r3, [pc, #96]	@ (800ad58 <netif_do_set_ipaddr+0x88>)
 800acf8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800acfc:	4917      	ldr	r1, [pc, #92]	@ (800ad5c <netif_do_set_ipaddr+0x8c>)
 800acfe:	4818      	ldr	r0, [pc, #96]	@ (800ad60 <netif_do_set_ipaddr+0x90>)
 800ad00:	f009 fbb8 	bl	8014474 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d01c      	beq.n	800ad4c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ad22:	f107 0314 	add.w	r3, r7, #20
 800ad26:	4619      	mov	r1, r3
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7ff ffbf 	bl	800acac <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d002      	beq.n	800ad3a <netif_do_set_ipaddr+0x6a>
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	e000      	b.n	800ad3c <netif_do_set_ipaddr+0x6c>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ad40:	2101      	movs	r1, #1
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f000 f8d2 	bl	800aeec <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e000      	b.n	800ad4e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3718      	adds	r7, #24
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	08015638 	.word	0x08015638
 800ad5c:	08015750 	.word	0x08015750
 800ad60:	08015688 	.word	0x08015688

0800ad64 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	3308      	adds	r3, #8
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d00a      	beq.n	800ad94 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d002      	beq.n	800ad8a <netif_do_set_netmask+0x26>
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	e000      	b.n	800ad8c <netif_do_set_netmask+0x28>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ad90:	2301      	movs	r3, #1
 800ad92:	e000      	b.n	800ad96 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3714      	adds	r7, #20
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr

0800ada2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b085      	sub	sp, #20
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	60f8      	str	r0, [r7, #12]
 800adaa:	60b9      	str	r1, [r7, #8]
 800adac:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	330c      	adds	r3, #12
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d00a      	beq.n	800add2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d002      	beq.n	800adc8 <netif_do_set_gw+0x26>
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	e000      	b.n	800adca <netif_do_set_gw+0x28>
 800adc8:	2300      	movs	r3, #0
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800adce:	2301      	movs	r3, #1
 800add0:	e000      	b.n	800add4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3714      	adds	r7, #20
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b088      	sub	sp, #32
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
 800adec:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800adee:	2300      	movs	r3, #0
 800adf0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800adf2:	2300      	movs	r3, #0
 800adf4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d101      	bne.n	800ae00 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800adfc:	4b1c      	ldr	r3, [pc, #112]	@ (800ae70 <netif_set_addr+0x90>)
 800adfe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ae06:	4b1a      	ldr	r3, [pc, #104]	@ (800ae70 <netif_set_addr+0x90>)
 800ae08:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d101      	bne.n	800ae14 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ae10:	4b17      	ldr	r3, [pc, #92]	@ (800ae70 <netif_set_addr+0x90>)
 800ae12:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d003      	beq.n	800ae22 <netif_set_addr+0x42>
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d101      	bne.n	800ae26 <netif_set_addr+0x46>
 800ae22:	2301      	movs	r3, #1
 800ae24:	e000      	b.n	800ae28 <netif_set_addr+0x48>
 800ae26:	2300      	movs	r3, #0
 800ae28:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d006      	beq.n	800ae3e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ae30:	f107 0310 	add.w	r3, r7, #16
 800ae34:	461a      	mov	r2, r3
 800ae36:	68b9      	ldr	r1, [r7, #8]
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f7ff ff49 	bl	800acd0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ae3e:	69fa      	ldr	r2, [r7, #28]
 800ae40:	6879      	ldr	r1, [r7, #4]
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f7ff ff8e 	bl	800ad64 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ae48:	69ba      	ldr	r2, [r7, #24]
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f7ff ffa8 	bl	800ada2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d106      	bne.n	800ae66 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ae58:	f107 0310 	add.w	r3, r7, #16
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	68b9      	ldr	r1, [r7, #8]
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f7ff ff35 	bl	800acd0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ae66:	bf00      	nop
 800ae68:	3720      	adds	r7, #32
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	08017d78 	.word	0x08017d78

0800ae74 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ae7c:	4a04      	ldr	r2, [pc, #16]	@ (800ae90 <netif_set_default+0x1c>)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ae82:	bf00      	nop
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	2000b200 	.word	0x2000b200

0800ae94 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d107      	bne.n	800aeb2 <netif_set_up+0x1e>
 800aea2:	4b0f      	ldr	r3, [pc, #60]	@ (800aee0 <netif_set_up+0x4c>)
 800aea4:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800aea8:	490e      	ldr	r1, [pc, #56]	@ (800aee4 <netif_set_up+0x50>)
 800aeaa:	480f      	ldr	r0, [pc, #60]	@ (800aee8 <netif_set_up+0x54>)
 800aeac:	f009 fae2 	bl	8014474 <iprintf>
 800aeb0:	e013      	b.n	800aeda <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aeb8:	f003 0301 	and.w	r3, r3, #1
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10c      	bne.n	800aeda <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aec6:	f043 0301 	orr.w	r3, r3, #1
 800aeca:	b2da      	uxtb	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800aed2:	2103      	movs	r1, #3
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f809 	bl	800aeec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	08015638 	.word	0x08015638
 800aee4:	080157c0 	.word	0x080157c0
 800aee8:	08015688 	.word	0x08015688

0800aeec <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d106      	bne.n	800af0c <netif_issue_reports+0x20>
 800aefe:	4b18      	ldr	r3, [pc, #96]	@ (800af60 <netif_issue_reports+0x74>)
 800af00:	f240 326d 	movw	r2, #877	@ 0x36d
 800af04:	4917      	ldr	r1, [pc, #92]	@ (800af64 <netif_issue_reports+0x78>)
 800af06:	4818      	ldr	r0, [pc, #96]	@ (800af68 <netif_issue_reports+0x7c>)
 800af08:	f009 fab4 	bl	8014474 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af12:	f003 0304 	and.w	r3, r3, #4
 800af16:	2b00      	cmp	r3, #0
 800af18:	d01e      	beq.n	800af58 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af20:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800af24:	2b00      	cmp	r3, #0
 800af26:	d017      	beq.n	800af58 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800af28:	78fb      	ldrb	r3, [r7, #3]
 800af2a:	f003 0301 	and.w	r3, r3, #1
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d013      	beq.n	800af5a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	3304      	adds	r3, #4
 800af36:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00e      	beq.n	800af5a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af42:	f003 0308 	and.w	r3, r3, #8
 800af46:	2b00      	cmp	r3, #0
 800af48:	d007      	beq.n	800af5a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	3304      	adds	r3, #4
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f007 fe03 	bl	8012b5c <etharp_request>
 800af56:	e000      	b.n	800af5a <netif_issue_reports+0x6e>
    return;
 800af58:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	08015638 	.word	0x08015638
 800af64:	080157dc 	.word	0x080157dc
 800af68:	08015688 	.word	0x08015688

0800af6c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d107      	bne.n	800af8a <netif_set_down+0x1e>
 800af7a:	4b12      	ldr	r3, [pc, #72]	@ (800afc4 <netif_set_down+0x58>)
 800af7c:	f240 329b 	movw	r2, #923	@ 0x39b
 800af80:	4911      	ldr	r1, [pc, #68]	@ (800afc8 <netif_set_down+0x5c>)
 800af82:	4812      	ldr	r0, [pc, #72]	@ (800afcc <netif_set_down+0x60>)
 800af84:	f009 fa76 	bl	8014474 <iprintf>
 800af88:	e019      	b.n	800afbe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af90:	f003 0301 	and.w	r3, r3, #1
 800af94:	2b00      	cmp	r3, #0
 800af96:	d012      	beq.n	800afbe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af9e:	f023 0301 	bic.w	r3, r3, #1
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800afb0:	f003 0308 	and.w	r3, r3, #8
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d002      	beq.n	800afbe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f007 f98d 	bl	80122d8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	08015638 	.word	0x08015638
 800afc8:	08015800 	.word	0x08015800
 800afcc:	08015688 	.word	0x08015688

0800afd0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d107      	bne.n	800afee <netif_set_link_up+0x1e>
 800afde:	4b13      	ldr	r3, [pc, #76]	@ (800b02c <netif_set_link_up+0x5c>)
 800afe0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800afe4:	4912      	ldr	r1, [pc, #72]	@ (800b030 <netif_set_link_up+0x60>)
 800afe6:	4813      	ldr	r0, [pc, #76]	@ (800b034 <netif_set_link_up+0x64>)
 800afe8:	f009 fa44 	bl	8014474 <iprintf>
 800afec:	e01b      	b.n	800b026 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aff4:	f003 0304 	and.w	r3, r3, #4
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d114      	bne.n	800b026 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b002:	f043 0304 	orr.w	r3, r3, #4
 800b006:	b2da      	uxtb	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b00e:	2103      	movs	r1, #3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7ff ff6b 	bl	800aeec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	69db      	ldr	r3, [r3, #28]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d003      	beq.n	800b026 <netif_set_link_up+0x56>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	08015638 	.word	0x08015638
 800b030:	08015820 	.word	0x08015820
 800b034:	08015688 	.word	0x08015688

0800b038 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d107      	bne.n	800b056 <netif_set_link_down+0x1e>
 800b046:	4b11      	ldr	r3, [pc, #68]	@ (800b08c <netif_set_link_down+0x54>)
 800b048:	f240 4206 	movw	r2, #1030	@ 0x406
 800b04c:	4910      	ldr	r1, [pc, #64]	@ (800b090 <netif_set_link_down+0x58>)
 800b04e:	4811      	ldr	r0, [pc, #68]	@ (800b094 <netif_set_link_down+0x5c>)
 800b050:	f009 fa10 	bl	8014474 <iprintf>
 800b054:	e017      	b.n	800b086 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b05c:	f003 0304 	and.w	r3, r3, #4
 800b060:	2b00      	cmp	r3, #0
 800b062:	d010      	beq.n	800b086 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b06a:	f023 0304 	bic.w	r3, r3, #4
 800b06e:	b2da      	uxtb	r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d003      	beq.n	800b086 <netif_set_link_down+0x4e>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	69db      	ldr	r3, [r3, #28]
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b086:	3708      	adds	r7, #8
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	08015638 	.word	0x08015638
 800b090:	08015844 	.word	0x08015844
 800b094:	08015688 	.word	0x08015688

0800b098 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	683a      	ldr	r2, [r7, #0]
 800b0ac:	61da      	str	r2, [r3, #28]
  }
}
 800b0ae:	bf00      	nop
 800b0b0:	370c      	adds	r7, #12
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b085      	sub	sp, #20
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	60f8      	str	r0, [r7, #12]
 800b0c2:	60b9      	str	r1, [r7, #8]
 800b0c4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b0c6:	f06f 030b 	mvn.w	r3, #11
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3714      	adds	r7, #20
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
	...

0800b0d8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	4603      	mov	r3, r0
 800b0e0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b0e2:	79fb      	ldrb	r3, [r7, #7]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d013      	beq.n	800b110 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b0e8:	4b0d      	ldr	r3, [pc, #52]	@ (800b120 <netif_get_by_index+0x48>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	60fb      	str	r3, [r7, #12]
 800b0ee:	e00c      	b.n	800b10a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	79fa      	ldrb	r2, [r7, #7]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d101      	bne.n	800b104 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	e006      	b.n	800b112 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	60fb      	str	r3, [r7, #12]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1ef      	bne.n	800b0f0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	2000b1fc 	.word	0x2000b1fc

0800b124 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b12a:	4b0c      	ldr	r3, [pc, #48]	@ (800b15c <pbuf_free_ooseq+0x38>)
 800b12c:	2200      	movs	r2, #0
 800b12e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b130:	4b0b      	ldr	r3, [pc, #44]	@ (800b160 <pbuf_free_ooseq+0x3c>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	607b      	str	r3, [r7, #4]
 800b136:	e00a      	b.n	800b14e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d003      	beq.n	800b148 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f002 f9e1 	bl	800d508 <tcp_free_ooseq>
      return;
 800b146:	e005      	b.n	800b154 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	607b      	str	r3, [r7, #4]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1f1      	bne.n	800b138 <pbuf_free_ooseq+0x14>
    }
  }
}
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	2000b205 	.word	0x2000b205
 800b160:	2000b214 	.word	0x2000b214

0800b164 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b164:	b480      	push	{r7}
 800b166:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b168:	4b03      	ldr	r3, [pc, #12]	@ (800b178 <pbuf_pool_is_empty+0x14>)
 800b16a:	2201      	movs	r2, #1
 800b16c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b16e:	bf00      	nop
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	2000b205 	.word	0x2000b205

0800b17c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	4611      	mov	r1, r2
 800b188:	461a      	mov	r2, r3
 800b18a:	460b      	mov	r3, r1
 800b18c:	80fb      	strh	r3, [r7, #6]
 800b18e:	4613      	mov	r3, r2
 800b190:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	88fa      	ldrh	r2, [r7, #6]
 800b1a2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	88ba      	ldrh	r2, [r7, #4]
 800b1a8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b1aa:	8b3b      	ldrh	r3, [r7, #24]
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	7f3a      	ldrb	r2, [r7, #28]
 800b1b6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	73da      	strb	r2, [r3, #15]
}
 800b1c4:	bf00      	nop
 800b1c6:	3714      	adds	r7, #20
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b08c      	sub	sp, #48	@ 0x30
 800b1d4:	af02      	add	r7, sp, #8
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	71fb      	strb	r3, [r7, #7]
 800b1da:	460b      	mov	r3, r1
 800b1dc:	80bb      	strh	r3, [r7, #4]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b1e2:	79fb      	ldrb	r3, [r7, #7]
 800b1e4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b1e6:	887b      	ldrh	r3, [r7, #2]
 800b1e8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b1ec:	d07f      	beq.n	800b2ee <pbuf_alloc+0x11e>
 800b1ee:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b1f2:	f300 80c8 	bgt.w	800b386 <pbuf_alloc+0x1b6>
 800b1f6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b1fa:	d010      	beq.n	800b21e <pbuf_alloc+0x4e>
 800b1fc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b200:	f300 80c1 	bgt.w	800b386 <pbuf_alloc+0x1b6>
 800b204:	2b01      	cmp	r3, #1
 800b206:	d002      	beq.n	800b20e <pbuf_alloc+0x3e>
 800b208:	2b41      	cmp	r3, #65	@ 0x41
 800b20a:	f040 80bc 	bne.w	800b386 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b20e:	887a      	ldrh	r2, [r7, #2]
 800b210:	88bb      	ldrh	r3, [r7, #4]
 800b212:	4619      	mov	r1, r3
 800b214:	2000      	movs	r0, #0
 800b216:	f000 f8d1 	bl	800b3bc <pbuf_alloc_reference>
 800b21a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b21c:	e0bd      	b.n	800b39a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b21e:	2300      	movs	r3, #0
 800b220:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800b222:	2300      	movs	r3, #0
 800b224:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b226:	88bb      	ldrh	r3, [r7, #4]
 800b228:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b22a:	2008      	movs	r0, #8
 800b22c:	f7ff fbce 	bl	800a9cc <memp_malloc>
 800b230:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d109      	bne.n	800b24c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b238:	f7ff ff94 	bl	800b164 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d002      	beq.n	800b248 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b242:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b244:	f000 faa8 	bl	800b798 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b248:	2300      	movs	r3, #0
 800b24a:	e0a7      	b.n	800b39c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b24c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b24e:	3303      	adds	r3, #3
 800b250:	b29b      	uxth	r3, r3
 800b252:	f023 0303 	bic.w	r3, r3, #3
 800b256:	b29b      	uxth	r3, r3
 800b258:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	8b7a      	ldrh	r2, [r7, #26]
 800b260:	4293      	cmp	r3, r2
 800b262:	bf28      	it	cs
 800b264:	4613      	movcs	r3, r2
 800b266:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b268:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b26a:	3310      	adds	r3, #16
 800b26c:	693a      	ldr	r2, [r7, #16]
 800b26e:	4413      	add	r3, r2
 800b270:	3303      	adds	r3, #3
 800b272:	f023 0303 	bic.w	r3, r3, #3
 800b276:	4618      	mov	r0, r3
 800b278:	89f9      	ldrh	r1, [r7, #14]
 800b27a:	8b7a      	ldrh	r2, [r7, #26]
 800b27c:	2300      	movs	r3, #0
 800b27e:	9301      	str	r3, [sp, #4]
 800b280:	887b      	ldrh	r3, [r7, #2]
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	460b      	mov	r3, r1
 800b286:	4601      	mov	r1, r0
 800b288:	6938      	ldr	r0, [r7, #16]
 800b28a:	f7ff ff77 	bl	800b17c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	f003 0303 	and.w	r3, r3, #3
 800b296:	2b00      	cmp	r3, #0
 800b298:	d006      	beq.n	800b2a8 <pbuf_alloc+0xd8>
 800b29a:	4b42      	ldr	r3, [pc, #264]	@ (800b3a4 <pbuf_alloc+0x1d4>)
 800b29c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b2a0:	4941      	ldr	r1, [pc, #260]	@ (800b3a8 <pbuf_alloc+0x1d8>)
 800b2a2:	4842      	ldr	r0, [pc, #264]	@ (800b3ac <pbuf_alloc+0x1dc>)
 800b2a4:	f009 f8e6 	bl	8014474 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b2a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2aa:	3303      	adds	r3, #3
 800b2ac:	f023 0303 	bic.w	r3, r3, #3
 800b2b0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800b2b4:	d106      	bne.n	800b2c4 <pbuf_alloc+0xf4>
 800b2b6:	4b3b      	ldr	r3, [pc, #236]	@ (800b3a4 <pbuf_alloc+0x1d4>)
 800b2b8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b2bc:	493c      	ldr	r1, [pc, #240]	@ (800b3b0 <pbuf_alloc+0x1e0>)
 800b2be:	483b      	ldr	r0, [pc, #236]	@ (800b3ac <pbuf_alloc+0x1dc>)
 800b2c0:	f009 f8d8 	bl	8014474 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d102      	bne.n	800b2d0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2ce:	e002      	b.n	800b2d6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	693a      	ldr	r2, [r7, #16]
 800b2d4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b2da:	8b7a      	ldrh	r2, [r7, #26]
 800b2dc:	89fb      	ldrh	r3, [r7, #14]
 800b2de:	1ad3      	subs	r3, r2, r3
 800b2e0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b2e6:	8b7b      	ldrh	r3, [r7, #26]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d19e      	bne.n	800b22a <pbuf_alloc+0x5a>
      break;
 800b2ec:	e055      	b.n	800b39a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b2ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2f0:	3303      	adds	r3, #3
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	f023 0303 	bic.w	r3, r3, #3
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	88bb      	ldrh	r3, [r7, #4]
 800b2fc:	3303      	adds	r3, #3
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	f023 0303 	bic.w	r3, r3, #3
 800b304:	b29b      	uxth	r3, r3
 800b306:	4413      	add	r3, r2
 800b308:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b30a:	8b3b      	ldrh	r3, [r7, #24]
 800b30c:	3310      	adds	r3, #16
 800b30e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b310:	8b3a      	ldrh	r2, [r7, #24]
 800b312:	88bb      	ldrh	r3, [r7, #4]
 800b314:	3303      	adds	r3, #3
 800b316:	f023 0303 	bic.w	r3, r3, #3
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d306      	bcc.n	800b32c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b31e:	8afa      	ldrh	r2, [r7, #22]
 800b320:	88bb      	ldrh	r3, [r7, #4]
 800b322:	3303      	adds	r3, #3
 800b324:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b328:	429a      	cmp	r2, r3
 800b32a:	d201      	bcs.n	800b330 <pbuf_alloc+0x160>
        return NULL;
 800b32c:	2300      	movs	r3, #0
 800b32e:	e035      	b.n	800b39c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b330:	8afb      	ldrh	r3, [r7, #22]
 800b332:	4618      	mov	r0, r3
 800b334:	f7ff f9ba 	bl	800a6ac <mem_malloc>
 800b338:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d101      	bne.n	800b344 <pbuf_alloc+0x174>
        return NULL;
 800b340:	2300      	movs	r3, #0
 800b342:	e02b      	b.n	800b39c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b344:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b346:	3310      	adds	r3, #16
 800b348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b34a:	4413      	add	r3, r2
 800b34c:	3303      	adds	r3, #3
 800b34e:	f023 0303 	bic.w	r3, r3, #3
 800b352:	4618      	mov	r0, r3
 800b354:	88b9      	ldrh	r1, [r7, #4]
 800b356:	88ba      	ldrh	r2, [r7, #4]
 800b358:	2300      	movs	r3, #0
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	887b      	ldrh	r3, [r7, #2]
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	460b      	mov	r3, r1
 800b362:	4601      	mov	r1, r0
 800b364:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b366:	f7ff ff09 	bl	800b17c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	f003 0303 	and.w	r3, r3, #3
 800b372:	2b00      	cmp	r3, #0
 800b374:	d010      	beq.n	800b398 <pbuf_alloc+0x1c8>
 800b376:	4b0b      	ldr	r3, [pc, #44]	@ (800b3a4 <pbuf_alloc+0x1d4>)
 800b378:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b37c:	490d      	ldr	r1, [pc, #52]	@ (800b3b4 <pbuf_alloc+0x1e4>)
 800b37e:	480b      	ldr	r0, [pc, #44]	@ (800b3ac <pbuf_alloc+0x1dc>)
 800b380:	f009 f878 	bl	8014474 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b384:	e008      	b.n	800b398 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b386:	4b07      	ldr	r3, [pc, #28]	@ (800b3a4 <pbuf_alloc+0x1d4>)
 800b388:	f240 1227 	movw	r2, #295	@ 0x127
 800b38c:	490a      	ldr	r1, [pc, #40]	@ (800b3b8 <pbuf_alloc+0x1e8>)
 800b38e:	4807      	ldr	r0, [pc, #28]	@ (800b3ac <pbuf_alloc+0x1dc>)
 800b390:	f009 f870 	bl	8014474 <iprintf>
      return NULL;
 800b394:	2300      	movs	r3, #0
 800b396:	e001      	b.n	800b39c <pbuf_alloc+0x1cc>
      break;
 800b398:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3728      	adds	r7, #40	@ 0x28
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	08015868 	.word	0x08015868
 800b3a8:	08015898 	.word	0x08015898
 800b3ac:	080158c8 	.word	0x080158c8
 800b3b0:	080158f0 	.word	0x080158f0
 800b3b4:	08015924 	.word	0x08015924
 800b3b8:	08015950 	.word	0x08015950

0800b3bc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af02      	add	r7, sp, #8
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	807b      	strh	r3, [r7, #2]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b3cc:	883b      	ldrh	r3, [r7, #0]
 800b3ce:	2b41      	cmp	r3, #65	@ 0x41
 800b3d0:	d009      	beq.n	800b3e6 <pbuf_alloc_reference+0x2a>
 800b3d2:	883b      	ldrh	r3, [r7, #0]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d006      	beq.n	800b3e6 <pbuf_alloc_reference+0x2a>
 800b3d8:	4b0f      	ldr	r3, [pc, #60]	@ (800b418 <pbuf_alloc_reference+0x5c>)
 800b3da:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b3de:	490f      	ldr	r1, [pc, #60]	@ (800b41c <pbuf_alloc_reference+0x60>)
 800b3e0:	480f      	ldr	r0, [pc, #60]	@ (800b420 <pbuf_alloc_reference+0x64>)
 800b3e2:	f009 f847 	bl	8014474 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b3e6:	2007      	movs	r0, #7
 800b3e8:	f7ff faf0 	bl	800a9cc <memp_malloc>
 800b3ec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	e00b      	b.n	800b410 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b3f8:	8879      	ldrh	r1, [r7, #2]
 800b3fa:	887a      	ldrh	r2, [r7, #2]
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	9301      	str	r3, [sp, #4]
 800b400:	883b      	ldrh	r3, [r7, #0]
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	460b      	mov	r3, r1
 800b406:	6879      	ldr	r1, [r7, #4]
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f7ff feb7 	bl	800b17c <pbuf_init_alloced_pbuf>
  return p;
 800b40e:	68fb      	ldr	r3, [r7, #12]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	08015868 	.word	0x08015868
 800b41c:	0801596c 	.word	0x0801596c
 800b420:	080158c8 	.word	0x080158c8

0800b424 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b088      	sub	sp, #32
 800b428:	af02      	add	r7, sp, #8
 800b42a:	607b      	str	r3, [r7, #4]
 800b42c:	4603      	mov	r3, r0
 800b42e:	73fb      	strb	r3, [r7, #15]
 800b430:	460b      	mov	r3, r1
 800b432:	81bb      	strh	r3, [r7, #12]
 800b434:	4613      	mov	r3, r2
 800b436:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b438:	7bfb      	ldrb	r3, [r7, #15]
 800b43a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b43c:	8a7b      	ldrh	r3, [r7, #18]
 800b43e:	3303      	adds	r3, #3
 800b440:	f023 0203 	bic.w	r2, r3, #3
 800b444:	89bb      	ldrh	r3, [r7, #12]
 800b446:	441a      	add	r2, r3
 800b448:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d901      	bls.n	800b452 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b44e:	2300      	movs	r3, #0
 800b450:	e018      	b.n	800b484 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d007      	beq.n	800b468 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b458:	8a7b      	ldrh	r3, [r7, #18]
 800b45a:	3303      	adds	r3, #3
 800b45c:	f023 0303 	bic.w	r3, r3, #3
 800b460:	6a3a      	ldr	r2, [r7, #32]
 800b462:	4413      	add	r3, r2
 800b464:	617b      	str	r3, [r7, #20]
 800b466:	e001      	b.n	800b46c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b468:	2300      	movs	r3, #0
 800b46a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	89b9      	ldrh	r1, [r7, #12]
 800b470:	89ba      	ldrh	r2, [r7, #12]
 800b472:	2302      	movs	r3, #2
 800b474:	9301      	str	r3, [sp, #4]
 800b476:	897b      	ldrh	r3, [r7, #10]
 800b478:	9300      	str	r3, [sp, #0]
 800b47a:	460b      	mov	r3, r1
 800b47c:	6979      	ldr	r1, [r7, #20]
 800b47e:	f7ff fe7d 	bl	800b17c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b482:	687b      	ldr	r3, [r7, #4]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3718      	adds	r7, #24
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	460b      	mov	r3, r1
 800b496:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d106      	bne.n	800b4ac <pbuf_realloc+0x20>
 800b49e:	4b3a      	ldr	r3, [pc, #232]	@ (800b588 <pbuf_realloc+0xfc>)
 800b4a0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b4a4:	4939      	ldr	r1, [pc, #228]	@ (800b58c <pbuf_realloc+0x100>)
 800b4a6:	483a      	ldr	r0, [pc, #232]	@ (800b590 <pbuf_realloc+0x104>)
 800b4a8:	f008 ffe4 	bl	8014474 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	891b      	ldrh	r3, [r3, #8]
 800b4b0:	887a      	ldrh	r2, [r7, #2]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d263      	bcs.n	800b57e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	891a      	ldrh	r2, [r3, #8]
 800b4ba:	887b      	ldrh	r3, [r7, #2]
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b4c0:	887b      	ldrh	r3, [r7, #2]
 800b4c2:	817b      	strh	r3, [r7, #10]
  q = p;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b4c8:	e018      	b.n	800b4fc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	895b      	ldrh	r3, [r3, #10]
 800b4ce:	897a      	ldrh	r2, [r7, #10]
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	891a      	ldrh	r2, [r3, #8]
 800b4d8:	893b      	ldrh	r3, [r7, #8]
 800b4da:	1ad3      	subs	r3, r2, r3
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d106      	bne.n	800b4fc <pbuf_realloc+0x70>
 800b4ee:	4b26      	ldr	r3, [pc, #152]	@ (800b588 <pbuf_realloc+0xfc>)
 800b4f0:	f240 12af 	movw	r2, #431	@ 0x1af
 800b4f4:	4927      	ldr	r1, [pc, #156]	@ (800b594 <pbuf_realloc+0x108>)
 800b4f6:	4826      	ldr	r0, [pc, #152]	@ (800b590 <pbuf_realloc+0x104>)
 800b4f8:	f008 ffbc 	bl	8014474 <iprintf>
  while (rem_len > q->len) {
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	895b      	ldrh	r3, [r3, #10]
 800b500:	897a      	ldrh	r2, [r7, #10]
 800b502:	429a      	cmp	r2, r3
 800b504:	d8e1      	bhi.n	800b4ca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	7b1b      	ldrb	r3, [r3, #12]
 800b50a:	f003 030f 	and.w	r3, r3, #15
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d121      	bne.n	800b556 <pbuf_realloc+0xca>
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	895b      	ldrh	r3, [r3, #10]
 800b516:	897a      	ldrh	r2, [r7, #10]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d01c      	beq.n	800b556 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	7b5b      	ldrb	r3, [r3, #13]
 800b520:	f003 0302 	and.w	r3, r3, #2
 800b524:	2b00      	cmp	r3, #0
 800b526:	d116      	bne.n	800b556 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	685a      	ldr	r2, [r3, #4]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	b29a      	uxth	r2, r3
 800b532:	897b      	ldrh	r3, [r7, #10]
 800b534:	4413      	add	r3, r2
 800b536:	b29b      	uxth	r3, r3
 800b538:	4619      	mov	r1, r3
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f7fe ffba 	bl	800a4b4 <mem_trim>
 800b540:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d106      	bne.n	800b556 <pbuf_realloc+0xca>
 800b548:	4b0f      	ldr	r3, [pc, #60]	@ (800b588 <pbuf_realloc+0xfc>)
 800b54a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b54e:	4912      	ldr	r1, [pc, #72]	@ (800b598 <pbuf_realloc+0x10c>)
 800b550:	480f      	ldr	r0, [pc, #60]	@ (800b590 <pbuf_realloc+0x104>)
 800b552:	f008 ff8f 	bl	8014474 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	897a      	ldrh	r2, [r7, #10]
 800b55a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	895a      	ldrh	r2, [r3, #10]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d004      	beq.n	800b576 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4618      	mov	r0, r3
 800b572:	f000 f911 	bl	800b798 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	601a      	str	r2, [r3, #0]
 800b57c:	e000      	b.n	800b580 <pbuf_realloc+0xf4>
    return;
 800b57e:	bf00      	nop

}
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	08015868 	.word	0x08015868
 800b58c:	08015980 	.word	0x08015980
 800b590:	080158c8 	.word	0x080158c8
 800b594:	08015998 	.word	0x08015998
 800b598:	080159b0 	.word	0x080159b0

0800b59c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d106      	bne.n	800b5be <pbuf_add_header_impl+0x22>
 800b5b0:	4b2b      	ldr	r3, [pc, #172]	@ (800b660 <pbuf_add_header_impl+0xc4>)
 800b5b2:	f240 12df 	movw	r2, #479	@ 0x1df
 800b5b6:	492b      	ldr	r1, [pc, #172]	@ (800b664 <pbuf_add_header_impl+0xc8>)
 800b5b8:	482b      	ldr	r0, [pc, #172]	@ (800b668 <pbuf_add_header_impl+0xcc>)
 800b5ba:	f008 ff5b 	bl	8014474 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d003      	beq.n	800b5cc <pbuf_add_header_impl+0x30>
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5ca:	d301      	bcc.n	800b5d0 <pbuf_add_header_impl+0x34>
    return 1;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e043      	b.n	800b658 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d101      	bne.n	800b5da <pbuf_add_header_impl+0x3e>
    return 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	e03e      	b.n	800b658 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	891a      	ldrh	r2, [r3, #8]
 800b5e2:	8a7b      	ldrh	r3, [r7, #18]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	8a7a      	ldrh	r2, [r7, #18]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d901      	bls.n	800b5f2 <pbuf_add_header_impl+0x56>
    return 1;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e032      	b.n	800b658 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	7b1b      	ldrb	r3, [r3, #12]
 800b5f6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b5f8:	8a3b      	ldrh	r3, [r7, #16]
 800b5fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00c      	beq.n	800b61c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	425b      	negs	r3, r3
 800b60a:	4413      	add	r3, r2
 800b60c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	3310      	adds	r3, #16
 800b612:	697a      	ldr	r2, [r7, #20]
 800b614:	429a      	cmp	r2, r3
 800b616:	d20d      	bcs.n	800b634 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b618:	2301      	movs	r3, #1
 800b61a:	e01d      	b.n	800b658 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b61c:	79fb      	ldrb	r3, [r7, #7]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d006      	beq.n	800b630 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	685a      	ldr	r2, [r3, #4]
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	425b      	negs	r3, r3
 800b62a:	4413      	add	r3, r2
 800b62c:	617b      	str	r3, [r7, #20]
 800b62e:	e001      	b.n	800b634 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b630:	2301      	movs	r3, #1
 800b632:	e011      	b.n	800b658 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	697a      	ldr	r2, [r7, #20]
 800b638:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	895a      	ldrh	r2, [r3, #10]
 800b63e:	8a7b      	ldrh	r3, [r7, #18]
 800b640:	4413      	add	r3, r2
 800b642:	b29a      	uxth	r2, r3
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	891a      	ldrh	r2, [r3, #8]
 800b64c:	8a7b      	ldrh	r3, [r7, #18]
 800b64e:	4413      	add	r3, r2
 800b650:	b29a      	uxth	r2, r3
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	811a      	strh	r2, [r3, #8]


  return 0;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3718      	adds	r7, #24
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	08015868 	.word	0x08015868
 800b664:	080159cc 	.word	0x080159cc
 800b668:	080158c8 	.word	0x080158c8

0800b66c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b676:	2200      	movs	r2, #0
 800b678:	6839      	ldr	r1, [r7, #0]
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff ff8e 	bl	800b59c <pbuf_add_header_impl>
 800b680:	4603      	mov	r3, r0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
	...

0800b68c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d106      	bne.n	800b6aa <pbuf_remove_header+0x1e>
 800b69c:	4b20      	ldr	r3, [pc, #128]	@ (800b720 <pbuf_remove_header+0x94>)
 800b69e:	f240 224b 	movw	r2, #587	@ 0x24b
 800b6a2:	4920      	ldr	r1, [pc, #128]	@ (800b724 <pbuf_remove_header+0x98>)
 800b6a4:	4820      	ldr	r0, [pc, #128]	@ (800b728 <pbuf_remove_header+0x9c>)
 800b6a6:	f008 fee5 	bl	8014474 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d003      	beq.n	800b6b8 <pbuf_remove_header+0x2c>
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6b6:	d301      	bcc.n	800b6bc <pbuf_remove_header+0x30>
    return 1;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	e02c      	b.n	800b716 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d101      	bne.n	800b6c6 <pbuf_remove_header+0x3a>
    return 0;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	e027      	b.n	800b716 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	895b      	ldrh	r3, [r3, #10]
 800b6ce:	89fa      	ldrh	r2, [r7, #14]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d908      	bls.n	800b6e6 <pbuf_remove_header+0x5a>
 800b6d4:	4b12      	ldr	r3, [pc, #72]	@ (800b720 <pbuf_remove_header+0x94>)
 800b6d6:	f240 2255 	movw	r2, #597	@ 0x255
 800b6da:	4914      	ldr	r1, [pc, #80]	@ (800b72c <pbuf_remove_header+0xa0>)
 800b6dc:	4812      	ldr	r0, [pc, #72]	@ (800b728 <pbuf_remove_header+0x9c>)
 800b6de:	f008 fec9 	bl	8014474 <iprintf>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e017      	b.n	800b716 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685a      	ldr	r2, [r3, #4]
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	441a      	add	r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	895a      	ldrh	r2, [r3, #10]
 800b6fc:	89fb      	ldrh	r3, [r7, #14]
 800b6fe:	1ad3      	subs	r3, r2, r3
 800b700:	b29a      	uxth	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	891a      	ldrh	r2, [r3, #8]
 800b70a:	89fb      	ldrh	r3, [r7, #14]
 800b70c:	1ad3      	subs	r3, r2, r3
 800b70e:	b29a      	uxth	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	08015868 	.word	0x08015868
 800b724:	080159cc 	.word	0x080159cc
 800b728:	080158c8 	.word	0x080158c8
 800b72c:	080159d8 	.word	0x080159d8

0800b730 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	460b      	mov	r3, r1
 800b73a:	807b      	strh	r3, [r7, #2]
 800b73c:	4613      	mov	r3, r2
 800b73e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b740:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b744:	2b00      	cmp	r3, #0
 800b746:	da08      	bge.n	800b75a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b748:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b74c:	425b      	negs	r3, r3
 800b74e:	4619      	mov	r1, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7ff ff9b 	bl	800b68c <pbuf_remove_header>
 800b756:	4603      	mov	r3, r0
 800b758:	e007      	b.n	800b76a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b75a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b75e:	787a      	ldrb	r2, [r7, #1]
 800b760:	4619      	mov	r1, r3
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7ff ff1a 	bl	800b59c <pbuf_add_header_impl>
 800b768:	4603      	mov	r3, r0
  }
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3708      	adds	r7, #8
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}

0800b772 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b082      	sub	sp, #8
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
 800b77a:	460b      	mov	r3, r1
 800b77c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b77e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b782:	2201      	movs	r2, #1
 800b784:	4619      	mov	r1, r3
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7ff ffd2 	bl	800b730 <pbuf_header_impl>
 800b78c:	4603      	mov	r3, r0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
	...

0800b798 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b086      	sub	sp, #24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10b      	bne.n	800b7be <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d106      	bne.n	800b7ba <pbuf_free+0x22>
 800b7ac:	4b38      	ldr	r3, [pc, #224]	@ (800b890 <pbuf_free+0xf8>)
 800b7ae:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800b7b2:	4938      	ldr	r1, [pc, #224]	@ (800b894 <pbuf_free+0xfc>)
 800b7b4:	4838      	ldr	r0, [pc, #224]	@ (800b898 <pbuf_free+0x100>)
 800b7b6:	f008 fe5d 	bl	8014474 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	e063      	b.n	800b886 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b7c2:	e05c      	b.n	800b87e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	7b9b      	ldrb	r3, [r3, #14]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d106      	bne.n	800b7da <pbuf_free+0x42>
 800b7cc:	4b30      	ldr	r3, [pc, #192]	@ (800b890 <pbuf_free+0xf8>)
 800b7ce:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800b7d2:	4932      	ldr	r1, [pc, #200]	@ (800b89c <pbuf_free+0x104>)
 800b7d4:	4830      	ldr	r0, [pc, #192]	@ (800b898 <pbuf_free+0x100>)
 800b7d6:	f008 fe4d 	bl	8014474 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	7b9b      	ldrb	r3, [r3, #14]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	b2da      	uxtb	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	739a      	strb	r2, [r3, #14]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	7b9b      	ldrb	r3, [r3, #14]
 800b7ea:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b7ec:	7dbb      	ldrb	r3, [r7, #22]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d143      	bne.n	800b87a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	7b1b      	ldrb	r3, [r3, #12]
 800b7fc:	f003 030f 	and.w	r3, r3, #15
 800b800:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	7b5b      	ldrb	r3, [r3, #13]
 800b806:	f003 0302 	and.w	r3, r3, #2
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d011      	beq.n	800b832 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d106      	bne.n	800b828 <pbuf_free+0x90>
 800b81a:	4b1d      	ldr	r3, [pc, #116]	@ (800b890 <pbuf_free+0xf8>)
 800b81c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800b820:	491f      	ldr	r1, [pc, #124]	@ (800b8a0 <pbuf_free+0x108>)
 800b822:	481d      	ldr	r0, [pc, #116]	@ (800b898 <pbuf_free+0x100>)
 800b824:	f008 fe26 	bl	8014474 <iprintf>
        pc->custom_free_function(p);
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	691b      	ldr	r3, [r3, #16]
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	4798      	blx	r3
 800b830:	e01d      	b.n	800b86e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b832:	7bfb      	ldrb	r3, [r7, #15]
 800b834:	2b02      	cmp	r3, #2
 800b836:	d104      	bne.n	800b842 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b838:	6879      	ldr	r1, [r7, #4]
 800b83a:	2008      	movs	r0, #8
 800b83c:	f7ff f936 	bl	800aaac <memp_free>
 800b840:	e015      	b.n	800b86e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b842:	7bfb      	ldrb	r3, [r7, #15]
 800b844:	2b01      	cmp	r3, #1
 800b846:	d104      	bne.n	800b852 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b848:	6879      	ldr	r1, [r7, #4]
 800b84a:	2007      	movs	r0, #7
 800b84c:	f7ff f92e 	bl	800aaac <memp_free>
 800b850:	e00d      	b.n	800b86e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b852:	7bfb      	ldrb	r3, [r7, #15]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d103      	bne.n	800b860 <pbuf_free+0xc8>
          mem_free(p);
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f7fe fdc1 	bl	800a3e0 <mem_free>
 800b85e:	e006      	b.n	800b86e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b860:	4b0b      	ldr	r3, [pc, #44]	@ (800b890 <pbuf_free+0xf8>)
 800b862:	f240 320f 	movw	r2, #783	@ 0x30f
 800b866:	490f      	ldr	r1, [pc, #60]	@ (800b8a4 <pbuf_free+0x10c>)
 800b868:	480b      	ldr	r0, [pc, #44]	@ (800b898 <pbuf_free+0x100>)
 800b86a:	f008 fe03 	bl	8014474 <iprintf>
        }
      }
      count++;
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
 800b870:	3301      	adds	r3, #1
 800b872:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	607b      	str	r3, [r7, #4]
 800b878:	e001      	b.n	800b87e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d19f      	bne.n	800b7c4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b884:	7dfb      	ldrb	r3, [r7, #23]
}
 800b886:	4618      	mov	r0, r3
 800b888:	3718      	adds	r7, #24
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	08015868 	.word	0x08015868
 800b894:	080159cc 	.word	0x080159cc
 800b898:	080158c8 	.word	0x080158c8
 800b89c:	080159f8 	.word	0x080159f8
 800b8a0:	08015a10 	.word	0x08015a10
 800b8a4:	08015a34 	.word	0x08015a34

0800b8a8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b8b4:	e005      	b.n	800b8c2 <pbuf_clen+0x1a>
    ++len;
 800b8b6:	89fb      	ldrh	r3, [r7, #14]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1f6      	bne.n	800b8b6 <pbuf_clen+0xe>
  }
  return len;
 800b8c8:	89fb      	ldrh	r3, [r7, #14]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3714      	adds	r7, #20
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr
	...

0800b8d8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d010      	beq.n	800b908 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	7b9b      	ldrb	r3, [r3, #14]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	7b9b      	ldrb	r3, [r3, #14]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d106      	bne.n	800b908 <pbuf_ref+0x30>
 800b8fa:	4b05      	ldr	r3, [pc, #20]	@ (800b910 <pbuf_ref+0x38>)
 800b8fc:	f240 3242 	movw	r2, #834	@ 0x342
 800b900:	4904      	ldr	r1, [pc, #16]	@ (800b914 <pbuf_ref+0x3c>)
 800b902:	4805      	ldr	r0, [pc, #20]	@ (800b918 <pbuf_ref+0x40>)
 800b904:	f008 fdb6 	bl	8014474 <iprintf>
  }
}
 800b908:	bf00      	nop
 800b90a:	3708      	adds	r7, #8
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	08015868 	.word	0x08015868
 800b914:	08015a48 	.word	0x08015a48
 800b918:	080158c8 	.word	0x080158c8

0800b91c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d002      	beq.n	800b932 <pbuf_cat+0x16>
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d107      	bne.n	800b942 <pbuf_cat+0x26>
 800b932:	4b20      	ldr	r3, [pc, #128]	@ (800b9b4 <pbuf_cat+0x98>)
 800b934:	f240 3259 	movw	r2, #857	@ 0x359
 800b938:	491f      	ldr	r1, [pc, #124]	@ (800b9b8 <pbuf_cat+0x9c>)
 800b93a:	4820      	ldr	r0, [pc, #128]	@ (800b9bc <pbuf_cat+0xa0>)
 800b93c:	f008 fd9a 	bl	8014474 <iprintf>
 800b940:	e034      	b.n	800b9ac <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	60fb      	str	r3, [r7, #12]
 800b946:	e00a      	b.n	800b95e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	891a      	ldrh	r2, [r3, #8]
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	891b      	ldrh	r3, [r3, #8]
 800b950:	4413      	add	r3, r2
 800b952:	b29a      	uxth	r2, r3
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	60fb      	str	r3, [r7, #12]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1f0      	bne.n	800b948 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	891a      	ldrh	r2, [r3, #8]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	895b      	ldrh	r3, [r3, #10]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d006      	beq.n	800b980 <pbuf_cat+0x64>
 800b972:	4b10      	ldr	r3, [pc, #64]	@ (800b9b4 <pbuf_cat+0x98>)
 800b974:	f240 3262 	movw	r2, #866	@ 0x362
 800b978:	4911      	ldr	r1, [pc, #68]	@ (800b9c0 <pbuf_cat+0xa4>)
 800b97a:	4810      	ldr	r0, [pc, #64]	@ (800b9bc <pbuf_cat+0xa0>)
 800b97c:	f008 fd7a 	bl	8014474 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d006      	beq.n	800b996 <pbuf_cat+0x7a>
 800b988:	4b0a      	ldr	r3, [pc, #40]	@ (800b9b4 <pbuf_cat+0x98>)
 800b98a:	f240 3263 	movw	r2, #867	@ 0x363
 800b98e:	490d      	ldr	r1, [pc, #52]	@ (800b9c4 <pbuf_cat+0xa8>)
 800b990:	480a      	ldr	r0, [pc, #40]	@ (800b9bc <pbuf_cat+0xa0>)
 800b992:	f008 fd6f 	bl	8014474 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	891a      	ldrh	r2, [r3, #8]
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	891b      	ldrh	r3, [r3, #8]
 800b99e:	4413      	add	r3, r2
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	683a      	ldr	r2, [r7, #0]
 800b9aa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	08015868 	.word	0x08015868
 800b9b8:	08015a5c 	.word	0x08015a5c
 800b9bc:	080158c8 	.word	0x080158c8
 800b9c0:	08015a94 	.word	0x08015a94
 800b9c4:	08015ac4 	.word	0x08015ac4

0800b9c8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f7ff ffa1 	bl	800b91c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b9da:	6838      	ldr	r0, [r7, #0]
 800b9dc:	f7ff ff7c 	bl	800b8d8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b9e0:	bf00      	nop
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	617b      	str	r3, [r7, #20]
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d008      	beq.n	800ba12 <pbuf_copy+0x2a>
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d005      	beq.n	800ba12 <pbuf_copy+0x2a>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	891a      	ldrh	r2, [r3, #8]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	891b      	ldrh	r3, [r3, #8]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d209      	bcs.n	800ba26 <pbuf_copy+0x3e>
 800ba12:	4b57      	ldr	r3, [pc, #348]	@ (800bb70 <pbuf_copy+0x188>)
 800ba14:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800ba18:	4956      	ldr	r1, [pc, #344]	@ (800bb74 <pbuf_copy+0x18c>)
 800ba1a:	4857      	ldr	r0, [pc, #348]	@ (800bb78 <pbuf_copy+0x190>)
 800ba1c:	f008 fd2a 	bl	8014474 <iprintf>
 800ba20:	f06f 030f 	mvn.w	r3, #15
 800ba24:	e09f      	b.n	800bb66 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	895b      	ldrh	r3, [r3, #10]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	1ad2      	subs	r2, r2, r3
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	895b      	ldrh	r3, [r3, #10]
 800ba34:	4619      	mov	r1, r3
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	1acb      	subs	r3, r1, r3
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d306      	bcc.n	800ba4c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	895b      	ldrh	r3, [r3, #10]
 800ba42:	461a      	mov	r2, r3
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	60fb      	str	r3, [r7, #12]
 800ba4a:	e005      	b.n	800ba58 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	895b      	ldrh	r3, [r3, #10]
 800ba50:	461a      	mov	r2, r3
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685a      	ldr	r2, [r3, #4]
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	18d0      	adds	r0, r2, r3
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	685a      	ldr	r2, [r3, #4]
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	4413      	add	r3, r2
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	f008 fddd 	bl	801462a <memcpy>
    offset_to += len;
 800ba70:	697a      	ldr	r2, [r7, #20]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	4413      	add	r3, r2
 800ba76:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ba78:	693a      	ldr	r2, [r7, #16]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	895b      	ldrh	r3, [r3, #10]
 800ba84:	461a      	mov	r2, r3
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d906      	bls.n	800ba9a <pbuf_copy+0xb2>
 800ba8c:	4b38      	ldr	r3, [pc, #224]	@ (800bb70 <pbuf_copy+0x188>)
 800ba8e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800ba92:	493a      	ldr	r1, [pc, #232]	@ (800bb7c <pbuf_copy+0x194>)
 800ba94:	4838      	ldr	r0, [pc, #224]	@ (800bb78 <pbuf_copy+0x190>)
 800ba96:	f008 fced 	bl	8014474 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	895b      	ldrh	r3, [r3, #10]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d906      	bls.n	800bab4 <pbuf_copy+0xcc>
 800baa6:	4b32      	ldr	r3, [pc, #200]	@ (800bb70 <pbuf_copy+0x188>)
 800baa8:	f240 32da 	movw	r2, #986	@ 0x3da
 800baac:	4934      	ldr	r1, [pc, #208]	@ (800bb80 <pbuf_copy+0x198>)
 800baae:	4832      	ldr	r0, [pc, #200]	@ (800bb78 <pbuf_copy+0x190>)
 800bab0:	f008 fce0 	bl	8014474 <iprintf>
    if (offset_from >= p_from->len) {
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	895b      	ldrh	r3, [r3, #10]
 800bab8:	461a      	mov	r2, r3
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	4293      	cmp	r3, r2
 800babe:	d304      	bcc.n	800baca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	895b      	ldrh	r3, [r3, #10]
 800bace:	461a      	mov	r2, r3
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d114      	bne.n	800bb00 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bad6:	2300      	movs	r3, #0
 800bad8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d10c      	bne.n	800bb00 <pbuf_copy+0x118>
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d009      	beq.n	800bb00 <pbuf_copy+0x118>
 800baec:	4b20      	ldr	r3, [pc, #128]	@ (800bb70 <pbuf_copy+0x188>)
 800baee:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800baf2:	4924      	ldr	r1, [pc, #144]	@ (800bb84 <pbuf_copy+0x19c>)
 800baf4:	4820      	ldr	r0, [pc, #128]	@ (800bb78 <pbuf_copy+0x190>)
 800baf6:	f008 fcbd 	bl	8014474 <iprintf>
 800bafa:	f06f 030f 	mvn.w	r3, #15
 800bafe:	e032      	b.n	800bb66 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d013      	beq.n	800bb2e <pbuf_copy+0x146>
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	895a      	ldrh	r2, [r3, #10]
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	891b      	ldrh	r3, [r3, #8]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d10d      	bne.n	800bb2e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d009      	beq.n	800bb2e <pbuf_copy+0x146>
 800bb1a:	4b15      	ldr	r3, [pc, #84]	@ (800bb70 <pbuf_copy+0x188>)
 800bb1c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800bb20:	4919      	ldr	r1, [pc, #100]	@ (800bb88 <pbuf_copy+0x1a0>)
 800bb22:	4815      	ldr	r0, [pc, #84]	@ (800bb78 <pbuf_copy+0x190>)
 800bb24:	f008 fca6 	bl	8014474 <iprintf>
 800bb28:	f06f 0305 	mvn.w	r3, #5
 800bb2c:	e01b      	b.n	800bb66 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d013      	beq.n	800bb5c <pbuf_copy+0x174>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	895a      	ldrh	r2, [r3, #10]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	891b      	ldrh	r3, [r3, #8]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d10d      	bne.n	800bb5c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d009      	beq.n	800bb5c <pbuf_copy+0x174>
 800bb48:	4b09      	ldr	r3, [pc, #36]	@ (800bb70 <pbuf_copy+0x188>)
 800bb4a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800bb4e:	490e      	ldr	r1, [pc, #56]	@ (800bb88 <pbuf_copy+0x1a0>)
 800bb50:	4809      	ldr	r0, [pc, #36]	@ (800bb78 <pbuf_copy+0x190>)
 800bb52:	f008 fc8f 	bl	8014474 <iprintf>
 800bb56:	f06f 0305 	mvn.w	r3, #5
 800bb5a:	e004      	b.n	800bb66 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f47f af61 	bne.w	800ba26 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	08015868 	.word	0x08015868
 800bb74:	08015b10 	.word	0x08015b10
 800bb78:	080158c8 	.word	0x080158c8
 800bb7c:	08015b40 	.word	0x08015b40
 800bb80:	08015b58 	.word	0x08015b58
 800bb84:	08015b74 	.word	0x08015b74
 800bb88:	08015b84 	.word	0x08015b84

0800bb8c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b088      	sub	sp, #32
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	4611      	mov	r1, r2
 800bb98:	461a      	mov	r2, r3
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	80fb      	strh	r3, [r7, #6]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bba2:	2300      	movs	r3, #0
 800bba4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bba6:	2300      	movs	r3, #0
 800bba8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d108      	bne.n	800bbc2 <pbuf_copy_partial+0x36>
 800bbb0:	4b2b      	ldr	r3, [pc, #172]	@ (800bc60 <pbuf_copy_partial+0xd4>)
 800bbb2:	f240 420a 	movw	r2, #1034	@ 0x40a
 800bbb6:	492b      	ldr	r1, [pc, #172]	@ (800bc64 <pbuf_copy_partial+0xd8>)
 800bbb8:	482b      	ldr	r0, [pc, #172]	@ (800bc68 <pbuf_copy_partial+0xdc>)
 800bbba:	f008 fc5b 	bl	8014474 <iprintf>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	e04a      	b.n	800bc58 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d108      	bne.n	800bbda <pbuf_copy_partial+0x4e>
 800bbc8:	4b25      	ldr	r3, [pc, #148]	@ (800bc60 <pbuf_copy_partial+0xd4>)
 800bbca:	f240 420b 	movw	r2, #1035	@ 0x40b
 800bbce:	4927      	ldr	r1, [pc, #156]	@ (800bc6c <pbuf_copy_partial+0xe0>)
 800bbd0:	4825      	ldr	r0, [pc, #148]	@ (800bc68 <pbuf_copy_partial+0xdc>)
 800bbd2:	f008 fc4f 	bl	8014474 <iprintf>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	e03e      	b.n	800bc58 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	61fb      	str	r3, [r7, #28]
 800bbde:	e034      	b.n	800bc4a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bbe0:	88bb      	ldrh	r3, [r7, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d00a      	beq.n	800bbfc <pbuf_copy_partial+0x70>
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	895b      	ldrh	r3, [r3, #10]
 800bbea:	88ba      	ldrh	r2, [r7, #4]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d305      	bcc.n	800bbfc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	895b      	ldrh	r3, [r3, #10]
 800bbf4:	88ba      	ldrh	r2, [r7, #4]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	80bb      	strh	r3, [r7, #4]
 800bbfa:	e023      	b.n	800bc44 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	895a      	ldrh	r2, [r3, #10]
 800bc00:	88bb      	ldrh	r3, [r7, #4]
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bc06:	8b3a      	ldrh	r2, [r7, #24]
 800bc08:	88fb      	ldrh	r3, [r7, #6]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d901      	bls.n	800bc12 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bc0e:	88fb      	ldrh	r3, [r7, #6]
 800bc10:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bc12:	8b7b      	ldrh	r3, [r7, #26]
 800bc14:	68ba      	ldr	r2, [r7, #8]
 800bc16:	18d0      	adds	r0, r2, r3
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	685a      	ldr	r2, [r3, #4]
 800bc1c:	88bb      	ldrh	r3, [r7, #4]
 800bc1e:	4413      	add	r3, r2
 800bc20:	8b3a      	ldrh	r2, [r7, #24]
 800bc22:	4619      	mov	r1, r3
 800bc24:	f008 fd01 	bl	801462a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bc28:	8afa      	ldrh	r2, [r7, #22]
 800bc2a:	8b3b      	ldrh	r3, [r7, #24]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bc30:	8b7a      	ldrh	r2, [r7, #26]
 800bc32:	8b3b      	ldrh	r3, [r7, #24]
 800bc34:	4413      	add	r3, r2
 800bc36:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bc38:	88fa      	ldrh	r2, [r7, #6]
 800bc3a:	8b3b      	ldrh	r3, [r7, #24]
 800bc3c:	1ad3      	subs	r3, r2, r3
 800bc3e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bc40:	2300      	movs	r3, #0
 800bc42:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	61fb      	str	r3, [r7, #28]
 800bc4a:	88fb      	ldrh	r3, [r7, #6]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <pbuf_copy_partial+0xca>
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1c4      	bne.n	800bbe0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bc56:	8afb      	ldrh	r3, [r7, #22]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3720      	adds	r7, #32
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	08015868 	.word	0x08015868
 800bc64:	08015bb0 	.word	0x08015bb0
 800bc68:	080158c8 	.word	0x080158c8
 800bc6c:	08015bd0 	.word	0x08015bd0

0800bc70 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b088      	sub	sp, #32
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800bc7e:	88fb      	ldrh	r3, [r7, #6]
 800bc80:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800bc82:	2300      	movs	r3, #0
 800bc84:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d109      	bne.n	800bca0 <pbuf_take+0x30>
 800bc8c:	4b3a      	ldr	r3, [pc, #232]	@ (800bd78 <pbuf_take+0x108>)
 800bc8e:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800bc92:	493a      	ldr	r1, [pc, #232]	@ (800bd7c <pbuf_take+0x10c>)
 800bc94:	483a      	ldr	r0, [pc, #232]	@ (800bd80 <pbuf_take+0x110>)
 800bc96:	f008 fbed 	bl	8014474 <iprintf>
 800bc9a:	f06f 030f 	mvn.w	r3, #15
 800bc9e:	e067      	b.n	800bd70 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d109      	bne.n	800bcba <pbuf_take+0x4a>
 800bca6:	4b34      	ldr	r3, [pc, #208]	@ (800bd78 <pbuf_take+0x108>)
 800bca8:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800bcac:	4935      	ldr	r1, [pc, #212]	@ (800bd84 <pbuf_take+0x114>)
 800bcae:	4834      	ldr	r0, [pc, #208]	@ (800bd80 <pbuf_take+0x110>)
 800bcb0:	f008 fbe0 	bl	8014474 <iprintf>
 800bcb4:	f06f 030f 	mvn.w	r3, #15
 800bcb8:	e05a      	b.n	800bd70 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	891b      	ldrh	r3, [r3, #8]
 800bcbe:	88fa      	ldrh	r2, [r7, #6]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d909      	bls.n	800bcd8 <pbuf_take+0x68>
 800bcc4:	4b2c      	ldr	r3, [pc, #176]	@ (800bd78 <pbuf_take+0x108>)
 800bcc6:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800bcca:	492f      	ldr	r1, [pc, #188]	@ (800bd88 <pbuf_take+0x118>)
 800bccc:	482c      	ldr	r0, [pc, #176]	@ (800bd80 <pbuf_take+0x110>)
 800bcce:	f008 fbd1 	bl	8014474 <iprintf>
 800bcd2:	f04f 33ff 	mov.w	r3, #4294967295
 800bcd6:	e04b      	b.n	800bd70 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d007      	beq.n	800bcee <pbuf_take+0x7e>
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d004      	beq.n	800bcee <pbuf_take+0x7e>
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	891b      	ldrh	r3, [r3, #8]
 800bce8:	88fa      	ldrh	r2, [r7, #6]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d902      	bls.n	800bcf4 <pbuf_take+0x84>
    return ERR_ARG;
 800bcee:	f06f 030f 	mvn.w	r3, #15
 800bcf2:	e03d      	b.n	800bd70 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	61fb      	str	r3, [r7, #28]
 800bcf8:	e028      	b.n	800bd4c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d106      	bne.n	800bd0e <pbuf_take+0x9e>
 800bd00:	4b1d      	ldr	r3, [pc, #116]	@ (800bd78 <pbuf_take+0x108>)
 800bd02:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800bd06:	4921      	ldr	r1, [pc, #132]	@ (800bd8c <pbuf_take+0x11c>)
 800bd08:	481d      	ldr	r0, [pc, #116]	@ (800bd80 <pbuf_take+0x110>)
 800bd0a:	f008 fbb3 	bl	8014474 <iprintf>
    buf_copy_len = total_copy_len;
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	895b      	ldrh	r3, [r3, #10]
 800bd16:	461a      	mov	r2, r3
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d902      	bls.n	800bd24 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	895b      	ldrh	r3, [r3, #10]
 800bd22:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	6858      	ldr	r0, [r3, #4]
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	69ba      	ldr	r2, [r7, #24]
 800bd30:	4619      	mov	r1, r3
 800bd32:	f008 fc7a 	bl	801462a <memcpy>
    total_copy_len -= buf_copy_len;
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	1ad3      	subs	r3, r2, r3
 800bd3c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800bd3e:	693a      	ldr	r2, [r7, #16]
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	4413      	add	r3, r2
 800bd44:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	61fb      	str	r3, [r7, #28]
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d1d3      	bne.n	800bcfa <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d103      	bne.n	800bd60 <pbuf_take+0xf0>
 800bd58:	88fb      	ldrh	r3, [r7, #6]
 800bd5a:	693a      	ldr	r2, [r7, #16]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d006      	beq.n	800bd6e <pbuf_take+0xfe>
 800bd60:	4b05      	ldr	r3, [pc, #20]	@ (800bd78 <pbuf_take+0x108>)
 800bd62:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800bd66:	490a      	ldr	r1, [pc, #40]	@ (800bd90 <pbuf_take+0x120>)
 800bd68:	4805      	ldr	r0, [pc, #20]	@ (800bd80 <pbuf_take+0x110>)
 800bd6a:	f008 fb83 	bl	8014474 <iprintf>
  return ERR_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3720      	adds	r7, #32
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	08015868 	.word	0x08015868
 800bd7c:	08015c40 	.word	0x08015c40
 800bd80:	080158c8 	.word	0x080158c8
 800bd84:	08015c58 	.word	0x08015c58
 800bd88:	08015c74 	.word	0x08015c74
 800bd8c:	08015c94 	.word	0x08015c94
 800bd90:	08015cac 	.word	0x08015cac

0800bd94 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	603a      	str	r2, [r7, #0]
 800bd9e:	71fb      	strb	r3, [r7, #7]
 800bda0:	460b      	mov	r3, r1
 800bda2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	8919      	ldrh	r1, [r3, #8]
 800bda8:	88ba      	ldrh	r2, [r7, #4]
 800bdaa:	79fb      	ldrb	r3, [r7, #7]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7ff fa0f 	bl	800b1d0 <pbuf_alloc>
 800bdb2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <pbuf_clone+0x2a>
    return NULL;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	e011      	b.n	800bde2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	68f8      	ldr	r0, [r7, #12]
 800bdc2:	f7ff fe11 	bl	800b9e8 <pbuf_copy>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bdca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d006      	beq.n	800bde0 <pbuf_clone+0x4c>
 800bdd2:	4b06      	ldr	r3, [pc, #24]	@ (800bdec <pbuf_clone+0x58>)
 800bdd4:	f240 5224 	movw	r2, #1316	@ 0x524
 800bdd8:	4905      	ldr	r1, [pc, #20]	@ (800bdf0 <pbuf_clone+0x5c>)
 800bdda:	4806      	ldr	r0, [pc, #24]	@ (800bdf4 <pbuf_clone+0x60>)
 800bddc:	f008 fb4a 	bl	8014474 <iprintf>
  return q;
 800bde0:	68fb      	ldr	r3, [r7, #12]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	08015868 	.word	0x08015868
 800bdf0:	08015cdc 	.word	0x08015cdc
 800bdf4:	080158c8 	.word	0x080158c8

0800bdf8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bdfc:	f008 fa3a 	bl	8014274 <rand>
 800be00:	4603      	mov	r3, r0
 800be02:	b29b      	uxth	r3, r3
 800be04:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800be08:	b29b      	uxth	r3, r3
 800be0a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800be0e:	b29a      	uxth	r2, r3
 800be10:	4b01      	ldr	r3, [pc, #4]	@ (800be18 <tcp_init+0x20>)
 800be12:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800be14:	bf00      	nop
 800be16:	bd80      	pop	{r7, pc}
 800be18:	200000d4 	.word	0x200000d4

0800be1c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	7d1b      	ldrb	r3, [r3, #20]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d105      	bne.n	800be38 <tcp_free+0x1c>
 800be2c:	4b06      	ldr	r3, [pc, #24]	@ (800be48 <tcp_free+0x2c>)
 800be2e:	22d4      	movs	r2, #212	@ 0xd4
 800be30:	4906      	ldr	r1, [pc, #24]	@ (800be4c <tcp_free+0x30>)
 800be32:	4807      	ldr	r0, [pc, #28]	@ (800be50 <tcp_free+0x34>)
 800be34:	f008 fb1e 	bl	8014474 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800be38:	6879      	ldr	r1, [r7, #4]
 800be3a:	2001      	movs	r0, #1
 800be3c:	f7fe fe36 	bl	800aaac <memp_free>
}
 800be40:	bf00      	nop
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	08015d68 	.word	0x08015d68
 800be4c:	08015d98 	.word	0x08015d98
 800be50:	08015dac 	.word	0x08015dac

0800be54 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	7d1b      	ldrb	r3, [r3, #20]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d105      	bne.n	800be70 <tcp_free_listen+0x1c>
 800be64:	4b06      	ldr	r3, [pc, #24]	@ (800be80 <tcp_free_listen+0x2c>)
 800be66:	22df      	movs	r2, #223	@ 0xdf
 800be68:	4906      	ldr	r1, [pc, #24]	@ (800be84 <tcp_free_listen+0x30>)
 800be6a:	4807      	ldr	r0, [pc, #28]	@ (800be88 <tcp_free_listen+0x34>)
 800be6c:	f008 fb02 	bl	8014474 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800be70:	6879      	ldr	r1, [r7, #4]
 800be72:	2002      	movs	r0, #2
 800be74:	f7fe fe1a 	bl	800aaac <memp_free>
}
 800be78:	bf00      	nop
 800be7a:	3708      	adds	r7, #8
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	08015d68 	.word	0x08015d68
 800be84:	08015dd4 	.word	0x08015dd4
 800be88:	08015dac 	.word	0x08015dac

0800be8c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800be90:	f000 fea4 	bl	800cbdc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800be94:	4b07      	ldr	r3, [pc, #28]	@ (800beb4 <tcp_tmr+0x28>)
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	3301      	adds	r3, #1
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	4b05      	ldr	r3, [pc, #20]	@ (800beb4 <tcp_tmr+0x28>)
 800be9e:	701a      	strb	r2, [r3, #0]
 800bea0:	4b04      	ldr	r3, [pc, #16]	@ (800beb4 <tcp_tmr+0x28>)
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	f003 0301 	and.w	r3, r3, #1
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800beac:	f000 fb54 	bl	800c558 <tcp_slowtmr>
  }
}
 800beb0:	bf00      	nop
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	2000b21d 	.word	0x2000b21d

0800beb8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d105      	bne.n	800bed4 <tcp_remove_listener+0x1c>
 800bec8:	4b0d      	ldr	r3, [pc, #52]	@ (800bf00 <tcp_remove_listener+0x48>)
 800beca:	22ff      	movs	r2, #255	@ 0xff
 800becc:	490d      	ldr	r1, [pc, #52]	@ (800bf04 <tcp_remove_listener+0x4c>)
 800bece:	480e      	ldr	r0, [pc, #56]	@ (800bf08 <tcp_remove_listener+0x50>)
 800bed0:	f008 fad0 	bl	8014474 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	60fb      	str	r3, [r7, #12]
 800bed8:	e00a      	b.n	800bef0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d102      	bne.n	800beea <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2200      	movs	r2, #0
 800bee8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	68db      	ldr	r3, [r3, #12]
 800beee:	60fb      	str	r3, [r7, #12]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1f1      	bne.n	800beda <tcp_remove_listener+0x22>
    }
  }
}
 800bef6:	bf00      	nop
 800bef8:	bf00      	nop
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	08015d68 	.word	0x08015d68
 800bf04:	08015df0 	.word	0x08015df0
 800bf08:	08015dac 	.word	0x08015dac

0800bf0c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d106      	bne.n	800bf28 <tcp_listen_closed+0x1c>
 800bf1a:	4b14      	ldr	r3, [pc, #80]	@ (800bf6c <tcp_listen_closed+0x60>)
 800bf1c:	f240 1211 	movw	r2, #273	@ 0x111
 800bf20:	4913      	ldr	r1, [pc, #76]	@ (800bf70 <tcp_listen_closed+0x64>)
 800bf22:	4814      	ldr	r0, [pc, #80]	@ (800bf74 <tcp_listen_closed+0x68>)
 800bf24:	f008 faa6 	bl	8014474 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	7d1b      	ldrb	r3, [r3, #20]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d006      	beq.n	800bf3e <tcp_listen_closed+0x32>
 800bf30:	4b0e      	ldr	r3, [pc, #56]	@ (800bf6c <tcp_listen_closed+0x60>)
 800bf32:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800bf36:	4910      	ldr	r1, [pc, #64]	@ (800bf78 <tcp_listen_closed+0x6c>)
 800bf38:	480e      	ldr	r0, [pc, #56]	@ (800bf74 <tcp_listen_closed+0x68>)
 800bf3a:	f008 fa9b 	bl	8014474 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bf3e:	2301      	movs	r3, #1
 800bf40:	60fb      	str	r3, [r7, #12]
 800bf42:	e00b      	b.n	800bf5c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bf44:	4a0d      	ldr	r2, [pc, #52]	@ (800bf7c <tcp_listen_closed+0x70>)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	6879      	ldr	r1, [r7, #4]
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7ff ffb1 	bl	800beb8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	60fb      	str	r3, [r7, #12]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2b03      	cmp	r3, #3
 800bf60:	d9f0      	bls.n	800bf44 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bf62:	bf00      	nop
 800bf64:	bf00      	nop
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	08015d68 	.word	0x08015d68
 800bf70:	08015e18 	.word	0x08015e18
 800bf74:	08015dac 	.word	0x08015dac
 800bf78:	08015e24 	.word	0x08015e24
 800bf7c:	08017d50 	.word	0x08017d50

0800bf80 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bf80:	b5b0      	push	{r4, r5, r7, lr}
 800bf82:	b088      	sub	sp, #32
 800bf84:	af04      	add	r7, sp, #16
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	460b      	mov	r3, r1
 800bf8a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d106      	bne.n	800bfa0 <tcp_close_shutdown+0x20>
 800bf92:	4b63      	ldr	r3, [pc, #396]	@ (800c120 <tcp_close_shutdown+0x1a0>)
 800bf94:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800bf98:	4962      	ldr	r1, [pc, #392]	@ (800c124 <tcp_close_shutdown+0x1a4>)
 800bf9a:	4863      	ldr	r0, [pc, #396]	@ (800c128 <tcp_close_shutdown+0x1a8>)
 800bf9c:	f008 fa6a 	bl	8014474 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bfa0:	78fb      	ldrb	r3, [r7, #3]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d066      	beq.n	800c074 <tcp_close_shutdown+0xf4>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	7d1b      	ldrb	r3, [r3, #20]
 800bfaa:	2b04      	cmp	r3, #4
 800bfac:	d003      	beq.n	800bfb6 <tcp_close_shutdown+0x36>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	7d1b      	ldrb	r3, [r3, #20]
 800bfb2:	2b07      	cmp	r3, #7
 800bfb4:	d15e      	bne.n	800c074 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d104      	bne.n	800bfc8 <tcp_close_shutdown+0x48>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfc2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800bfc6:	d055      	beq.n	800c074 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	8b5b      	ldrh	r3, [r3, #26]
 800bfcc:	f003 0310 	and.w	r3, r3, #16
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d106      	bne.n	800bfe2 <tcp_close_shutdown+0x62>
 800bfd4:	4b52      	ldr	r3, [pc, #328]	@ (800c120 <tcp_close_shutdown+0x1a0>)
 800bfd6:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800bfda:	4954      	ldr	r1, [pc, #336]	@ (800c12c <tcp_close_shutdown+0x1ac>)
 800bfdc:	4852      	ldr	r0, [pc, #328]	@ (800c128 <tcp_close_shutdown+0x1a8>)
 800bfde:	f008 fa49 	bl	8014474 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800bfea:	687d      	ldr	r5, [r7, #4]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	3304      	adds	r3, #4
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	8ad2      	ldrh	r2, [r2, #22]
 800bff4:	6879      	ldr	r1, [r7, #4]
 800bff6:	8b09      	ldrh	r1, [r1, #24]
 800bff8:	9102      	str	r1, [sp, #8]
 800bffa:	9201      	str	r2, [sp, #4]
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	462b      	mov	r3, r5
 800c000:	4622      	mov	r2, r4
 800c002:	4601      	mov	r1, r0
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f004 fe8d 	bl	8010d24 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f001 f8c8 	bl	800d1a0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c010:	4b47      	ldr	r3, [pc, #284]	@ (800c130 <tcp_close_shutdown+0x1b0>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	429a      	cmp	r2, r3
 800c018:	d105      	bne.n	800c026 <tcp_close_shutdown+0xa6>
 800c01a:	4b45      	ldr	r3, [pc, #276]	@ (800c130 <tcp_close_shutdown+0x1b0>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	4a43      	ldr	r2, [pc, #268]	@ (800c130 <tcp_close_shutdown+0x1b0>)
 800c022:	6013      	str	r3, [r2, #0]
 800c024:	e013      	b.n	800c04e <tcp_close_shutdown+0xce>
 800c026:	4b42      	ldr	r3, [pc, #264]	@ (800c130 <tcp_close_shutdown+0x1b0>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	60fb      	str	r3, [r7, #12]
 800c02c:	e00c      	b.n	800c048 <tcp_close_shutdown+0xc8>
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	429a      	cmp	r2, r3
 800c036:	d104      	bne.n	800c042 <tcp_close_shutdown+0xc2>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	68da      	ldr	r2, [r3, #12]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	60da      	str	r2, [r3, #12]
 800c040:	e005      	b.n	800c04e <tcp_close_shutdown+0xce>
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	60fb      	str	r3, [r7, #12]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1ef      	bne.n	800c02e <tcp_close_shutdown+0xae>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	60da      	str	r2, [r3, #12]
 800c054:	4b37      	ldr	r3, [pc, #220]	@ (800c134 <tcp_close_shutdown+0x1b4>)
 800c056:	2201      	movs	r2, #1
 800c058:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c05a:	4b37      	ldr	r3, [pc, #220]	@ (800c138 <tcp_close_shutdown+0x1b8>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	429a      	cmp	r2, r3
 800c062:	d102      	bne.n	800c06a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c064:	f003 fd5c 	bl	800fb20 <tcp_trigger_input_pcb_close>
 800c068:	e002      	b.n	800c070 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7ff fed6 	bl	800be1c <tcp_free>
      }
      return ERR_OK;
 800c070:	2300      	movs	r3, #0
 800c072:	e050      	b.n	800c116 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	7d1b      	ldrb	r3, [r3, #20]
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d03b      	beq.n	800c0f4 <tcp_close_shutdown+0x174>
 800c07c:	2b02      	cmp	r3, #2
 800c07e:	dc44      	bgt.n	800c10a <tcp_close_shutdown+0x18a>
 800c080:	2b00      	cmp	r3, #0
 800c082:	d002      	beq.n	800c08a <tcp_close_shutdown+0x10a>
 800c084:	2b01      	cmp	r3, #1
 800c086:	d02a      	beq.n	800c0de <tcp_close_shutdown+0x15e>
 800c088:	e03f      	b.n	800c10a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	8adb      	ldrh	r3, [r3, #22]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d021      	beq.n	800c0d6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c092:	4b2a      	ldr	r3, [pc, #168]	@ (800c13c <tcp_close_shutdown+0x1bc>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d105      	bne.n	800c0a8 <tcp_close_shutdown+0x128>
 800c09c:	4b27      	ldr	r3, [pc, #156]	@ (800c13c <tcp_close_shutdown+0x1bc>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	4a26      	ldr	r2, [pc, #152]	@ (800c13c <tcp_close_shutdown+0x1bc>)
 800c0a4:	6013      	str	r3, [r2, #0]
 800c0a6:	e013      	b.n	800c0d0 <tcp_close_shutdown+0x150>
 800c0a8:	4b24      	ldr	r3, [pc, #144]	@ (800c13c <tcp_close_shutdown+0x1bc>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	60bb      	str	r3, [r7, #8]
 800c0ae:	e00c      	b.n	800c0ca <tcp_close_shutdown+0x14a>
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d104      	bne.n	800c0c4 <tcp_close_shutdown+0x144>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	68da      	ldr	r2, [r3, #12]
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	60da      	str	r2, [r3, #12]
 800c0c2:	e005      	b.n	800c0d0 <tcp_close_shutdown+0x150>
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	60bb      	str	r3, [r7, #8]
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d1ef      	bne.n	800c0b0 <tcp_close_shutdown+0x130>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7ff fea0 	bl	800be1c <tcp_free>
      break;
 800c0dc:	e01a      	b.n	800c114 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7ff ff14 	bl	800bf0c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c0e4:	6879      	ldr	r1, [r7, #4]
 800c0e6:	4816      	ldr	r0, [pc, #88]	@ (800c140 <tcp_close_shutdown+0x1c0>)
 800c0e8:	f001 f8aa 	bl	800d240 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f7ff feb1 	bl	800be54 <tcp_free_listen>
      break;
 800c0f2:	e00f      	b.n	800c114 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c0f4:	6879      	ldr	r1, [r7, #4]
 800c0f6:	480e      	ldr	r0, [pc, #56]	@ (800c130 <tcp_close_shutdown+0x1b0>)
 800c0f8:	f001 f8a2 	bl	800d240 <tcp_pcb_remove>
 800c0fc:	4b0d      	ldr	r3, [pc, #52]	@ (800c134 <tcp_close_shutdown+0x1b4>)
 800c0fe:	2201      	movs	r2, #1
 800c100:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f7ff fe8a 	bl	800be1c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c108:	e004      	b.n	800c114 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 f81a 	bl	800c144 <tcp_close_shutdown_fin>
 800c110:	4603      	mov	r3, r0
 800c112:	e000      	b.n	800c116 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bdb0      	pop	{r4, r5, r7, pc}
 800c11e:	bf00      	nop
 800c120:	08015d68 	.word	0x08015d68
 800c124:	08015e3c 	.word	0x08015e3c
 800c128:	08015dac 	.word	0x08015dac
 800c12c:	08015e5c 	.word	0x08015e5c
 800c130:	2000b214 	.word	0x2000b214
 800c134:	2000b21c 	.word	0x2000b21c
 800c138:	2000b254 	.word	0x2000b254
 800c13c:	2000b20c 	.word	0x2000b20c
 800c140:	2000b210 	.word	0x2000b210

0800c144 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d106      	bne.n	800c160 <tcp_close_shutdown_fin+0x1c>
 800c152:	4b2e      	ldr	r3, [pc, #184]	@ (800c20c <tcp_close_shutdown_fin+0xc8>)
 800c154:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c158:	492d      	ldr	r1, [pc, #180]	@ (800c210 <tcp_close_shutdown_fin+0xcc>)
 800c15a:	482e      	ldr	r0, [pc, #184]	@ (800c214 <tcp_close_shutdown_fin+0xd0>)
 800c15c:	f008 f98a 	bl	8014474 <iprintf>

  switch (pcb->state) {
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	7d1b      	ldrb	r3, [r3, #20]
 800c164:	2b07      	cmp	r3, #7
 800c166:	d020      	beq.n	800c1aa <tcp_close_shutdown_fin+0x66>
 800c168:	2b07      	cmp	r3, #7
 800c16a:	dc2b      	bgt.n	800c1c4 <tcp_close_shutdown_fin+0x80>
 800c16c:	2b03      	cmp	r3, #3
 800c16e:	d002      	beq.n	800c176 <tcp_close_shutdown_fin+0x32>
 800c170:	2b04      	cmp	r3, #4
 800c172:	d00d      	beq.n	800c190 <tcp_close_shutdown_fin+0x4c>
 800c174:	e026      	b.n	800c1c4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f003 fee2 	bl	800ff40 <tcp_send_fin>
 800c17c:	4603      	mov	r3, r0
 800c17e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d11f      	bne.n	800c1c8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2205      	movs	r2, #5
 800c18c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c18e:	e01b      	b.n	800c1c8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f003 fed5 	bl	800ff40 <tcp_send_fin>
 800c196:	4603      	mov	r3, r0
 800c198:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c19a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d114      	bne.n	800c1cc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2205      	movs	r2, #5
 800c1a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c1a8:	e010      	b.n	800c1cc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f003 fec8 	bl	800ff40 <tcp_send_fin>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c1b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d109      	bne.n	800c1d0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2209      	movs	r2, #9
 800c1c0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c1c2:	e005      	b.n	800c1d0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	e01c      	b.n	800c202 <tcp_close_shutdown_fin+0xbe>
      break;
 800c1c8:	bf00      	nop
 800c1ca:	e002      	b.n	800c1d2 <tcp_close_shutdown_fin+0x8e>
      break;
 800c1cc:	bf00      	nop
 800c1ce:	e000      	b.n	800c1d2 <tcp_close_shutdown_fin+0x8e>
      break;
 800c1d0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d103      	bne.n	800c1e2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f003 ffee 	bl	80101bc <tcp_output>
 800c1e0:	e00d      	b.n	800c1fe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c1e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ea:	d108      	bne.n	800c1fe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	8b5b      	ldrh	r3, [r3, #26]
 800c1f0:	f043 0308 	orr.w	r3, r3, #8
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	e001      	b.n	800c202 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c1fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	08015d68 	.word	0x08015d68
 800c210:	08015e18 	.word	0x08015e18
 800c214:	08015dac 	.word	0x08015dac

0800c218 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d109      	bne.n	800c23a <tcp_close+0x22>
 800c226:	4b0f      	ldr	r3, [pc, #60]	@ (800c264 <tcp_close+0x4c>)
 800c228:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800c22c:	490e      	ldr	r1, [pc, #56]	@ (800c268 <tcp_close+0x50>)
 800c22e:	480f      	ldr	r0, [pc, #60]	@ (800c26c <tcp_close+0x54>)
 800c230:	f008 f920 	bl	8014474 <iprintf>
 800c234:	f06f 030f 	mvn.w	r3, #15
 800c238:	e00f      	b.n	800c25a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	7d1b      	ldrb	r3, [r3, #20]
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d006      	beq.n	800c250 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	8b5b      	ldrh	r3, [r3, #26]
 800c246:	f043 0310 	orr.w	r3, r3, #16
 800c24a:	b29a      	uxth	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c250:	2101      	movs	r1, #1
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7ff fe94 	bl	800bf80 <tcp_close_shutdown>
 800c258:	4603      	mov	r3, r0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3708      	adds	r7, #8
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	08015d68 	.word	0x08015d68
 800c268:	08015e78 	.word	0x08015e78
 800c26c:	08015dac 	.word	0x08015dac

0800c270 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b08e      	sub	sp, #56	@ 0x38
 800c274:	af04      	add	r7, sp, #16
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d107      	bne.n	800c290 <tcp_abandon+0x20>
 800c280:	4b52      	ldr	r3, [pc, #328]	@ (800c3cc <tcp_abandon+0x15c>)
 800c282:	f240 223d 	movw	r2, #573	@ 0x23d
 800c286:	4952      	ldr	r1, [pc, #328]	@ (800c3d0 <tcp_abandon+0x160>)
 800c288:	4852      	ldr	r0, [pc, #328]	@ (800c3d4 <tcp_abandon+0x164>)
 800c28a:	f008 f8f3 	bl	8014474 <iprintf>
 800c28e:	e099      	b.n	800c3c4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	7d1b      	ldrb	r3, [r3, #20]
 800c294:	2b01      	cmp	r3, #1
 800c296:	d106      	bne.n	800c2a6 <tcp_abandon+0x36>
 800c298:	4b4c      	ldr	r3, [pc, #304]	@ (800c3cc <tcp_abandon+0x15c>)
 800c29a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800c29e:	494e      	ldr	r1, [pc, #312]	@ (800c3d8 <tcp_abandon+0x168>)
 800c2a0:	484c      	ldr	r0, [pc, #304]	@ (800c3d4 <tcp_abandon+0x164>)
 800c2a2:	f008 f8e7 	bl	8014474 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	7d1b      	ldrb	r3, [r3, #20]
 800c2aa:	2b0a      	cmp	r3, #10
 800c2ac:	d107      	bne.n	800c2be <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c2ae:	6879      	ldr	r1, [r7, #4]
 800c2b0:	484a      	ldr	r0, [pc, #296]	@ (800c3dc <tcp_abandon+0x16c>)
 800c2b2:	f000 ffc5 	bl	800d240 <tcp_pcb_remove>
    tcp_free(pcb);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f7ff fdb0 	bl	800be1c <tcp_free>
 800c2bc:	e082      	b.n	800c3c4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2ca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2d8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	691b      	ldr	r3, [r3, #16]
 800c2de:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	7d1b      	ldrb	r3, [r3, #20]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d126      	bne.n	800c336 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	8adb      	ldrh	r3, [r3, #22]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d02e      	beq.n	800c34e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c2f0:	4b3b      	ldr	r3, [pc, #236]	@ (800c3e0 <tcp_abandon+0x170>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d105      	bne.n	800c306 <tcp_abandon+0x96>
 800c2fa:	4b39      	ldr	r3, [pc, #228]	@ (800c3e0 <tcp_abandon+0x170>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	4a37      	ldr	r2, [pc, #220]	@ (800c3e0 <tcp_abandon+0x170>)
 800c302:	6013      	str	r3, [r2, #0]
 800c304:	e013      	b.n	800c32e <tcp_abandon+0xbe>
 800c306:	4b36      	ldr	r3, [pc, #216]	@ (800c3e0 <tcp_abandon+0x170>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	61fb      	str	r3, [r7, #28]
 800c30c:	e00c      	b.n	800c328 <tcp_abandon+0xb8>
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	429a      	cmp	r2, r3
 800c316:	d104      	bne.n	800c322 <tcp_abandon+0xb2>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	68da      	ldr	r2, [r3, #12]
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	60da      	str	r2, [r3, #12]
 800c320:	e005      	b.n	800c32e <tcp_abandon+0xbe>
 800c322:	69fb      	ldr	r3, [r7, #28]
 800c324:	68db      	ldr	r3, [r3, #12]
 800c326:	61fb      	str	r3, [r7, #28]
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1ef      	bne.n	800c30e <tcp_abandon+0x9e>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2200      	movs	r2, #0
 800c332:	60da      	str	r2, [r3, #12]
 800c334:	e00b      	b.n	800c34e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	8adb      	ldrh	r3, [r3, #22]
 800c33e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c340:	6879      	ldr	r1, [r7, #4]
 800c342:	4828      	ldr	r0, [pc, #160]	@ (800c3e4 <tcp_abandon+0x174>)
 800c344:	f000 ff7c 	bl	800d240 <tcp_pcb_remove>
 800c348:	4b27      	ldr	r3, [pc, #156]	@ (800c3e8 <tcp_abandon+0x178>)
 800c34a:	2201      	movs	r2, #1
 800c34c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c352:	2b00      	cmp	r3, #0
 800c354:	d004      	beq.n	800c360 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c35a:	4618      	mov	r0, r3
 800c35c:	f000 fd1e 	bl	800cd9c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c364:	2b00      	cmp	r3, #0
 800c366:	d004      	beq.n	800c372 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c36c:	4618      	mov	r0, r3
 800c36e:	f000 fd15 	bl	800cd9c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c376:	2b00      	cmp	r3, #0
 800c378:	d004      	beq.n	800c384 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c37e:	4618      	mov	r0, r3
 800c380:	f000 fd0c 	bl	800cd9c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00e      	beq.n	800c3a8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c38a:	6879      	ldr	r1, [r7, #4]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	3304      	adds	r3, #4
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	8b12      	ldrh	r2, [r2, #24]
 800c394:	9202      	str	r2, [sp, #8]
 800c396:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c398:	9201      	str	r2, [sp, #4]
 800c39a:	9300      	str	r3, [sp, #0]
 800c39c:	460b      	mov	r3, r1
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	69b9      	ldr	r1, [r7, #24]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f004 fcbe 	bl	8010d24 <tcp_rst>
    }
    last_state = pcb->state;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	7d1b      	ldrb	r3, [r3, #20]
 800c3ac:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f7ff fd34 	bl	800be1c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d004      	beq.n	800c3c4 <tcp_abandon+0x154>
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	f06f 010c 	mvn.w	r1, #12
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	4798      	blx	r3
  }
}
 800c3c4:	3728      	adds	r7, #40	@ 0x28
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	08015d68 	.word	0x08015d68
 800c3d0:	08015eac 	.word	0x08015eac
 800c3d4:	08015dac 	.word	0x08015dac
 800c3d8:	08015ec8 	.word	0x08015ec8
 800c3dc:	2000b218 	.word	0x2000b218
 800c3e0:	2000b20c 	.word	0x2000b20c
 800c3e4:	2000b214 	.word	0x2000b214
 800c3e8:	2000b21c 	.word	0x2000b21c

0800c3ec <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c3f4:	2101      	movs	r1, #1
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f7ff ff3a 	bl	800c270 <tcp_abandon>
}
 800c3fc:	bf00      	nop
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d106      	bne.n	800c420 <tcp_update_rcv_ann_wnd+0x1c>
 800c412:	4b25      	ldr	r3, [pc, #148]	@ (800c4a8 <tcp_update_rcv_ann_wnd+0xa4>)
 800c414:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c418:	4924      	ldr	r1, [pc, #144]	@ (800c4ac <tcp_update_rcv_ann_wnd+0xa8>)
 800c41a:	4825      	ldr	r0, [pc, #148]	@ (800c4b0 <tcp_update_rcv_ann_wnd+0xac>)
 800c41c:	f008 f82a 	bl	8014474 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c428:	4413      	add	r3, r2
 800c42a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800c434:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800c438:	bf28      	it	cs
 800c43a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800c43e:	b292      	uxth	r2, r2
 800c440:	4413      	add	r3, r2
 800c442:	68fa      	ldr	r2, [r7, #12]
 800c444:	1ad3      	subs	r3, r2, r3
 800c446:	2b00      	cmp	r3, #0
 800c448:	db08      	blt.n	800c45c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	1ad3      	subs	r3, r2, r3
 800c45a:	e020      	b.n	800c49e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c464:	1ad3      	subs	r3, r2, r3
 800c466:	2b00      	cmp	r3, #0
 800c468:	dd03      	ble.n	800c472 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c470:	e014      	b.n	800c49c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c47a:	1ad3      	subs	r3, r2, r3
 800c47c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c484:	d306      	bcc.n	800c494 <tcp_update_rcv_ann_wnd+0x90>
 800c486:	4b08      	ldr	r3, [pc, #32]	@ (800c4a8 <tcp_update_rcv_ann_wnd+0xa4>)
 800c488:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800c48c:	4909      	ldr	r1, [pc, #36]	@ (800c4b4 <tcp_update_rcv_ann_wnd+0xb0>)
 800c48e:	4808      	ldr	r0, [pc, #32]	@ (800c4b0 <tcp_update_rcv_ann_wnd+0xac>)
 800c490:	f007 fff0 	bl	8014474 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	b29a      	uxth	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800c49c:	2300      	movs	r3, #0
  }
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	08015d68 	.word	0x08015d68
 800c4ac:	08015fc4 	.word	0x08015fc4
 800c4b0:	08015dac 	.word	0x08015dac
 800c4b4:	08015fe8 	.word	0x08015fe8

0800c4b8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d107      	bne.n	800c4da <tcp_recved+0x22>
 800c4ca:	4b1f      	ldr	r3, [pc, #124]	@ (800c548 <tcp_recved+0x90>)
 800c4cc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800c4d0:	491e      	ldr	r1, [pc, #120]	@ (800c54c <tcp_recved+0x94>)
 800c4d2:	481f      	ldr	r0, [pc, #124]	@ (800c550 <tcp_recved+0x98>)
 800c4d4:	f007 ffce 	bl	8014474 <iprintf>
 800c4d8:	e032      	b.n	800c540 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	7d1b      	ldrb	r3, [r3, #20]
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d106      	bne.n	800c4f0 <tcp_recved+0x38>
 800c4e2:	4b19      	ldr	r3, [pc, #100]	@ (800c548 <tcp_recved+0x90>)
 800c4e4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800c4e8:	491a      	ldr	r1, [pc, #104]	@ (800c554 <tcp_recved+0x9c>)
 800c4ea:	4819      	ldr	r0, [pc, #100]	@ (800c550 <tcp_recved+0x98>)
 800c4ec:	f007 ffc2 	bl	8014474 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c4f4:	887b      	ldrh	r3, [r7, #2]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c4fa:	89fb      	ldrh	r3, [r7, #14]
 800c4fc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c500:	d804      	bhi.n	800c50c <tcp_recved+0x54>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c506:	89fa      	ldrh	r2, [r7, #14]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d204      	bcs.n	800c516 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c512:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c514:	e002      	b.n	800c51c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	89fa      	ldrh	r2, [r7, #14]
 800c51a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f7ff ff71 	bl	800c404 <tcp_update_rcv_ann_wnd>
 800c522:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c52a:	d309      	bcc.n	800c540 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	8b5b      	ldrh	r3, [r3, #26]
 800c530:	f043 0302 	orr.w	r3, r3, #2
 800c534:	b29a      	uxth	r2, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f003 fe3e 	bl	80101bc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	08015d68 	.word	0x08015d68
 800c54c:	08016004 	.word	0x08016004
 800c550:	08015dac 	.word	0x08015dac
 800c554:	0801601c 	.word	0x0801601c

0800c558 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c558:	b5b0      	push	{r4, r5, r7, lr}
 800c55a:	b090      	sub	sp, #64	@ 0x40
 800c55c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c55e:	2300      	movs	r3, #0
 800c560:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800c564:	4b95      	ldr	r3, [pc, #596]	@ (800c7bc <tcp_slowtmr+0x264>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	3301      	adds	r3, #1
 800c56a:	4a94      	ldr	r2, [pc, #592]	@ (800c7bc <tcp_slowtmr+0x264>)
 800c56c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c56e:	4b94      	ldr	r3, [pc, #592]	@ (800c7c0 <tcp_slowtmr+0x268>)
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	3301      	adds	r3, #1
 800c574:	b2da      	uxtb	r2, r3
 800c576:	4b92      	ldr	r3, [pc, #584]	@ (800c7c0 <tcp_slowtmr+0x268>)
 800c578:	701a      	strb	r2, [r3, #0]
 800c57a:	e000      	b.n	800c57e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800c57c:	bf00      	nop
  prev = NULL;
 800c57e:	2300      	movs	r3, #0
 800c580:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800c582:	4b90      	ldr	r3, [pc, #576]	@ (800c7c4 <tcp_slowtmr+0x26c>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c588:	e29f      	b.n	800caca <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c58c:	7d1b      	ldrb	r3, [r3, #20]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d106      	bne.n	800c5a0 <tcp_slowtmr+0x48>
 800c592:	4b8d      	ldr	r3, [pc, #564]	@ (800c7c8 <tcp_slowtmr+0x270>)
 800c594:	f240 42be 	movw	r2, #1214	@ 0x4be
 800c598:	498c      	ldr	r1, [pc, #560]	@ (800c7cc <tcp_slowtmr+0x274>)
 800c59a:	488d      	ldr	r0, [pc, #564]	@ (800c7d0 <tcp_slowtmr+0x278>)
 800c59c:	f007 ff6a 	bl	8014474 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5a2:	7d1b      	ldrb	r3, [r3, #20]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d106      	bne.n	800c5b6 <tcp_slowtmr+0x5e>
 800c5a8:	4b87      	ldr	r3, [pc, #540]	@ (800c7c8 <tcp_slowtmr+0x270>)
 800c5aa:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800c5ae:	4989      	ldr	r1, [pc, #548]	@ (800c7d4 <tcp_slowtmr+0x27c>)
 800c5b0:	4887      	ldr	r0, [pc, #540]	@ (800c7d0 <tcp_slowtmr+0x278>)
 800c5b2:	f007 ff5f 	bl	8014474 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b8:	7d1b      	ldrb	r3, [r3, #20]
 800c5ba:	2b0a      	cmp	r3, #10
 800c5bc:	d106      	bne.n	800c5cc <tcp_slowtmr+0x74>
 800c5be:	4b82      	ldr	r3, [pc, #520]	@ (800c7c8 <tcp_slowtmr+0x270>)
 800c5c0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800c5c4:	4984      	ldr	r1, [pc, #528]	@ (800c7d8 <tcp_slowtmr+0x280>)
 800c5c6:	4882      	ldr	r0, [pc, #520]	@ (800c7d0 <tcp_slowtmr+0x278>)
 800c5c8:	f007 ff54 	bl	8014474 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ce:	7f9a      	ldrb	r2, [r3, #30]
 800c5d0:	4b7b      	ldr	r3, [pc, #492]	@ (800c7c0 <tcp_slowtmr+0x268>)
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d105      	bne.n	800c5e4 <tcp_slowtmr+0x8c>
      prev = pcb;
 800c5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5da:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800c5e2:	e272      	b.n	800caca <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800c5e4:	4b76      	ldr	r3, [pc, #472]	@ (800c7c0 <tcp_slowtmr+0x268>)
 800c5e6:	781a      	ldrb	r2, [r3, #0]
 800c5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ea:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5fa:	7d1b      	ldrb	r3, [r3, #20]
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	d10a      	bne.n	800c616 <tcp_slowtmr+0xbe>
 800c600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c602:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c606:	2b05      	cmp	r3, #5
 800c608:	d905      	bls.n	800c616 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800c60a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c60e:	3301      	adds	r3, #1
 800c610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c614:	e11e      	b.n	800c854 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c618:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c61c:	2b0b      	cmp	r3, #11
 800c61e:	d905      	bls.n	800c62c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800c620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c624:	3301      	adds	r3, #1
 800c626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c62a:	e113      	b.n	800c854 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800c62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c62e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c632:	2b00      	cmp	r3, #0
 800c634:	d075      	beq.n	800c722 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d006      	beq.n	800c64c <tcp_slowtmr+0xf4>
 800c63e:	4b62      	ldr	r3, [pc, #392]	@ (800c7c8 <tcp_slowtmr+0x270>)
 800c640:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800c644:	4965      	ldr	r1, [pc, #404]	@ (800c7dc <tcp_slowtmr+0x284>)
 800c646:	4862      	ldr	r0, [pc, #392]	@ (800c7d0 <tcp_slowtmr+0x278>)
 800c648:	f007 ff14 	bl	8014474 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c64e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c650:	2b00      	cmp	r3, #0
 800c652:	d106      	bne.n	800c662 <tcp_slowtmr+0x10a>
 800c654:	4b5c      	ldr	r3, [pc, #368]	@ (800c7c8 <tcp_slowtmr+0x270>)
 800c656:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800c65a:	4961      	ldr	r1, [pc, #388]	@ (800c7e0 <tcp_slowtmr+0x288>)
 800c65c:	485c      	ldr	r0, [pc, #368]	@ (800c7d0 <tcp_slowtmr+0x278>)
 800c65e:	f007 ff09 	bl	8014474 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c664:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c668:	2b0b      	cmp	r3, #11
 800c66a:	d905      	bls.n	800c678 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800c66c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c670:	3301      	adds	r3, #1
 800c672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c676:	e0ed      	b.n	800c854 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c67a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c67e:	3b01      	subs	r3, #1
 800c680:	4a58      	ldr	r2, [pc, #352]	@ (800c7e4 <tcp_slowtmr+0x28c>)
 800c682:	5cd3      	ldrb	r3, [r2, r3]
 800c684:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c688:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c68c:	7c7a      	ldrb	r2, [r7, #17]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d907      	bls.n	800c6a2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800c692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c694:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c698:	3301      	adds	r3, #1
 800c69a:	b2da      	uxtb	r2, r3
 800c69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c69e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800c6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6a4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c6a8:	7c7a      	ldrb	r2, [r7, #17]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	f200 80d2 	bhi.w	800c854 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800c6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d108      	bne.n	800c6d0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c6be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6c0:	f004 fc24 	bl	8010f0c <tcp_zero_window_probe>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d014      	beq.n	800c6f4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	623b      	str	r3, [r7, #32]
 800c6ce:	e011      	b.n	800c6f4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6da:	f003 fae9 	bl	800fcb0 <tcp_split_unsent_seg>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d107      	bne.n	800c6f4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800c6e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6e6:	f003 fd69 	bl	80101bc <tcp_output>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d101      	bne.n	800c6f4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800c6f4:	6a3b      	ldr	r3, [r7, #32]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f000 80ac 	beq.w	800c854 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800c6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6fe:	2200      	movs	r2, #0
 800c700:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c706:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c70a:	2b06      	cmp	r3, #6
 800c70c:	f200 80a2 	bhi.w	800c854 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800c710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c712:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c716:	3301      	adds	r3, #1
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c71c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800c720:	e098      	b.n	800c854 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c724:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c728:	2b00      	cmp	r3, #0
 800c72a:	db0f      	blt.n	800c74c <tcp_slowtmr+0x1f4>
 800c72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c72e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c732:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c736:	4293      	cmp	r3, r2
 800c738:	d008      	beq.n	800c74c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800c73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c73c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c740:	b29b      	uxth	r3, r3
 800c742:	3301      	adds	r3, #1
 800c744:	b29b      	uxth	r3, r3
 800c746:	b21a      	sxth	r2, r3
 800c748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c74a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800c74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c74e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800c752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c754:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800c758:	429a      	cmp	r2, r3
 800c75a:	db7b      	blt.n	800c854 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c75c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c75e:	f004 f821 	bl	80107a4 <tcp_rexmit_rto_prepare>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d007      	beq.n	800c778 <tcp_slowtmr+0x220>
 800c768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c76a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d171      	bne.n	800c854 <tcp_slowtmr+0x2fc>
 800c770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c774:	2b00      	cmp	r3, #0
 800c776:	d06d      	beq.n	800c854 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800c778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c77a:	7d1b      	ldrb	r3, [r3, #20]
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d03a      	beq.n	800c7f6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c782:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c786:	2b0c      	cmp	r3, #12
 800c788:	bf28      	it	cs
 800c78a:	230c      	movcs	r3, #12
 800c78c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c790:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c794:	10db      	asrs	r3, r3, #3
 800c796:	b21b      	sxth	r3, r3
 800c798:	461a      	mov	r2, r3
 800c79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c79c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c7a0:	4413      	add	r3, r2
 800c7a2:	7efa      	ldrb	r2, [r7, #27]
 800c7a4:	4910      	ldr	r1, [pc, #64]	@ (800c7e8 <tcp_slowtmr+0x290>)
 800c7a6:	5c8a      	ldrb	r2, [r1, r2]
 800c7a8:	4093      	lsls	r3, r2
 800c7aa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	dc1a      	bgt.n	800c7ec <tcp_slowtmr+0x294>
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	b21a      	sxth	r2, r3
 800c7ba:	e019      	b.n	800c7f0 <tcp_slowtmr+0x298>
 800c7bc:	2000b208 	.word	0x2000b208
 800c7c0:	2000b21e 	.word	0x2000b21e
 800c7c4:	2000b214 	.word	0x2000b214
 800c7c8:	08015d68 	.word	0x08015d68
 800c7cc:	080160ac 	.word	0x080160ac
 800c7d0:	08015dac 	.word	0x08015dac
 800c7d4:	080160d8 	.word	0x080160d8
 800c7d8:	08016104 	.word	0x08016104
 800c7dc:	08016134 	.word	0x08016134
 800c7e0:	08016168 	.word	0x08016168
 800c7e4:	08017d48 	.word	0x08017d48
 800c7e8:	08017d38 	.word	0x08017d38
 800c7ec:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800c7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c804:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c808:	4293      	cmp	r3, r2
 800c80a:	bf28      	it	cs
 800c80c:	4613      	movcs	r3, r2
 800c80e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c810:	8a7b      	ldrh	r3, [r7, #18]
 800c812:	085b      	lsrs	r3, r3, #1
 800c814:	b29a      	uxth	r2, r3
 800c816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c818:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c824:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c826:	005b      	lsls	r3, r3, #1
 800c828:	b29b      	uxth	r3, r3
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d206      	bcs.n	800c83c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c830:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c832:	005b      	lsls	r3, r3, #1
 800c834:	b29a      	uxth	r2, r3
 800c836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c838:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800c83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c83e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800c840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c842:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800c846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c848:	2200      	movs	r2, #0
 800c84a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800c84e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c850:	f004 f818 	bl	8010884 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800c854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c856:	7d1b      	ldrb	r3, [r3, #20]
 800c858:	2b06      	cmp	r3, #6
 800c85a:	d111      	bne.n	800c880 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800c85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c85e:	8b5b      	ldrh	r3, [r3, #26]
 800c860:	f003 0310 	and.w	r3, r3, #16
 800c864:	2b00      	cmp	r3, #0
 800c866:	d00b      	beq.n	800c880 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c868:	4b9d      	ldr	r3, [pc, #628]	@ (800cae0 <tcp_slowtmr+0x588>)
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c86e:	6a1b      	ldr	r3, [r3, #32]
 800c870:	1ad3      	subs	r3, r2, r3
 800c872:	2b28      	cmp	r3, #40	@ 0x28
 800c874:	d904      	bls.n	800c880 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800c876:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c87a:	3301      	adds	r3, #1
 800c87c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c882:	7a5b      	ldrb	r3, [r3, #9]
 800c884:	f003 0308 	and.w	r3, r3, #8
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d04c      	beq.n	800c926 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800c88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c88e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c890:	2b04      	cmp	r3, #4
 800c892:	d003      	beq.n	800c89c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800c894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c896:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c898:	2b07      	cmp	r3, #7
 800c89a:	d144      	bne.n	800c926 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c89c:	4b90      	ldr	r3, [pc, #576]	@ (800cae0 <tcp_slowtmr+0x588>)
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a2:	6a1b      	ldr	r3, [r3, #32]
 800c8a4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c8ac:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800c8b0:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800c8b4:	498b      	ldr	r1, [pc, #556]	@ (800cae4 <tcp_slowtmr+0x58c>)
 800c8b6:	fba1 1303 	umull	r1, r3, r1, r3
 800c8ba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d90a      	bls.n	800c8d6 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800c8c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800c8ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c8d4:	e027      	b.n	800c926 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c8d6:	4b82      	ldr	r3, [pc, #520]	@ (800cae0 <tcp_slowtmr+0x588>)
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8dc:	6a1b      	ldr	r3, [r3, #32]
 800c8de:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800c8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	4b7e      	ldr	r3, [pc, #504]	@ (800cae8 <tcp_slowtmr+0x590>)
 800c8f0:	fb00 f303 	mul.w	r3, r0, r3
 800c8f4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c8f6:	497b      	ldr	r1, [pc, #492]	@ (800cae4 <tcp_slowtmr+0x58c>)
 800c8f8:	fba1 1303 	umull	r1, r3, r1, r3
 800c8fc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d911      	bls.n	800c926 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800c902:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c904:	f004 fac2 	bl	8010e8c <tcp_keepalive>
 800c908:	4603      	mov	r3, r0
 800c90a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800c90e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800c912:	2b00      	cmp	r3, #0
 800c914:	d107      	bne.n	800c926 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800c916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c918:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800c91c:	3301      	adds	r3, #1
 800c91e:	b2da      	uxtb	r2, r3
 800c920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c922:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800c926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d011      	beq.n	800c952 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c92e:	4b6c      	ldr	r3, [pc, #432]	@ (800cae0 <tcp_slowtmr+0x588>)
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c934:	6a1b      	ldr	r3, [r3, #32]
 800c936:	1ad2      	subs	r2, r2, r3
 800c938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c93a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800c93e:	4619      	mov	r1, r3
 800c940:	460b      	mov	r3, r1
 800c942:	005b      	lsls	r3, r3, #1
 800c944:	440b      	add	r3, r1
 800c946:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c948:	429a      	cmp	r2, r3
 800c94a:	d302      	bcc.n	800c952 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800c94c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c94e:	f000 fddb 	bl	800d508 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800c952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c954:	7d1b      	ldrb	r3, [r3, #20]
 800c956:	2b03      	cmp	r3, #3
 800c958:	d10b      	bne.n	800c972 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c95a:	4b61      	ldr	r3, [pc, #388]	@ (800cae0 <tcp_slowtmr+0x588>)
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	1ad3      	subs	r3, r2, r3
 800c964:	2b28      	cmp	r3, #40	@ 0x28
 800c966:	d904      	bls.n	800c972 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800c968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c96c:	3301      	adds	r3, #1
 800c96e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800c972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c974:	7d1b      	ldrb	r3, [r3, #20]
 800c976:	2b09      	cmp	r3, #9
 800c978:	d10b      	bne.n	800c992 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c97a:	4b59      	ldr	r3, [pc, #356]	@ (800cae0 <tcp_slowtmr+0x588>)
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c980:	6a1b      	ldr	r3, [r3, #32]
 800c982:	1ad3      	subs	r3, r2, r3
 800c984:	2bf0      	cmp	r3, #240	@ 0xf0
 800c986:	d904      	bls.n	800c992 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800c988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c98c:	3301      	adds	r3, #1
 800c98e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800c992:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c996:	2b00      	cmp	r3, #0
 800c998:	d060      	beq.n	800ca5c <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800c99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c99c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9a0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800c9a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c9a4:	f000 fbfc 	bl	800d1a0 <tcp_pcb_purge>
      if (prev != NULL) {
 800c9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d010      	beq.n	800c9d0 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c9ae:	4b4f      	ldr	r3, [pc, #316]	@ (800caec <tcp_slowtmr+0x594>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d106      	bne.n	800c9c6 <tcp_slowtmr+0x46e>
 800c9b8:	4b4d      	ldr	r3, [pc, #308]	@ (800caf0 <tcp_slowtmr+0x598>)
 800c9ba:	f240 526d 	movw	r2, #1389	@ 0x56d
 800c9be:	494d      	ldr	r1, [pc, #308]	@ (800caf4 <tcp_slowtmr+0x59c>)
 800c9c0:	484d      	ldr	r0, [pc, #308]	@ (800caf8 <tcp_slowtmr+0x5a0>)
 800c9c2:	f007 fd57 	bl	8014474 <iprintf>
        prev->next = pcb->next;
 800c9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c8:	68da      	ldr	r2, [r3, #12]
 800c9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9cc:	60da      	str	r2, [r3, #12]
 800c9ce:	e00f      	b.n	800c9f0 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c9d0:	4b46      	ldr	r3, [pc, #280]	@ (800caec <tcp_slowtmr+0x594>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d006      	beq.n	800c9e8 <tcp_slowtmr+0x490>
 800c9da:	4b45      	ldr	r3, [pc, #276]	@ (800caf0 <tcp_slowtmr+0x598>)
 800c9dc:	f240 5271 	movw	r2, #1393	@ 0x571
 800c9e0:	4946      	ldr	r1, [pc, #280]	@ (800cafc <tcp_slowtmr+0x5a4>)
 800c9e2:	4845      	ldr	r0, [pc, #276]	@ (800caf8 <tcp_slowtmr+0x5a0>)
 800c9e4:	f007 fd46 	bl	8014474 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	4a3f      	ldr	r2, [pc, #252]	@ (800caec <tcp_slowtmr+0x594>)
 800c9ee:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800c9f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d013      	beq.n	800ca20 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9fa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9fe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ca00:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800ca02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca04:	3304      	adds	r3, #4
 800ca06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca08:	8ad2      	ldrh	r2, [r2, #22]
 800ca0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca0c:	8b09      	ldrh	r1, [r1, #24]
 800ca0e:	9102      	str	r1, [sp, #8]
 800ca10:	9201      	str	r2, [sp, #4]
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	462b      	mov	r3, r5
 800ca16:	4622      	mov	r2, r4
 800ca18:	4601      	mov	r1, r0
 800ca1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca1c:	f004 f982 	bl	8010d24 <tcp_rst>
      err_arg = pcb->callback_arg;
 800ca20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca22:	691b      	ldr	r3, [r3, #16]
 800ca24:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ca26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca28:	7d1b      	ldrb	r3, [r3, #20]
 800ca2a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ca2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ca30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ca36:	6838      	ldr	r0, [r7, #0]
 800ca38:	f7ff f9f0 	bl	800be1c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ca3c:	4b30      	ldr	r3, [pc, #192]	@ (800cb00 <tcp_slowtmr+0x5a8>)
 800ca3e:	2200      	movs	r2, #0
 800ca40:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d004      	beq.n	800ca52 <tcp_slowtmr+0x4fa>
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f06f 010c 	mvn.w	r1, #12
 800ca4e:	68b8      	ldr	r0, [r7, #8]
 800ca50:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ca52:	4b2b      	ldr	r3, [pc, #172]	@ (800cb00 <tcp_slowtmr+0x5a8>)
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d037      	beq.n	800caca <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800ca5a:	e590      	b.n	800c57e <tcp_slowtmr+0x26>
      prev = pcb;
 800ca5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ca60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800ca66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca68:	7f1b      	ldrb	r3, [r3, #28]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca70:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ca72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca74:	7f1a      	ldrb	r2, [r3, #28]
 800ca76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca78:	7f5b      	ldrb	r3, [r3, #29]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d325      	bcc.n	800caca <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800ca7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca80:	2200      	movs	r2, #0
 800ca82:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800ca84:	4b1e      	ldr	r3, [pc, #120]	@ (800cb00 <tcp_slowtmr+0x5a8>)
 800ca86:	2200      	movs	r2, #0
 800ca88:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ca8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d00b      	beq.n	800caac <tcp_slowtmr+0x554>
 800ca94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca9c:	6912      	ldr	r2, [r2, #16]
 800ca9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800caa0:	4610      	mov	r0, r2
 800caa2:	4798      	blx	r3
 800caa4:	4603      	mov	r3, r0
 800caa6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800caaa:	e002      	b.n	800cab2 <tcp_slowtmr+0x55a>
 800caac:	2300      	movs	r3, #0
 800caae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800cab2:	4b13      	ldr	r3, [pc, #76]	@ (800cb00 <tcp_slowtmr+0x5a8>)
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	f47f ad60 	bne.w	800c57c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cabc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d102      	bne.n	800caca <tcp_slowtmr+0x572>
          tcp_output(prev);
 800cac4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cac6:	f003 fb79 	bl	80101bc <tcp_output>
  while (pcb != NULL) {
 800caca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f47f ad5c 	bne.w	800c58a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cad2:	2300      	movs	r3, #0
 800cad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800cad6:	4b0b      	ldr	r3, [pc, #44]	@ (800cb04 <tcp_slowtmr+0x5ac>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cadc:	e067      	b.n	800cbae <tcp_slowtmr+0x656>
 800cade:	bf00      	nop
 800cae0:	2000b208 	.word	0x2000b208
 800cae4:	10624dd3 	.word	0x10624dd3
 800cae8:	000124f8 	.word	0x000124f8
 800caec:	2000b214 	.word	0x2000b214
 800caf0:	08015d68 	.word	0x08015d68
 800caf4:	080161a0 	.word	0x080161a0
 800caf8:	08015dac 	.word	0x08015dac
 800cafc:	080161cc 	.word	0x080161cc
 800cb00:	2000b21c 	.word	0x2000b21c
 800cb04:	2000b218 	.word	0x2000b218
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb0a:	7d1b      	ldrb	r3, [r3, #20]
 800cb0c:	2b0a      	cmp	r3, #10
 800cb0e:	d006      	beq.n	800cb1e <tcp_slowtmr+0x5c6>
 800cb10:	4b2b      	ldr	r3, [pc, #172]	@ (800cbc0 <tcp_slowtmr+0x668>)
 800cb12:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800cb16:	492b      	ldr	r1, [pc, #172]	@ (800cbc4 <tcp_slowtmr+0x66c>)
 800cb18:	482b      	ldr	r0, [pc, #172]	@ (800cbc8 <tcp_slowtmr+0x670>)
 800cb1a:	f007 fcab 	bl	8014474 <iprintf>
    pcb_remove = 0;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cb24:	4b29      	ldr	r3, [pc, #164]	@ (800cbcc <tcp_slowtmr+0x674>)
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb2a:	6a1b      	ldr	r3, [r3, #32]
 800cb2c:	1ad3      	subs	r3, r2, r3
 800cb2e:	2bf0      	cmp	r3, #240	@ 0xf0
 800cb30:	d904      	bls.n	800cb3c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800cb32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb36:	3301      	adds	r3, #1
 800cb38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cb3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d02f      	beq.n	800cba4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cb44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb46:	f000 fb2b 	bl	800d1a0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cb4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d010      	beq.n	800cb72 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cb50:	4b1f      	ldr	r3, [pc, #124]	@ (800cbd0 <tcp_slowtmr+0x678>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d106      	bne.n	800cb68 <tcp_slowtmr+0x610>
 800cb5a:	4b19      	ldr	r3, [pc, #100]	@ (800cbc0 <tcp_slowtmr+0x668>)
 800cb5c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800cb60:	491c      	ldr	r1, [pc, #112]	@ (800cbd4 <tcp_slowtmr+0x67c>)
 800cb62:	4819      	ldr	r0, [pc, #100]	@ (800cbc8 <tcp_slowtmr+0x670>)
 800cb64:	f007 fc86 	bl	8014474 <iprintf>
        prev->next = pcb->next;
 800cb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb6a:	68da      	ldr	r2, [r3, #12]
 800cb6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb6e:	60da      	str	r2, [r3, #12]
 800cb70:	e00f      	b.n	800cb92 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cb72:	4b17      	ldr	r3, [pc, #92]	@ (800cbd0 <tcp_slowtmr+0x678>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d006      	beq.n	800cb8a <tcp_slowtmr+0x632>
 800cb7c:	4b10      	ldr	r3, [pc, #64]	@ (800cbc0 <tcp_slowtmr+0x668>)
 800cb7e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800cb82:	4915      	ldr	r1, [pc, #84]	@ (800cbd8 <tcp_slowtmr+0x680>)
 800cb84:	4810      	ldr	r0, [pc, #64]	@ (800cbc8 <tcp_slowtmr+0x670>)
 800cb86:	f007 fc75 	bl	8014474 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cb8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	4a10      	ldr	r2, [pc, #64]	@ (800cbd0 <tcp_slowtmr+0x678>)
 800cb90:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cb92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb94:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cb96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800cb9c:	69f8      	ldr	r0, [r7, #28]
 800cb9e:	f7ff f93d 	bl	800be1c <tcp_free>
 800cba2:	e004      	b.n	800cbae <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800cba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cbae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1a9      	bne.n	800cb08 <tcp_slowtmr+0x5b0>
    }
  }
}
 800cbb4:	bf00      	nop
 800cbb6:	bf00      	nop
 800cbb8:	3730      	adds	r7, #48	@ 0x30
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bdb0      	pop	{r4, r5, r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	08015d68 	.word	0x08015d68
 800cbc4:	080161f8 	.word	0x080161f8
 800cbc8:	08015dac 	.word	0x08015dac
 800cbcc:	2000b208 	.word	0x2000b208
 800cbd0:	2000b218 	.word	0x2000b218
 800cbd4:	08016228 	.word	0x08016228
 800cbd8:	08016250 	.word	0x08016250

0800cbdc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cbe2:	4b2d      	ldr	r3, [pc, #180]	@ (800cc98 <tcp_fasttmr+0xbc>)
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	4b2b      	ldr	r3, [pc, #172]	@ (800cc98 <tcp_fasttmr+0xbc>)
 800cbec:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cbee:	4b2b      	ldr	r3, [pc, #172]	@ (800cc9c <tcp_fasttmr+0xc0>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cbf4:	e048      	b.n	800cc88 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	7f9a      	ldrb	r2, [r3, #30]
 800cbfa:	4b27      	ldr	r3, [pc, #156]	@ (800cc98 <tcp_fasttmr+0xbc>)
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d03f      	beq.n	800cc82 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cc02:	4b25      	ldr	r3, [pc, #148]	@ (800cc98 <tcp_fasttmr+0xbc>)
 800cc04:	781a      	ldrb	r2, [r3, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	8b5b      	ldrh	r3, [r3, #26]
 800cc0e:	f003 0301 	and.w	r3, r3, #1
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d010      	beq.n	800cc38 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	8b5b      	ldrh	r3, [r3, #26]
 800cc1a:	f043 0302 	orr.w	r3, r3, #2
 800cc1e:	b29a      	uxth	r2, r3
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f003 fac9 	bl	80101bc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	8b5b      	ldrh	r3, [r3, #26]
 800cc2e:	f023 0303 	bic.w	r3, r3, #3
 800cc32:	b29a      	uxth	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	8b5b      	ldrh	r3, [r3, #26]
 800cc3c:	f003 0308 	and.w	r3, r3, #8
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d009      	beq.n	800cc58 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	8b5b      	ldrh	r3, [r3, #26]
 800cc48:	f023 0308 	bic.w	r3, r3, #8
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7ff fa76 	bl	800c144 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00a      	beq.n	800cc7c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cc66:	4b0e      	ldr	r3, [pc, #56]	@ (800cca0 <tcp_fasttmr+0xc4>)
 800cc68:	2200      	movs	r2, #0
 800cc6a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 f819 	bl	800cca4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cc72:	4b0b      	ldr	r3, [pc, #44]	@ (800cca0 <tcp_fasttmr+0xc4>)
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d000      	beq.n	800cc7c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cc7a:	e7b8      	b.n	800cbee <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	607b      	str	r3, [r7, #4]
 800cc80:	e002      	b.n	800cc88 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	68db      	ldr	r3, [r3, #12]
 800cc86:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d1b3      	bne.n	800cbf6 <tcp_fasttmr+0x1a>
    }
  }
}
 800cc8e:	bf00      	nop
 800cc90:	bf00      	nop
 800cc92:	3708      	adds	r7, #8
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	2000b21e 	.word	0x2000b21e
 800cc9c:	2000b214 	.word	0x2000b214
 800cca0:	2000b21c 	.word	0x2000b21c

0800cca4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cca4:	b590      	push	{r4, r7, lr}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d109      	bne.n	800ccc6 <tcp_process_refused_data+0x22>
 800ccb2:	4b37      	ldr	r3, [pc, #220]	@ (800cd90 <tcp_process_refused_data+0xec>)
 800ccb4:	f240 6209 	movw	r2, #1545	@ 0x609
 800ccb8:	4936      	ldr	r1, [pc, #216]	@ (800cd94 <tcp_process_refused_data+0xf0>)
 800ccba:	4837      	ldr	r0, [pc, #220]	@ (800cd98 <tcp_process_refused_data+0xf4>)
 800ccbc:	f007 fbda 	bl	8014474 <iprintf>
 800ccc0:	f06f 030f 	mvn.w	r3, #15
 800ccc4:	e060      	b.n	800cd88 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ccca:	7b5b      	ldrb	r3, [r3, #13]
 800cccc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ccd2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00b      	beq.n	800ccfc <tcp_process_refused_data+0x58>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6918      	ldr	r0, [r3, #16]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	6879      	ldr	r1, [r7, #4]
 800ccf4:	47a0      	blx	r4
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	73fb      	strb	r3, [r7, #15]
 800ccfa:	e007      	b.n	800cd0c <tcp_process_refused_data+0x68>
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	6879      	ldr	r1, [r7, #4]
 800cd02:	2000      	movs	r0, #0
 800cd04:	f000 f8a4 	bl	800ce50 <tcp_recv_null>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cd0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d12a      	bne.n	800cd6a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cd14:	7bbb      	ldrb	r3, [r7, #14]
 800cd16:	f003 0320 	and.w	r3, r3, #32
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d033      	beq.n	800cd86 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd22:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cd26:	d005      	beq.n	800cd34 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d00b      	beq.n	800cd56 <tcp_process_refused_data+0xb2>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6918      	ldr	r0, [r3, #16]
 800cd48:	2300      	movs	r3, #0
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	6879      	ldr	r1, [r7, #4]
 800cd4e:	47a0      	blx	r4
 800cd50:	4603      	mov	r3, r0
 800cd52:	73fb      	strb	r3, [r7, #15]
 800cd54:	e001      	b.n	800cd5a <tcp_process_refused_data+0xb6>
 800cd56:	2300      	movs	r3, #0
 800cd58:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cd5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd5e:	f113 0f0d 	cmn.w	r3, #13
 800cd62:	d110      	bne.n	800cd86 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cd64:	f06f 030c 	mvn.w	r3, #12
 800cd68:	e00e      	b.n	800cd88 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cd6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd6e:	f113 0f0d 	cmn.w	r3, #13
 800cd72:	d102      	bne.n	800cd7a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cd74:	f06f 030c 	mvn.w	r3, #12
 800cd78:	e006      	b.n	800cd88 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	68ba      	ldr	r2, [r7, #8]
 800cd7e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800cd80:	f06f 0304 	mvn.w	r3, #4
 800cd84:	e000      	b.n	800cd88 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3714      	adds	r7, #20
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd90      	pop	{r4, r7, pc}
 800cd90:	08015d68 	.word	0x08015d68
 800cd94:	08016278 	.word	0x08016278
 800cd98:	08015dac 	.word	0x08015dac

0800cd9c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cda4:	e007      	b.n	800cdb6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 f80a 	bl	800cdc6 <tcp_seg_free>
    seg = next;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1f4      	bne.n	800cda6 <tcp_segs_free+0xa>
  }
}
 800cdbc:	bf00      	nop
 800cdbe:	bf00      	nop
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b082      	sub	sp, #8
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00c      	beq.n	800cdee <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d004      	beq.n	800cde6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fe fcd9 	bl	800b798 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cde6:	6879      	ldr	r1, [r7, #4]
 800cde8:	2003      	movs	r0, #3
 800cdea:	f7fd fe5f 	bl	800aaac <memp_free>
  }
}
 800cdee:	bf00      	nop
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
	...

0800cdf8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b084      	sub	sp, #16
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d106      	bne.n	800ce14 <tcp_seg_copy+0x1c>
 800ce06:	4b0f      	ldr	r3, [pc, #60]	@ (800ce44 <tcp_seg_copy+0x4c>)
 800ce08:	f240 6282 	movw	r2, #1666	@ 0x682
 800ce0c:	490e      	ldr	r1, [pc, #56]	@ (800ce48 <tcp_seg_copy+0x50>)
 800ce0e:	480f      	ldr	r0, [pc, #60]	@ (800ce4c <tcp_seg_copy+0x54>)
 800ce10:	f007 fb30 	bl	8014474 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ce14:	2003      	movs	r0, #3
 800ce16:	f7fd fdd9 	bl	800a9cc <memp_malloc>
 800ce1a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d101      	bne.n	800ce26 <tcp_seg_copy+0x2e>
    return NULL;
 800ce22:	2300      	movs	r3, #0
 800ce24:	e00a      	b.n	800ce3c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ce26:	2210      	movs	r2, #16
 800ce28:	6879      	ldr	r1, [r7, #4]
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	f007 fbfd 	bl	801462a <memcpy>
  pbuf_ref(cseg->p);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7fe fd4f 	bl	800b8d8 <pbuf_ref>
  return cseg;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3710      	adds	r7, #16
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	08015d68 	.word	0x08015d68
 800ce48:	080162bc 	.word	0x080162bc
 800ce4c:	08015dac 	.word	0x08015dac

0800ce50 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
 800ce5c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d109      	bne.n	800ce78 <tcp_recv_null+0x28>
 800ce64:	4b12      	ldr	r3, [pc, #72]	@ (800ceb0 <tcp_recv_null+0x60>)
 800ce66:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ce6a:	4912      	ldr	r1, [pc, #72]	@ (800ceb4 <tcp_recv_null+0x64>)
 800ce6c:	4812      	ldr	r0, [pc, #72]	@ (800ceb8 <tcp_recv_null+0x68>)
 800ce6e:	f007 fb01 	bl	8014474 <iprintf>
 800ce72:	f06f 030f 	mvn.w	r3, #15
 800ce76:	e016      	b.n	800cea6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d009      	beq.n	800ce92 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	891b      	ldrh	r3, [r3, #8]
 800ce82:	4619      	mov	r1, r3
 800ce84:	68b8      	ldr	r0, [r7, #8]
 800ce86:	f7ff fb17 	bl	800c4b8 <tcp_recved>
    pbuf_free(p);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7fe fc84 	bl	800b798 <pbuf_free>
 800ce90:	e008      	b.n	800cea4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ce92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d104      	bne.n	800cea4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ce9a:	68b8      	ldr	r0, [r7, #8]
 800ce9c:	f7ff f9bc 	bl	800c218 <tcp_close>
 800cea0:	4603      	mov	r3, r0
 800cea2:	e000      	b.n	800cea6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	08015d68 	.word	0x08015d68
 800ceb4:	080162d8 	.word	0x080162d8
 800ceb8:	08015dac 	.word	0x08015dac

0800cebc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	4603      	mov	r3, r0
 800cec4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	db01      	blt.n	800ced2 <tcp_kill_prio+0x16>
 800cece:	79fb      	ldrb	r3, [r7, #7]
 800ced0:	e000      	b.n	800ced4 <tcp_kill_prio+0x18>
 800ced2:	237f      	movs	r3, #127	@ 0x7f
 800ced4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ced6:	7afb      	ldrb	r3, [r7, #11]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d034      	beq.n	800cf46 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cedc:	7afb      	ldrb	r3, [r7, #11]
 800cede:	3b01      	subs	r3, #1
 800cee0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cee2:	2300      	movs	r3, #0
 800cee4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cee6:	2300      	movs	r3, #0
 800cee8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ceea:	4b19      	ldr	r3, [pc, #100]	@ (800cf50 <tcp_kill_prio+0x94>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	617b      	str	r3, [r7, #20]
 800cef0:	e01f      	b.n	800cf32 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	7d5b      	ldrb	r3, [r3, #21]
 800cef6:	7afa      	ldrb	r2, [r7, #11]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d80c      	bhi.n	800cf16 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cf00:	7afa      	ldrb	r2, [r7, #11]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d112      	bne.n	800cf2c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cf06:	4b13      	ldr	r3, [pc, #76]	@ (800cf54 <tcp_kill_prio+0x98>)
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	6a1b      	ldr	r3, [r3, #32]
 800cf0e:	1ad3      	subs	r3, r2, r3
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d80a      	bhi.n	800cf2c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cf16:	4b0f      	ldr	r3, [pc, #60]	@ (800cf54 <tcp_kill_prio+0x98>)
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	6a1b      	ldr	r3, [r3, #32]
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	7d5b      	ldrb	r3, [r3, #21]
 800cf2a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	617b      	str	r3, [r7, #20]
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1dc      	bne.n	800cef2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d004      	beq.n	800cf48 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cf3e:	6938      	ldr	r0, [r7, #16]
 800cf40:	f7ff fa54 	bl	800c3ec <tcp_abort>
 800cf44:	e000      	b.n	800cf48 <tcp_kill_prio+0x8c>
    return;
 800cf46:	bf00      	nop
  }
}
 800cf48:	3718      	adds	r7, #24
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	2000b214 	.word	0x2000b214
 800cf54:	2000b208 	.word	0x2000b208

0800cf58 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	4603      	mov	r3, r0
 800cf60:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cf62:	79fb      	ldrb	r3, [r7, #7]
 800cf64:	2b08      	cmp	r3, #8
 800cf66:	d009      	beq.n	800cf7c <tcp_kill_state+0x24>
 800cf68:	79fb      	ldrb	r3, [r7, #7]
 800cf6a:	2b09      	cmp	r3, #9
 800cf6c:	d006      	beq.n	800cf7c <tcp_kill_state+0x24>
 800cf6e:	4b1a      	ldr	r3, [pc, #104]	@ (800cfd8 <tcp_kill_state+0x80>)
 800cf70:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800cf74:	4919      	ldr	r1, [pc, #100]	@ (800cfdc <tcp_kill_state+0x84>)
 800cf76:	481a      	ldr	r0, [pc, #104]	@ (800cfe0 <tcp_kill_state+0x88>)
 800cf78:	f007 fa7c 	bl	8014474 <iprintf>

  inactivity = 0;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cf80:	2300      	movs	r3, #0
 800cf82:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf84:	4b17      	ldr	r3, [pc, #92]	@ (800cfe4 <tcp_kill_state+0x8c>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	617b      	str	r3, [r7, #20]
 800cf8a:	e017      	b.n	800cfbc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	7d1b      	ldrb	r3, [r3, #20]
 800cf90:	79fa      	ldrb	r2, [r7, #7]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d10f      	bne.n	800cfb6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cf96:	4b14      	ldr	r3, [pc, #80]	@ (800cfe8 <tcp_kill_state+0x90>)
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	6a1b      	ldr	r3, [r3, #32]
 800cf9e:	1ad3      	subs	r3, r2, r3
 800cfa0:	68fa      	ldr	r2, [r7, #12]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d807      	bhi.n	800cfb6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cfa6:	4b10      	ldr	r3, [pc, #64]	@ (800cfe8 <tcp_kill_state+0x90>)
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	6a1b      	ldr	r3, [r3, #32]
 800cfae:	1ad3      	subs	r3, r2, r3
 800cfb0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	617b      	str	r3, [r7, #20]
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d1e4      	bne.n	800cf8c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d003      	beq.n	800cfd0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cfc8:	2100      	movs	r1, #0
 800cfca:	6938      	ldr	r0, [r7, #16]
 800cfcc:	f7ff f950 	bl	800c270 <tcp_abandon>
  }
}
 800cfd0:	bf00      	nop
 800cfd2:	3718      	adds	r7, #24
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	08015d68 	.word	0x08015d68
 800cfdc:	080162f4 	.word	0x080162f4
 800cfe0:	08015dac 	.word	0x08015dac
 800cfe4:	2000b214 	.word	0x2000b214
 800cfe8:	2000b208 	.word	0x2000b208

0800cfec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cff6:	2300      	movs	r3, #0
 800cff8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cffa:	4b12      	ldr	r3, [pc, #72]	@ (800d044 <tcp_kill_timewait+0x58>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	60fb      	str	r3, [r7, #12]
 800d000:	e012      	b.n	800d028 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d002:	4b11      	ldr	r3, [pc, #68]	@ (800d048 <tcp_kill_timewait+0x5c>)
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	6a1b      	ldr	r3, [r3, #32]
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	429a      	cmp	r2, r3
 800d010:	d807      	bhi.n	800d022 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d012:	4b0d      	ldr	r3, [pc, #52]	@ (800d048 <tcp_kill_timewait+0x5c>)
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6a1b      	ldr	r3, [r3, #32]
 800d01a:	1ad3      	subs	r3, r2, r3
 800d01c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	68db      	ldr	r3, [r3, #12]
 800d026:	60fb      	str	r3, [r7, #12]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d1e9      	bne.n	800d002 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d002      	beq.n	800d03a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d034:	68b8      	ldr	r0, [r7, #8]
 800d036:	f7ff f9d9 	bl	800c3ec <tcp_abort>
  }
}
 800d03a:	bf00      	nop
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	2000b218 	.word	0x2000b218
 800d048:	2000b208 	.word	0x2000b208

0800d04c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d052:	4b10      	ldr	r3, [pc, #64]	@ (800d094 <tcp_handle_closepend+0x48>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d058:	e014      	b.n	800d084 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	8b5b      	ldrh	r3, [r3, #26]
 800d064:	f003 0308 	and.w	r3, r3, #8
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d009      	beq.n	800d080 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	8b5b      	ldrh	r3, [r3, #26]
 800d070:	f023 0308 	bic.w	r3, r3, #8
 800d074:	b29a      	uxth	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7ff f862 	bl	800c144 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1e7      	bne.n	800d05a <tcp_handle_closepend+0xe>
  }
}
 800d08a:	bf00      	nop
 800d08c:	bf00      	nop
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	2000b214 	.word	0x2000b214

0800d098 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	4603      	mov	r3, r0
 800d0a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d0a2:	2001      	movs	r0, #1
 800d0a4:	f7fd fc92 	bl	800a9cc <memp_malloc>
 800d0a8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d126      	bne.n	800d0fe <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d0b0:	f7ff ffcc 	bl	800d04c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d0b4:	f7ff ff9a 	bl	800cfec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d0b8:	2001      	movs	r0, #1
 800d0ba:	f7fd fc87 	bl	800a9cc <memp_malloc>
 800d0be:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d11b      	bne.n	800d0fe <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d0c6:	2009      	movs	r0, #9
 800d0c8:	f7ff ff46 	bl	800cf58 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d0cc:	2001      	movs	r0, #1
 800d0ce:	f7fd fc7d 	bl	800a9cc <memp_malloc>
 800d0d2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d111      	bne.n	800d0fe <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d0da:	2008      	movs	r0, #8
 800d0dc:	f7ff ff3c 	bl	800cf58 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d0e0:	2001      	movs	r0, #1
 800d0e2:	f7fd fc73 	bl	800a9cc <memp_malloc>
 800d0e6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d107      	bne.n	800d0fe <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d0ee:	79fb      	ldrb	r3, [r7, #7]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7ff fee3 	bl	800cebc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d0f6:	2001      	movs	r0, #1
 800d0f8:	f7fd fc68 	bl	800a9cc <memp_malloc>
 800d0fc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d03f      	beq.n	800d184 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d104:	229c      	movs	r2, #156	@ 0x9c
 800d106:	2100      	movs	r1, #0
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f007 fa18 	bl	801453e <memset>
    pcb->prio = prio;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	79fa      	ldrb	r2, [r7, #7]
 800d112:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d11a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d124:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	22ff      	movs	r2, #255	@ 0xff
 800d132:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d13a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2206      	movs	r2, #6
 800d140:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2206      	movs	r2, #6
 800d148:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d150:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2201      	movs	r2, #1
 800d156:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800d15a:	4b0d      	ldr	r3, [pc, #52]	@ (800d190 <tcp_alloc+0xf8>)
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d162:	4b0c      	ldr	r3, [pc, #48]	@ (800d194 <tcp_alloc+0xfc>)
 800d164:	781a      	ldrb	r2, [r3, #0]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d170:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	4a08      	ldr	r2, [pc, #32]	@ (800d198 <tcp_alloc+0x100>)
 800d178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	4a07      	ldr	r2, [pc, #28]	@ (800d19c <tcp_alloc+0x104>)
 800d180:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d184:	68fb      	ldr	r3, [r7, #12]
}
 800d186:	4618      	mov	r0, r3
 800d188:	3710      	adds	r7, #16
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	2000b208 	.word	0x2000b208
 800d194:	2000b21e 	.word	0x2000b21e
 800d198:	0800ce51 	.word	0x0800ce51
 800d19c:	006ddd00 	.word	0x006ddd00

0800d1a0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d107      	bne.n	800d1be <tcp_pcb_purge+0x1e>
 800d1ae:	4b21      	ldr	r3, [pc, #132]	@ (800d234 <tcp_pcb_purge+0x94>)
 800d1b0:	f640 0251 	movw	r2, #2129	@ 0x851
 800d1b4:	4920      	ldr	r1, [pc, #128]	@ (800d238 <tcp_pcb_purge+0x98>)
 800d1b6:	4821      	ldr	r0, [pc, #132]	@ (800d23c <tcp_pcb_purge+0x9c>)
 800d1b8:	f007 f95c 	bl	8014474 <iprintf>
 800d1bc:	e037      	b.n	800d22e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	7d1b      	ldrb	r3, [r3, #20]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d033      	beq.n	800d22e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d1ca:	2b0a      	cmp	r3, #10
 800d1cc:	d02f      	beq.n	800d22e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d02b      	beq.n	800d22e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d007      	beq.n	800d1ee <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7fe fad8 	bl	800b798 <pbuf_free>
      pcb->refused_data = NULL;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d002      	beq.n	800d1fc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 f986 	bl	800d508 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d202:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d208:	4618      	mov	r0, r3
 800d20a:	f7ff fdc7 	bl	800cd9c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d212:	4618      	mov	r0, r3
 800d214:	f7ff fdc2 	bl	800cd9c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	08015d68 	.word	0x08015d68
 800d238:	080163b4 	.word	0x080163b4
 800d23c:	08015dac 	.word	0x08015dac

0800d240 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d106      	bne.n	800d25e <tcp_pcb_remove+0x1e>
 800d250:	4b3e      	ldr	r3, [pc, #248]	@ (800d34c <tcp_pcb_remove+0x10c>)
 800d252:	f640 0283 	movw	r2, #2179	@ 0x883
 800d256:	493e      	ldr	r1, [pc, #248]	@ (800d350 <tcp_pcb_remove+0x110>)
 800d258:	483e      	ldr	r0, [pc, #248]	@ (800d354 <tcp_pcb_remove+0x114>)
 800d25a:	f007 f90b 	bl	8014474 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d106      	bne.n	800d272 <tcp_pcb_remove+0x32>
 800d264:	4b39      	ldr	r3, [pc, #228]	@ (800d34c <tcp_pcb_remove+0x10c>)
 800d266:	f640 0284 	movw	r2, #2180	@ 0x884
 800d26a:	493b      	ldr	r1, [pc, #236]	@ (800d358 <tcp_pcb_remove+0x118>)
 800d26c:	4839      	ldr	r0, [pc, #228]	@ (800d354 <tcp_pcb_remove+0x114>)
 800d26e:	f007 f901 	bl	8014474 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	683a      	ldr	r2, [r7, #0]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d105      	bne.n	800d288 <tcp_pcb_remove+0x48>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	68da      	ldr	r2, [r3, #12]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	601a      	str	r2, [r3, #0]
 800d286:	e013      	b.n	800d2b0 <tcp_pcb_remove+0x70>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	60fb      	str	r3, [r7, #12]
 800d28e:	e00c      	b.n	800d2aa <tcp_pcb_remove+0x6a>
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	683a      	ldr	r2, [r7, #0]
 800d296:	429a      	cmp	r2, r3
 800d298:	d104      	bne.n	800d2a4 <tcp_pcb_remove+0x64>
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	68da      	ldr	r2, [r3, #12]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	60da      	str	r2, [r3, #12]
 800d2a2:	e005      	b.n	800d2b0 <tcp_pcb_remove+0x70>
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	60fb      	str	r3, [r7, #12]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d1ef      	bne.n	800d290 <tcp_pcb_remove+0x50>
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d2b6:	6838      	ldr	r0, [r7, #0]
 800d2b8:	f7ff ff72 	bl	800d1a0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	7d1b      	ldrb	r3, [r3, #20]
 800d2c0:	2b0a      	cmp	r3, #10
 800d2c2:	d013      	beq.n	800d2ec <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d00f      	beq.n	800d2ec <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	8b5b      	ldrh	r3, [r3, #26]
 800d2d0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d009      	beq.n	800d2ec <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	8b5b      	ldrh	r3, [r3, #26]
 800d2dc:	f043 0302 	orr.w	r3, r3, #2
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d2e6:	6838      	ldr	r0, [r7, #0]
 800d2e8:	f002 ff68 	bl	80101bc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	7d1b      	ldrb	r3, [r3, #20]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d020      	beq.n	800d336 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d006      	beq.n	800d30a <tcp_pcb_remove+0xca>
 800d2fc:	4b13      	ldr	r3, [pc, #76]	@ (800d34c <tcp_pcb_remove+0x10c>)
 800d2fe:	f640 0293 	movw	r2, #2195	@ 0x893
 800d302:	4916      	ldr	r1, [pc, #88]	@ (800d35c <tcp_pcb_remove+0x11c>)
 800d304:	4813      	ldr	r0, [pc, #76]	@ (800d354 <tcp_pcb_remove+0x114>)
 800d306:	f007 f8b5 	bl	8014474 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d006      	beq.n	800d320 <tcp_pcb_remove+0xe0>
 800d312:	4b0e      	ldr	r3, [pc, #56]	@ (800d34c <tcp_pcb_remove+0x10c>)
 800d314:	f640 0294 	movw	r2, #2196	@ 0x894
 800d318:	4911      	ldr	r1, [pc, #68]	@ (800d360 <tcp_pcb_remove+0x120>)
 800d31a:	480e      	ldr	r0, [pc, #56]	@ (800d354 <tcp_pcb_remove+0x114>)
 800d31c:	f007 f8aa 	bl	8014474 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d324:	2b00      	cmp	r3, #0
 800d326:	d006      	beq.n	800d336 <tcp_pcb_remove+0xf6>
 800d328:	4b08      	ldr	r3, [pc, #32]	@ (800d34c <tcp_pcb_remove+0x10c>)
 800d32a:	f640 0296 	movw	r2, #2198	@ 0x896
 800d32e:	490d      	ldr	r1, [pc, #52]	@ (800d364 <tcp_pcb_remove+0x124>)
 800d330:	4808      	ldr	r0, [pc, #32]	@ (800d354 <tcp_pcb_remove+0x114>)
 800d332:	f007 f89f 	bl	8014474 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	2200      	movs	r2, #0
 800d33a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	2200      	movs	r2, #0
 800d340:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d342:	bf00      	nop
 800d344:	3710      	adds	r7, #16
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	08015d68 	.word	0x08015d68
 800d350:	080163d0 	.word	0x080163d0
 800d354:	08015dac 	.word	0x08015dac
 800d358:	080163ec 	.word	0x080163ec
 800d35c:	0801640c 	.word	0x0801640c
 800d360:	08016424 	.word	0x08016424
 800d364:	08016440 	.word	0x08016440

0800d368 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d106      	bne.n	800d384 <tcp_next_iss+0x1c>
 800d376:	4b0a      	ldr	r3, [pc, #40]	@ (800d3a0 <tcp_next_iss+0x38>)
 800d378:	f640 02af 	movw	r2, #2223	@ 0x8af
 800d37c:	4909      	ldr	r1, [pc, #36]	@ (800d3a4 <tcp_next_iss+0x3c>)
 800d37e:	480a      	ldr	r0, [pc, #40]	@ (800d3a8 <tcp_next_iss+0x40>)
 800d380:	f007 f878 	bl	8014474 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d384:	4b09      	ldr	r3, [pc, #36]	@ (800d3ac <tcp_next_iss+0x44>)
 800d386:	681a      	ldr	r2, [r3, #0]
 800d388:	4b09      	ldr	r3, [pc, #36]	@ (800d3b0 <tcp_next_iss+0x48>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4413      	add	r3, r2
 800d38e:	4a07      	ldr	r2, [pc, #28]	@ (800d3ac <tcp_next_iss+0x44>)
 800d390:	6013      	str	r3, [r2, #0]
  return iss;
 800d392:	4b06      	ldr	r3, [pc, #24]	@ (800d3ac <tcp_next_iss+0x44>)
 800d394:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d396:	4618      	mov	r0, r3
 800d398:	3708      	adds	r7, #8
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	08015d68 	.word	0x08015d68
 800d3a4:	08016458 	.word	0x08016458
 800d3a8:	08015dac 	.word	0x08015dac
 800d3ac:	200000d8 	.word	0x200000d8
 800d3b0:	2000b208 	.word	0x2000b208

0800d3b4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b086      	sub	sp, #24
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
 800d3c0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d106      	bne.n	800d3d6 <tcp_eff_send_mss_netif+0x22>
 800d3c8:	4b14      	ldr	r3, [pc, #80]	@ (800d41c <tcp_eff_send_mss_netif+0x68>)
 800d3ca:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800d3ce:	4914      	ldr	r1, [pc, #80]	@ (800d420 <tcp_eff_send_mss_netif+0x6c>)
 800d3d0:	4814      	ldr	r0, [pc, #80]	@ (800d424 <tcp_eff_send_mss_netif+0x70>)
 800d3d2:	f007 f84f 	bl	8014474 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d101      	bne.n	800d3e0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d3dc:	89fb      	ldrh	r3, [r7, #14]
 800d3de:	e019      	b.n	800d414 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d3e4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d3e6:	8afb      	ldrh	r3, [r7, #22]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d012      	beq.n	800d412 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d3ec:	2328      	movs	r3, #40	@ 0x28
 800d3ee:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d3f0:	8afa      	ldrh	r2, [r7, #22]
 800d3f2:	8abb      	ldrh	r3, [r7, #20]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d904      	bls.n	800d402 <tcp_eff_send_mss_netif+0x4e>
 800d3f8:	8afa      	ldrh	r2, [r7, #22]
 800d3fa:	8abb      	ldrh	r3, [r7, #20]
 800d3fc:	1ad3      	subs	r3, r2, r3
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	e000      	b.n	800d404 <tcp_eff_send_mss_netif+0x50>
 800d402:	2300      	movs	r3, #0
 800d404:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d406:	8a7a      	ldrh	r2, [r7, #18]
 800d408:	89fb      	ldrh	r3, [r7, #14]
 800d40a:	4293      	cmp	r3, r2
 800d40c:	bf28      	it	cs
 800d40e:	4613      	movcs	r3, r2
 800d410:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d412:	89fb      	ldrh	r3, [r7, #14]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3718      	adds	r7, #24
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	08015d68 	.word	0x08015d68
 800d420:	08016474 	.word	0x08016474
 800d424:	08015dac 	.word	0x08015dac

0800d428 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d119      	bne.n	800d470 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d43c:	4b10      	ldr	r3, [pc, #64]	@ (800d480 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d43e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800d442:	4910      	ldr	r1, [pc, #64]	@ (800d484 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d444:	4810      	ldr	r0, [pc, #64]	@ (800d488 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d446:	f007 f815 	bl	8014474 <iprintf>

  while (pcb != NULL) {
 800d44a:	e011      	b.n	800d470 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	429a      	cmp	r2, r3
 800d456:	d108      	bne.n	800d46a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d45e:	68f8      	ldr	r0, [r7, #12]
 800d460:	f7fe ffc4 	bl	800c3ec <tcp_abort>
      pcb = next;
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	60fb      	str	r3, [r7, #12]
 800d468:	e002      	b.n	800d470 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1ea      	bne.n	800d44c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d476:	bf00      	nop
 800d478:	bf00      	nop
 800d47a:	3710      	adds	r7, #16
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	08015d68 	.word	0x08015d68
 800d484:	0801649c 	.word	0x0801649c
 800d488:	08015dac 	.word	0x08015dac

0800d48c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d02a      	beq.n	800d4f2 <tcp_netif_ip_addr_changed+0x66>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d026      	beq.n	800d4f2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d4a4:	4b15      	ldr	r3, [pc, #84]	@ (800d4fc <tcp_netif_ip_addr_changed+0x70>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7ff ffbc 	bl	800d428 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d4b0:	4b13      	ldr	r3, [pc, #76]	@ (800d500 <tcp_netif_ip_addr_changed+0x74>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f7ff ffb6 	bl	800d428 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d017      	beq.n	800d4f2 <tcp_netif_ip_addr_changed+0x66>
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d013      	beq.n	800d4f2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d4ca:	4b0e      	ldr	r3, [pc, #56]	@ (800d504 <tcp_netif_ip_addr_changed+0x78>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	60fb      	str	r3, [r7, #12]
 800d4d0:	e00c      	b.n	800d4ec <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d103      	bne.n	800d4e6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	60fb      	str	r3, [r7, #12]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1ef      	bne.n	800d4d2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d4f2:	bf00      	nop
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	2000b214 	.word	0x2000b214
 800d500:	2000b20c 	.word	0x2000b20c
 800d504:	2000b210 	.word	0x2000b210

0800d508 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d514:	2b00      	cmp	r3, #0
 800d516:	d007      	beq.n	800d528 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7ff fc3d 	bl	800cd9c <tcp_segs_free>
    pcb->ooseq = NULL;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d528:	bf00      	nop
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d530:	b590      	push	{r4, r7, lr}
 800d532:	b08d      	sub	sp, #52	@ 0x34
 800d534:	af04      	add	r7, sp, #16
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d105      	bne.n	800d54c <tcp_input+0x1c>
 800d540:	4b9b      	ldr	r3, [pc, #620]	@ (800d7b0 <tcp_input+0x280>)
 800d542:	2283      	movs	r2, #131	@ 0x83
 800d544:	499b      	ldr	r1, [pc, #620]	@ (800d7b4 <tcp_input+0x284>)
 800d546:	489c      	ldr	r0, [pc, #624]	@ (800d7b8 <tcp_input+0x288>)
 800d548:	f006 ff94 	bl	8014474 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	4a9a      	ldr	r2, [pc, #616]	@ (800d7bc <tcp_input+0x28c>)
 800d552:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	895b      	ldrh	r3, [r3, #10]
 800d558:	2b13      	cmp	r3, #19
 800d55a:	f240 83d1 	bls.w	800dd00 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d55e:	4b98      	ldr	r3, [pc, #608]	@ (800d7c0 <tcp_input+0x290>)
 800d560:	695b      	ldr	r3, [r3, #20]
 800d562:	4a97      	ldr	r2, [pc, #604]	@ (800d7c0 <tcp_input+0x290>)
 800d564:	6812      	ldr	r2, [r2, #0]
 800d566:	4611      	mov	r1, r2
 800d568:	4618      	mov	r0, r3
 800d56a:	f005 ff2d 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 800d56e:	4603      	mov	r3, r0
 800d570:	2b00      	cmp	r3, #0
 800d572:	f040 83c7 	bne.w	800dd04 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d576:	4b92      	ldr	r3, [pc, #584]	@ (800d7c0 <tcp_input+0x290>)
 800d578:	695b      	ldr	r3, [r3, #20]
 800d57a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d57e:	2be0      	cmp	r3, #224	@ 0xe0
 800d580:	f000 83c0 	beq.w	800dd04 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d584:	4b8d      	ldr	r3, [pc, #564]	@ (800d7bc <tcp_input+0x28c>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	899b      	ldrh	r3, [r3, #12]
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7fc fda5 	bl	800a0dc <lwip_htons>
 800d592:	4603      	mov	r3, r0
 800d594:	0b1b      	lsrs	r3, r3, #12
 800d596:	b29b      	uxth	r3, r3
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d59e:	7cbb      	ldrb	r3, [r7, #18]
 800d5a0:	2b13      	cmp	r3, #19
 800d5a2:	f240 83b1 	bls.w	800dd08 <tcp_input+0x7d8>
 800d5a6:	7cbb      	ldrb	r3, [r7, #18]
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	891b      	ldrh	r3, [r3, #8]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	f200 83aa 	bhi.w	800dd08 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d5b4:	7cbb      	ldrb	r3, [r7, #18]
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	3b14      	subs	r3, #20
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	4b81      	ldr	r3, [pc, #516]	@ (800d7c4 <tcp_input+0x294>)
 800d5be:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d5c0:	4b81      	ldr	r3, [pc, #516]	@ (800d7c8 <tcp_input+0x298>)
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	895a      	ldrh	r2, [r3, #10]
 800d5ca:	7cbb      	ldrb	r3, [r7, #18]
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d309      	bcc.n	800d5e6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d5d2:	4b7c      	ldr	r3, [pc, #496]	@ (800d7c4 <tcp_input+0x294>)
 800d5d4:	881a      	ldrh	r2, [r3, #0]
 800d5d6:	4b7d      	ldr	r3, [pc, #500]	@ (800d7cc <tcp_input+0x29c>)
 800d5d8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d5da:	7cbb      	ldrb	r3, [r7, #18]
 800d5dc:	4619      	mov	r1, r3
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f7fe f854 	bl	800b68c <pbuf_remove_header>
 800d5e4:	e04e      	b.n	800d684 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d105      	bne.n	800d5fa <tcp_input+0xca>
 800d5ee:	4b70      	ldr	r3, [pc, #448]	@ (800d7b0 <tcp_input+0x280>)
 800d5f0:	22c2      	movs	r2, #194	@ 0xc2
 800d5f2:	4977      	ldr	r1, [pc, #476]	@ (800d7d0 <tcp_input+0x2a0>)
 800d5f4:	4870      	ldr	r0, [pc, #448]	@ (800d7b8 <tcp_input+0x288>)
 800d5f6:	f006 ff3d 	bl	8014474 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d5fa:	2114      	movs	r1, #20
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f7fe f845 	bl	800b68c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	895a      	ldrh	r2, [r3, #10]
 800d606:	4b71      	ldr	r3, [pc, #452]	@ (800d7cc <tcp_input+0x29c>)
 800d608:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d60a:	4b6e      	ldr	r3, [pc, #440]	@ (800d7c4 <tcp_input+0x294>)
 800d60c:	881a      	ldrh	r2, [r3, #0]
 800d60e:	4b6f      	ldr	r3, [pc, #444]	@ (800d7cc <tcp_input+0x29c>)
 800d610:	881b      	ldrh	r3, [r3, #0]
 800d612:	1ad3      	subs	r3, r2, r3
 800d614:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d616:	4b6d      	ldr	r3, [pc, #436]	@ (800d7cc <tcp_input+0x29c>)
 800d618:	881b      	ldrh	r3, [r3, #0]
 800d61a:	4619      	mov	r1, r3
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f7fe f835 	bl	800b68c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	895b      	ldrh	r3, [r3, #10]
 800d628:	8a3a      	ldrh	r2, [r7, #16]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	f200 836e 	bhi.w	800dd0c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	4a64      	ldr	r2, [pc, #400]	@ (800d7c8 <tcp_input+0x298>)
 800d638:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	8a3a      	ldrh	r2, [r7, #16]
 800d640:	4611      	mov	r1, r2
 800d642:	4618      	mov	r0, r3
 800d644:	f7fe f822 	bl	800b68c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	891a      	ldrh	r2, [r3, #8]
 800d64c:	8a3b      	ldrh	r3, [r7, #16]
 800d64e:	1ad3      	subs	r3, r2, r3
 800d650:	b29a      	uxth	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	895b      	ldrh	r3, [r3, #10]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d005      	beq.n	800d66a <tcp_input+0x13a>
 800d65e:	4b54      	ldr	r3, [pc, #336]	@ (800d7b0 <tcp_input+0x280>)
 800d660:	22df      	movs	r2, #223	@ 0xdf
 800d662:	495c      	ldr	r1, [pc, #368]	@ (800d7d4 <tcp_input+0x2a4>)
 800d664:	4854      	ldr	r0, [pc, #336]	@ (800d7b8 <tcp_input+0x288>)
 800d666:	f006 ff05 	bl	8014474 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	891a      	ldrh	r2, [r3, #8]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	891b      	ldrh	r3, [r3, #8]
 800d674:	429a      	cmp	r2, r3
 800d676:	d005      	beq.n	800d684 <tcp_input+0x154>
 800d678:	4b4d      	ldr	r3, [pc, #308]	@ (800d7b0 <tcp_input+0x280>)
 800d67a:	22e0      	movs	r2, #224	@ 0xe0
 800d67c:	4956      	ldr	r1, [pc, #344]	@ (800d7d8 <tcp_input+0x2a8>)
 800d67e:	484e      	ldr	r0, [pc, #312]	@ (800d7b8 <tcp_input+0x288>)
 800d680:	f006 fef8 	bl	8014474 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d684:	4b4d      	ldr	r3, [pc, #308]	@ (800d7bc <tcp_input+0x28c>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	4a4b      	ldr	r2, [pc, #300]	@ (800d7bc <tcp_input+0x28c>)
 800d68e:	6814      	ldr	r4, [r2, #0]
 800d690:	4618      	mov	r0, r3
 800d692:	f7fc fd23 	bl	800a0dc <lwip_htons>
 800d696:	4603      	mov	r3, r0
 800d698:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d69a:	4b48      	ldr	r3, [pc, #288]	@ (800d7bc <tcp_input+0x28c>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	885b      	ldrh	r3, [r3, #2]
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	4a46      	ldr	r2, [pc, #280]	@ (800d7bc <tcp_input+0x28c>)
 800d6a4:	6814      	ldr	r4, [r2, #0]
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7fc fd18 	bl	800a0dc <lwip_htons>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d6b0:	4b42      	ldr	r3, [pc, #264]	@ (800d7bc <tcp_input+0x28c>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	4a41      	ldr	r2, [pc, #260]	@ (800d7bc <tcp_input+0x28c>)
 800d6b8:	6814      	ldr	r4, [r2, #0]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fc fd24 	bl	800a108 <lwip_htonl>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	6063      	str	r3, [r4, #4]
 800d6c4:	6863      	ldr	r3, [r4, #4]
 800d6c6:	4a45      	ldr	r2, [pc, #276]	@ (800d7dc <tcp_input+0x2ac>)
 800d6c8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d6ca:	4b3c      	ldr	r3, [pc, #240]	@ (800d7bc <tcp_input+0x28c>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	4a3a      	ldr	r2, [pc, #232]	@ (800d7bc <tcp_input+0x28c>)
 800d6d2:	6814      	ldr	r4, [r2, #0]
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fc fd17 	bl	800a108 <lwip_htonl>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	60a3      	str	r3, [r4, #8]
 800d6de:	68a3      	ldr	r3, [r4, #8]
 800d6e0:	4a3f      	ldr	r2, [pc, #252]	@ (800d7e0 <tcp_input+0x2b0>)
 800d6e2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d6e4:	4b35      	ldr	r3, [pc, #212]	@ (800d7bc <tcp_input+0x28c>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	89db      	ldrh	r3, [r3, #14]
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	4a33      	ldr	r2, [pc, #204]	@ (800d7bc <tcp_input+0x28c>)
 800d6ee:	6814      	ldr	r4, [r2, #0]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fc fcf3 	bl	800a0dc <lwip_htons>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d6fa:	4b30      	ldr	r3, [pc, #192]	@ (800d7bc <tcp_input+0x28c>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	899b      	ldrh	r3, [r3, #12]
 800d700:	b29b      	uxth	r3, r3
 800d702:	4618      	mov	r0, r3
 800d704:	f7fc fcea 	bl	800a0dc <lwip_htons>
 800d708:	4603      	mov	r3, r0
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d710:	b2da      	uxtb	r2, r3
 800d712:	4b34      	ldr	r3, [pc, #208]	@ (800d7e4 <tcp_input+0x2b4>)
 800d714:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	891a      	ldrh	r2, [r3, #8]
 800d71a:	4b33      	ldr	r3, [pc, #204]	@ (800d7e8 <tcp_input+0x2b8>)
 800d71c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d71e:	4b31      	ldr	r3, [pc, #196]	@ (800d7e4 <tcp_input+0x2b4>)
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	f003 0303 	and.w	r3, r3, #3
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00c      	beq.n	800d744 <tcp_input+0x214>
    tcplen++;
 800d72a:	4b2f      	ldr	r3, [pc, #188]	@ (800d7e8 <tcp_input+0x2b8>)
 800d72c:	881b      	ldrh	r3, [r3, #0]
 800d72e:	3301      	adds	r3, #1
 800d730:	b29a      	uxth	r2, r3
 800d732:	4b2d      	ldr	r3, [pc, #180]	@ (800d7e8 <tcp_input+0x2b8>)
 800d734:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	891a      	ldrh	r2, [r3, #8]
 800d73a:	4b2b      	ldr	r3, [pc, #172]	@ (800d7e8 <tcp_input+0x2b8>)
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	429a      	cmp	r2, r3
 800d740:	f200 82e6 	bhi.w	800dd10 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d744:	2300      	movs	r3, #0
 800d746:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d748:	4b28      	ldr	r3, [pc, #160]	@ (800d7ec <tcp_input+0x2bc>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	61fb      	str	r3, [r7, #28]
 800d74e:	e09d      	b.n	800d88c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d750:	69fb      	ldr	r3, [r7, #28]
 800d752:	7d1b      	ldrb	r3, [r3, #20]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d105      	bne.n	800d764 <tcp_input+0x234>
 800d758:	4b15      	ldr	r3, [pc, #84]	@ (800d7b0 <tcp_input+0x280>)
 800d75a:	22fb      	movs	r2, #251	@ 0xfb
 800d75c:	4924      	ldr	r1, [pc, #144]	@ (800d7f0 <tcp_input+0x2c0>)
 800d75e:	4816      	ldr	r0, [pc, #88]	@ (800d7b8 <tcp_input+0x288>)
 800d760:	f006 fe88 	bl	8014474 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d764:	69fb      	ldr	r3, [r7, #28]
 800d766:	7d1b      	ldrb	r3, [r3, #20]
 800d768:	2b0a      	cmp	r3, #10
 800d76a:	d105      	bne.n	800d778 <tcp_input+0x248>
 800d76c:	4b10      	ldr	r3, [pc, #64]	@ (800d7b0 <tcp_input+0x280>)
 800d76e:	22fc      	movs	r2, #252	@ 0xfc
 800d770:	4920      	ldr	r1, [pc, #128]	@ (800d7f4 <tcp_input+0x2c4>)
 800d772:	4811      	ldr	r0, [pc, #68]	@ (800d7b8 <tcp_input+0x288>)
 800d774:	f006 fe7e 	bl	8014474 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	7d1b      	ldrb	r3, [r3, #20]
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d105      	bne.n	800d78c <tcp_input+0x25c>
 800d780:	4b0b      	ldr	r3, [pc, #44]	@ (800d7b0 <tcp_input+0x280>)
 800d782:	22fd      	movs	r2, #253	@ 0xfd
 800d784:	491c      	ldr	r1, [pc, #112]	@ (800d7f8 <tcp_input+0x2c8>)
 800d786:	480c      	ldr	r0, [pc, #48]	@ (800d7b8 <tcp_input+0x288>)
 800d788:	f006 fe74 	bl	8014474 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	7a1b      	ldrb	r3, [r3, #8]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d033      	beq.n	800d7fc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	7a1a      	ldrb	r2, [r3, #8]
 800d798:	4b09      	ldr	r3, [pc, #36]	@ (800d7c0 <tcp_input+0x290>)
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d029      	beq.n	800d7fc <tcp_input+0x2cc>
      prev = pcb;
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	61bb      	str	r3, [r7, #24]
      continue;
 800d7ac:	e06b      	b.n	800d886 <tcp_input+0x356>
 800d7ae:	bf00      	nop
 800d7b0:	080164d0 	.word	0x080164d0
 800d7b4:	08016504 	.word	0x08016504
 800d7b8:	0801651c 	.word	0x0801651c
 800d7bc:	2000b230 	.word	0x2000b230
 800d7c0:	20005ad8 	.word	0x20005ad8
 800d7c4:	2000b234 	.word	0x2000b234
 800d7c8:	2000b238 	.word	0x2000b238
 800d7cc:	2000b236 	.word	0x2000b236
 800d7d0:	08016544 	.word	0x08016544
 800d7d4:	08016554 	.word	0x08016554
 800d7d8:	08016560 	.word	0x08016560
 800d7dc:	2000b240 	.word	0x2000b240
 800d7e0:	2000b244 	.word	0x2000b244
 800d7e4:	2000b24c 	.word	0x2000b24c
 800d7e8:	2000b24a 	.word	0x2000b24a
 800d7ec:	2000b214 	.word	0x2000b214
 800d7f0:	08016580 	.word	0x08016580
 800d7f4:	080165a8 	.word	0x080165a8
 800d7f8:	080165d4 	.word	0x080165d4
    }

    if (pcb->remote_port == tcphdr->src &&
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	8b1a      	ldrh	r2, [r3, #24]
 800d800:	4b72      	ldr	r3, [pc, #456]	@ (800d9cc <tcp_input+0x49c>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	881b      	ldrh	r3, [r3, #0]
 800d806:	b29b      	uxth	r3, r3
 800d808:	429a      	cmp	r2, r3
 800d80a:	d13a      	bne.n	800d882 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	8ada      	ldrh	r2, [r3, #22]
 800d810:	4b6e      	ldr	r3, [pc, #440]	@ (800d9cc <tcp_input+0x49c>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	885b      	ldrh	r3, [r3, #2]
 800d816:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d818:	429a      	cmp	r2, r3
 800d81a:	d132      	bne.n	800d882 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	685a      	ldr	r2, [r3, #4]
 800d820:	4b6b      	ldr	r3, [pc, #428]	@ (800d9d0 <tcp_input+0x4a0>)
 800d822:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d824:	429a      	cmp	r2, r3
 800d826:	d12c      	bne.n	800d882 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	4b68      	ldr	r3, [pc, #416]	@ (800d9d0 <tcp_input+0x4a0>)
 800d82e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d830:	429a      	cmp	r2, r3
 800d832:	d126      	bne.n	800d882 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	68db      	ldr	r3, [r3, #12]
 800d838:	69fa      	ldr	r2, [r7, #28]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d106      	bne.n	800d84c <tcp_input+0x31c>
 800d83e:	4b65      	ldr	r3, [pc, #404]	@ (800d9d4 <tcp_input+0x4a4>)
 800d840:	f240 120d 	movw	r2, #269	@ 0x10d
 800d844:	4964      	ldr	r1, [pc, #400]	@ (800d9d8 <tcp_input+0x4a8>)
 800d846:	4865      	ldr	r0, [pc, #404]	@ (800d9dc <tcp_input+0x4ac>)
 800d848:	f006 fe14 	bl	8014474 <iprintf>
      if (prev != NULL) {
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d00a      	beq.n	800d868 <tcp_input+0x338>
        prev->next = pcb->next;
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	68da      	ldr	r2, [r3, #12]
 800d856:	69bb      	ldr	r3, [r7, #24]
 800d858:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d85a:	4b61      	ldr	r3, [pc, #388]	@ (800d9e0 <tcp_input+0x4b0>)
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	69fb      	ldr	r3, [r7, #28]
 800d860:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d862:	4a5f      	ldr	r2, [pc, #380]	@ (800d9e0 <tcp_input+0x4b0>)
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	69fa      	ldr	r2, [r7, #28]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d111      	bne.n	800d896 <tcp_input+0x366>
 800d872:	4b58      	ldr	r3, [pc, #352]	@ (800d9d4 <tcp_input+0x4a4>)
 800d874:	f240 1215 	movw	r2, #277	@ 0x115
 800d878:	495a      	ldr	r1, [pc, #360]	@ (800d9e4 <tcp_input+0x4b4>)
 800d87a:	4858      	ldr	r0, [pc, #352]	@ (800d9dc <tcp_input+0x4ac>)
 800d87c:	f006 fdfa 	bl	8014474 <iprintf>
      break;
 800d880:	e009      	b.n	800d896 <tcp_input+0x366>
    }
    prev = pcb;
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	61fb      	str	r3, [r7, #28]
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	f47f af5e 	bne.w	800d750 <tcp_input+0x220>
 800d894:	e000      	b.n	800d898 <tcp_input+0x368>
      break;
 800d896:	bf00      	nop
  }

  if (pcb == NULL) {
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f040 80aa 	bne.w	800d9f4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8a0:	4b51      	ldr	r3, [pc, #324]	@ (800d9e8 <tcp_input+0x4b8>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	61fb      	str	r3, [r7, #28]
 800d8a6:	e03f      	b.n	800d928 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	7d1b      	ldrb	r3, [r3, #20]
 800d8ac:	2b0a      	cmp	r3, #10
 800d8ae:	d006      	beq.n	800d8be <tcp_input+0x38e>
 800d8b0:	4b48      	ldr	r3, [pc, #288]	@ (800d9d4 <tcp_input+0x4a4>)
 800d8b2:	f240 121f 	movw	r2, #287	@ 0x11f
 800d8b6:	494d      	ldr	r1, [pc, #308]	@ (800d9ec <tcp_input+0x4bc>)
 800d8b8:	4848      	ldr	r0, [pc, #288]	@ (800d9dc <tcp_input+0x4ac>)
 800d8ba:	f006 fddb 	bl	8014474 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	7a1b      	ldrb	r3, [r3, #8]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d009      	beq.n	800d8da <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	7a1a      	ldrb	r2, [r3, #8]
 800d8ca:	4b41      	ldr	r3, [pc, #260]	@ (800d9d0 <tcp_input+0x4a0>)
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d122      	bne.n	800d920 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	8b1a      	ldrh	r2, [r3, #24]
 800d8de:	4b3b      	ldr	r3, [pc, #236]	@ (800d9cc <tcp_input+0x49c>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	881b      	ldrh	r3, [r3, #0]
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d11b      	bne.n	800d922 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	8ada      	ldrh	r2, [r3, #22]
 800d8ee:	4b37      	ldr	r3, [pc, #220]	@ (800d9cc <tcp_input+0x49c>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	885b      	ldrh	r3, [r3, #2]
 800d8f4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d113      	bne.n	800d922 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	685a      	ldr	r2, [r3, #4]
 800d8fe:	4b34      	ldr	r3, [pc, #208]	@ (800d9d0 <tcp_input+0x4a0>)
 800d900:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d902:	429a      	cmp	r2, r3
 800d904:	d10d      	bne.n	800d922 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	4b31      	ldr	r3, [pc, #196]	@ (800d9d0 <tcp_input+0x4a0>)
 800d90c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d90e:	429a      	cmp	r2, r3
 800d910:	d107      	bne.n	800d922 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d912:	69f8      	ldr	r0, [r7, #28]
 800d914:	f000 fb56 	bl	800dfc4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7fd ff3d 	bl	800b798 <pbuf_free>
        return;
 800d91e:	e1fd      	b.n	800dd1c <tcp_input+0x7ec>
        continue;
 800d920:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	61fb      	str	r3, [r7, #28]
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1bc      	bne.n	800d8a8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d92e:	2300      	movs	r3, #0
 800d930:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d932:	4b2f      	ldr	r3, [pc, #188]	@ (800d9f0 <tcp_input+0x4c0>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	617b      	str	r3, [r7, #20]
 800d938:	e02a      	b.n	800d990 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	7a1b      	ldrb	r3, [r3, #8]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00c      	beq.n	800d95c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	7a1a      	ldrb	r2, [r3, #8]
 800d946:	4b22      	ldr	r3, [pc, #136]	@ (800d9d0 <tcp_input+0x4a0>)
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d94e:	3301      	adds	r3, #1
 800d950:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d952:	429a      	cmp	r2, r3
 800d954:	d002      	beq.n	800d95c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	61bb      	str	r3, [r7, #24]
        continue;
 800d95a:	e016      	b.n	800d98a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	8ada      	ldrh	r2, [r3, #22]
 800d960:	4b1a      	ldr	r3, [pc, #104]	@ (800d9cc <tcp_input+0x49c>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	885b      	ldrh	r3, [r3, #2]
 800d966:	b29b      	uxth	r3, r3
 800d968:	429a      	cmp	r2, r3
 800d96a:	d10c      	bne.n	800d986 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	4b17      	ldr	r3, [pc, #92]	@ (800d9d0 <tcp_input+0x4a0>)
 800d972:	695b      	ldr	r3, [r3, #20]
 800d974:	429a      	cmp	r2, r3
 800d976:	d00f      	beq.n	800d998 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d00d      	beq.n	800d99a <tcp_input+0x46a>
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d009      	beq.n	800d99a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	617b      	str	r3, [r7, #20]
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1d1      	bne.n	800d93a <tcp_input+0x40a>
 800d996:	e000      	b.n	800d99a <tcp_input+0x46a>
            break;
 800d998:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d029      	beq.n	800d9f4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00a      	beq.n	800d9bc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	68da      	ldr	r2, [r3, #12]
 800d9aa:	69bb      	ldr	r3, [r7, #24]
 800d9ac:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d9ae:	4b10      	ldr	r3, [pc, #64]	@ (800d9f0 <tcp_input+0x4c0>)
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d9b6:	4a0e      	ldr	r2, [pc, #56]	@ (800d9f0 <tcp_input+0x4c0>)
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d9bc:	6978      	ldr	r0, [r7, #20]
 800d9be:	f000 fa03 	bl	800ddc8 <tcp_listen_input>
      }
      pbuf_free(p);
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7fd fee8 	bl	800b798 <pbuf_free>
      return;
 800d9c8:	e1a8      	b.n	800dd1c <tcp_input+0x7ec>
 800d9ca:	bf00      	nop
 800d9cc:	2000b230 	.word	0x2000b230
 800d9d0:	20005ad8 	.word	0x20005ad8
 800d9d4:	080164d0 	.word	0x080164d0
 800d9d8:	080165fc 	.word	0x080165fc
 800d9dc:	0801651c 	.word	0x0801651c
 800d9e0:	2000b214 	.word	0x2000b214
 800d9e4:	08016628 	.word	0x08016628
 800d9e8:	2000b218 	.word	0x2000b218
 800d9ec:	08016654 	.word	0x08016654
 800d9f0:	2000b210 	.word	0x2000b210
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d9f4:	69fb      	ldr	r3, [r7, #28]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	f000 8158 	beq.w	800dcac <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d9fc:	4b95      	ldr	r3, [pc, #596]	@ (800dc54 <tcp_input+0x724>)
 800d9fe:	2200      	movs	r2, #0
 800da00:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	891a      	ldrh	r2, [r3, #8]
 800da06:	4b93      	ldr	r3, [pc, #588]	@ (800dc54 <tcp_input+0x724>)
 800da08:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800da0a:	4a92      	ldr	r2, [pc, #584]	@ (800dc54 <tcp_input+0x724>)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800da10:	4b91      	ldr	r3, [pc, #580]	@ (800dc58 <tcp_input+0x728>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a8f      	ldr	r2, [pc, #572]	@ (800dc54 <tcp_input+0x724>)
 800da16:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800da18:	4b90      	ldr	r3, [pc, #576]	@ (800dc5c <tcp_input+0x72c>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800da1e:	4b90      	ldr	r3, [pc, #576]	@ (800dc60 <tcp_input+0x730>)
 800da20:	2200      	movs	r2, #0
 800da22:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800da24:	4b8f      	ldr	r3, [pc, #572]	@ (800dc64 <tcp_input+0x734>)
 800da26:	2200      	movs	r2, #0
 800da28:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800da2a:	4b8f      	ldr	r3, [pc, #572]	@ (800dc68 <tcp_input+0x738>)
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	f003 0308 	and.w	r3, r3, #8
 800da32:	2b00      	cmp	r3, #0
 800da34:	d006      	beq.n	800da44 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	7b5b      	ldrb	r3, [r3, #13]
 800da3a:	f043 0301 	orr.w	r3, r3, #1
 800da3e:	b2da      	uxtb	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d017      	beq.n	800da7c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800da4c:	69f8      	ldr	r0, [r7, #28]
 800da4e:	f7ff f929 	bl	800cca4 <tcp_process_refused_data>
 800da52:	4603      	mov	r3, r0
 800da54:	f113 0f0d 	cmn.w	r3, #13
 800da58:	d007      	beq.n	800da6a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00c      	beq.n	800da7c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800da62:	4b82      	ldr	r3, [pc, #520]	@ (800dc6c <tcp_input+0x73c>)
 800da64:	881b      	ldrh	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d008      	beq.n	800da7c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da6e:	2b00      	cmp	r3, #0
 800da70:	f040 80e3 	bne.w	800dc3a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800da74:	69f8      	ldr	r0, [r7, #28]
 800da76:	f003 f9a7 	bl	8010dc8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800da7a:	e0de      	b.n	800dc3a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800da7c:	4a7c      	ldr	r2, [pc, #496]	@ (800dc70 <tcp_input+0x740>)
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800da82:	69f8      	ldr	r0, [r7, #28]
 800da84:	f000 fb18 	bl	800e0b8 <tcp_process>
 800da88:	4603      	mov	r3, r0
 800da8a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800da8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800da90:	f113 0f0d 	cmn.w	r3, #13
 800da94:	f000 80d3 	beq.w	800dc3e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800da98:	4b71      	ldr	r3, [pc, #452]	@ (800dc60 <tcp_input+0x730>)
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	f003 0308 	and.w	r3, r3, #8
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d015      	beq.n	800dad0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800daa4:	69fb      	ldr	r3, [r7, #28]
 800daa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d008      	beq.n	800dac0 <tcp_input+0x590>
 800daae:	69fb      	ldr	r3, [r7, #28]
 800dab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dab4:	69fa      	ldr	r2, [r7, #28]
 800dab6:	6912      	ldr	r2, [r2, #16]
 800dab8:	f06f 010d 	mvn.w	r1, #13
 800dabc:	4610      	mov	r0, r2
 800dabe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dac0:	69f9      	ldr	r1, [r7, #28]
 800dac2:	486c      	ldr	r0, [pc, #432]	@ (800dc74 <tcp_input+0x744>)
 800dac4:	f7ff fbbc 	bl	800d240 <tcp_pcb_remove>
        tcp_free(pcb);
 800dac8:	69f8      	ldr	r0, [r7, #28]
 800daca:	f7fe f9a7 	bl	800be1c <tcp_free>
 800dace:	e0da      	b.n	800dc86 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800dad0:	2300      	movs	r3, #0
 800dad2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dad4:	4b63      	ldr	r3, [pc, #396]	@ (800dc64 <tcp_input+0x734>)
 800dad6:	881b      	ldrh	r3, [r3, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d01d      	beq.n	800db18 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dadc:	4b61      	ldr	r3, [pc, #388]	@ (800dc64 <tcp_input+0x734>)
 800dade:	881b      	ldrh	r3, [r3, #0]
 800dae0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d00a      	beq.n	800db02 <tcp_input+0x5d2>
 800daec:	69fb      	ldr	r3, [r7, #28]
 800daee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800daf2:	69fa      	ldr	r2, [r7, #28]
 800daf4:	6910      	ldr	r0, [r2, #16]
 800daf6:	89fa      	ldrh	r2, [r7, #14]
 800daf8:	69f9      	ldr	r1, [r7, #28]
 800dafa:	4798      	blx	r3
 800dafc:	4603      	mov	r3, r0
 800dafe:	74fb      	strb	r3, [r7, #19]
 800db00:	e001      	b.n	800db06 <tcp_input+0x5d6>
 800db02:	2300      	movs	r3, #0
 800db04:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800db06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db0a:	f113 0f0d 	cmn.w	r3, #13
 800db0e:	f000 8098 	beq.w	800dc42 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800db12:	4b54      	ldr	r3, [pc, #336]	@ (800dc64 <tcp_input+0x734>)
 800db14:	2200      	movs	r2, #0
 800db16:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800db18:	69f8      	ldr	r0, [r7, #28]
 800db1a:	f000 f915 	bl	800dd48 <tcp_input_delayed_close>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	f040 8090 	bne.w	800dc46 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800db26:	4b4d      	ldr	r3, [pc, #308]	@ (800dc5c <tcp_input+0x72c>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d041      	beq.n	800dbb2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db32:	2b00      	cmp	r3, #0
 800db34:	d006      	beq.n	800db44 <tcp_input+0x614>
 800db36:	4b50      	ldr	r3, [pc, #320]	@ (800dc78 <tcp_input+0x748>)
 800db38:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800db3c:	494f      	ldr	r1, [pc, #316]	@ (800dc7c <tcp_input+0x74c>)
 800db3e:	4850      	ldr	r0, [pc, #320]	@ (800dc80 <tcp_input+0x750>)
 800db40:	f006 fc98 	bl	8014474 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	8b5b      	ldrh	r3, [r3, #26]
 800db48:	f003 0310 	and.w	r3, r3, #16
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d008      	beq.n	800db62 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800db50:	4b42      	ldr	r3, [pc, #264]	@ (800dc5c <tcp_input+0x72c>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4618      	mov	r0, r3
 800db56:	f7fd fe1f 	bl	800b798 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800db5a:	69f8      	ldr	r0, [r7, #28]
 800db5c:	f7fe fc46 	bl	800c3ec <tcp_abort>
            goto aborted;
 800db60:	e091      	b.n	800dc86 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d00c      	beq.n	800db86 <tcp_input+0x656>
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	6918      	ldr	r0, [r3, #16]
 800db76:	4b39      	ldr	r3, [pc, #228]	@ (800dc5c <tcp_input+0x72c>)
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	2300      	movs	r3, #0
 800db7c:	69f9      	ldr	r1, [r7, #28]
 800db7e:	47a0      	blx	r4
 800db80:	4603      	mov	r3, r0
 800db82:	74fb      	strb	r3, [r7, #19]
 800db84:	e008      	b.n	800db98 <tcp_input+0x668>
 800db86:	4b35      	ldr	r3, [pc, #212]	@ (800dc5c <tcp_input+0x72c>)
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	2300      	movs	r3, #0
 800db8c:	69f9      	ldr	r1, [r7, #28]
 800db8e:	2000      	movs	r0, #0
 800db90:	f7ff f95e 	bl	800ce50 <tcp_recv_null>
 800db94:	4603      	mov	r3, r0
 800db96:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800db98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db9c:	f113 0f0d 	cmn.w	r3, #13
 800dba0:	d053      	beq.n	800dc4a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800dba2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d003      	beq.n	800dbb2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800dbaa:	4b2c      	ldr	r3, [pc, #176]	@ (800dc5c <tcp_input+0x72c>)
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800dbb2:	4b2b      	ldr	r3, [pc, #172]	@ (800dc60 <tcp_input+0x730>)
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	f003 0320 	and.w	r3, r3, #32
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d030      	beq.n	800dc20 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d009      	beq.n	800dbda <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dbca:	7b5a      	ldrb	r2, [r3, #13]
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dbd0:	f042 0220 	orr.w	r2, r2, #32
 800dbd4:	b2d2      	uxtb	r2, r2
 800dbd6:	735a      	strb	r2, [r3, #13]
 800dbd8:	e022      	b.n	800dc20 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbde:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800dbe2:	d005      	beq.n	800dbf0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbe8:	3301      	adds	r3, #1
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d00b      	beq.n	800dc12 <tcp_input+0x6e2>
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	6918      	ldr	r0, [r3, #16]
 800dc04:	2300      	movs	r3, #0
 800dc06:	2200      	movs	r2, #0
 800dc08:	69f9      	ldr	r1, [r7, #28]
 800dc0a:	47a0      	blx	r4
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	74fb      	strb	r3, [r7, #19]
 800dc10:	e001      	b.n	800dc16 <tcp_input+0x6e6>
 800dc12:	2300      	movs	r3, #0
 800dc14:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dc16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc1a:	f113 0f0d 	cmn.w	r3, #13
 800dc1e:	d016      	beq.n	800dc4e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dc20:	4b13      	ldr	r3, [pc, #76]	@ (800dc70 <tcp_input+0x740>)
 800dc22:	2200      	movs	r2, #0
 800dc24:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800dc26:	69f8      	ldr	r0, [r7, #28]
 800dc28:	f000 f88e 	bl	800dd48 <tcp_input_delayed_close>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d128      	bne.n	800dc84 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800dc32:	69f8      	ldr	r0, [r7, #28]
 800dc34:	f002 fac2 	bl	80101bc <tcp_output>
 800dc38:	e025      	b.n	800dc86 <tcp_input+0x756>
        goto aborted;
 800dc3a:	bf00      	nop
 800dc3c:	e023      	b.n	800dc86 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800dc3e:	bf00      	nop
 800dc40:	e021      	b.n	800dc86 <tcp_input+0x756>
              goto aborted;
 800dc42:	bf00      	nop
 800dc44:	e01f      	b.n	800dc86 <tcp_input+0x756>
          goto aborted;
 800dc46:	bf00      	nop
 800dc48:	e01d      	b.n	800dc86 <tcp_input+0x756>
            goto aborted;
 800dc4a:	bf00      	nop
 800dc4c:	e01b      	b.n	800dc86 <tcp_input+0x756>
              goto aborted;
 800dc4e:	bf00      	nop
 800dc50:	e019      	b.n	800dc86 <tcp_input+0x756>
 800dc52:	bf00      	nop
 800dc54:	2000b220 	.word	0x2000b220
 800dc58:	2000b230 	.word	0x2000b230
 800dc5c:	2000b250 	.word	0x2000b250
 800dc60:	2000b24d 	.word	0x2000b24d
 800dc64:	2000b248 	.word	0x2000b248
 800dc68:	2000b24c 	.word	0x2000b24c
 800dc6c:	2000b24a 	.word	0x2000b24a
 800dc70:	2000b254 	.word	0x2000b254
 800dc74:	2000b214 	.word	0x2000b214
 800dc78:	080164d0 	.word	0x080164d0
 800dc7c:	08016684 	.word	0x08016684
 800dc80:	0801651c 	.word	0x0801651c
          goto aborted;
 800dc84:	bf00      	nop
    tcp_input_pcb = NULL;
 800dc86:	4b27      	ldr	r3, [pc, #156]	@ (800dd24 <tcp_input+0x7f4>)
 800dc88:	2200      	movs	r2, #0
 800dc8a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800dc8c:	4b26      	ldr	r3, [pc, #152]	@ (800dd28 <tcp_input+0x7f8>)
 800dc8e:	2200      	movs	r2, #0
 800dc90:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800dc92:	4b26      	ldr	r3, [pc, #152]	@ (800dd2c <tcp_input+0x7fc>)
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d03f      	beq.n	800dd1a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800dc9a:	4b24      	ldr	r3, [pc, #144]	@ (800dd2c <tcp_input+0x7fc>)
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fd fd7a 	bl	800b798 <pbuf_free>
      inseg.p = NULL;
 800dca4:	4b21      	ldr	r3, [pc, #132]	@ (800dd2c <tcp_input+0x7fc>)
 800dca6:	2200      	movs	r2, #0
 800dca8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800dcaa:	e036      	b.n	800dd1a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800dcac:	4b20      	ldr	r3, [pc, #128]	@ (800dd30 <tcp_input+0x800>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	899b      	ldrh	r3, [r3, #12]
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7fc fa11 	bl	800a0dc <lwip_htons>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	f003 0304 	and.w	r3, r3, #4
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d118      	bne.n	800dcf8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dcc6:	4b1b      	ldr	r3, [pc, #108]	@ (800dd34 <tcp_input+0x804>)
 800dcc8:	6819      	ldr	r1, [r3, #0]
 800dcca:	4b1b      	ldr	r3, [pc, #108]	@ (800dd38 <tcp_input+0x808>)
 800dccc:	881b      	ldrh	r3, [r3, #0]
 800dcce:	461a      	mov	r2, r3
 800dcd0:	4b1a      	ldr	r3, [pc, #104]	@ (800dd3c <tcp_input+0x80c>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dcd6:	4b16      	ldr	r3, [pc, #88]	@ (800dd30 <tcp_input+0x800>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dcda:	885b      	ldrh	r3, [r3, #2]
 800dcdc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dcde:	4a14      	ldr	r2, [pc, #80]	@ (800dd30 <tcp_input+0x800>)
 800dce0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dce2:	8812      	ldrh	r2, [r2, #0]
 800dce4:	b292      	uxth	r2, r2
 800dce6:	9202      	str	r2, [sp, #8]
 800dce8:	9301      	str	r3, [sp, #4]
 800dcea:	4b15      	ldr	r3, [pc, #84]	@ (800dd40 <tcp_input+0x810>)
 800dcec:	9300      	str	r3, [sp, #0]
 800dcee:	4b15      	ldr	r3, [pc, #84]	@ (800dd44 <tcp_input+0x814>)
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	2000      	movs	r0, #0
 800dcf4:	f003 f816 	bl	8010d24 <tcp_rst>
    pbuf_free(p);
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f7fd fd4d 	bl	800b798 <pbuf_free>
  return;
 800dcfe:	e00c      	b.n	800dd1a <tcp_input+0x7ea>
    goto dropped;
 800dd00:	bf00      	nop
 800dd02:	e006      	b.n	800dd12 <tcp_input+0x7e2>
    goto dropped;
 800dd04:	bf00      	nop
 800dd06:	e004      	b.n	800dd12 <tcp_input+0x7e2>
    goto dropped;
 800dd08:	bf00      	nop
 800dd0a:	e002      	b.n	800dd12 <tcp_input+0x7e2>
      goto dropped;
 800dd0c:	bf00      	nop
 800dd0e:	e000      	b.n	800dd12 <tcp_input+0x7e2>
      goto dropped;
 800dd10:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f7fd fd40 	bl	800b798 <pbuf_free>
 800dd18:	e000      	b.n	800dd1c <tcp_input+0x7ec>
  return;
 800dd1a:	bf00      	nop
}
 800dd1c:	3724      	adds	r7, #36	@ 0x24
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd90      	pop	{r4, r7, pc}
 800dd22:	bf00      	nop
 800dd24:	2000b254 	.word	0x2000b254
 800dd28:	2000b250 	.word	0x2000b250
 800dd2c:	2000b220 	.word	0x2000b220
 800dd30:	2000b230 	.word	0x2000b230
 800dd34:	2000b244 	.word	0x2000b244
 800dd38:	2000b24a 	.word	0x2000b24a
 800dd3c:	2000b240 	.word	0x2000b240
 800dd40:	20005ae8 	.word	0x20005ae8
 800dd44:	20005aec 	.word	0x20005aec

0800dd48 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d106      	bne.n	800dd64 <tcp_input_delayed_close+0x1c>
 800dd56:	4b17      	ldr	r3, [pc, #92]	@ (800ddb4 <tcp_input_delayed_close+0x6c>)
 800dd58:	f240 225a 	movw	r2, #602	@ 0x25a
 800dd5c:	4916      	ldr	r1, [pc, #88]	@ (800ddb8 <tcp_input_delayed_close+0x70>)
 800dd5e:	4817      	ldr	r0, [pc, #92]	@ (800ddbc <tcp_input_delayed_close+0x74>)
 800dd60:	f006 fb88 	bl	8014474 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800dd64:	4b16      	ldr	r3, [pc, #88]	@ (800ddc0 <tcp_input_delayed_close+0x78>)
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	f003 0310 	and.w	r3, r3, #16
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d01c      	beq.n	800ddaa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	8b5b      	ldrh	r3, [r3, #26]
 800dd74:	f003 0310 	and.w	r3, r3, #16
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10d      	bne.n	800dd98 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d008      	beq.n	800dd98 <tcp_input_delayed_close+0x50>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd8c:	687a      	ldr	r2, [r7, #4]
 800dd8e:	6912      	ldr	r2, [r2, #16]
 800dd90:	f06f 010e 	mvn.w	r1, #14
 800dd94:	4610      	mov	r0, r2
 800dd96:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dd98:	6879      	ldr	r1, [r7, #4]
 800dd9a:	480a      	ldr	r0, [pc, #40]	@ (800ddc4 <tcp_input_delayed_close+0x7c>)
 800dd9c:	f7ff fa50 	bl	800d240 <tcp_pcb_remove>
    tcp_free(pcb);
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f7fe f83b 	bl	800be1c <tcp_free>
    return 1;
 800dda6:	2301      	movs	r3, #1
 800dda8:	e000      	b.n	800ddac <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ddaa:	2300      	movs	r3, #0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3708      	adds	r7, #8
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	080164d0 	.word	0x080164d0
 800ddb8:	080166a0 	.word	0x080166a0
 800ddbc:	0801651c 	.word	0x0801651c
 800ddc0:	2000b24d 	.word	0x2000b24d
 800ddc4:	2000b214 	.word	0x2000b214

0800ddc8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ddc8:	b590      	push	{r4, r7, lr}
 800ddca:	b08b      	sub	sp, #44	@ 0x2c
 800ddcc:	af04      	add	r7, sp, #16
 800ddce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ddd0:	4b6f      	ldr	r3, [pc, #444]	@ (800df90 <tcp_listen_input+0x1c8>)
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	f003 0304 	and.w	r3, r3, #4
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	f040 80d2 	bne.w	800df82 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d106      	bne.n	800ddf2 <tcp_listen_input+0x2a>
 800dde4:	4b6b      	ldr	r3, [pc, #428]	@ (800df94 <tcp_listen_input+0x1cc>)
 800dde6:	f240 2281 	movw	r2, #641	@ 0x281
 800ddea:	496b      	ldr	r1, [pc, #428]	@ (800df98 <tcp_listen_input+0x1d0>)
 800ddec:	486b      	ldr	r0, [pc, #428]	@ (800df9c <tcp_listen_input+0x1d4>)
 800ddee:	f006 fb41 	bl	8014474 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ddf2:	4b67      	ldr	r3, [pc, #412]	@ (800df90 <tcp_listen_input+0x1c8>)
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	f003 0310 	and.w	r3, r3, #16
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d019      	beq.n	800de32 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddfe:	4b68      	ldr	r3, [pc, #416]	@ (800dfa0 <tcp_listen_input+0x1d8>)
 800de00:	6819      	ldr	r1, [r3, #0]
 800de02:	4b68      	ldr	r3, [pc, #416]	@ (800dfa4 <tcp_listen_input+0x1dc>)
 800de04:	881b      	ldrh	r3, [r3, #0]
 800de06:	461a      	mov	r2, r3
 800de08:	4b67      	ldr	r3, [pc, #412]	@ (800dfa8 <tcp_listen_input+0x1e0>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de0e:	4b67      	ldr	r3, [pc, #412]	@ (800dfac <tcp_listen_input+0x1e4>)
 800de10:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de12:	885b      	ldrh	r3, [r3, #2]
 800de14:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de16:	4a65      	ldr	r2, [pc, #404]	@ (800dfac <tcp_listen_input+0x1e4>)
 800de18:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de1a:	8812      	ldrh	r2, [r2, #0]
 800de1c:	b292      	uxth	r2, r2
 800de1e:	9202      	str	r2, [sp, #8]
 800de20:	9301      	str	r3, [sp, #4]
 800de22:	4b63      	ldr	r3, [pc, #396]	@ (800dfb0 <tcp_listen_input+0x1e8>)
 800de24:	9300      	str	r3, [sp, #0]
 800de26:	4b63      	ldr	r3, [pc, #396]	@ (800dfb4 <tcp_listen_input+0x1ec>)
 800de28:	4602      	mov	r2, r0
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f002 ff7a 	bl	8010d24 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800de30:	e0a9      	b.n	800df86 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800de32:	4b57      	ldr	r3, [pc, #348]	@ (800df90 <tcp_listen_input+0x1c8>)
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	f003 0302 	and.w	r3, r3, #2
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f000 80a3 	beq.w	800df86 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	7d5b      	ldrb	r3, [r3, #21]
 800de44:	4618      	mov	r0, r3
 800de46:	f7ff f927 	bl	800d098 <tcp_alloc>
 800de4a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d111      	bne.n	800de76 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	699b      	ldr	r3, [r3, #24]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00a      	beq.n	800de70 <tcp_listen_input+0xa8>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	699b      	ldr	r3, [r3, #24]
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	6910      	ldr	r0, [r2, #16]
 800de62:	f04f 32ff 	mov.w	r2, #4294967295
 800de66:	2100      	movs	r1, #0
 800de68:	4798      	blx	r3
 800de6a:	4603      	mov	r3, r0
 800de6c:	73bb      	strb	r3, [r7, #14]
      return;
 800de6e:	e08b      	b.n	800df88 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800de70:	23f0      	movs	r3, #240	@ 0xf0
 800de72:	73bb      	strb	r3, [r7, #14]
      return;
 800de74:	e088      	b.n	800df88 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800de76:	4b50      	ldr	r3, [pc, #320]	@ (800dfb8 <tcp_listen_input+0x1f0>)
 800de78:	695a      	ldr	r2, [r3, #20]
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800de7e:	4b4e      	ldr	r3, [pc, #312]	@ (800dfb8 <tcp_listen_input+0x1f0>)
 800de80:	691a      	ldr	r2, [r3, #16]
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	8ada      	ldrh	r2, [r3, #22]
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800de8e:	4b47      	ldr	r3, [pc, #284]	@ (800dfac <tcp_listen_input+0x1e4>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	881b      	ldrh	r3, [r3, #0]
 800de94:	b29a      	uxth	r2, r3
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	2203      	movs	r2, #3
 800de9e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800dea0:	4b41      	ldr	r3, [pc, #260]	@ (800dfa8 <tcp_listen_input+0x1e0>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	1c5a      	adds	r2, r3, #1
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800deb2:	6978      	ldr	r0, [r7, #20]
 800deb4:	f7ff fa58 	bl	800d368 <tcp_next_iss>
 800deb8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	693a      	ldr	r2, [r7, #16]
 800debe:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	693a      	ldr	r2, [r7, #16]
 800dec4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	693a      	ldr	r2, [r7, #16]
 800deca:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	693a      	ldr	r2, [r7, #16]
 800ded0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ded2:	4b35      	ldr	r3, [pc, #212]	@ (800dfa8 <tcp_listen_input+0x1e0>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	1e5a      	subs	r2, r3, #1
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	691a      	ldr	r2, [r3, #16]
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	7a5b      	ldrb	r3, [r3, #9]
 800deee:	f003 030c 	and.w	r3, r3, #12
 800def2:	b2da      	uxtb	r2, r3
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	7a1a      	ldrb	r2, [r3, #8]
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800df00:	4b2e      	ldr	r3, [pc, #184]	@ (800dfbc <tcp_listen_input+0x1f4>)
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	60da      	str	r2, [r3, #12]
 800df08:	4a2c      	ldr	r2, [pc, #176]	@ (800dfbc <tcp_listen_input+0x1f4>)
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	6013      	str	r3, [r2, #0]
 800df0e:	f003 f8cb 	bl	80110a8 <tcp_timer_needed>
 800df12:	4b2b      	ldr	r3, [pc, #172]	@ (800dfc0 <tcp_listen_input+0x1f8>)
 800df14:	2201      	movs	r2, #1
 800df16:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800df18:	6978      	ldr	r0, [r7, #20]
 800df1a:	f001 fd8b 	bl	800fa34 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800df1e:	4b23      	ldr	r3, [pc, #140]	@ (800dfac <tcp_listen_input+0x1e4>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	89db      	ldrh	r3, [r3, #14]
 800df24:	b29a      	uxth	r2, r3
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	3304      	adds	r3, #4
 800df40:	4618      	mov	r0, r3
 800df42:	f004 ffab 	bl	8012e9c <ip4_route>
 800df46:	4601      	mov	r1, r0
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	3304      	adds	r3, #4
 800df4c:	461a      	mov	r2, r3
 800df4e:	4620      	mov	r0, r4
 800df50:	f7ff fa30 	bl	800d3b4 <tcp_eff_send_mss_netif>
 800df54:	4603      	mov	r3, r0
 800df56:	461a      	mov	r2, r3
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800df5c:	2112      	movs	r1, #18
 800df5e:	6978      	ldr	r0, [r7, #20]
 800df60:	f002 f83e 	bl	800ffe0 <tcp_enqueue_flags>
 800df64:	4603      	mov	r3, r0
 800df66:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800df68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d004      	beq.n	800df7a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800df70:	2100      	movs	r1, #0
 800df72:	6978      	ldr	r0, [r7, #20]
 800df74:	f7fe f97c 	bl	800c270 <tcp_abandon>
      return;
 800df78:	e006      	b.n	800df88 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800df7a:	6978      	ldr	r0, [r7, #20]
 800df7c:	f002 f91e 	bl	80101bc <tcp_output>
  return;
 800df80:	e001      	b.n	800df86 <tcp_listen_input+0x1be>
    return;
 800df82:	bf00      	nop
 800df84:	e000      	b.n	800df88 <tcp_listen_input+0x1c0>
  return;
 800df86:	bf00      	nop
}
 800df88:	371c      	adds	r7, #28
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd90      	pop	{r4, r7, pc}
 800df8e:	bf00      	nop
 800df90:	2000b24c 	.word	0x2000b24c
 800df94:	080164d0 	.word	0x080164d0
 800df98:	080166c8 	.word	0x080166c8
 800df9c:	0801651c 	.word	0x0801651c
 800dfa0:	2000b244 	.word	0x2000b244
 800dfa4:	2000b24a 	.word	0x2000b24a
 800dfa8:	2000b240 	.word	0x2000b240
 800dfac:	2000b230 	.word	0x2000b230
 800dfb0:	20005ae8 	.word	0x20005ae8
 800dfb4:	20005aec 	.word	0x20005aec
 800dfb8:	20005ad8 	.word	0x20005ad8
 800dfbc:	2000b214 	.word	0x2000b214
 800dfc0:	2000b21c 	.word	0x2000b21c

0800dfc4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af04      	add	r7, sp, #16
 800dfca:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800dfcc:	4b2f      	ldr	r3, [pc, #188]	@ (800e08c <tcp_timewait_input+0xc8>)
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	f003 0304 	and.w	r3, r3, #4
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d153      	bne.n	800e080 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d106      	bne.n	800dfec <tcp_timewait_input+0x28>
 800dfde:	4b2c      	ldr	r3, [pc, #176]	@ (800e090 <tcp_timewait_input+0xcc>)
 800dfe0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800dfe4:	492b      	ldr	r1, [pc, #172]	@ (800e094 <tcp_timewait_input+0xd0>)
 800dfe6:	482c      	ldr	r0, [pc, #176]	@ (800e098 <tcp_timewait_input+0xd4>)
 800dfe8:	f006 fa44 	bl	8014474 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800dfec:	4b27      	ldr	r3, [pc, #156]	@ (800e08c <tcp_timewait_input+0xc8>)
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	f003 0302 	and.w	r3, r3, #2
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d02a      	beq.n	800e04e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dff8:	4b28      	ldr	r3, [pc, #160]	@ (800e09c <tcp_timewait_input+0xd8>)
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e000:	1ad3      	subs	r3, r2, r3
 800e002:	2b00      	cmp	r3, #0
 800e004:	db2d      	blt.n	800e062 <tcp_timewait_input+0x9e>
 800e006:	4b25      	ldr	r3, [pc, #148]	@ (800e09c <tcp_timewait_input+0xd8>)
 800e008:	681a      	ldr	r2, [r3, #0]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e00e:	6879      	ldr	r1, [r7, #4]
 800e010:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e012:	440b      	add	r3, r1
 800e014:	1ad3      	subs	r3, r2, r3
 800e016:	2b00      	cmp	r3, #0
 800e018:	dc23      	bgt.n	800e062 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e01a:	4b21      	ldr	r3, [pc, #132]	@ (800e0a0 <tcp_timewait_input+0xdc>)
 800e01c:	6819      	ldr	r1, [r3, #0]
 800e01e:	4b21      	ldr	r3, [pc, #132]	@ (800e0a4 <tcp_timewait_input+0xe0>)
 800e020:	881b      	ldrh	r3, [r3, #0]
 800e022:	461a      	mov	r2, r3
 800e024:	4b1d      	ldr	r3, [pc, #116]	@ (800e09c <tcp_timewait_input+0xd8>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e02a:	4b1f      	ldr	r3, [pc, #124]	@ (800e0a8 <tcp_timewait_input+0xe4>)
 800e02c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e02e:	885b      	ldrh	r3, [r3, #2]
 800e030:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e032:	4a1d      	ldr	r2, [pc, #116]	@ (800e0a8 <tcp_timewait_input+0xe4>)
 800e034:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e036:	8812      	ldrh	r2, [r2, #0]
 800e038:	b292      	uxth	r2, r2
 800e03a:	9202      	str	r2, [sp, #8]
 800e03c:	9301      	str	r3, [sp, #4]
 800e03e:	4b1b      	ldr	r3, [pc, #108]	@ (800e0ac <tcp_timewait_input+0xe8>)
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	4b1b      	ldr	r3, [pc, #108]	@ (800e0b0 <tcp_timewait_input+0xec>)
 800e044:	4602      	mov	r2, r0
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f002 fe6c 	bl	8010d24 <tcp_rst>
      return;
 800e04c:	e01b      	b.n	800e086 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e04e:	4b0f      	ldr	r3, [pc, #60]	@ (800e08c <tcp_timewait_input+0xc8>)
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	f003 0301 	and.w	r3, r3, #1
 800e056:	2b00      	cmp	r3, #0
 800e058:	d003      	beq.n	800e062 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e05a:	4b16      	ldr	r3, [pc, #88]	@ (800e0b4 <tcp_timewait_input+0xf0>)
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e062:	4b10      	ldr	r3, [pc, #64]	@ (800e0a4 <tcp_timewait_input+0xe0>)
 800e064:	881b      	ldrh	r3, [r3, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d00c      	beq.n	800e084 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	8b5b      	ldrh	r3, [r3, #26]
 800e06e:	f043 0302 	orr.w	r3, r3, #2
 800e072:	b29a      	uxth	r2, r3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f002 f89f 	bl	80101bc <tcp_output>
  }
  return;
 800e07e:	e001      	b.n	800e084 <tcp_timewait_input+0xc0>
    return;
 800e080:	bf00      	nop
 800e082:	e000      	b.n	800e086 <tcp_timewait_input+0xc2>
  return;
 800e084:	bf00      	nop
}
 800e086:	3708      	adds	r7, #8
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	2000b24c 	.word	0x2000b24c
 800e090:	080164d0 	.word	0x080164d0
 800e094:	080166e8 	.word	0x080166e8
 800e098:	0801651c 	.word	0x0801651c
 800e09c:	2000b240 	.word	0x2000b240
 800e0a0:	2000b244 	.word	0x2000b244
 800e0a4:	2000b24a 	.word	0x2000b24a
 800e0a8:	2000b230 	.word	0x2000b230
 800e0ac:	20005ae8 	.word	0x20005ae8
 800e0b0:	20005aec 	.word	0x20005aec
 800e0b4:	2000b208 	.word	0x2000b208

0800e0b8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e0b8:	b590      	push	{r4, r7, lr}
 800e0ba:	b08d      	sub	sp, #52	@ 0x34
 800e0bc:	af04      	add	r7, sp, #16
 800e0be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d106      	bne.n	800e0dc <tcp_process+0x24>
 800e0ce:	4b9d      	ldr	r3, [pc, #628]	@ (800e344 <tcp_process+0x28c>)
 800e0d0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800e0d4:	499c      	ldr	r1, [pc, #624]	@ (800e348 <tcp_process+0x290>)
 800e0d6:	489d      	ldr	r0, [pc, #628]	@ (800e34c <tcp_process+0x294>)
 800e0d8:	f006 f9cc 	bl	8014474 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e0dc:	4b9c      	ldr	r3, [pc, #624]	@ (800e350 <tcp_process+0x298>)
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	f003 0304 	and.w	r3, r3, #4
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d04e      	beq.n	800e186 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	7d1b      	ldrb	r3, [r3, #20]
 800e0ec:	2b02      	cmp	r3, #2
 800e0ee:	d108      	bne.n	800e102 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e0f4:	4b97      	ldr	r3, [pc, #604]	@ (800e354 <tcp_process+0x29c>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d123      	bne.n	800e144 <tcp_process+0x8c>
        acceptable = 1;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	76fb      	strb	r3, [r7, #27]
 800e100:	e020      	b.n	800e144 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e106:	4b94      	ldr	r3, [pc, #592]	@ (800e358 <tcp_process+0x2a0>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d102      	bne.n	800e114 <tcp_process+0x5c>
        acceptable = 1;
 800e10e:	2301      	movs	r3, #1
 800e110:	76fb      	strb	r3, [r7, #27]
 800e112:	e017      	b.n	800e144 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e114:	4b90      	ldr	r3, [pc, #576]	@ (800e358 <tcp_process+0x2a0>)
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e11c:	1ad3      	subs	r3, r2, r3
 800e11e:	2b00      	cmp	r3, #0
 800e120:	db10      	blt.n	800e144 <tcp_process+0x8c>
 800e122:	4b8d      	ldr	r3, [pc, #564]	@ (800e358 <tcp_process+0x2a0>)
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e12a:	6879      	ldr	r1, [r7, #4]
 800e12c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e12e:	440b      	add	r3, r1
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	2b00      	cmp	r3, #0
 800e134:	dc06      	bgt.n	800e144 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	8b5b      	ldrh	r3, [r3, #26]
 800e13a:	f043 0302 	orr.w	r3, r3, #2
 800e13e:	b29a      	uxth	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e144:	7efb      	ldrb	r3, [r7, #27]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d01b      	beq.n	800e182 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	7d1b      	ldrb	r3, [r3, #20]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d106      	bne.n	800e160 <tcp_process+0xa8>
 800e152:	4b7c      	ldr	r3, [pc, #496]	@ (800e344 <tcp_process+0x28c>)
 800e154:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800e158:	4980      	ldr	r1, [pc, #512]	@ (800e35c <tcp_process+0x2a4>)
 800e15a:	487c      	ldr	r0, [pc, #496]	@ (800e34c <tcp_process+0x294>)
 800e15c:	f006 f98a 	bl	8014474 <iprintf>
      recv_flags |= TF_RESET;
 800e160:	4b7f      	ldr	r3, [pc, #508]	@ (800e360 <tcp_process+0x2a8>)
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	f043 0308 	orr.w	r3, r3, #8
 800e168:	b2da      	uxtb	r2, r3
 800e16a:	4b7d      	ldr	r3, [pc, #500]	@ (800e360 <tcp_process+0x2a8>)
 800e16c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	8b5b      	ldrh	r3, [r3, #26]
 800e172:	f023 0301 	bic.w	r3, r3, #1
 800e176:	b29a      	uxth	r2, r3
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e17c:	f06f 030d 	mvn.w	r3, #13
 800e180:	e37a      	b.n	800e878 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e182:	2300      	movs	r3, #0
 800e184:	e378      	b.n	800e878 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e186:	4b72      	ldr	r3, [pc, #456]	@ (800e350 <tcp_process+0x298>)
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	f003 0302 	and.w	r3, r3, #2
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d010      	beq.n	800e1b4 <tcp_process+0xfc>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	7d1b      	ldrb	r3, [r3, #20]
 800e196:	2b02      	cmp	r3, #2
 800e198:	d00c      	beq.n	800e1b4 <tcp_process+0xfc>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	7d1b      	ldrb	r3, [r3, #20]
 800e19e:	2b03      	cmp	r3, #3
 800e1a0:	d008      	beq.n	800e1b4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	8b5b      	ldrh	r3, [r3, #26]
 800e1a6:	f043 0302 	orr.w	r3, r3, #2
 800e1aa:	b29a      	uxth	r2, r3
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	e361      	b.n	800e878 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	8b5b      	ldrh	r3, [r3, #26]
 800e1b8:	f003 0310 	and.w	r3, r3, #16
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d103      	bne.n	800e1c8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e1c0:	4b68      	ldr	r3, [pc, #416]	@ (800e364 <tcp_process+0x2ac>)
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f001 fc2b 	bl	800fa34 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	7d1b      	ldrb	r3, [r3, #20]
 800e1e2:	3b02      	subs	r3, #2
 800e1e4:	2b07      	cmp	r3, #7
 800e1e6:	f200 8337 	bhi.w	800e858 <tcp_process+0x7a0>
 800e1ea:	a201      	add	r2, pc, #4	@ (adr r2, 800e1f0 <tcp_process+0x138>)
 800e1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f0:	0800e211 	.word	0x0800e211
 800e1f4:	0800e441 	.word	0x0800e441
 800e1f8:	0800e5b9 	.word	0x0800e5b9
 800e1fc:	0800e5e3 	.word	0x0800e5e3
 800e200:	0800e707 	.word	0x0800e707
 800e204:	0800e5b9 	.word	0x0800e5b9
 800e208:	0800e793 	.word	0x0800e793
 800e20c:	0800e823 	.word	0x0800e823
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e210:	4b4f      	ldr	r3, [pc, #316]	@ (800e350 <tcp_process+0x298>)
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	f003 0310 	and.w	r3, r3, #16
 800e218:	2b00      	cmp	r3, #0
 800e21a:	f000 80e4 	beq.w	800e3e6 <tcp_process+0x32e>
 800e21e:	4b4c      	ldr	r3, [pc, #304]	@ (800e350 <tcp_process+0x298>)
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	f003 0302 	and.w	r3, r3, #2
 800e226:	2b00      	cmp	r3, #0
 800e228:	f000 80dd 	beq.w	800e3e6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e230:	1c5a      	adds	r2, r3, #1
 800e232:	4b48      	ldr	r3, [pc, #288]	@ (800e354 <tcp_process+0x29c>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	429a      	cmp	r2, r3
 800e238:	f040 80d5 	bne.w	800e3e6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e23c:	4b46      	ldr	r3, [pc, #280]	@ (800e358 <tcp_process+0x2a0>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	1c5a      	adds	r2, r3, #1
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800e24e:	4b41      	ldr	r3, [pc, #260]	@ (800e354 <tcp_process+0x29c>)
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e256:	4b44      	ldr	r3, [pc, #272]	@ (800e368 <tcp_process+0x2b0>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	89db      	ldrh	r3, [r3, #14]
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e270:	4b39      	ldr	r3, [pc, #228]	@ (800e358 <tcp_process+0x2a0>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	1e5a      	subs	r2, r3, #1
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2204      	movs	r2, #4
 800e27e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	3304      	adds	r3, #4
 800e288:	4618      	mov	r0, r3
 800e28a:	f004 fe07 	bl	8012e9c <ip4_route>
 800e28e:	4601      	mov	r1, r0
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	3304      	adds	r3, #4
 800e294:	461a      	mov	r2, r3
 800e296:	4620      	mov	r0, r4
 800e298:	f7ff f88c 	bl	800d3b4 <tcp_eff_send_mss_netif>
 800e29c:	4603      	mov	r3, r0
 800e29e:	461a      	mov	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e2a8:	009a      	lsls	r2, r3, #2
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e2ae:	005b      	lsls	r3, r3, #1
 800e2b0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e2b4:	428b      	cmp	r3, r1
 800e2b6:	bf38      	it	cc
 800e2b8:	460b      	movcc	r3, r1
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d204      	bcs.n	800e2c8 <tcp_process+0x210>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	e00d      	b.n	800e2e4 <tcp_process+0x22c>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e2cc:	005b      	lsls	r3, r3, #1
 800e2ce:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d904      	bls.n	800e2e0 <tcp_process+0x228>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e2da:	005b      	lsls	r3, r3, #1
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	e001      	b.n	800e2e4 <tcp_process+0x22c>
 800e2e0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d106      	bne.n	800e302 <tcp_process+0x24a>
 800e2f4:	4b13      	ldr	r3, [pc, #76]	@ (800e344 <tcp_process+0x28c>)
 800e2f6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800e2fa:	491c      	ldr	r1, [pc, #112]	@ (800e36c <tcp_process+0x2b4>)
 800e2fc:	4813      	ldr	r0, [pc, #76]	@ (800e34c <tcp_process+0x294>)
 800e2fe:	f006 f8b9 	bl	8014474 <iprintf>
        --pcb->snd_queuelen;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e308:	3b01      	subs	r3, #1
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e316:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d12a      	bne.n	800e374 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e322:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d106      	bne.n	800e338 <tcp_process+0x280>
 800e32a:	4b06      	ldr	r3, [pc, #24]	@ (800e344 <tcp_process+0x28c>)
 800e32c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800e330:	490f      	ldr	r1, [pc, #60]	@ (800e370 <tcp_process+0x2b8>)
 800e332:	4806      	ldr	r0, [pc, #24]	@ (800e34c <tcp_process+0x294>)
 800e334:	f006 f89e 	bl	8014474 <iprintf>
          pcb->unsent = rseg->next;
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	681a      	ldr	r2, [r3, #0]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e340:	e01c      	b.n	800e37c <tcp_process+0x2c4>
 800e342:	bf00      	nop
 800e344:	080164d0 	.word	0x080164d0
 800e348:	08016708 	.word	0x08016708
 800e34c:	0801651c 	.word	0x0801651c
 800e350:	2000b24c 	.word	0x2000b24c
 800e354:	2000b244 	.word	0x2000b244
 800e358:	2000b240 	.word	0x2000b240
 800e35c:	08016724 	.word	0x08016724
 800e360:	2000b24d 	.word	0x2000b24d
 800e364:	2000b208 	.word	0x2000b208
 800e368:	2000b230 	.word	0x2000b230
 800e36c:	08016744 	.word	0x08016744
 800e370:	0801675c 	.word	0x0801675c
        } else {
          pcb->unacked = rseg->next;
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800e37c:	69f8      	ldr	r0, [r7, #28]
 800e37e:	f7fe fd22 	bl	800cdc6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e386:	2b00      	cmp	r3, #0
 800e388:	d104      	bne.n	800e394 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e390:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e392:	e006      	b.n	800e3a2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00a      	beq.n	800e3c2 <tcp_process+0x30a>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	6910      	ldr	r0, [r2, #16]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	6879      	ldr	r1, [r7, #4]
 800e3ba:	4798      	blx	r3
 800e3bc:	4603      	mov	r3, r0
 800e3be:	76bb      	strb	r3, [r7, #26]
 800e3c0:	e001      	b.n	800e3c6 <tcp_process+0x30e>
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e3c6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e3ca:	f113 0f0d 	cmn.w	r3, #13
 800e3ce:	d102      	bne.n	800e3d6 <tcp_process+0x31e>
          return ERR_ABRT;
 800e3d0:	f06f 030c 	mvn.w	r3, #12
 800e3d4:	e250      	b.n	800e878 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	8b5b      	ldrh	r3, [r3, #26]
 800e3da:	f043 0302 	orr.w	r3, r3, #2
 800e3de:	b29a      	uxth	r2, r3
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e3e4:	e23a      	b.n	800e85c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e3e6:	4b98      	ldr	r3, [pc, #608]	@ (800e648 <tcp_process+0x590>)
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	f003 0310 	and.w	r3, r3, #16
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	f000 8234 	beq.w	800e85c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3f4:	4b95      	ldr	r3, [pc, #596]	@ (800e64c <tcp_process+0x594>)
 800e3f6:	6819      	ldr	r1, [r3, #0]
 800e3f8:	4b95      	ldr	r3, [pc, #596]	@ (800e650 <tcp_process+0x598>)
 800e3fa:	881b      	ldrh	r3, [r3, #0]
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	4b95      	ldr	r3, [pc, #596]	@ (800e654 <tcp_process+0x59c>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e404:	4b94      	ldr	r3, [pc, #592]	@ (800e658 <tcp_process+0x5a0>)
 800e406:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e408:	885b      	ldrh	r3, [r3, #2]
 800e40a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e40c:	4a92      	ldr	r2, [pc, #584]	@ (800e658 <tcp_process+0x5a0>)
 800e40e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e410:	8812      	ldrh	r2, [r2, #0]
 800e412:	b292      	uxth	r2, r2
 800e414:	9202      	str	r2, [sp, #8]
 800e416:	9301      	str	r3, [sp, #4]
 800e418:	4b90      	ldr	r3, [pc, #576]	@ (800e65c <tcp_process+0x5a4>)
 800e41a:	9300      	str	r3, [sp, #0]
 800e41c:	4b90      	ldr	r3, [pc, #576]	@ (800e660 <tcp_process+0x5a8>)
 800e41e:	4602      	mov	r2, r0
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f002 fc7f 	bl	8010d24 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e42c:	2b05      	cmp	r3, #5
 800e42e:	f200 8215 	bhi.w	800e85c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2200      	movs	r2, #0
 800e436:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f002 fa4b 	bl	80108d4 <tcp_rexmit_rto>
      break;
 800e43e:	e20d      	b.n	800e85c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e440:	4b81      	ldr	r3, [pc, #516]	@ (800e648 <tcp_process+0x590>)
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	f003 0310 	and.w	r3, r3, #16
 800e448:	2b00      	cmp	r3, #0
 800e44a:	f000 80a1 	beq.w	800e590 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e44e:	4b7f      	ldr	r3, [pc, #508]	@ (800e64c <tcp_process+0x594>)
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e456:	1ad3      	subs	r3, r2, r3
 800e458:	3b01      	subs	r3, #1
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	db7e      	blt.n	800e55c <tcp_process+0x4a4>
 800e45e:	4b7b      	ldr	r3, [pc, #492]	@ (800e64c <tcp_process+0x594>)
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e466:	1ad3      	subs	r3, r2, r3
 800e468:	2b00      	cmp	r3, #0
 800e46a:	dc77      	bgt.n	800e55c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2204      	movs	r2, #4
 800e470:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e476:	2b00      	cmp	r3, #0
 800e478:	d102      	bne.n	800e480 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e47a:	23fa      	movs	r3, #250	@ 0xfa
 800e47c:	76bb      	strb	r3, [r7, #26]
 800e47e:	e01d      	b.n	800e4bc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e484:	699b      	ldr	r3, [r3, #24]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d106      	bne.n	800e498 <tcp_process+0x3e0>
 800e48a:	4b76      	ldr	r3, [pc, #472]	@ (800e664 <tcp_process+0x5ac>)
 800e48c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800e490:	4975      	ldr	r1, [pc, #468]	@ (800e668 <tcp_process+0x5b0>)
 800e492:	4876      	ldr	r0, [pc, #472]	@ (800e66c <tcp_process+0x5b4>)
 800e494:	f005 ffee 	bl	8014474 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e49c:	699b      	ldr	r3, [r3, #24]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00a      	beq.n	800e4b8 <tcp_process+0x400>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e4a6:	699b      	ldr	r3, [r3, #24]
 800e4a8:	687a      	ldr	r2, [r7, #4]
 800e4aa:	6910      	ldr	r0, [r2, #16]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	6879      	ldr	r1, [r7, #4]
 800e4b0:	4798      	blx	r3
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	76bb      	strb	r3, [r7, #26]
 800e4b6:	e001      	b.n	800e4bc <tcp_process+0x404>
 800e4b8:	23f0      	movs	r3, #240	@ 0xf0
 800e4ba:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e4bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d00a      	beq.n	800e4da <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e4c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e4c8:	f113 0f0d 	cmn.w	r3, #13
 800e4cc:	d002      	beq.n	800e4d4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f7fd ff8c 	bl	800c3ec <tcp_abort>
            }
            return ERR_ABRT;
 800e4d4:	f06f 030c 	mvn.w	r3, #12
 800e4d8:	e1ce      	b.n	800e878 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 fae0 	bl	800eaa0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e4e0:	4b63      	ldr	r3, [pc, #396]	@ (800e670 <tcp_process+0x5b8>)
 800e4e2:	881b      	ldrh	r3, [r3, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d005      	beq.n	800e4f4 <tcp_process+0x43c>
            recv_acked--;
 800e4e8:	4b61      	ldr	r3, [pc, #388]	@ (800e670 <tcp_process+0x5b8>)
 800e4ea:	881b      	ldrh	r3, [r3, #0]
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	b29a      	uxth	r2, r3
 800e4f0:	4b5f      	ldr	r3, [pc, #380]	@ (800e670 <tcp_process+0x5b8>)
 800e4f2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4f8:	009a      	lsls	r2, r3, #2
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4fe:	005b      	lsls	r3, r3, #1
 800e500:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e504:	428b      	cmp	r3, r1
 800e506:	bf38      	it	cc
 800e508:	460b      	movcc	r3, r1
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d204      	bcs.n	800e518 <tcp_process+0x460>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	b29b      	uxth	r3, r3
 800e516:	e00d      	b.n	800e534 <tcp_process+0x47c>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e51c:	005b      	lsls	r3, r3, #1
 800e51e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e522:	4293      	cmp	r3, r2
 800e524:	d904      	bls.n	800e530 <tcp_process+0x478>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e52a:	005b      	lsls	r3, r3, #1
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	e001      	b.n	800e534 <tcp_process+0x47c>
 800e530:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e53a:	4b4e      	ldr	r3, [pc, #312]	@ (800e674 <tcp_process+0x5bc>)
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	f003 0320 	and.w	r3, r3, #32
 800e542:	2b00      	cmp	r3, #0
 800e544:	d037      	beq.n	800e5b6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	8b5b      	ldrh	r3, [r3, #26]
 800e54a:	f043 0302 	orr.w	r3, r3, #2
 800e54e:	b29a      	uxth	r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2207      	movs	r2, #7
 800e558:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e55a:	e02c      	b.n	800e5b6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e55c:	4b3b      	ldr	r3, [pc, #236]	@ (800e64c <tcp_process+0x594>)
 800e55e:	6819      	ldr	r1, [r3, #0]
 800e560:	4b3b      	ldr	r3, [pc, #236]	@ (800e650 <tcp_process+0x598>)
 800e562:	881b      	ldrh	r3, [r3, #0]
 800e564:	461a      	mov	r2, r3
 800e566:	4b3b      	ldr	r3, [pc, #236]	@ (800e654 <tcp_process+0x59c>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e56c:	4b3a      	ldr	r3, [pc, #232]	@ (800e658 <tcp_process+0x5a0>)
 800e56e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e570:	885b      	ldrh	r3, [r3, #2]
 800e572:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e574:	4a38      	ldr	r2, [pc, #224]	@ (800e658 <tcp_process+0x5a0>)
 800e576:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e578:	8812      	ldrh	r2, [r2, #0]
 800e57a:	b292      	uxth	r2, r2
 800e57c:	9202      	str	r2, [sp, #8]
 800e57e:	9301      	str	r3, [sp, #4]
 800e580:	4b36      	ldr	r3, [pc, #216]	@ (800e65c <tcp_process+0x5a4>)
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	4b36      	ldr	r3, [pc, #216]	@ (800e660 <tcp_process+0x5a8>)
 800e586:	4602      	mov	r2, r0
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f002 fbcb 	bl	8010d24 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e58e:	e167      	b.n	800e860 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e590:	4b2d      	ldr	r3, [pc, #180]	@ (800e648 <tcp_process+0x590>)
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	f003 0302 	and.w	r3, r3, #2
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f000 8161 	beq.w	800e860 <tcp_process+0x7a8>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5a2:	1e5a      	subs	r2, r3, #1
 800e5a4:	4b2b      	ldr	r3, [pc, #172]	@ (800e654 <tcp_process+0x59c>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	f040 8159 	bne.w	800e860 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f002 f9b2 	bl	8010918 <tcp_rexmit>
      break;
 800e5b4:	e154      	b.n	800e860 <tcp_process+0x7a8>
 800e5b6:	e153      	b.n	800e860 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f000 fa71 	bl	800eaa0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e5be:	4b2d      	ldr	r3, [pc, #180]	@ (800e674 <tcp_process+0x5bc>)
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	f003 0320 	and.w	r3, r3, #32
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	f000 814c 	beq.w	800e864 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	8b5b      	ldrh	r3, [r3, #26]
 800e5d0:	f043 0302 	orr.w	r3, r3, #2
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2207      	movs	r2, #7
 800e5de:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e5e0:	e140      	b.n	800e864 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 fa5c 	bl	800eaa0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e5e8:	4b22      	ldr	r3, [pc, #136]	@ (800e674 <tcp_process+0x5bc>)
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	f003 0320 	and.w	r3, r3, #32
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d071      	beq.n	800e6d8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e5f4:	4b14      	ldr	r3, [pc, #80]	@ (800e648 <tcp_process+0x590>)
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	f003 0310 	and.w	r3, r3, #16
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d060      	beq.n	800e6c2 <tcp_process+0x60a>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e604:	4b11      	ldr	r3, [pc, #68]	@ (800e64c <tcp_process+0x594>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	429a      	cmp	r2, r3
 800e60a:	d15a      	bne.n	800e6c2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e610:	2b00      	cmp	r3, #0
 800e612:	d156      	bne.n	800e6c2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	8b5b      	ldrh	r3, [r3, #26]
 800e618:	f043 0302 	orr.w	r3, r3, #2
 800e61c:	b29a      	uxth	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f7fe fdbc 	bl	800d1a0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e628:	4b13      	ldr	r3, [pc, #76]	@ (800e678 <tcp_process+0x5c0>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d105      	bne.n	800e63e <tcp_process+0x586>
 800e632:	4b11      	ldr	r3, [pc, #68]	@ (800e678 <tcp_process+0x5c0>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	4a0f      	ldr	r2, [pc, #60]	@ (800e678 <tcp_process+0x5c0>)
 800e63a:	6013      	str	r3, [r2, #0]
 800e63c:	e02e      	b.n	800e69c <tcp_process+0x5e4>
 800e63e:	4b0e      	ldr	r3, [pc, #56]	@ (800e678 <tcp_process+0x5c0>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	617b      	str	r3, [r7, #20]
 800e644:	e027      	b.n	800e696 <tcp_process+0x5de>
 800e646:	bf00      	nop
 800e648:	2000b24c 	.word	0x2000b24c
 800e64c:	2000b244 	.word	0x2000b244
 800e650:	2000b24a 	.word	0x2000b24a
 800e654:	2000b240 	.word	0x2000b240
 800e658:	2000b230 	.word	0x2000b230
 800e65c:	20005ae8 	.word	0x20005ae8
 800e660:	20005aec 	.word	0x20005aec
 800e664:	080164d0 	.word	0x080164d0
 800e668:	08016770 	.word	0x08016770
 800e66c:	0801651c 	.word	0x0801651c
 800e670:	2000b248 	.word	0x2000b248
 800e674:	2000b24d 	.word	0x2000b24d
 800e678:	2000b214 	.word	0x2000b214
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	429a      	cmp	r2, r3
 800e684:	d104      	bne.n	800e690 <tcp_process+0x5d8>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	68da      	ldr	r2, [r3, #12]
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	60da      	str	r2, [r3, #12]
 800e68e:	e005      	b.n	800e69c <tcp_process+0x5e4>
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	68db      	ldr	r3, [r3, #12]
 800e694:	617b      	str	r3, [r7, #20]
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d1ef      	bne.n	800e67c <tcp_process+0x5c4>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	60da      	str	r2, [r3, #12]
 800e6a2:	4b77      	ldr	r3, [pc, #476]	@ (800e880 <tcp_process+0x7c8>)
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	220a      	movs	r2, #10
 800e6ac:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e6ae:	4b75      	ldr	r3, [pc, #468]	@ (800e884 <tcp_process+0x7cc>)
 800e6b0:	681a      	ldr	r2, [r3, #0]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	60da      	str	r2, [r3, #12]
 800e6b6:	4a73      	ldr	r2, [pc, #460]	@ (800e884 <tcp_process+0x7cc>)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6013      	str	r3, [r2, #0]
 800e6bc:	f002 fcf4 	bl	80110a8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e6c0:	e0d2      	b.n	800e868 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	8b5b      	ldrh	r3, [r3, #26]
 800e6c6:	f043 0302 	orr.w	r3, r3, #2
 800e6ca:	b29a      	uxth	r2, r3
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2208      	movs	r2, #8
 800e6d4:	751a      	strb	r2, [r3, #20]
      break;
 800e6d6:	e0c7      	b.n	800e868 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e6d8:	4b6b      	ldr	r3, [pc, #428]	@ (800e888 <tcp_process+0x7d0>)
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	f003 0310 	and.w	r3, r3, #16
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	f000 80c1 	beq.w	800e868 <tcp_process+0x7b0>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e6ea:	4b68      	ldr	r3, [pc, #416]	@ (800e88c <tcp_process+0x7d4>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	f040 80ba 	bne.w	800e868 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	f040 80b5 	bne.w	800e868 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2206      	movs	r2, #6
 800e702:	751a      	strb	r2, [r3, #20]
      break;
 800e704:	e0b0      	b.n	800e868 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 f9ca 	bl	800eaa0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e70c:	4b60      	ldr	r3, [pc, #384]	@ (800e890 <tcp_process+0x7d8>)
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	f003 0320 	and.w	r3, r3, #32
 800e714:	2b00      	cmp	r3, #0
 800e716:	f000 80a9 	beq.w	800e86c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	8b5b      	ldrh	r3, [r3, #26]
 800e71e:	f043 0302 	orr.w	r3, r3, #2
 800e722:	b29a      	uxth	r2, r3
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f7fe fd39 	bl	800d1a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e72e:	4b59      	ldr	r3, [pc, #356]	@ (800e894 <tcp_process+0x7dc>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	687a      	ldr	r2, [r7, #4]
 800e734:	429a      	cmp	r2, r3
 800e736:	d105      	bne.n	800e744 <tcp_process+0x68c>
 800e738:	4b56      	ldr	r3, [pc, #344]	@ (800e894 <tcp_process+0x7dc>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	4a55      	ldr	r2, [pc, #340]	@ (800e894 <tcp_process+0x7dc>)
 800e740:	6013      	str	r3, [r2, #0]
 800e742:	e013      	b.n	800e76c <tcp_process+0x6b4>
 800e744:	4b53      	ldr	r3, [pc, #332]	@ (800e894 <tcp_process+0x7dc>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	613b      	str	r3, [r7, #16]
 800e74a:	e00c      	b.n	800e766 <tcp_process+0x6ae>
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	687a      	ldr	r2, [r7, #4]
 800e752:	429a      	cmp	r2, r3
 800e754:	d104      	bne.n	800e760 <tcp_process+0x6a8>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	68da      	ldr	r2, [r3, #12]
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	60da      	str	r2, [r3, #12]
 800e75e:	e005      	b.n	800e76c <tcp_process+0x6b4>
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	613b      	str	r3, [r7, #16]
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1ef      	bne.n	800e74c <tcp_process+0x694>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2200      	movs	r2, #0
 800e770:	60da      	str	r2, [r3, #12]
 800e772:	4b43      	ldr	r3, [pc, #268]	@ (800e880 <tcp_process+0x7c8>)
 800e774:	2201      	movs	r2, #1
 800e776:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	220a      	movs	r2, #10
 800e77c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e77e:	4b41      	ldr	r3, [pc, #260]	@ (800e884 <tcp_process+0x7cc>)
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	60da      	str	r2, [r3, #12]
 800e786:	4a3f      	ldr	r2, [pc, #252]	@ (800e884 <tcp_process+0x7cc>)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6013      	str	r3, [r2, #0]
 800e78c:	f002 fc8c 	bl	80110a8 <tcp_timer_needed>
      }
      break;
 800e790:	e06c      	b.n	800e86c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 f984 	bl	800eaa0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e798:	4b3b      	ldr	r3, [pc, #236]	@ (800e888 <tcp_process+0x7d0>)
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	f003 0310 	and.w	r3, r3, #16
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d065      	beq.n	800e870 <tcp_process+0x7b8>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e7a8:	4b38      	ldr	r3, [pc, #224]	@ (800e88c <tcp_process+0x7d4>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d15f      	bne.n	800e870 <tcp_process+0x7b8>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d15b      	bne.n	800e870 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7fe fcf1 	bl	800d1a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e7be:	4b35      	ldr	r3, [pc, #212]	@ (800e894 <tcp_process+0x7dc>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d105      	bne.n	800e7d4 <tcp_process+0x71c>
 800e7c8:	4b32      	ldr	r3, [pc, #200]	@ (800e894 <tcp_process+0x7dc>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	4a31      	ldr	r2, [pc, #196]	@ (800e894 <tcp_process+0x7dc>)
 800e7d0:	6013      	str	r3, [r2, #0]
 800e7d2:	e013      	b.n	800e7fc <tcp_process+0x744>
 800e7d4:	4b2f      	ldr	r3, [pc, #188]	@ (800e894 <tcp_process+0x7dc>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	60fb      	str	r3, [r7, #12]
 800e7da:	e00c      	b.n	800e7f6 <tcp_process+0x73e>
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	68db      	ldr	r3, [r3, #12]
 800e7e0:	687a      	ldr	r2, [r7, #4]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d104      	bne.n	800e7f0 <tcp_process+0x738>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	68da      	ldr	r2, [r3, #12]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	60da      	str	r2, [r3, #12]
 800e7ee:	e005      	b.n	800e7fc <tcp_process+0x744>
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	68db      	ldr	r3, [r3, #12]
 800e7f4:	60fb      	str	r3, [r7, #12]
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d1ef      	bne.n	800e7dc <tcp_process+0x724>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2200      	movs	r2, #0
 800e800:	60da      	str	r2, [r3, #12]
 800e802:	4b1f      	ldr	r3, [pc, #124]	@ (800e880 <tcp_process+0x7c8>)
 800e804:	2201      	movs	r2, #1
 800e806:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	220a      	movs	r2, #10
 800e80c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e80e:	4b1d      	ldr	r3, [pc, #116]	@ (800e884 <tcp_process+0x7cc>)
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	60da      	str	r2, [r3, #12]
 800e816:	4a1b      	ldr	r2, [pc, #108]	@ (800e884 <tcp_process+0x7cc>)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6013      	str	r3, [r2, #0]
 800e81c:	f002 fc44 	bl	80110a8 <tcp_timer_needed>
      }
      break;
 800e820:	e026      	b.n	800e870 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f000 f93c 	bl	800eaa0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e828:	4b17      	ldr	r3, [pc, #92]	@ (800e888 <tcp_process+0x7d0>)
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	f003 0310 	and.w	r3, r3, #16
 800e830:	2b00      	cmp	r3, #0
 800e832:	d01f      	beq.n	800e874 <tcp_process+0x7bc>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e838:	4b14      	ldr	r3, [pc, #80]	@ (800e88c <tcp_process+0x7d4>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d119      	bne.n	800e874 <tcp_process+0x7bc>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e844:	2b00      	cmp	r3, #0
 800e846:	d115      	bne.n	800e874 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e848:	4b11      	ldr	r3, [pc, #68]	@ (800e890 <tcp_process+0x7d8>)
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	f043 0310 	orr.w	r3, r3, #16
 800e850:	b2da      	uxtb	r2, r3
 800e852:	4b0f      	ldr	r3, [pc, #60]	@ (800e890 <tcp_process+0x7d8>)
 800e854:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e856:	e00d      	b.n	800e874 <tcp_process+0x7bc>
    default:
      break;
 800e858:	bf00      	nop
 800e85a:	e00c      	b.n	800e876 <tcp_process+0x7be>
      break;
 800e85c:	bf00      	nop
 800e85e:	e00a      	b.n	800e876 <tcp_process+0x7be>
      break;
 800e860:	bf00      	nop
 800e862:	e008      	b.n	800e876 <tcp_process+0x7be>
      break;
 800e864:	bf00      	nop
 800e866:	e006      	b.n	800e876 <tcp_process+0x7be>
      break;
 800e868:	bf00      	nop
 800e86a:	e004      	b.n	800e876 <tcp_process+0x7be>
      break;
 800e86c:	bf00      	nop
 800e86e:	e002      	b.n	800e876 <tcp_process+0x7be>
      break;
 800e870:	bf00      	nop
 800e872:	e000      	b.n	800e876 <tcp_process+0x7be>
      break;
 800e874:	bf00      	nop
  }
  return ERR_OK;
 800e876:	2300      	movs	r3, #0
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3724      	adds	r7, #36	@ 0x24
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd90      	pop	{r4, r7, pc}
 800e880:	2000b21c 	.word	0x2000b21c
 800e884:	2000b218 	.word	0x2000b218
 800e888:	2000b24c 	.word	0x2000b24c
 800e88c:	2000b244 	.word	0x2000b244
 800e890:	2000b24d 	.word	0x2000b24d
 800e894:	2000b214 	.word	0x2000b214

0800e898 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e898:	b590      	push	{r4, r7, lr}
 800e89a:	b085      	sub	sp, #20
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d106      	bne.n	800e8b6 <tcp_oos_insert_segment+0x1e>
 800e8a8:	4b3b      	ldr	r3, [pc, #236]	@ (800e998 <tcp_oos_insert_segment+0x100>)
 800e8aa:	f240 421f 	movw	r2, #1055	@ 0x41f
 800e8ae:	493b      	ldr	r1, [pc, #236]	@ (800e99c <tcp_oos_insert_segment+0x104>)
 800e8b0:	483b      	ldr	r0, [pc, #236]	@ (800e9a0 <tcp_oos_insert_segment+0x108>)
 800e8b2:	f005 fddf 	bl	8014474 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	68db      	ldr	r3, [r3, #12]
 800e8ba:	899b      	ldrh	r3, [r3, #12]
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7fb fc0c 	bl	800a0dc <lwip_htons>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	f003 0301 	and.w	r3, r3, #1
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d028      	beq.n	800e922 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e8d0:	6838      	ldr	r0, [r7, #0]
 800e8d2:	f7fe fa63 	bl	800cd9c <tcp_segs_free>
    next = NULL;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	603b      	str	r3, [r7, #0]
 800e8da:	e056      	b.n	800e98a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	899b      	ldrh	r3, [r3, #12]
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7fb fbf9 	bl	800a0dc <lwip_htons>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	f003 0301 	and.w	r3, r3, #1
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d00d      	beq.n	800e912 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	899b      	ldrh	r3, [r3, #12]
 800e8fc:	b29c      	uxth	r4, r3
 800e8fe:	2001      	movs	r0, #1
 800e900:	f7fb fbec 	bl	800a0dc <lwip_htons>
 800e904:	4603      	mov	r3, r0
 800e906:	461a      	mov	r2, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	4322      	orrs	r2, r4
 800e90e:	b292      	uxth	r2, r2
 800e910:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e91c:	68f8      	ldr	r0, [r7, #12]
 800e91e:	f7fe fa52 	bl	800cdc6 <tcp_seg_free>
    while (next &&
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d00e      	beq.n	800e946 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	891b      	ldrh	r3, [r3, #8]
 800e92c:	461a      	mov	r2, r3
 800e92e:	4b1d      	ldr	r3, [pc, #116]	@ (800e9a4 <tcp_oos_insert_segment+0x10c>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	441a      	add	r2, r3
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	6839      	ldr	r1, [r7, #0]
 800e93c:	8909      	ldrh	r1, [r1, #8]
 800e93e:	440b      	add	r3, r1
 800e940:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e942:	2b00      	cmp	r3, #0
 800e944:	daca      	bge.n	800e8dc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d01e      	beq.n	800e98a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	891b      	ldrh	r3, [r3, #8]
 800e950:	461a      	mov	r2, r3
 800e952:	4b14      	ldr	r3, [pc, #80]	@ (800e9a4 <tcp_oos_insert_segment+0x10c>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	441a      	add	r2, r3
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e960:	2b00      	cmp	r3, #0
 800e962:	dd12      	ble.n	800e98a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	4b0d      	ldr	r3, [pc, #52]	@ (800e9a4 <tcp_oos_insert_segment+0x10c>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	b29b      	uxth	r3, r3
 800e972:	1ad3      	subs	r3, r2, r3
 800e974:	b29a      	uxth	r2, r3
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	685a      	ldr	r2, [r3, #4]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	891b      	ldrh	r3, [r3, #8]
 800e982:	4619      	mov	r1, r3
 800e984:	4610      	mov	r0, r2
 800e986:	f7fc fd81 	bl	800b48c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	683a      	ldr	r2, [r7, #0]
 800e98e:	601a      	str	r2, [r3, #0]
}
 800e990:	bf00      	nop
 800e992:	3714      	adds	r7, #20
 800e994:	46bd      	mov	sp, r7
 800e996:	bd90      	pop	{r4, r7, pc}
 800e998:	080164d0 	.word	0x080164d0
 800e99c:	08016790 	.word	0x08016790
 800e9a0:	0801651c 	.word	0x0801651c
 800e9a4:	2000b240 	.word	0x2000b240

0800e9a8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e9a8:	b5b0      	push	{r4, r5, r7, lr}
 800e9aa:	b086      	sub	sp, #24
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	607a      	str	r2, [r7, #4]
 800e9b4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e9b6:	e03e      	b.n	800ea36 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7fc ff6e 	bl	800b8a8 <pbuf_clen>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e9d6:	8a7a      	ldrh	r2, [r7, #18]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d906      	bls.n	800e9ea <tcp_free_acked_segments+0x42>
 800e9dc:	4b2a      	ldr	r3, [pc, #168]	@ (800ea88 <tcp_free_acked_segments+0xe0>)
 800e9de:	f240 4257 	movw	r2, #1111	@ 0x457
 800e9e2:	492a      	ldr	r1, [pc, #168]	@ (800ea8c <tcp_free_acked_segments+0xe4>)
 800e9e4:	482a      	ldr	r0, [pc, #168]	@ (800ea90 <tcp_free_acked_segments+0xe8>)
 800e9e6:	f005 fd45 	bl	8014474 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800e9f0:	8a7b      	ldrh	r3, [r7, #18]
 800e9f2:	1ad3      	subs	r3, r2, r3
 800e9f4:	b29a      	uxth	r2, r3
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	891a      	ldrh	r2, [r3, #8]
 800ea00:	4b24      	ldr	r3, [pc, #144]	@ (800ea94 <tcp_free_acked_segments+0xec>)
 800ea02:	881b      	ldrh	r3, [r3, #0]
 800ea04:	4413      	add	r3, r2
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	4b22      	ldr	r3, [pc, #136]	@ (800ea94 <tcp_free_acked_segments+0xec>)
 800ea0a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ea0c:	6978      	ldr	r0, [r7, #20]
 800ea0e:	f7fe f9da 	bl	800cdc6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00c      	beq.n	800ea36 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d109      	bne.n	800ea36 <tcp_free_acked_segments+0x8e>
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d106      	bne.n	800ea36 <tcp_free_acked_segments+0x8e>
 800ea28:	4b17      	ldr	r3, [pc, #92]	@ (800ea88 <tcp_free_acked_segments+0xe0>)
 800ea2a:	f240 4261 	movw	r2, #1121	@ 0x461
 800ea2e:	491a      	ldr	r1, [pc, #104]	@ (800ea98 <tcp_free_acked_segments+0xf0>)
 800ea30:	4817      	ldr	r0, [pc, #92]	@ (800ea90 <tcp_free_acked_segments+0xe8>)
 800ea32:	f005 fd1f 	bl	8014474 <iprintf>
  while (seg_list != NULL &&
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d020      	beq.n	800ea7e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7fb fb60 	bl	800a108 <lwip_htonl>
 800ea48:	4604      	mov	r4, r0
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	891b      	ldrh	r3, [r3, #8]
 800ea4e:	461d      	mov	r5, r3
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	68db      	ldr	r3, [r3, #12]
 800ea54:	899b      	ldrh	r3, [r3, #12]
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7fb fb3f 	bl	800a0dc <lwip_htons>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	f003 0303 	and.w	r3, r3, #3
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d001      	beq.n	800ea6e <tcp_free_acked_segments+0xc6>
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	e000      	b.n	800ea70 <tcp_free_acked_segments+0xc8>
 800ea6e:	2300      	movs	r3, #0
 800ea70:	442b      	add	r3, r5
 800ea72:	18e2      	adds	r2, r4, r3
 800ea74:	4b09      	ldr	r3, [pc, #36]	@ (800ea9c <tcp_free_acked_segments+0xf4>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	dd9c      	ble.n	800e9b8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ea7e:	68bb      	ldr	r3, [r7, #8]
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3718      	adds	r7, #24
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bdb0      	pop	{r4, r5, r7, pc}
 800ea88:	080164d0 	.word	0x080164d0
 800ea8c:	080167b8 	.word	0x080167b8
 800ea90:	0801651c 	.word	0x0801651c
 800ea94:	2000b248 	.word	0x2000b248
 800ea98:	080167e0 	.word	0x080167e0
 800ea9c:	2000b244 	.word	0x2000b244

0800eaa0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800eaa0:	b5b0      	push	{r4, r5, r7, lr}
 800eaa2:	b094      	sub	sp, #80	@ 0x50
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d106      	bne.n	800eac0 <tcp_receive+0x20>
 800eab2:	4b91      	ldr	r3, [pc, #580]	@ (800ecf8 <tcp_receive+0x258>)
 800eab4:	f240 427b 	movw	r2, #1147	@ 0x47b
 800eab8:	4990      	ldr	r1, [pc, #576]	@ (800ecfc <tcp_receive+0x25c>)
 800eaba:	4891      	ldr	r0, [pc, #580]	@ (800ed00 <tcp_receive+0x260>)
 800eabc:	f005 fcda 	bl	8014474 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	7d1b      	ldrb	r3, [r3, #20]
 800eac4:	2b03      	cmp	r3, #3
 800eac6:	d806      	bhi.n	800ead6 <tcp_receive+0x36>
 800eac8:	4b8b      	ldr	r3, [pc, #556]	@ (800ecf8 <tcp_receive+0x258>)
 800eaca:	f240 427c 	movw	r2, #1148	@ 0x47c
 800eace:	498d      	ldr	r1, [pc, #564]	@ (800ed04 <tcp_receive+0x264>)
 800ead0:	488b      	ldr	r0, [pc, #556]	@ (800ed00 <tcp_receive+0x260>)
 800ead2:	f005 fccf 	bl	8014474 <iprintf>

  if (flags & TCP_ACK) {
 800ead6:	4b8c      	ldr	r3, [pc, #560]	@ (800ed08 <tcp_receive+0x268>)
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	f003 0310 	and.w	r3, r3, #16
 800eade:	2b00      	cmp	r3, #0
 800eae0:	f000 8264 	beq.w	800efac <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eaea:	461a      	mov	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eaf0:	4413      	add	r3, r2
 800eaf2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eaf8:	4b84      	ldr	r3, [pc, #528]	@ (800ed0c <tcp_receive+0x26c>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	db1b      	blt.n	800eb3a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eb06:	4b81      	ldr	r3, [pc, #516]	@ (800ed0c <tcp_receive+0x26c>)
 800eb08:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d106      	bne.n	800eb1c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800eb12:	4b7f      	ldr	r3, [pc, #508]	@ (800ed10 <tcp_receive+0x270>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	1ad3      	subs	r3, r2, r3
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	db0e      	blt.n	800eb3a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800eb20:	4b7b      	ldr	r3, [pc, #492]	@ (800ed10 <tcp_receive+0x270>)
 800eb22:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d125      	bne.n	800eb74 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eb28:	4b7a      	ldr	r3, [pc, #488]	@ (800ed14 <tcp_receive+0x274>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	89db      	ldrh	r3, [r3, #14]
 800eb2e:	b29a      	uxth	r2, r3
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d91c      	bls.n	800eb74 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800eb3a:	4b76      	ldr	r3, [pc, #472]	@ (800ed14 <tcp_receive+0x274>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	89db      	ldrh	r3, [r3, #14]
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d205      	bcs.n	800eb64 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800eb64:	4b69      	ldr	r3, [pc, #420]	@ (800ed0c <tcp_receive+0x26c>)
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800eb6c:	4b68      	ldr	r3, [pc, #416]	@ (800ed10 <tcp_receive+0x270>)
 800eb6e:	681a      	ldr	r2, [r3, #0]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800eb74:	4b66      	ldr	r3, [pc, #408]	@ (800ed10 <tcp_receive+0x270>)
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb7c:	1ad3      	subs	r3, r2, r3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	dc58      	bgt.n	800ec34 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800eb82:	4b65      	ldr	r3, [pc, #404]	@ (800ed18 <tcp_receive+0x278>)
 800eb84:	881b      	ldrh	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d14b      	bne.n	800ec22 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800eb94:	4413      	add	r3, r2
 800eb96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d142      	bne.n	800ec22 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	db3d      	blt.n	800ec22 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ebaa:	4b59      	ldr	r3, [pc, #356]	@ (800ed10 <tcp_receive+0x270>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d137      	bne.n	800ec22 <tcp_receive+0x182>
              found_dupack = 1;
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ebbc:	2bff      	cmp	r3, #255	@ 0xff
 800ebbe:	d007      	beq.n	800ebd0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	b2da      	uxtb	r2, r3
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ebd6:	2b03      	cmp	r3, #3
 800ebd8:	d91b      	bls.n	800ec12 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ebe4:	4413      	add	r3, r2
 800ebe6:	b29a      	uxth	r2, r3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d30a      	bcc.n	800ec08 <tcp_receive+0x168>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ebfc:	4413      	add	r3, r2
 800ebfe:	b29a      	uxth	r2, r3
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ec06:	e004      	b.n	800ec12 <tcp_receive+0x172>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ec0e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	d902      	bls.n	800ec22 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f001 fee7 	bl	80109f0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ec22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	f040 8161 	bne.w	800eeec <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ec32:	e15b      	b.n	800eeec <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec34:	4b36      	ldr	r3, [pc, #216]	@ (800ed10 <tcp_receive+0x270>)
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec3c:	1ad3      	subs	r3, r2, r3
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	f2c0 814e 	blt.w	800eee2 <tcp_receive+0x442>
 800ec46:	4b32      	ldr	r3, [pc, #200]	@ (800ed10 <tcp_receive+0x270>)
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec4e:	1ad3      	subs	r3, r2, r3
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	f300 8146 	bgt.w	800eee2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	8b5b      	ldrh	r3, [r3, #26]
 800ec5a:	f003 0304 	and.w	r3, r3, #4
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d010      	beq.n	800ec84 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	8b5b      	ldrh	r3, [r3, #26]
 800ec66:	f023 0304 	bic.w	r3, r3, #4
 800ec6a:	b29a      	uxth	r2, r3
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ec92:	10db      	asrs	r3, r3, #3
 800ec94:	b21b      	sxth	r3, r3
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	4413      	add	r3, r2
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	b21a      	sxth	r2, r3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ecac:	4b18      	ldr	r3, [pc, #96]	@ (800ed10 <tcp_receive+0x270>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	1ad3      	subs	r3, r2, r3
 800ecba:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800ecc4:	4b12      	ldr	r3, [pc, #72]	@ (800ed10 <tcp_receive+0x270>)
 800ecc6:	681a      	ldr	r2, [r3, #0]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	7d1b      	ldrb	r3, [r3, #20]
 800ecd0:	2b03      	cmp	r3, #3
 800ecd2:	f240 8097 	bls.w	800ee04 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d245      	bcs.n	800ed72 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	8b5b      	ldrh	r3, [r3, #26]
 800ecea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d014      	beq.n	800ed1c <tcp_receive+0x27c>
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	e013      	b.n	800ed1e <tcp_receive+0x27e>
 800ecf6:	bf00      	nop
 800ecf8:	080164d0 	.word	0x080164d0
 800ecfc:	08016800 	.word	0x08016800
 800ed00:	0801651c 	.word	0x0801651c
 800ed04:	0801681c 	.word	0x0801681c
 800ed08:	2000b24c 	.word	0x2000b24c
 800ed0c:	2000b240 	.word	0x2000b240
 800ed10:	2000b244 	.word	0x2000b244
 800ed14:	2000b230 	.word	0x2000b230
 800ed18:	2000b24a 	.word	0x2000b24a
 800ed1c:	2302      	movs	r3, #2
 800ed1e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ed22:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ed26:	b29a      	uxth	r2, r3
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed2c:	fb12 f303 	smulbb	r3, r2, r3
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ed34:	4293      	cmp	r3, r2
 800ed36:	bf28      	it	cs
 800ed38:	4613      	movcs	r3, r2
 800ed3a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ed42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ed44:	4413      	add	r3, r2
 800ed46:	b29a      	uxth	r2, r3
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d309      	bcc.n	800ed66 <tcp_receive+0x2c6>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ed58:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ed5a:	4413      	add	r3, r2
 800ed5c:	b29a      	uxth	r2, r3
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ed64:	e04e      	b.n	800ee04 <tcp_receive+0x364>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed6c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ed70:	e048      	b.n	800ee04 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ed78:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ed7a:	4413      	add	r3, r2
 800ed7c:	b29a      	uxth	r2, r3
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d309      	bcc.n	800ed9c <tcp_receive+0x2fc>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ed8e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ed90:	4413      	add	r3, r2
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ed9a:	e004      	b.n	800eda6 <tcp_receive+0x306>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eda2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d326      	bcc.n	800ee04 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800edc2:	1ad3      	subs	r3, r2, r3
 800edc4:	b29a      	uxth	r2, r3
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800edd6:	4413      	add	r3, r2
 800edd8:	b29a      	uxth	r2, r3
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d30a      	bcc.n	800edfa <tcp_receive+0x35a>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800edee:	4413      	add	r3, r2
 800edf0:	b29a      	uxth	r2, r3
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800edf8:	e004      	b.n	800ee04 <tcp_receive+0x364>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee00:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee0c:	4a98      	ldr	r2, [pc, #608]	@ (800f070 <tcp_receive+0x5d0>)
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f7ff fdca 	bl	800e9a8 <tcp_free_acked_segments>
 800ee14:	4602      	mov	r2, r0
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee22:	4a94      	ldr	r2, [pc, #592]	@ (800f074 <tcp_receive+0x5d4>)
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f7ff fdbf 	bl	800e9a8 <tcp_free_acked_segments>
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d104      	bne.n	800ee42 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee3e:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ee40:	e002      	b.n	800ee48 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2200      	movs	r2, #0
 800ee46:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d103      	bne.n	800ee5e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2200      	movs	r2, #0
 800ee5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800ee64:	4b84      	ldr	r3, [pc, #528]	@ (800f078 <tcp_receive+0x5d8>)
 800ee66:	881b      	ldrh	r3, [r3, #0]
 800ee68:	4413      	add	r3, r2
 800ee6a:	b29a      	uxth	r2, r3
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	8b5b      	ldrh	r3, [r3, #26]
 800ee76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d035      	beq.n	800eeea <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d118      	bne.n	800eeb8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00c      	beq.n	800eea8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7fb f934 	bl	800a108 <lwip_htonl>
 800eea0:	4603      	mov	r3, r0
 800eea2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	dc20      	bgt.n	800eeea <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	8b5b      	ldrh	r3, [r3, #26]
 800eeac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eeb6:	e018      	b.n	800eeea <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eec0:	68db      	ldr	r3, [r3, #12]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7fb f91f 	bl	800a108 <lwip_htonl>
 800eeca:	4603      	mov	r3, r0
 800eecc:	1ae3      	subs	r3, r4, r3
 800eece:	2b00      	cmp	r3, #0
 800eed0:	dc0b      	bgt.n	800eeea <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	8b5b      	ldrh	r3, [r3, #26]
 800eed6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eeda:	b29a      	uxth	r2, r3
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eee0:	e003      	b.n	800eeea <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f001 ff70 	bl	8010dc8 <tcp_send_empty_ack>
 800eee8:	e000      	b.n	800eeec <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eeea:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d05b      	beq.n	800efac <tcp_receive+0x50c>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eef8:	4b60      	ldr	r3, [pc, #384]	@ (800f07c <tcp_receive+0x5dc>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	1ad3      	subs	r3, r2, r3
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	da54      	bge.n	800efac <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ef02:	4b5f      	ldr	r3, [pc, #380]	@ (800f080 <tcp_receive+0x5e0>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	b29a      	uxth	r2, r3
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	1ad3      	subs	r3, r2, r3
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ef16:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ef20:	10db      	asrs	r3, r3, #3
 800ef22:	b21b      	sxth	r3, r3
 800ef24:	b29b      	uxth	r3, r3
 800ef26:	1ad3      	subs	r3, r2, r3
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ef34:	b29a      	uxth	r2, r3
 800ef36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ef3a:	4413      	add	r3, r2
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	b21a      	sxth	r2, r3
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800ef44:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	da05      	bge.n	800ef58 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ef4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ef50:	425b      	negs	r3, r3
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ef58:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ef62:	109b      	asrs	r3, r3, #2
 800ef64:	b21b      	sxth	r3, r3
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	1ad3      	subs	r3, r2, r3
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ef76:	b29a      	uxth	r2, r3
 800ef78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ef7c:	4413      	add	r3, r2
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	b21a      	sxth	r2, r3
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ef8c:	10db      	asrs	r3, r3, #3
 800ef8e:	b21b      	sxth	r3, r3
 800ef90:	b29a      	uxth	r2, r3
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	4413      	add	r3, r2
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	b21a      	sxth	r2, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2200      	movs	r2, #0
 800efaa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800efac:	4b35      	ldr	r3, [pc, #212]	@ (800f084 <tcp_receive+0x5e4>)
 800efae:	881b      	ldrh	r3, [r3, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	f000 84df 	beq.w	800f974 <tcp_receive+0xed4>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	7d1b      	ldrb	r3, [r3, #20]
 800efba:	2b06      	cmp	r3, #6
 800efbc:	f200 84da 	bhi.w	800f974 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800efc4:	4b30      	ldr	r3, [pc, #192]	@ (800f088 <tcp_receive+0x5e8>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	1ad3      	subs	r3, r2, r3
 800efca:	3b01      	subs	r3, #1
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f2c0 808f 	blt.w	800f0f0 <tcp_receive+0x650>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800efd6:	4b2b      	ldr	r3, [pc, #172]	@ (800f084 <tcp_receive+0x5e4>)
 800efd8:	881b      	ldrh	r3, [r3, #0]
 800efda:	4619      	mov	r1, r3
 800efdc:	4b2a      	ldr	r3, [pc, #168]	@ (800f088 <tcp_receive+0x5e8>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	440b      	add	r3, r1
 800efe2:	1ad3      	subs	r3, r2, r3
 800efe4:	3301      	adds	r3, #1
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	f300 8082 	bgt.w	800f0f0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800efec:	4b27      	ldr	r3, [pc, #156]	@ (800f08c <tcp_receive+0x5ec>)
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eff6:	4b24      	ldr	r3, [pc, #144]	@ (800f088 <tcp_receive+0x5e8>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	1ad3      	subs	r3, r2, r3
 800effc:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800effe:	4b23      	ldr	r3, [pc, #140]	@ (800f08c <tcp_receive+0x5ec>)
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d106      	bne.n	800f014 <tcp_receive+0x574>
 800f006:	4b22      	ldr	r3, [pc, #136]	@ (800f090 <tcp_receive+0x5f0>)
 800f008:	f240 5294 	movw	r2, #1428	@ 0x594
 800f00c:	4921      	ldr	r1, [pc, #132]	@ (800f094 <tcp_receive+0x5f4>)
 800f00e:	4822      	ldr	r0, [pc, #136]	@ (800f098 <tcp_receive+0x5f8>)
 800f010:	f005 fa30 	bl	8014474 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f016:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d906      	bls.n	800f02c <tcp_receive+0x58c>
 800f01e:	4b1c      	ldr	r3, [pc, #112]	@ (800f090 <tcp_receive+0x5f0>)
 800f020:	f240 5295 	movw	r2, #1429	@ 0x595
 800f024:	491d      	ldr	r1, [pc, #116]	@ (800f09c <tcp_receive+0x5fc>)
 800f026:	481c      	ldr	r0, [pc, #112]	@ (800f098 <tcp_receive+0x5f8>)
 800f028:	f005 fa24 	bl	8014474 <iprintf>
      off = (u16_t)off32;
 800f02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f02e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f032:	4b16      	ldr	r3, [pc, #88]	@ (800f08c <tcp_receive+0x5ec>)
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	891b      	ldrh	r3, [r3, #8]
 800f038:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d906      	bls.n	800f04e <tcp_receive+0x5ae>
 800f040:	4b13      	ldr	r3, [pc, #76]	@ (800f090 <tcp_receive+0x5f0>)
 800f042:	f240 5297 	movw	r2, #1431	@ 0x597
 800f046:	4916      	ldr	r1, [pc, #88]	@ (800f0a0 <tcp_receive+0x600>)
 800f048:	4813      	ldr	r0, [pc, #76]	@ (800f098 <tcp_receive+0x5f8>)
 800f04a:	f005 fa13 	bl	8014474 <iprintf>
      inseg.len -= off;
 800f04e:	4b0f      	ldr	r3, [pc, #60]	@ (800f08c <tcp_receive+0x5ec>)
 800f050:	891a      	ldrh	r2, [r3, #8]
 800f052:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f056:	1ad3      	subs	r3, r2, r3
 800f058:	b29a      	uxth	r2, r3
 800f05a:	4b0c      	ldr	r3, [pc, #48]	@ (800f08c <tcp_receive+0x5ec>)
 800f05c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f05e:	4b0b      	ldr	r3, [pc, #44]	@ (800f08c <tcp_receive+0x5ec>)
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	891a      	ldrh	r2, [r3, #8]
 800f064:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f068:	1ad3      	subs	r3, r2, r3
 800f06a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f06c:	e02a      	b.n	800f0c4 <tcp_receive+0x624>
 800f06e:	bf00      	nop
 800f070:	08016838 	.word	0x08016838
 800f074:	08016840 	.word	0x08016840
 800f078:	2000b248 	.word	0x2000b248
 800f07c:	2000b244 	.word	0x2000b244
 800f080:	2000b208 	.word	0x2000b208
 800f084:	2000b24a 	.word	0x2000b24a
 800f088:	2000b240 	.word	0x2000b240
 800f08c:	2000b220 	.word	0x2000b220
 800f090:	080164d0 	.word	0x080164d0
 800f094:	08016848 	.word	0x08016848
 800f098:	0801651c 	.word	0x0801651c
 800f09c:	08016858 	.word	0x08016858
 800f0a0:	08016868 	.word	0x08016868
        off -= p->len;
 800f0a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0a6:	895b      	ldrh	r3, [r3, #10]
 800f0a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f0ac:	1ad3      	subs	r3, r2, r3
 800f0ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f0b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0b4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f0b6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f0b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f0be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800f0c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0c6:	895b      	ldrh	r3, [r3, #10]
 800f0c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d8e9      	bhi.n	800f0a4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f0d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f0d8:	f7fc fad8 	bl	800b68c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0e0:	4a90      	ldr	r2, [pc, #576]	@ (800f324 <tcp_receive+0x884>)
 800f0e2:	6013      	str	r3, [r2, #0]
 800f0e4:	4b90      	ldr	r3, [pc, #576]	@ (800f328 <tcp_receive+0x888>)
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	4a8e      	ldr	r2, [pc, #568]	@ (800f324 <tcp_receive+0x884>)
 800f0ea:	6812      	ldr	r2, [r2, #0]
 800f0ec:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f0ee:	e00d      	b.n	800f10c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f0f0:	4b8c      	ldr	r3, [pc, #560]	@ (800f324 <tcp_receive+0x884>)
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0f8:	1ad3      	subs	r3, r2, r3
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	da06      	bge.n	800f10c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	8b5b      	ldrh	r3, [r3, #26]
 800f102:	f043 0302 	orr.w	r3, r3, #2
 800f106:	b29a      	uxth	r2, r3
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f10c:	4b85      	ldr	r3, [pc, #532]	@ (800f324 <tcp_receive+0x884>)
 800f10e:	681a      	ldr	r2, [r3, #0]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f114:	1ad3      	subs	r3, r2, r3
 800f116:	2b00      	cmp	r3, #0
 800f118:	f2c0 8427 	blt.w	800f96a <tcp_receive+0xeca>
 800f11c:	4b81      	ldr	r3, [pc, #516]	@ (800f324 <tcp_receive+0x884>)
 800f11e:	681a      	ldr	r2, [r3, #0]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f124:	6879      	ldr	r1, [r7, #4]
 800f126:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f128:	440b      	add	r3, r1
 800f12a:	1ad3      	subs	r3, r2, r3
 800f12c:	3301      	adds	r3, #1
 800f12e:	2b00      	cmp	r3, #0
 800f130:	f300 841b 	bgt.w	800f96a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f138:	4b7a      	ldr	r3, [pc, #488]	@ (800f324 <tcp_receive+0x884>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	f040 8298 	bne.w	800f672 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f142:	4b79      	ldr	r3, [pc, #484]	@ (800f328 <tcp_receive+0x888>)
 800f144:	891c      	ldrh	r4, [r3, #8]
 800f146:	4b78      	ldr	r3, [pc, #480]	@ (800f328 <tcp_receive+0x888>)
 800f148:	68db      	ldr	r3, [r3, #12]
 800f14a:	899b      	ldrh	r3, [r3, #12]
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	4618      	mov	r0, r3
 800f150:	f7fa ffc4 	bl	800a0dc <lwip_htons>
 800f154:	4603      	mov	r3, r0
 800f156:	b2db      	uxtb	r3, r3
 800f158:	f003 0303 	and.w	r3, r3, #3
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d001      	beq.n	800f164 <tcp_receive+0x6c4>
 800f160:	2301      	movs	r3, #1
 800f162:	e000      	b.n	800f166 <tcp_receive+0x6c6>
 800f164:	2300      	movs	r3, #0
 800f166:	4423      	add	r3, r4
 800f168:	b29a      	uxth	r2, r3
 800f16a:	4b70      	ldr	r3, [pc, #448]	@ (800f32c <tcp_receive+0x88c>)
 800f16c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f172:	4b6e      	ldr	r3, [pc, #440]	@ (800f32c <tcp_receive+0x88c>)
 800f174:	881b      	ldrh	r3, [r3, #0]
 800f176:	429a      	cmp	r2, r3
 800f178:	d274      	bcs.n	800f264 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f17a:	4b6b      	ldr	r3, [pc, #428]	@ (800f328 <tcp_receive+0x888>)
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	899b      	ldrh	r3, [r3, #12]
 800f180:	b29b      	uxth	r3, r3
 800f182:	4618      	mov	r0, r3
 800f184:	f7fa ffaa 	bl	800a0dc <lwip_htons>
 800f188:	4603      	mov	r3, r0
 800f18a:	b2db      	uxtb	r3, r3
 800f18c:	f003 0301 	and.w	r3, r3, #1
 800f190:	2b00      	cmp	r3, #0
 800f192:	d01e      	beq.n	800f1d2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f194:	4b64      	ldr	r3, [pc, #400]	@ (800f328 <tcp_receive+0x888>)
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	899b      	ldrh	r3, [r3, #12]
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	b21b      	sxth	r3, r3
 800f19e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f1a2:	b21c      	sxth	r4, r3
 800f1a4:	4b60      	ldr	r3, [pc, #384]	@ (800f328 <tcp_receive+0x888>)
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	899b      	ldrh	r3, [r3, #12]
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f7fa ff95 	bl	800a0dc <lwip_htons>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7fa ff8d 	bl	800a0dc <lwip_htons>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	b21b      	sxth	r3, r3
 800f1c6:	4323      	orrs	r3, r4
 800f1c8:	b21a      	sxth	r2, r3
 800f1ca:	4b57      	ldr	r3, [pc, #348]	@ (800f328 <tcp_receive+0x888>)
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	b292      	uxth	r2, r2
 800f1d0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f1d6:	4b54      	ldr	r3, [pc, #336]	@ (800f328 <tcp_receive+0x888>)
 800f1d8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f1da:	4b53      	ldr	r3, [pc, #332]	@ (800f328 <tcp_receive+0x888>)
 800f1dc:	68db      	ldr	r3, [r3, #12]
 800f1de:	899b      	ldrh	r3, [r3, #12]
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7fa ff7a 	bl	800a0dc <lwip_htons>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	f003 0302 	and.w	r3, r3, #2
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d005      	beq.n	800f200 <tcp_receive+0x760>
            inseg.len -= 1;
 800f1f4:	4b4c      	ldr	r3, [pc, #304]	@ (800f328 <tcp_receive+0x888>)
 800f1f6:	891b      	ldrh	r3, [r3, #8]
 800f1f8:	3b01      	subs	r3, #1
 800f1fa:	b29a      	uxth	r2, r3
 800f1fc:	4b4a      	ldr	r3, [pc, #296]	@ (800f328 <tcp_receive+0x888>)
 800f1fe:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f200:	4b49      	ldr	r3, [pc, #292]	@ (800f328 <tcp_receive+0x888>)
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	4a48      	ldr	r2, [pc, #288]	@ (800f328 <tcp_receive+0x888>)
 800f206:	8912      	ldrh	r2, [r2, #8]
 800f208:	4611      	mov	r1, r2
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7fc f93e 	bl	800b48c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f210:	4b45      	ldr	r3, [pc, #276]	@ (800f328 <tcp_receive+0x888>)
 800f212:	891c      	ldrh	r4, [r3, #8]
 800f214:	4b44      	ldr	r3, [pc, #272]	@ (800f328 <tcp_receive+0x888>)
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	899b      	ldrh	r3, [r3, #12]
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7fa ff5d 	bl	800a0dc <lwip_htons>
 800f222:	4603      	mov	r3, r0
 800f224:	b2db      	uxtb	r3, r3
 800f226:	f003 0303 	and.w	r3, r3, #3
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d001      	beq.n	800f232 <tcp_receive+0x792>
 800f22e:	2301      	movs	r3, #1
 800f230:	e000      	b.n	800f234 <tcp_receive+0x794>
 800f232:	2300      	movs	r3, #0
 800f234:	4423      	add	r3, r4
 800f236:	b29a      	uxth	r2, r3
 800f238:	4b3c      	ldr	r3, [pc, #240]	@ (800f32c <tcp_receive+0x88c>)
 800f23a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f23c:	4b3b      	ldr	r3, [pc, #236]	@ (800f32c <tcp_receive+0x88c>)
 800f23e:	881b      	ldrh	r3, [r3, #0]
 800f240:	461a      	mov	r2, r3
 800f242:	4b38      	ldr	r3, [pc, #224]	@ (800f324 <tcp_receive+0x884>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	441a      	add	r2, r3
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f24c:	6879      	ldr	r1, [r7, #4]
 800f24e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f250:	440b      	add	r3, r1
 800f252:	429a      	cmp	r2, r3
 800f254:	d006      	beq.n	800f264 <tcp_receive+0x7c4>
 800f256:	4b36      	ldr	r3, [pc, #216]	@ (800f330 <tcp_receive+0x890>)
 800f258:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800f25c:	4935      	ldr	r1, [pc, #212]	@ (800f334 <tcp_receive+0x894>)
 800f25e:	4836      	ldr	r0, [pc, #216]	@ (800f338 <tcp_receive+0x898>)
 800f260:	f005 f908 	bl	8014474 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f268:	2b00      	cmp	r3, #0
 800f26a:	f000 80e6 	beq.w	800f43a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f26e:	4b2e      	ldr	r3, [pc, #184]	@ (800f328 <tcp_receive+0x888>)
 800f270:	68db      	ldr	r3, [r3, #12]
 800f272:	899b      	ldrh	r3, [r3, #12]
 800f274:	b29b      	uxth	r3, r3
 800f276:	4618      	mov	r0, r3
 800f278:	f7fa ff30 	bl	800a0dc <lwip_htons>
 800f27c:	4603      	mov	r3, r0
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	f003 0301 	and.w	r3, r3, #1
 800f284:	2b00      	cmp	r3, #0
 800f286:	d010      	beq.n	800f2aa <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f288:	e00a      	b.n	800f2a0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f28e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f294:	681a      	ldr	r2, [r3, #0]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800f29a:	68f8      	ldr	r0, [r7, #12]
 800f29c:	f7fd fd93 	bl	800cdc6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d1f0      	bne.n	800f28a <tcp_receive+0x7ea>
 800f2a8:	e0c7      	b.n	800f43a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f2b0:	e051      	b.n	800f356 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f2b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2b4:	68db      	ldr	r3, [r3, #12]
 800f2b6:	899b      	ldrh	r3, [r3, #12]
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fa ff0e 	bl	800a0dc <lwip_htons>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	f003 0301 	and.w	r3, r3, #1
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d03c      	beq.n	800f346 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f2cc:	4b16      	ldr	r3, [pc, #88]	@ (800f328 <tcp_receive+0x888>)
 800f2ce:	68db      	ldr	r3, [r3, #12]
 800f2d0:	899b      	ldrh	r3, [r3, #12]
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7fa ff01 	bl	800a0dc <lwip_htons>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	b2db      	uxtb	r3, r3
 800f2de:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d12f      	bne.n	800f346 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f2e6:	4b10      	ldr	r3, [pc, #64]	@ (800f328 <tcp_receive+0x888>)
 800f2e8:	68db      	ldr	r3, [r3, #12]
 800f2ea:	899b      	ldrh	r3, [r3, #12]
 800f2ec:	b29c      	uxth	r4, r3
 800f2ee:	2001      	movs	r0, #1
 800f2f0:	f7fa fef4 	bl	800a0dc <lwip_htons>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	461a      	mov	r2, r3
 800f2f8:	4b0b      	ldr	r3, [pc, #44]	@ (800f328 <tcp_receive+0x888>)
 800f2fa:	68db      	ldr	r3, [r3, #12]
 800f2fc:	4322      	orrs	r2, r4
 800f2fe:	b292      	uxth	r2, r2
 800f300:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f302:	4b09      	ldr	r3, [pc, #36]	@ (800f328 <tcp_receive+0x888>)
 800f304:	891c      	ldrh	r4, [r3, #8]
 800f306:	4b08      	ldr	r3, [pc, #32]	@ (800f328 <tcp_receive+0x888>)
 800f308:	68db      	ldr	r3, [r3, #12]
 800f30a:	899b      	ldrh	r3, [r3, #12]
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fa fee4 	bl	800a0dc <lwip_htons>
 800f314:	4603      	mov	r3, r0
 800f316:	b2db      	uxtb	r3, r3
 800f318:	f003 0303 	and.w	r3, r3, #3
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d00d      	beq.n	800f33c <tcp_receive+0x89c>
 800f320:	2301      	movs	r3, #1
 800f322:	e00c      	b.n	800f33e <tcp_receive+0x89e>
 800f324:	2000b240 	.word	0x2000b240
 800f328:	2000b220 	.word	0x2000b220
 800f32c:	2000b24a 	.word	0x2000b24a
 800f330:	080164d0 	.word	0x080164d0
 800f334:	08016878 	.word	0x08016878
 800f338:	0801651c 	.word	0x0801651c
 800f33c:	2300      	movs	r3, #0
 800f33e:	4423      	add	r3, r4
 800f340:	b29a      	uxth	r2, r3
 800f342:	4b98      	ldr	r3, [pc, #608]	@ (800f5a4 <tcp_receive+0xb04>)
 800f344:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f348:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800f350:	6938      	ldr	r0, [r7, #16]
 800f352:	f7fd fd38 	bl	800cdc6 <tcp_seg_free>
            while (next &&
 800f356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d00e      	beq.n	800f37a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f35c:	4b91      	ldr	r3, [pc, #580]	@ (800f5a4 <tcp_receive+0xb04>)
 800f35e:	881b      	ldrh	r3, [r3, #0]
 800f360:	461a      	mov	r2, r3
 800f362:	4b91      	ldr	r3, [pc, #580]	@ (800f5a8 <tcp_receive+0xb08>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	441a      	add	r2, r3
 800f368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f36a:	68db      	ldr	r3, [r3, #12]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f370:	8909      	ldrh	r1, [r1, #8]
 800f372:	440b      	add	r3, r1
 800f374:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f376:	2b00      	cmp	r3, #0
 800f378:	da9b      	bge.n	800f2b2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f37a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d059      	beq.n	800f434 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f380:	4b88      	ldr	r3, [pc, #544]	@ (800f5a4 <tcp_receive+0xb04>)
 800f382:	881b      	ldrh	r3, [r3, #0]
 800f384:	461a      	mov	r2, r3
 800f386:	4b88      	ldr	r3, [pc, #544]	@ (800f5a8 <tcp_receive+0xb08>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	441a      	add	r2, r3
 800f38c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f38e:	68db      	ldr	r3, [r3, #12]
 800f390:	685b      	ldr	r3, [r3, #4]
 800f392:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f394:	2b00      	cmp	r3, #0
 800f396:	dd4d      	ble.n	800f434 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	b29a      	uxth	r2, r3
 800f3a0:	4b81      	ldr	r3, [pc, #516]	@ (800f5a8 <tcp_receive+0xb08>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	1ad3      	subs	r3, r2, r3
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	4b80      	ldr	r3, [pc, #512]	@ (800f5ac <tcp_receive+0xb0c>)
 800f3ac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f3ae:	4b7f      	ldr	r3, [pc, #508]	@ (800f5ac <tcp_receive+0xb0c>)
 800f3b0:	68db      	ldr	r3, [r3, #12]
 800f3b2:	899b      	ldrh	r3, [r3, #12]
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7fa fe90 	bl	800a0dc <lwip_htons>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	f003 0302 	and.w	r3, r3, #2
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d005      	beq.n	800f3d4 <tcp_receive+0x934>
                inseg.len -= 1;
 800f3c8:	4b78      	ldr	r3, [pc, #480]	@ (800f5ac <tcp_receive+0xb0c>)
 800f3ca:	891b      	ldrh	r3, [r3, #8]
 800f3cc:	3b01      	subs	r3, #1
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	4b76      	ldr	r3, [pc, #472]	@ (800f5ac <tcp_receive+0xb0c>)
 800f3d2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f3d4:	4b75      	ldr	r3, [pc, #468]	@ (800f5ac <tcp_receive+0xb0c>)
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	4a74      	ldr	r2, [pc, #464]	@ (800f5ac <tcp_receive+0xb0c>)
 800f3da:	8912      	ldrh	r2, [r2, #8]
 800f3dc:	4611      	mov	r1, r2
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fc f854 	bl	800b48c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f3e4:	4b71      	ldr	r3, [pc, #452]	@ (800f5ac <tcp_receive+0xb0c>)
 800f3e6:	891c      	ldrh	r4, [r3, #8]
 800f3e8:	4b70      	ldr	r3, [pc, #448]	@ (800f5ac <tcp_receive+0xb0c>)
 800f3ea:	68db      	ldr	r3, [r3, #12]
 800f3ec:	899b      	ldrh	r3, [r3, #12]
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7fa fe73 	bl	800a0dc <lwip_htons>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	f003 0303 	and.w	r3, r3, #3
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d001      	beq.n	800f406 <tcp_receive+0x966>
 800f402:	2301      	movs	r3, #1
 800f404:	e000      	b.n	800f408 <tcp_receive+0x968>
 800f406:	2300      	movs	r3, #0
 800f408:	4423      	add	r3, r4
 800f40a:	b29a      	uxth	r2, r3
 800f40c:	4b65      	ldr	r3, [pc, #404]	@ (800f5a4 <tcp_receive+0xb04>)
 800f40e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f410:	4b64      	ldr	r3, [pc, #400]	@ (800f5a4 <tcp_receive+0xb04>)
 800f412:	881b      	ldrh	r3, [r3, #0]
 800f414:	461a      	mov	r2, r3
 800f416:	4b64      	ldr	r3, [pc, #400]	@ (800f5a8 <tcp_receive+0xb08>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	441a      	add	r2, r3
 800f41c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	429a      	cmp	r2, r3
 800f424:	d006      	beq.n	800f434 <tcp_receive+0x994>
 800f426:	4b62      	ldr	r3, [pc, #392]	@ (800f5b0 <tcp_receive+0xb10>)
 800f428:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800f42c:	4961      	ldr	r1, [pc, #388]	@ (800f5b4 <tcp_receive+0xb14>)
 800f42e:	4862      	ldr	r0, [pc, #392]	@ (800f5b8 <tcp_receive+0xb18>)
 800f430:	f005 f820 	bl	8014474 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f438:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f43a:	4b5a      	ldr	r3, [pc, #360]	@ (800f5a4 <tcp_receive+0xb04>)
 800f43c:	881b      	ldrh	r3, [r3, #0]
 800f43e:	461a      	mov	r2, r3
 800f440:	4b59      	ldr	r3, [pc, #356]	@ (800f5a8 <tcp_receive+0xb08>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	441a      	add	r2, r3
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f44e:	4b55      	ldr	r3, [pc, #340]	@ (800f5a4 <tcp_receive+0xb04>)
 800f450:	881b      	ldrh	r3, [r3, #0]
 800f452:	429a      	cmp	r2, r3
 800f454:	d206      	bcs.n	800f464 <tcp_receive+0x9c4>
 800f456:	4b56      	ldr	r3, [pc, #344]	@ (800f5b0 <tcp_receive+0xb10>)
 800f458:	f240 6207 	movw	r2, #1543	@ 0x607
 800f45c:	4957      	ldr	r1, [pc, #348]	@ (800f5bc <tcp_receive+0xb1c>)
 800f45e:	4856      	ldr	r0, [pc, #344]	@ (800f5b8 <tcp_receive+0xb18>)
 800f460:	f005 f808 	bl	8014474 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f468:	4b4e      	ldr	r3, [pc, #312]	@ (800f5a4 <tcp_receive+0xb04>)
 800f46a:	881b      	ldrh	r3, [r3, #0]
 800f46c:	1ad3      	subs	r3, r2, r3
 800f46e:	b29a      	uxth	r2, r3
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f7fc ffc5 	bl	800c404 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f47a:	4b4c      	ldr	r3, [pc, #304]	@ (800f5ac <tcp_receive+0xb0c>)
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	891b      	ldrh	r3, [r3, #8]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d006      	beq.n	800f492 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f484:	4b49      	ldr	r3, [pc, #292]	@ (800f5ac <tcp_receive+0xb0c>)
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	4a4d      	ldr	r2, [pc, #308]	@ (800f5c0 <tcp_receive+0xb20>)
 800f48a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f48c:	4b47      	ldr	r3, [pc, #284]	@ (800f5ac <tcp_receive+0xb0c>)
 800f48e:	2200      	movs	r2, #0
 800f490:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f492:	4b46      	ldr	r3, [pc, #280]	@ (800f5ac <tcp_receive+0xb0c>)
 800f494:	68db      	ldr	r3, [r3, #12]
 800f496:	899b      	ldrh	r3, [r3, #12]
 800f498:	b29b      	uxth	r3, r3
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7fa fe1e 	bl	800a0dc <lwip_htons>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	f003 0301 	and.w	r3, r3, #1
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	f000 80b8 	beq.w	800f61e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f4ae:	4b45      	ldr	r3, [pc, #276]	@ (800f5c4 <tcp_receive+0xb24>)
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	f043 0320 	orr.w	r3, r3, #32
 800f4b6:	b2da      	uxtb	r2, r3
 800f4b8:	4b42      	ldr	r3, [pc, #264]	@ (800f5c4 <tcp_receive+0xb24>)
 800f4ba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f4bc:	e0af      	b.n	800f61e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4c2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	685b      	ldr	r3, [r3, #4]
 800f4cc:	4a36      	ldr	r2, [pc, #216]	@ (800f5a8 <tcp_receive+0xb08>)
 800f4ce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	891b      	ldrh	r3, [r3, #8]
 800f4d4:	461c      	mov	r4, r3
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	68db      	ldr	r3, [r3, #12]
 800f4da:	899b      	ldrh	r3, [r3, #12]
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fa fdfc 	bl	800a0dc <lwip_htons>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	f003 0303 	and.w	r3, r3, #3
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d001      	beq.n	800f4f4 <tcp_receive+0xa54>
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	e000      	b.n	800f4f6 <tcp_receive+0xa56>
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	191a      	adds	r2, r3, r4
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4fc:	441a      	add	r2, r3
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f506:	461c      	mov	r4, r3
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	891b      	ldrh	r3, [r3, #8]
 800f50c:	461d      	mov	r5, r3
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	68db      	ldr	r3, [r3, #12]
 800f512:	899b      	ldrh	r3, [r3, #12]
 800f514:	b29b      	uxth	r3, r3
 800f516:	4618      	mov	r0, r3
 800f518:	f7fa fde0 	bl	800a0dc <lwip_htons>
 800f51c:	4603      	mov	r3, r0
 800f51e:	b2db      	uxtb	r3, r3
 800f520:	f003 0303 	and.w	r3, r3, #3
 800f524:	2b00      	cmp	r3, #0
 800f526:	d001      	beq.n	800f52c <tcp_receive+0xa8c>
 800f528:	2301      	movs	r3, #1
 800f52a:	e000      	b.n	800f52e <tcp_receive+0xa8e>
 800f52c:	2300      	movs	r3, #0
 800f52e:	442b      	add	r3, r5
 800f530:	429c      	cmp	r4, r3
 800f532:	d206      	bcs.n	800f542 <tcp_receive+0xaa2>
 800f534:	4b1e      	ldr	r3, [pc, #120]	@ (800f5b0 <tcp_receive+0xb10>)
 800f536:	f240 622b 	movw	r2, #1579	@ 0x62b
 800f53a:	4923      	ldr	r1, [pc, #140]	@ (800f5c8 <tcp_receive+0xb28>)
 800f53c:	481e      	ldr	r0, [pc, #120]	@ (800f5b8 <tcp_receive+0xb18>)
 800f53e:	f004 ff99 	bl	8014474 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	891b      	ldrh	r3, [r3, #8]
 800f546:	461c      	mov	r4, r3
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	68db      	ldr	r3, [r3, #12]
 800f54c:	899b      	ldrh	r3, [r3, #12]
 800f54e:	b29b      	uxth	r3, r3
 800f550:	4618      	mov	r0, r3
 800f552:	f7fa fdc3 	bl	800a0dc <lwip_htons>
 800f556:	4603      	mov	r3, r0
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	f003 0303 	and.w	r3, r3, #3
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d001      	beq.n	800f566 <tcp_receive+0xac6>
 800f562:	2301      	movs	r3, #1
 800f564:	e000      	b.n	800f568 <tcp_receive+0xac8>
 800f566:	2300      	movs	r3, #0
 800f568:	1919      	adds	r1, r3, r4
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f56e:	b28b      	uxth	r3, r1
 800f570:	1ad3      	subs	r3, r2, r3
 800f572:	b29a      	uxth	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f7fc ff43 	bl	800c404 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	685b      	ldr	r3, [r3, #4]
 800f582:	891b      	ldrh	r3, [r3, #8]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d028      	beq.n	800f5da <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f588:	4b0d      	ldr	r3, [pc, #52]	@ (800f5c0 <tcp_receive+0xb20>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d01d      	beq.n	800f5cc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f590:	4b0b      	ldr	r3, [pc, #44]	@ (800f5c0 <tcp_receive+0xb20>)
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	685b      	ldr	r3, [r3, #4]
 800f598:	4619      	mov	r1, r3
 800f59a:	4610      	mov	r0, r2
 800f59c:	f7fc f9be 	bl	800b91c <pbuf_cat>
 800f5a0:	e018      	b.n	800f5d4 <tcp_receive+0xb34>
 800f5a2:	bf00      	nop
 800f5a4:	2000b24a 	.word	0x2000b24a
 800f5a8:	2000b240 	.word	0x2000b240
 800f5ac:	2000b220 	.word	0x2000b220
 800f5b0:	080164d0 	.word	0x080164d0
 800f5b4:	080168b0 	.word	0x080168b0
 800f5b8:	0801651c 	.word	0x0801651c
 800f5bc:	080168ec 	.word	0x080168ec
 800f5c0:	2000b250 	.word	0x2000b250
 800f5c4:	2000b24d 	.word	0x2000b24d
 800f5c8:	0801690c 	.word	0x0801690c
            } else {
              recv_data = cseg->p;
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	685b      	ldr	r3, [r3, #4]
 800f5d0:	4a70      	ldr	r2, [pc, #448]	@ (800f794 <tcp_receive+0xcf4>)
 800f5d2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	68db      	ldr	r3, [r3, #12]
 800f5de:	899b      	ldrh	r3, [r3, #12]
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7fa fd7a 	bl	800a0dc <lwip_htons>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	f003 0301 	and.w	r3, r3, #1
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d00d      	beq.n	800f610 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f5f4:	4b68      	ldr	r3, [pc, #416]	@ (800f798 <tcp_receive+0xcf8>)
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	f043 0320 	orr.w	r3, r3, #32
 800f5fc:	b2da      	uxtb	r2, r3
 800f5fe:	4b66      	ldr	r3, [pc, #408]	@ (800f798 <tcp_receive+0xcf8>)
 800f600:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	7d1b      	ldrb	r3, [r3, #20]
 800f606:	2b04      	cmp	r3, #4
 800f608:	d102      	bne.n	800f610 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2207      	movs	r2, #7
 800f60e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	681a      	ldr	r2, [r3, #0]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800f618:	68b8      	ldr	r0, [r7, #8]
 800f61a:	f7fd fbd4 	bl	800cdc6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f622:	2b00      	cmp	r3, #0
 800f624:	d008      	beq.n	800f638 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	685a      	ldr	r2, [r3, #4]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800f632:	429a      	cmp	r2, r3
 800f634:	f43f af43 	beq.w	800f4be <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	8b5b      	ldrh	r3, [r3, #26]
 800f63c:	f003 0301 	and.w	r3, r3, #1
 800f640:	2b00      	cmp	r3, #0
 800f642:	d00e      	beq.n	800f662 <tcp_receive+0xbc2>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	8b5b      	ldrh	r3, [r3, #26]
 800f648:	f023 0301 	bic.w	r3, r3, #1
 800f64c:	b29a      	uxth	r2, r3
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	835a      	strh	r2, [r3, #26]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	8b5b      	ldrh	r3, [r3, #26]
 800f656:	f043 0302 	orr.w	r3, r3, #2
 800f65a:	b29a      	uxth	r2, r3
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f660:	e187      	b.n	800f972 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	8b5b      	ldrh	r3, [r3, #26]
 800f666:	f043 0301 	orr.w	r3, r3, #1
 800f66a:	b29a      	uxth	r2, r3
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f670:	e17f      	b.n	800f972 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f676:	2b00      	cmp	r3, #0
 800f678:	d106      	bne.n	800f688 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f67a:	4848      	ldr	r0, [pc, #288]	@ (800f79c <tcp_receive+0xcfc>)
 800f67c:	f7fd fbbc 	bl	800cdf8 <tcp_seg_copy>
 800f680:	4602      	mov	r2, r0
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	675a      	str	r2, [r3, #116]	@ 0x74
 800f686:	e16c      	b.n	800f962 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f688:	2300      	movs	r3, #0
 800f68a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f690:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f692:	e156      	b.n	800f942 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800f694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	685a      	ldr	r2, [r3, #4]
 800f69a:	4b41      	ldr	r3, [pc, #260]	@ (800f7a0 <tcp_receive+0xd00>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d11d      	bne.n	800f6de <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f6a2:	4b3e      	ldr	r3, [pc, #248]	@ (800f79c <tcp_receive+0xcfc>)
 800f6a4:	891a      	ldrh	r2, [r3, #8]
 800f6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6a8:	891b      	ldrh	r3, [r3, #8]
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	f240 814e 	bls.w	800f94c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f6b0:	483a      	ldr	r0, [pc, #232]	@ (800f79c <tcp_receive+0xcfc>)
 800f6b2:	f7fd fba1 	bl	800cdf8 <tcp_seg_copy>
 800f6b6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	f000 8148 	beq.w	800f950 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800f6c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d003      	beq.n	800f6ce <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6c8:	697a      	ldr	r2, [r7, #20]
 800f6ca:	601a      	str	r2, [r3, #0]
 800f6cc:	e002      	b.n	800f6d4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	697a      	ldr	r2, [r7, #20]
 800f6d2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f6d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f6d6:	6978      	ldr	r0, [r7, #20]
 800f6d8:	f7ff f8de 	bl	800e898 <tcp_oos_insert_segment>
                }
                break;
 800f6dc:	e138      	b.n	800f950 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f6de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d117      	bne.n	800f714 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f6e4:	4b2e      	ldr	r3, [pc, #184]	@ (800f7a0 <tcp_receive+0xd00>)
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	685b      	ldr	r3, [r3, #4]
 800f6ee:	1ad3      	subs	r3, r2, r3
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	da57      	bge.n	800f7a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f6f4:	4829      	ldr	r0, [pc, #164]	@ (800f79c <tcp_receive+0xcfc>)
 800f6f6:	f7fd fb7f 	bl	800cdf8 <tcp_seg_copy>
 800f6fa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	f000 8128 	beq.w	800f954 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	69ba      	ldr	r2, [r7, #24]
 800f708:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f70a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f70c:	69b8      	ldr	r0, [r7, #24]
 800f70e:	f7ff f8c3 	bl	800e898 <tcp_oos_insert_segment>
                  }
                  break;
 800f712:	e11f      	b.n	800f954 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f714:	4b22      	ldr	r3, [pc, #136]	@ (800f7a0 <tcp_receive+0xd00>)
 800f716:	681a      	ldr	r2, [r3, #0]
 800f718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	1ad3      	subs	r3, r2, r3
 800f720:	3b01      	subs	r3, #1
 800f722:	2b00      	cmp	r3, #0
 800f724:	db3e      	blt.n	800f7a4 <tcp_receive+0xd04>
 800f726:	4b1e      	ldr	r3, [pc, #120]	@ (800f7a0 <tcp_receive+0xd00>)
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f72c:	68db      	ldr	r3, [r3, #12]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	1ad3      	subs	r3, r2, r3
 800f732:	3301      	adds	r3, #1
 800f734:	2b00      	cmp	r3, #0
 800f736:	dc35      	bgt.n	800f7a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f738:	4818      	ldr	r0, [pc, #96]	@ (800f79c <tcp_receive+0xcfc>)
 800f73a:	f7fd fb5d 	bl	800cdf8 <tcp_seg_copy>
 800f73e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	2b00      	cmp	r3, #0
 800f744:	f000 8108 	beq.w	800f958 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f74a:	68db      	ldr	r3, [r3, #12]
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f750:	8912      	ldrh	r2, [r2, #8]
 800f752:	441a      	add	r2, r3
 800f754:	4b12      	ldr	r3, [pc, #72]	@ (800f7a0 <tcp_receive+0xd00>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	1ad3      	subs	r3, r2, r3
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	dd12      	ble.n	800f784 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f75e:	4b10      	ldr	r3, [pc, #64]	@ (800f7a0 <tcp_receive+0xd00>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	b29a      	uxth	r2, r3
 800f764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f766:	68db      	ldr	r3, [r3, #12]
 800f768:	685b      	ldr	r3, [r3, #4]
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	1ad3      	subs	r3, r2, r3
 800f76e:	b29a      	uxth	r2, r3
 800f770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f772:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f776:	685a      	ldr	r2, [r3, #4]
 800f778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f77a:	891b      	ldrh	r3, [r3, #8]
 800f77c:	4619      	mov	r1, r3
 800f77e:	4610      	mov	r0, r2
 800f780:	f7fb fe84 	bl	800b48c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f786:	69fa      	ldr	r2, [r7, #28]
 800f788:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f78a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f78c:	69f8      	ldr	r0, [r7, #28]
 800f78e:	f7ff f883 	bl	800e898 <tcp_oos_insert_segment>
                  }
                  break;
 800f792:	e0e1      	b.n	800f958 <tcp_receive+0xeb8>
 800f794:	2000b250 	.word	0x2000b250
 800f798:	2000b24d 	.word	0x2000b24d
 800f79c:	2000b220 	.word	0x2000b220
 800f7a0:	2000b240 	.word	0x2000b240
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7a6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	f040 80c5 	bne.w	800f93c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f7b2:	4b7f      	ldr	r3, [pc, #508]	@ (800f9b0 <tcp_receive+0xf10>)
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b8:	68db      	ldr	r3, [r3, #12]
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	f340 80bc 	ble.w	800f93c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c6:	68db      	ldr	r3, [r3, #12]
 800f7c8:	899b      	ldrh	r3, [r3, #12]
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7fa fc85 	bl	800a0dc <lwip_htons>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	f003 0301 	and.w	r3, r3, #1
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	f040 80be 	bne.w	800f95c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f7e0:	4874      	ldr	r0, [pc, #464]	@ (800f9b4 <tcp_receive+0xf14>)
 800f7e2:	f7fd fb09 	bl	800cdf8 <tcp_seg_copy>
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	f000 80b5 	beq.w	800f960 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7f8:	68db      	ldr	r3, [r3, #12]
 800f7fa:	685b      	ldr	r3, [r3, #4]
 800f7fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f7fe:	8912      	ldrh	r2, [r2, #8]
 800f800:	441a      	add	r2, r3
 800f802:	4b6b      	ldr	r3, [pc, #428]	@ (800f9b0 <tcp_receive+0xf10>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	1ad3      	subs	r3, r2, r3
 800f808:	2b00      	cmp	r3, #0
 800f80a:	dd12      	ble.n	800f832 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f80c:	4b68      	ldr	r3, [pc, #416]	@ (800f9b0 <tcp_receive+0xf10>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	b29a      	uxth	r2, r3
 800f812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	b29b      	uxth	r3, r3
 800f81a:	1ad3      	subs	r3, r2, r3
 800f81c:	b29a      	uxth	r2, r3
 800f81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f820:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f824:	685a      	ldr	r2, [r3, #4]
 800f826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f828:	891b      	ldrh	r3, [r3, #8]
 800f82a:	4619      	mov	r1, r3
 800f82c:	4610      	mov	r0, r2
 800f82e:	f7fb fe2d 	bl	800b48c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f832:	4b61      	ldr	r3, [pc, #388]	@ (800f9b8 <tcp_receive+0xf18>)
 800f834:	881b      	ldrh	r3, [r3, #0]
 800f836:	461a      	mov	r2, r3
 800f838:	4b5d      	ldr	r3, [pc, #372]	@ (800f9b0 <tcp_receive+0xf10>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	441a      	add	r2, r3
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f842:	6879      	ldr	r1, [r7, #4]
 800f844:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f846:	440b      	add	r3, r1
 800f848:	1ad3      	subs	r3, r2, r3
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	f340 8088 	ble.w	800f960 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	899b      	ldrh	r3, [r3, #12]
 800f858:	b29b      	uxth	r3, r3
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fa fc3e 	bl	800a0dc <lwip_htons>
 800f860:	4603      	mov	r3, r0
 800f862:	b2db      	uxtb	r3, r3
 800f864:	f003 0301 	and.w	r3, r3, #1
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d021      	beq.n	800f8b0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	899b      	ldrh	r3, [r3, #12]
 800f874:	b29b      	uxth	r3, r3
 800f876:	b21b      	sxth	r3, r3
 800f878:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f87c:	b21c      	sxth	r4, r3
 800f87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	68db      	ldr	r3, [r3, #12]
 800f884:	899b      	ldrh	r3, [r3, #12]
 800f886:	b29b      	uxth	r3, r3
 800f888:	4618      	mov	r0, r3
 800f88a:	f7fa fc27 	bl	800a0dc <lwip_htons>
 800f88e:	4603      	mov	r3, r0
 800f890:	b2db      	uxtb	r3, r3
 800f892:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f896:	b29b      	uxth	r3, r3
 800f898:	4618      	mov	r0, r3
 800f89a:	f7fa fc1f 	bl	800a0dc <lwip_htons>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	b21b      	sxth	r3, r3
 800f8a2:	4323      	orrs	r3, r4
 800f8a4:	b21a      	sxth	r2, r3
 800f8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	68db      	ldr	r3, [r3, #12]
 800f8ac:	b292      	uxth	r2, r2
 800f8ae:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8b4:	b29a      	uxth	r2, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8ba:	4413      	add	r3, r2
 800f8bc:	b299      	uxth	r1, r3
 800f8be:	4b3c      	ldr	r3, [pc, #240]	@ (800f9b0 <tcp_receive+0xf10>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	b29a      	uxth	r2, r3
 800f8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	1a8a      	subs	r2, r1, r2
 800f8ca:	b292      	uxth	r2, r2
 800f8cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	685a      	ldr	r2, [r3, #4]
 800f8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	891b      	ldrh	r3, [r3, #8]
 800f8da:	4619      	mov	r1, r3
 800f8dc:	4610      	mov	r0, r2
 800f8de:	f7fb fdd5 	bl	800b48c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	891c      	ldrh	r4, [r3, #8]
 800f8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	68db      	ldr	r3, [r3, #12]
 800f8ee:	899b      	ldrh	r3, [r3, #12]
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fa fbf2 	bl	800a0dc <lwip_htons>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	b2db      	uxtb	r3, r3
 800f8fc:	f003 0303 	and.w	r3, r3, #3
 800f900:	2b00      	cmp	r3, #0
 800f902:	d001      	beq.n	800f908 <tcp_receive+0xe68>
 800f904:	2301      	movs	r3, #1
 800f906:	e000      	b.n	800f90a <tcp_receive+0xe6a>
 800f908:	2300      	movs	r3, #0
 800f90a:	4423      	add	r3, r4
 800f90c:	b29a      	uxth	r2, r3
 800f90e:	4b2a      	ldr	r3, [pc, #168]	@ (800f9b8 <tcp_receive+0xf18>)
 800f910:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f912:	4b29      	ldr	r3, [pc, #164]	@ (800f9b8 <tcp_receive+0xf18>)
 800f914:	881b      	ldrh	r3, [r3, #0]
 800f916:	461a      	mov	r2, r3
 800f918:	4b25      	ldr	r3, [pc, #148]	@ (800f9b0 <tcp_receive+0xf10>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	441a      	add	r2, r3
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f922:	6879      	ldr	r1, [r7, #4]
 800f924:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f926:	440b      	add	r3, r1
 800f928:	429a      	cmp	r2, r3
 800f92a:	d019      	beq.n	800f960 <tcp_receive+0xec0>
 800f92c:	4b23      	ldr	r3, [pc, #140]	@ (800f9bc <tcp_receive+0xf1c>)
 800f92e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800f932:	4923      	ldr	r1, [pc, #140]	@ (800f9c0 <tcp_receive+0xf20>)
 800f934:	4823      	ldr	r0, [pc, #140]	@ (800f9c4 <tcp_receive+0xf24>)
 800f936:	f004 fd9d 	bl	8014474 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f93a:	e011      	b.n	800f960 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f944:	2b00      	cmp	r3, #0
 800f946:	f47f aea5 	bne.w	800f694 <tcp_receive+0xbf4>
 800f94a:	e00a      	b.n	800f962 <tcp_receive+0xec2>
                break;
 800f94c:	bf00      	nop
 800f94e:	e008      	b.n	800f962 <tcp_receive+0xec2>
                break;
 800f950:	bf00      	nop
 800f952:	e006      	b.n	800f962 <tcp_receive+0xec2>
                  break;
 800f954:	bf00      	nop
 800f956:	e004      	b.n	800f962 <tcp_receive+0xec2>
                  break;
 800f958:	bf00      	nop
 800f95a:	e002      	b.n	800f962 <tcp_receive+0xec2>
                  break;
 800f95c:	bf00      	nop
 800f95e:	e000      	b.n	800f962 <tcp_receive+0xec2>
                break;
 800f960:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f001 fa30 	bl	8010dc8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f968:	e003      	b.n	800f972 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f001 fa2c 	bl	8010dc8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f970:	e01a      	b.n	800f9a8 <tcp_receive+0xf08>
 800f972:	e019      	b.n	800f9a8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f974:	4b0e      	ldr	r3, [pc, #56]	@ (800f9b0 <tcp_receive+0xf10>)
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f97c:	1ad3      	subs	r3, r2, r3
 800f97e:	2b00      	cmp	r3, #0
 800f980:	db0a      	blt.n	800f998 <tcp_receive+0xef8>
 800f982:	4b0b      	ldr	r3, [pc, #44]	@ (800f9b0 <tcp_receive+0xf10>)
 800f984:	681a      	ldr	r2, [r3, #0]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f98a:	6879      	ldr	r1, [r7, #4]
 800f98c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f98e:	440b      	add	r3, r1
 800f990:	1ad3      	subs	r3, r2, r3
 800f992:	3301      	adds	r3, #1
 800f994:	2b00      	cmp	r3, #0
 800f996:	dd07      	ble.n	800f9a8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	8b5b      	ldrh	r3, [r3, #26]
 800f99c:	f043 0302 	orr.w	r3, r3, #2
 800f9a0:	b29a      	uxth	r2, r3
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f9a6:	e7ff      	b.n	800f9a8 <tcp_receive+0xf08>
 800f9a8:	bf00      	nop
 800f9aa:	3750      	adds	r7, #80	@ 0x50
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bdb0      	pop	{r4, r5, r7, pc}
 800f9b0:	2000b240 	.word	0x2000b240
 800f9b4:	2000b220 	.word	0x2000b220
 800f9b8:	2000b24a 	.word	0x2000b24a
 800f9bc:	080164d0 	.word	0x080164d0
 800f9c0:	08016878 	.word	0x08016878
 800f9c4:	0801651c 	.word	0x0801651c

0800f9c8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f9ce:	4b15      	ldr	r3, [pc, #84]	@ (800fa24 <tcp_get_next_optbyte+0x5c>)
 800f9d0:	881b      	ldrh	r3, [r3, #0]
 800f9d2:	1c5a      	adds	r2, r3, #1
 800f9d4:	b291      	uxth	r1, r2
 800f9d6:	4a13      	ldr	r2, [pc, #76]	@ (800fa24 <tcp_get_next_optbyte+0x5c>)
 800f9d8:	8011      	strh	r1, [r2, #0]
 800f9da:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f9dc:	4b12      	ldr	r3, [pc, #72]	@ (800fa28 <tcp_get_next_optbyte+0x60>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d004      	beq.n	800f9ee <tcp_get_next_optbyte+0x26>
 800f9e4:	4b11      	ldr	r3, [pc, #68]	@ (800fa2c <tcp_get_next_optbyte+0x64>)
 800f9e6:	881b      	ldrh	r3, [r3, #0]
 800f9e8:	88fa      	ldrh	r2, [r7, #6]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d208      	bcs.n	800fa00 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f9ee:	4b10      	ldr	r3, [pc, #64]	@ (800fa30 <tcp_get_next_optbyte+0x68>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	3314      	adds	r3, #20
 800f9f4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f9f6:	88fb      	ldrh	r3, [r7, #6]
 800f9f8:	683a      	ldr	r2, [r7, #0]
 800f9fa:	4413      	add	r3, r2
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	e00b      	b.n	800fa18 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fa00:	88fb      	ldrh	r3, [r7, #6]
 800fa02:	b2da      	uxtb	r2, r3
 800fa04:	4b09      	ldr	r3, [pc, #36]	@ (800fa2c <tcp_get_next_optbyte+0x64>)
 800fa06:	881b      	ldrh	r3, [r3, #0]
 800fa08:	b2db      	uxtb	r3, r3
 800fa0a:	1ad3      	subs	r3, r2, r3
 800fa0c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fa0e:	4b06      	ldr	r3, [pc, #24]	@ (800fa28 <tcp_get_next_optbyte+0x60>)
 800fa10:	681a      	ldr	r2, [r3, #0]
 800fa12:	797b      	ldrb	r3, [r7, #5]
 800fa14:	4413      	add	r3, r2
 800fa16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	370c      	adds	r7, #12
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr
 800fa24:	2000b23c 	.word	0x2000b23c
 800fa28:	2000b238 	.word	0x2000b238
 800fa2c:	2000b236 	.word	0x2000b236
 800fa30:	2000b230 	.word	0x2000b230

0800fa34 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b084      	sub	sp, #16
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d106      	bne.n	800fa50 <tcp_parseopt+0x1c>
 800fa42:	4b32      	ldr	r3, [pc, #200]	@ (800fb0c <tcp_parseopt+0xd8>)
 800fa44:	f240 727d 	movw	r2, #1917	@ 0x77d
 800fa48:	4931      	ldr	r1, [pc, #196]	@ (800fb10 <tcp_parseopt+0xdc>)
 800fa4a:	4832      	ldr	r0, [pc, #200]	@ (800fb14 <tcp_parseopt+0xe0>)
 800fa4c:	f004 fd12 	bl	8014474 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fa50:	4b31      	ldr	r3, [pc, #196]	@ (800fb18 <tcp_parseopt+0xe4>)
 800fa52:	881b      	ldrh	r3, [r3, #0]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d056      	beq.n	800fb06 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fa58:	4b30      	ldr	r3, [pc, #192]	@ (800fb1c <tcp_parseopt+0xe8>)
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	801a      	strh	r2, [r3, #0]
 800fa5e:	e046      	b.n	800faee <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800fa60:	f7ff ffb2 	bl	800f9c8 <tcp_get_next_optbyte>
 800fa64:	4603      	mov	r3, r0
 800fa66:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fa68:	7bfb      	ldrb	r3, [r7, #15]
 800fa6a:	2b02      	cmp	r3, #2
 800fa6c:	d006      	beq.n	800fa7c <tcp_parseopt+0x48>
 800fa6e:	2b02      	cmp	r3, #2
 800fa70:	dc2a      	bgt.n	800fac8 <tcp_parseopt+0x94>
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d042      	beq.n	800fafc <tcp_parseopt+0xc8>
 800fa76:	2b01      	cmp	r3, #1
 800fa78:	d038      	beq.n	800faec <tcp_parseopt+0xb8>
 800fa7a:	e025      	b.n	800fac8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fa7c:	f7ff ffa4 	bl	800f9c8 <tcp_get_next_optbyte>
 800fa80:	4603      	mov	r3, r0
 800fa82:	2b04      	cmp	r3, #4
 800fa84:	d13c      	bne.n	800fb00 <tcp_parseopt+0xcc>
 800fa86:	4b25      	ldr	r3, [pc, #148]	@ (800fb1c <tcp_parseopt+0xe8>)
 800fa88:	881b      	ldrh	r3, [r3, #0]
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	4a22      	ldr	r2, [pc, #136]	@ (800fb18 <tcp_parseopt+0xe4>)
 800fa8e:	8812      	ldrh	r2, [r2, #0]
 800fa90:	4293      	cmp	r3, r2
 800fa92:	da35      	bge.n	800fb00 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fa94:	f7ff ff98 	bl	800f9c8 <tcp_get_next_optbyte>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	021b      	lsls	r3, r3, #8
 800fa9c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fa9e:	f7ff ff93 	bl	800f9c8 <tcp_get_next_optbyte>
 800faa2:	4603      	mov	r3, r0
 800faa4:	461a      	mov	r2, r3
 800faa6:	89bb      	ldrh	r3, [r7, #12]
 800faa8:	4313      	orrs	r3, r2
 800faaa:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800faac:	89bb      	ldrh	r3, [r7, #12]
 800faae:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800fab2:	d804      	bhi.n	800fabe <tcp_parseopt+0x8a>
 800fab4:	89bb      	ldrh	r3, [r7, #12]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d001      	beq.n	800fabe <tcp_parseopt+0x8a>
 800faba:	89ba      	ldrh	r2, [r7, #12]
 800fabc:	e001      	b.n	800fac2 <tcp_parseopt+0x8e>
 800fabe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800fac6:	e012      	b.n	800faee <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fac8:	f7ff ff7e 	bl	800f9c8 <tcp_get_next_optbyte>
 800facc:	4603      	mov	r3, r0
 800face:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fad0:	7afb      	ldrb	r3, [r7, #11]
 800fad2:	2b01      	cmp	r3, #1
 800fad4:	d916      	bls.n	800fb04 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fad6:	7afb      	ldrb	r3, [r7, #11]
 800fad8:	b29a      	uxth	r2, r3
 800fada:	4b10      	ldr	r3, [pc, #64]	@ (800fb1c <tcp_parseopt+0xe8>)
 800fadc:	881b      	ldrh	r3, [r3, #0]
 800fade:	4413      	add	r3, r2
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	3b02      	subs	r3, #2
 800fae4:	b29a      	uxth	r2, r3
 800fae6:	4b0d      	ldr	r3, [pc, #52]	@ (800fb1c <tcp_parseopt+0xe8>)
 800fae8:	801a      	strh	r2, [r3, #0]
 800faea:	e000      	b.n	800faee <tcp_parseopt+0xba>
          break;
 800faec:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800faee:	4b0b      	ldr	r3, [pc, #44]	@ (800fb1c <tcp_parseopt+0xe8>)
 800faf0:	881a      	ldrh	r2, [r3, #0]
 800faf2:	4b09      	ldr	r3, [pc, #36]	@ (800fb18 <tcp_parseopt+0xe4>)
 800faf4:	881b      	ldrh	r3, [r3, #0]
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d3b2      	bcc.n	800fa60 <tcp_parseopt+0x2c>
 800fafa:	e004      	b.n	800fb06 <tcp_parseopt+0xd2>
          return;
 800fafc:	bf00      	nop
 800fafe:	e002      	b.n	800fb06 <tcp_parseopt+0xd2>
            return;
 800fb00:	bf00      	nop
 800fb02:	e000      	b.n	800fb06 <tcp_parseopt+0xd2>
            return;
 800fb04:	bf00      	nop
      }
    }
  }
}
 800fb06:	3710      	adds	r7, #16
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	080164d0 	.word	0x080164d0
 800fb10:	08016934 	.word	0x08016934
 800fb14:	0801651c 	.word	0x0801651c
 800fb18:	2000b234 	.word	0x2000b234
 800fb1c:	2000b23c 	.word	0x2000b23c

0800fb20 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fb20:	b480      	push	{r7}
 800fb22:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fb24:	4b05      	ldr	r3, [pc, #20]	@ (800fb3c <tcp_trigger_input_pcb_close+0x1c>)
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	f043 0310 	orr.w	r3, r3, #16
 800fb2c:	b2da      	uxtb	r2, r3
 800fb2e:	4b03      	ldr	r3, [pc, #12]	@ (800fb3c <tcp_trigger_input_pcb_close+0x1c>)
 800fb30:	701a      	strb	r2, [r3, #0]
}
 800fb32:	bf00      	nop
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr
 800fb3c:	2000b24d 	.word	0x2000b24d

0800fb40 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	60b9      	str	r1, [r7, #8]
 800fb4a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d00a      	beq.n	800fb68 <tcp_route+0x28>
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	7a1b      	ldrb	r3, [r3, #8]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d006      	beq.n	800fb68 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	7a1b      	ldrb	r3, [r3, #8]
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fb faba 	bl	800b0d8 <netif_get_by_index>
 800fb64:	4603      	mov	r3, r0
 800fb66:	e003      	b.n	800fb70 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f003 f997 	bl	8012e9c <ip4_route>
 800fb6e:	4603      	mov	r3, r0
  }
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3710      	adds	r7, #16
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fb78:	b590      	push	{r4, r7, lr}
 800fb7a:	b087      	sub	sp, #28
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	603b      	str	r3, [r7, #0]
 800fb84:	4613      	mov	r3, r2
 800fb86:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d105      	bne.n	800fb9a <tcp_create_segment+0x22>
 800fb8e:	4b43      	ldr	r3, [pc, #268]	@ (800fc9c <tcp_create_segment+0x124>)
 800fb90:	22a3      	movs	r2, #163	@ 0xa3
 800fb92:	4943      	ldr	r1, [pc, #268]	@ (800fca0 <tcp_create_segment+0x128>)
 800fb94:	4843      	ldr	r0, [pc, #268]	@ (800fca4 <tcp_create_segment+0x12c>)
 800fb96:	f004 fc6d 	bl	8014474 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d105      	bne.n	800fbac <tcp_create_segment+0x34>
 800fba0:	4b3e      	ldr	r3, [pc, #248]	@ (800fc9c <tcp_create_segment+0x124>)
 800fba2:	22a4      	movs	r2, #164	@ 0xa4
 800fba4:	4940      	ldr	r1, [pc, #256]	@ (800fca8 <tcp_create_segment+0x130>)
 800fba6:	483f      	ldr	r0, [pc, #252]	@ (800fca4 <tcp_create_segment+0x12c>)
 800fba8:	f004 fc64 	bl	8014474 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fbac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	f003 0304 	and.w	r3, r3, #4
 800fbb8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fbba:	2003      	movs	r0, #3
 800fbbc:	f7fa ff06 	bl	800a9cc <memp_malloc>
 800fbc0:	6138      	str	r0, [r7, #16]
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d104      	bne.n	800fbd2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fbc8:	68b8      	ldr	r0, [r7, #8]
 800fbca:	f7fb fde5 	bl	800b798 <pbuf_free>
    return NULL;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	e060      	b.n	800fc94 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800fbd8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	68ba      	ldr	r2, [r7, #8]
 800fbe4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	891a      	ldrh	r2, [r3, #8]
 800fbea:	7dfb      	ldrb	r3, [r7, #23]
 800fbec:	b29b      	uxth	r3, r3
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d205      	bcs.n	800fbfe <tcp_create_segment+0x86>
 800fbf2:	4b2a      	ldr	r3, [pc, #168]	@ (800fc9c <tcp_create_segment+0x124>)
 800fbf4:	22b0      	movs	r2, #176	@ 0xb0
 800fbf6:	492d      	ldr	r1, [pc, #180]	@ (800fcac <tcp_create_segment+0x134>)
 800fbf8:	482a      	ldr	r0, [pc, #168]	@ (800fca4 <tcp_create_segment+0x12c>)
 800fbfa:	f004 fc3b 	bl	8014474 <iprintf>
  seg->len = p->tot_len - optlen;
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	891a      	ldrh	r2, [r3, #8]
 800fc02:	7dfb      	ldrb	r3, [r7, #23]
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	1ad3      	subs	r3, r2, r3
 800fc08:	b29a      	uxth	r2, r3
 800fc0a:	693b      	ldr	r3, [r7, #16]
 800fc0c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fc0e:	2114      	movs	r1, #20
 800fc10:	68b8      	ldr	r0, [r7, #8]
 800fc12:	f7fb fd2b 	bl	800b66c <pbuf_add_header>
 800fc16:	4603      	mov	r3, r0
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d004      	beq.n	800fc26 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fc1c:	6938      	ldr	r0, [r7, #16]
 800fc1e:	f7fd f8d2 	bl	800cdc6 <tcp_seg_free>
    return NULL;
 800fc22:	2300      	movs	r3, #0
 800fc24:	e036      	b.n	800fc94 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	685a      	ldr	r2, [r3, #4]
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	8ada      	ldrh	r2, [r3, #22]
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	68dc      	ldr	r4, [r3, #12]
 800fc38:	4610      	mov	r0, r2
 800fc3a:	f7fa fa4f 	bl	800a0dc <lwip_htons>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	8b1a      	ldrh	r2, [r3, #24]
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	68dc      	ldr	r4, [r3, #12]
 800fc4a:	4610      	mov	r0, r2
 800fc4c:	f7fa fa46 	bl	800a0dc <lwip_htons>
 800fc50:	4603      	mov	r3, r0
 800fc52:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	68dc      	ldr	r4, [r3, #12]
 800fc58:	6838      	ldr	r0, [r7, #0]
 800fc5a:	f7fa fa55 	bl	800a108 <lwip_htonl>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fc62:	7dfb      	ldrb	r3, [r7, #23]
 800fc64:	089b      	lsrs	r3, r3, #2
 800fc66:	b2db      	uxtb	r3, r3
 800fc68:	3305      	adds	r3, #5
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	031b      	lsls	r3, r3, #12
 800fc6e:	b29a      	uxth	r2, r3
 800fc70:	79fb      	ldrb	r3, [r7, #7]
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	4313      	orrs	r3, r2
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	68dc      	ldr	r4, [r3, #12]
 800fc7c:	4610      	mov	r0, r2
 800fc7e:	f7fa fa2d 	bl	800a0dc <lwip_htons>
 800fc82:	4603      	mov	r3, r0
 800fc84:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	68db      	ldr	r3, [r3, #12]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	749a      	strb	r2, [r3, #18]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	74da      	strb	r2, [r3, #19]
  return seg;
 800fc92:	693b      	ldr	r3, [r7, #16]
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	371c      	adds	r7, #28
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd90      	pop	{r4, r7, pc}
 800fc9c:	08016950 	.word	0x08016950
 800fca0:	08016984 	.word	0x08016984
 800fca4:	080169a4 	.word	0x080169a4
 800fca8:	080169cc 	.word	0x080169cc
 800fcac:	080169f0 	.word	0x080169f0

0800fcb0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fcb0:	b590      	push	{r4, r7, lr}
 800fcb2:	b08b      	sub	sp, #44	@ 0x2c
 800fcb4:	af02      	add	r7, sp, #8
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	460b      	mov	r3, r1
 800fcba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	61fb      	str	r3, [r7, #28]
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d106      	bne.n	800fcdc <tcp_split_unsent_seg+0x2c>
 800fcce:	4b95      	ldr	r3, [pc, #596]	@ (800ff24 <tcp_split_unsent_seg+0x274>)
 800fcd0:	f240 324b 	movw	r2, #843	@ 0x34b
 800fcd4:	4994      	ldr	r1, [pc, #592]	@ (800ff28 <tcp_split_unsent_seg+0x278>)
 800fcd6:	4895      	ldr	r0, [pc, #596]	@ (800ff2c <tcp_split_unsent_seg+0x27c>)
 800fcd8:	f004 fbcc 	bl	8014474 <iprintf>

  useg = pcb->unsent;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fce0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d102      	bne.n	800fcee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fce8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcec:	e116      	b.n	800ff1c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fcee:	887b      	ldrh	r3, [r7, #2]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d109      	bne.n	800fd08 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fcf4:	4b8b      	ldr	r3, [pc, #556]	@ (800ff24 <tcp_split_unsent_seg+0x274>)
 800fcf6:	f240 3253 	movw	r2, #851	@ 0x353
 800fcfa:	498d      	ldr	r1, [pc, #564]	@ (800ff30 <tcp_split_unsent_seg+0x280>)
 800fcfc:	488b      	ldr	r0, [pc, #556]	@ (800ff2c <tcp_split_unsent_seg+0x27c>)
 800fcfe:	f004 fbb9 	bl	8014474 <iprintf>
    return ERR_VAL;
 800fd02:	f06f 0305 	mvn.w	r3, #5
 800fd06:	e109      	b.n	800ff1c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	891b      	ldrh	r3, [r3, #8]
 800fd0c:	887a      	ldrh	r2, [r7, #2]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d301      	bcc.n	800fd16 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fd12:	2300      	movs	r3, #0
 800fd14:	e102      	b.n	800ff1c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd1a:	887a      	ldrh	r2, [r7, #2]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d906      	bls.n	800fd2e <tcp_split_unsent_seg+0x7e>
 800fd20:	4b80      	ldr	r3, [pc, #512]	@ (800ff24 <tcp_split_unsent_seg+0x274>)
 800fd22:	f240 325b 	movw	r2, #859	@ 0x35b
 800fd26:	4983      	ldr	r1, [pc, #524]	@ (800ff34 <tcp_split_unsent_seg+0x284>)
 800fd28:	4880      	ldr	r0, [pc, #512]	@ (800ff2c <tcp_split_unsent_seg+0x27c>)
 800fd2a:	f004 fba3 	bl	8014474 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	891b      	ldrh	r3, [r3, #8]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d106      	bne.n	800fd44 <tcp_split_unsent_seg+0x94>
 800fd36:	4b7b      	ldr	r3, [pc, #492]	@ (800ff24 <tcp_split_unsent_seg+0x274>)
 800fd38:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800fd3c:	497e      	ldr	r1, [pc, #504]	@ (800ff38 <tcp_split_unsent_seg+0x288>)
 800fd3e:	487b      	ldr	r0, [pc, #492]	@ (800ff2c <tcp_split_unsent_seg+0x27c>)
 800fd40:	f004 fb98 	bl	8014474 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	7a9b      	ldrb	r3, [r3, #10]
 800fd48:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fd4a:	7bfb      	ldrb	r3, [r7, #15]
 800fd4c:	009b      	lsls	r3, r3, #2
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	f003 0304 	and.w	r3, r3, #4
 800fd54:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	891a      	ldrh	r2, [r3, #8]
 800fd5a:	887b      	ldrh	r3, [r7, #2]
 800fd5c:	1ad3      	subs	r3, r2, r3
 800fd5e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fd60:	7bbb      	ldrb	r3, [r7, #14]
 800fd62:	b29a      	uxth	r2, r3
 800fd64:	89bb      	ldrh	r3, [r7, #12]
 800fd66:	4413      	add	r3, r2
 800fd68:	b29b      	uxth	r3, r3
 800fd6a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fd6e:	4619      	mov	r1, r3
 800fd70:	2036      	movs	r0, #54	@ 0x36
 800fd72:	f7fb fa2d 	bl	800b1d0 <pbuf_alloc>
 800fd76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	f000 80b7 	beq.w	800feee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	685b      	ldr	r3, [r3, #4]
 800fd84:	891a      	ldrh	r2, [r3, #8]
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	891b      	ldrh	r3, [r3, #8]
 800fd8a:	1ad3      	subs	r3, r2, r3
 800fd8c:	b29a      	uxth	r2, r3
 800fd8e:	887b      	ldrh	r3, [r7, #2]
 800fd90:	4413      	add	r3, r2
 800fd92:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	6858      	ldr	r0, [r3, #4]
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	685a      	ldr	r2, [r3, #4]
 800fd9c:	7bbb      	ldrb	r3, [r7, #14]
 800fd9e:	18d1      	adds	r1, r2, r3
 800fda0:	897b      	ldrh	r3, [r7, #10]
 800fda2:	89ba      	ldrh	r2, [r7, #12]
 800fda4:	f7fb fef2 	bl	800bb8c <pbuf_copy_partial>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	461a      	mov	r2, r3
 800fdac:	89bb      	ldrh	r3, [r7, #12]
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	f040 809f 	bne.w	800fef2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	899b      	ldrh	r3, [r3, #12]
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f7fa f98d 	bl	800a0dc <lwip_htons>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fdca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800fdcc:	2300      	movs	r3, #0
 800fdce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800fdd0:	7efb      	ldrb	r3, [r7, #27]
 800fdd2:	f003 0308 	and.w	r3, r3, #8
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d007      	beq.n	800fdea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800fdda:	7efb      	ldrb	r3, [r7, #27]
 800fddc:	f023 0308 	bic.w	r3, r3, #8
 800fde0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800fde2:	7ebb      	ldrb	r3, [r7, #26]
 800fde4:	f043 0308 	orr.w	r3, r3, #8
 800fde8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800fdea:	7efb      	ldrb	r3, [r7, #27]
 800fdec:	f003 0301 	and.w	r3, r3, #1
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d007      	beq.n	800fe04 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800fdf4:	7efb      	ldrb	r3, [r7, #27]
 800fdf6:	f023 0301 	bic.w	r3, r3, #1
 800fdfa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800fdfc:	7ebb      	ldrb	r3, [r7, #26]
 800fdfe:	f043 0301 	orr.w	r3, r3, #1
 800fe02:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	68db      	ldr	r3, [r3, #12]
 800fe08:	685b      	ldr	r3, [r3, #4]
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7fa f97c 	bl	800a108 <lwip_htonl>
 800fe10:	4602      	mov	r2, r0
 800fe12:	887b      	ldrh	r3, [r7, #2]
 800fe14:	18d1      	adds	r1, r2, r3
 800fe16:	7eba      	ldrb	r2, [r7, #26]
 800fe18:	7bfb      	ldrb	r3, [r7, #15]
 800fe1a:	9300      	str	r3, [sp, #0]
 800fe1c:	460b      	mov	r3, r1
 800fe1e:	6939      	ldr	r1, [r7, #16]
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f7ff fea9 	bl	800fb78 <tcp_create_segment>
 800fe26:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d063      	beq.n	800fef6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7fb fd38 	bl	800b8a8 <pbuf_clen>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fe42:	1a9b      	subs	r3, r3, r2
 800fe44:	b29a      	uxth	r2, r3
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	6858      	ldr	r0, [r3, #4]
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	891a      	ldrh	r2, [r3, #8]
 800fe56:	89bb      	ldrh	r3, [r7, #12]
 800fe58:	1ad3      	subs	r3, r2, r3
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	f7fb fb15 	bl	800b48c <pbuf_realloc>
  useg->len -= remainder;
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	891a      	ldrh	r2, [r3, #8]
 800fe66:	89bb      	ldrh	r3, [r7, #12]
 800fe68:	1ad3      	subs	r3, r2, r3
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fe70:	697b      	ldr	r3, [r7, #20]
 800fe72:	68db      	ldr	r3, [r3, #12]
 800fe74:	899b      	ldrh	r3, [r3, #12]
 800fe76:	b29c      	uxth	r4, r3
 800fe78:	7efb      	ldrb	r3, [r7, #27]
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7fa f92d 	bl	800a0dc <lwip_htons>
 800fe82:	4603      	mov	r3, r0
 800fe84:	461a      	mov	r2, r3
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	68db      	ldr	r3, [r3, #12]
 800fe8a:	4322      	orrs	r2, r4
 800fe8c:	b292      	uxth	r2, r2
 800fe8e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7fb fd07 	bl	800b8a8 <pbuf_clen>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fea4:	4413      	add	r3, r2
 800fea6:	b29a      	uxth	r2, r3
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800feae:	69fb      	ldr	r3, [r7, #28]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7fb fcf8 	bl	800b8a8 <pbuf_clen>
 800feb8:	4603      	mov	r3, r0
 800feba:	461a      	mov	r2, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fec2:	4413      	add	r3, r2
 800fec4:	b29a      	uxth	r2, r3
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	681a      	ldr	r2, [r3, #0]
 800fed0:	69fb      	ldr	r3, [r7, #28]
 800fed2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	69fa      	ldr	r2, [r7, #28]
 800fed8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800feda:	69fb      	ldr	r3, [r7, #28]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d103      	bne.n	800feea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2200      	movs	r2, #0
 800fee6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800feea:	2300      	movs	r3, #0
 800feec:	e016      	b.n	800ff1c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800feee:	bf00      	nop
 800fef0:	e002      	b.n	800fef8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fef2:	bf00      	nop
 800fef4:	e000      	b.n	800fef8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fef6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d006      	beq.n	800ff0c <tcp_split_unsent_seg+0x25c>
 800fefe:	4b09      	ldr	r3, [pc, #36]	@ (800ff24 <tcp_split_unsent_seg+0x274>)
 800ff00:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800ff04:	490d      	ldr	r1, [pc, #52]	@ (800ff3c <tcp_split_unsent_seg+0x28c>)
 800ff06:	4809      	ldr	r0, [pc, #36]	@ (800ff2c <tcp_split_unsent_seg+0x27c>)
 800ff08:	f004 fab4 	bl	8014474 <iprintf>
  if (p != NULL) {
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d002      	beq.n	800ff18 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ff12:	6938      	ldr	r0, [r7, #16]
 800ff14:	f7fb fc40 	bl	800b798 <pbuf_free>
  }

  return ERR_MEM;
 800ff18:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3724      	adds	r7, #36	@ 0x24
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd90      	pop	{r4, r7, pc}
 800ff24:	08016950 	.word	0x08016950
 800ff28:	08016ce4 	.word	0x08016ce4
 800ff2c:	080169a4 	.word	0x080169a4
 800ff30:	08016d08 	.word	0x08016d08
 800ff34:	08016d2c 	.word	0x08016d2c
 800ff38:	08016d3c 	.word	0x08016d3c
 800ff3c:	08016d4c 	.word	0x08016d4c

0800ff40 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ff40:	b590      	push	{r4, r7, lr}
 800ff42:	b085      	sub	sp, #20
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d106      	bne.n	800ff5c <tcp_send_fin+0x1c>
 800ff4e:	4b21      	ldr	r3, [pc, #132]	@ (800ffd4 <tcp_send_fin+0x94>)
 800ff50:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800ff54:	4920      	ldr	r1, [pc, #128]	@ (800ffd8 <tcp_send_fin+0x98>)
 800ff56:	4821      	ldr	r0, [pc, #132]	@ (800ffdc <tcp_send_fin+0x9c>)
 800ff58:	f004 fa8c 	bl	8014474 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d02e      	beq.n	800ffc2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff68:	60fb      	str	r3, [r7, #12]
 800ff6a:	e002      	b.n	800ff72 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d1f8      	bne.n	800ff6c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	68db      	ldr	r3, [r3, #12]
 800ff7e:	899b      	ldrh	r3, [r3, #12]
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7fa f8aa 	bl	800a0dc <lwip_htons>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	b2db      	uxtb	r3, r3
 800ff8c:	f003 0307 	and.w	r3, r3, #7
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d116      	bne.n	800ffc2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	899b      	ldrh	r3, [r3, #12]
 800ff9a:	b29c      	uxth	r4, r3
 800ff9c:	2001      	movs	r0, #1
 800ff9e:	f7fa f89d 	bl	800a0dc <lwip_htons>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	68db      	ldr	r3, [r3, #12]
 800ffaa:	4322      	orrs	r2, r4
 800ffac:	b292      	uxth	r2, r2
 800ffae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	8b5b      	ldrh	r3, [r3, #26]
 800ffb4:	f043 0320 	orr.w	r3, r3, #32
 800ffb8:	b29a      	uxth	r2, r3
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	e004      	b.n	800ffcc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ffc2:	2101      	movs	r1, #1
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 f80b 	bl	800ffe0 <tcp_enqueue_flags>
 800ffca:	4603      	mov	r3, r0
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3714      	adds	r7, #20
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd90      	pop	{r4, r7, pc}
 800ffd4:	08016950 	.word	0x08016950
 800ffd8:	08016d58 	.word	0x08016d58
 800ffdc:	080169a4 	.word	0x080169a4

0800ffe0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b08a      	sub	sp, #40	@ 0x28
 800ffe4:	af02      	add	r7, sp, #8
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	460b      	mov	r3, r1
 800ffea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ffec:	2300      	movs	r3, #0
 800ffee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800fff0:	2300      	movs	r3, #0
 800fff2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800fff4:	78fb      	ldrb	r3, [r7, #3]
 800fff6:	f003 0303 	and.w	r3, r3, #3
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d106      	bne.n	801000c <tcp_enqueue_flags+0x2c>
 800fffe:	4b67      	ldr	r3, [pc, #412]	@ (801019c <tcp_enqueue_flags+0x1bc>)
 8010000:	f240 4211 	movw	r2, #1041	@ 0x411
 8010004:	4966      	ldr	r1, [pc, #408]	@ (80101a0 <tcp_enqueue_flags+0x1c0>)
 8010006:	4867      	ldr	r0, [pc, #412]	@ (80101a4 <tcp_enqueue_flags+0x1c4>)
 8010008:	f004 fa34 	bl	8014474 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d106      	bne.n	8010020 <tcp_enqueue_flags+0x40>
 8010012:	4b62      	ldr	r3, [pc, #392]	@ (801019c <tcp_enqueue_flags+0x1bc>)
 8010014:	f240 4213 	movw	r2, #1043	@ 0x413
 8010018:	4963      	ldr	r1, [pc, #396]	@ (80101a8 <tcp_enqueue_flags+0x1c8>)
 801001a:	4862      	ldr	r0, [pc, #392]	@ (80101a4 <tcp_enqueue_flags+0x1c4>)
 801001c:	f004 fa2a 	bl	8014474 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010020:	78fb      	ldrb	r3, [r7, #3]
 8010022:	f003 0302 	and.w	r3, r3, #2
 8010026:	2b00      	cmp	r3, #0
 8010028:	d001      	beq.n	801002e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801002a:	2301      	movs	r3, #1
 801002c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801002e:	7ffb      	ldrb	r3, [r7, #31]
 8010030:	009b      	lsls	r3, r3, #2
 8010032:	b2db      	uxtb	r3, r3
 8010034:	f003 0304 	and.w	r3, r3, #4
 8010038:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801003a:	7dfb      	ldrb	r3, [r7, #23]
 801003c:	b29b      	uxth	r3, r3
 801003e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010042:	4619      	mov	r1, r3
 8010044:	2036      	movs	r0, #54	@ 0x36
 8010046:	f7fb f8c3 	bl	800b1d0 <pbuf_alloc>
 801004a:	6138      	str	r0, [r7, #16]
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d109      	bne.n	8010066 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	8b5b      	ldrh	r3, [r3, #26]
 8010056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801005a:	b29a      	uxth	r2, r3
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010060:	f04f 33ff 	mov.w	r3, #4294967295
 8010064:	e095      	b.n	8010192 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	895a      	ldrh	r2, [r3, #10]
 801006a:	7dfb      	ldrb	r3, [r7, #23]
 801006c:	b29b      	uxth	r3, r3
 801006e:	429a      	cmp	r2, r3
 8010070:	d206      	bcs.n	8010080 <tcp_enqueue_flags+0xa0>
 8010072:	4b4a      	ldr	r3, [pc, #296]	@ (801019c <tcp_enqueue_flags+0x1bc>)
 8010074:	f240 4239 	movw	r2, #1081	@ 0x439
 8010078:	494c      	ldr	r1, [pc, #304]	@ (80101ac <tcp_enqueue_flags+0x1cc>)
 801007a:	484a      	ldr	r0, [pc, #296]	@ (80101a4 <tcp_enqueue_flags+0x1c4>)
 801007c:	f004 f9fa 	bl	8014474 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010084:	78fa      	ldrb	r2, [r7, #3]
 8010086:	7ffb      	ldrb	r3, [r7, #31]
 8010088:	9300      	str	r3, [sp, #0]
 801008a:	460b      	mov	r3, r1
 801008c:	6939      	ldr	r1, [r7, #16]
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7ff fd72 	bl	800fb78 <tcp_create_segment>
 8010094:	60f8      	str	r0, [r7, #12]
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d109      	bne.n	80100b0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	8b5b      	ldrh	r3, [r3, #26]
 80100a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100a4:	b29a      	uxth	r2, r3
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80100aa:	f04f 33ff 	mov.w	r3, #4294967295
 80100ae:	e070      	b.n	8010192 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	f003 0303 	and.w	r3, r3, #3
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d006      	beq.n	80100ca <tcp_enqueue_flags+0xea>
 80100bc:	4b37      	ldr	r3, [pc, #220]	@ (801019c <tcp_enqueue_flags+0x1bc>)
 80100be:	f240 4242 	movw	r2, #1090	@ 0x442
 80100c2:	493b      	ldr	r1, [pc, #236]	@ (80101b0 <tcp_enqueue_flags+0x1d0>)
 80100c4:	4837      	ldr	r0, [pc, #220]	@ (80101a4 <tcp_enqueue_flags+0x1c4>)
 80100c6:	f004 f9d5 	bl	8014474 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	891b      	ldrh	r3, [r3, #8]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d006      	beq.n	80100e0 <tcp_enqueue_flags+0x100>
 80100d2:	4b32      	ldr	r3, [pc, #200]	@ (801019c <tcp_enqueue_flags+0x1bc>)
 80100d4:	f240 4243 	movw	r2, #1091	@ 0x443
 80100d8:	4936      	ldr	r1, [pc, #216]	@ (80101b4 <tcp_enqueue_flags+0x1d4>)
 80100da:	4832      	ldr	r0, [pc, #200]	@ (80101a4 <tcp_enqueue_flags+0x1c4>)
 80100dc:	f004 f9ca 	bl	8014474 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d103      	bne.n	80100f0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	68fa      	ldr	r2, [r7, #12]
 80100ec:	66da      	str	r2, [r3, #108]	@ 0x6c
 80100ee:	e00d      	b.n	801010c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100f4:	61bb      	str	r3, [r7, #24]
 80100f6:	e002      	b.n	80100fe <tcp_enqueue_flags+0x11e>
 80100f8:	69bb      	ldr	r3, [r7, #24]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	61bb      	str	r3, [r7, #24]
 80100fe:	69bb      	ldr	r3, [r7, #24]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d1f8      	bne.n	80100f8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010106:	69bb      	ldr	r3, [r7, #24]
 8010108:	68fa      	ldr	r2, [r7, #12]
 801010a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2200      	movs	r2, #0
 8010110:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010114:	78fb      	ldrb	r3, [r7, #3]
 8010116:	f003 0302 	and.w	r3, r3, #2
 801011a:	2b00      	cmp	r3, #0
 801011c:	d104      	bne.n	8010128 <tcp_enqueue_flags+0x148>
 801011e:	78fb      	ldrb	r3, [r7, #3]
 8010120:	f003 0301 	and.w	r3, r3, #1
 8010124:	2b00      	cmp	r3, #0
 8010126:	d004      	beq.n	8010132 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801012c:	1c5a      	adds	r2, r3, #1
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010132:	78fb      	ldrb	r3, [r7, #3]
 8010134:	f003 0301 	and.w	r3, r3, #1
 8010138:	2b00      	cmp	r3, #0
 801013a:	d006      	beq.n	801014a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	8b5b      	ldrh	r3, [r3, #26]
 8010140:	f043 0320 	orr.w	r3, r3, #32
 8010144:	b29a      	uxth	r2, r3
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	4618      	mov	r0, r3
 8010150:	f7fb fbaa 	bl	800b8a8 <pbuf_clen>
 8010154:	4603      	mov	r3, r0
 8010156:	461a      	mov	r2, r3
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801015e:	4413      	add	r3, r2
 8010160:	b29a      	uxth	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801016e:	2b00      	cmp	r3, #0
 8010170:	d00e      	beq.n	8010190 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010176:	2b00      	cmp	r3, #0
 8010178:	d10a      	bne.n	8010190 <tcp_enqueue_flags+0x1b0>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801017e:	2b00      	cmp	r3, #0
 8010180:	d106      	bne.n	8010190 <tcp_enqueue_flags+0x1b0>
 8010182:	4b06      	ldr	r3, [pc, #24]	@ (801019c <tcp_enqueue_flags+0x1bc>)
 8010184:	f240 4265 	movw	r2, #1125	@ 0x465
 8010188:	490b      	ldr	r1, [pc, #44]	@ (80101b8 <tcp_enqueue_flags+0x1d8>)
 801018a:	4806      	ldr	r0, [pc, #24]	@ (80101a4 <tcp_enqueue_flags+0x1c4>)
 801018c:	f004 f972 	bl	8014474 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010190:	2300      	movs	r3, #0
}
 8010192:	4618      	mov	r0, r3
 8010194:	3720      	adds	r7, #32
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}
 801019a:	bf00      	nop
 801019c:	08016950 	.word	0x08016950
 80101a0:	08016d74 	.word	0x08016d74
 80101a4:	080169a4 	.word	0x080169a4
 80101a8:	08016dcc 	.word	0x08016dcc
 80101ac:	08016dec 	.word	0x08016dec
 80101b0:	08016e28 	.word	0x08016e28
 80101b4:	08016e40 	.word	0x08016e40
 80101b8:	08016e6c 	.word	0x08016e6c

080101bc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80101bc:	b5b0      	push	{r4, r5, r7, lr}
 80101be:	b08a      	sub	sp, #40	@ 0x28
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d106      	bne.n	80101d8 <tcp_output+0x1c>
 80101ca:	4b8a      	ldr	r3, [pc, #552]	@ (80103f4 <tcp_output+0x238>)
 80101cc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80101d0:	4989      	ldr	r1, [pc, #548]	@ (80103f8 <tcp_output+0x23c>)
 80101d2:	488a      	ldr	r0, [pc, #552]	@ (80103fc <tcp_output+0x240>)
 80101d4:	f004 f94e 	bl	8014474 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	7d1b      	ldrb	r3, [r3, #20]
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d106      	bne.n	80101ee <tcp_output+0x32>
 80101e0:	4b84      	ldr	r3, [pc, #528]	@ (80103f4 <tcp_output+0x238>)
 80101e2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80101e6:	4986      	ldr	r1, [pc, #536]	@ (8010400 <tcp_output+0x244>)
 80101e8:	4884      	ldr	r0, [pc, #528]	@ (80103fc <tcp_output+0x240>)
 80101ea:	f004 f943 	bl	8014474 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80101ee:	4b85      	ldr	r3, [pc, #532]	@ (8010404 <tcp_output+0x248>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d101      	bne.n	80101fc <tcp_output+0x40>
    return ERR_OK;
 80101f8:	2300      	movs	r3, #0
 80101fa:	e1ce      	b.n	801059a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010208:	4293      	cmp	r3, r2
 801020a:	bf28      	it	cs
 801020c:	4613      	movcs	r3, r2
 801020e:	b29b      	uxth	r3, r3
 8010210:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010216:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801021a:	2b00      	cmp	r3, #0
 801021c:	d10b      	bne.n	8010236 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	8b5b      	ldrh	r3, [r3, #26]
 8010222:	f003 0302 	and.w	r3, r3, #2
 8010226:	2b00      	cmp	r3, #0
 8010228:	f000 81aa 	beq.w	8010580 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f000 fdcb 	bl	8010dc8 <tcp_send_empty_ack>
 8010232:	4603      	mov	r3, r0
 8010234:	e1b1      	b.n	801059a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010236:	6879      	ldr	r1, [r7, #4]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	3304      	adds	r3, #4
 801023c:	461a      	mov	r2, r3
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f7ff fc7e 	bl	800fb40 <tcp_route>
 8010244:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d102      	bne.n	8010252 <tcp_output+0x96>
    return ERR_RTE;
 801024c:	f06f 0303 	mvn.w	r3, #3
 8010250:	e1a3      	b.n	801059a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d003      	beq.n	8010260 <tcp_output+0xa4>
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d111      	bne.n	8010284 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d002      	beq.n	801026c <tcp_output+0xb0>
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	3304      	adds	r3, #4
 801026a:	e000      	b.n	801026e <tcp_output+0xb2>
 801026c:	2300      	movs	r3, #0
 801026e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d102      	bne.n	801027c <tcp_output+0xc0>
      return ERR_RTE;
 8010276:	f06f 0303 	mvn.w	r3, #3
 801027a:	e18e      	b.n	801059a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801027c:	693b      	ldr	r3, [r7, #16]
 801027e:	681a      	ldr	r2, [r3, #0]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010286:	68db      	ldr	r3, [r3, #12]
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	4618      	mov	r0, r3
 801028c:	f7f9 ff3c 	bl	800a108 <lwip_htonl>
 8010290:	4602      	mov	r2, r0
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010296:	1ad3      	subs	r3, r2, r3
 8010298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801029a:	8912      	ldrh	r2, [r2, #8]
 801029c:	4413      	add	r3, r2
 801029e:	69ba      	ldr	r2, [r7, #24]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d227      	bcs.n	80102f4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80102aa:	461a      	mov	r2, r3
 80102ac:	69bb      	ldr	r3, [r7, #24]
 80102ae:	4293      	cmp	r3, r2
 80102b0:	d114      	bne.n	80102dc <tcp_output+0x120>
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d110      	bne.n	80102dc <tcp_output+0x120>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d10b      	bne.n	80102dc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2200      	movs	r2, #0
 80102c8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2201      	movs	r2, #1
 80102d0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2200      	movs	r2, #0
 80102d8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	8b5b      	ldrh	r3, [r3, #26]
 80102e0:	f003 0302 	and.w	r3, r3, #2
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	f000 814d 	beq.w	8010584 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f000 fd6c 	bl	8010dc8 <tcp_send_empty_ack>
 80102f0:	4603      	mov	r3, r0
 80102f2:	e152      	b.n	801059a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2200      	movs	r2, #0
 80102f8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010300:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010302:	6a3b      	ldr	r3, [r7, #32]
 8010304:	2b00      	cmp	r3, #0
 8010306:	f000 811c 	beq.w	8010542 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801030a:	e002      	b.n	8010312 <tcp_output+0x156>
 801030c:	6a3b      	ldr	r3, [r7, #32]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	623b      	str	r3, [r7, #32]
 8010312:	6a3b      	ldr	r3, [r7, #32]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d1f8      	bne.n	801030c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801031a:	e112      	b.n	8010542 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801031c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801031e:	68db      	ldr	r3, [r3, #12]
 8010320:	899b      	ldrh	r3, [r3, #12]
 8010322:	b29b      	uxth	r3, r3
 8010324:	4618      	mov	r0, r3
 8010326:	f7f9 fed9 	bl	800a0dc <lwip_htons>
 801032a:	4603      	mov	r3, r0
 801032c:	b2db      	uxtb	r3, r3
 801032e:	f003 0304 	and.w	r3, r3, #4
 8010332:	2b00      	cmp	r3, #0
 8010334:	d006      	beq.n	8010344 <tcp_output+0x188>
 8010336:	4b2f      	ldr	r3, [pc, #188]	@ (80103f4 <tcp_output+0x238>)
 8010338:	f240 5236 	movw	r2, #1334	@ 0x536
 801033c:	4932      	ldr	r1, [pc, #200]	@ (8010408 <tcp_output+0x24c>)
 801033e:	482f      	ldr	r0, [pc, #188]	@ (80103fc <tcp_output+0x240>)
 8010340:	f004 f898 	bl	8014474 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010348:	2b00      	cmp	r3, #0
 801034a:	d01f      	beq.n	801038c <tcp_output+0x1d0>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	8b5b      	ldrh	r3, [r3, #26]
 8010350:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8010354:	2b00      	cmp	r3, #0
 8010356:	d119      	bne.n	801038c <tcp_output+0x1d0>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801035c:	2b00      	cmp	r3, #0
 801035e:	d00b      	beq.n	8010378 <tcp_output+0x1bc>
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d110      	bne.n	801038c <tcp_output+0x1d0>
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801036e:	891a      	ldrh	r2, [r3, #8]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010374:	429a      	cmp	r2, r3
 8010376:	d209      	bcs.n	801038c <tcp_output+0x1d0>
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801037e:	2b00      	cmp	r3, #0
 8010380:	d004      	beq.n	801038c <tcp_output+0x1d0>
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010388:	2b08      	cmp	r3, #8
 801038a:	d901      	bls.n	8010390 <tcp_output+0x1d4>
 801038c:	2301      	movs	r3, #1
 801038e:	e000      	b.n	8010392 <tcp_output+0x1d6>
 8010390:	2300      	movs	r3, #0
 8010392:	2b00      	cmp	r3, #0
 8010394:	d106      	bne.n	80103a4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	8b5b      	ldrh	r3, [r3, #26]
 801039a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801039e:	2b00      	cmp	r3, #0
 80103a0:	f000 80e4 	beq.w	801056c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	7d1b      	ldrb	r3, [r3, #20]
 80103a8:	2b02      	cmp	r3, #2
 80103aa:	d00d      	beq.n	80103c8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80103ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103ae:	68db      	ldr	r3, [r3, #12]
 80103b0:	899b      	ldrh	r3, [r3, #12]
 80103b2:	b29c      	uxth	r4, r3
 80103b4:	2010      	movs	r0, #16
 80103b6:	f7f9 fe91 	bl	800a0dc <lwip_htons>
 80103ba:	4603      	mov	r3, r0
 80103bc:	461a      	mov	r2, r3
 80103be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103c0:	68db      	ldr	r3, [r3, #12]
 80103c2:	4322      	orrs	r2, r4
 80103c4:	b292      	uxth	r2, r2
 80103c6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80103c8:	697a      	ldr	r2, [r7, #20]
 80103ca:	6879      	ldr	r1, [r7, #4]
 80103cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80103ce:	f000 f909 	bl	80105e4 <tcp_output_segment>
 80103d2:	4603      	mov	r3, r0
 80103d4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80103d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d016      	beq.n	801040c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	8b5b      	ldrh	r3, [r3, #26]
 80103e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	835a      	strh	r2, [r3, #26]
      return err;
 80103ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103f0:	e0d3      	b.n	801059a <tcp_output+0x3de>
 80103f2:	bf00      	nop
 80103f4:	08016950 	.word	0x08016950
 80103f8:	08016e94 	.word	0x08016e94
 80103fc:	080169a4 	.word	0x080169a4
 8010400:	08016eac 	.word	0x08016eac
 8010404:	2000b254 	.word	0x2000b254
 8010408:	08016ed4 	.word	0x08016ed4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801040c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801040e:	681a      	ldr	r2, [r3, #0]
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	7d1b      	ldrb	r3, [r3, #20]
 8010418:	2b02      	cmp	r3, #2
 801041a:	d006      	beq.n	801042a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	8b5b      	ldrh	r3, [r3, #26]
 8010420:	f023 0303 	bic.w	r3, r3, #3
 8010424:	b29a      	uxth	r2, r3
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801042a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801042c:	68db      	ldr	r3, [r3, #12]
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	4618      	mov	r0, r3
 8010432:	f7f9 fe69 	bl	800a108 <lwip_htonl>
 8010436:	4604      	mov	r4, r0
 8010438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801043a:	891b      	ldrh	r3, [r3, #8]
 801043c:	461d      	mov	r5, r3
 801043e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010440:	68db      	ldr	r3, [r3, #12]
 8010442:	899b      	ldrh	r3, [r3, #12]
 8010444:	b29b      	uxth	r3, r3
 8010446:	4618      	mov	r0, r3
 8010448:	f7f9 fe48 	bl	800a0dc <lwip_htons>
 801044c:	4603      	mov	r3, r0
 801044e:	b2db      	uxtb	r3, r3
 8010450:	f003 0303 	and.w	r3, r3, #3
 8010454:	2b00      	cmp	r3, #0
 8010456:	d001      	beq.n	801045c <tcp_output+0x2a0>
 8010458:	2301      	movs	r3, #1
 801045a:	e000      	b.n	801045e <tcp_output+0x2a2>
 801045c:	2300      	movs	r3, #0
 801045e:	442b      	add	r3, r5
 8010460:	4423      	add	r3, r4
 8010462:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	1ad3      	subs	r3, r2, r3
 801046c:	2b00      	cmp	r3, #0
 801046e:	da02      	bge.n	8010476 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	68ba      	ldr	r2, [r7, #8]
 8010474:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010478:	891b      	ldrh	r3, [r3, #8]
 801047a:	461c      	mov	r4, r3
 801047c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801047e:	68db      	ldr	r3, [r3, #12]
 8010480:	899b      	ldrh	r3, [r3, #12]
 8010482:	b29b      	uxth	r3, r3
 8010484:	4618      	mov	r0, r3
 8010486:	f7f9 fe29 	bl	800a0dc <lwip_htons>
 801048a:	4603      	mov	r3, r0
 801048c:	b2db      	uxtb	r3, r3
 801048e:	f003 0303 	and.w	r3, r3, #3
 8010492:	2b00      	cmp	r3, #0
 8010494:	d001      	beq.n	801049a <tcp_output+0x2de>
 8010496:	2301      	movs	r3, #1
 8010498:	e000      	b.n	801049c <tcp_output+0x2e0>
 801049a:	2300      	movs	r3, #0
 801049c:	4423      	add	r3, r4
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d049      	beq.n	8010536 <tcp_output+0x37a>
      seg->next = NULL;
 80104a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104a4:	2200      	movs	r2, #0
 80104a6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d105      	bne.n	80104bc <tcp_output+0x300>
        pcb->unacked = seg;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104b4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80104b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104b8:	623b      	str	r3, [r7, #32]
 80104ba:	e03f      	b.n	801053c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80104bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	685b      	ldr	r3, [r3, #4]
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7f9 fe20 	bl	800a108 <lwip_htonl>
 80104c8:	4604      	mov	r4, r0
 80104ca:	6a3b      	ldr	r3, [r7, #32]
 80104cc:	68db      	ldr	r3, [r3, #12]
 80104ce:	685b      	ldr	r3, [r3, #4]
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7f9 fe19 	bl	800a108 <lwip_htonl>
 80104d6:	4603      	mov	r3, r0
 80104d8:	1ae3      	subs	r3, r4, r3
 80104da:	2b00      	cmp	r3, #0
 80104dc:	da24      	bge.n	8010528 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	3370      	adds	r3, #112	@ 0x70
 80104e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80104e4:	e002      	b.n	80104ec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80104ec:	69fb      	ldr	r3, [r7, #28]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d011      	beq.n	8010518 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80104f4:	69fb      	ldr	r3, [r7, #28]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7f9 fe03 	bl	800a108 <lwip_htonl>
 8010502:	4604      	mov	r4, r0
 8010504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010506:	68db      	ldr	r3, [r3, #12]
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	4618      	mov	r0, r3
 801050c:	f7f9 fdfc 	bl	800a108 <lwip_htonl>
 8010510:	4603      	mov	r3, r0
 8010512:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010514:	2b00      	cmp	r3, #0
 8010516:	dbe6      	blt.n	80104e6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	681a      	ldr	r2, [r3, #0]
 801051c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801051e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010524:	601a      	str	r2, [r3, #0]
 8010526:	e009      	b.n	801053c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010528:	6a3b      	ldr	r3, [r7, #32]
 801052a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801052c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801052e:	6a3b      	ldr	r3, [r7, #32]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	623b      	str	r3, [r7, #32]
 8010534:	e002      	b.n	801053c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010536:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010538:	f7fc fc45 	bl	800cdc6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010540:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8010542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010544:	2b00      	cmp	r3, #0
 8010546:	d012      	beq.n	801056e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	4618      	mov	r0, r3
 8010550:	f7f9 fdda 	bl	800a108 <lwip_htonl>
 8010554:	4602      	mov	r2, r0
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801055a:	1ad3      	subs	r3, r2, r3
 801055c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801055e:	8912      	ldrh	r2, [r2, #8]
 8010560:	4413      	add	r3, r2
  while (seg != NULL &&
 8010562:	69ba      	ldr	r2, [r7, #24]
 8010564:	429a      	cmp	r2, r3
 8010566:	f4bf aed9 	bcs.w	801031c <tcp_output+0x160>
 801056a:	e000      	b.n	801056e <tcp_output+0x3b2>
      break;
 801056c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010572:	2b00      	cmp	r3, #0
 8010574:	d108      	bne.n	8010588 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2200      	movs	r2, #0
 801057a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801057e:	e004      	b.n	801058a <tcp_output+0x3ce>
    goto output_done;
 8010580:	bf00      	nop
 8010582:	e002      	b.n	801058a <tcp_output+0x3ce>
    goto output_done;
 8010584:	bf00      	nop
 8010586:	e000      	b.n	801058a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010588:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	8b5b      	ldrh	r3, [r3, #26]
 801058e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010592:	b29a      	uxth	r2, r3
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010598:	2300      	movs	r3, #0
}
 801059a:	4618      	mov	r0, r3
 801059c:	3728      	adds	r7, #40	@ 0x28
 801059e:	46bd      	mov	sp, r7
 80105a0:	bdb0      	pop	{r4, r5, r7, pc}
 80105a2:	bf00      	nop

080105a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d106      	bne.n	80105c0 <tcp_output_segment_busy+0x1c>
 80105b2:	4b09      	ldr	r3, [pc, #36]	@ (80105d8 <tcp_output_segment_busy+0x34>)
 80105b4:	f240 529a 	movw	r2, #1434	@ 0x59a
 80105b8:	4908      	ldr	r1, [pc, #32]	@ (80105dc <tcp_output_segment_busy+0x38>)
 80105ba:	4809      	ldr	r0, [pc, #36]	@ (80105e0 <tcp_output_segment_busy+0x3c>)
 80105bc:	f003 ff5a 	bl	8014474 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	7b9b      	ldrb	r3, [r3, #14]
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d001      	beq.n	80105ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80105ca:	2301      	movs	r3, #1
 80105cc:	e000      	b.n	80105d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80105ce:	2300      	movs	r3, #0
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3708      	adds	r7, #8
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}
 80105d8:	08016950 	.word	0x08016950
 80105dc:	08016eec 	.word	0x08016eec
 80105e0:	080169a4 	.word	0x080169a4

080105e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80105e4:	b5b0      	push	{r4, r5, r7, lr}
 80105e6:	b08c      	sub	sp, #48	@ 0x30
 80105e8:	af04      	add	r7, sp, #16
 80105ea:	60f8      	str	r0, [r7, #12]
 80105ec:	60b9      	str	r1, [r7, #8]
 80105ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d106      	bne.n	8010604 <tcp_output_segment+0x20>
 80105f6:	4b64      	ldr	r3, [pc, #400]	@ (8010788 <tcp_output_segment+0x1a4>)
 80105f8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80105fc:	4963      	ldr	r1, [pc, #396]	@ (801078c <tcp_output_segment+0x1a8>)
 80105fe:	4864      	ldr	r0, [pc, #400]	@ (8010790 <tcp_output_segment+0x1ac>)
 8010600:	f003 ff38 	bl	8014474 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d106      	bne.n	8010618 <tcp_output_segment+0x34>
 801060a:	4b5f      	ldr	r3, [pc, #380]	@ (8010788 <tcp_output_segment+0x1a4>)
 801060c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8010610:	4960      	ldr	r1, [pc, #384]	@ (8010794 <tcp_output_segment+0x1b0>)
 8010612:	485f      	ldr	r0, [pc, #380]	@ (8010790 <tcp_output_segment+0x1ac>)
 8010614:	f003 ff2e 	bl	8014474 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d106      	bne.n	801062c <tcp_output_segment+0x48>
 801061e:	4b5a      	ldr	r3, [pc, #360]	@ (8010788 <tcp_output_segment+0x1a4>)
 8010620:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8010624:	495c      	ldr	r1, [pc, #368]	@ (8010798 <tcp_output_segment+0x1b4>)
 8010626:	485a      	ldr	r0, [pc, #360]	@ (8010790 <tcp_output_segment+0x1ac>)
 8010628:	f003 ff24 	bl	8014474 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801062c:	68f8      	ldr	r0, [r7, #12]
 801062e:	f7ff ffb9 	bl	80105a4 <tcp_output_segment_busy>
 8010632:	4603      	mov	r3, r0
 8010634:	2b00      	cmp	r3, #0
 8010636:	d001      	beq.n	801063c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010638:	2300      	movs	r3, #0
 801063a:	e0a1      	b.n	8010780 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	68dc      	ldr	r4, [r3, #12]
 8010644:	4610      	mov	r0, r2
 8010646:	f7f9 fd5f 	bl	800a108 <lwip_htonl>
 801064a:	4603      	mov	r3, r0
 801064c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	68dc      	ldr	r4, [r3, #12]
 8010656:	4610      	mov	r0, r2
 8010658:	f7f9 fd40 	bl	800a0dc <lwip_htons>
 801065c:	4603      	mov	r3, r0
 801065e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010664:	68ba      	ldr	r2, [r7, #8]
 8010666:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010668:	441a      	add	r2, r3
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	68db      	ldr	r3, [r3, #12]
 8010672:	3314      	adds	r3, #20
 8010674:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	7a9b      	ldrb	r3, [r3, #10]
 801067a:	f003 0301 	and.w	r3, r3, #1
 801067e:	2b00      	cmp	r3, #0
 8010680:	d015      	beq.n	80106ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	3304      	adds	r3, #4
 8010686:	461a      	mov	r2, r3
 8010688:	6879      	ldr	r1, [r7, #4]
 801068a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801068e:	f7fc fe91 	bl	800d3b4 <tcp_eff_send_mss_netif>
 8010692:	4603      	mov	r3, r0
 8010694:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010696:	8b7b      	ldrh	r3, [r7, #26]
 8010698:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801069c:	4618      	mov	r0, r3
 801069e:	f7f9 fd33 	bl	800a108 <lwip_htonl>
 80106a2:	4602      	mov	r2, r0
 80106a4:	69fb      	ldr	r3, [r7, #28]
 80106a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	3304      	adds	r3, #4
 80106ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	da02      	bge.n	80106be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	2200      	movs	r2, #0
 80106bc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d10c      	bne.n	80106e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80106c6:	4b35      	ldr	r3, [pc, #212]	@ (801079c <tcp_output_segment+0x1b8>)
 80106c8:	681a      	ldr	r2, [r3, #0]
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	68db      	ldr	r3, [r3, #12]
 80106d2:	685b      	ldr	r3, [r3, #4]
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7f9 fd17 	bl	800a108 <lwip_htonl>
 80106da:	4602      	mov	r2, r0
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	68da      	ldr	r2, [r3, #12]
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	685b      	ldr	r3, [r3, #4]
 80106e8:	685b      	ldr	r3, [r3, #4]
 80106ea:	1ad3      	subs	r3, r2, r3
 80106ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	8959      	ldrh	r1, [r3, #10]
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	8b3a      	ldrh	r2, [r7, #24]
 80106fa:	1a8a      	subs	r2, r1, r2
 80106fc:	b292      	uxth	r2, r2
 80106fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	685b      	ldr	r3, [r3, #4]
 8010704:	8919      	ldrh	r1, [r3, #8]
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	8b3a      	ldrh	r2, [r7, #24]
 801070c:	1a8a      	subs	r2, r1, r2
 801070e:	b292      	uxth	r2, r2
 8010710:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	68fa      	ldr	r2, [r7, #12]
 8010718:	68d2      	ldr	r2, [r2, #12]
 801071a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	68db      	ldr	r3, [r3, #12]
 8010720:	2200      	movs	r2, #0
 8010722:	741a      	strb	r2, [r3, #16]
 8010724:	2200      	movs	r2, #0
 8010726:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	68da      	ldr	r2, [r3, #12]
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	7a9b      	ldrb	r3, [r3, #10]
 8010730:	f003 0301 	and.w	r3, r3, #1
 8010734:	2b00      	cmp	r3, #0
 8010736:	d001      	beq.n	801073c <tcp_output_segment+0x158>
 8010738:	2318      	movs	r3, #24
 801073a:	e000      	b.n	801073e <tcp_output_segment+0x15a>
 801073c:	2314      	movs	r3, #20
 801073e:	4413      	add	r3, r2
 8010740:	69fa      	ldr	r2, [r7, #28]
 8010742:	429a      	cmp	r2, r3
 8010744:	d006      	beq.n	8010754 <tcp_output_segment+0x170>
 8010746:	4b10      	ldr	r3, [pc, #64]	@ (8010788 <tcp_output_segment+0x1a4>)
 8010748:	f240 621c 	movw	r2, #1564	@ 0x61c
 801074c:	4914      	ldr	r1, [pc, #80]	@ (80107a0 <tcp_output_segment+0x1bc>)
 801074e:	4810      	ldr	r0, [pc, #64]	@ (8010790 <tcp_output_segment+0x1ac>)
 8010750:	f003 fe90 	bl	8014474 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	6858      	ldr	r0, [r3, #4]
 8010758:	68b9      	ldr	r1, [r7, #8]
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	1d1c      	adds	r4, r3, #4
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	7add      	ldrb	r5, [r3, #11]
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	7a9b      	ldrb	r3, [r3, #10]
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	9202      	str	r2, [sp, #8]
 801076a:	2206      	movs	r2, #6
 801076c:	9201      	str	r2, [sp, #4]
 801076e:	9300      	str	r3, [sp, #0]
 8010770:	462b      	mov	r3, r5
 8010772:	4622      	mov	r2, r4
 8010774:	f002 fd50 	bl	8013218 <ip4_output_if>
 8010778:	4603      	mov	r3, r0
 801077a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801077c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010780:	4618      	mov	r0, r3
 8010782:	3720      	adds	r7, #32
 8010784:	46bd      	mov	sp, r7
 8010786:	bdb0      	pop	{r4, r5, r7, pc}
 8010788:	08016950 	.word	0x08016950
 801078c:	08016f14 	.word	0x08016f14
 8010790:	080169a4 	.word	0x080169a4
 8010794:	08016f34 	.word	0x08016f34
 8010798:	08016f54 	.word	0x08016f54
 801079c:	2000b208 	.word	0x2000b208
 80107a0:	08016f78 	.word	0x08016f78

080107a4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80107a4:	b5b0      	push	{r4, r5, r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d106      	bne.n	80107c0 <tcp_rexmit_rto_prepare+0x1c>
 80107b2:	4b31      	ldr	r3, [pc, #196]	@ (8010878 <tcp_rexmit_rto_prepare+0xd4>)
 80107b4:	f240 6263 	movw	r2, #1635	@ 0x663
 80107b8:	4930      	ldr	r1, [pc, #192]	@ (801087c <tcp_rexmit_rto_prepare+0xd8>)
 80107ba:	4831      	ldr	r0, [pc, #196]	@ (8010880 <tcp_rexmit_rto_prepare+0xdc>)
 80107bc:	f003 fe5a 	bl	8014474 <iprintf>

  if (pcb->unacked == NULL) {
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d102      	bne.n	80107ce <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80107c8:	f06f 0305 	mvn.w	r3, #5
 80107cc:	e050      	b.n	8010870 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107d2:	60fb      	str	r3, [r7, #12]
 80107d4:	e00b      	b.n	80107ee <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80107d6:	68f8      	ldr	r0, [r7, #12]
 80107d8:	f7ff fee4 	bl	80105a4 <tcp_output_segment_busy>
 80107dc:	4603      	mov	r3, r0
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d002      	beq.n	80107e8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80107e2:	f06f 0305 	mvn.w	r3, #5
 80107e6:	e043      	b.n	8010870 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	60fb      	str	r3, [r7, #12]
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d1ef      	bne.n	80107d6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80107f6:	68f8      	ldr	r0, [r7, #12]
 80107f8:	f7ff fed4 	bl	80105a4 <tcp_output_segment_busy>
 80107fc:	4603      	mov	r3, r0
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d002      	beq.n	8010808 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010802:	f06f 0305 	mvn.w	r3, #5
 8010806:	e033      	b.n	8010870 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2200      	movs	r2, #0
 801081c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	8b5b      	ldrh	r3, [r3, #26]
 8010822:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8010826:	b29a      	uxth	r2, r3
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	4618      	mov	r0, r3
 8010834:	f7f9 fc68 	bl	800a108 <lwip_htonl>
 8010838:	4604      	mov	r4, r0
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	891b      	ldrh	r3, [r3, #8]
 801083e:	461d      	mov	r5, r3
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	899b      	ldrh	r3, [r3, #12]
 8010846:	b29b      	uxth	r3, r3
 8010848:	4618      	mov	r0, r3
 801084a:	f7f9 fc47 	bl	800a0dc <lwip_htons>
 801084e:	4603      	mov	r3, r0
 8010850:	b2db      	uxtb	r3, r3
 8010852:	f003 0303 	and.w	r3, r3, #3
 8010856:	2b00      	cmp	r3, #0
 8010858:	d001      	beq.n	801085e <tcp_rexmit_rto_prepare+0xba>
 801085a:	2301      	movs	r3, #1
 801085c:	e000      	b.n	8010860 <tcp_rexmit_rto_prepare+0xbc>
 801085e:	2300      	movs	r3, #0
 8010860:	442b      	add	r3, r5
 8010862:	18e2      	adds	r2, r4, r3
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2200      	movs	r2, #0
 801086c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801086e:	2300      	movs	r3, #0
}
 8010870:	4618      	mov	r0, r3
 8010872:	3710      	adds	r7, #16
 8010874:	46bd      	mov	sp, r7
 8010876:	bdb0      	pop	{r4, r5, r7, pc}
 8010878:	08016950 	.word	0x08016950
 801087c:	08016f8c 	.word	0x08016f8c
 8010880:	080169a4 	.word	0x080169a4

08010884 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d106      	bne.n	80108a0 <tcp_rexmit_rto_commit+0x1c>
 8010892:	4b0d      	ldr	r3, [pc, #52]	@ (80108c8 <tcp_rexmit_rto_commit+0x44>)
 8010894:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010898:	490c      	ldr	r1, [pc, #48]	@ (80108cc <tcp_rexmit_rto_commit+0x48>)
 801089a:	480d      	ldr	r0, [pc, #52]	@ (80108d0 <tcp_rexmit_rto_commit+0x4c>)
 801089c:	f003 fdea 	bl	8014474 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80108a6:	2bff      	cmp	r3, #255	@ 0xff
 80108a8:	d007      	beq.n	80108ba <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80108b0:	3301      	adds	r3, #1
 80108b2:	b2da      	uxtb	r2, r3
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f7ff fc7e 	bl	80101bc <tcp_output>
}
 80108c0:	bf00      	nop
 80108c2:	3708      	adds	r7, #8
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	08016950 	.word	0x08016950
 80108cc:	08016fb0 	.word	0x08016fb0
 80108d0:	080169a4 	.word	0x080169a4

080108d4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d106      	bne.n	80108f0 <tcp_rexmit_rto+0x1c>
 80108e2:	4b0a      	ldr	r3, [pc, #40]	@ (801090c <tcp_rexmit_rto+0x38>)
 80108e4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80108e8:	4909      	ldr	r1, [pc, #36]	@ (8010910 <tcp_rexmit_rto+0x3c>)
 80108ea:	480a      	ldr	r0, [pc, #40]	@ (8010914 <tcp_rexmit_rto+0x40>)
 80108ec:	f003 fdc2 	bl	8014474 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f7ff ff57 	bl	80107a4 <tcp_rexmit_rto_prepare>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d102      	bne.n	8010902 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f7ff ffc1 	bl	8010884 <tcp_rexmit_rto_commit>
  }
}
 8010902:	bf00      	nop
 8010904:	3708      	adds	r7, #8
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	08016950 	.word	0x08016950
 8010910:	08016fd4 	.word	0x08016fd4
 8010914:	080169a4 	.word	0x080169a4

08010918 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010918:	b590      	push	{r4, r7, lr}
 801091a:	b085      	sub	sp, #20
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d106      	bne.n	8010934 <tcp_rexmit+0x1c>
 8010926:	4b2f      	ldr	r3, [pc, #188]	@ (80109e4 <tcp_rexmit+0xcc>)
 8010928:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801092c:	492e      	ldr	r1, [pc, #184]	@ (80109e8 <tcp_rexmit+0xd0>)
 801092e:	482f      	ldr	r0, [pc, #188]	@ (80109ec <tcp_rexmit+0xd4>)
 8010930:	f003 fda0 	bl	8014474 <iprintf>

  if (pcb->unacked == NULL) {
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010938:	2b00      	cmp	r3, #0
 801093a:	d102      	bne.n	8010942 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801093c:	f06f 0305 	mvn.w	r3, #5
 8010940:	e04c      	b.n	80109dc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010946:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010948:	68b8      	ldr	r0, [r7, #8]
 801094a:	f7ff fe2b 	bl	80105a4 <tcp_output_segment_busy>
 801094e:	4603      	mov	r3, r0
 8010950:	2b00      	cmp	r3, #0
 8010952:	d002      	beq.n	801095a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010954:	f06f 0305 	mvn.w	r3, #5
 8010958:	e040      	b.n	80109dc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	681a      	ldr	r2, [r3, #0]
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	336c      	adds	r3, #108	@ 0x6c
 8010966:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010968:	e002      	b.n	8010970 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d011      	beq.n	801099c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	68db      	ldr	r3, [r3, #12]
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	4618      	mov	r0, r3
 8010982:	f7f9 fbc1 	bl	800a108 <lwip_htonl>
 8010986:	4604      	mov	r4, r0
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	685b      	ldr	r3, [r3, #4]
 801098e:	4618      	mov	r0, r3
 8010990:	f7f9 fbba 	bl	800a108 <lwip_htonl>
 8010994:	4603      	mov	r3, r0
 8010996:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010998:	2b00      	cmp	r3, #0
 801099a:	dbe6      	blt.n	801096a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	681a      	ldr	r2, [r3, #0]
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	68ba      	ldr	r2, [r7, #8]
 80109a8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d103      	bne.n	80109ba <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2200      	movs	r2, #0
 80109b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80109c0:	2bff      	cmp	r3, #255	@ 0xff
 80109c2:	d007      	beq.n	80109d4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80109ca:	3301      	adds	r3, #1
 80109cc:	b2da      	uxtb	r2, r3
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2200      	movs	r2, #0
 80109d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80109da:	2300      	movs	r3, #0
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3714      	adds	r7, #20
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd90      	pop	{r4, r7, pc}
 80109e4:	08016950 	.word	0x08016950
 80109e8:	08016ff0 	.word	0x08016ff0
 80109ec:	080169a4 	.word	0x080169a4

080109f0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d106      	bne.n	8010a0c <tcp_rexmit_fast+0x1c>
 80109fe:	4b2a      	ldr	r3, [pc, #168]	@ (8010aa8 <tcp_rexmit_fast+0xb8>)
 8010a00:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8010a04:	4929      	ldr	r1, [pc, #164]	@ (8010aac <tcp_rexmit_fast+0xbc>)
 8010a06:	482a      	ldr	r0, [pc, #168]	@ (8010ab0 <tcp_rexmit_fast+0xc0>)
 8010a08:	f003 fd34 	bl	8014474 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d044      	beq.n	8010a9e <tcp_rexmit_fast+0xae>
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	8b5b      	ldrh	r3, [r3, #26]
 8010a18:	f003 0304 	and.w	r3, r3, #4
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d13e      	bne.n	8010a9e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7ff ff79 	bl	8010918 <tcp_rexmit>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d138      	bne.n	8010a9e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	bf28      	it	cs
 8010a3c:	4613      	movcs	r3, r2
 8010a3e:	b29b      	uxth	r3, r3
 8010a40:	0fda      	lsrs	r2, r3, #31
 8010a42:	4413      	add	r3, r2
 8010a44:	105b      	asrs	r3, r3, #1
 8010a46:	b29a      	uxth	r2, r3
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010a54:	461a      	mov	r2, r3
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a5a:	005b      	lsls	r3, r3, #1
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d206      	bcs.n	8010a6e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a64:	005b      	lsls	r3, r3, #1
 8010a66:	b29a      	uxth	r2, r3
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a78:	4619      	mov	r1, r3
 8010a7a:	0049      	lsls	r1, r1, #1
 8010a7c:	440b      	add	r3, r1
 8010a7e:	b29b      	uxth	r3, r3
 8010a80:	4413      	add	r3, r2
 8010a82:	b29a      	uxth	r2, r3
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	8b5b      	ldrh	r3, [r3, #26]
 8010a8e:	f043 0304 	orr.w	r3, r3, #4
 8010a92:	b29a      	uxth	r2, r3
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8010a9e:	bf00      	nop
 8010aa0:	3708      	adds	r7, #8
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	08016950 	.word	0x08016950
 8010aac:	08017008 	.word	0x08017008
 8010ab0:	080169a4 	.word	0x080169a4

08010ab4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b086      	sub	sp, #24
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	60f8      	str	r0, [r7, #12]
 8010abc:	607b      	str	r3, [r7, #4]
 8010abe:	460b      	mov	r3, r1
 8010ac0:	817b      	strh	r3, [r7, #10]
 8010ac2:	4613      	mov	r3, r2
 8010ac4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010ac6:	897a      	ldrh	r2, [r7, #10]
 8010ac8:	893b      	ldrh	r3, [r7, #8]
 8010aca:	4413      	add	r3, r2
 8010acc:	b29b      	uxth	r3, r3
 8010ace:	3314      	adds	r3, #20
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	2022      	movs	r0, #34	@ 0x22
 8010ada:	f7fa fb79 	bl	800b1d0 <pbuf_alloc>
 8010ade:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d04d      	beq.n	8010b82 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010ae6:	897b      	ldrh	r3, [r7, #10]
 8010ae8:	3313      	adds	r3, #19
 8010aea:	697a      	ldr	r2, [r7, #20]
 8010aec:	8952      	ldrh	r2, [r2, #10]
 8010aee:	4293      	cmp	r3, r2
 8010af0:	db06      	blt.n	8010b00 <tcp_output_alloc_header_common+0x4c>
 8010af2:	4b26      	ldr	r3, [pc, #152]	@ (8010b8c <tcp_output_alloc_header_common+0xd8>)
 8010af4:	f240 7223 	movw	r2, #1827	@ 0x723
 8010af8:	4925      	ldr	r1, [pc, #148]	@ (8010b90 <tcp_output_alloc_header_common+0xdc>)
 8010afa:	4826      	ldr	r0, [pc, #152]	@ (8010b94 <tcp_output_alloc_header_common+0xe0>)
 8010afc:	f003 fcba 	bl	8014474 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010b06:	8c3b      	ldrh	r3, [r7, #32]
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7f9 fae7 	bl	800a0dc <lwip_htons>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	461a      	mov	r2, r3
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010b16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7f9 fadf 	bl	800a0dc <lwip_htons>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	461a      	mov	r2, r3
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	687a      	ldr	r2, [r7, #4]
 8010b2a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010b2c:	68f8      	ldr	r0, [r7, #12]
 8010b2e:	f7f9 faeb 	bl	800a108 <lwip_htonl>
 8010b32:	4602      	mov	r2, r0
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010b38:	897b      	ldrh	r3, [r7, #10]
 8010b3a:	089b      	lsrs	r3, r3, #2
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	3305      	adds	r3, #5
 8010b40:	b29b      	uxth	r3, r3
 8010b42:	031b      	lsls	r3, r3, #12
 8010b44:	b29a      	uxth	r2, r3
 8010b46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	4313      	orrs	r3, r2
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7f9 fac3 	bl	800a0dc <lwip_htons>
 8010b56:	4603      	mov	r3, r0
 8010b58:	461a      	mov	r2, r3
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010b5e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010b60:	4618      	mov	r0, r3
 8010b62:	f7f9 fabb 	bl	800a0dc <lwip_htons>
 8010b66:	4603      	mov	r3, r0
 8010b68:	461a      	mov	r2, r3
 8010b6a:	693b      	ldr	r3, [r7, #16]
 8010b6c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010b6e:	693b      	ldr	r3, [r7, #16]
 8010b70:	2200      	movs	r2, #0
 8010b72:	741a      	strb	r2, [r3, #16]
 8010b74:	2200      	movs	r2, #0
 8010b76:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	749a      	strb	r2, [r3, #18]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010b82:	697b      	ldr	r3, [r7, #20]
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3718      	adds	r7, #24
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	08016950 	.word	0x08016950
 8010b90:	08017028 	.word	0x08017028
 8010b94:	080169a4 	.word	0x080169a4

08010b98 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010b98:	b5b0      	push	{r4, r5, r7, lr}
 8010b9a:	b08a      	sub	sp, #40	@ 0x28
 8010b9c:	af04      	add	r7, sp, #16
 8010b9e:	60f8      	str	r0, [r7, #12]
 8010ba0:	607b      	str	r3, [r7, #4]
 8010ba2:	460b      	mov	r3, r1
 8010ba4:	817b      	strh	r3, [r7, #10]
 8010ba6:	4613      	mov	r3, r2
 8010ba8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d106      	bne.n	8010bbe <tcp_output_alloc_header+0x26>
 8010bb0:	4b15      	ldr	r3, [pc, #84]	@ (8010c08 <tcp_output_alloc_header+0x70>)
 8010bb2:	f240 7242 	movw	r2, #1858	@ 0x742
 8010bb6:	4915      	ldr	r1, [pc, #84]	@ (8010c0c <tcp_output_alloc_header+0x74>)
 8010bb8:	4815      	ldr	r0, [pc, #84]	@ (8010c10 <tcp_output_alloc_header+0x78>)
 8010bba:	f003 fc5b 	bl	8014474 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	8adb      	ldrh	r3, [r3, #22]
 8010bc6:	68fa      	ldr	r2, [r7, #12]
 8010bc8:	8b12      	ldrh	r2, [r2, #24]
 8010bca:	68f9      	ldr	r1, [r7, #12]
 8010bcc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8010bce:	893d      	ldrh	r5, [r7, #8]
 8010bd0:	897c      	ldrh	r4, [r7, #10]
 8010bd2:	9103      	str	r1, [sp, #12]
 8010bd4:	2110      	movs	r1, #16
 8010bd6:	9102      	str	r1, [sp, #8]
 8010bd8:	9201      	str	r2, [sp, #4]
 8010bda:	9300      	str	r3, [sp, #0]
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	462a      	mov	r2, r5
 8010be0:	4621      	mov	r1, r4
 8010be2:	f7ff ff67 	bl	8010ab4 <tcp_output_alloc_header_common>
 8010be6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d006      	beq.n	8010bfc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bf2:	68fa      	ldr	r2, [r7, #12]
 8010bf4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010bf6:	441a      	add	r2, r3
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8010bfc:	697b      	ldr	r3, [r7, #20]
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3718      	adds	r7, #24
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bdb0      	pop	{r4, r5, r7, pc}
 8010c06:	bf00      	nop
 8010c08:	08016950 	.word	0x08016950
 8010c0c:	08017058 	.word	0x08017058
 8010c10:	080169a4 	.word	0x080169a4

08010c14 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b088      	sub	sp, #32
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	60f8      	str	r0, [r7, #12]
 8010c1c:	60b9      	str	r1, [r7, #8]
 8010c1e:	4611      	mov	r1, r2
 8010c20:	461a      	mov	r2, r3
 8010c22:	460b      	mov	r3, r1
 8010c24:	71fb      	strb	r3, [r7, #7]
 8010c26:	4613      	mov	r3, r2
 8010c28:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d106      	bne.n	8010c42 <tcp_output_fill_options+0x2e>
 8010c34:	4b12      	ldr	r3, [pc, #72]	@ (8010c80 <tcp_output_fill_options+0x6c>)
 8010c36:	f240 7256 	movw	r2, #1878	@ 0x756
 8010c3a:	4912      	ldr	r1, [pc, #72]	@ (8010c84 <tcp_output_fill_options+0x70>)
 8010c3c:	4812      	ldr	r0, [pc, #72]	@ (8010c88 <tcp_output_fill_options+0x74>)
 8010c3e:	f003 fc19 	bl	8014474 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010c48:	69bb      	ldr	r3, [r7, #24]
 8010c4a:	3314      	adds	r3, #20
 8010c4c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010c4e:	8bfb      	ldrh	r3, [r7, #30]
 8010c50:	009b      	lsls	r3, r3, #2
 8010c52:	461a      	mov	r2, r3
 8010c54:	79fb      	ldrb	r3, [r7, #7]
 8010c56:	009b      	lsls	r3, r3, #2
 8010c58:	f003 0304 	and.w	r3, r3, #4
 8010c5c:	4413      	add	r3, r2
 8010c5e:	3314      	adds	r3, #20
 8010c60:	69ba      	ldr	r2, [r7, #24]
 8010c62:	4413      	add	r3, r2
 8010c64:	697a      	ldr	r2, [r7, #20]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d006      	beq.n	8010c78 <tcp_output_fill_options+0x64>
 8010c6a:	4b05      	ldr	r3, [pc, #20]	@ (8010c80 <tcp_output_fill_options+0x6c>)
 8010c6c:	f240 7275 	movw	r2, #1909	@ 0x775
 8010c70:	4906      	ldr	r1, [pc, #24]	@ (8010c8c <tcp_output_fill_options+0x78>)
 8010c72:	4805      	ldr	r0, [pc, #20]	@ (8010c88 <tcp_output_fill_options+0x74>)
 8010c74:	f003 fbfe 	bl	8014474 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010c78:	bf00      	nop
 8010c7a:	3720      	adds	r7, #32
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	08016950 	.word	0x08016950
 8010c84:	08017080 	.word	0x08017080
 8010c88:	080169a4 	.word	0x080169a4
 8010c8c:	08016f78 	.word	0x08016f78

08010c90 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b08a      	sub	sp, #40	@ 0x28
 8010c94:	af04      	add	r7, sp, #16
 8010c96:	60f8      	str	r0, [r7, #12]
 8010c98:	60b9      	str	r1, [r7, #8]
 8010c9a:	607a      	str	r2, [r7, #4]
 8010c9c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d106      	bne.n	8010cb2 <tcp_output_control_segment+0x22>
 8010ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8010d18 <tcp_output_control_segment+0x88>)
 8010ca6:	f240 7287 	movw	r2, #1927	@ 0x787
 8010caa:	491c      	ldr	r1, [pc, #112]	@ (8010d1c <tcp_output_control_segment+0x8c>)
 8010cac:	481c      	ldr	r0, [pc, #112]	@ (8010d20 <tcp_output_control_segment+0x90>)
 8010cae:	f003 fbe1 	bl	8014474 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010cb2:	683a      	ldr	r2, [r7, #0]
 8010cb4:	6879      	ldr	r1, [r7, #4]
 8010cb6:	68f8      	ldr	r0, [r7, #12]
 8010cb8:	f7fe ff42 	bl	800fb40 <tcp_route>
 8010cbc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d102      	bne.n	8010cca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010cc4:	23fc      	movs	r3, #252	@ 0xfc
 8010cc6:	75fb      	strb	r3, [r7, #23]
 8010cc8:	e01c      	b.n	8010d04 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d006      	beq.n	8010cde <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	7adb      	ldrb	r3, [r3, #11]
 8010cd4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	7a9b      	ldrb	r3, [r3, #10]
 8010cda:	757b      	strb	r3, [r7, #21]
 8010cdc:	e003      	b.n	8010ce6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010cde:	23ff      	movs	r3, #255	@ 0xff
 8010ce0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010ce6:	7dba      	ldrb	r2, [r7, #22]
 8010ce8:	693b      	ldr	r3, [r7, #16]
 8010cea:	9302      	str	r3, [sp, #8]
 8010cec:	2306      	movs	r3, #6
 8010cee:	9301      	str	r3, [sp, #4]
 8010cf0:	7d7b      	ldrb	r3, [r7, #21]
 8010cf2:	9300      	str	r3, [sp, #0]
 8010cf4:	4613      	mov	r3, r2
 8010cf6:	683a      	ldr	r2, [r7, #0]
 8010cf8:	6879      	ldr	r1, [r7, #4]
 8010cfa:	68b8      	ldr	r0, [r7, #8]
 8010cfc:	f002 fa8c 	bl	8013218 <ip4_output_if>
 8010d00:	4603      	mov	r3, r0
 8010d02:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010d04:	68b8      	ldr	r0, [r7, #8]
 8010d06:	f7fa fd47 	bl	800b798 <pbuf_free>
  return err;
 8010d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3718      	adds	r7, #24
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	08016950 	.word	0x08016950
 8010d1c:	080170a8 	.word	0x080170a8
 8010d20:	080169a4 	.word	0x080169a4

08010d24 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010d24:	b590      	push	{r4, r7, lr}
 8010d26:	b08b      	sub	sp, #44	@ 0x2c
 8010d28:	af04      	add	r7, sp, #16
 8010d2a:	60f8      	str	r0, [r7, #12]
 8010d2c:	60b9      	str	r1, [r7, #8]
 8010d2e:	607a      	str	r2, [r7, #4]
 8010d30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d106      	bne.n	8010d46 <tcp_rst+0x22>
 8010d38:	4b1f      	ldr	r3, [pc, #124]	@ (8010db8 <tcp_rst+0x94>)
 8010d3a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8010d3e:	491f      	ldr	r1, [pc, #124]	@ (8010dbc <tcp_rst+0x98>)
 8010d40:	481f      	ldr	r0, [pc, #124]	@ (8010dc0 <tcp_rst+0x9c>)
 8010d42:	f003 fb97 	bl	8014474 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d106      	bne.n	8010d5a <tcp_rst+0x36>
 8010d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8010db8 <tcp_rst+0x94>)
 8010d4e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8010d52:	491c      	ldr	r1, [pc, #112]	@ (8010dc4 <tcp_rst+0xa0>)
 8010d54:	481a      	ldr	r0, [pc, #104]	@ (8010dc0 <tcp_rst+0x9c>)
 8010d56:	f003 fb8d 	bl	8014474 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010d5e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8010d62:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010d64:	7dfb      	ldrb	r3, [r7, #23]
 8010d66:	b29c      	uxth	r4, r3
 8010d68:	68b8      	ldr	r0, [r7, #8]
 8010d6a:	f7f9 f9cd 	bl	800a108 <lwip_htonl>
 8010d6e:	4602      	mov	r2, r0
 8010d70:	8abb      	ldrh	r3, [r7, #20]
 8010d72:	9303      	str	r3, [sp, #12]
 8010d74:	2314      	movs	r3, #20
 8010d76:	9302      	str	r3, [sp, #8]
 8010d78:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8010d7a:	9301      	str	r3, [sp, #4]
 8010d7c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010d7e:	9300      	str	r3, [sp, #0]
 8010d80:	4613      	mov	r3, r2
 8010d82:	2200      	movs	r2, #0
 8010d84:	4621      	mov	r1, r4
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f7ff fe94 	bl	8010ab4 <tcp_output_alloc_header_common>
 8010d8c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010d8e:	693b      	ldr	r3, [r7, #16]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d00c      	beq.n	8010dae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010d94:	7dfb      	ldrb	r3, [r7, #23]
 8010d96:	2200      	movs	r2, #0
 8010d98:	6939      	ldr	r1, [r7, #16]
 8010d9a:	68f8      	ldr	r0, [r7, #12]
 8010d9c:	f7ff ff3a 	bl	8010c14 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010da2:	683a      	ldr	r2, [r7, #0]
 8010da4:	6939      	ldr	r1, [r7, #16]
 8010da6:	68f8      	ldr	r0, [r7, #12]
 8010da8:	f7ff ff72 	bl	8010c90 <tcp_output_control_segment>
 8010dac:	e000      	b.n	8010db0 <tcp_rst+0x8c>
    return;
 8010dae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010db0:	371c      	adds	r7, #28
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd90      	pop	{r4, r7, pc}
 8010db6:	bf00      	nop
 8010db8:	08016950 	.word	0x08016950
 8010dbc:	080170d4 	.word	0x080170d4
 8010dc0:	080169a4 	.word	0x080169a4
 8010dc4:	080170f0 	.word	0x080170f0

08010dc8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010dc8:	b590      	push	{r4, r7, lr}
 8010dca:	b087      	sub	sp, #28
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d106      	bne.n	8010dec <tcp_send_empty_ack+0x24>
 8010dde:	4b28      	ldr	r3, [pc, #160]	@ (8010e80 <tcp_send_empty_ack+0xb8>)
 8010de0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8010de4:	4927      	ldr	r1, [pc, #156]	@ (8010e84 <tcp_send_empty_ack+0xbc>)
 8010de6:	4828      	ldr	r0, [pc, #160]	@ (8010e88 <tcp_send_empty_ack+0xc0>)
 8010de8:	f003 fb44 	bl	8014474 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010dec:	7dfb      	ldrb	r3, [r7, #23]
 8010dee:	009b      	lsls	r3, r3, #2
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	f003 0304 	and.w	r3, r3, #4
 8010df6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010df8:	7d7b      	ldrb	r3, [r7, #21]
 8010dfa:	b29c      	uxth	r4, r3
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7f9 f981 	bl	800a108 <lwip_htonl>
 8010e06:	4603      	mov	r3, r0
 8010e08:	2200      	movs	r2, #0
 8010e0a:	4621      	mov	r1, r4
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f7ff fec3 	bl	8010b98 <tcp_output_alloc_header>
 8010e12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d109      	bne.n	8010e2e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	8b5b      	ldrh	r3, [r3, #26]
 8010e1e:	f043 0303 	orr.w	r3, r3, #3
 8010e22:	b29a      	uxth	r2, r3
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010e28:	f06f 0301 	mvn.w	r3, #1
 8010e2c:	e023      	b.n	8010e76 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010e2e:	7dbb      	ldrb	r3, [r7, #22]
 8010e30:	7dfa      	ldrb	r2, [r7, #23]
 8010e32:	6939      	ldr	r1, [r7, #16]
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f7ff feed 	bl	8010c14 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010e3a:	687a      	ldr	r2, [r7, #4]
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	3304      	adds	r3, #4
 8010e40:	6939      	ldr	r1, [r7, #16]
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f7ff ff24 	bl	8010c90 <tcp_output_control_segment>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d007      	beq.n	8010e64 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	8b5b      	ldrh	r3, [r3, #26]
 8010e58:	f043 0303 	orr.w	r3, r3, #3
 8010e5c:	b29a      	uxth	r2, r3
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	835a      	strh	r2, [r3, #26]
 8010e62:	e006      	b.n	8010e72 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	8b5b      	ldrh	r3, [r3, #26]
 8010e68:	f023 0303 	bic.w	r3, r3, #3
 8010e6c:	b29a      	uxth	r2, r3
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	371c      	adds	r7, #28
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd90      	pop	{r4, r7, pc}
 8010e7e:	bf00      	nop
 8010e80:	08016950 	.word	0x08016950
 8010e84:	0801710c 	.word	0x0801710c
 8010e88:	080169a4 	.word	0x080169a4

08010e8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010e8c:	b590      	push	{r4, r7, lr}
 8010e8e:	b087      	sub	sp, #28
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010e94:	2300      	movs	r3, #0
 8010e96:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d106      	bne.n	8010eac <tcp_keepalive+0x20>
 8010e9e:	4b18      	ldr	r3, [pc, #96]	@ (8010f00 <tcp_keepalive+0x74>)
 8010ea0:	f640 0224 	movw	r2, #2084	@ 0x824
 8010ea4:	4917      	ldr	r1, [pc, #92]	@ (8010f04 <tcp_keepalive+0x78>)
 8010ea6:	4818      	ldr	r0, [pc, #96]	@ (8010f08 <tcp_keepalive+0x7c>)
 8010ea8:	f003 fae4 	bl	8014474 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010eac:	7dfb      	ldrb	r3, [r7, #23]
 8010eae:	b29c      	uxth	r4, r3
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010eb4:	3b01      	subs	r3, #1
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7f9 f926 	bl	800a108 <lwip_htonl>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	4621      	mov	r1, r4
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f7ff fe68 	bl	8010b98 <tcp_output_alloc_header>
 8010ec8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d102      	bne.n	8010ed6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ed4:	e010      	b.n	8010ef8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010ed6:	7dfb      	ldrb	r3, [r7, #23]
 8010ed8:	2200      	movs	r2, #0
 8010eda:	6939      	ldr	r1, [r7, #16]
 8010edc:	6878      	ldr	r0, [r7, #4]
 8010ede:	f7ff fe99 	bl	8010c14 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010ee2:	687a      	ldr	r2, [r7, #4]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	3304      	adds	r3, #4
 8010ee8:	6939      	ldr	r1, [r7, #16]
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f7ff fed0 	bl	8010c90 <tcp_output_control_segment>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	371c      	adds	r7, #28
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd90      	pop	{r4, r7, pc}
 8010f00:	08016950 	.word	0x08016950
 8010f04:	0801712c 	.word	0x0801712c
 8010f08:	080169a4 	.word	0x080169a4

08010f0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010f0c:	b590      	push	{r4, r7, lr}
 8010f0e:	b08b      	sub	sp, #44	@ 0x2c
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010f14:	2300      	movs	r3, #0
 8010f16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d106      	bne.n	8010f2e <tcp_zero_window_probe+0x22>
 8010f20:	4b4c      	ldr	r3, [pc, #304]	@ (8011054 <tcp_zero_window_probe+0x148>)
 8010f22:	f640 024f 	movw	r2, #2127	@ 0x84f
 8010f26:	494c      	ldr	r1, [pc, #304]	@ (8011058 <tcp_zero_window_probe+0x14c>)
 8010f28:	484c      	ldr	r0, [pc, #304]	@ (801105c <tcp_zero_window_probe+0x150>)
 8010f2a:	f003 faa3 	bl	8014474 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010f34:	6a3b      	ldr	r3, [r7, #32]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d101      	bne.n	8010f3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	e086      	b.n	801104c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8010f44:	2bff      	cmp	r3, #255	@ 0xff
 8010f46:	d007      	beq.n	8010f58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8010f4e:	3301      	adds	r3, #1
 8010f50:	b2da      	uxtb	r2, r3
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010f58:	6a3b      	ldr	r3, [r7, #32]
 8010f5a:	68db      	ldr	r3, [r3, #12]
 8010f5c:	899b      	ldrh	r3, [r3, #12]
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7f9 f8bb 	bl	800a0dc <lwip_htons>
 8010f66:	4603      	mov	r3, r0
 8010f68:	b2db      	uxtb	r3, r3
 8010f6a:	f003 0301 	and.w	r3, r3, #1
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d005      	beq.n	8010f7e <tcp_zero_window_probe+0x72>
 8010f72:	6a3b      	ldr	r3, [r7, #32]
 8010f74:	891b      	ldrh	r3, [r3, #8]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d101      	bne.n	8010f7e <tcp_zero_window_probe+0x72>
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	e000      	b.n	8010f80 <tcp_zero_window_probe+0x74>
 8010f7e:	2300      	movs	r3, #0
 8010f80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010f82:	7ffb      	ldrb	r3, [r7, #31]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	bf0c      	ite	eq
 8010f88:	2301      	moveq	r3, #1
 8010f8a:	2300      	movne	r3, #0
 8010f8c:	b2db      	uxtb	r3, r3
 8010f8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010f90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f94:	b299      	uxth	r1, r3
 8010f96:	6a3b      	ldr	r3, [r7, #32]
 8010f98:	68db      	ldr	r3, [r3, #12]
 8010f9a:	685b      	ldr	r3, [r3, #4]
 8010f9c:	8bba      	ldrh	r2, [r7, #28]
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	f7ff fdfa 	bl	8010b98 <tcp_output_alloc_header>
 8010fa4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010fa6:	69bb      	ldr	r3, [r7, #24]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d102      	bne.n	8010fb2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010fac:	f04f 33ff 	mov.w	r3, #4294967295
 8010fb0:	e04c      	b.n	801104c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010fb2:	69bb      	ldr	r3, [r7, #24]
 8010fb4:	685b      	ldr	r3, [r3, #4]
 8010fb6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010fb8:	7ffb      	ldrb	r3, [r7, #31]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d011      	beq.n	8010fe2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	899b      	ldrh	r3, [r3, #12]
 8010fc2:	b29b      	uxth	r3, r3
 8010fc4:	b21b      	sxth	r3, r3
 8010fc6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010fca:	b21c      	sxth	r4, r3
 8010fcc:	2011      	movs	r0, #17
 8010fce:	f7f9 f885 	bl	800a0dc <lwip_htons>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	b21b      	sxth	r3, r3
 8010fd6:	4323      	orrs	r3, r4
 8010fd8:	b21b      	sxth	r3, r3
 8010fda:	b29a      	uxth	r2, r3
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	819a      	strh	r2, [r3, #12]
 8010fe0:	e010      	b.n	8011004 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010fe2:	69bb      	ldr	r3, [r7, #24]
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	3314      	adds	r3, #20
 8010fe8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010fea:	6a3b      	ldr	r3, [r7, #32]
 8010fec:	6858      	ldr	r0, [r3, #4]
 8010fee:	6a3b      	ldr	r3, [r7, #32]
 8010ff0:	685b      	ldr	r3, [r3, #4]
 8010ff2:	891a      	ldrh	r2, [r3, #8]
 8010ff4:	6a3b      	ldr	r3, [r7, #32]
 8010ff6:	891b      	ldrh	r3, [r3, #8]
 8010ff8:	1ad3      	subs	r3, r2, r3
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	6939      	ldr	r1, [r7, #16]
 8011000:	f7fa fdc4 	bl	800bb8c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011004:	6a3b      	ldr	r3, [r7, #32]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	685b      	ldr	r3, [r3, #4]
 801100a:	4618      	mov	r0, r3
 801100c:	f7f9 f87c 	bl	800a108 <lwip_htonl>
 8011010:	4603      	mov	r3, r0
 8011012:	3301      	adds	r3, #1
 8011014:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	1ad3      	subs	r3, r2, r3
 801101e:	2b00      	cmp	r3, #0
 8011020:	da02      	bge.n	8011028 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	68fa      	ldr	r2, [r7, #12]
 8011026:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801102c:	2200      	movs	r2, #0
 801102e:	69b9      	ldr	r1, [r7, #24]
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f7ff fdef 	bl	8010c14 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011036:	687a      	ldr	r2, [r7, #4]
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	3304      	adds	r3, #4
 801103c:	69b9      	ldr	r1, [r7, #24]
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f7ff fe26 	bl	8010c90 <tcp_output_control_segment>
 8011044:	4603      	mov	r3, r0
 8011046:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011048:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801104c:	4618      	mov	r0, r3
 801104e:	372c      	adds	r7, #44	@ 0x2c
 8011050:	46bd      	mov	sp, r7
 8011052:	bd90      	pop	{r4, r7, pc}
 8011054:	08016950 	.word	0x08016950
 8011058:	08017148 	.word	0x08017148
 801105c:	080169a4 	.word	0x080169a4

08011060 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011068:	f7fa ff10 	bl	800be8c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801106c:	4b0a      	ldr	r3, [pc, #40]	@ (8011098 <tcpip_tcp_timer+0x38>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d103      	bne.n	801107c <tcpip_tcp_timer+0x1c>
 8011074:	4b09      	ldr	r3, [pc, #36]	@ (801109c <tcpip_tcp_timer+0x3c>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d005      	beq.n	8011088 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801107c:	2200      	movs	r2, #0
 801107e:	4908      	ldr	r1, [pc, #32]	@ (80110a0 <tcpip_tcp_timer+0x40>)
 8011080:	20fa      	movs	r0, #250	@ 0xfa
 8011082:	f000 f8f3 	bl	801126c <sys_timeout>
 8011086:	e003      	b.n	8011090 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011088:	4b06      	ldr	r3, [pc, #24]	@ (80110a4 <tcpip_tcp_timer+0x44>)
 801108a:	2200      	movs	r2, #0
 801108c:	601a      	str	r2, [r3, #0]
  }
}
 801108e:	bf00      	nop
 8011090:	bf00      	nop
 8011092:	3708      	adds	r7, #8
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}
 8011098:	2000b214 	.word	0x2000b214
 801109c:	2000b218 	.word	0x2000b218
 80110a0:	08011061 	.word	0x08011061
 80110a4:	2000b260 	.word	0x2000b260

080110a8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80110ac:	4b0a      	ldr	r3, [pc, #40]	@ (80110d8 <tcp_timer_needed+0x30>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d10f      	bne.n	80110d4 <tcp_timer_needed+0x2c>
 80110b4:	4b09      	ldr	r3, [pc, #36]	@ (80110dc <tcp_timer_needed+0x34>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d103      	bne.n	80110c4 <tcp_timer_needed+0x1c>
 80110bc:	4b08      	ldr	r3, [pc, #32]	@ (80110e0 <tcp_timer_needed+0x38>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d007      	beq.n	80110d4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80110c4:	4b04      	ldr	r3, [pc, #16]	@ (80110d8 <tcp_timer_needed+0x30>)
 80110c6:	2201      	movs	r2, #1
 80110c8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80110ca:	2200      	movs	r2, #0
 80110cc:	4905      	ldr	r1, [pc, #20]	@ (80110e4 <tcp_timer_needed+0x3c>)
 80110ce:	20fa      	movs	r0, #250	@ 0xfa
 80110d0:	f000 f8cc 	bl	801126c <sys_timeout>
  }
}
 80110d4:	bf00      	nop
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	2000b260 	.word	0x2000b260
 80110dc:	2000b214 	.word	0x2000b214
 80110e0:	2000b218 	.word	0x2000b218
 80110e4:	08011061 	.word	0x08011061

080110e8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b086      	sub	sp, #24
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80110f4:	2006      	movs	r0, #6
 80110f6:	f7f9 fc69 	bl	800a9cc <memp_malloc>
 80110fa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d109      	bne.n	8011116 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011102:	693b      	ldr	r3, [r7, #16]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d151      	bne.n	80111ac <sys_timeout_abs+0xc4>
 8011108:	4b2a      	ldr	r3, [pc, #168]	@ (80111b4 <sys_timeout_abs+0xcc>)
 801110a:	22be      	movs	r2, #190	@ 0xbe
 801110c:	492a      	ldr	r1, [pc, #168]	@ (80111b8 <sys_timeout_abs+0xd0>)
 801110e:	482b      	ldr	r0, [pc, #172]	@ (80111bc <sys_timeout_abs+0xd4>)
 8011110:	f003 f9b0 	bl	8014474 <iprintf>
    return;
 8011114:	e04a      	b.n	80111ac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	2200      	movs	r2, #0
 801111a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801111c:	693b      	ldr	r3, [r7, #16]
 801111e:	68ba      	ldr	r2, [r7, #8]
 8011120:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	687a      	ldr	r2, [r7, #4]
 8011126:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011128:	693b      	ldr	r3, [r7, #16]
 801112a:	68fa      	ldr	r2, [r7, #12]
 801112c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801112e:	4b24      	ldr	r3, [pc, #144]	@ (80111c0 <sys_timeout_abs+0xd8>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d103      	bne.n	801113e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011136:	4a22      	ldr	r2, [pc, #136]	@ (80111c0 <sys_timeout_abs+0xd8>)
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	6013      	str	r3, [r2, #0]
    return;
 801113c:	e037      	b.n	80111ae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	685a      	ldr	r2, [r3, #4]
 8011142:	4b1f      	ldr	r3, [pc, #124]	@ (80111c0 <sys_timeout_abs+0xd8>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	1ad3      	subs	r3, r2, r3
 801114a:	0fdb      	lsrs	r3, r3, #31
 801114c:	f003 0301 	and.w	r3, r3, #1
 8011150:	b2db      	uxtb	r3, r3
 8011152:	2b00      	cmp	r3, #0
 8011154:	d007      	beq.n	8011166 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011156:	4b1a      	ldr	r3, [pc, #104]	@ (80111c0 <sys_timeout_abs+0xd8>)
 8011158:	681a      	ldr	r2, [r3, #0]
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801115e:	4a18      	ldr	r2, [pc, #96]	@ (80111c0 <sys_timeout_abs+0xd8>)
 8011160:	693b      	ldr	r3, [r7, #16]
 8011162:	6013      	str	r3, [r2, #0]
 8011164:	e023      	b.n	80111ae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011166:	4b16      	ldr	r3, [pc, #88]	@ (80111c0 <sys_timeout_abs+0xd8>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	617b      	str	r3, [r7, #20]
 801116c:	e01a      	b.n	80111a4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d00b      	beq.n	801118e <sys_timeout_abs+0xa6>
 8011176:	693b      	ldr	r3, [r7, #16]
 8011178:	685a      	ldr	r2, [r3, #4]
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	685b      	ldr	r3, [r3, #4]
 8011180:	1ad3      	subs	r3, r2, r3
 8011182:	0fdb      	lsrs	r3, r3, #31
 8011184:	f003 0301 	and.w	r3, r3, #1
 8011188:	b2db      	uxtb	r3, r3
 801118a:	2b00      	cmp	r3, #0
 801118c:	d007      	beq.n	801119e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	681a      	ldr	r2, [r3, #0]
 8011192:	693b      	ldr	r3, [r7, #16]
 8011194:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	693a      	ldr	r2, [r7, #16]
 801119a:	601a      	str	r2, [r3, #0]
        break;
 801119c:	e007      	b.n	80111ae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	617b      	str	r3, [r7, #20]
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d1e1      	bne.n	801116e <sys_timeout_abs+0x86>
 80111aa:	e000      	b.n	80111ae <sys_timeout_abs+0xc6>
    return;
 80111ac:	bf00      	nop
      }
    }
  }
}
 80111ae:	3718      	adds	r7, #24
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}
 80111b4:	0801716c 	.word	0x0801716c
 80111b8:	080171a0 	.word	0x080171a0
 80111bc:	080171e0 	.word	0x080171e0
 80111c0:	2000b258 	.word	0x2000b258

080111c4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b086      	sub	sp, #24
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	685b      	ldr	r3, [r3, #4]
 80111d4:	4798      	blx	r3

  now = sys_now();
 80111d6:	f7f8 fd89 	bl	8009cec <sys_now>
 80111da:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	681a      	ldr	r2, [r3, #0]
 80111e0:	4b0f      	ldr	r3, [pc, #60]	@ (8011220 <lwip_cyclic_timer+0x5c>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	4413      	add	r3, r2
 80111e6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80111e8:	68fa      	ldr	r2, [r7, #12]
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	1ad3      	subs	r3, r2, r3
 80111ee:	0fdb      	lsrs	r3, r3, #31
 80111f0:	f003 0301 	and.w	r3, r3, #1
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d009      	beq.n	801120e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	681a      	ldr	r2, [r3, #0]
 80111fe:	693b      	ldr	r3, [r7, #16]
 8011200:	4413      	add	r3, r2
 8011202:	687a      	ldr	r2, [r7, #4]
 8011204:	4907      	ldr	r1, [pc, #28]	@ (8011224 <lwip_cyclic_timer+0x60>)
 8011206:	4618      	mov	r0, r3
 8011208:	f7ff ff6e 	bl	80110e8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801120c:	e004      	b.n	8011218 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	4904      	ldr	r1, [pc, #16]	@ (8011224 <lwip_cyclic_timer+0x60>)
 8011212:	68f8      	ldr	r0, [r7, #12]
 8011214:	f7ff ff68 	bl	80110e8 <sys_timeout_abs>
}
 8011218:	bf00      	nop
 801121a:	3718      	adds	r7, #24
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}
 8011220:	2000b25c 	.word	0x2000b25c
 8011224:	080111c5 	.word	0x080111c5

08011228 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b082      	sub	sp, #8
 801122c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801122e:	2301      	movs	r3, #1
 8011230:	607b      	str	r3, [r7, #4]
 8011232:	e00e      	b.n	8011252 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011234:	4a0b      	ldr	r2, [pc, #44]	@ (8011264 <sys_timeouts_init+0x3c>)
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	00db      	lsls	r3, r3, #3
 8011240:	4a08      	ldr	r2, [pc, #32]	@ (8011264 <sys_timeouts_init+0x3c>)
 8011242:	4413      	add	r3, r2
 8011244:	461a      	mov	r2, r3
 8011246:	4908      	ldr	r1, [pc, #32]	@ (8011268 <sys_timeouts_init+0x40>)
 8011248:	f000 f810 	bl	801126c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	3301      	adds	r3, #1
 8011250:	607b      	str	r3, [r7, #4]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2b02      	cmp	r3, #2
 8011256:	d9ed      	bls.n	8011234 <sys_timeouts_init+0xc>
  }
}
 8011258:	bf00      	nop
 801125a:	bf00      	nop
 801125c:	3708      	adds	r7, #8
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}
 8011262:	bf00      	nop
 8011264:	08017d60 	.word	0x08017d60
 8011268:	080111c5 	.word	0x080111c5

0801126c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b086      	sub	sp, #24
 8011270:	af00      	add	r7, sp, #0
 8011272:	60f8      	str	r0, [r7, #12]
 8011274:	60b9      	str	r1, [r7, #8]
 8011276:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801127e:	d306      	bcc.n	801128e <sys_timeout+0x22>
 8011280:	4b0a      	ldr	r3, [pc, #40]	@ (80112ac <sys_timeout+0x40>)
 8011282:	f240 1229 	movw	r2, #297	@ 0x129
 8011286:	490a      	ldr	r1, [pc, #40]	@ (80112b0 <sys_timeout+0x44>)
 8011288:	480a      	ldr	r0, [pc, #40]	@ (80112b4 <sys_timeout+0x48>)
 801128a:	f003 f8f3 	bl	8014474 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801128e:	f7f8 fd2d 	bl	8009cec <sys_now>
 8011292:	4602      	mov	r2, r0
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	4413      	add	r3, r2
 8011298:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	68b9      	ldr	r1, [r7, #8]
 801129e:	6978      	ldr	r0, [r7, #20]
 80112a0:	f7ff ff22 	bl	80110e8 <sys_timeout_abs>
#endif
}
 80112a4:	bf00      	nop
 80112a6:	3718      	adds	r7, #24
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}
 80112ac:	0801716c 	.word	0x0801716c
 80112b0:	08017208 	.word	0x08017208
 80112b4:	080171e0 	.word	0x080171e0

080112b8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b084      	sub	sp, #16
 80112bc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80112be:	f7f8 fd15 	bl	8009cec <sys_now>
 80112c2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80112c4:	4b1a      	ldr	r3, [pc, #104]	@ (8011330 <sys_check_timeouts+0x78>)
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	b2db      	uxtb	r3, r3
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d001      	beq.n	80112d2 <sys_check_timeouts+0x1a>
 80112ce:	f7f9 ff29 	bl	800b124 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80112d2:	4b18      	ldr	r3, [pc, #96]	@ (8011334 <sys_check_timeouts+0x7c>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d022      	beq.n	8011324 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	685b      	ldr	r3, [r3, #4]
 80112e2:	68fa      	ldr	r2, [r7, #12]
 80112e4:	1ad3      	subs	r3, r2, r3
 80112e6:	0fdb      	lsrs	r3, r3, #31
 80112e8:	f003 0301 	and.w	r3, r3, #1
 80112ec:	b2db      	uxtb	r3, r3
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d11a      	bne.n	8011328 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	4a0f      	ldr	r2, [pc, #60]	@ (8011334 <sys_check_timeouts+0x7c>)
 80112f8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	689b      	ldr	r3, [r3, #8]
 80112fe:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	68db      	ldr	r3, [r3, #12]
 8011304:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	4a0b      	ldr	r2, [pc, #44]	@ (8011338 <sys_check_timeouts+0x80>)
 801130c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801130e:	68b9      	ldr	r1, [r7, #8]
 8011310:	2006      	movs	r0, #6
 8011312:	f7f9 fbcb 	bl	800aaac <memp_free>
    if (handler != NULL) {
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d0d3      	beq.n	80112c4 <sys_check_timeouts+0xc>
      handler(arg);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6838      	ldr	r0, [r7, #0]
 8011320:	4798      	blx	r3
  do {
 8011322:	e7cf      	b.n	80112c4 <sys_check_timeouts+0xc>
      return;
 8011324:	bf00      	nop
 8011326:	e000      	b.n	801132a <sys_check_timeouts+0x72>
      return;
 8011328:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801132a:	3710      	adds	r7, #16
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}
 8011330:	2000b205 	.word	0x2000b205
 8011334:	2000b258 	.word	0x2000b258
 8011338:	2000b25c 	.word	0x2000b25c

0801133c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011340:	f002 ff98 	bl	8014274 <rand>
 8011344:	4603      	mov	r3, r0
 8011346:	b29b      	uxth	r3, r3
 8011348:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801134c:	b29b      	uxth	r3, r3
 801134e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011352:	b29a      	uxth	r2, r3
 8011354:	4b01      	ldr	r3, [pc, #4]	@ (801135c <udp_init+0x20>)
 8011356:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011358:	bf00      	nop
 801135a:	bd80      	pop	{r7, pc}
 801135c:	200000dc 	.word	0x200000dc

08011360 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011360:	b480      	push	{r7}
 8011362:	b083      	sub	sp, #12
 8011364:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011366:	2300      	movs	r3, #0
 8011368:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801136a:	4b17      	ldr	r3, [pc, #92]	@ (80113c8 <udp_new_port+0x68>)
 801136c:	881b      	ldrh	r3, [r3, #0]
 801136e:	1c5a      	adds	r2, r3, #1
 8011370:	b291      	uxth	r1, r2
 8011372:	4a15      	ldr	r2, [pc, #84]	@ (80113c8 <udp_new_port+0x68>)
 8011374:	8011      	strh	r1, [r2, #0]
 8011376:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801137a:	4293      	cmp	r3, r2
 801137c:	d103      	bne.n	8011386 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801137e:	4b12      	ldr	r3, [pc, #72]	@ (80113c8 <udp_new_port+0x68>)
 8011380:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8011384:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011386:	4b11      	ldr	r3, [pc, #68]	@ (80113cc <udp_new_port+0x6c>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	603b      	str	r3, [r7, #0]
 801138c:	e011      	b.n	80113b2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	8a5a      	ldrh	r2, [r3, #18]
 8011392:	4b0d      	ldr	r3, [pc, #52]	@ (80113c8 <udp_new_port+0x68>)
 8011394:	881b      	ldrh	r3, [r3, #0]
 8011396:	429a      	cmp	r2, r3
 8011398:	d108      	bne.n	80113ac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801139a:	88fb      	ldrh	r3, [r7, #6]
 801139c:	3301      	adds	r3, #1
 801139e:	80fb      	strh	r3, [r7, #6]
 80113a0:	88fb      	ldrh	r3, [r7, #6]
 80113a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80113a6:	d3e0      	bcc.n	801136a <udp_new_port+0xa>
        return 0;
 80113a8:	2300      	movs	r3, #0
 80113aa:	e007      	b.n	80113bc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	603b      	str	r3, [r7, #0]
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d1ea      	bne.n	801138e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80113b8:	4b03      	ldr	r3, [pc, #12]	@ (80113c8 <udp_new_port+0x68>)
 80113ba:	881b      	ldrh	r3, [r3, #0]
}
 80113bc:	4618      	mov	r0, r3
 80113be:	370c      	adds	r7, #12
 80113c0:	46bd      	mov	sp, r7
 80113c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c6:	4770      	bx	lr
 80113c8:	200000dc 	.word	0x200000dc
 80113cc:	2000b264 	.word	0x2000b264

080113d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b084      	sub	sp, #16
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	60f8      	str	r0, [r7, #12]
 80113d8:	60b9      	str	r1, [r7, #8]
 80113da:	4613      	mov	r3, r2
 80113dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d105      	bne.n	80113f0 <udp_input_local_match+0x20>
 80113e4:	4b27      	ldr	r3, [pc, #156]	@ (8011484 <udp_input_local_match+0xb4>)
 80113e6:	2287      	movs	r2, #135	@ 0x87
 80113e8:	4927      	ldr	r1, [pc, #156]	@ (8011488 <udp_input_local_match+0xb8>)
 80113ea:	4828      	ldr	r0, [pc, #160]	@ (801148c <udp_input_local_match+0xbc>)
 80113ec:	f003 f842 	bl	8014474 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d105      	bne.n	8011402 <udp_input_local_match+0x32>
 80113f6:	4b23      	ldr	r3, [pc, #140]	@ (8011484 <udp_input_local_match+0xb4>)
 80113f8:	2288      	movs	r2, #136	@ 0x88
 80113fa:	4925      	ldr	r1, [pc, #148]	@ (8011490 <udp_input_local_match+0xc0>)
 80113fc:	4823      	ldr	r0, [pc, #140]	@ (801148c <udp_input_local_match+0xbc>)
 80113fe:	f003 f839 	bl	8014474 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	7a1b      	ldrb	r3, [r3, #8]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d00b      	beq.n	8011422 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	7a1a      	ldrb	r2, [r3, #8]
 801140e:	4b21      	ldr	r3, [pc, #132]	@ (8011494 <udp_input_local_match+0xc4>)
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011416:	3301      	adds	r3, #1
 8011418:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801141a:	429a      	cmp	r2, r3
 801141c:	d001      	beq.n	8011422 <udp_input_local_match+0x52>
    return 0;
 801141e:	2300      	movs	r3, #0
 8011420:	e02b      	b.n	801147a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011422:	79fb      	ldrb	r3, [r7, #7]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d018      	beq.n	801145a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d013      	beq.n	8011456 <udp_input_local_match+0x86>
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d00f      	beq.n	8011456 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011436:	4b17      	ldr	r3, [pc, #92]	@ (8011494 <udp_input_local_match+0xc4>)
 8011438:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801143a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801143e:	d00a      	beq.n	8011456 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	681a      	ldr	r2, [r3, #0]
 8011444:	4b13      	ldr	r3, [pc, #76]	@ (8011494 <udp_input_local_match+0xc4>)
 8011446:	695b      	ldr	r3, [r3, #20]
 8011448:	405a      	eors	r2, r3
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	3308      	adds	r3, #8
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011452:	2b00      	cmp	r3, #0
 8011454:	d110      	bne.n	8011478 <udp_input_local_match+0xa8>
          return 1;
 8011456:	2301      	movs	r3, #1
 8011458:	e00f      	b.n	801147a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d009      	beq.n	8011474 <udp_input_local_match+0xa4>
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d005      	beq.n	8011474 <udp_input_local_match+0xa4>
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	681a      	ldr	r2, [r3, #0]
 801146c:	4b09      	ldr	r3, [pc, #36]	@ (8011494 <udp_input_local_match+0xc4>)
 801146e:	695b      	ldr	r3, [r3, #20]
 8011470:	429a      	cmp	r2, r3
 8011472:	d101      	bne.n	8011478 <udp_input_local_match+0xa8>
        return 1;
 8011474:	2301      	movs	r3, #1
 8011476:	e000      	b.n	801147a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011478:	2300      	movs	r3, #0
}
 801147a:	4618      	mov	r0, r3
 801147c:	3710      	adds	r7, #16
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
 8011482:	bf00      	nop
 8011484:	08017254 	.word	0x08017254
 8011488:	08017284 	.word	0x08017284
 801148c:	080172a8 	.word	0x080172a8
 8011490:	080172d0 	.word	0x080172d0
 8011494:	20005ad8 	.word	0x20005ad8

08011498 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011498:	b590      	push	{r4, r7, lr}
 801149a:	b08d      	sub	sp, #52	@ 0x34
 801149c:	af02      	add	r7, sp, #8
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80114a2:	2300      	movs	r3, #0
 80114a4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d105      	bne.n	80114b8 <udp_input+0x20>
 80114ac:	4b7c      	ldr	r3, [pc, #496]	@ (80116a0 <udp_input+0x208>)
 80114ae:	22cf      	movs	r2, #207	@ 0xcf
 80114b0:	497c      	ldr	r1, [pc, #496]	@ (80116a4 <udp_input+0x20c>)
 80114b2:	487d      	ldr	r0, [pc, #500]	@ (80116a8 <udp_input+0x210>)
 80114b4:	f002 ffde 	bl	8014474 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d105      	bne.n	80114ca <udp_input+0x32>
 80114be:	4b78      	ldr	r3, [pc, #480]	@ (80116a0 <udp_input+0x208>)
 80114c0:	22d0      	movs	r2, #208	@ 0xd0
 80114c2:	497a      	ldr	r1, [pc, #488]	@ (80116ac <udp_input+0x214>)
 80114c4:	4878      	ldr	r0, [pc, #480]	@ (80116a8 <udp_input+0x210>)
 80114c6:	f002 ffd5 	bl	8014474 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	895b      	ldrh	r3, [r3, #10]
 80114ce:	2b07      	cmp	r3, #7
 80114d0:	d803      	bhi.n	80114da <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f7fa f960 	bl	800b798 <pbuf_free>
    goto end;
 80114d8:	e0de      	b.n	8011698 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80114e0:	4b73      	ldr	r3, [pc, #460]	@ (80116b0 <udp_input+0x218>)
 80114e2:	695b      	ldr	r3, [r3, #20]
 80114e4:	4a72      	ldr	r2, [pc, #456]	@ (80116b0 <udp_input+0x218>)
 80114e6:	6812      	ldr	r2, [r2, #0]
 80114e8:	4611      	mov	r1, r2
 80114ea:	4618      	mov	r0, r3
 80114ec:	f001 ff6c 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 80114f0:	4603      	mov	r3, r0
 80114f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	881b      	ldrh	r3, [r3, #0]
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7f8 fdee 	bl	800a0dc <lwip_htons>
 8011500:	4603      	mov	r3, r0
 8011502:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	885b      	ldrh	r3, [r3, #2]
 8011508:	b29b      	uxth	r3, r3
 801150a:	4618      	mov	r0, r3
 801150c:	f7f8 fde6 	bl	800a0dc <lwip_htons>
 8011510:	4603      	mov	r3, r0
 8011512:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011514:	2300      	movs	r3, #0
 8011516:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8011518:	2300      	movs	r3, #0
 801151a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801151c:	2300      	movs	r3, #0
 801151e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011520:	4b64      	ldr	r3, [pc, #400]	@ (80116b4 <udp_input+0x21c>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	627b      	str	r3, [r7, #36]	@ 0x24
 8011526:	e054      	b.n	80115d2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801152a:	8a5b      	ldrh	r3, [r3, #18]
 801152c:	89fa      	ldrh	r2, [r7, #14]
 801152e:	429a      	cmp	r2, r3
 8011530:	d14a      	bne.n	80115c8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011532:	7cfb      	ldrb	r3, [r7, #19]
 8011534:	461a      	mov	r2, r3
 8011536:	6839      	ldr	r1, [r7, #0]
 8011538:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801153a:	f7ff ff49 	bl	80113d0 <udp_input_local_match>
 801153e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011540:	2b00      	cmp	r3, #0
 8011542:	d041      	beq.n	80115c8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011546:	7c1b      	ldrb	r3, [r3, #16]
 8011548:	f003 0304 	and.w	r3, r3, #4
 801154c:	2b00      	cmp	r3, #0
 801154e:	d11d      	bne.n	801158c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011550:	69fb      	ldr	r3, [r7, #28]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d102      	bne.n	801155c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011558:	61fb      	str	r3, [r7, #28]
 801155a:	e017      	b.n	801158c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801155c:	7cfb      	ldrb	r3, [r7, #19]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d014      	beq.n	801158c <udp_input+0xf4>
 8011562:	4b53      	ldr	r3, [pc, #332]	@ (80116b0 <udp_input+0x218>)
 8011564:	695b      	ldr	r3, [r3, #20]
 8011566:	f1b3 3fff 	cmp.w	r3, #4294967295
 801156a:	d10f      	bne.n	801158c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801156c:	69fb      	ldr	r3, [r7, #28]
 801156e:	681a      	ldr	r2, [r3, #0]
 8011570:	683b      	ldr	r3, [r7, #0]
 8011572:	3304      	adds	r3, #4
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	429a      	cmp	r2, r3
 8011578:	d008      	beq.n	801158c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	3304      	adds	r3, #4
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	429a      	cmp	r2, r3
 8011586:	d101      	bne.n	801158c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801158a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801158e:	8a9b      	ldrh	r3, [r3, #20]
 8011590:	8a3a      	ldrh	r2, [r7, #16]
 8011592:	429a      	cmp	r2, r3
 8011594:	d118      	bne.n	80115c8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011598:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801159a:	2b00      	cmp	r3, #0
 801159c:	d005      	beq.n	80115aa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a0:	685a      	ldr	r2, [r3, #4]
 80115a2:	4b43      	ldr	r3, [pc, #268]	@ (80116b0 <udp_input+0x218>)
 80115a4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80115a6:	429a      	cmp	r2, r3
 80115a8:	d10e      	bne.n	80115c8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80115aa:	6a3b      	ldr	r3, [r7, #32]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d014      	beq.n	80115da <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80115b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b2:	68da      	ldr	r2, [r3, #12]
 80115b4:	6a3b      	ldr	r3, [r7, #32]
 80115b6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80115b8:	4b3e      	ldr	r3, [pc, #248]	@ (80116b4 <udp_input+0x21c>)
 80115ba:	681a      	ldr	r2, [r3, #0]
 80115bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115be:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80115c0:	4a3c      	ldr	r2, [pc, #240]	@ (80116b4 <udp_input+0x21c>)
 80115c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80115c6:	e008      	b.n	80115da <udp_input+0x142>
      }
    }

    prev = pcb;
 80115c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80115cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80115d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d1a7      	bne.n	8011528 <udp_input+0x90>
 80115d8:	e000      	b.n	80115dc <udp_input+0x144>
        break;
 80115da:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80115dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d101      	bne.n	80115e6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80115e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d002      	beq.n	80115f2 <udp_input+0x15a>
    for_us = 1;
 80115ec:	2301      	movs	r3, #1
 80115ee:	76fb      	strb	r3, [r7, #27]
 80115f0:	e00a      	b.n	8011608 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	3304      	adds	r3, #4
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	4b2d      	ldr	r3, [pc, #180]	@ (80116b0 <udp_input+0x218>)
 80115fa:	695b      	ldr	r3, [r3, #20]
 80115fc:	429a      	cmp	r2, r3
 80115fe:	bf0c      	ite	eq
 8011600:	2301      	moveq	r3, #1
 8011602:	2300      	movne	r3, #0
 8011604:	b2db      	uxtb	r3, r3
 8011606:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011608:	7efb      	ldrb	r3, [r7, #27]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d041      	beq.n	8011692 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801160e:	2108      	movs	r1, #8
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f7fa f83b 	bl	800b68c <pbuf_remove_header>
 8011616:	4603      	mov	r3, r0
 8011618:	2b00      	cmp	r3, #0
 801161a:	d00a      	beq.n	8011632 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801161c:	4b20      	ldr	r3, [pc, #128]	@ (80116a0 <udp_input+0x208>)
 801161e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8011622:	4925      	ldr	r1, [pc, #148]	@ (80116b8 <udp_input+0x220>)
 8011624:	4820      	ldr	r0, [pc, #128]	@ (80116a8 <udp_input+0x210>)
 8011626:	f002 ff25 	bl	8014474 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f7fa f8b4 	bl	800b798 <pbuf_free>
      goto end;
 8011630:	e032      	b.n	8011698 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011634:	2b00      	cmp	r3, #0
 8011636:	d012      	beq.n	801165e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801163a:	699b      	ldr	r3, [r3, #24]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d00a      	beq.n	8011656 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011642:	699c      	ldr	r4, [r3, #24]
 8011644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011646:	69d8      	ldr	r0, [r3, #28]
 8011648:	8a3b      	ldrh	r3, [r7, #16]
 801164a:	9300      	str	r3, [sp, #0]
 801164c:	4b1b      	ldr	r3, [pc, #108]	@ (80116bc <udp_input+0x224>)
 801164e:	687a      	ldr	r2, [r7, #4]
 8011650:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011652:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011654:	e021      	b.n	801169a <udp_input+0x202>
        pbuf_free(p);
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f7fa f89e 	bl	800b798 <pbuf_free>
        goto end;
 801165c:	e01c      	b.n	8011698 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801165e:	7cfb      	ldrb	r3, [r7, #19]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d112      	bne.n	801168a <udp_input+0x1f2>
 8011664:	4b12      	ldr	r3, [pc, #72]	@ (80116b0 <udp_input+0x218>)
 8011666:	695b      	ldr	r3, [r3, #20]
 8011668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801166c:	2be0      	cmp	r3, #224	@ 0xe0
 801166e:	d00c      	beq.n	801168a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011670:	4b0f      	ldr	r3, [pc, #60]	@ (80116b0 <udp_input+0x218>)
 8011672:	899b      	ldrh	r3, [r3, #12]
 8011674:	3308      	adds	r3, #8
 8011676:	b29b      	uxth	r3, r3
 8011678:	b21b      	sxth	r3, r3
 801167a:	4619      	mov	r1, r3
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f7fa f878 	bl	800b772 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011682:	2103      	movs	r1, #3
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f001 fb7f 	bl	8012d88 <icmp_dest_unreach>
      pbuf_free(p);
 801168a:	6878      	ldr	r0, [r7, #4]
 801168c:	f7fa f884 	bl	800b798 <pbuf_free>
  return;
 8011690:	e003      	b.n	801169a <udp_input+0x202>
    pbuf_free(p);
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f7fa f880 	bl	800b798 <pbuf_free>
  return;
 8011698:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801169a:	372c      	adds	r7, #44	@ 0x2c
 801169c:	46bd      	mov	sp, r7
 801169e:	bd90      	pop	{r4, r7, pc}
 80116a0:	08017254 	.word	0x08017254
 80116a4:	080172f8 	.word	0x080172f8
 80116a8:	080172a8 	.word	0x080172a8
 80116ac:	08017310 	.word	0x08017310
 80116b0:	20005ad8 	.word	0x20005ad8
 80116b4:	2000b264 	.word	0x2000b264
 80116b8:	0801732c 	.word	0x0801732c
 80116bc:	20005ae8 	.word	0x20005ae8

080116c0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b088      	sub	sp, #32
 80116c4:	af02      	add	r7, sp, #8
 80116c6:	60f8      	str	r0, [r7, #12]
 80116c8:	60b9      	str	r1, [r7, #8]
 80116ca:	607a      	str	r2, [r7, #4]
 80116cc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d109      	bne.n	80116e8 <udp_sendto+0x28>
 80116d4:	4b23      	ldr	r3, [pc, #140]	@ (8011764 <udp_sendto+0xa4>)
 80116d6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80116da:	4923      	ldr	r1, [pc, #140]	@ (8011768 <udp_sendto+0xa8>)
 80116dc:	4823      	ldr	r0, [pc, #140]	@ (801176c <udp_sendto+0xac>)
 80116de:	f002 fec9 	bl	8014474 <iprintf>
 80116e2:	f06f 030f 	mvn.w	r3, #15
 80116e6:	e038      	b.n	801175a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d109      	bne.n	8011702 <udp_sendto+0x42>
 80116ee:	4b1d      	ldr	r3, [pc, #116]	@ (8011764 <udp_sendto+0xa4>)
 80116f0:	f240 2219 	movw	r2, #537	@ 0x219
 80116f4:	491e      	ldr	r1, [pc, #120]	@ (8011770 <udp_sendto+0xb0>)
 80116f6:	481d      	ldr	r0, [pc, #116]	@ (801176c <udp_sendto+0xac>)
 80116f8:	f002 febc 	bl	8014474 <iprintf>
 80116fc:	f06f 030f 	mvn.w	r3, #15
 8011700:	e02b      	b.n	801175a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d109      	bne.n	801171c <udp_sendto+0x5c>
 8011708:	4b16      	ldr	r3, [pc, #88]	@ (8011764 <udp_sendto+0xa4>)
 801170a:	f240 221a 	movw	r2, #538	@ 0x21a
 801170e:	4919      	ldr	r1, [pc, #100]	@ (8011774 <udp_sendto+0xb4>)
 8011710:	4816      	ldr	r0, [pc, #88]	@ (801176c <udp_sendto+0xac>)
 8011712:	f002 feaf 	bl	8014474 <iprintf>
 8011716:	f06f 030f 	mvn.w	r3, #15
 801171a:	e01e      	b.n	801175a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	7a1b      	ldrb	r3, [r3, #8]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d006      	beq.n	8011732 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	7a1b      	ldrb	r3, [r3, #8]
 8011728:	4618      	mov	r0, r3
 801172a:	f7f9 fcd5 	bl	800b0d8 <netif_get_by_index>
 801172e:	6178      	str	r0, [r7, #20]
 8011730:	e003      	b.n	801173a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f001 fbb2 	bl	8012e9c <ip4_route>
 8011738:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801173a:	697b      	ldr	r3, [r7, #20]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d102      	bne.n	8011746 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8011740:	f06f 0303 	mvn.w	r3, #3
 8011744:	e009      	b.n	801175a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8011746:	887a      	ldrh	r2, [r7, #2]
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	9300      	str	r3, [sp, #0]
 801174c:	4613      	mov	r3, r2
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	68b9      	ldr	r1, [r7, #8]
 8011752:	68f8      	ldr	r0, [r7, #12]
 8011754:	f000 f810 	bl	8011778 <udp_sendto_if>
 8011758:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801175a:	4618      	mov	r0, r3
 801175c:	3718      	adds	r7, #24
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}
 8011762:	bf00      	nop
 8011764:	08017254 	.word	0x08017254
 8011768:	08017378 	.word	0x08017378
 801176c:	080172a8 	.word	0x080172a8
 8011770:	08017390 	.word	0x08017390
 8011774:	080173ac 	.word	0x080173ac

08011778 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b088      	sub	sp, #32
 801177c:	af02      	add	r7, sp, #8
 801177e:	60f8      	str	r0, [r7, #12]
 8011780:	60b9      	str	r1, [r7, #8]
 8011782:	607a      	str	r2, [r7, #4]
 8011784:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d109      	bne.n	80117a0 <udp_sendto_if+0x28>
 801178c:	4b2e      	ldr	r3, [pc, #184]	@ (8011848 <udp_sendto_if+0xd0>)
 801178e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011792:	492e      	ldr	r1, [pc, #184]	@ (801184c <udp_sendto_if+0xd4>)
 8011794:	482e      	ldr	r0, [pc, #184]	@ (8011850 <udp_sendto_if+0xd8>)
 8011796:	f002 fe6d 	bl	8014474 <iprintf>
 801179a:	f06f 030f 	mvn.w	r3, #15
 801179e:	e04f      	b.n	8011840 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d109      	bne.n	80117ba <udp_sendto_if+0x42>
 80117a6:	4b28      	ldr	r3, [pc, #160]	@ (8011848 <udp_sendto_if+0xd0>)
 80117a8:	f240 2281 	movw	r2, #641	@ 0x281
 80117ac:	4929      	ldr	r1, [pc, #164]	@ (8011854 <udp_sendto_if+0xdc>)
 80117ae:	4828      	ldr	r0, [pc, #160]	@ (8011850 <udp_sendto_if+0xd8>)
 80117b0:	f002 fe60 	bl	8014474 <iprintf>
 80117b4:	f06f 030f 	mvn.w	r3, #15
 80117b8:	e042      	b.n	8011840 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d109      	bne.n	80117d4 <udp_sendto_if+0x5c>
 80117c0:	4b21      	ldr	r3, [pc, #132]	@ (8011848 <udp_sendto_if+0xd0>)
 80117c2:	f240 2282 	movw	r2, #642	@ 0x282
 80117c6:	4924      	ldr	r1, [pc, #144]	@ (8011858 <udp_sendto_if+0xe0>)
 80117c8:	4821      	ldr	r0, [pc, #132]	@ (8011850 <udp_sendto_if+0xd8>)
 80117ca:	f002 fe53 	bl	8014474 <iprintf>
 80117ce:	f06f 030f 	mvn.w	r3, #15
 80117d2:	e035      	b.n	8011840 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80117d4:	6a3b      	ldr	r3, [r7, #32]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d109      	bne.n	80117ee <udp_sendto_if+0x76>
 80117da:	4b1b      	ldr	r3, [pc, #108]	@ (8011848 <udp_sendto_if+0xd0>)
 80117dc:	f240 2283 	movw	r2, #643	@ 0x283
 80117e0:	491e      	ldr	r1, [pc, #120]	@ (801185c <udp_sendto_if+0xe4>)
 80117e2:	481b      	ldr	r0, [pc, #108]	@ (8011850 <udp_sendto_if+0xd8>)
 80117e4:	f002 fe46 	bl	8014474 <iprintf>
 80117e8:	f06f 030f 	mvn.w	r3, #15
 80117ec:	e028      	b.n	8011840 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d009      	beq.n	8011808 <udp_sendto_if+0x90>
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d005      	beq.n	8011808 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011804:	2be0      	cmp	r3, #224	@ 0xe0
 8011806:	d103      	bne.n	8011810 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011808:	6a3b      	ldr	r3, [r7, #32]
 801180a:	3304      	adds	r3, #4
 801180c:	617b      	str	r3, [r7, #20]
 801180e:	e00b      	b.n	8011828 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	681a      	ldr	r2, [r3, #0]
 8011814:	6a3b      	ldr	r3, [r7, #32]
 8011816:	3304      	adds	r3, #4
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	429a      	cmp	r2, r3
 801181c:	d002      	beq.n	8011824 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801181e:	f06f 0303 	mvn.w	r3, #3
 8011822:	e00d      	b.n	8011840 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011828:	887a      	ldrh	r2, [r7, #2]
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	9301      	str	r3, [sp, #4]
 801182e:	6a3b      	ldr	r3, [r7, #32]
 8011830:	9300      	str	r3, [sp, #0]
 8011832:	4613      	mov	r3, r2
 8011834:	687a      	ldr	r2, [r7, #4]
 8011836:	68b9      	ldr	r1, [r7, #8]
 8011838:	68f8      	ldr	r0, [r7, #12]
 801183a:	f000 f811 	bl	8011860 <udp_sendto_if_src>
 801183e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011840:	4618      	mov	r0, r3
 8011842:	3718      	adds	r7, #24
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}
 8011848:	08017254 	.word	0x08017254
 801184c:	080173c8 	.word	0x080173c8
 8011850:	080172a8 	.word	0x080172a8
 8011854:	080173e4 	.word	0x080173e4
 8011858:	08017400 	.word	0x08017400
 801185c:	08017420 	.word	0x08017420

08011860 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b08c      	sub	sp, #48	@ 0x30
 8011864:	af04      	add	r7, sp, #16
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	607a      	str	r2, [r7, #4]
 801186c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d109      	bne.n	8011888 <udp_sendto_if_src+0x28>
 8011874:	4b65      	ldr	r3, [pc, #404]	@ (8011a0c <udp_sendto_if_src+0x1ac>)
 8011876:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801187a:	4965      	ldr	r1, [pc, #404]	@ (8011a10 <udp_sendto_if_src+0x1b0>)
 801187c:	4865      	ldr	r0, [pc, #404]	@ (8011a14 <udp_sendto_if_src+0x1b4>)
 801187e:	f002 fdf9 	bl	8014474 <iprintf>
 8011882:	f06f 030f 	mvn.w	r3, #15
 8011886:	e0bc      	b.n	8011a02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d109      	bne.n	80118a2 <udp_sendto_if_src+0x42>
 801188e:	4b5f      	ldr	r3, [pc, #380]	@ (8011a0c <udp_sendto_if_src+0x1ac>)
 8011890:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8011894:	4960      	ldr	r1, [pc, #384]	@ (8011a18 <udp_sendto_if_src+0x1b8>)
 8011896:	485f      	ldr	r0, [pc, #380]	@ (8011a14 <udp_sendto_if_src+0x1b4>)
 8011898:	f002 fdec 	bl	8014474 <iprintf>
 801189c:	f06f 030f 	mvn.w	r3, #15
 80118a0:	e0af      	b.n	8011a02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d109      	bne.n	80118bc <udp_sendto_if_src+0x5c>
 80118a8:	4b58      	ldr	r3, [pc, #352]	@ (8011a0c <udp_sendto_if_src+0x1ac>)
 80118aa:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80118ae:	495b      	ldr	r1, [pc, #364]	@ (8011a1c <udp_sendto_if_src+0x1bc>)
 80118b0:	4858      	ldr	r0, [pc, #352]	@ (8011a14 <udp_sendto_if_src+0x1b4>)
 80118b2:	f002 fddf 	bl	8014474 <iprintf>
 80118b6:	f06f 030f 	mvn.w	r3, #15
 80118ba:	e0a2      	b.n	8011a02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80118bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d109      	bne.n	80118d6 <udp_sendto_if_src+0x76>
 80118c2:	4b52      	ldr	r3, [pc, #328]	@ (8011a0c <udp_sendto_if_src+0x1ac>)
 80118c4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80118c8:	4955      	ldr	r1, [pc, #340]	@ (8011a20 <udp_sendto_if_src+0x1c0>)
 80118ca:	4852      	ldr	r0, [pc, #328]	@ (8011a14 <udp_sendto_if_src+0x1b4>)
 80118cc:	f002 fdd2 	bl	8014474 <iprintf>
 80118d0:	f06f 030f 	mvn.w	r3, #15
 80118d4:	e095      	b.n	8011a02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80118d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d109      	bne.n	80118f0 <udp_sendto_if_src+0x90>
 80118dc:	4b4b      	ldr	r3, [pc, #300]	@ (8011a0c <udp_sendto_if_src+0x1ac>)
 80118de:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80118e2:	4950      	ldr	r1, [pc, #320]	@ (8011a24 <udp_sendto_if_src+0x1c4>)
 80118e4:	484b      	ldr	r0, [pc, #300]	@ (8011a14 <udp_sendto_if_src+0x1b4>)
 80118e6:	f002 fdc5 	bl	8014474 <iprintf>
 80118ea:	f06f 030f 	mvn.w	r3, #15
 80118ee:	e088      	b.n	8011a02 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	8a5b      	ldrh	r3, [r3, #18]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d10f      	bne.n	8011918 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80118f8:	68f9      	ldr	r1, [r7, #12]
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	8a5b      	ldrh	r3, [r3, #18]
 80118fe:	461a      	mov	r2, r3
 8011900:	68f8      	ldr	r0, [r7, #12]
 8011902:	f000 f893 	bl	8011a2c <udp_bind>
 8011906:	4603      	mov	r3, r0
 8011908:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801190a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d002      	beq.n	8011918 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011912:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011916:	e074      	b.n	8011a02 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011918:	68bb      	ldr	r3, [r7, #8]
 801191a:	891b      	ldrh	r3, [r3, #8]
 801191c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8011920:	4293      	cmp	r3, r2
 8011922:	d902      	bls.n	801192a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011924:	f04f 33ff 	mov.w	r3, #4294967295
 8011928:	e06b      	b.n	8011a02 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801192a:	2108      	movs	r1, #8
 801192c:	68b8      	ldr	r0, [r7, #8]
 801192e:	f7f9 fe9d 	bl	800b66c <pbuf_add_header>
 8011932:	4603      	mov	r3, r0
 8011934:	2b00      	cmp	r3, #0
 8011936:	d015      	beq.n	8011964 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011938:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801193c:	2108      	movs	r1, #8
 801193e:	2022      	movs	r0, #34	@ 0x22
 8011940:	f7f9 fc46 	bl	800b1d0 <pbuf_alloc>
 8011944:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011946:	69fb      	ldr	r3, [r7, #28]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d102      	bne.n	8011952 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801194c:	f04f 33ff 	mov.w	r3, #4294967295
 8011950:	e057      	b.n	8011a02 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	891b      	ldrh	r3, [r3, #8]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d006      	beq.n	8011968 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801195a:	68b9      	ldr	r1, [r7, #8]
 801195c:	69f8      	ldr	r0, [r7, #28]
 801195e:	f7fa f833 	bl	800b9c8 <pbuf_chain>
 8011962:	e001      	b.n	8011968 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011968:	69fb      	ldr	r3, [r7, #28]
 801196a:	895b      	ldrh	r3, [r3, #10]
 801196c:	2b07      	cmp	r3, #7
 801196e:	d806      	bhi.n	801197e <udp_sendto_if_src+0x11e>
 8011970:	4b26      	ldr	r3, [pc, #152]	@ (8011a0c <udp_sendto_if_src+0x1ac>)
 8011972:	f240 320d 	movw	r2, #781	@ 0x30d
 8011976:	492c      	ldr	r1, [pc, #176]	@ (8011a28 <udp_sendto_if_src+0x1c8>)
 8011978:	4826      	ldr	r0, [pc, #152]	@ (8011a14 <udp_sendto_if_src+0x1b4>)
 801197a:	f002 fd7b 	bl	8014474 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801197e:	69fb      	ldr	r3, [r7, #28]
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	8a5b      	ldrh	r3, [r3, #18]
 8011988:	4618      	mov	r0, r3
 801198a:	f7f8 fba7 	bl	800a0dc <lwip_htons>
 801198e:	4603      	mov	r3, r0
 8011990:	461a      	mov	r2, r3
 8011992:	697b      	ldr	r3, [r7, #20]
 8011994:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011996:	887b      	ldrh	r3, [r7, #2]
 8011998:	4618      	mov	r0, r3
 801199a:	f7f8 fb9f 	bl	800a0dc <lwip_htons>
 801199e:	4603      	mov	r3, r0
 80119a0:	461a      	mov	r2, r3
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	2200      	movs	r2, #0
 80119aa:	719a      	strb	r2, [r3, #6]
 80119ac:	2200      	movs	r2, #0
 80119ae:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80119b0:	69fb      	ldr	r3, [r7, #28]
 80119b2:	891b      	ldrh	r3, [r3, #8]
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7f8 fb91 	bl	800a0dc <lwip_htons>
 80119ba:	4603      	mov	r3, r0
 80119bc:	461a      	mov	r2, r3
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80119c2:	2311      	movs	r3, #17
 80119c4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	7adb      	ldrb	r3, [r3, #11]
 80119ca:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	7a9b      	ldrb	r3, [r3, #10]
 80119d0:	7cb9      	ldrb	r1, [r7, #18]
 80119d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80119d4:	9202      	str	r2, [sp, #8]
 80119d6:	7cfa      	ldrb	r2, [r7, #19]
 80119d8:	9201      	str	r2, [sp, #4]
 80119da:	9300      	str	r3, [sp, #0]
 80119dc:	460b      	mov	r3, r1
 80119de:	687a      	ldr	r2, [r7, #4]
 80119e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80119e2:	69f8      	ldr	r0, [r7, #28]
 80119e4:	f001 fc42 	bl	801326c <ip4_output_if_src>
 80119e8:	4603      	mov	r3, r0
 80119ea:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80119ec:	69fa      	ldr	r2, [r7, #28]
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d004      	beq.n	80119fe <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80119f4:	69f8      	ldr	r0, [r7, #28]
 80119f6:	f7f9 fecf 	bl	800b798 <pbuf_free>
    q = NULL;
 80119fa:	2300      	movs	r3, #0
 80119fc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80119fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3720      	adds	r7, #32
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
 8011a0a:	bf00      	nop
 8011a0c:	08017254 	.word	0x08017254
 8011a10:	08017440 	.word	0x08017440
 8011a14:	080172a8 	.word	0x080172a8
 8011a18:	08017460 	.word	0x08017460
 8011a1c:	08017480 	.word	0x08017480
 8011a20:	080174a4 	.word	0x080174a4
 8011a24:	080174c8 	.word	0x080174c8
 8011a28:	080174ec 	.word	0x080174ec

08011a2c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b086      	sub	sp, #24
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	60f8      	str	r0, [r7, #12]
 8011a34:	60b9      	str	r1, [r7, #8]
 8011a36:	4613      	mov	r3, r2
 8011a38:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d101      	bne.n	8011a44 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011a40:	4b39      	ldr	r3, [pc, #228]	@ (8011b28 <udp_bind+0xfc>)
 8011a42:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d109      	bne.n	8011a5e <udp_bind+0x32>
 8011a4a:	4b38      	ldr	r3, [pc, #224]	@ (8011b2c <udp_bind+0x100>)
 8011a4c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8011a50:	4937      	ldr	r1, [pc, #220]	@ (8011b30 <udp_bind+0x104>)
 8011a52:	4838      	ldr	r0, [pc, #224]	@ (8011b34 <udp_bind+0x108>)
 8011a54:	f002 fd0e 	bl	8014474 <iprintf>
 8011a58:	f06f 030f 	mvn.w	r3, #15
 8011a5c:	e060      	b.n	8011b20 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011a62:	4b35      	ldr	r3, [pc, #212]	@ (8011b38 <udp_bind+0x10c>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	617b      	str	r3, [r7, #20]
 8011a68:	e009      	b.n	8011a7e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011a6a:	68fa      	ldr	r2, [r7, #12]
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d102      	bne.n	8011a78 <udp_bind+0x4c>
      rebind = 1;
 8011a72:	2301      	movs	r3, #1
 8011a74:	74fb      	strb	r3, [r7, #19]
      break;
 8011a76:	e005      	b.n	8011a84 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	68db      	ldr	r3, [r3, #12]
 8011a7c:	617b      	str	r3, [r7, #20]
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d1f2      	bne.n	8011a6a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011a84:	88fb      	ldrh	r3, [r7, #6]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d109      	bne.n	8011a9e <udp_bind+0x72>
    port = udp_new_port();
 8011a8a:	f7ff fc69 	bl	8011360 <udp_new_port>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011a92:	88fb      	ldrh	r3, [r7, #6]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d12c      	bne.n	8011af2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011a98:	f06f 0307 	mvn.w	r3, #7
 8011a9c:	e040      	b.n	8011b20 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011a9e:	4b26      	ldr	r3, [pc, #152]	@ (8011b38 <udp_bind+0x10c>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	617b      	str	r3, [r7, #20]
 8011aa4:	e022      	b.n	8011aec <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011aa6:	68fa      	ldr	r2, [r7, #12]
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d01b      	beq.n	8011ae6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011aae:	697b      	ldr	r3, [r7, #20]
 8011ab0:	8a5b      	ldrh	r3, [r3, #18]
 8011ab2:	88fa      	ldrh	r2, [r7, #6]
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d116      	bne.n	8011ae6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	681a      	ldr	r2, [r3, #0]
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011ac0:	429a      	cmp	r2, r3
 8011ac2:	d00d      	beq.n	8011ae0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d00a      	beq.n	8011ae0 <udp_bind+0xb4>
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d006      	beq.n	8011ae0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011ad2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d003      	beq.n	8011ae0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d102      	bne.n	8011ae6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011ae0:	f06f 0307 	mvn.w	r3, #7
 8011ae4:	e01c      	b.n	8011b20 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	68db      	ldr	r3, [r3, #12]
 8011aea:	617b      	str	r3, [r7, #20]
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d1d9      	bne.n	8011aa6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011af2:	68bb      	ldr	r3, [r7, #8]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d002      	beq.n	8011afe <udp_bind+0xd2>
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	e000      	b.n	8011b00 <udp_bind+0xd4>
 8011afe:	2300      	movs	r3, #0
 8011b00:	68fa      	ldr	r2, [r7, #12]
 8011b02:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	88fa      	ldrh	r2, [r7, #6]
 8011b08:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011b0a:	7cfb      	ldrb	r3, [r7, #19]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d106      	bne.n	8011b1e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011b10:	4b09      	ldr	r3, [pc, #36]	@ (8011b38 <udp_bind+0x10c>)
 8011b12:	681a      	ldr	r2, [r3, #0]
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011b18:	4a07      	ldr	r2, [pc, #28]	@ (8011b38 <udp_bind+0x10c>)
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011b1e:	2300      	movs	r3, #0
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3718      	adds	r7, #24
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	08017d78 	.word	0x08017d78
 8011b2c:	08017254 	.word	0x08017254
 8011b30:	0801751c 	.word	0x0801751c
 8011b34:	080172a8 	.word	0x080172a8
 8011b38:	2000b264 	.word	0x2000b264

08011b3c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b086      	sub	sp, #24
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	60f8      	str	r0, [r7, #12]
 8011b44:	60b9      	str	r1, [r7, #8]
 8011b46:	4613      	mov	r3, r2
 8011b48:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d109      	bne.n	8011b64 <udp_connect+0x28>
 8011b50:	4b2c      	ldr	r3, [pc, #176]	@ (8011c04 <udp_connect+0xc8>)
 8011b52:	f240 4235 	movw	r2, #1077	@ 0x435
 8011b56:	492c      	ldr	r1, [pc, #176]	@ (8011c08 <udp_connect+0xcc>)
 8011b58:	482c      	ldr	r0, [pc, #176]	@ (8011c0c <udp_connect+0xd0>)
 8011b5a:	f002 fc8b 	bl	8014474 <iprintf>
 8011b5e:	f06f 030f 	mvn.w	r3, #15
 8011b62:	e04b      	b.n	8011bfc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d109      	bne.n	8011b7e <udp_connect+0x42>
 8011b6a:	4b26      	ldr	r3, [pc, #152]	@ (8011c04 <udp_connect+0xc8>)
 8011b6c:	f240 4236 	movw	r2, #1078	@ 0x436
 8011b70:	4927      	ldr	r1, [pc, #156]	@ (8011c10 <udp_connect+0xd4>)
 8011b72:	4826      	ldr	r0, [pc, #152]	@ (8011c0c <udp_connect+0xd0>)
 8011b74:	f002 fc7e 	bl	8014474 <iprintf>
 8011b78:	f06f 030f 	mvn.w	r3, #15
 8011b7c:	e03e      	b.n	8011bfc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	8a5b      	ldrh	r3, [r3, #18]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d10f      	bne.n	8011ba6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011b86:	68f9      	ldr	r1, [r7, #12]
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	8a5b      	ldrh	r3, [r3, #18]
 8011b8c:	461a      	mov	r2, r3
 8011b8e:	68f8      	ldr	r0, [r7, #12]
 8011b90:	f7ff ff4c 	bl	8011a2c <udp_bind>
 8011b94:	4603      	mov	r3, r0
 8011b96:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011b98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d002      	beq.n	8011ba6 <udp_connect+0x6a>
      return err;
 8011ba0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ba4:	e02a      	b.n	8011bfc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d002      	beq.n	8011bb2 <udp_connect+0x76>
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	e000      	b.n	8011bb4 <udp_connect+0x78>
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	68fa      	ldr	r2, [r7, #12]
 8011bb6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	88fa      	ldrh	r2, [r7, #6]
 8011bbc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	7c1b      	ldrb	r3, [r3, #16]
 8011bc2:	f043 0304 	orr.w	r3, r3, #4
 8011bc6:	b2da      	uxtb	r2, r3
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011bcc:	4b11      	ldr	r3, [pc, #68]	@ (8011c14 <udp_connect+0xd8>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	617b      	str	r3, [r7, #20]
 8011bd2:	e008      	b.n	8011be6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011bd4:	68fa      	ldr	r2, [r7, #12]
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d101      	bne.n	8011be0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011bdc:	2300      	movs	r3, #0
 8011bde:	e00d      	b.n	8011bfc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	617b      	str	r3, [r7, #20]
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d1f3      	bne.n	8011bd4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011bec:	4b09      	ldr	r3, [pc, #36]	@ (8011c14 <udp_connect+0xd8>)
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011bf4:	4a07      	ldr	r2, [pc, #28]	@ (8011c14 <udp_connect+0xd8>)
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011bfa:	2300      	movs	r3, #0
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3718      	adds	r7, #24
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	08017254 	.word	0x08017254
 8011c08:	08017534 	.word	0x08017534
 8011c0c:	080172a8 	.word	0x080172a8
 8011c10:	08017550 	.word	0x08017550
 8011c14:	2000b264 	.word	0x2000b264

08011c18 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b084      	sub	sp, #16
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	60f8      	str	r0, [r7, #12]
 8011c20:	60b9      	str	r1, [r7, #8]
 8011c22:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d107      	bne.n	8011c3a <udp_recv+0x22>
 8011c2a:	4b08      	ldr	r3, [pc, #32]	@ (8011c4c <udp_recv+0x34>)
 8011c2c:	f240 428a 	movw	r2, #1162	@ 0x48a
 8011c30:	4907      	ldr	r1, [pc, #28]	@ (8011c50 <udp_recv+0x38>)
 8011c32:	4808      	ldr	r0, [pc, #32]	@ (8011c54 <udp_recv+0x3c>)
 8011c34:	f002 fc1e 	bl	8014474 <iprintf>
 8011c38:	e005      	b.n	8011c46 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	68ba      	ldr	r2, [r7, #8]
 8011c3e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	687a      	ldr	r2, [r7, #4]
 8011c44:	61da      	str	r2, [r3, #28]
}
 8011c46:	3710      	adds	r7, #16
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	08017254 	.word	0x08017254
 8011c50:	08017588 	.word	0x08017588
 8011c54:	080172a8 	.word	0x080172a8

08011c58 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011c5e:	2000      	movs	r0, #0
 8011c60:	f7f8 feb4 	bl	800a9cc <memp_malloc>
 8011c64:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d007      	beq.n	8011c7c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011c6c:	2220      	movs	r2, #32
 8011c6e:	2100      	movs	r1, #0
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f002 fc64 	bl	801453e <memset>
    pcb->ttl = UDP_TTL;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	22ff      	movs	r2, #255	@ 0xff
 8011c7a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011c7c:	687b      	ldr	r3, [r7, #4]
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3708      	adds	r7, #8
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
	...

08011c88 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011c88:	b480      	push	{r7}
 8011c8a:	b085      	sub	sp, #20
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d01e      	beq.n	8011cd6 <udp_netif_ip_addr_changed+0x4e>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d01a      	beq.n	8011cd6 <udp_netif_ip_addr_changed+0x4e>
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d017      	beq.n	8011cd6 <udp_netif_ip_addr_changed+0x4e>
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d013      	beq.n	8011cd6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011cae:	4b0d      	ldr	r3, [pc, #52]	@ (8011ce4 <udp_netif_ip_addr_changed+0x5c>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	60fb      	str	r3, [r7, #12]
 8011cb4:	e00c      	b.n	8011cd0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681a      	ldr	r2, [r3, #0]
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	d103      	bne.n	8011cca <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	681a      	ldr	r2, [r3, #0]
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	68db      	ldr	r3, [r3, #12]
 8011cce:	60fb      	str	r3, [r7, #12]
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d1ef      	bne.n	8011cb6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011cd6:	bf00      	nop
 8011cd8:	3714      	adds	r7, #20
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce0:	4770      	bx	lr
 8011ce2:	bf00      	nop
 8011ce4:	2000b264 	.word	0x2000b264

08011ce8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b082      	sub	sp, #8
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011cf0:	4915      	ldr	r1, [pc, #84]	@ (8011d48 <etharp_free_entry+0x60>)
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	4613      	mov	r3, r2
 8011cf6:	005b      	lsls	r3, r3, #1
 8011cf8:	4413      	add	r3, r2
 8011cfa:	00db      	lsls	r3, r3, #3
 8011cfc:	440b      	add	r3, r1
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d013      	beq.n	8011d2c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011d04:	4910      	ldr	r1, [pc, #64]	@ (8011d48 <etharp_free_entry+0x60>)
 8011d06:	687a      	ldr	r2, [r7, #4]
 8011d08:	4613      	mov	r3, r2
 8011d0a:	005b      	lsls	r3, r3, #1
 8011d0c:	4413      	add	r3, r2
 8011d0e:	00db      	lsls	r3, r3, #3
 8011d10:	440b      	add	r3, r1
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7f9 fd3f 	bl	800b798 <pbuf_free>
    arp_table[i].q = NULL;
 8011d1a:	490b      	ldr	r1, [pc, #44]	@ (8011d48 <etharp_free_entry+0x60>)
 8011d1c:	687a      	ldr	r2, [r7, #4]
 8011d1e:	4613      	mov	r3, r2
 8011d20:	005b      	lsls	r3, r3, #1
 8011d22:	4413      	add	r3, r2
 8011d24:	00db      	lsls	r3, r3, #3
 8011d26:	440b      	add	r3, r1
 8011d28:	2200      	movs	r2, #0
 8011d2a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011d2c:	4906      	ldr	r1, [pc, #24]	@ (8011d48 <etharp_free_entry+0x60>)
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	4613      	mov	r3, r2
 8011d32:	005b      	lsls	r3, r3, #1
 8011d34:	4413      	add	r3, r2
 8011d36:	00db      	lsls	r3, r3, #3
 8011d38:	440b      	add	r3, r1
 8011d3a:	3314      	adds	r3, #20
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011d40:	bf00      	nop
 8011d42:	3708      	adds	r7, #8
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	2000b268 	.word	0x2000b268

08011d4c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b082      	sub	sp, #8
 8011d50:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011d52:	2300      	movs	r3, #0
 8011d54:	607b      	str	r3, [r7, #4]
 8011d56:	e096      	b.n	8011e86 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011d58:	494f      	ldr	r1, [pc, #316]	@ (8011e98 <etharp_tmr+0x14c>)
 8011d5a:	687a      	ldr	r2, [r7, #4]
 8011d5c:	4613      	mov	r3, r2
 8011d5e:	005b      	lsls	r3, r3, #1
 8011d60:	4413      	add	r3, r2
 8011d62:	00db      	lsls	r3, r3, #3
 8011d64:	440b      	add	r3, r1
 8011d66:	3314      	adds	r3, #20
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011d6c:	78fb      	ldrb	r3, [r7, #3]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	f000 8086 	beq.w	8011e80 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011d74:	4948      	ldr	r1, [pc, #288]	@ (8011e98 <etharp_tmr+0x14c>)
 8011d76:	687a      	ldr	r2, [r7, #4]
 8011d78:	4613      	mov	r3, r2
 8011d7a:	005b      	lsls	r3, r3, #1
 8011d7c:	4413      	add	r3, r2
 8011d7e:	00db      	lsls	r3, r3, #3
 8011d80:	440b      	add	r3, r1
 8011d82:	3312      	adds	r3, #18
 8011d84:	881b      	ldrh	r3, [r3, #0]
 8011d86:	3301      	adds	r3, #1
 8011d88:	b298      	uxth	r0, r3
 8011d8a:	4943      	ldr	r1, [pc, #268]	@ (8011e98 <etharp_tmr+0x14c>)
 8011d8c:	687a      	ldr	r2, [r7, #4]
 8011d8e:	4613      	mov	r3, r2
 8011d90:	005b      	lsls	r3, r3, #1
 8011d92:	4413      	add	r3, r2
 8011d94:	00db      	lsls	r3, r3, #3
 8011d96:	440b      	add	r3, r1
 8011d98:	3312      	adds	r3, #18
 8011d9a:	4602      	mov	r2, r0
 8011d9c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011d9e:	493e      	ldr	r1, [pc, #248]	@ (8011e98 <etharp_tmr+0x14c>)
 8011da0:	687a      	ldr	r2, [r7, #4]
 8011da2:	4613      	mov	r3, r2
 8011da4:	005b      	lsls	r3, r3, #1
 8011da6:	4413      	add	r3, r2
 8011da8:	00db      	lsls	r3, r3, #3
 8011daa:	440b      	add	r3, r1
 8011dac:	3312      	adds	r3, #18
 8011dae:	881b      	ldrh	r3, [r3, #0]
 8011db0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8011db4:	d215      	bcs.n	8011de2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011db6:	4938      	ldr	r1, [pc, #224]	@ (8011e98 <etharp_tmr+0x14c>)
 8011db8:	687a      	ldr	r2, [r7, #4]
 8011dba:	4613      	mov	r3, r2
 8011dbc:	005b      	lsls	r3, r3, #1
 8011dbe:	4413      	add	r3, r2
 8011dc0:	00db      	lsls	r3, r3, #3
 8011dc2:	440b      	add	r3, r1
 8011dc4:	3314      	adds	r3, #20
 8011dc6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011dc8:	2b01      	cmp	r3, #1
 8011dca:	d10e      	bne.n	8011dea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011dcc:	4932      	ldr	r1, [pc, #200]	@ (8011e98 <etharp_tmr+0x14c>)
 8011dce:	687a      	ldr	r2, [r7, #4]
 8011dd0:	4613      	mov	r3, r2
 8011dd2:	005b      	lsls	r3, r3, #1
 8011dd4:	4413      	add	r3, r2
 8011dd6:	00db      	lsls	r3, r3, #3
 8011dd8:	440b      	add	r3, r1
 8011dda:	3312      	adds	r3, #18
 8011ddc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011dde:	2b04      	cmp	r3, #4
 8011de0:	d903      	bls.n	8011dea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f7ff ff80 	bl	8011ce8 <etharp_free_entry>
 8011de8:	e04a      	b.n	8011e80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011dea:	492b      	ldr	r1, [pc, #172]	@ (8011e98 <etharp_tmr+0x14c>)
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	4613      	mov	r3, r2
 8011df0:	005b      	lsls	r3, r3, #1
 8011df2:	4413      	add	r3, r2
 8011df4:	00db      	lsls	r3, r3, #3
 8011df6:	440b      	add	r3, r1
 8011df8:	3314      	adds	r3, #20
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	2b03      	cmp	r3, #3
 8011dfe:	d10a      	bne.n	8011e16 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011e00:	4925      	ldr	r1, [pc, #148]	@ (8011e98 <etharp_tmr+0x14c>)
 8011e02:	687a      	ldr	r2, [r7, #4]
 8011e04:	4613      	mov	r3, r2
 8011e06:	005b      	lsls	r3, r3, #1
 8011e08:	4413      	add	r3, r2
 8011e0a:	00db      	lsls	r3, r3, #3
 8011e0c:	440b      	add	r3, r1
 8011e0e:	3314      	adds	r3, #20
 8011e10:	2204      	movs	r2, #4
 8011e12:	701a      	strb	r2, [r3, #0]
 8011e14:	e034      	b.n	8011e80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011e16:	4920      	ldr	r1, [pc, #128]	@ (8011e98 <etharp_tmr+0x14c>)
 8011e18:	687a      	ldr	r2, [r7, #4]
 8011e1a:	4613      	mov	r3, r2
 8011e1c:	005b      	lsls	r3, r3, #1
 8011e1e:	4413      	add	r3, r2
 8011e20:	00db      	lsls	r3, r3, #3
 8011e22:	440b      	add	r3, r1
 8011e24:	3314      	adds	r3, #20
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	2b04      	cmp	r3, #4
 8011e2a:	d10a      	bne.n	8011e42 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011e2c:	491a      	ldr	r1, [pc, #104]	@ (8011e98 <etharp_tmr+0x14c>)
 8011e2e:	687a      	ldr	r2, [r7, #4]
 8011e30:	4613      	mov	r3, r2
 8011e32:	005b      	lsls	r3, r3, #1
 8011e34:	4413      	add	r3, r2
 8011e36:	00db      	lsls	r3, r3, #3
 8011e38:	440b      	add	r3, r1
 8011e3a:	3314      	adds	r3, #20
 8011e3c:	2202      	movs	r2, #2
 8011e3e:	701a      	strb	r2, [r3, #0]
 8011e40:	e01e      	b.n	8011e80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011e42:	4915      	ldr	r1, [pc, #84]	@ (8011e98 <etharp_tmr+0x14c>)
 8011e44:	687a      	ldr	r2, [r7, #4]
 8011e46:	4613      	mov	r3, r2
 8011e48:	005b      	lsls	r3, r3, #1
 8011e4a:	4413      	add	r3, r2
 8011e4c:	00db      	lsls	r3, r3, #3
 8011e4e:	440b      	add	r3, r1
 8011e50:	3314      	adds	r3, #20
 8011e52:	781b      	ldrb	r3, [r3, #0]
 8011e54:	2b01      	cmp	r3, #1
 8011e56:	d113      	bne.n	8011e80 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011e58:	490f      	ldr	r1, [pc, #60]	@ (8011e98 <etharp_tmr+0x14c>)
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	4613      	mov	r3, r2
 8011e5e:	005b      	lsls	r3, r3, #1
 8011e60:	4413      	add	r3, r2
 8011e62:	00db      	lsls	r3, r3, #3
 8011e64:	440b      	add	r3, r1
 8011e66:	3308      	adds	r3, #8
 8011e68:	6818      	ldr	r0, [r3, #0]
 8011e6a:	687a      	ldr	r2, [r7, #4]
 8011e6c:	4613      	mov	r3, r2
 8011e6e:	005b      	lsls	r3, r3, #1
 8011e70:	4413      	add	r3, r2
 8011e72:	00db      	lsls	r3, r3, #3
 8011e74:	4a08      	ldr	r2, [pc, #32]	@ (8011e98 <etharp_tmr+0x14c>)
 8011e76:	4413      	add	r3, r2
 8011e78:	3304      	adds	r3, #4
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	f000 fe6e 	bl	8012b5c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	3301      	adds	r3, #1
 8011e84:	607b      	str	r3, [r7, #4]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2b09      	cmp	r3, #9
 8011e8a:	f77f af65 	ble.w	8011d58 <etharp_tmr+0xc>
      }
    }
  }
}
 8011e8e:	bf00      	nop
 8011e90:	bf00      	nop
 8011e92:	3708      	adds	r7, #8
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bd80      	pop	{r7, pc}
 8011e98:	2000b268 	.word	0x2000b268

08011e9c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b08a      	sub	sp, #40	@ 0x28
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	60f8      	str	r0, [r7, #12]
 8011ea4:	460b      	mov	r3, r1
 8011ea6:	607a      	str	r2, [r7, #4]
 8011ea8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011eaa:	230a      	movs	r3, #10
 8011eac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011eae:	230a      	movs	r3, #10
 8011eb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011eb2:	230a      	movs	r3, #10
 8011eb4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011eba:	230a      	movs	r3, #10
 8011ebc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	83bb      	strh	r3, [r7, #28]
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	837b      	strh	r3, [r7, #26]
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011eca:	2300      	movs	r3, #0
 8011ecc:	843b      	strh	r3, [r7, #32]
 8011ece:	e0ae      	b.n	801202e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011ed0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ed4:	49a6      	ldr	r1, [pc, #664]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011ed6:	4613      	mov	r3, r2
 8011ed8:	005b      	lsls	r3, r3, #1
 8011eda:	4413      	add	r3, r2
 8011edc:	00db      	lsls	r3, r3, #3
 8011ede:	440b      	add	r3, r1
 8011ee0:	3314      	adds	r3, #20
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011ee6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011eea:	2b0a      	cmp	r3, #10
 8011eec:	d105      	bne.n	8011efa <etharp_find_entry+0x5e>
 8011eee:	7dfb      	ldrb	r3, [r7, #23]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d102      	bne.n	8011efa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011ef4:	8c3b      	ldrh	r3, [r7, #32]
 8011ef6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011ef8:	e095      	b.n	8012026 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011efa:	7dfb      	ldrb	r3, [r7, #23]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	f000 8092 	beq.w	8012026 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011f02:	7dfb      	ldrb	r3, [r7, #23]
 8011f04:	2b01      	cmp	r3, #1
 8011f06:	d009      	beq.n	8011f1c <etharp_find_entry+0x80>
 8011f08:	7dfb      	ldrb	r3, [r7, #23]
 8011f0a:	2b01      	cmp	r3, #1
 8011f0c:	d806      	bhi.n	8011f1c <etharp_find_entry+0x80>
 8011f0e:	4b99      	ldr	r3, [pc, #612]	@ (8012174 <etharp_find_entry+0x2d8>)
 8011f10:	f240 1223 	movw	r2, #291	@ 0x123
 8011f14:	4998      	ldr	r1, [pc, #608]	@ (8012178 <etharp_find_entry+0x2dc>)
 8011f16:	4899      	ldr	r0, [pc, #612]	@ (801217c <etharp_find_entry+0x2e0>)
 8011f18:	f002 faac 	bl	8014474 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d020      	beq.n	8011f64 <etharp_find_entry+0xc8>
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	6819      	ldr	r1, [r3, #0]
 8011f26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f2a:	4891      	ldr	r0, [pc, #580]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	005b      	lsls	r3, r3, #1
 8011f30:	4413      	add	r3, r2
 8011f32:	00db      	lsls	r3, r3, #3
 8011f34:	4403      	add	r3, r0
 8011f36:	3304      	adds	r3, #4
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	4299      	cmp	r1, r3
 8011f3c:	d112      	bne.n	8011f64 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d00c      	beq.n	8011f5e <etharp_find_entry+0xc2>
 8011f44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f48:	4989      	ldr	r1, [pc, #548]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011f4a:	4613      	mov	r3, r2
 8011f4c:	005b      	lsls	r3, r3, #1
 8011f4e:	4413      	add	r3, r2
 8011f50:	00db      	lsls	r3, r3, #3
 8011f52:	440b      	add	r3, r1
 8011f54:	3308      	adds	r3, #8
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	687a      	ldr	r2, [r7, #4]
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d102      	bne.n	8011f64 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011f5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011f62:	e100      	b.n	8012166 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011f64:	7dfb      	ldrb	r3, [r7, #23]
 8011f66:	2b01      	cmp	r3, #1
 8011f68:	d140      	bne.n	8011fec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011f6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f6e:	4980      	ldr	r1, [pc, #512]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011f70:	4613      	mov	r3, r2
 8011f72:	005b      	lsls	r3, r3, #1
 8011f74:	4413      	add	r3, r2
 8011f76:	00db      	lsls	r3, r3, #3
 8011f78:	440b      	add	r3, r1
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d01a      	beq.n	8011fb6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011f80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f84:	497a      	ldr	r1, [pc, #488]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011f86:	4613      	mov	r3, r2
 8011f88:	005b      	lsls	r3, r3, #1
 8011f8a:	4413      	add	r3, r2
 8011f8c:	00db      	lsls	r3, r3, #3
 8011f8e:	440b      	add	r3, r1
 8011f90:	3312      	adds	r3, #18
 8011f92:	881b      	ldrh	r3, [r3, #0]
 8011f94:	8bba      	ldrh	r2, [r7, #28]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d845      	bhi.n	8012026 <etharp_find_entry+0x18a>
            old_queue = i;
 8011f9a:	8c3b      	ldrh	r3, [r7, #32]
 8011f9c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011f9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011fa2:	4973      	ldr	r1, [pc, #460]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011fa4:	4613      	mov	r3, r2
 8011fa6:	005b      	lsls	r3, r3, #1
 8011fa8:	4413      	add	r3, r2
 8011faa:	00db      	lsls	r3, r3, #3
 8011fac:	440b      	add	r3, r1
 8011fae:	3312      	adds	r3, #18
 8011fb0:	881b      	ldrh	r3, [r3, #0]
 8011fb2:	83bb      	strh	r3, [r7, #28]
 8011fb4:	e037      	b.n	8012026 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011fb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011fba:	496d      	ldr	r1, [pc, #436]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011fbc:	4613      	mov	r3, r2
 8011fbe:	005b      	lsls	r3, r3, #1
 8011fc0:	4413      	add	r3, r2
 8011fc2:	00db      	lsls	r3, r3, #3
 8011fc4:	440b      	add	r3, r1
 8011fc6:	3312      	adds	r3, #18
 8011fc8:	881b      	ldrh	r3, [r3, #0]
 8011fca:	8b7a      	ldrh	r2, [r7, #26]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d82a      	bhi.n	8012026 <etharp_find_entry+0x18a>
            old_pending = i;
 8011fd0:	8c3b      	ldrh	r3, [r7, #32]
 8011fd2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8011fd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011fd8:	4965      	ldr	r1, [pc, #404]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011fda:	4613      	mov	r3, r2
 8011fdc:	005b      	lsls	r3, r3, #1
 8011fde:	4413      	add	r3, r2
 8011fe0:	00db      	lsls	r3, r3, #3
 8011fe2:	440b      	add	r3, r1
 8011fe4:	3312      	adds	r3, #18
 8011fe6:	881b      	ldrh	r3, [r3, #0]
 8011fe8:	837b      	strh	r3, [r7, #26]
 8011fea:	e01c      	b.n	8012026 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011fec:	7dfb      	ldrb	r3, [r7, #23]
 8011fee:	2b01      	cmp	r3, #1
 8011ff0:	d919      	bls.n	8012026 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011ff2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ff6:	495e      	ldr	r1, [pc, #376]	@ (8012170 <etharp_find_entry+0x2d4>)
 8011ff8:	4613      	mov	r3, r2
 8011ffa:	005b      	lsls	r3, r3, #1
 8011ffc:	4413      	add	r3, r2
 8011ffe:	00db      	lsls	r3, r3, #3
 8012000:	440b      	add	r3, r1
 8012002:	3312      	adds	r3, #18
 8012004:	881b      	ldrh	r3, [r3, #0]
 8012006:	8b3a      	ldrh	r2, [r7, #24]
 8012008:	429a      	cmp	r2, r3
 801200a:	d80c      	bhi.n	8012026 <etharp_find_entry+0x18a>
            old_stable = i;
 801200c:	8c3b      	ldrh	r3, [r7, #32]
 801200e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8012010:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012014:	4956      	ldr	r1, [pc, #344]	@ (8012170 <etharp_find_entry+0x2d4>)
 8012016:	4613      	mov	r3, r2
 8012018:	005b      	lsls	r3, r3, #1
 801201a:	4413      	add	r3, r2
 801201c:	00db      	lsls	r3, r3, #3
 801201e:	440b      	add	r3, r1
 8012020:	3312      	adds	r3, #18
 8012022:	881b      	ldrh	r3, [r3, #0]
 8012024:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012026:	8c3b      	ldrh	r3, [r7, #32]
 8012028:	3301      	adds	r3, #1
 801202a:	b29b      	uxth	r3, r3
 801202c:	843b      	strh	r3, [r7, #32]
 801202e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012032:	2b09      	cmp	r3, #9
 8012034:	f77f af4c 	ble.w	8011ed0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012038:	7afb      	ldrb	r3, [r7, #11]
 801203a:	f003 0302 	and.w	r3, r3, #2
 801203e:	2b00      	cmp	r3, #0
 8012040:	d108      	bne.n	8012054 <etharp_find_entry+0x1b8>
 8012042:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012046:	2b0a      	cmp	r3, #10
 8012048:	d107      	bne.n	801205a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801204a:	7afb      	ldrb	r3, [r7, #11]
 801204c:	f003 0301 	and.w	r3, r3, #1
 8012050:	2b00      	cmp	r3, #0
 8012052:	d102      	bne.n	801205a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012054:	f04f 33ff 	mov.w	r3, #4294967295
 8012058:	e085      	b.n	8012166 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801205a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801205e:	2b09      	cmp	r3, #9
 8012060:	dc02      	bgt.n	8012068 <etharp_find_entry+0x1cc>
    i = empty;
 8012062:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012064:	843b      	strh	r3, [r7, #32]
 8012066:	e039      	b.n	80120dc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012068:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801206c:	2b09      	cmp	r3, #9
 801206e:	dc14      	bgt.n	801209a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012070:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012072:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012074:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012078:	493d      	ldr	r1, [pc, #244]	@ (8012170 <etharp_find_entry+0x2d4>)
 801207a:	4613      	mov	r3, r2
 801207c:	005b      	lsls	r3, r3, #1
 801207e:	4413      	add	r3, r2
 8012080:	00db      	lsls	r3, r3, #3
 8012082:	440b      	add	r3, r1
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d018      	beq.n	80120bc <etharp_find_entry+0x220>
 801208a:	4b3a      	ldr	r3, [pc, #232]	@ (8012174 <etharp_find_entry+0x2d8>)
 801208c:	f240 126d 	movw	r2, #365	@ 0x16d
 8012090:	493b      	ldr	r1, [pc, #236]	@ (8012180 <etharp_find_entry+0x2e4>)
 8012092:	483a      	ldr	r0, [pc, #232]	@ (801217c <etharp_find_entry+0x2e0>)
 8012094:	f002 f9ee 	bl	8014474 <iprintf>
 8012098:	e010      	b.n	80120bc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801209a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801209e:	2b09      	cmp	r3, #9
 80120a0:	dc02      	bgt.n	80120a8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80120a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80120a4:	843b      	strh	r3, [r7, #32]
 80120a6:	e009      	b.n	80120bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80120a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80120ac:	2b09      	cmp	r3, #9
 80120ae:	dc02      	bgt.n	80120b6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80120b0:	8bfb      	ldrh	r3, [r7, #30]
 80120b2:	843b      	strh	r3, [r7, #32]
 80120b4:	e002      	b.n	80120bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80120b6:	f04f 33ff 	mov.w	r3, #4294967295
 80120ba:	e054      	b.n	8012166 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80120bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80120c0:	2b09      	cmp	r3, #9
 80120c2:	dd06      	ble.n	80120d2 <etharp_find_entry+0x236>
 80120c4:	4b2b      	ldr	r3, [pc, #172]	@ (8012174 <etharp_find_entry+0x2d8>)
 80120c6:	f240 127f 	movw	r2, #383	@ 0x17f
 80120ca:	492e      	ldr	r1, [pc, #184]	@ (8012184 <etharp_find_entry+0x2e8>)
 80120cc:	482b      	ldr	r0, [pc, #172]	@ (801217c <etharp_find_entry+0x2e0>)
 80120ce:	f002 f9d1 	bl	8014474 <iprintf>
    etharp_free_entry(i);
 80120d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80120d6:	4618      	mov	r0, r3
 80120d8:	f7ff fe06 	bl	8011ce8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80120dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80120e0:	2b09      	cmp	r3, #9
 80120e2:	dd06      	ble.n	80120f2 <etharp_find_entry+0x256>
 80120e4:	4b23      	ldr	r3, [pc, #140]	@ (8012174 <etharp_find_entry+0x2d8>)
 80120e6:	f240 1283 	movw	r2, #387	@ 0x183
 80120ea:	4926      	ldr	r1, [pc, #152]	@ (8012184 <etharp_find_entry+0x2e8>)
 80120ec:	4823      	ldr	r0, [pc, #140]	@ (801217c <etharp_find_entry+0x2e0>)
 80120ee:	f002 f9c1 	bl	8014474 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80120f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80120f6:	491e      	ldr	r1, [pc, #120]	@ (8012170 <etharp_find_entry+0x2d4>)
 80120f8:	4613      	mov	r3, r2
 80120fa:	005b      	lsls	r3, r3, #1
 80120fc:	4413      	add	r3, r2
 80120fe:	00db      	lsls	r3, r3, #3
 8012100:	440b      	add	r3, r1
 8012102:	3314      	adds	r3, #20
 8012104:	781b      	ldrb	r3, [r3, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d006      	beq.n	8012118 <etharp_find_entry+0x27c>
 801210a:	4b1a      	ldr	r3, [pc, #104]	@ (8012174 <etharp_find_entry+0x2d8>)
 801210c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8012110:	491d      	ldr	r1, [pc, #116]	@ (8012188 <etharp_find_entry+0x2ec>)
 8012112:	481a      	ldr	r0, [pc, #104]	@ (801217c <etharp_find_entry+0x2e0>)
 8012114:	f002 f9ae 	bl	8014474 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d00b      	beq.n	8012136 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801211e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	6819      	ldr	r1, [r3, #0]
 8012126:	4812      	ldr	r0, [pc, #72]	@ (8012170 <etharp_find_entry+0x2d4>)
 8012128:	4613      	mov	r3, r2
 801212a:	005b      	lsls	r3, r3, #1
 801212c:	4413      	add	r3, r2
 801212e:	00db      	lsls	r3, r3, #3
 8012130:	4403      	add	r3, r0
 8012132:	3304      	adds	r3, #4
 8012134:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012136:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801213a:	490d      	ldr	r1, [pc, #52]	@ (8012170 <etharp_find_entry+0x2d4>)
 801213c:	4613      	mov	r3, r2
 801213e:	005b      	lsls	r3, r3, #1
 8012140:	4413      	add	r3, r2
 8012142:	00db      	lsls	r3, r3, #3
 8012144:	440b      	add	r3, r1
 8012146:	3312      	adds	r3, #18
 8012148:	2200      	movs	r2, #0
 801214a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801214c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012150:	4907      	ldr	r1, [pc, #28]	@ (8012170 <etharp_find_entry+0x2d4>)
 8012152:	4613      	mov	r3, r2
 8012154:	005b      	lsls	r3, r3, #1
 8012156:	4413      	add	r3, r2
 8012158:	00db      	lsls	r3, r3, #3
 801215a:	440b      	add	r3, r1
 801215c:	3308      	adds	r3, #8
 801215e:	687a      	ldr	r2, [r7, #4]
 8012160:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012162:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012166:	4618      	mov	r0, r3
 8012168:	3728      	adds	r7, #40	@ 0x28
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
 801216e:	bf00      	nop
 8012170:	2000b268 	.word	0x2000b268
 8012174:	080175b8 	.word	0x080175b8
 8012178:	080175f0 	.word	0x080175f0
 801217c:	08017630 	.word	0x08017630
 8012180:	08017658 	.word	0x08017658
 8012184:	08017670 	.word	0x08017670
 8012188:	08017684 	.word	0x08017684

0801218c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b088      	sub	sp, #32
 8012190:	af02      	add	r7, sp, #8
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	60b9      	str	r1, [r7, #8]
 8012196:	607a      	str	r2, [r7, #4]
 8012198:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80121a0:	2b06      	cmp	r3, #6
 80121a2:	d006      	beq.n	80121b2 <etharp_update_arp_entry+0x26>
 80121a4:	4b48      	ldr	r3, [pc, #288]	@ (80122c8 <etharp_update_arp_entry+0x13c>)
 80121a6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80121aa:	4948      	ldr	r1, [pc, #288]	@ (80122cc <etharp_update_arp_entry+0x140>)
 80121ac:	4848      	ldr	r0, [pc, #288]	@ (80122d0 <etharp_update_arp_entry+0x144>)
 80121ae:	f002 f961 	bl	8014474 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d012      	beq.n	80121de <etharp_update_arp_entry+0x52>
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d00e      	beq.n	80121de <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	68f9      	ldr	r1, [r7, #12]
 80121c6:	4618      	mov	r0, r3
 80121c8:	f001 f8fe 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 80121cc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d105      	bne.n	80121de <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80121da:	2be0      	cmp	r3, #224	@ 0xe0
 80121dc:	d102      	bne.n	80121e4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80121de:	f06f 030f 	mvn.w	r3, #15
 80121e2:	e06c      	b.n	80122be <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80121e4:	78fb      	ldrb	r3, [r7, #3]
 80121e6:	68fa      	ldr	r2, [r7, #12]
 80121e8:	4619      	mov	r1, r3
 80121ea:	68b8      	ldr	r0, [r7, #8]
 80121ec:	f7ff fe56 	bl	8011e9c <etharp_find_entry>
 80121f0:	4603      	mov	r3, r0
 80121f2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80121f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	da02      	bge.n	8012202 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80121fc:	8afb      	ldrh	r3, [r7, #22]
 80121fe:	b25b      	sxtb	r3, r3
 8012200:	e05d      	b.n	80122be <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012202:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012206:	4933      	ldr	r1, [pc, #204]	@ (80122d4 <etharp_update_arp_entry+0x148>)
 8012208:	4613      	mov	r3, r2
 801220a:	005b      	lsls	r3, r3, #1
 801220c:	4413      	add	r3, r2
 801220e:	00db      	lsls	r3, r3, #3
 8012210:	440b      	add	r3, r1
 8012212:	3314      	adds	r3, #20
 8012214:	2202      	movs	r2, #2
 8012216:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012218:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801221c:	492d      	ldr	r1, [pc, #180]	@ (80122d4 <etharp_update_arp_entry+0x148>)
 801221e:	4613      	mov	r3, r2
 8012220:	005b      	lsls	r3, r3, #1
 8012222:	4413      	add	r3, r2
 8012224:	00db      	lsls	r3, r3, #3
 8012226:	440b      	add	r3, r1
 8012228:	3308      	adds	r3, #8
 801222a:	68fa      	ldr	r2, [r7, #12]
 801222c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801222e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012232:	4613      	mov	r3, r2
 8012234:	005b      	lsls	r3, r3, #1
 8012236:	4413      	add	r3, r2
 8012238:	00db      	lsls	r3, r3, #3
 801223a:	3308      	adds	r3, #8
 801223c:	4a25      	ldr	r2, [pc, #148]	@ (80122d4 <etharp_update_arp_entry+0x148>)
 801223e:	4413      	add	r3, r2
 8012240:	3304      	adds	r3, #4
 8012242:	2206      	movs	r2, #6
 8012244:	6879      	ldr	r1, [r7, #4]
 8012246:	4618      	mov	r0, r3
 8012248:	f002 f9ef 	bl	801462a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801224c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012250:	4920      	ldr	r1, [pc, #128]	@ (80122d4 <etharp_update_arp_entry+0x148>)
 8012252:	4613      	mov	r3, r2
 8012254:	005b      	lsls	r3, r3, #1
 8012256:	4413      	add	r3, r2
 8012258:	00db      	lsls	r3, r3, #3
 801225a:	440b      	add	r3, r1
 801225c:	3312      	adds	r3, #18
 801225e:	2200      	movs	r2, #0
 8012260:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012262:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012266:	491b      	ldr	r1, [pc, #108]	@ (80122d4 <etharp_update_arp_entry+0x148>)
 8012268:	4613      	mov	r3, r2
 801226a:	005b      	lsls	r3, r3, #1
 801226c:	4413      	add	r3, r2
 801226e:	00db      	lsls	r3, r3, #3
 8012270:	440b      	add	r3, r1
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d021      	beq.n	80122bc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012278:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801227c:	4915      	ldr	r1, [pc, #84]	@ (80122d4 <etharp_update_arp_entry+0x148>)
 801227e:	4613      	mov	r3, r2
 8012280:	005b      	lsls	r3, r3, #1
 8012282:	4413      	add	r3, r2
 8012284:	00db      	lsls	r3, r3, #3
 8012286:	440b      	add	r3, r1
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801228c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012290:	4910      	ldr	r1, [pc, #64]	@ (80122d4 <etharp_update_arp_entry+0x148>)
 8012292:	4613      	mov	r3, r2
 8012294:	005b      	lsls	r3, r3, #1
 8012296:	4413      	add	r3, r2
 8012298:	00db      	lsls	r3, r3, #3
 801229a:	440b      	add	r3, r1
 801229c:	2200      	movs	r2, #0
 801229e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80122a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80122aa:	9300      	str	r3, [sp, #0]
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6939      	ldr	r1, [r7, #16]
 80122b0:	68f8      	ldr	r0, [r7, #12]
 80122b2:	f001 ff97 	bl	80141e4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80122b6:	6938      	ldr	r0, [r7, #16]
 80122b8:	f7f9 fa6e 	bl	800b798 <pbuf_free>
  }
  return ERR_OK;
 80122bc:	2300      	movs	r3, #0
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3718      	adds	r7, #24
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
 80122c6:	bf00      	nop
 80122c8:	080175b8 	.word	0x080175b8
 80122cc:	080176b0 	.word	0x080176b0
 80122d0:	08017630 	.word	0x08017630
 80122d4:	2000b268 	.word	0x2000b268

080122d8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b084      	sub	sp, #16
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80122e0:	2300      	movs	r3, #0
 80122e2:	60fb      	str	r3, [r7, #12]
 80122e4:	e01e      	b.n	8012324 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80122e6:	4913      	ldr	r1, [pc, #76]	@ (8012334 <etharp_cleanup_netif+0x5c>)
 80122e8:	68fa      	ldr	r2, [r7, #12]
 80122ea:	4613      	mov	r3, r2
 80122ec:	005b      	lsls	r3, r3, #1
 80122ee:	4413      	add	r3, r2
 80122f0:	00db      	lsls	r3, r3, #3
 80122f2:	440b      	add	r3, r1
 80122f4:	3314      	adds	r3, #20
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80122fa:	7afb      	ldrb	r3, [r7, #11]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d00e      	beq.n	801231e <etharp_cleanup_netif+0x46>
 8012300:	490c      	ldr	r1, [pc, #48]	@ (8012334 <etharp_cleanup_netif+0x5c>)
 8012302:	68fa      	ldr	r2, [r7, #12]
 8012304:	4613      	mov	r3, r2
 8012306:	005b      	lsls	r3, r3, #1
 8012308:	4413      	add	r3, r2
 801230a:	00db      	lsls	r3, r3, #3
 801230c:	440b      	add	r3, r1
 801230e:	3308      	adds	r3, #8
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	687a      	ldr	r2, [r7, #4]
 8012314:	429a      	cmp	r2, r3
 8012316:	d102      	bne.n	801231e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012318:	68f8      	ldr	r0, [r7, #12]
 801231a:	f7ff fce5 	bl	8011ce8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	3301      	adds	r3, #1
 8012322:	60fb      	str	r3, [r7, #12]
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2b09      	cmp	r3, #9
 8012328:	dddd      	ble.n	80122e6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801232a:	bf00      	nop
 801232c:	bf00      	nop
 801232e:	3710      	adds	r7, #16
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	2000b268 	.word	0x2000b268

08012338 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012338:	b5b0      	push	{r4, r5, r7, lr}
 801233a:	b08a      	sub	sp, #40	@ 0x28
 801233c:	af04      	add	r7, sp, #16
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d107      	bne.n	8012358 <etharp_input+0x20>
 8012348:	4b3d      	ldr	r3, [pc, #244]	@ (8012440 <etharp_input+0x108>)
 801234a:	f240 228a 	movw	r2, #650	@ 0x28a
 801234e:	493d      	ldr	r1, [pc, #244]	@ (8012444 <etharp_input+0x10c>)
 8012350:	483d      	ldr	r0, [pc, #244]	@ (8012448 <etharp_input+0x110>)
 8012352:	f002 f88f 	bl	8014474 <iprintf>
 8012356:	e06f      	b.n	8012438 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	881b      	ldrh	r3, [r3, #0]
 8012362:	b29b      	uxth	r3, r3
 8012364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012368:	d10c      	bne.n	8012384 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801236a:	693b      	ldr	r3, [r7, #16]
 801236c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801236e:	2b06      	cmp	r3, #6
 8012370:	d108      	bne.n	8012384 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012376:	2b04      	cmp	r3, #4
 8012378:	d104      	bne.n	8012384 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	885b      	ldrh	r3, [r3, #2]
 801237e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012380:	2b08      	cmp	r3, #8
 8012382:	d003      	beq.n	801238c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f7f9 fa07 	bl	800b798 <pbuf_free>
    return;
 801238a:	e055      	b.n	8012438 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	330e      	adds	r3, #14
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	3318      	adds	r3, #24
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	3304      	adds	r3, #4
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d102      	bne.n	80123ac <etharp_input+0x74>
    for_us = 0;
 80123a6:	2300      	movs	r3, #0
 80123a8:	75fb      	strb	r3, [r7, #23]
 80123aa:	e009      	b.n	80123c0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80123ac:	68ba      	ldr	r2, [r7, #8]
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	3304      	adds	r3, #4
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	bf0c      	ite	eq
 80123b8:	2301      	moveq	r3, #1
 80123ba:	2300      	movne	r3, #0
 80123bc:	b2db      	uxtb	r3, r3
 80123be:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	f103 0208 	add.w	r2, r3, #8
 80123c6:	7dfb      	ldrb	r3, [r7, #23]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d001      	beq.n	80123d0 <etharp_input+0x98>
 80123cc:	2301      	movs	r3, #1
 80123ce:	e000      	b.n	80123d2 <etharp_input+0x9a>
 80123d0:	2302      	movs	r3, #2
 80123d2:	f107 010c 	add.w	r1, r7, #12
 80123d6:	6838      	ldr	r0, [r7, #0]
 80123d8:	f7ff fed8 	bl	801218c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	88db      	ldrh	r3, [r3, #6]
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80123e6:	d003      	beq.n	80123f0 <etharp_input+0xb8>
 80123e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80123ec:	d01e      	beq.n	801242c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80123ee:	e020      	b.n	8012432 <etharp_input+0xfa>
      if (for_us) {
 80123f0:	7dfb      	ldrb	r3, [r7, #23]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d01c      	beq.n	8012430 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801240c:	693a      	ldr	r2, [r7, #16]
 801240e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012410:	2102      	movs	r1, #2
 8012412:	9103      	str	r1, [sp, #12]
 8012414:	f107 010c 	add.w	r1, r7, #12
 8012418:	9102      	str	r1, [sp, #8]
 801241a:	9201      	str	r2, [sp, #4]
 801241c:	9300      	str	r3, [sp, #0]
 801241e:	462b      	mov	r3, r5
 8012420:	4622      	mov	r2, r4
 8012422:	4601      	mov	r1, r0
 8012424:	6838      	ldr	r0, [r7, #0]
 8012426:	f000 faeb 	bl	8012a00 <etharp_raw>
      break;
 801242a:	e001      	b.n	8012430 <etharp_input+0xf8>
      break;
 801242c:	bf00      	nop
 801242e:	e000      	b.n	8012432 <etharp_input+0xfa>
      break;
 8012430:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f7f9 f9b0 	bl	800b798 <pbuf_free>
}
 8012438:	3718      	adds	r7, #24
 801243a:	46bd      	mov	sp, r7
 801243c:	bdb0      	pop	{r4, r5, r7, pc}
 801243e:	bf00      	nop
 8012440:	080175b8 	.word	0x080175b8
 8012444:	08017708 	.word	0x08017708
 8012448:	08017630 	.word	0x08017630

0801244c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b086      	sub	sp, #24
 8012450:	af02      	add	r7, sp, #8
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	4613      	mov	r3, r2
 8012458:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801245a:	79fa      	ldrb	r2, [r7, #7]
 801245c:	4944      	ldr	r1, [pc, #272]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 801245e:	4613      	mov	r3, r2
 8012460:	005b      	lsls	r3, r3, #1
 8012462:	4413      	add	r3, r2
 8012464:	00db      	lsls	r3, r3, #3
 8012466:	440b      	add	r3, r1
 8012468:	3314      	adds	r3, #20
 801246a:	781b      	ldrb	r3, [r3, #0]
 801246c:	2b01      	cmp	r3, #1
 801246e:	d806      	bhi.n	801247e <etharp_output_to_arp_index+0x32>
 8012470:	4b40      	ldr	r3, [pc, #256]	@ (8012574 <etharp_output_to_arp_index+0x128>)
 8012472:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012476:	4940      	ldr	r1, [pc, #256]	@ (8012578 <etharp_output_to_arp_index+0x12c>)
 8012478:	4840      	ldr	r0, [pc, #256]	@ (801257c <etharp_output_to_arp_index+0x130>)
 801247a:	f001 fffb 	bl	8014474 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801247e:	79fa      	ldrb	r2, [r7, #7]
 8012480:	493b      	ldr	r1, [pc, #236]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 8012482:	4613      	mov	r3, r2
 8012484:	005b      	lsls	r3, r3, #1
 8012486:	4413      	add	r3, r2
 8012488:	00db      	lsls	r3, r3, #3
 801248a:	440b      	add	r3, r1
 801248c:	3314      	adds	r3, #20
 801248e:	781b      	ldrb	r3, [r3, #0]
 8012490:	2b02      	cmp	r3, #2
 8012492:	d153      	bne.n	801253c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012494:	79fa      	ldrb	r2, [r7, #7]
 8012496:	4936      	ldr	r1, [pc, #216]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 8012498:	4613      	mov	r3, r2
 801249a:	005b      	lsls	r3, r3, #1
 801249c:	4413      	add	r3, r2
 801249e:	00db      	lsls	r3, r3, #3
 80124a0:	440b      	add	r3, r1
 80124a2:	3312      	adds	r3, #18
 80124a4:	881b      	ldrh	r3, [r3, #0]
 80124a6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80124aa:	d919      	bls.n	80124e0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80124ac:	79fa      	ldrb	r2, [r7, #7]
 80124ae:	4613      	mov	r3, r2
 80124b0:	005b      	lsls	r3, r3, #1
 80124b2:	4413      	add	r3, r2
 80124b4:	00db      	lsls	r3, r3, #3
 80124b6:	4a2e      	ldr	r2, [pc, #184]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 80124b8:	4413      	add	r3, r2
 80124ba:	3304      	adds	r3, #4
 80124bc:	4619      	mov	r1, r3
 80124be:	68f8      	ldr	r0, [r7, #12]
 80124c0:	f000 fb4c 	bl	8012b5c <etharp_request>
 80124c4:	4603      	mov	r3, r0
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d138      	bne.n	801253c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80124ca:	79fa      	ldrb	r2, [r7, #7]
 80124cc:	4928      	ldr	r1, [pc, #160]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 80124ce:	4613      	mov	r3, r2
 80124d0:	005b      	lsls	r3, r3, #1
 80124d2:	4413      	add	r3, r2
 80124d4:	00db      	lsls	r3, r3, #3
 80124d6:	440b      	add	r3, r1
 80124d8:	3314      	adds	r3, #20
 80124da:	2203      	movs	r2, #3
 80124dc:	701a      	strb	r2, [r3, #0]
 80124de:	e02d      	b.n	801253c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80124e0:	79fa      	ldrb	r2, [r7, #7]
 80124e2:	4923      	ldr	r1, [pc, #140]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 80124e4:	4613      	mov	r3, r2
 80124e6:	005b      	lsls	r3, r3, #1
 80124e8:	4413      	add	r3, r2
 80124ea:	00db      	lsls	r3, r3, #3
 80124ec:	440b      	add	r3, r1
 80124ee:	3312      	adds	r3, #18
 80124f0:	881b      	ldrh	r3, [r3, #0]
 80124f2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80124f6:	d321      	bcc.n	801253c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80124f8:	79fa      	ldrb	r2, [r7, #7]
 80124fa:	4613      	mov	r3, r2
 80124fc:	005b      	lsls	r3, r3, #1
 80124fe:	4413      	add	r3, r2
 8012500:	00db      	lsls	r3, r3, #3
 8012502:	4a1b      	ldr	r2, [pc, #108]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 8012504:	4413      	add	r3, r2
 8012506:	1d19      	adds	r1, r3, #4
 8012508:	79fa      	ldrb	r2, [r7, #7]
 801250a:	4613      	mov	r3, r2
 801250c:	005b      	lsls	r3, r3, #1
 801250e:	4413      	add	r3, r2
 8012510:	00db      	lsls	r3, r3, #3
 8012512:	3308      	adds	r3, #8
 8012514:	4a16      	ldr	r2, [pc, #88]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 8012516:	4413      	add	r3, r2
 8012518:	3304      	adds	r3, #4
 801251a:	461a      	mov	r2, r3
 801251c:	68f8      	ldr	r0, [r7, #12]
 801251e:	f000 fafb 	bl	8012b18 <etharp_request_dst>
 8012522:	4603      	mov	r3, r0
 8012524:	2b00      	cmp	r3, #0
 8012526:	d109      	bne.n	801253c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012528:	79fa      	ldrb	r2, [r7, #7]
 801252a:	4911      	ldr	r1, [pc, #68]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 801252c:	4613      	mov	r3, r2
 801252e:	005b      	lsls	r3, r3, #1
 8012530:	4413      	add	r3, r2
 8012532:	00db      	lsls	r3, r3, #3
 8012534:	440b      	add	r3, r1
 8012536:	3314      	adds	r3, #20
 8012538:	2203      	movs	r2, #3
 801253a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8012542:	79fa      	ldrb	r2, [r7, #7]
 8012544:	4613      	mov	r3, r2
 8012546:	005b      	lsls	r3, r3, #1
 8012548:	4413      	add	r3, r2
 801254a:	00db      	lsls	r3, r3, #3
 801254c:	3308      	adds	r3, #8
 801254e:	4a08      	ldr	r2, [pc, #32]	@ (8012570 <etharp_output_to_arp_index+0x124>)
 8012550:	4413      	add	r3, r2
 8012552:	3304      	adds	r3, #4
 8012554:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012558:	9200      	str	r2, [sp, #0]
 801255a:	460a      	mov	r2, r1
 801255c:	68b9      	ldr	r1, [r7, #8]
 801255e:	68f8      	ldr	r0, [r7, #12]
 8012560:	f001 fe40 	bl	80141e4 <ethernet_output>
 8012564:	4603      	mov	r3, r0
}
 8012566:	4618      	mov	r0, r3
 8012568:	3710      	adds	r7, #16
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}
 801256e:	bf00      	nop
 8012570:	2000b268 	.word	0x2000b268
 8012574:	080175b8 	.word	0x080175b8
 8012578:	08017728 	.word	0x08017728
 801257c:	08017630 	.word	0x08017630

08012580 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b08a      	sub	sp, #40	@ 0x28
 8012584:	af02      	add	r7, sp, #8
 8012586:	60f8      	str	r0, [r7, #12]
 8012588:	60b9      	str	r1, [r7, #8]
 801258a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d106      	bne.n	80125a4 <etharp_output+0x24>
 8012596:	4b73      	ldr	r3, [pc, #460]	@ (8012764 <etharp_output+0x1e4>)
 8012598:	f240 321e 	movw	r2, #798	@ 0x31e
 801259c:	4972      	ldr	r1, [pc, #456]	@ (8012768 <etharp_output+0x1e8>)
 801259e:	4873      	ldr	r0, [pc, #460]	@ (801276c <etharp_output+0x1ec>)
 80125a0:	f001 ff68 	bl	8014474 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d106      	bne.n	80125b8 <etharp_output+0x38>
 80125aa:	4b6e      	ldr	r3, [pc, #440]	@ (8012764 <etharp_output+0x1e4>)
 80125ac:	f240 321f 	movw	r2, #799	@ 0x31f
 80125b0:	496f      	ldr	r1, [pc, #444]	@ (8012770 <etharp_output+0x1f0>)
 80125b2:	486e      	ldr	r0, [pc, #440]	@ (801276c <etharp_output+0x1ec>)
 80125b4:	f001 ff5e 	bl	8014474 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d106      	bne.n	80125cc <etharp_output+0x4c>
 80125be:	4b69      	ldr	r3, [pc, #420]	@ (8012764 <etharp_output+0x1e4>)
 80125c0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80125c4:	496b      	ldr	r1, [pc, #428]	@ (8012774 <etharp_output+0x1f4>)
 80125c6:	4869      	ldr	r0, [pc, #420]	@ (801276c <etharp_output+0x1ec>)
 80125c8:	f001 ff54 	bl	8014474 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	68f9      	ldr	r1, [r7, #12]
 80125d2:	4618      	mov	r0, r3
 80125d4:	f000 fef8 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 80125d8:	4603      	mov	r3, r0
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d002      	beq.n	80125e4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80125de:	4b66      	ldr	r3, [pc, #408]	@ (8012778 <etharp_output+0x1f8>)
 80125e0:	61fb      	str	r3, [r7, #28]
 80125e2:	e0af      	b.n	8012744 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80125ec:	2be0      	cmp	r3, #224	@ 0xe0
 80125ee:	d118      	bne.n	8012622 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80125f0:	2301      	movs	r3, #1
 80125f2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80125f4:	2300      	movs	r3, #0
 80125f6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80125f8:	235e      	movs	r3, #94	@ 0x5e
 80125fa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	3301      	adds	r3, #1
 8012600:	781b      	ldrb	r3, [r3, #0]
 8012602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012606:	b2db      	uxtb	r3, r3
 8012608:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	3302      	adds	r3, #2
 801260e:	781b      	ldrb	r3, [r3, #0]
 8012610:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	3303      	adds	r3, #3
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801261a:	f107 0310 	add.w	r3, r7, #16
 801261e:	61fb      	str	r3, [r7, #28]
 8012620:	e090      	b.n	8012744 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681a      	ldr	r2, [r3, #0]
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	3304      	adds	r3, #4
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	405a      	eors	r2, r3
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	3308      	adds	r3, #8
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	4013      	ands	r3, r2
 8012636:	2b00      	cmp	r3, #0
 8012638:	d012      	beq.n	8012660 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012640:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8012644:	4293      	cmp	r3, r2
 8012646:	d00b      	beq.n	8012660 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	330c      	adds	r3, #12
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d003      	beq.n	801265a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	330c      	adds	r3, #12
 8012656:	61bb      	str	r3, [r7, #24]
 8012658:	e002      	b.n	8012660 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801265a:	f06f 0303 	mvn.w	r3, #3
 801265e:	e07d      	b.n	801275c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012660:	4b46      	ldr	r3, [pc, #280]	@ (801277c <etharp_output+0x1fc>)
 8012662:	781b      	ldrb	r3, [r3, #0]
 8012664:	4619      	mov	r1, r3
 8012666:	4a46      	ldr	r2, [pc, #280]	@ (8012780 <etharp_output+0x200>)
 8012668:	460b      	mov	r3, r1
 801266a:	005b      	lsls	r3, r3, #1
 801266c:	440b      	add	r3, r1
 801266e:	00db      	lsls	r3, r3, #3
 8012670:	4413      	add	r3, r2
 8012672:	3314      	adds	r3, #20
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	2b01      	cmp	r3, #1
 8012678:	d925      	bls.n	80126c6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801267a:	4b40      	ldr	r3, [pc, #256]	@ (801277c <etharp_output+0x1fc>)
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	4619      	mov	r1, r3
 8012680:	4a3f      	ldr	r2, [pc, #252]	@ (8012780 <etharp_output+0x200>)
 8012682:	460b      	mov	r3, r1
 8012684:	005b      	lsls	r3, r3, #1
 8012686:	440b      	add	r3, r1
 8012688:	00db      	lsls	r3, r3, #3
 801268a:	4413      	add	r3, r2
 801268c:	3308      	adds	r3, #8
 801268e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012690:	68fa      	ldr	r2, [r7, #12]
 8012692:	429a      	cmp	r2, r3
 8012694:	d117      	bne.n	80126c6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012696:	69bb      	ldr	r3, [r7, #24]
 8012698:	681a      	ldr	r2, [r3, #0]
 801269a:	4b38      	ldr	r3, [pc, #224]	@ (801277c <etharp_output+0x1fc>)
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	4618      	mov	r0, r3
 80126a0:	4937      	ldr	r1, [pc, #220]	@ (8012780 <etharp_output+0x200>)
 80126a2:	4603      	mov	r3, r0
 80126a4:	005b      	lsls	r3, r3, #1
 80126a6:	4403      	add	r3, r0
 80126a8:	00db      	lsls	r3, r3, #3
 80126aa:	440b      	add	r3, r1
 80126ac:	3304      	adds	r3, #4
 80126ae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80126b0:	429a      	cmp	r2, r3
 80126b2:	d108      	bne.n	80126c6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80126b4:	4b31      	ldr	r3, [pc, #196]	@ (801277c <etharp_output+0x1fc>)
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	461a      	mov	r2, r3
 80126ba:	68b9      	ldr	r1, [r7, #8]
 80126bc:	68f8      	ldr	r0, [r7, #12]
 80126be:	f7ff fec5 	bl	801244c <etharp_output_to_arp_index>
 80126c2:	4603      	mov	r3, r0
 80126c4:	e04a      	b.n	801275c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80126c6:	2300      	movs	r3, #0
 80126c8:	75fb      	strb	r3, [r7, #23]
 80126ca:	e031      	b.n	8012730 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80126cc:	7dfa      	ldrb	r2, [r7, #23]
 80126ce:	492c      	ldr	r1, [pc, #176]	@ (8012780 <etharp_output+0x200>)
 80126d0:	4613      	mov	r3, r2
 80126d2:	005b      	lsls	r3, r3, #1
 80126d4:	4413      	add	r3, r2
 80126d6:	00db      	lsls	r3, r3, #3
 80126d8:	440b      	add	r3, r1
 80126da:	3314      	adds	r3, #20
 80126dc:	781b      	ldrb	r3, [r3, #0]
 80126de:	2b01      	cmp	r3, #1
 80126e0:	d923      	bls.n	801272a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80126e2:	7dfa      	ldrb	r2, [r7, #23]
 80126e4:	4926      	ldr	r1, [pc, #152]	@ (8012780 <etharp_output+0x200>)
 80126e6:	4613      	mov	r3, r2
 80126e8:	005b      	lsls	r3, r3, #1
 80126ea:	4413      	add	r3, r2
 80126ec:	00db      	lsls	r3, r3, #3
 80126ee:	440b      	add	r3, r1
 80126f0:	3308      	adds	r3, #8
 80126f2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80126f4:	68fa      	ldr	r2, [r7, #12]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d117      	bne.n	801272a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80126fa:	69bb      	ldr	r3, [r7, #24]
 80126fc:	6819      	ldr	r1, [r3, #0]
 80126fe:	7dfa      	ldrb	r2, [r7, #23]
 8012700:	481f      	ldr	r0, [pc, #124]	@ (8012780 <etharp_output+0x200>)
 8012702:	4613      	mov	r3, r2
 8012704:	005b      	lsls	r3, r3, #1
 8012706:	4413      	add	r3, r2
 8012708:	00db      	lsls	r3, r3, #3
 801270a:	4403      	add	r3, r0
 801270c:	3304      	adds	r3, #4
 801270e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012710:	4299      	cmp	r1, r3
 8012712:	d10a      	bne.n	801272a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012714:	4a19      	ldr	r2, [pc, #100]	@ (801277c <etharp_output+0x1fc>)
 8012716:	7dfb      	ldrb	r3, [r7, #23]
 8012718:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801271a:	7dfb      	ldrb	r3, [r7, #23]
 801271c:	461a      	mov	r2, r3
 801271e:	68b9      	ldr	r1, [r7, #8]
 8012720:	68f8      	ldr	r0, [r7, #12]
 8012722:	f7ff fe93 	bl	801244c <etharp_output_to_arp_index>
 8012726:	4603      	mov	r3, r0
 8012728:	e018      	b.n	801275c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801272a:	7dfb      	ldrb	r3, [r7, #23]
 801272c:	3301      	adds	r3, #1
 801272e:	75fb      	strb	r3, [r7, #23]
 8012730:	7dfb      	ldrb	r3, [r7, #23]
 8012732:	2b09      	cmp	r3, #9
 8012734:	d9ca      	bls.n	80126cc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012736:	68ba      	ldr	r2, [r7, #8]
 8012738:	69b9      	ldr	r1, [r7, #24]
 801273a:	68f8      	ldr	r0, [r7, #12]
 801273c:	f000 f822 	bl	8012784 <etharp_query>
 8012740:	4603      	mov	r3, r0
 8012742:	e00b      	b.n	801275c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801274a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801274e:	9300      	str	r3, [sp, #0]
 8012750:	69fb      	ldr	r3, [r7, #28]
 8012752:	68b9      	ldr	r1, [r7, #8]
 8012754:	68f8      	ldr	r0, [r7, #12]
 8012756:	f001 fd45 	bl	80141e4 <ethernet_output>
 801275a:	4603      	mov	r3, r0
}
 801275c:	4618      	mov	r0, r3
 801275e:	3720      	adds	r7, #32
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}
 8012764:	080175b8 	.word	0x080175b8
 8012768:	08017708 	.word	0x08017708
 801276c:	08017630 	.word	0x08017630
 8012770:	08017758 	.word	0x08017758
 8012774:	080176f8 	.word	0x080176f8
 8012778:	08017d7c 	.word	0x08017d7c
 801277c:	2000b358 	.word	0x2000b358
 8012780:	2000b268 	.word	0x2000b268

08012784 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b08c      	sub	sp, #48	@ 0x30
 8012788:	af02      	add	r7, sp, #8
 801278a:	60f8      	str	r0, [r7, #12]
 801278c:	60b9      	str	r1, [r7, #8]
 801278e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	3326      	adds	r3, #38	@ 0x26
 8012794:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012796:	23ff      	movs	r3, #255	@ 0xff
 8012798:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801279c:	2300      	movs	r3, #0
 801279e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	68f9      	ldr	r1, [r7, #12]
 80127a6:	4618      	mov	r0, r3
 80127a8:	f000 fe0e 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 80127ac:	4603      	mov	r3, r0
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d10c      	bne.n	80127cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80127ba:	2be0      	cmp	r3, #224	@ 0xe0
 80127bc:	d006      	beq.n	80127cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d003      	beq.n	80127cc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d102      	bne.n	80127d2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80127cc:	f06f 030f 	mvn.w	r3, #15
 80127d0:	e101      	b.n	80129d6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80127d2:	68fa      	ldr	r2, [r7, #12]
 80127d4:	2101      	movs	r1, #1
 80127d6:	68b8      	ldr	r0, [r7, #8]
 80127d8:	f7ff fb60 	bl	8011e9c <etharp_find_entry>
 80127dc:	4603      	mov	r3, r0
 80127de:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80127e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	da02      	bge.n	80127ee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80127e8:	8a7b      	ldrh	r3, [r7, #18]
 80127ea:	b25b      	sxtb	r3, r3
 80127ec:	e0f3      	b.n	80129d6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80127ee:	8a7b      	ldrh	r3, [r7, #18]
 80127f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80127f2:	d906      	bls.n	8012802 <etharp_query+0x7e>
 80127f4:	4b7a      	ldr	r3, [pc, #488]	@ (80129e0 <etharp_query+0x25c>)
 80127f6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80127fa:	497a      	ldr	r1, [pc, #488]	@ (80129e4 <etharp_query+0x260>)
 80127fc:	487a      	ldr	r0, [pc, #488]	@ (80129e8 <etharp_query+0x264>)
 80127fe:	f001 fe39 	bl	8014474 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012802:	8a7b      	ldrh	r3, [r7, #18]
 8012804:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012806:	7c7a      	ldrb	r2, [r7, #17]
 8012808:	4978      	ldr	r1, [pc, #480]	@ (80129ec <etharp_query+0x268>)
 801280a:	4613      	mov	r3, r2
 801280c:	005b      	lsls	r3, r3, #1
 801280e:	4413      	add	r3, r2
 8012810:	00db      	lsls	r3, r3, #3
 8012812:	440b      	add	r3, r1
 8012814:	3314      	adds	r3, #20
 8012816:	781b      	ldrb	r3, [r3, #0]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d115      	bne.n	8012848 <etharp_query+0xc4>
    is_new_entry = 1;
 801281c:	2301      	movs	r3, #1
 801281e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012820:	7c7a      	ldrb	r2, [r7, #17]
 8012822:	4972      	ldr	r1, [pc, #456]	@ (80129ec <etharp_query+0x268>)
 8012824:	4613      	mov	r3, r2
 8012826:	005b      	lsls	r3, r3, #1
 8012828:	4413      	add	r3, r2
 801282a:	00db      	lsls	r3, r3, #3
 801282c:	440b      	add	r3, r1
 801282e:	3314      	adds	r3, #20
 8012830:	2201      	movs	r2, #1
 8012832:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012834:	7c7a      	ldrb	r2, [r7, #17]
 8012836:	496d      	ldr	r1, [pc, #436]	@ (80129ec <etharp_query+0x268>)
 8012838:	4613      	mov	r3, r2
 801283a:	005b      	lsls	r3, r3, #1
 801283c:	4413      	add	r3, r2
 801283e:	00db      	lsls	r3, r3, #3
 8012840:	440b      	add	r3, r1
 8012842:	3308      	adds	r3, #8
 8012844:	68fa      	ldr	r2, [r7, #12]
 8012846:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012848:	7c7a      	ldrb	r2, [r7, #17]
 801284a:	4968      	ldr	r1, [pc, #416]	@ (80129ec <etharp_query+0x268>)
 801284c:	4613      	mov	r3, r2
 801284e:	005b      	lsls	r3, r3, #1
 8012850:	4413      	add	r3, r2
 8012852:	00db      	lsls	r3, r3, #3
 8012854:	440b      	add	r3, r1
 8012856:	3314      	adds	r3, #20
 8012858:	781b      	ldrb	r3, [r3, #0]
 801285a:	2b01      	cmp	r3, #1
 801285c:	d011      	beq.n	8012882 <etharp_query+0xfe>
 801285e:	7c7a      	ldrb	r2, [r7, #17]
 8012860:	4962      	ldr	r1, [pc, #392]	@ (80129ec <etharp_query+0x268>)
 8012862:	4613      	mov	r3, r2
 8012864:	005b      	lsls	r3, r3, #1
 8012866:	4413      	add	r3, r2
 8012868:	00db      	lsls	r3, r3, #3
 801286a:	440b      	add	r3, r1
 801286c:	3314      	adds	r3, #20
 801286e:	781b      	ldrb	r3, [r3, #0]
 8012870:	2b01      	cmp	r3, #1
 8012872:	d806      	bhi.n	8012882 <etharp_query+0xfe>
 8012874:	4b5a      	ldr	r3, [pc, #360]	@ (80129e0 <etharp_query+0x25c>)
 8012876:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801287a:	495d      	ldr	r1, [pc, #372]	@ (80129f0 <etharp_query+0x26c>)
 801287c:	485a      	ldr	r0, [pc, #360]	@ (80129e8 <etharp_query+0x264>)
 801287e:	f001 fdf9 	bl	8014474 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012882:	6a3b      	ldr	r3, [r7, #32]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d102      	bne.n	801288e <etharp_query+0x10a>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d10c      	bne.n	80128a8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801288e:	68b9      	ldr	r1, [r7, #8]
 8012890:	68f8      	ldr	r0, [r7, #12]
 8012892:	f000 f963 	bl	8012b5c <etharp_request>
 8012896:	4603      	mov	r3, r0
 8012898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d102      	bne.n	80128a8 <etharp_query+0x124>
      return result;
 80128a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80128a6:	e096      	b.n	80129d6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d106      	bne.n	80128bc <etharp_query+0x138>
 80128ae:	4b4c      	ldr	r3, [pc, #304]	@ (80129e0 <etharp_query+0x25c>)
 80128b0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80128b4:	494f      	ldr	r1, [pc, #316]	@ (80129f4 <etharp_query+0x270>)
 80128b6:	484c      	ldr	r0, [pc, #304]	@ (80129e8 <etharp_query+0x264>)
 80128b8:	f001 fddc 	bl	8014474 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80128bc:	7c7a      	ldrb	r2, [r7, #17]
 80128be:	494b      	ldr	r1, [pc, #300]	@ (80129ec <etharp_query+0x268>)
 80128c0:	4613      	mov	r3, r2
 80128c2:	005b      	lsls	r3, r3, #1
 80128c4:	4413      	add	r3, r2
 80128c6:	00db      	lsls	r3, r3, #3
 80128c8:	440b      	add	r3, r1
 80128ca:	3314      	adds	r3, #20
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	d917      	bls.n	8012902 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80128d2:	4a49      	ldr	r2, [pc, #292]	@ (80129f8 <etharp_query+0x274>)
 80128d4:	7c7b      	ldrb	r3, [r7, #17]
 80128d6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80128d8:	7c7a      	ldrb	r2, [r7, #17]
 80128da:	4613      	mov	r3, r2
 80128dc:	005b      	lsls	r3, r3, #1
 80128de:	4413      	add	r3, r2
 80128e0:	00db      	lsls	r3, r3, #3
 80128e2:	3308      	adds	r3, #8
 80128e4:	4a41      	ldr	r2, [pc, #260]	@ (80129ec <etharp_query+0x268>)
 80128e6:	4413      	add	r3, r2
 80128e8:	3304      	adds	r3, #4
 80128ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80128ee:	9200      	str	r2, [sp, #0]
 80128f0:	697a      	ldr	r2, [r7, #20]
 80128f2:	6879      	ldr	r1, [r7, #4]
 80128f4:	68f8      	ldr	r0, [r7, #12]
 80128f6:	f001 fc75 	bl	80141e4 <ethernet_output>
 80128fa:	4603      	mov	r3, r0
 80128fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012900:	e067      	b.n	80129d2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012902:	7c7a      	ldrb	r2, [r7, #17]
 8012904:	4939      	ldr	r1, [pc, #228]	@ (80129ec <etharp_query+0x268>)
 8012906:	4613      	mov	r3, r2
 8012908:	005b      	lsls	r3, r3, #1
 801290a:	4413      	add	r3, r2
 801290c:	00db      	lsls	r3, r3, #3
 801290e:	440b      	add	r3, r1
 8012910:	3314      	adds	r3, #20
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	2b01      	cmp	r3, #1
 8012916:	d15c      	bne.n	80129d2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012918:	2300      	movs	r3, #0
 801291a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012920:	e01c      	b.n	801295c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012922:	69fb      	ldr	r3, [r7, #28]
 8012924:	895a      	ldrh	r2, [r3, #10]
 8012926:	69fb      	ldr	r3, [r7, #28]
 8012928:	891b      	ldrh	r3, [r3, #8]
 801292a:	429a      	cmp	r2, r3
 801292c:	d10a      	bne.n	8012944 <etharp_query+0x1c0>
 801292e:	69fb      	ldr	r3, [r7, #28]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d006      	beq.n	8012944 <etharp_query+0x1c0>
 8012936:	4b2a      	ldr	r3, [pc, #168]	@ (80129e0 <etharp_query+0x25c>)
 8012938:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801293c:	492f      	ldr	r1, [pc, #188]	@ (80129fc <etharp_query+0x278>)
 801293e:	482a      	ldr	r0, [pc, #168]	@ (80129e8 <etharp_query+0x264>)
 8012940:	f001 fd98 	bl	8014474 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012944:	69fb      	ldr	r3, [r7, #28]
 8012946:	7b1b      	ldrb	r3, [r3, #12]
 8012948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801294c:	2b00      	cmp	r3, #0
 801294e:	d002      	beq.n	8012956 <etharp_query+0x1d2>
        copy_needed = 1;
 8012950:	2301      	movs	r3, #1
 8012952:	61bb      	str	r3, [r7, #24]
        break;
 8012954:	e005      	b.n	8012962 <etharp_query+0x1de>
      }
      p = p->next;
 8012956:	69fb      	ldr	r3, [r7, #28]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801295c:	69fb      	ldr	r3, [r7, #28]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d1df      	bne.n	8012922 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012962:	69bb      	ldr	r3, [r7, #24]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d007      	beq.n	8012978 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012968:	687a      	ldr	r2, [r7, #4]
 801296a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801296e:	200e      	movs	r0, #14
 8012970:	f7f9 fa10 	bl	800bd94 <pbuf_clone>
 8012974:	61f8      	str	r0, [r7, #28]
 8012976:	e004      	b.n	8012982 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801297c:	69f8      	ldr	r0, [r7, #28]
 801297e:	f7f8 ffab 	bl	800b8d8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012982:	69fb      	ldr	r3, [r7, #28]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d021      	beq.n	80129cc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012988:	7c7a      	ldrb	r2, [r7, #17]
 801298a:	4918      	ldr	r1, [pc, #96]	@ (80129ec <etharp_query+0x268>)
 801298c:	4613      	mov	r3, r2
 801298e:	005b      	lsls	r3, r3, #1
 8012990:	4413      	add	r3, r2
 8012992:	00db      	lsls	r3, r3, #3
 8012994:	440b      	add	r3, r1
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d00a      	beq.n	80129b2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801299c:	7c7a      	ldrb	r2, [r7, #17]
 801299e:	4913      	ldr	r1, [pc, #76]	@ (80129ec <etharp_query+0x268>)
 80129a0:	4613      	mov	r3, r2
 80129a2:	005b      	lsls	r3, r3, #1
 80129a4:	4413      	add	r3, r2
 80129a6:	00db      	lsls	r3, r3, #3
 80129a8:	440b      	add	r3, r1
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7f8 fef3 	bl	800b798 <pbuf_free>
      }
      arp_table[i].q = p;
 80129b2:	7c7a      	ldrb	r2, [r7, #17]
 80129b4:	490d      	ldr	r1, [pc, #52]	@ (80129ec <etharp_query+0x268>)
 80129b6:	4613      	mov	r3, r2
 80129b8:	005b      	lsls	r3, r3, #1
 80129ba:	4413      	add	r3, r2
 80129bc:	00db      	lsls	r3, r3, #3
 80129be:	440b      	add	r3, r1
 80129c0:	69fa      	ldr	r2, [r7, #28]
 80129c2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80129c4:	2300      	movs	r3, #0
 80129c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80129ca:	e002      	b.n	80129d2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80129cc:	23ff      	movs	r3, #255	@ 0xff
 80129ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80129d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	3728      	adds	r7, #40	@ 0x28
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}
 80129de:	bf00      	nop
 80129e0:	080175b8 	.word	0x080175b8
 80129e4:	08017764 	.word	0x08017764
 80129e8:	08017630 	.word	0x08017630
 80129ec:	2000b268 	.word	0x2000b268
 80129f0:	08017774 	.word	0x08017774
 80129f4:	08017758 	.word	0x08017758
 80129f8:	2000b358 	.word	0x2000b358
 80129fc:	0801779c 	.word	0x0801779c

08012a00 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b08a      	sub	sp, #40	@ 0x28
 8012a04:	af02      	add	r7, sp, #8
 8012a06:	60f8      	str	r0, [r7, #12]
 8012a08:	60b9      	str	r1, [r7, #8]
 8012a0a:	607a      	str	r2, [r7, #4]
 8012a0c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d106      	bne.n	8012a26 <etharp_raw+0x26>
 8012a18:	4b3a      	ldr	r3, [pc, #232]	@ (8012b04 <etharp_raw+0x104>)
 8012a1a:	f240 4257 	movw	r2, #1111	@ 0x457
 8012a1e:	493a      	ldr	r1, [pc, #232]	@ (8012b08 <etharp_raw+0x108>)
 8012a20:	483a      	ldr	r0, [pc, #232]	@ (8012b0c <etharp_raw+0x10c>)
 8012a22:	f001 fd27 	bl	8014474 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012a26:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012a2a:	211c      	movs	r1, #28
 8012a2c:	200e      	movs	r0, #14
 8012a2e:	f7f8 fbcf 	bl	800b1d0 <pbuf_alloc>
 8012a32:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012a34:	69bb      	ldr	r3, [r7, #24]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d102      	bne.n	8012a40 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8012a3e:	e05d      	b.n	8012afc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012a40:	69bb      	ldr	r3, [r7, #24]
 8012a42:	895b      	ldrh	r3, [r3, #10]
 8012a44:	2b1b      	cmp	r3, #27
 8012a46:	d806      	bhi.n	8012a56 <etharp_raw+0x56>
 8012a48:	4b2e      	ldr	r3, [pc, #184]	@ (8012b04 <etharp_raw+0x104>)
 8012a4a:	f240 4262 	movw	r2, #1122	@ 0x462
 8012a4e:	4930      	ldr	r1, [pc, #192]	@ (8012b10 <etharp_raw+0x110>)
 8012a50:	482e      	ldr	r0, [pc, #184]	@ (8012b0c <etharp_raw+0x10c>)
 8012a52:	f001 fd0f 	bl	8014474 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012a56:	69bb      	ldr	r3, [r7, #24]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012a5c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7f7 fb3c 	bl	800a0dc <lwip_htons>
 8012a64:	4603      	mov	r3, r0
 8012a66:	461a      	mov	r2, r3
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012a72:	2b06      	cmp	r3, #6
 8012a74:	d006      	beq.n	8012a84 <etharp_raw+0x84>
 8012a76:	4b23      	ldr	r3, [pc, #140]	@ (8012b04 <etharp_raw+0x104>)
 8012a78:	f240 4269 	movw	r2, #1129	@ 0x469
 8012a7c:	4925      	ldr	r1, [pc, #148]	@ (8012b14 <etharp_raw+0x114>)
 8012a7e:	4823      	ldr	r0, [pc, #140]	@ (8012b0c <etharp_raw+0x10c>)
 8012a80:	f001 fcf8 	bl	8014474 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	3308      	adds	r3, #8
 8012a88:	2206      	movs	r2, #6
 8012a8a:	6839      	ldr	r1, [r7, #0]
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f001 fdcc 	bl	801462a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	3312      	adds	r3, #18
 8012a96:	2206      	movs	r2, #6
 8012a98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f001 fdc5 	bl	801462a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	330e      	adds	r3, #14
 8012aa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012aa6:	6812      	ldr	r2, [r2, #0]
 8012aa8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	3318      	adds	r3, #24
 8012aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ab0:	6812      	ldr	r2, [r2, #0]
 8012ab2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012ab4:	697b      	ldr	r3, [r7, #20]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	701a      	strb	r2, [r3, #0]
 8012aba:	2200      	movs	r2, #0
 8012abc:	f042 0201 	orr.w	r2, r2, #1
 8012ac0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	f042 0208 	orr.w	r2, r2, #8
 8012aca:	709a      	strb	r2, [r3, #2]
 8012acc:	2200      	movs	r2, #0
 8012ace:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	2206      	movs	r2, #6
 8012ad4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	2204      	movs	r2, #4
 8012ada:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012adc:	f640 0306 	movw	r3, #2054	@ 0x806
 8012ae0:	9300      	str	r3, [sp, #0]
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	68ba      	ldr	r2, [r7, #8]
 8012ae6:	69b9      	ldr	r1, [r7, #24]
 8012ae8:	68f8      	ldr	r0, [r7, #12]
 8012aea:	f001 fb7b 	bl	80141e4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012aee:	69b8      	ldr	r0, [r7, #24]
 8012af0:	f7f8 fe52 	bl	800b798 <pbuf_free>
  p = NULL;
 8012af4:	2300      	movs	r3, #0
 8012af6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012af8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3720      	adds	r7, #32
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	080175b8 	.word	0x080175b8
 8012b08:	08017708 	.word	0x08017708
 8012b0c:	08017630 	.word	0x08017630
 8012b10:	080177b8 	.word	0x080177b8
 8012b14:	080177ec 	.word	0x080177ec

08012b18 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b088      	sub	sp, #32
 8012b1c:	af04      	add	r7, sp, #16
 8012b1e:	60f8      	str	r0, [r7, #12]
 8012b20:	60b9      	str	r1, [r7, #8]
 8012b22:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012b34:	2201      	movs	r2, #1
 8012b36:	9203      	str	r2, [sp, #12]
 8012b38:	68ba      	ldr	r2, [r7, #8]
 8012b3a:	9202      	str	r2, [sp, #8]
 8012b3c:	4a06      	ldr	r2, [pc, #24]	@ (8012b58 <etharp_request_dst+0x40>)
 8012b3e:	9201      	str	r2, [sp, #4]
 8012b40:	9300      	str	r3, [sp, #0]
 8012b42:	4603      	mov	r3, r0
 8012b44:	687a      	ldr	r2, [r7, #4]
 8012b46:	68f8      	ldr	r0, [r7, #12]
 8012b48:	f7ff ff5a 	bl	8012a00 <etharp_raw>
 8012b4c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3710      	adds	r7, #16
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}
 8012b56:	bf00      	nop
 8012b58:	08017d84 	.word	0x08017d84

08012b5c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b082      	sub	sp, #8
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
 8012b64:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012b66:	4a05      	ldr	r2, [pc, #20]	@ (8012b7c <etharp_request+0x20>)
 8012b68:	6839      	ldr	r1, [r7, #0]
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f7ff ffd4 	bl	8012b18 <etharp_request_dst>
 8012b70:	4603      	mov	r3, r0
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3708      	adds	r7, #8
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}
 8012b7a:	bf00      	nop
 8012b7c:	08017d7c 	.word	0x08017d7c

08012b80 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b08e      	sub	sp, #56	@ 0x38
 8012b84:	af04      	add	r7, sp, #16
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012b8a:	4b79      	ldr	r3, [pc, #484]	@ (8012d70 <icmp_input+0x1f0>)
 8012b8c:	689b      	ldr	r3, [r3, #8]
 8012b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	f003 030f 	and.w	r3, r3, #15
 8012b98:	b2db      	uxtb	r3, r3
 8012b9a:	009b      	lsls	r3, r3, #2
 8012b9c:	b2db      	uxtb	r3, r3
 8012b9e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8012ba0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012ba2:	2b13      	cmp	r3, #19
 8012ba4:	f240 80cd 	bls.w	8012d42 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	895b      	ldrh	r3, [r3, #10]
 8012bac:	2b03      	cmp	r3, #3
 8012bae:	f240 80ca 	bls.w	8012d46 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	781b      	ldrb	r3, [r3, #0]
 8012bb8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012bbc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	f000 80b7 	beq.w	8012d34 <icmp_input+0x1b4>
 8012bc6:	2b08      	cmp	r3, #8
 8012bc8:	f040 80b7 	bne.w	8012d3a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012bcc:	4b69      	ldr	r3, [pc, #420]	@ (8012d74 <icmp_input+0x1f4>)
 8012bce:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012bd0:	4b67      	ldr	r3, [pc, #412]	@ (8012d70 <icmp_input+0x1f0>)
 8012bd2:	695b      	ldr	r3, [r3, #20]
 8012bd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012bd8:	2be0      	cmp	r3, #224	@ 0xe0
 8012bda:	f000 80bb 	beq.w	8012d54 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012bde:	4b64      	ldr	r3, [pc, #400]	@ (8012d70 <icmp_input+0x1f0>)
 8012be0:	695b      	ldr	r3, [r3, #20]
 8012be2:	4a63      	ldr	r2, [pc, #396]	@ (8012d70 <icmp_input+0x1f0>)
 8012be4:	6812      	ldr	r2, [r2, #0]
 8012be6:	4611      	mov	r1, r2
 8012be8:	4618      	mov	r0, r3
 8012bea:	f000 fbed 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	f040 80b1 	bne.w	8012d58 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	891b      	ldrh	r3, [r3, #8]
 8012bfa:	2b07      	cmp	r3, #7
 8012bfc:	f240 80a5 	bls.w	8012d4a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012c00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012c02:	330e      	adds	r3, #14
 8012c04:	4619      	mov	r1, r3
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f7f8 fd30 	bl	800b66c <pbuf_add_header>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d04b      	beq.n	8012caa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	891a      	ldrh	r2, [r3, #8]
 8012c16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012c18:	4413      	add	r3, r2
 8012c1a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	891b      	ldrh	r3, [r3, #8]
 8012c20:	8b7a      	ldrh	r2, [r7, #26]
 8012c22:	429a      	cmp	r2, r3
 8012c24:	f0c0 809a 	bcc.w	8012d5c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012c28:	8b7b      	ldrh	r3, [r7, #26]
 8012c2a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012c2e:	4619      	mov	r1, r3
 8012c30:	200e      	movs	r0, #14
 8012c32:	f7f8 facd 	bl	800b1d0 <pbuf_alloc>
 8012c36:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012c38:	697b      	ldr	r3, [r7, #20]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	f000 8090 	beq.w	8012d60 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	895b      	ldrh	r3, [r3, #10]
 8012c44:	461a      	mov	r2, r3
 8012c46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012c48:	3308      	adds	r3, #8
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	d203      	bcs.n	8012c56 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012c4e:	6978      	ldr	r0, [r7, #20]
 8012c50:	f7f8 fda2 	bl	800b798 <pbuf_free>
          goto icmperr;
 8012c54:	e085      	b.n	8012d62 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012c5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f001 fce3 	bl	801462a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012c64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012c66:	4619      	mov	r1, r3
 8012c68:	6978      	ldr	r0, [r7, #20]
 8012c6a:	f7f8 fd0f 	bl	800b68c <pbuf_remove_header>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d009      	beq.n	8012c88 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012c74:	4b40      	ldr	r3, [pc, #256]	@ (8012d78 <icmp_input+0x1f8>)
 8012c76:	22b6      	movs	r2, #182	@ 0xb6
 8012c78:	4940      	ldr	r1, [pc, #256]	@ (8012d7c <icmp_input+0x1fc>)
 8012c7a:	4841      	ldr	r0, [pc, #260]	@ (8012d80 <icmp_input+0x200>)
 8012c7c:	f001 fbfa 	bl	8014474 <iprintf>
          pbuf_free(r);
 8012c80:	6978      	ldr	r0, [r7, #20]
 8012c82:	f7f8 fd89 	bl	800b798 <pbuf_free>
          goto icmperr;
 8012c86:	e06c      	b.n	8012d62 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012c88:	6879      	ldr	r1, [r7, #4]
 8012c8a:	6978      	ldr	r0, [r7, #20]
 8012c8c:	f7f8 feac 	bl	800b9e8 <pbuf_copy>
 8012c90:	4603      	mov	r3, r0
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d003      	beq.n	8012c9e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012c96:	6978      	ldr	r0, [r7, #20]
 8012c98:	f7f8 fd7e 	bl	800b798 <pbuf_free>
          goto icmperr;
 8012c9c:	e061      	b.n	8012d62 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f7f8 fd7a 	bl	800b798 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012ca4:	697b      	ldr	r3, [r7, #20]
 8012ca6:	607b      	str	r3, [r7, #4]
 8012ca8:	e00f      	b.n	8012cca <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012caa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012cac:	330e      	adds	r3, #14
 8012cae:	4619      	mov	r1, r3
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f7f8 fceb 	bl	800b68c <pbuf_remove_header>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d006      	beq.n	8012cca <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8012d78 <icmp_input+0x1f8>)
 8012cbe:	22c7      	movs	r2, #199	@ 0xc7
 8012cc0:	4930      	ldr	r1, [pc, #192]	@ (8012d84 <icmp_input+0x204>)
 8012cc2:	482f      	ldr	r0, [pc, #188]	@ (8012d80 <icmp_input+0x200>)
 8012cc4:	f001 fbd6 	bl	8014474 <iprintf>
          goto icmperr;
 8012cc8:	e04b      	b.n	8012d62 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	685b      	ldr	r3, [r3, #4]
 8012cce:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012cd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	6878      	ldr	r0, [r7, #4]
 8012cd6:	f7f8 fcc9 	bl	800b66c <pbuf_add_header>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d12b      	bne.n	8012d38 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	685b      	ldr	r3, [r3, #4]
 8012ce4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012ce6:	69fb      	ldr	r3, [r7, #28]
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012cee:	4b20      	ldr	r3, [pc, #128]	@ (8012d70 <icmp_input+0x1f0>)
 8012cf0:	691a      	ldr	r2, [r3, #16]
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	2200      	movs	r2, #0
 8012d00:	709a      	strb	r2, [r3, #2]
 8012d02:	2200      	movs	r2, #0
 8012d04:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	22ff      	movs	r2, #255	@ 0xff
 8012d0a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	729a      	strb	r2, [r3, #10]
 8012d12:	2200      	movs	r2, #0
 8012d14:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	9302      	str	r3, [sp, #8]
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	9301      	str	r3, [sp, #4]
 8012d1e:	2300      	movs	r3, #0
 8012d20:	9300      	str	r3, [sp, #0]
 8012d22:	23ff      	movs	r3, #255	@ 0xff
 8012d24:	2200      	movs	r2, #0
 8012d26:	69f9      	ldr	r1, [r7, #28]
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f000 fa75 	bl	8013218 <ip4_output_if>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012d32:	e001      	b.n	8012d38 <icmp_input+0x1b8>
      break;
 8012d34:	bf00      	nop
 8012d36:	e000      	b.n	8012d3a <icmp_input+0x1ba>
      break;
 8012d38:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f7f8 fd2c 	bl	800b798 <pbuf_free>
  return;
 8012d40:	e013      	b.n	8012d6a <icmp_input+0x1ea>
    goto lenerr;
 8012d42:	bf00      	nop
 8012d44:	e002      	b.n	8012d4c <icmp_input+0x1cc>
    goto lenerr;
 8012d46:	bf00      	nop
 8012d48:	e000      	b.n	8012d4c <icmp_input+0x1cc>
        goto lenerr;
 8012d4a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f7f8 fd23 	bl	800b798 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012d52:	e00a      	b.n	8012d6a <icmp_input+0x1ea>
        goto icmperr;
 8012d54:	bf00      	nop
 8012d56:	e004      	b.n	8012d62 <icmp_input+0x1e2>
        goto icmperr;
 8012d58:	bf00      	nop
 8012d5a:	e002      	b.n	8012d62 <icmp_input+0x1e2>
          goto icmperr;
 8012d5c:	bf00      	nop
 8012d5e:	e000      	b.n	8012d62 <icmp_input+0x1e2>
          goto icmperr;
 8012d60:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012d62:	6878      	ldr	r0, [r7, #4]
 8012d64:	f7f8 fd18 	bl	800b798 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012d68:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012d6a:	3728      	adds	r7, #40	@ 0x28
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}
 8012d70:	20005ad8 	.word	0x20005ad8
 8012d74:	20005aec 	.word	0x20005aec
 8012d78:	08017830 	.word	0x08017830
 8012d7c:	08017868 	.word	0x08017868
 8012d80:	080178a0 	.word	0x080178a0
 8012d84:	080178c8 	.word	0x080178c8

08012d88 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	460b      	mov	r3, r1
 8012d92:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012d94:	78fb      	ldrb	r3, [r7, #3]
 8012d96:	461a      	mov	r2, r3
 8012d98:	2103      	movs	r1, #3
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f000 f814 	bl	8012dc8 <icmp_send_response>
}
 8012da0:	bf00      	nop
 8012da2:	3708      	adds	r7, #8
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}

08012da8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	460b      	mov	r3, r1
 8012db2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012db4:	78fb      	ldrb	r3, [r7, #3]
 8012db6:	461a      	mov	r2, r3
 8012db8:	210b      	movs	r1, #11
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f000 f804 	bl	8012dc8 <icmp_send_response>
}
 8012dc0:	bf00      	nop
 8012dc2:	3708      	adds	r7, #8
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}

08012dc8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b08c      	sub	sp, #48	@ 0x30
 8012dcc:	af04      	add	r7, sp, #16
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	460b      	mov	r3, r1
 8012dd2:	70fb      	strb	r3, [r7, #3]
 8012dd4:	4613      	mov	r3, r2
 8012dd6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012dd8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012ddc:	2124      	movs	r1, #36	@ 0x24
 8012dde:	2022      	movs	r0, #34	@ 0x22
 8012de0:	f7f8 f9f6 	bl	800b1d0 <pbuf_alloc>
 8012de4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012de6:	69fb      	ldr	r3, [r7, #28]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d04c      	beq.n	8012e86 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	895b      	ldrh	r3, [r3, #10]
 8012df0:	2b23      	cmp	r3, #35	@ 0x23
 8012df2:	d806      	bhi.n	8012e02 <icmp_send_response+0x3a>
 8012df4:	4b26      	ldr	r3, [pc, #152]	@ (8012e90 <icmp_send_response+0xc8>)
 8012df6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8012dfa:	4926      	ldr	r1, [pc, #152]	@ (8012e94 <icmp_send_response+0xcc>)
 8012dfc:	4826      	ldr	r0, [pc, #152]	@ (8012e98 <icmp_send_response+0xd0>)
 8012dfe:	f001 fb39 	bl	8014474 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	685b      	ldr	r3, [r3, #4]
 8012e06:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012e08:	69fb      	ldr	r3, [r7, #28]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012e0e:	697b      	ldr	r3, [r7, #20]
 8012e10:	78fa      	ldrb	r2, [r7, #3]
 8012e12:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	78ba      	ldrb	r2, [r7, #2]
 8012e18:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	711a      	strb	r2, [r3, #4]
 8012e20:	2200      	movs	r2, #0
 8012e22:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	2200      	movs	r2, #0
 8012e28:	719a      	strb	r2, [r3, #6]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012e2e:	69fb      	ldr	r3, [r7, #28]
 8012e30:	685b      	ldr	r3, [r3, #4]
 8012e32:	f103 0008 	add.w	r0, r3, #8
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	685b      	ldr	r3, [r3, #4]
 8012e3a:	221c      	movs	r2, #28
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	f001 fbf4 	bl	801462a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	68db      	ldr	r3, [r3, #12]
 8012e46:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012e48:	f107 030c 	add.w	r3, r7, #12
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f000 f825 	bl	8012e9c <ip4_route>
 8012e52:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d011      	beq.n	8012e7e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012e5a:	697b      	ldr	r3, [r7, #20]
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	709a      	strb	r2, [r3, #2]
 8012e60:	2200      	movs	r2, #0
 8012e62:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012e64:	f107 020c 	add.w	r2, r7, #12
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	9302      	str	r3, [sp, #8]
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	9301      	str	r3, [sp, #4]
 8012e70:	2300      	movs	r3, #0
 8012e72:	9300      	str	r3, [sp, #0]
 8012e74:	23ff      	movs	r3, #255	@ 0xff
 8012e76:	2100      	movs	r1, #0
 8012e78:	69f8      	ldr	r0, [r7, #28]
 8012e7a:	f000 f9cd 	bl	8013218 <ip4_output_if>
  }
  pbuf_free(q);
 8012e7e:	69f8      	ldr	r0, [r7, #28]
 8012e80:	f7f8 fc8a 	bl	800b798 <pbuf_free>
 8012e84:	e000      	b.n	8012e88 <icmp_send_response+0xc0>
    return;
 8012e86:	bf00      	nop
}
 8012e88:	3720      	adds	r7, #32
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
 8012e8e:	bf00      	nop
 8012e90:	08017830 	.word	0x08017830
 8012e94:	080178fc 	.word	0x080178fc
 8012e98:	080178a0 	.word	0x080178a0

08012e9c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b085      	sub	sp, #20
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012ea4:	4b33      	ldr	r3, [pc, #204]	@ (8012f74 <ip4_route+0xd8>)
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	60fb      	str	r3, [r7, #12]
 8012eaa:	e036      	b.n	8012f1a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012eb2:	f003 0301 	and.w	r3, r3, #1
 8012eb6:	b2db      	uxtb	r3, r3
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d02b      	beq.n	8012f14 <ip4_route+0x78>
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012ec2:	089b      	lsrs	r3, r3, #2
 8012ec4:	f003 0301 	and.w	r3, r3, #1
 8012ec8:	b2db      	uxtb	r3, r3
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d022      	beq.n	8012f14 <ip4_route+0x78>
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	3304      	adds	r3, #4
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d01d      	beq.n	8012f14 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681a      	ldr	r2, [r3, #0]
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	3304      	adds	r3, #4
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	405a      	eors	r2, r3
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	3308      	adds	r3, #8
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	4013      	ands	r3, r2
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d101      	bne.n	8012ef4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	e038      	b.n	8012f66 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012efa:	f003 0302 	and.w	r3, r3, #2
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d108      	bne.n	8012f14 <ip4_route+0x78>
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681a      	ldr	r2, [r3, #0]
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	330c      	adds	r3, #12
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	d101      	bne.n	8012f14 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	e028      	b.n	8012f66 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	60fb      	str	r3, [r7, #12]
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d1c5      	bne.n	8012eac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012f20:	4b15      	ldr	r3, [pc, #84]	@ (8012f78 <ip4_route+0xdc>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d01a      	beq.n	8012f5e <ip4_route+0xc2>
 8012f28:	4b13      	ldr	r3, [pc, #76]	@ (8012f78 <ip4_route+0xdc>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012f30:	f003 0301 	and.w	r3, r3, #1
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d012      	beq.n	8012f5e <ip4_route+0xc2>
 8012f38:	4b0f      	ldr	r3, [pc, #60]	@ (8012f78 <ip4_route+0xdc>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012f40:	f003 0304 	and.w	r3, r3, #4
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d00a      	beq.n	8012f5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012f48:	4b0b      	ldr	r3, [pc, #44]	@ (8012f78 <ip4_route+0xdc>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	3304      	adds	r3, #4
 8012f4e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d004      	beq.n	8012f5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	b2db      	uxtb	r3, r3
 8012f5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8012f5c:	d101      	bne.n	8012f62 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	e001      	b.n	8012f66 <ip4_route+0xca>
  }

  return netif_default;
 8012f62:	4b05      	ldr	r3, [pc, #20]	@ (8012f78 <ip4_route+0xdc>)
 8012f64:	681b      	ldr	r3, [r3, #0]
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3714      	adds	r7, #20
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f70:	4770      	bx	lr
 8012f72:	bf00      	nop
 8012f74:	2000b1fc 	.word	0x2000b1fc
 8012f78:	2000b200 	.word	0x2000b200

08012f7c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b082      	sub	sp, #8
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012f8a:	f003 0301 	and.w	r3, r3, #1
 8012f8e:	b2db      	uxtb	r3, r3
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d016      	beq.n	8012fc2 <ip4_input_accept+0x46>
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	3304      	adds	r3, #4
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d011      	beq.n	8012fc2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8012fcc <ip4_input_accept+0x50>)
 8012fa0:	695a      	ldr	r2, [r3, #20]
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	3304      	adds	r3, #4
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d008      	beq.n	8012fbe <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012fac:	4b07      	ldr	r3, [pc, #28]	@ (8012fcc <ip4_input_accept+0x50>)
 8012fae:	695b      	ldr	r3, [r3, #20]
 8012fb0:	6879      	ldr	r1, [r7, #4]
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f000 fa08 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 8012fb8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d001      	beq.n	8012fc2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012fbe:	2301      	movs	r3, #1
 8012fc0:	e000      	b.n	8012fc4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012fc2:	2300      	movs	r3, #0
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	3708      	adds	r7, #8
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}
 8012fcc:	20005ad8 	.word	0x20005ad8

08012fd0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b086      	sub	sp, #24
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
 8012fd8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	685b      	ldr	r3, [r3, #4]
 8012fde:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	781b      	ldrb	r3, [r3, #0]
 8012fe4:	091b      	lsrs	r3, r3, #4
 8012fe6:	b2db      	uxtb	r3, r3
 8012fe8:	2b04      	cmp	r3, #4
 8012fea:	d004      	beq.n	8012ff6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	f7f8 fbd3 	bl	800b798 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	e107      	b.n	8013206 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	781b      	ldrb	r3, [r3, #0]
 8012ffa:	f003 030f 	and.w	r3, r3, #15
 8012ffe:	b2db      	uxtb	r3, r3
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	b2db      	uxtb	r3, r3
 8013004:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	885b      	ldrh	r3, [r3, #2]
 801300a:	b29b      	uxth	r3, r3
 801300c:	4618      	mov	r0, r3
 801300e:	f7f7 f865 	bl	800a0dc <lwip_htons>
 8013012:	4603      	mov	r3, r0
 8013014:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	891b      	ldrh	r3, [r3, #8]
 801301a:	89ba      	ldrh	r2, [r7, #12]
 801301c:	429a      	cmp	r2, r3
 801301e:	d204      	bcs.n	801302a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013020:	89bb      	ldrh	r3, [r7, #12]
 8013022:	4619      	mov	r1, r3
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f7f8 fa31 	bl	800b48c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	895b      	ldrh	r3, [r3, #10]
 801302e:	89fa      	ldrh	r2, [r7, #14]
 8013030:	429a      	cmp	r2, r3
 8013032:	d807      	bhi.n	8013044 <ip4_input+0x74>
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	891b      	ldrh	r3, [r3, #8]
 8013038:	89ba      	ldrh	r2, [r7, #12]
 801303a:	429a      	cmp	r2, r3
 801303c:	d802      	bhi.n	8013044 <ip4_input+0x74>
 801303e:	89fb      	ldrh	r3, [r7, #14]
 8013040:	2b13      	cmp	r3, #19
 8013042:	d804      	bhi.n	801304e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f7f8 fba7 	bl	800b798 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801304a:	2300      	movs	r3, #0
 801304c:	e0db      	b.n	8013206 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	691b      	ldr	r3, [r3, #16]
 8013052:	4a6f      	ldr	r2, [pc, #444]	@ (8013210 <ip4_input+0x240>)
 8013054:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	68db      	ldr	r3, [r3, #12]
 801305a:	4a6d      	ldr	r2, [pc, #436]	@ (8013210 <ip4_input+0x240>)
 801305c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801305e:	4b6c      	ldr	r3, [pc, #432]	@ (8013210 <ip4_input+0x240>)
 8013060:	695b      	ldr	r3, [r3, #20]
 8013062:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013066:	2be0      	cmp	r3, #224	@ 0xe0
 8013068:	d112      	bne.n	8013090 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013070:	f003 0301 	and.w	r3, r3, #1
 8013074:	b2db      	uxtb	r3, r3
 8013076:	2b00      	cmp	r3, #0
 8013078:	d007      	beq.n	801308a <ip4_input+0xba>
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	3304      	adds	r3, #4
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d002      	beq.n	801308a <ip4_input+0xba>
      netif = inp;
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	613b      	str	r3, [r7, #16]
 8013088:	e02a      	b.n	80130e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801308a:	2300      	movs	r3, #0
 801308c:	613b      	str	r3, [r7, #16]
 801308e:	e027      	b.n	80130e0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013090:	6838      	ldr	r0, [r7, #0]
 8013092:	f7ff ff73 	bl	8012f7c <ip4_input_accept>
 8013096:	4603      	mov	r3, r0
 8013098:	2b00      	cmp	r3, #0
 801309a:	d002      	beq.n	80130a2 <ip4_input+0xd2>
      netif = inp;
 801309c:	683b      	ldr	r3, [r7, #0]
 801309e:	613b      	str	r3, [r7, #16]
 80130a0:	e01e      	b.n	80130e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 80130a2:	2300      	movs	r3, #0
 80130a4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80130a6:	4b5a      	ldr	r3, [pc, #360]	@ (8013210 <ip4_input+0x240>)
 80130a8:	695b      	ldr	r3, [r3, #20]
 80130aa:	b2db      	uxtb	r3, r3
 80130ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80130ae:	d017      	beq.n	80130e0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80130b0:	4b58      	ldr	r3, [pc, #352]	@ (8013214 <ip4_input+0x244>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	613b      	str	r3, [r7, #16]
 80130b6:	e00e      	b.n	80130d6 <ip4_input+0x106>
          if (netif == inp) {
 80130b8:	693a      	ldr	r2, [r7, #16]
 80130ba:	683b      	ldr	r3, [r7, #0]
 80130bc:	429a      	cmp	r2, r3
 80130be:	d006      	beq.n	80130ce <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80130c0:	6938      	ldr	r0, [r7, #16]
 80130c2:	f7ff ff5b 	bl	8012f7c <ip4_input_accept>
 80130c6:	4603      	mov	r3, r0
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d108      	bne.n	80130de <ip4_input+0x10e>
 80130cc:	e000      	b.n	80130d0 <ip4_input+0x100>
            continue;
 80130ce:	bf00      	nop
        NETIF_FOREACH(netif) {
 80130d0:	693b      	ldr	r3, [r7, #16]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	613b      	str	r3, [r7, #16]
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d1ed      	bne.n	80130b8 <ip4_input+0xe8>
 80130dc:	e000      	b.n	80130e0 <ip4_input+0x110>
            break;
 80130de:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80130e0:	4b4b      	ldr	r3, [pc, #300]	@ (8013210 <ip4_input+0x240>)
 80130e2:	691b      	ldr	r3, [r3, #16]
 80130e4:	6839      	ldr	r1, [r7, #0]
 80130e6:	4618      	mov	r0, r3
 80130e8:	f000 f96e 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 80130ec:	4603      	mov	r3, r0
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d105      	bne.n	80130fe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80130f2:	4b47      	ldr	r3, [pc, #284]	@ (8013210 <ip4_input+0x240>)
 80130f4:	691b      	ldr	r3, [r3, #16]
 80130f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80130fa:	2be0      	cmp	r3, #224	@ 0xe0
 80130fc:	d104      	bne.n	8013108 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f7f8 fb4a 	bl	800b798 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013104:	2300      	movs	r3, #0
 8013106:	e07e      	b.n	8013206 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013108:	693b      	ldr	r3, [r7, #16]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d104      	bne.n	8013118 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f7f8 fb42 	bl	800b798 <pbuf_free>
    return ERR_OK;
 8013114:	2300      	movs	r3, #0
 8013116:	e076      	b.n	8013206 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	88db      	ldrh	r3, [r3, #6]
 801311c:	b29b      	uxth	r3, r3
 801311e:	461a      	mov	r2, r3
 8013120:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8013124:	4013      	ands	r3, r2
 8013126:	2b00      	cmp	r3, #0
 8013128:	d00b      	beq.n	8013142 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801312a:	6878      	ldr	r0, [r7, #4]
 801312c:	f000 fc92 	bl	8013a54 <ip4_reass>
 8013130:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d101      	bne.n	801313c <ip4_input+0x16c>
      return ERR_OK;
 8013138:	2300      	movs	r3, #0
 801313a:	e064      	b.n	8013206 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	685b      	ldr	r3, [r3, #4]
 8013140:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013142:	4a33      	ldr	r2, [pc, #204]	@ (8013210 <ip4_input+0x240>)
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013148:	4a31      	ldr	r2, [pc, #196]	@ (8013210 <ip4_input+0x240>)
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801314e:	4a30      	ldr	r2, [pc, #192]	@ (8013210 <ip4_input+0x240>)
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	f003 030f 	and.w	r3, r3, #15
 801315c:	b2db      	uxtb	r3, r3
 801315e:	009b      	lsls	r3, r3, #2
 8013160:	b2db      	uxtb	r3, r3
 8013162:	461a      	mov	r2, r3
 8013164:	4b2a      	ldr	r3, [pc, #168]	@ (8013210 <ip4_input+0x240>)
 8013166:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013168:	89fb      	ldrh	r3, [r7, #14]
 801316a:	4619      	mov	r1, r3
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f7f8 fa8d 	bl	800b68c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013172:	697b      	ldr	r3, [r7, #20]
 8013174:	7a5b      	ldrb	r3, [r3, #9]
 8013176:	2b11      	cmp	r3, #17
 8013178:	d006      	beq.n	8013188 <ip4_input+0x1b8>
 801317a:	2b11      	cmp	r3, #17
 801317c:	dc13      	bgt.n	80131a6 <ip4_input+0x1d6>
 801317e:	2b01      	cmp	r3, #1
 8013180:	d00c      	beq.n	801319c <ip4_input+0x1cc>
 8013182:	2b06      	cmp	r3, #6
 8013184:	d005      	beq.n	8013192 <ip4_input+0x1c2>
 8013186:	e00e      	b.n	80131a6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013188:	6839      	ldr	r1, [r7, #0]
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f7fe f984 	bl	8011498 <udp_input>
        break;
 8013190:	e026      	b.n	80131e0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013192:	6839      	ldr	r1, [r7, #0]
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f7fa f9cb 	bl	800d530 <tcp_input>
        break;
 801319a:	e021      	b.n	80131e0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801319c:	6839      	ldr	r1, [r7, #0]
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f7ff fcee 	bl	8012b80 <icmp_input>
        break;
 80131a4:	e01c      	b.n	80131e0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80131a6:	4b1a      	ldr	r3, [pc, #104]	@ (8013210 <ip4_input+0x240>)
 80131a8:	695b      	ldr	r3, [r3, #20]
 80131aa:	6939      	ldr	r1, [r7, #16]
 80131ac:	4618      	mov	r0, r3
 80131ae:	f000 f90b 	bl	80133c8 <ip4_addr_isbroadcast_u32>
 80131b2:	4603      	mov	r3, r0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d10f      	bne.n	80131d8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80131b8:	4b15      	ldr	r3, [pc, #84]	@ (8013210 <ip4_input+0x240>)
 80131ba:	695b      	ldr	r3, [r3, #20]
 80131bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80131c0:	2be0      	cmp	r3, #224	@ 0xe0
 80131c2:	d009      	beq.n	80131d8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80131c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80131c8:	4619      	mov	r1, r3
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f7f8 fad1 	bl	800b772 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80131d0:	2102      	movs	r1, #2
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f7ff fdd8 	bl	8012d88 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f7f8 fadd 	bl	800b798 <pbuf_free>
        break;
 80131de:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80131e0:	4b0b      	ldr	r3, [pc, #44]	@ (8013210 <ip4_input+0x240>)
 80131e2:	2200      	movs	r2, #0
 80131e4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80131e6:	4b0a      	ldr	r3, [pc, #40]	@ (8013210 <ip4_input+0x240>)
 80131e8:	2200      	movs	r2, #0
 80131ea:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80131ec:	4b08      	ldr	r3, [pc, #32]	@ (8013210 <ip4_input+0x240>)
 80131ee:	2200      	movs	r2, #0
 80131f0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80131f2:	4b07      	ldr	r3, [pc, #28]	@ (8013210 <ip4_input+0x240>)
 80131f4:	2200      	movs	r2, #0
 80131f6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80131f8:	4b05      	ldr	r3, [pc, #20]	@ (8013210 <ip4_input+0x240>)
 80131fa:	2200      	movs	r2, #0
 80131fc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80131fe:	4b04      	ldr	r3, [pc, #16]	@ (8013210 <ip4_input+0x240>)
 8013200:	2200      	movs	r2, #0
 8013202:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013204:	2300      	movs	r3, #0
}
 8013206:	4618      	mov	r0, r3
 8013208:	3718      	adds	r7, #24
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}
 801320e:	bf00      	nop
 8013210:	20005ad8 	.word	0x20005ad8
 8013214:	2000b1fc 	.word	0x2000b1fc

08013218 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b08a      	sub	sp, #40	@ 0x28
 801321c:	af04      	add	r7, sp, #16
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	60b9      	str	r1, [r7, #8]
 8013222:	607a      	str	r2, [r7, #4]
 8013224:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d009      	beq.n	8013244 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d003      	beq.n	801323e <ip4_output_if+0x26>
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d102      	bne.n	8013244 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801323e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013240:	3304      	adds	r3, #4
 8013242:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013244:	78fa      	ldrb	r2, [r7, #3]
 8013246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013248:	9302      	str	r3, [sp, #8]
 801324a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801324e:	9301      	str	r3, [sp, #4]
 8013250:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013254:	9300      	str	r3, [sp, #0]
 8013256:	4613      	mov	r3, r2
 8013258:	687a      	ldr	r2, [r7, #4]
 801325a:	6979      	ldr	r1, [r7, #20]
 801325c:	68f8      	ldr	r0, [r7, #12]
 801325e:	f000 f805 	bl	801326c <ip4_output_if_src>
 8013262:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013264:	4618      	mov	r0, r3
 8013266:	3718      	adds	r7, #24
 8013268:	46bd      	mov	sp, r7
 801326a:	bd80      	pop	{r7, pc}

0801326c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b088      	sub	sp, #32
 8013270:	af00      	add	r7, sp, #0
 8013272:	60f8      	str	r0, [r7, #12]
 8013274:	60b9      	str	r1, [r7, #8]
 8013276:	607a      	str	r2, [r7, #4]
 8013278:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	7b9b      	ldrb	r3, [r3, #14]
 801327e:	2b01      	cmp	r3, #1
 8013280:	d006      	beq.n	8013290 <ip4_output_if_src+0x24>
 8013282:	4b4b      	ldr	r3, [pc, #300]	@ (80133b0 <ip4_output_if_src+0x144>)
 8013284:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8013288:	494a      	ldr	r1, [pc, #296]	@ (80133b4 <ip4_output_if_src+0x148>)
 801328a:	484b      	ldr	r0, [pc, #300]	@ (80133b8 <ip4_output_if_src+0x14c>)
 801328c:	f001 f8f2 	bl	8014474 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d060      	beq.n	8013358 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013296:	2314      	movs	r3, #20
 8013298:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801329a:	2114      	movs	r1, #20
 801329c:	68f8      	ldr	r0, [r7, #12]
 801329e:	f7f8 f9e5 	bl	800b66c <pbuf_add_header>
 80132a2:	4603      	mov	r3, r0
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d002      	beq.n	80132ae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80132a8:	f06f 0301 	mvn.w	r3, #1
 80132ac:	e07c      	b.n	80133a8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	685b      	ldr	r3, [r3, #4]
 80132b2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	895b      	ldrh	r3, [r3, #10]
 80132b8:	2b13      	cmp	r3, #19
 80132ba:	d806      	bhi.n	80132ca <ip4_output_if_src+0x5e>
 80132bc:	4b3c      	ldr	r3, [pc, #240]	@ (80133b0 <ip4_output_if_src+0x144>)
 80132be:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80132c2:	493e      	ldr	r1, [pc, #248]	@ (80133bc <ip4_output_if_src+0x150>)
 80132c4:	483c      	ldr	r0, [pc, #240]	@ (80133b8 <ip4_output_if_src+0x14c>)
 80132c6:	f001 f8d5 	bl	8014474 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80132ca:	69fb      	ldr	r3, [r7, #28]
 80132cc:	78fa      	ldrb	r2, [r7, #3]
 80132ce:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80132d0:	69fb      	ldr	r3, [r7, #28]
 80132d2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80132d6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	681a      	ldr	r2, [r3, #0]
 80132dc:	69fb      	ldr	r3, [r7, #28]
 80132de:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80132e0:	8b7b      	ldrh	r3, [r7, #26]
 80132e2:	089b      	lsrs	r3, r3, #2
 80132e4:	b29b      	uxth	r3, r3
 80132e6:	b2db      	uxtb	r3, r3
 80132e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132ec:	b2da      	uxtb	r2, r3
 80132ee:	69fb      	ldr	r3, [r7, #28]
 80132f0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80132f2:	69fb      	ldr	r3, [r7, #28]
 80132f4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80132f8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	891b      	ldrh	r3, [r3, #8]
 80132fe:	4618      	mov	r0, r3
 8013300:	f7f6 feec 	bl	800a0dc <lwip_htons>
 8013304:	4603      	mov	r3, r0
 8013306:	461a      	mov	r2, r3
 8013308:	69fb      	ldr	r3, [r7, #28]
 801330a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801330c:	69fb      	ldr	r3, [r7, #28]
 801330e:	2200      	movs	r2, #0
 8013310:	719a      	strb	r2, [r3, #6]
 8013312:	2200      	movs	r2, #0
 8013314:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013316:	4b2a      	ldr	r3, [pc, #168]	@ (80133c0 <ip4_output_if_src+0x154>)
 8013318:	881b      	ldrh	r3, [r3, #0]
 801331a:	4618      	mov	r0, r3
 801331c:	f7f6 fede 	bl	800a0dc <lwip_htons>
 8013320:	4603      	mov	r3, r0
 8013322:	461a      	mov	r2, r3
 8013324:	69fb      	ldr	r3, [r7, #28]
 8013326:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013328:	4b25      	ldr	r3, [pc, #148]	@ (80133c0 <ip4_output_if_src+0x154>)
 801332a:	881b      	ldrh	r3, [r3, #0]
 801332c:	3301      	adds	r3, #1
 801332e:	b29a      	uxth	r2, r3
 8013330:	4b23      	ldr	r3, [pc, #140]	@ (80133c0 <ip4_output_if_src+0x154>)
 8013332:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d104      	bne.n	8013344 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801333a:	4b22      	ldr	r3, [pc, #136]	@ (80133c4 <ip4_output_if_src+0x158>)
 801333c:	681a      	ldr	r2, [r3, #0]
 801333e:	69fb      	ldr	r3, [r7, #28]
 8013340:	60da      	str	r2, [r3, #12]
 8013342:	e003      	b.n	801334c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	681a      	ldr	r2, [r3, #0]
 8013348:	69fb      	ldr	r3, [r7, #28]
 801334a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801334c:	69fb      	ldr	r3, [r7, #28]
 801334e:	2200      	movs	r2, #0
 8013350:	729a      	strb	r2, [r3, #10]
 8013352:	2200      	movs	r2, #0
 8013354:	72da      	strb	r2, [r3, #11]
 8013356:	e00f      	b.n	8013378 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	895b      	ldrh	r3, [r3, #10]
 801335c:	2b13      	cmp	r3, #19
 801335e:	d802      	bhi.n	8013366 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013360:	f06f 0301 	mvn.w	r3, #1
 8013364:	e020      	b.n	80133a8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801336c:	69fb      	ldr	r3, [r7, #28]
 801336e:	691b      	ldr	r3, [r3, #16]
 8013370:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013372:	f107 0314 	add.w	r3, r7, #20
 8013376:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801337a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801337c:	2b00      	cmp	r3, #0
 801337e:	d00c      	beq.n	801339a <ip4_output_if_src+0x12e>
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	891a      	ldrh	r2, [r3, #8]
 8013384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013386:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013388:	429a      	cmp	r2, r3
 801338a:	d906      	bls.n	801339a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801338c:	687a      	ldr	r2, [r7, #4]
 801338e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013390:	68f8      	ldr	r0, [r7, #12]
 8013392:	f000 fd53 	bl	8013e3c <ip4_frag>
 8013396:	4603      	mov	r3, r0
 8013398:	e006      	b.n	80133a8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801339a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801339c:	695b      	ldr	r3, [r3, #20]
 801339e:	687a      	ldr	r2, [r7, #4]
 80133a0:	68f9      	ldr	r1, [r7, #12]
 80133a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80133a4:	4798      	blx	r3
 80133a6:	4603      	mov	r3, r0
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	3720      	adds	r7, #32
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}
 80133b0:	08017928 	.word	0x08017928
 80133b4:	0801795c 	.word	0x0801795c
 80133b8:	08017968 	.word	0x08017968
 80133bc:	08017990 	.word	0x08017990
 80133c0:	2000b35a 	.word	0x2000b35a
 80133c4:	08017d78 	.word	0x08017d78

080133c8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80133c8:	b480      	push	{r7}
 80133ca:	b085      	sub	sp, #20
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133dc:	d002      	beq.n	80133e4 <ip4_addr_isbroadcast_u32+0x1c>
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d101      	bne.n	80133e8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80133e4:	2301      	movs	r3, #1
 80133e6:	e02a      	b.n	801343e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80133ee:	f003 0302 	and.w	r3, r3, #2
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d101      	bne.n	80133fa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80133f6:	2300      	movs	r3, #0
 80133f8:	e021      	b.n	801343e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	3304      	adds	r3, #4
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	687a      	ldr	r2, [r7, #4]
 8013402:	429a      	cmp	r2, r3
 8013404:	d101      	bne.n	801340a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013406:	2300      	movs	r3, #0
 8013408:	e019      	b.n	801343e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801340a:	68fa      	ldr	r2, [r7, #12]
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	3304      	adds	r3, #4
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	405a      	eors	r2, r3
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	3308      	adds	r3, #8
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	4013      	ands	r3, r2
 801341c:	2b00      	cmp	r3, #0
 801341e:	d10d      	bne.n	801343c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	3308      	adds	r3, #8
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	43da      	mvns	r2, r3
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	3308      	adds	r3, #8
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013434:	429a      	cmp	r2, r3
 8013436:	d101      	bne.n	801343c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013438:	2301      	movs	r3, #1
 801343a:	e000      	b.n	801343e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801343c:	2300      	movs	r3, #0
  }
}
 801343e:	4618      	mov	r0, r3
 8013440:	3714      	adds	r7, #20
 8013442:	46bd      	mov	sp, r7
 8013444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013448:	4770      	bx	lr
	...

0801344c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b084      	sub	sp, #16
 8013450:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013452:	2300      	movs	r3, #0
 8013454:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013456:	4b12      	ldr	r3, [pc, #72]	@ (80134a0 <ip_reass_tmr+0x54>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801345c:	e018      	b.n	8013490 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	7fdb      	ldrb	r3, [r3, #31]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d00b      	beq.n	801347e <ip_reass_tmr+0x32>
      r->timer--;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	7fdb      	ldrb	r3, [r3, #31]
 801346a:	3b01      	subs	r3, #1
 801346c:	b2da      	uxtb	r2, r3
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	60fb      	str	r3, [r7, #12]
 801347c:	e008      	b.n	8013490 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013488:	68b9      	ldr	r1, [r7, #8]
 801348a:	6878      	ldr	r0, [r7, #4]
 801348c:	f000 f80a 	bl	80134a4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d1e3      	bne.n	801345e <ip_reass_tmr+0x12>
    }
  }
}
 8013496:	bf00      	nop
 8013498:	bf00      	nop
 801349a:	3710      	adds	r7, #16
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}
 80134a0:	2000b35c 	.word	0x2000b35c

080134a4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b088      	sub	sp, #32
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
 80134ac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80134ae:	2300      	movs	r3, #0
 80134b0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80134b2:	683a      	ldr	r2, [r7, #0]
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d105      	bne.n	80134c6 <ip_reass_free_complete_datagram+0x22>
 80134ba:	4b45      	ldr	r3, [pc, #276]	@ (80135d0 <ip_reass_free_complete_datagram+0x12c>)
 80134bc:	22ab      	movs	r2, #171	@ 0xab
 80134be:	4945      	ldr	r1, [pc, #276]	@ (80135d4 <ip_reass_free_complete_datagram+0x130>)
 80134c0:	4845      	ldr	r0, [pc, #276]	@ (80135d8 <ip_reass_free_complete_datagram+0x134>)
 80134c2:	f000 ffd7 	bl	8014474 <iprintf>
  if (prev != NULL) {
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d00a      	beq.n	80134e2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	687a      	ldr	r2, [r7, #4]
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d005      	beq.n	80134e2 <ip_reass_free_complete_datagram+0x3e>
 80134d6:	4b3e      	ldr	r3, [pc, #248]	@ (80135d0 <ip_reass_free_complete_datagram+0x12c>)
 80134d8:	22ad      	movs	r2, #173	@ 0xad
 80134da:	4940      	ldr	r1, [pc, #256]	@ (80135dc <ip_reass_free_complete_datagram+0x138>)
 80134dc:	483e      	ldr	r0, [pc, #248]	@ (80135d8 <ip_reass_free_complete_datagram+0x134>)
 80134de:	f000 ffc9 	bl	8014474 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	685b      	ldr	r3, [r3, #4]
 80134e8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80134ea:	697b      	ldr	r3, [r7, #20]
 80134ec:	889b      	ldrh	r3, [r3, #4]
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d12a      	bne.n	801354a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	685b      	ldr	r3, [r3, #4]
 80134f8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	681a      	ldr	r2, [r3, #0]
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013502:	69bb      	ldr	r3, [r7, #24]
 8013504:	6858      	ldr	r0, [r3, #4]
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	3308      	adds	r3, #8
 801350a:	2214      	movs	r2, #20
 801350c:	4619      	mov	r1, r3
 801350e:	f001 f88c 	bl	801462a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013512:	2101      	movs	r1, #1
 8013514:	69b8      	ldr	r0, [r7, #24]
 8013516:	f7ff fc47 	bl	8012da8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801351a:	69b8      	ldr	r0, [r7, #24]
 801351c:	f7f8 f9c4 	bl	800b8a8 <pbuf_clen>
 8013520:	4603      	mov	r3, r0
 8013522:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013524:	8bfa      	ldrh	r2, [r7, #30]
 8013526:	8a7b      	ldrh	r3, [r7, #18]
 8013528:	4413      	add	r3, r2
 801352a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801352e:	db05      	blt.n	801353c <ip_reass_free_complete_datagram+0x98>
 8013530:	4b27      	ldr	r3, [pc, #156]	@ (80135d0 <ip_reass_free_complete_datagram+0x12c>)
 8013532:	22bc      	movs	r2, #188	@ 0xbc
 8013534:	492a      	ldr	r1, [pc, #168]	@ (80135e0 <ip_reass_free_complete_datagram+0x13c>)
 8013536:	4828      	ldr	r0, [pc, #160]	@ (80135d8 <ip_reass_free_complete_datagram+0x134>)
 8013538:	f000 ff9c 	bl	8014474 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801353c:	8bfa      	ldrh	r2, [r7, #30]
 801353e:	8a7b      	ldrh	r3, [r7, #18]
 8013540:	4413      	add	r3, r2
 8013542:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013544:	69b8      	ldr	r0, [r7, #24]
 8013546:	f7f8 f927 	bl	800b798 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	685b      	ldr	r3, [r3, #4]
 801354e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013550:	e01f      	b.n	8013592 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013552:	69bb      	ldr	r3, [r7, #24]
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013558:	69bb      	ldr	r3, [r7, #24]
 801355a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801355c:	697b      	ldr	r3, [r7, #20]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013562:	68f8      	ldr	r0, [r7, #12]
 8013564:	f7f8 f9a0 	bl	800b8a8 <pbuf_clen>
 8013568:	4603      	mov	r3, r0
 801356a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801356c:	8bfa      	ldrh	r2, [r7, #30]
 801356e:	8a7b      	ldrh	r3, [r7, #18]
 8013570:	4413      	add	r3, r2
 8013572:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013576:	db05      	blt.n	8013584 <ip_reass_free_complete_datagram+0xe0>
 8013578:	4b15      	ldr	r3, [pc, #84]	@ (80135d0 <ip_reass_free_complete_datagram+0x12c>)
 801357a:	22cc      	movs	r2, #204	@ 0xcc
 801357c:	4918      	ldr	r1, [pc, #96]	@ (80135e0 <ip_reass_free_complete_datagram+0x13c>)
 801357e:	4816      	ldr	r0, [pc, #88]	@ (80135d8 <ip_reass_free_complete_datagram+0x134>)
 8013580:	f000 ff78 	bl	8014474 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013584:	8bfa      	ldrh	r2, [r7, #30]
 8013586:	8a7b      	ldrh	r3, [r7, #18]
 8013588:	4413      	add	r3, r2
 801358a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801358c:	68f8      	ldr	r0, [r7, #12]
 801358e:	f7f8 f903 	bl	800b798 <pbuf_free>
  while (p != NULL) {
 8013592:	69bb      	ldr	r3, [r7, #24]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d1dc      	bne.n	8013552 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013598:	6839      	ldr	r1, [r7, #0]
 801359a:	6878      	ldr	r0, [r7, #4]
 801359c:	f000 f8c2 	bl	8013724 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80135a0:	4b10      	ldr	r3, [pc, #64]	@ (80135e4 <ip_reass_free_complete_datagram+0x140>)
 80135a2:	881b      	ldrh	r3, [r3, #0]
 80135a4:	8bfa      	ldrh	r2, [r7, #30]
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d905      	bls.n	80135b6 <ip_reass_free_complete_datagram+0x112>
 80135aa:	4b09      	ldr	r3, [pc, #36]	@ (80135d0 <ip_reass_free_complete_datagram+0x12c>)
 80135ac:	22d2      	movs	r2, #210	@ 0xd2
 80135ae:	490e      	ldr	r1, [pc, #56]	@ (80135e8 <ip_reass_free_complete_datagram+0x144>)
 80135b0:	4809      	ldr	r0, [pc, #36]	@ (80135d8 <ip_reass_free_complete_datagram+0x134>)
 80135b2:	f000 ff5f 	bl	8014474 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80135b6:	4b0b      	ldr	r3, [pc, #44]	@ (80135e4 <ip_reass_free_complete_datagram+0x140>)
 80135b8:	881a      	ldrh	r2, [r3, #0]
 80135ba:	8bfb      	ldrh	r3, [r7, #30]
 80135bc:	1ad3      	subs	r3, r2, r3
 80135be:	b29a      	uxth	r2, r3
 80135c0:	4b08      	ldr	r3, [pc, #32]	@ (80135e4 <ip_reass_free_complete_datagram+0x140>)
 80135c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80135c4:	8bfb      	ldrh	r3, [r7, #30]
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	3720      	adds	r7, #32
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	080179c0 	.word	0x080179c0
 80135d4:	080179fc 	.word	0x080179fc
 80135d8:	08017a08 	.word	0x08017a08
 80135dc:	08017a30 	.word	0x08017a30
 80135e0:	08017a44 	.word	0x08017a44
 80135e4:	2000b360 	.word	0x2000b360
 80135e8:	08017a64 	.word	0x08017a64

080135ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b08a      	sub	sp, #40	@ 0x28
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
 80135f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80135f6:	2300      	movs	r3, #0
 80135f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80135fa:	2300      	movs	r3, #0
 80135fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80135fe:	2300      	movs	r3, #0
 8013600:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013602:	2300      	movs	r3, #0
 8013604:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013606:	2300      	movs	r3, #0
 8013608:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801360a:	4b28      	ldr	r3, [pc, #160]	@ (80136ac <ip_reass_remove_oldest_datagram+0xc0>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013610:	e030      	b.n	8013674 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013614:	695a      	ldr	r2, [r3, #20]
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	68db      	ldr	r3, [r3, #12]
 801361a:	429a      	cmp	r2, r3
 801361c:	d10c      	bne.n	8013638 <ip_reass_remove_oldest_datagram+0x4c>
 801361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013620:	699a      	ldr	r2, [r3, #24]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	691b      	ldr	r3, [r3, #16]
 8013626:	429a      	cmp	r2, r3
 8013628:	d106      	bne.n	8013638 <ip_reass_remove_oldest_datagram+0x4c>
 801362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801362c:	899a      	ldrh	r2, [r3, #12]
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	889b      	ldrh	r3, [r3, #4]
 8013632:	b29b      	uxth	r3, r3
 8013634:	429a      	cmp	r2, r3
 8013636:	d014      	beq.n	8013662 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013638:	693b      	ldr	r3, [r7, #16]
 801363a:	3301      	adds	r3, #1
 801363c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801363e:	6a3b      	ldr	r3, [r7, #32]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d104      	bne.n	801364e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013646:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013648:	69fb      	ldr	r3, [r7, #28]
 801364a:	61bb      	str	r3, [r7, #24]
 801364c:	e009      	b.n	8013662 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013650:	7fda      	ldrb	r2, [r3, #31]
 8013652:	6a3b      	ldr	r3, [r7, #32]
 8013654:	7fdb      	ldrb	r3, [r3, #31]
 8013656:	429a      	cmp	r2, r3
 8013658:	d803      	bhi.n	8013662 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801365c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d001      	beq.n	801366e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801366c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013676:	2b00      	cmp	r3, #0
 8013678:	d1cb      	bne.n	8013612 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801367a:	6a3b      	ldr	r3, [r7, #32]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d008      	beq.n	8013692 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013680:	69b9      	ldr	r1, [r7, #24]
 8013682:	6a38      	ldr	r0, [r7, #32]
 8013684:	f7ff ff0e 	bl	80134a4 <ip_reass_free_complete_datagram>
 8013688:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801368a:	697a      	ldr	r2, [r7, #20]
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	4413      	add	r3, r2
 8013690:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013692:	697a      	ldr	r2, [r7, #20]
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	429a      	cmp	r2, r3
 8013698:	da02      	bge.n	80136a0 <ip_reass_remove_oldest_datagram+0xb4>
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	2b01      	cmp	r3, #1
 801369e:	dcac      	bgt.n	80135fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80136a0:	697b      	ldr	r3, [r7, #20]
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	3728      	adds	r7, #40	@ 0x28
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}
 80136aa:	bf00      	nop
 80136ac:	2000b35c 	.word	0x2000b35c

080136b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b084      	sub	sp, #16
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80136ba:	2004      	movs	r0, #4
 80136bc:	f7f7 f986 	bl	800a9cc <memp_malloc>
 80136c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d110      	bne.n	80136ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80136c8:	6839      	ldr	r1, [r7, #0]
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f7ff ff8e 	bl	80135ec <ip_reass_remove_oldest_datagram>
 80136d0:	4602      	mov	r2, r0
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	4293      	cmp	r3, r2
 80136d6:	dc03      	bgt.n	80136e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80136d8:	2004      	movs	r0, #4
 80136da:	f7f7 f977 	bl	800a9cc <memp_malloc>
 80136de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d101      	bne.n	80136ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80136e6:	2300      	movs	r3, #0
 80136e8:	e016      	b.n	8013718 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80136ea:	2220      	movs	r2, #32
 80136ec:	2100      	movs	r1, #0
 80136ee:	68f8      	ldr	r0, [r7, #12]
 80136f0:	f000 ff25 	bl	801453e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	220f      	movs	r2, #15
 80136f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80136fa:	4b09      	ldr	r3, [pc, #36]	@ (8013720 <ip_reass_enqueue_new_datagram+0x70>)
 80136fc:	681a      	ldr	r2, [r3, #0]
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013702:	4a07      	ldr	r2, [pc, #28]	@ (8013720 <ip_reass_enqueue_new_datagram+0x70>)
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	3308      	adds	r3, #8
 801370c:	2214      	movs	r2, #20
 801370e:	6879      	ldr	r1, [r7, #4]
 8013710:	4618      	mov	r0, r3
 8013712:	f000 ff8a 	bl	801462a <memcpy>
  return ipr;
 8013716:	68fb      	ldr	r3, [r7, #12]
}
 8013718:	4618      	mov	r0, r3
 801371a:	3710      	adds	r7, #16
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}
 8013720:	2000b35c 	.word	0x2000b35c

08013724 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b082      	sub	sp, #8
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
 801372c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801372e:	4b10      	ldr	r3, [pc, #64]	@ (8013770 <ip_reass_dequeue_datagram+0x4c>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	687a      	ldr	r2, [r7, #4]
 8013734:	429a      	cmp	r2, r3
 8013736:	d104      	bne.n	8013742 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	4a0c      	ldr	r2, [pc, #48]	@ (8013770 <ip_reass_dequeue_datagram+0x4c>)
 801373e:	6013      	str	r3, [r2, #0]
 8013740:	e00d      	b.n	801375e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d106      	bne.n	8013756 <ip_reass_dequeue_datagram+0x32>
 8013748:	4b0a      	ldr	r3, [pc, #40]	@ (8013774 <ip_reass_dequeue_datagram+0x50>)
 801374a:	f240 1245 	movw	r2, #325	@ 0x145
 801374e:	490a      	ldr	r1, [pc, #40]	@ (8013778 <ip_reass_dequeue_datagram+0x54>)
 8013750:	480a      	ldr	r0, [pc, #40]	@ (801377c <ip_reass_dequeue_datagram+0x58>)
 8013752:	f000 fe8f 	bl	8014474 <iprintf>
    prev->next = ipr->next;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	681a      	ldr	r2, [r3, #0]
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801375e:	6879      	ldr	r1, [r7, #4]
 8013760:	2004      	movs	r0, #4
 8013762:	f7f7 f9a3 	bl	800aaac <memp_free>
}
 8013766:	bf00      	nop
 8013768:	3708      	adds	r7, #8
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}
 801376e:	bf00      	nop
 8013770:	2000b35c 	.word	0x2000b35c
 8013774:	080179c0 	.word	0x080179c0
 8013778:	08017a88 	.word	0x08017a88
 801377c:	08017a08 	.word	0x08017a08

08013780 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b08c      	sub	sp, #48	@ 0x30
 8013784:	af00      	add	r7, sp, #0
 8013786:	60f8      	str	r0, [r7, #12]
 8013788:	60b9      	str	r1, [r7, #8]
 801378a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801378c:	2300      	movs	r3, #0
 801378e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013790:	2301      	movs	r3, #1
 8013792:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	685b      	ldr	r3, [r3, #4]
 8013798:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801379a:	69fb      	ldr	r3, [r7, #28]
 801379c:	885b      	ldrh	r3, [r3, #2]
 801379e:	b29b      	uxth	r3, r3
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7f6 fc9b 	bl	800a0dc <lwip_htons>
 80137a6:	4603      	mov	r3, r0
 80137a8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80137aa:	69fb      	ldr	r3, [r7, #28]
 80137ac:	781b      	ldrb	r3, [r3, #0]
 80137ae:	f003 030f 	and.w	r3, r3, #15
 80137b2:	b2db      	uxtb	r3, r3
 80137b4:	009b      	lsls	r3, r3, #2
 80137b6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80137b8:	7e7b      	ldrb	r3, [r7, #25]
 80137ba:	b29b      	uxth	r3, r3
 80137bc:	8b7a      	ldrh	r2, [r7, #26]
 80137be:	429a      	cmp	r2, r3
 80137c0:	d202      	bcs.n	80137c8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80137c2:	f04f 33ff 	mov.w	r3, #4294967295
 80137c6:	e135      	b.n	8013a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80137c8:	7e7b      	ldrb	r3, [r7, #25]
 80137ca:	b29b      	uxth	r3, r3
 80137cc:	8b7a      	ldrh	r2, [r7, #26]
 80137ce:	1ad3      	subs	r3, r2, r3
 80137d0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80137d2:	69fb      	ldr	r3, [r7, #28]
 80137d4:	88db      	ldrh	r3, [r3, #6]
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	4618      	mov	r0, r3
 80137da:	f7f6 fc7f 	bl	800a0dc <lwip_htons>
 80137de:	4603      	mov	r3, r0
 80137e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80137e4:	b29b      	uxth	r3, r3
 80137e6:	00db      	lsls	r3, r3, #3
 80137e8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	685b      	ldr	r3, [r3, #4]
 80137ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80137f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137f2:	2200      	movs	r2, #0
 80137f4:	701a      	strb	r2, [r3, #0]
 80137f6:	2200      	movs	r2, #0
 80137f8:	705a      	strb	r2, [r3, #1]
 80137fa:	2200      	movs	r2, #0
 80137fc:	709a      	strb	r2, [r3, #2]
 80137fe:	2200      	movs	r2, #0
 8013800:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013804:	8afa      	ldrh	r2, [r7, #22]
 8013806:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013808:	8afa      	ldrh	r2, [r7, #22]
 801380a:	8b7b      	ldrh	r3, [r7, #26]
 801380c:	4413      	add	r3, r2
 801380e:	b29a      	uxth	r2, r3
 8013810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013812:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013816:	88db      	ldrh	r3, [r3, #6]
 8013818:	b29b      	uxth	r3, r3
 801381a:	8afa      	ldrh	r2, [r7, #22]
 801381c:	429a      	cmp	r2, r3
 801381e:	d902      	bls.n	8013826 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013820:	f04f 33ff 	mov.w	r3, #4294967295
 8013824:	e106      	b.n	8013a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	685b      	ldr	r3, [r3, #4]
 801382a:	627b      	str	r3, [r7, #36]	@ 0x24
 801382c:	e068      	b.n	8013900 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013830:	685b      	ldr	r3, [r3, #4]
 8013832:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013836:	889b      	ldrh	r3, [r3, #4]
 8013838:	b29a      	uxth	r2, r3
 801383a:	693b      	ldr	r3, [r7, #16]
 801383c:	889b      	ldrh	r3, [r3, #4]
 801383e:	b29b      	uxth	r3, r3
 8013840:	429a      	cmp	r2, r3
 8013842:	d235      	bcs.n	80138b0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013848:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801384c:	2b00      	cmp	r3, #0
 801384e:	d020      	beq.n	8013892 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013852:	889b      	ldrh	r3, [r3, #4]
 8013854:	b29a      	uxth	r2, r3
 8013856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013858:	88db      	ldrh	r3, [r3, #6]
 801385a:	b29b      	uxth	r3, r3
 801385c:	429a      	cmp	r2, r3
 801385e:	d307      	bcc.n	8013870 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013862:	88db      	ldrh	r3, [r3, #6]
 8013864:	b29a      	uxth	r2, r3
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	889b      	ldrh	r3, [r3, #4]
 801386a:	b29b      	uxth	r3, r3
 801386c:	429a      	cmp	r2, r3
 801386e:	d902      	bls.n	8013876 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013870:	f04f 33ff 	mov.w	r3, #4294967295
 8013874:	e0de      	b.n	8013a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013878:	68ba      	ldr	r2, [r7, #8]
 801387a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801387c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801387e:	88db      	ldrh	r3, [r3, #6]
 8013880:	b29a      	uxth	r2, r3
 8013882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013884:	889b      	ldrh	r3, [r3, #4]
 8013886:	b29b      	uxth	r3, r3
 8013888:	429a      	cmp	r2, r3
 801388a:	d03d      	beq.n	8013908 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801388c:	2300      	movs	r3, #0
 801388e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013890:	e03a      	b.n	8013908 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013894:	88db      	ldrh	r3, [r3, #6]
 8013896:	b29a      	uxth	r2, r3
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	889b      	ldrh	r3, [r3, #4]
 801389c:	b29b      	uxth	r3, r3
 801389e:	429a      	cmp	r2, r3
 80138a0:	d902      	bls.n	80138a8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80138a2:	f04f 33ff 	mov.w	r3, #4294967295
 80138a6:	e0c5      	b.n	8013a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	68ba      	ldr	r2, [r7, #8]
 80138ac:	605a      	str	r2, [r3, #4]
      break;
 80138ae:	e02b      	b.n	8013908 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80138b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138b2:	889b      	ldrh	r3, [r3, #4]
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	889b      	ldrh	r3, [r3, #4]
 80138ba:	b29b      	uxth	r3, r3
 80138bc:	429a      	cmp	r2, r3
 80138be:	d102      	bne.n	80138c6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80138c0:	f04f 33ff 	mov.w	r3, #4294967295
 80138c4:	e0b6      	b.n	8013a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80138c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138c8:	889b      	ldrh	r3, [r3, #4]
 80138ca:	b29a      	uxth	r2, r3
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	88db      	ldrh	r3, [r3, #6]
 80138d0:	b29b      	uxth	r3, r3
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d202      	bcs.n	80138dc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80138d6:	f04f 33ff 	mov.w	r3, #4294967295
 80138da:	e0ab      	b.n	8013a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80138dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d009      	beq.n	80138f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80138e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e4:	88db      	ldrh	r3, [r3, #6]
 80138e6:	b29a      	uxth	r2, r3
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	889b      	ldrh	r3, [r3, #4]
 80138ec:	b29b      	uxth	r3, r3
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d001      	beq.n	80138f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80138f2:	2300      	movs	r3, #0
 80138f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80138f6:	693b      	ldr	r3, [r7, #16]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80138fc:	693b      	ldr	r3, [r7, #16]
 80138fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8013900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013902:	2b00      	cmp	r3, #0
 8013904:	d193      	bne.n	801382e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013906:	e000      	b.n	801390a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013908:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801390c:	2b00      	cmp	r3, #0
 801390e:	d12d      	bne.n	801396c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013912:	2b00      	cmp	r3, #0
 8013914:	d01c      	beq.n	8013950 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013918:	88db      	ldrh	r3, [r3, #6]
 801391a:	b29a      	uxth	r2, r3
 801391c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801391e:	889b      	ldrh	r3, [r3, #4]
 8013920:	b29b      	uxth	r3, r3
 8013922:	429a      	cmp	r2, r3
 8013924:	d906      	bls.n	8013934 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013926:	4b45      	ldr	r3, [pc, #276]	@ (8013a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013928:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801392c:	4944      	ldr	r1, [pc, #272]	@ (8013a40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801392e:	4845      	ldr	r0, [pc, #276]	@ (8013a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013930:	f000 fda0 	bl	8014474 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013936:	68ba      	ldr	r2, [r7, #8]
 8013938:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801393a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801393c:	88db      	ldrh	r3, [r3, #6]
 801393e:	b29a      	uxth	r2, r3
 8013940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013942:	889b      	ldrh	r3, [r3, #4]
 8013944:	b29b      	uxth	r3, r3
 8013946:	429a      	cmp	r2, r3
 8013948:	d010      	beq.n	801396c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801394a:	2300      	movs	r3, #0
 801394c:	623b      	str	r3, [r7, #32]
 801394e:	e00d      	b.n	801396c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d006      	beq.n	8013966 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013958:	4b38      	ldr	r3, [pc, #224]	@ (8013a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801395a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801395e:	493a      	ldr	r1, [pc, #232]	@ (8013a48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013960:	4838      	ldr	r0, [pc, #224]	@ (8013a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013962:	f000 fd87 	bl	8014474 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	68ba      	ldr	r2, [r7, #8]
 801396a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d105      	bne.n	801397e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	7f9b      	ldrb	r3, [r3, #30]
 8013976:	f003 0301 	and.w	r3, r3, #1
 801397a:	2b00      	cmp	r3, #0
 801397c:	d059      	beq.n	8013a32 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801397e:	6a3b      	ldr	r3, [r7, #32]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d04f      	beq.n	8013a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	685b      	ldr	r3, [r3, #4]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d006      	beq.n	801399a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	685b      	ldr	r3, [r3, #4]
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	889b      	ldrh	r3, [r3, #4]
 8013994:	b29b      	uxth	r3, r3
 8013996:	2b00      	cmp	r3, #0
 8013998:	d002      	beq.n	80139a0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801399a:	2300      	movs	r3, #0
 801399c:	623b      	str	r3, [r7, #32]
 801399e:	e041      	b.n	8013a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80139a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139a2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80139a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80139aa:	e012      	b.n	80139d2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80139ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139ae:	685b      	ldr	r3, [r3, #4]
 80139b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80139b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139b4:	88db      	ldrh	r3, [r3, #6]
 80139b6:	b29a      	uxth	r2, r3
 80139b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ba:	889b      	ldrh	r3, [r3, #4]
 80139bc:	b29b      	uxth	r3, r3
 80139be:	429a      	cmp	r2, r3
 80139c0:	d002      	beq.n	80139c8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80139c2:	2300      	movs	r3, #0
 80139c4:	623b      	str	r3, [r7, #32]
            break;
 80139c6:	e007      	b.n	80139d8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80139c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ca:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80139cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80139d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d1e9      	bne.n	80139ac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80139d8:	6a3b      	ldr	r3, [r7, #32]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d022      	beq.n	8013a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	685b      	ldr	r3, [r3, #4]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d106      	bne.n	80139f4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80139e6:	4b15      	ldr	r3, [pc, #84]	@ (8013a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80139e8:	f240 12df 	movw	r2, #479	@ 0x1df
 80139ec:	4917      	ldr	r1, [pc, #92]	@ (8013a4c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80139ee:	4815      	ldr	r0, [pc, #84]	@ (8013a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80139f0:	f000 fd40 	bl	8014474 <iprintf>
          LWIP_ASSERT("sanity check",
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	685b      	ldr	r3, [r3, #4]
 80139f8:	685b      	ldr	r3, [r3, #4]
 80139fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d106      	bne.n	8013a0e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013a00:	4b0e      	ldr	r3, [pc, #56]	@ (8013a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013a02:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8013a06:	4911      	ldr	r1, [pc, #68]	@ (8013a4c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013a08:	480e      	ldr	r0, [pc, #56]	@ (8013a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013a0a:	f000 fd33 	bl	8014474 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d006      	beq.n	8013a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013a16:	4b09      	ldr	r3, [pc, #36]	@ (8013a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013a18:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8013a1c:	490c      	ldr	r1, [pc, #48]	@ (8013a50 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013a1e:	4809      	ldr	r0, [pc, #36]	@ (8013a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013a20:	f000 fd28 	bl	8014474 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013a24:	6a3b      	ldr	r3, [r7, #32]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	bf14      	ite	ne
 8013a2a:	2301      	movne	r3, #1
 8013a2c:	2300      	moveq	r3, #0
 8013a2e:	b2db      	uxtb	r3, r3
 8013a30:	e000      	b.n	8013a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013a32:	2300      	movs	r3, #0
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3730      	adds	r7, #48	@ 0x30
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}
 8013a3c:	080179c0 	.word	0x080179c0
 8013a40:	08017aa4 	.word	0x08017aa4
 8013a44:	08017a08 	.word	0x08017a08
 8013a48:	08017ac4 	.word	0x08017ac4
 8013a4c:	08017afc 	.word	0x08017afc
 8013a50:	08017b0c 	.word	0x08017b0c

08013a54 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b08e      	sub	sp, #56	@ 0x38
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	f003 030f 	and.w	r3, r3, #15
 8013a6a:	b2db      	uxtb	r3, r3
 8013a6c:	009b      	lsls	r3, r3, #2
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	2b14      	cmp	r3, #20
 8013a72:	f040 8171 	bne.w	8013d58 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a78:	88db      	ldrh	r3, [r3, #6]
 8013a7a:	b29b      	uxth	r3, r3
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7f6 fb2d 	bl	800a0dc <lwip_htons>
 8013a82:	4603      	mov	r3, r0
 8013a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a88:	b29b      	uxth	r3, r3
 8013a8a:	00db      	lsls	r3, r3, #3
 8013a8c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a90:	885b      	ldrh	r3, [r3, #2]
 8013a92:	b29b      	uxth	r3, r3
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7f6 fb21 	bl	800a0dc <lwip_htons>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aa0:	781b      	ldrb	r3, [r3, #0]
 8013aa2:	f003 030f 	and.w	r3, r3, #15
 8013aa6:	b2db      	uxtb	r3, r3
 8013aa8:	009b      	lsls	r3, r3, #2
 8013aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8013aae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	f0c0 8150 	bcc.w	8013d5c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013abc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013ac0:	b29b      	uxth	r3, r3
 8013ac2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013ac4:	1ad3      	subs	r3, r2, r3
 8013ac6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013ac8:	6878      	ldr	r0, [r7, #4]
 8013aca:	f7f7 feed 	bl	800b8a8 <pbuf_clen>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013ad2:	4b8c      	ldr	r3, [pc, #560]	@ (8013d04 <ip4_reass+0x2b0>)
 8013ad4:	881b      	ldrh	r3, [r3, #0]
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	8c3b      	ldrh	r3, [r7, #32]
 8013ada:	4413      	add	r3, r2
 8013adc:	2b0a      	cmp	r3, #10
 8013ade:	dd10      	ble.n	8013b02 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013ae0:	8c3b      	ldrh	r3, [r7, #32]
 8013ae2:	4619      	mov	r1, r3
 8013ae4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013ae6:	f7ff fd81 	bl	80135ec <ip_reass_remove_oldest_datagram>
 8013aea:	4603      	mov	r3, r0
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	f000 8137 	beq.w	8013d60 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013af2:	4b84      	ldr	r3, [pc, #528]	@ (8013d04 <ip4_reass+0x2b0>)
 8013af4:	881b      	ldrh	r3, [r3, #0]
 8013af6:	461a      	mov	r2, r3
 8013af8:	8c3b      	ldrh	r3, [r7, #32]
 8013afa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013afc:	2b0a      	cmp	r3, #10
 8013afe:	f300 812f 	bgt.w	8013d60 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013b02:	4b81      	ldr	r3, [pc, #516]	@ (8013d08 <ip4_reass+0x2b4>)
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	633b      	str	r3, [r7, #48]	@ 0x30
 8013b08:	e015      	b.n	8013b36 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b0c:	695a      	ldr	r2, [r3, #20]
 8013b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b10:	68db      	ldr	r3, [r3, #12]
 8013b12:	429a      	cmp	r2, r3
 8013b14:	d10c      	bne.n	8013b30 <ip4_reass+0xdc>
 8013b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b18:	699a      	ldr	r2, [r3, #24]
 8013b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b1c:	691b      	ldr	r3, [r3, #16]
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d106      	bne.n	8013b30 <ip4_reass+0xdc>
 8013b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b24:	899a      	ldrh	r2, [r3, #12]
 8013b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b28:	889b      	ldrh	r3, [r3, #4]
 8013b2a:	b29b      	uxth	r3, r3
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d006      	beq.n	8013b3e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8013b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d1e6      	bne.n	8013b0a <ip4_reass+0xb6>
 8013b3c:	e000      	b.n	8013b40 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013b3e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d109      	bne.n	8013b5a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013b46:	8c3b      	ldrh	r3, [r7, #32]
 8013b48:	4619      	mov	r1, r3
 8013b4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013b4c:	f7ff fdb0 	bl	80136b0 <ip_reass_enqueue_new_datagram>
 8013b50:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d11c      	bne.n	8013b92 <ip4_reass+0x13e>
      goto nullreturn;
 8013b58:	e105      	b.n	8013d66 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b5c:	88db      	ldrh	r3, [r3, #6]
 8013b5e:	b29b      	uxth	r3, r3
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7f6 fabb 	bl	800a0dc <lwip_htons>
 8013b66:	4603      	mov	r3, r0
 8013b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d110      	bne.n	8013b92 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b72:	89db      	ldrh	r3, [r3, #14]
 8013b74:	4618      	mov	r0, r3
 8013b76:	f7f6 fab1 	bl	800a0dc <lwip_htons>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d006      	beq.n	8013b92 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b86:	3308      	adds	r3, #8
 8013b88:	2214      	movs	r2, #20
 8013b8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f000 fd4c 	bl	801462a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b94:	88db      	ldrh	r3, [r3, #6]
 8013b96:	b29b      	uxth	r3, r3
 8013b98:	f003 0320 	and.w	r3, r3, #32
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	bf0c      	ite	eq
 8013ba0:	2301      	moveq	r3, #1
 8013ba2:	2300      	movne	r3, #0
 8013ba4:	b2db      	uxtb	r3, r3
 8013ba6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013ba8:	69fb      	ldr	r3, [r7, #28]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d00e      	beq.n	8013bcc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013bae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013bb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013bb2:	4413      	add	r3, r2
 8013bb4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013bb6:	8b7a      	ldrh	r2, [r7, #26]
 8013bb8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	f0c0 80a0 	bcc.w	8013d00 <ip4_reass+0x2ac>
 8013bc0:	8b7b      	ldrh	r3, [r7, #26]
 8013bc2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8013bc6:	4293      	cmp	r3, r2
 8013bc8:	f200 809a 	bhi.w	8013d00 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013bcc:	69fa      	ldr	r2, [r7, #28]
 8013bce:	6879      	ldr	r1, [r7, #4]
 8013bd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013bd2:	f7ff fdd5 	bl	8013780 <ip_reass_chain_frag_into_datagram_and_validate>
 8013bd6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013bd8:	697b      	ldr	r3, [r7, #20]
 8013bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bde:	f000 809b 	beq.w	8013d18 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013be2:	4b48      	ldr	r3, [pc, #288]	@ (8013d04 <ip4_reass+0x2b0>)
 8013be4:	881a      	ldrh	r2, [r3, #0]
 8013be6:	8c3b      	ldrh	r3, [r7, #32]
 8013be8:	4413      	add	r3, r2
 8013bea:	b29a      	uxth	r2, r3
 8013bec:	4b45      	ldr	r3, [pc, #276]	@ (8013d04 <ip4_reass+0x2b0>)
 8013bee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013bf0:	69fb      	ldr	r3, [r7, #28]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d00d      	beq.n	8013c12 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013bf6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013bf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013bfa:	4413      	add	r3, r2
 8013bfc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c00:	8a7a      	ldrh	r2, [r7, #18]
 8013c02:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c06:	7f9b      	ldrb	r3, [r3, #30]
 8013c08:	f043 0301 	orr.w	r3, r3, #1
 8013c0c:	b2da      	uxtb	r2, r3
 8013c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c10:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	2b01      	cmp	r3, #1
 8013c16:	d171      	bne.n	8013cfc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c1a:	8b9b      	ldrh	r3, [r3, #28]
 8013c1c:	3314      	adds	r3, #20
 8013c1e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c22:	685b      	ldr	r3, [r3, #4]
 8013c24:	685b      	ldr	r3, [r3, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	685b      	ldr	r3, [r3, #4]
 8013c30:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c34:	3308      	adds	r3, #8
 8013c36:	2214      	movs	r2, #20
 8013c38:	4619      	mov	r1, r3
 8013c3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013c3c:	f000 fcf5 	bl	801462a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013c40:	8a3b      	ldrh	r3, [r7, #16]
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7f6 fa4a 	bl	800a0dc <lwip_htons>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	461a      	mov	r2, r3
 8013c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c4e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c52:	2200      	movs	r2, #0
 8013c54:	719a      	strb	r2, [r3, #6]
 8013c56:	2200      	movs	r2, #0
 8013c58:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	729a      	strb	r2, [r3, #10]
 8013c60:	2200      	movs	r2, #0
 8013c62:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c66:	685b      	ldr	r3, [r3, #4]
 8013c68:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013c6a:	e00d      	b.n	8013c88 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c6e:	685b      	ldr	r3, [r3, #4]
 8013c70:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013c72:	2114      	movs	r1, #20
 8013c74:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013c76:	f7f7 fd09 	bl	800b68c <pbuf_remove_header>
      pbuf_cat(p, r);
 8013c7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f7f7 fe4d 	bl	800b91c <pbuf_cat>
      r = iprh->next_pbuf;
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8013c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d1ee      	bne.n	8013c6c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8013d08 <ip4_reass+0x2b4>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d102      	bne.n	8013c9e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013c98:	2300      	movs	r3, #0
 8013c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013c9c:	e010      	b.n	8013cc0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8013d08 <ip4_reass+0x2b4>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013ca4:	e007      	b.n	8013cb6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013cac:	429a      	cmp	r2, r3
 8013cae:	d006      	beq.n	8013cbe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d1f4      	bne.n	8013ca6 <ip4_reass+0x252>
 8013cbc:	e000      	b.n	8013cc0 <ip4_reass+0x26c>
          break;
 8013cbe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013cc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013cc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013cc4:	f7ff fd2e 	bl	8013724 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013cc8:	6878      	ldr	r0, [r7, #4]
 8013cca:	f7f7 fded 	bl	800b8a8 <pbuf_clen>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8013d04 <ip4_reass+0x2b0>)
 8013cd4:	881b      	ldrh	r3, [r3, #0]
 8013cd6:	8c3a      	ldrh	r2, [r7, #32]
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	d906      	bls.n	8013cea <ip4_reass+0x296>
 8013cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8013d0c <ip4_reass+0x2b8>)
 8013cde:	f240 229b 	movw	r2, #667	@ 0x29b
 8013ce2:	490b      	ldr	r1, [pc, #44]	@ (8013d10 <ip4_reass+0x2bc>)
 8013ce4:	480b      	ldr	r0, [pc, #44]	@ (8013d14 <ip4_reass+0x2c0>)
 8013ce6:	f000 fbc5 	bl	8014474 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013cea:	4b06      	ldr	r3, [pc, #24]	@ (8013d04 <ip4_reass+0x2b0>)
 8013cec:	881a      	ldrh	r2, [r3, #0]
 8013cee:	8c3b      	ldrh	r3, [r7, #32]
 8013cf0:	1ad3      	subs	r3, r2, r3
 8013cf2:	b29a      	uxth	r2, r3
 8013cf4:	4b03      	ldr	r3, [pc, #12]	@ (8013d04 <ip4_reass+0x2b0>)
 8013cf6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	e038      	b.n	8013d6e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	e036      	b.n	8013d6e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013d00:	bf00      	nop
 8013d02:	e00a      	b.n	8013d1a <ip4_reass+0x2c6>
 8013d04:	2000b360 	.word	0x2000b360
 8013d08:	2000b35c 	.word	0x2000b35c
 8013d0c:	080179c0 	.word	0x080179c0
 8013d10:	08017b30 	.word	0x08017b30
 8013d14:	08017a08 	.word	0x08017a08
    goto nullreturn_ipr;
 8013d18:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d106      	bne.n	8013d2e <ip4_reass+0x2da>
 8013d20:	4b15      	ldr	r3, [pc, #84]	@ (8013d78 <ip4_reass+0x324>)
 8013d22:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8013d26:	4915      	ldr	r1, [pc, #84]	@ (8013d7c <ip4_reass+0x328>)
 8013d28:	4815      	ldr	r0, [pc, #84]	@ (8013d80 <ip4_reass+0x32c>)
 8013d2a:	f000 fba3 	bl	8014474 <iprintf>
  if (ipr->p == NULL) {
 8013d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d116      	bne.n	8013d64 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013d36:	4b13      	ldr	r3, [pc, #76]	@ (8013d84 <ip4_reass+0x330>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	d006      	beq.n	8013d4e <ip4_reass+0x2fa>
 8013d40:	4b0d      	ldr	r3, [pc, #52]	@ (8013d78 <ip4_reass+0x324>)
 8013d42:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013d46:	4910      	ldr	r1, [pc, #64]	@ (8013d88 <ip4_reass+0x334>)
 8013d48:	480d      	ldr	r0, [pc, #52]	@ (8013d80 <ip4_reass+0x32c>)
 8013d4a:	f000 fb93 	bl	8014474 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013d4e:	2100      	movs	r1, #0
 8013d50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013d52:	f7ff fce7 	bl	8013724 <ip_reass_dequeue_datagram>
 8013d56:	e006      	b.n	8013d66 <ip4_reass+0x312>
    goto nullreturn;
 8013d58:	bf00      	nop
 8013d5a:	e004      	b.n	8013d66 <ip4_reass+0x312>
    goto nullreturn;
 8013d5c:	bf00      	nop
 8013d5e:	e002      	b.n	8013d66 <ip4_reass+0x312>
      goto nullreturn;
 8013d60:	bf00      	nop
 8013d62:	e000      	b.n	8013d66 <ip4_reass+0x312>
  }

nullreturn:
 8013d64:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013d66:	6878      	ldr	r0, [r7, #4]
 8013d68:	f7f7 fd16 	bl	800b798 <pbuf_free>
  return NULL;
 8013d6c:	2300      	movs	r3, #0
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3738      	adds	r7, #56	@ 0x38
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	080179c0 	.word	0x080179c0
 8013d7c:	08017b4c 	.word	0x08017b4c
 8013d80:	08017a08 	.word	0x08017a08
 8013d84:	2000b35c 	.word	0x2000b35c
 8013d88:	08017b58 	.word	0x08017b58

08013d8c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013d90:	2005      	movs	r0, #5
 8013d92:	f7f6 fe1b 	bl	800a9cc <memp_malloc>
 8013d96:	4603      	mov	r3, r0
}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	bd80      	pop	{r7, pc}

08013d9c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b082      	sub	sp, #8
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d106      	bne.n	8013db8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013daa:	4b07      	ldr	r3, [pc, #28]	@ (8013dc8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013dac:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8013db0:	4906      	ldr	r1, [pc, #24]	@ (8013dcc <ip_frag_free_pbuf_custom_ref+0x30>)
 8013db2:	4807      	ldr	r0, [pc, #28]	@ (8013dd0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013db4:	f000 fb5e 	bl	8014474 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013db8:	6879      	ldr	r1, [r7, #4]
 8013dba:	2005      	movs	r0, #5
 8013dbc:	f7f6 fe76 	bl	800aaac <memp_free>
}
 8013dc0:	bf00      	nop
 8013dc2:	3708      	adds	r7, #8
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd80      	pop	{r7, pc}
 8013dc8:	080179c0 	.word	0x080179c0
 8013dcc:	08017b78 	.word	0x08017b78
 8013dd0:	08017a08 	.word	0x08017a08

08013dd4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b084      	sub	sp, #16
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d106      	bne.n	8013df4 <ipfrag_free_pbuf_custom+0x20>
 8013de6:	4b11      	ldr	r3, [pc, #68]	@ (8013e2c <ipfrag_free_pbuf_custom+0x58>)
 8013de8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8013dec:	4910      	ldr	r1, [pc, #64]	@ (8013e30 <ipfrag_free_pbuf_custom+0x5c>)
 8013dee:	4811      	ldr	r0, [pc, #68]	@ (8013e34 <ipfrag_free_pbuf_custom+0x60>)
 8013df0:	f000 fb40 	bl	8014474 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013df4:	68fa      	ldr	r2, [r7, #12]
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	429a      	cmp	r2, r3
 8013dfa:	d006      	beq.n	8013e0a <ipfrag_free_pbuf_custom+0x36>
 8013dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8013e2c <ipfrag_free_pbuf_custom+0x58>)
 8013dfe:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8013e02:	490d      	ldr	r1, [pc, #52]	@ (8013e38 <ipfrag_free_pbuf_custom+0x64>)
 8013e04:	480b      	ldr	r0, [pc, #44]	@ (8013e34 <ipfrag_free_pbuf_custom+0x60>)
 8013e06:	f000 fb35 	bl	8014474 <iprintf>
  if (pcr->original != NULL) {
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	695b      	ldr	r3, [r3, #20]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d004      	beq.n	8013e1c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	695b      	ldr	r3, [r3, #20]
 8013e16:	4618      	mov	r0, r3
 8013e18:	f7f7 fcbe 	bl	800b798 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013e1c:	68f8      	ldr	r0, [r7, #12]
 8013e1e:	f7ff ffbd 	bl	8013d9c <ip_frag_free_pbuf_custom_ref>
}
 8013e22:	bf00      	nop
 8013e24:	3710      	adds	r7, #16
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}
 8013e2a:	bf00      	nop
 8013e2c:	080179c0 	.word	0x080179c0
 8013e30:	08017b84 	.word	0x08017b84
 8013e34:	08017a08 	.word	0x08017a08
 8013e38:	08017b90 	.word	0x08017b90

08013e3c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b094      	sub	sp, #80	@ 0x50
 8013e40:	af02      	add	r7, sp, #8
 8013e42:	60f8      	str	r0, [r7, #12]
 8013e44:	60b9      	str	r1, [r7, #8]
 8013e46:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013e48:	2300      	movs	r3, #0
 8013e4a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013e52:	3b14      	subs	r3, #20
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	da00      	bge.n	8013e5a <ip4_frag+0x1e>
 8013e58:	3307      	adds	r3, #7
 8013e5a:	10db      	asrs	r3, r3, #3
 8013e5c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013e5e:	2314      	movs	r3, #20
 8013e60:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	685b      	ldr	r3, [r3, #4]
 8013e66:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8013e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	f003 030f 	and.w	r3, r3, #15
 8013e74:	b2db      	uxtb	r3, r3
 8013e76:	009b      	lsls	r3, r3, #2
 8013e78:	b2db      	uxtb	r3, r3
 8013e7a:	2b14      	cmp	r3, #20
 8013e7c:	d002      	beq.n	8013e84 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013e7e:	f06f 0305 	mvn.w	r3, #5
 8013e82:	e110      	b.n	80140a6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	895b      	ldrh	r3, [r3, #10]
 8013e88:	2b13      	cmp	r3, #19
 8013e8a:	d809      	bhi.n	8013ea0 <ip4_frag+0x64>
 8013e8c:	4b88      	ldr	r3, [pc, #544]	@ (80140b0 <ip4_frag+0x274>)
 8013e8e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8013e92:	4988      	ldr	r1, [pc, #544]	@ (80140b4 <ip4_frag+0x278>)
 8013e94:	4888      	ldr	r0, [pc, #544]	@ (80140b8 <ip4_frag+0x27c>)
 8013e96:	f000 faed 	bl	8014474 <iprintf>
 8013e9a:	f06f 0305 	mvn.w	r3, #5
 8013e9e:	e102      	b.n	80140a6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ea2:	88db      	ldrh	r3, [r3, #6]
 8013ea4:	b29b      	uxth	r3, r3
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7f6 f918 	bl	800a0dc <lwip_htons>
 8013eac:	4603      	mov	r3, r0
 8013eae:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8013eb0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013eb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013eb6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013eba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	891b      	ldrh	r3, [r3, #8]
 8013ec6:	3b14      	subs	r3, #20
 8013ec8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8013ecc:	e0e1      	b.n	8014092 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013ece:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013ed0:	00db      	lsls	r3, r3, #3
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013ed8:	4293      	cmp	r3, r2
 8013eda:	bf28      	it	cs
 8013edc:	4613      	movcs	r3, r2
 8013ede:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013ee0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013ee4:	2114      	movs	r1, #20
 8013ee6:	200e      	movs	r0, #14
 8013ee8:	f7f7 f972 	bl	800b1d0 <pbuf_alloc>
 8013eec:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8013eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	f000 80d5 	beq.w	80140a0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef8:	895b      	ldrh	r3, [r3, #10]
 8013efa:	2b13      	cmp	r3, #19
 8013efc:	d806      	bhi.n	8013f0c <ip4_frag+0xd0>
 8013efe:	4b6c      	ldr	r3, [pc, #432]	@ (80140b0 <ip4_frag+0x274>)
 8013f00:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8013f04:	496d      	ldr	r1, [pc, #436]	@ (80140bc <ip4_frag+0x280>)
 8013f06:	486c      	ldr	r0, [pc, #432]	@ (80140b8 <ip4_frag+0x27c>)
 8013f08:	f000 fab4 	bl	8014474 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f0e:	685b      	ldr	r3, [r3, #4]
 8013f10:	2214      	movs	r2, #20
 8013f12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013f14:	4618      	mov	r0, r3
 8013f16:	f000 fb88 	bl	801462a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f1c:	685b      	ldr	r3, [r3, #4]
 8013f1e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8013f20:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013f22:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8013f26:	e064      	b.n	8013ff2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	895a      	ldrh	r2, [r3, #10]
 8013f2c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013f2e:	1ad3      	subs	r3, r2, r3
 8013f30:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	895b      	ldrh	r3, [r3, #10]
 8013f36:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013f38:	429a      	cmp	r2, r3
 8013f3a:	d906      	bls.n	8013f4a <ip4_frag+0x10e>
 8013f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80140b0 <ip4_frag+0x274>)
 8013f3e:	f240 322d 	movw	r2, #813	@ 0x32d
 8013f42:	495f      	ldr	r1, [pc, #380]	@ (80140c0 <ip4_frag+0x284>)
 8013f44:	485c      	ldr	r0, [pc, #368]	@ (80140b8 <ip4_frag+0x27c>)
 8013f46:	f000 fa95 	bl	8014474 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013f4a:	8bfa      	ldrh	r2, [r7, #30]
 8013f4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013f50:	4293      	cmp	r3, r2
 8013f52:	bf28      	it	cs
 8013f54:	4613      	movcs	r3, r2
 8013f56:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013f5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d105      	bne.n	8013f6e <ip4_frag+0x132>
        poff = 0;
 8013f62:	2300      	movs	r3, #0
 8013f64:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	60fb      	str	r3, [r7, #12]
        continue;
 8013f6c:	e041      	b.n	8013ff2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013f6e:	f7ff ff0d 	bl	8013d8c <ip_frag_alloc_pbuf_custom_ref>
 8013f72:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013f74:	69bb      	ldr	r3, [r7, #24]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d103      	bne.n	8013f82 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013f7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013f7c:	f7f7 fc0c 	bl	800b798 <pbuf_free>
        goto memerr;
 8013f80:	e08f      	b.n	80140a2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013f82:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013f88:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013f8a:	4413      	add	r3, r2
 8013f8c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8013f90:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8013f94:	9201      	str	r2, [sp, #4]
 8013f96:	9300      	str	r3, [sp, #0]
 8013f98:	4603      	mov	r3, r0
 8013f9a:	2241      	movs	r2, #65	@ 0x41
 8013f9c:	2000      	movs	r0, #0
 8013f9e:	f7f7 fa41 	bl	800b424 <pbuf_alloced_custom>
 8013fa2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013fa4:	697b      	ldr	r3, [r7, #20]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d106      	bne.n	8013fb8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013faa:	69b8      	ldr	r0, [r7, #24]
 8013fac:	f7ff fef6 	bl	8013d9c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013fb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013fb2:	f7f7 fbf1 	bl	800b798 <pbuf_free>
        goto memerr;
 8013fb6:	e074      	b.n	80140a2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013fb8:	68f8      	ldr	r0, [r7, #12]
 8013fba:	f7f7 fc8d 	bl	800b8d8 <pbuf_ref>
      pcr->original = p;
 8013fbe:	69bb      	ldr	r3, [r7, #24]
 8013fc0:	68fa      	ldr	r2, [r7, #12]
 8013fc2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013fc4:	69bb      	ldr	r3, [r7, #24]
 8013fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80140c4 <ip4_frag+0x288>)
 8013fc8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013fca:	6979      	ldr	r1, [r7, #20]
 8013fcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013fce:	f7f7 fca5 	bl	800b91c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013fd2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8013fd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013fda:	1ad3      	subs	r3, r2, r3
 8013fdc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8013fe0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d004      	beq.n	8013ff2 <ip4_frag+0x1b6>
        poff = 0;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013ff2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d196      	bne.n	8013f28 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013ffa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013ffc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014000:	4413      	add	r3, r2
 8014002:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014008:	f1a3 0213 	sub.w	r2, r3, #19
 801400c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014010:	429a      	cmp	r2, r3
 8014012:	bfcc      	ite	gt
 8014014:	2301      	movgt	r3, #1
 8014016:	2300      	movle	r3, #0
 8014018:	b2db      	uxtb	r3, r3
 801401a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801401c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014024:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8014026:	6a3b      	ldr	r3, [r7, #32]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d002      	beq.n	8014032 <ip4_frag+0x1f6>
 801402c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801402e:	2b00      	cmp	r3, #0
 8014030:	d003      	beq.n	801403a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014032:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014034:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014038:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801403a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801403c:	4618      	mov	r0, r3
 801403e:	f7f6 f84d 	bl	800a0dc <lwip_htons>
 8014042:	4603      	mov	r3, r0
 8014044:	461a      	mov	r2, r3
 8014046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014048:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801404a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801404c:	3314      	adds	r3, #20
 801404e:	b29b      	uxth	r3, r3
 8014050:	4618      	mov	r0, r3
 8014052:	f7f6 f843 	bl	800a0dc <lwip_htons>
 8014056:	4603      	mov	r3, r0
 8014058:	461a      	mov	r2, r3
 801405a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801405c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801405e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014060:	2200      	movs	r2, #0
 8014062:	729a      	strb	r2, [r3, #10]
 8014064:	2200      	movs	r2, #0
 8014066:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	695b      	ldr	r3, [r3, #20]
 801406c:	687a      	ldr	r2, [r7, #4]
 801406e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014070:	68b8      	ldr	r0, [r7, #8]
 8014072:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014074:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014076:	f7f7 fb8f 	bl	800b798 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801407a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801407e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014080:	1ad3      	subs	r3, r2, r3
 8014082:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8014086:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801408a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801408c:	4413      	add	r3, r2
 801408e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8014092:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014096:	2b00      	cmp	r3, #0
 8014098:	f47f af19 	bne.w	8013ece <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801409c:	2300      	movs	r3, #0
 801409e:	e002      	b.n	80140a6 <ip4_frag+0x26a>
      goto memerr;
 80140a0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80140a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	3748      	adds	r7, #72	@ 0x48
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}
 80140ae:	bf00      	nop
 80140b0:	080179c0 	.word	0x080179c0
 80140b4:	08017b9c 	.word	0x08017b9c
 80140b8:	08017a08 	.word	0x08017a08
 80140bc:	08017bb8 	.word	0x08017bb8
 80140c0:	08017bd8 	.word	0x08017bd8
 80140c4:	08013dd5 	.word	0x08013dd5

080140c8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b086      	sub	sp, #24
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
 80140d0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80140d2:	230e      	movs	r3, #14
 80140d4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	895b      	ldrh	r3, [r3, #10]
 80140da:	2b0e      	cmp	r3, #14
 80140dc:	d96e      	bls.n	80141bc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	7bdb      	ldrb	r3, [r3, #15]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d106      	bne.n	80140f4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80140ec:	3301      	adds	r3, #1
 80140ee:	b2da      	uxtb	r2, r3
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	685b      	ldr	r3, [r3, #4]
 80140f8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80140fa:	693b      	ldr	r3, [r7, #16]
 80140fc:	7b1a      	ldrb	r2, [r3, #12]
 80140fe:	7b5b      	ldrb	r3, [r3, #13]
 8014100:	021b      	lsls	r3, r3, #8
 8014102:	4313      	orrs	r3, r2
 8014104:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014106:	693b      	ldr	r3, [r7, #16]
 8014108:	781b      	ldrb	r3, [r3, #0]
 801410a:	f003 0301 	and.w	r3, r3, #1
 801410e:	2b00      	cmp	r3, #0
 8014110:	d023      	beq.n	801415a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	2b01      	cmp	r3, #1
 8014118:	d10f      	bne.n	801413a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	785b      	ldrb	r3, [r3, #1]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d11b      	bne.n	801415a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014122:	693b      	ldr	r3, [r7, #16]
 8014124:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014126:	2b5e      	cmp	r3, #94	@ 0x5e
 8014128:	d117      	bne.n	801415a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	7b5b      	ldrb	r3, [r3, #13]
 801412e:	f043 0310 	orr.w	r3, r3, #16
 8014132:	b2da      	uxtb	r2, r3
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	735a      	strb	r2, [r3, #13]
 8014138:	e00f      	b.n	801415a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801413a:	693b      	ldr	r3, [r7, #16]
 801413c:	2206      	movs	r2, #6
 801413e:	4928      	ldr	r1, [pc, #160]	@ (80141e0 <ethernet_input+0x118>)
 8014140:	4618      	mov	r0, r3
 8014142:	f000 f9ec 	bl	801451e <memcmp>
 8014146:	4603      	mov	r3, r0
 8014148:	2b00      	cmp	r3, #0
 801414a:	d106      	bne.n	801415a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	7b5b      	ldrb	r3, [r3, #13]
 8014150:	f043 0308 	orr.w	r3, r3, #8
 8014154:	b2da      	uxtb	r2, r3
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801415a:	89fb      	ldrh	r3, [r7, #14]
 801415c:	2b08      	cmp	r3, #8
 801415e:	d003      	beq.n	8014168 <ethernet_input+0xa0>
 8014160:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014164:	d014      	beq.n	8014190 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014166:	e032      	b.n	80141ce <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801416e:	f003 0308 	and.w	r3, r3, #8
 8014172:	2b00      	cmp	r3, #0
 8014174:	d024      	beq.n	80141c0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014176:	8afb      	ldrh	r3, [r7, #22]
 8014178:	4619      	mov	r1, r3
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f7f7 fa86 	bl	800b68c <pbuf_remove_header>
 8014180:	4603      	mov	r3, r0
 8014182:	2b00      	cmp	r3, #0
 8014184:	d11e      	bne.n	80141c4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014186:	6839      	ldr	r1, [r7, #0]
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f7fe ff21 	bl	8012fd0 <ip4_input>
      break;
 801418e:	e013      	b.n	80141b8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014196:	f003 0308 	and.w	r3, r3, #8
 801419a:	2b00      	cmp	r3, #0
 801419c:	d014      	beq.n	80141c8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801419e:	8afb      	ldrh	r3, [r7, #22]
 80141a0:	4619      	mov	r1, r3
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	f7f7 fa72 	bl	800b68c <pbuf_remove_header>
 80141a8:	4603      	mov	r3, r0
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d10e      	bne.n	80141cc <ethernet_input+0x104>
        etharp_input(p, netif);
 80141ae:	6839      	ldr	r1, [r7, #0]
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f7fe f8c1 	bl	8012338 <etharp_input>
      break;
 80141b6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80141b8:	2300      	movs	r3, #0
 80141ba:	e00c      	b.n	80141d6 <ethernet_input+0x10e>
    goto free_and_return;
 80141bc:	bf00      	nop
 80141be:	e006      	b.n	80141ce <ethernet_input+0x106>
        goto free_and_return;
 80141c0:	bf00      	nop
 80141c2:	e004      	b.n	80141ce <ethernet_input+0x106>
        goto free_and_return;
 80141c4:	bf00      	nop
 80141c6:	e002      	b.n	80141ce <ethernet_input+0x106>
        goto free_and_return;
 80141c8:	bf00      	nop
 80141ca:	e000      	b.n	80141ce <ethernet_input+0x106>
        goto free_and_return;
 80141cc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f7f7 fae2 	bl	800b798 <pbuf_free>
  return ERR_OK;
 80141d4:	2300      	movs	r3, #0
}
 80141d6:	4618      	mov	r0, r3
 80141d8:	3718      	adds	r7, #24
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	bf00      	nop
 80141e0:	08017d7c 	.word	0x08017d7c

080141e4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b086      	sub	sp, #24
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	60f8      	str	r0, [r7, #12]
 80141ec:	60b9      	str	r1, [r7, #8]
 80141ee:	607a      	str	r2, [r7, #4]
 80141f0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80141f2:	8c3b      	ldrh	r3, [r7, #32]
 80141f4:	4618      	mov	r0, r3
 80141f6:	f7f5 ff71 	bl	800a0dc <lwip_htons>
 80141fa:	4603      	mov	r3, r0
 80141fc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80141fe:	210e      	movs	r1, #14
 8014200:	68b8      	ldr	r0, [r7, #8]
 8014202:	f7f7 fa33 	bl	800b66c <pbuf_add_header>
 8014206:	4603      	mov	r3, r0
 8014208:	2b00      	cmp	r3, #0
 801420a:	d125      	bne.n	8014258 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	685b      	ldr	r3, [r3, #4]
 8014210:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014212:	693b      	ldr	r3, [r7, #16]
 8014214:	8afa      	ldrh	r2, [r7, #22]
 8014216:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014218:	693b      	ldr	r3, [r7, #16]
 801421a:	2206      	movs	r2, #6
 801421c:	6839      	ldr	r1, [r7, #0]
 801421e:	4618      	mov	r0, r3
 8014220:	f000 fa03 	bl	801462a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014224:	693b      	ldr	r3, [r7, #16]
 8014226:	3306      	adds	r3, #6
 8014228:	2206      	movs	r2, #6
 801422a:	6879      	ldr	r1, [r7, #4]
 801422c:	4618      	mov	r0, r3
 801422e:	f000 f9fc 	bl	801462a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014238:	2b06      	cmp	r3, #6
 801423a:	d006      	beq.n	801424a <ethernet_output+0x66>
 801423c:	4b0a      	ldr	r3, [pc, #40]	@ (8014268 <ethernet_output+0x84>)
 801423e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014242:	490a      	ldr	r1, [pc, #40]	@ (801426c <ethernet_output+0x88>)
 8014244:	480a      	ldr	r0, [pc, #40]	@ (8014270 <ethernet_output+0x8c>)
 8014246:	f000 f915 	bl	8014474 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	699b      	ldr	r3, [r3, #24]
 801424e:	68b9      	ldr	r1, [r7, #8]
 8014250:	68f8      	ldr	r0, [r7, #12]
 8014252:	4798      	blx	r3
 8014254:	4603      	mov	r3, r0
 8014256:	e002      	b.n	801425e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014258:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801425a:	f06f 0301 	mvn.w	r3, #1
}
 801425e:	4618      	mov	r0, r3
 8014260:	3718      	adds	r7, #24
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}
 8014266:	bf00      	nop
 8014268:	08017be8 	.word	0x08017be8
 801426c:	08017c20 	.word	0x08017c20
 8014270:	08017c54 	.word	0x08017c54

08014274 <rand>:
 8014274:	4b16      	ldr	r3, [pc, #88]	@ (80142d0 <rand+0x5c>)
 8014276:	b510      	push	{r4, lr}
 8014278:	681c      	ldr	r4, [r3, #0]
 801427a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801427c:	b9b3      	cbnz	r3, 80142ac <rand+0x38>
 801427e:	2018      	movs	r0, #24
 8014280:	f000 fa4a 	bl	8014718 <malloc>
 8014284:	4602      	mov	r2, r0
 8014286:	6320      	str	r0, [r4, #48]	@ 0x30
 8014288:	b920      	cbnz	r0, 8014294 <rand+0x20>
 801428a:	4b12      	ldr	r3, [pc, #72]	@ (80142d4 <rand+0x60>)
 801428c:	4812      	ldr	r0, [pc, #72]	@ (80142d8 <rand+0x64>)
 801428e:	2152      	movs	r1, #82	@ 0x52
 8014290:	f000 f9da 	bl	8014648 <__assert_func>
 8014294:	4911      	ldr	r1, [pc, #68]	@ (80142dc <rand+0x68>)
 8014296:	4b12      	ldr	r3, [pc, #72]	@ (80142e0 <rand+0x6c>)
 8014298:	e9c0 1300 	strd	r1, r3, [r0]
 801429c:	4b11      	ldr	r3, [pc, #68]	@ (80142e4 <rand+0x70>)
 801429e:	6083      	str	r3, [r0, #8]
 80142a0:	230b      	movs	r3, #11
 80142a2:	8183      	strh	r3, [r0, #12]
 80142a4:	2100      	movs	r1, #0
 80142a6:	2001      	movs	r0, #1
 80142a8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80142ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80142ae:	480e      	ldr	r0, [pc, #56]	@ (80142e8 <rand+0x74>)
 80142b0:	690b      	ldr	r3, [r1, #16]
 80142b2:	694c      	ldr	r4, [r1, #20]
 80142b4:	4a0d      	ldr	r2, [pc, #52]	@ (80142ec <rand+0x78>)
 80142b6:	4358      	muls	r0, r3
 80142b8:	fb02 0004 	mla	r0, r2, r4, r0
 80142bc:	fba3 3202 	umull	r3, r2, r3, r2
 80142c0:	3301      	adds	r3, #1
 80142c2:	eb40 0002 	adc.w	r0, r0, r2
 80142c6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80142ca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80142ce:	bd10      	pop	{r4, pc}
 80142d0:	200000ec 	.word	0x200000ec
 80142d4:	08017d8a 	.word	0x08017d8a
 80142d8:	08017da1 	.word	0x08017da1
 80142dc:	abcd330e 	.word	0xabcd330e
 80142e0:	e66d1234 	.word	0xe66d1234
 80142e4:	0005deec 	.word	0x0005deec
 80142e8:	5851f42d 	.word	0x5851f42d
 80142ec:	4c957f2d 	.word	0x4c957f2d

080142f0 <std>:
 80142f0:	2300      	movs	r3, #0
 80142f2:	b510      	push	{r4, lr}
 80142f4:	4604      	mov	r4, r0
 80142f6:	e9c0 3300 	strd	r3, r3, [r0]
 80142fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80142fe:	6083      	str	r3, [r0, #8]
 8014300:	8181      	strh	r1, [r0, #12]
 8014302:	6643      	str	r3, [r0, #100]	@ 0x64
 8014304:	81c2      	strh	r2, [r0, #14]
 8014306:	6183      	str	r3, [r0, #24]
 8014308:	4619      	mov	r1, r3
 801430a:	2208      	movs	r2, #8
 801430c:	305c      	adds	r0, #92	@ 0x5c
 801430e:	f000 f916 	bl	801453e <memset>
 8014312:	4b0d      	ldr	r3, [pc, #52]	@ (8014348 <std+0x58>)
 8014314:	6263      	str	r3, [r4, #36]	@ 0x24
 8014316:	4b0d      	ldr	r3, [pc, #52]	@ (801434c <std+0x5c>)
 8014318:	62a3      	str	r3, [r4, #40]	@ 0x28
 801431a:	4b0d      	ldr	r3, [pc, #52]	@ (8014350 <std+0x60>)
 801431c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801431e:	4b0d      	ldr	r3, [pc, #52]	@ (8014354 <std+0x64>)
 8014320:	6323      	str	r3, [r4, #48]	@ 0x30
 8014322:	4b0d      	ldr	r3, [pc, #52]	@ (8014358 <std+0x68>)
 8014324:	6224      	str	r4, [r4, #32]
 8014326:	429c      	cmp	r4, r3
 8014328:	d006      	beq.n	8014338 <std+0x48>
 801432a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801432e:	4294      	cmp	r4, r2
 8014330:	d002      	beq.n	8014338 <std+0x48>
 8014332:	33d0      	adds	r3, #208	@ 0xd0
 8014334:	429c      	cmp	r4, r3
 8014336:	d105      	bne.n	8014344 <std+0x54>
 8014338:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801433c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014340:	f000 b970 	b.w	8014624 <__retarget_lock_init_recursive>
 8014344:	bd10      	pop	{r4, pc}
 8014346:	bf00      	nop
 8014348:	08014499 	.word	0x08014499
 801434c:	080144bb 	.word	0x080144bb
 8014350:	080144f3 	.word	0x080144f3
 8014354:	08014517 	.word	0x08014517
 8014358:	2000b364 	.word	0x2000b364

0801435c <stdio_exit_handler>:
 801435c:	4a02      	ldr	r2, [pc, #8]	@ (8014368 <stdio_exit_handler+0xc>)
 801435e:	4903      	ldr	r1, [pc, #12]	@ (801436c <stdio_exit_handler+0x10>)
 8014360:	4803      	ldr	r0, [pc, #12]	@ (8014370 <stdio_exit_handler+0x14>)
 8014362:	f000 b869 	b.w	8014438 <_fwalk_sglue>
 8014366:	bf00      	nop
 8014368:	200000e0 	.word	0x200000e0
 801436c:	08014f29 	.word	0x08014f29
 8014370:	200000f0 	.word	0x200000f0

08014374 <cleanup_stdio>:
 8014374:	6841      	ldr	r1, [r0, #4]
 8014376:	4b0c      	ldr	r3, [pc, #48]	@ (80143a8 <cleanup_stdio+0x34>)
 8014378:	4299      	cmp	r1, r3
 801437a:	b510      	push	{r4, lr}
 801437c:	4604      	mov	r4, r0
 801437e:	d001      	beq.n	8014384 <cleanup_stdio+0x10>
 8014380:	f000 fdd2 	bl	8014f28 <_fflush_r>
 8014384:	68a1      	ldr	r1, [r4, #8]
 8014386:	4b09      	ldr	r3, [pc, #36]	@ (80143ac <cleanup_stdio+0x38>)
 8014388:	4299      	cmp	r1, r3
 801438a:	d002      	beq.n	8014392 <cleanup_stdio+0x1e>
 801438c:	4620      	mov	r0, r4
 801438e:	f000 fdcb 	bl	8014f28 <_fflush_r>
 8014392:	68e1      	ldr	r1, [r4, #12]
 8014394:	4b06      	ldr	r3, [pc, #24]	@ (80143b0 <cleanup_stdio+0x3c>)
 8014396:	4299      	cmp	r1, r3
 8014398:	d004      	beq.n	80143a4 <cleanup_stdio+0x30>
 801439a:	4620      	mov	r0, r4
 801439c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143a0:	f000 bdc2 	b.w	8014f28 <_fflush_r>
 80143a4:	bd10      	pop	{r4, pc}
 80143a6:	bf00      	nop
 80143a8:	2000b364 	.word	0x2000b364
 80143ac:	2000b3cc 	.word	0x2000b3cc
 80143b0:	2000b434 	.word	0x2000b434

080143b4 <global_stdio_init.part.0>:
 80143b4:	b510      	push	{r4, lr}
 80143b6:	4b0b      	ldr	r3, [pc, #44]	@ (80143e4 <global_stdio_init.part.0+0x30>)
 80143b8:	4c0b      	ldr	r4, [pc, #44]	@ (80143e8 <global_stdio_init.part.0+0x34>)
 80143ba:	4a0c      	ldr	r2, [pc, #48]	@ (80143ec <global_stdio_init.part.0+0x38>)
 80143bc:	601a      	str	r2, [r3, #0]
 80143be:	4620      	mov	r0, r4
 80143c0:	2200      	movs	r2, #0
 80143c2:	2104      	movs	r1, #4
 80143c4:	f7ff ff94 	bl	80142f0 <std>
 80143c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80143cc:	2201      	movs	r2, #1
 80143ce:	2109      	movs	r1, #9
 80143d0:	f7ff ff8e 	bl	80142f0 <std>
 80143d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80143d8:	2202      	movs	r2, #2
 80143da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143de:	2112      	movs	r1, #18
 80143e0:	f7ff bf86 	b.w	80142f0 <std>
 80143e4:	2000b49c 	.word	0x2000b49c
 80143e8:	2000b364 	.word	0x2000b364
 80143ec:	0801435d 	.word	0x0801435d

080143f0 <__sfp_lock_acquire>:
 80143f0:	4801      	ldr	r0, [pc, #4]	@ (80143f8 <__sfp_lock_acquire+0x8>)
 80143f2:	f000 b918 	b.w	8014626 <__retarget_lock_acquire_recursive>
 80143f6:	bf00      	nop
 80143f8:	2000b4a5 	.word	0x2000b4a5

080143fc <__sfp_lock_release>:
 80143fc:	4801      	ldr	r0, [pc, #4]	@ (8014404 <__sfp_lock_release+0x8>)
 80143fe:	f000 b913 	b.w	8014628 <__retarget_lock_release_recursive>
 8014402:	bf00      	nop
 8014404:	2000b4a5 	.word	0x2000b4a5

08014408 <__sinit>:
 8014408:	b510      	push	{r4, lr}
 801440a:	4604      	mov	r4, r0
 801440c:	f7ff fff0 	bl	80143f0 <__sfp_lock_acquire>
 8014410:	6a23      	ldr	r3, [r4, #32]
 8014412:	b11b      	cbz	r3, 801441c <__sinit+0x14>
 8014414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014418:	f7ff bff0 	b.w	80143fc <__sfp_lock_release>
 801441c:	4b04      	ldr	r3, [pc, #16]	@ (8014430 <__sinit+0x28>)
 801441e:	6223      	str	r3, [r4, #32]
 8014420:	4b04      	ldr	r3, [pc, #16]	@ (8014434 <__sinit+0x2c>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d1f5      	bne.n	8014414 <__sinit+0xc>
 8014428:	f7ff ffc4 	bl	80143b4 <global_stdio_init.part.0>
 801442c:	e7f2      	b.n	8014414 <__sinit+0xc>
 801442e:	bf00      	nop
 8014430:	08014375 	.word	0x08014375
 8014434:	2000b49c 	.word	0x2000b49c

08014438 <_fwalk_sglue>:
 8014438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801443c:	4607      	mov	r7, r0
 801443e:	4688      	mov	r8, r1
 8014440:	4614      	mov	r4, r2
 8014442:	2600      	movs	r6, #0
 8014444:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014448:	f1b9 0901 	subs.w	r9, r9, #1
 801444c:	d505      	bpl.n	801445a <_fwalk_sglue+0x22>
 801444e:	6824      	ldr	r4, [r4, #0]
 8014450:	2c00      	cmp	r4, #0
 8014452:	d1f7      	bne.n	8014444 <_fwalk_sglue+0xc>
 8014454:	4630      	mov	r0, r6
 8014456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801445a:	89ab      	ldrh	r3, [r5, #12]
 801445c:	2b01      	cmp	r3, #1
 801445e:	d907      	bls.n	8014470 <_fwalk_sglue+0x38>
 8014460:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014464:	3301      	adds	r3, #1
 8014466:	d003      	beq.n	8014470 <_fwalk_sglue+0x38>
 8014468:	4629      	mov	r1, r5
 801446a:	4638      	mov	r0, r7
 801446c:	47c0      	blx	r8
 801446e:	4306      	orrs	r6, r0
 8014470:	3568      	adds	r5, #104	@ 0x68
 8014472:	e7e9      	b.n	8014448 <_fwalk_sglue+0x10>

08014474 <iprintf>:
 8014474:	b40f      	push	{r0, r1, r2, r3}
 8014476:	b507      	push	{r0, r1, r2, lr}
 8014478:	4906      	ldr	r1, [pc, #24]	@ (8014494 <iprintf+0x20>)
 801447a:	ab04      	add	r3, sp, #16
 801447c:	6808      	ldr	r0, [r1, #0]
 801447e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014482:	6881      	ldr	r1, [r0, #8]
 8014484:	9301      	str	r3, [sp, #4]
 8014486:	f000 fa27 	bl	80148d8 <_vfiprintf_r>
 801448a:	b003      	add	sp, #12
 801448c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014490:	b004      	add	sp, #16
 8014492:	4770      	bx	lr
 8014494:	200000ec 	.word	0x200000ec

08014498 <__sread>:
 8014498:	b510      	push	{r4, lr}
 801449a:	460c      	mov	r4, r1
 801449c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144a0:	f000 f878 	bl	8014594 <_read_r>
 80144a4:	2800      	cmp	r0, #0
 80144a6:	bfab      	itete	ge
 80144a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80144aa:	89a3      	ldrhlt	r3, [r4, #12]
 80144ac:	181b      	addge	r3, r3, r0
 80144ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80144b2:	bfac      	ite	ge
 80144b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80144b6:	81a3      	strhlt	r3, [r4, #12]
 80144b8:	bd10      	pop	{r4, pc}

080144ba <__swrite>:
 80144ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144be:	461f      	mov	r7, r3
 80144c0:	898b      	ldrh	r3, [r1, #12]
 80144c2:	05db      	lsls	r3, r3, #23
 80144c4:	4605      	mov	r5, r0
 80144c6:	460c      	mov	r4, r1
 80144c8:	4616      	mov	r6, r2
 80144ca:	d505      	bpl.n	80144d8 <__swrite+0x1e>
 80144cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144d0:	2302      	movs	r3, #2
 80144d2:	2200      	movs	r2, #0
 80144d4:	f000 f84c 	bl	8014570 <_lseek_r>
 80144d8:	89a3      	ldrh	r3, [r4, #12]
 80144da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80144de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80144e2:	81a3      	strh	r3, [r4, #12]
 80144e4:	4632      	mov	r2, r6
 80144e6:	463b      	mov	r3, r7
 80144e8:	4628      	mov	r0, r5
 80144ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80144ee:	f000 b863 	b.w	80145b8 <_write_r>

080144f2 <__sseek>:
 80144f2:	b510      	push	{r4, lr}
 80144f4:	460c      	mov	r4, r1
 80144f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144fa:	f000 f839 	bl	8014570 <_lseek_r>
 80144fe:	1c43      	adds	r3, r0, #1
 8014500:	89a3      	ldrh	r3, [r4, #12]
 8014502:	bf15      	itete	ne
 8014504:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014506:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801450a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801450e:	81a3      	strheq	r3, [r4, #12]
 8014510:	bf18      	it	ne
 8014512:	81a3      	strhne	r3, [r4, #12]
 8014514:	bd10      	pop	{r4, pc}

08014516 <__sclose>:
 8014516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801451a:	f000 b819 	b.w	8014550 <_close_r>

0801451e <memcmp>:
 801451e:	b510      	push	{r4, lr}
 8014520:	3901      	subs	r1, #1
 8014522:	4402      	add	r2, r0
 8014524:	4290      	cmp	r0, r2
 8014526:	d101      	bne.n	801452c <memcmp+0xe>
 8014528:	2000      	movs	r0, #0
 801452a:	e005      	b.n	8014538 <memcmp+0x1a>
 801452c:	7803      	ldrb	r3, [r0, #0]
 801452e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014532:	42a3      	cmp	r3, r4
 8014534:	d001      	beq.n	801453a <memcmp+0x1c>
 8014536:	1b18      	subs	r0, r3, r4
 8014538:	bd10      	pop	{r4, pc}
 801453a:	3001      	adds	r0, #1
 801453c:	e7f2      	b.n	8014524 <memcmp+0x6>

0801453e <memset>:
 801453e:	4402      	add	r2, r0
 8014540:	4603      	mov	r3, r0
 8014542:	4293      	cmp	r3, r2
 8014544:	d100      	bne.n	8014548 <memset+0xa>
 8014546:	4770      	bx	lr
 8014548:	f803 1b01 	strb.w	r1, [r3], #1
 801454c:	e7f9      	b.n	8014542 <memset+0x4>
	...

08014550 <_close_r>:
 8014550:	b538      	push	{r3, r4, r5, lr}
 8014552:	4d06      	ldr	r5, [pc, #24]	@ (801456c <_close_r+0x1c>)
 8014554:	2300      	movs	r3, #0
 8014556:	4604      	mov	r4, r0
 8014558:	4608      	mov	r0, r1
 801455a:	602b      	str	r3, [r5, #0]
 801455c:	f7ed fcde 	bl	8001f1c <_close>
 8014560:	1c43      	adds	r3, r0, #1
 8014562:	d102      	bne.n	801456a <_close_r+0x1a>
 8014564:	682b      	ldr	r3, [r5, #0]
 8014566:	b103      	cbz	r3, 801456a <_close_r+0x1a>
 8014568:	6023      	str	r3, [r4, #0]
 801456a:	bd38      	pop	{r3, r4, r5, pc}
 801456c:	2000b4a0 	.word	0x2000b4a0

08014570 <_lseek_r>:
 8014570:	b538      	push	{r3, r4, r5, lr}
 8014572:	4d07      	ldr	r5, [pc, #28]	@ (8014590 <_lseek_r+0x20>)
 8014574:	4604      	mov	r4, r0
 8014576:	4608      	mov	r0, r1
 8014578:	4611      	mov	r1, r2
 801457a:	2200      	movs	r2, #0
 801457c:	602a      	str	r2, [r5, #0]
 801457e:	461a      	mov	r2, r3
 8014580:	f7ed fcf3 	bl	8001f6a <_lseek>
 8014584:	1c43      	adds	r3, r0, #1
 8014586:	d102      	bne.n	801458e <_lseek_r+0x1e>
 8014588:	682b      	ldr	r3, [r5, #0]
 801458a:	b103      	cbz	r3, 801458e <_lseek_r+0x1e>
 801458c:	6023      	str	r3, [r4, #0]
 801458e:	bd38      	pop	{r3, r4, r5, pc}
 8014590:	2000b4a0 	.word	0x2000b4a0

08014594 <_read_r>:
 8014594:	b538      	push	{r3, r4, r5, lr}
 8014596:	4d07      	ldr	r5, [pc, #28]	@ (80145b4 <_read_r+0x20>)
 8014598:	4604      	mov	r4, r0
 801459a:	4608      	mov	r0, r1
 801459c:	4611      	mov	r1, r2
 801459e:	2200      	movs	r2, #0
 80145a0:	602a      	str	r2, [r5, #0]
 80145a2:	461a      	mov	r2, r3
 80145a4:	f7ed fc81 	bl	8001eaa <_read>
 80145a8:	1c43      	adds	r3, r0, #1
 80145aa:	d102      	bne.n	80145b2 <_read_r+0x1e>
 80145ac:	682b      	ldr	r3, [r5, #0]
 80145ae:	b103      	cbz	r3, 80145b2 <_read_r+0x1e>
 80145b0:	6023      	str	r3, [r4, #0]
 80145b2:	bd38      	pop	{r3, r4, r5, pc}
 80145b4:	2000b4a0 	.word	0x2000b4a0

080145b8 <_write_r>:
 80145b8:	b538      	push	{r3, r4, r5, lr}
 80145ba:	4d07      	ldr	r5, [pc, #28]	@ (80145d8 <_write_r+0x20>)
 80145bc:	4604      	mov	r4, r0
 80145be:	4608      	mov	r0, r1
 80145c0:	4611      	mov	r1, r2
 80145c2:	2200      	movs	r2, #0
 80145c4:	602a      	str	r2, [r5, #0]
 80145c6:	461a      	mov	r2, r3
 80145c8:	f7ed fc8c 	bl	8001ee4 <_write>
 80145cc:	1c43      	adds	r3, r0, #1
 80145ce:	d102      	bne.n	80145d6 <_write_r+0x1e>
 80145d0:	682b      	ldr	r3, [r5, #0]
 80145d2:	b103      	cbz	r3, 80145d6 <_write_r+0x1e>
 80145d4:	6023      	str	r3, [r4, #0]
 80145d6:	bd38      	pop	{r3, r4, r5, pc}
 80145d8:	2000b4a0 	.word	0x2000b4a0

080145dc <__libc_init_array>:
 80145dc:	b570      	push	{r4, r5, r6, lr}
 80145de:	4d0d      	ldr	r5, [pc, #52]	@ (8014614 <__libc_init_array+0x38>)
 80145e0:	4c0d      	ldr	r4, [pc, #52]	@ (8014618 <__libc_init_array+0x3c>)
 80145e2:	1b64      	subs	r4, r4, r5
 80145e4:	10a4      	asrs	r4, r4, #2
 80145e6:	2600      	movs	r6, #0
 80145e8:	42a6      	cmp	r6, r4
 80145ea:	d109      	bne.n	8014600 <__libc_init_array+0x24>
 80145ec:	4d0b      	ldr	r5, [pc, #44]	@ (801461c <__libc_init_array+0x40>)
 80145ee:	4c0c      	ldr	r4, [pc, #48]	@ (8014620 <__libc_init_array+0x44>)
 80145f0:	f000 fe48 	bl	8015284 <_init>
 80145f4:	1b64      	subs	r4, r4, r5
 80145f6:	10a4      	asrs	r4, r4, #2
 80145f8:	2600      	movs	r6, #0
 80145fa:	42a6      	cmp	r6, r4
 80145fc:	d105      	bne.n	801460a <__libc_init_array+0x2e>
 80145fe:	bd70      	pop	{r4, r5, r6, pc}
 8014600:	f855 3b04 	ldr.w	r3, [r5], #4
 8014604:	4798      	blx	r3
 8014606:	3601      	adds	r6, #1
 8014608:	e7ee      	b.n	80145e8 <__libc_init_array+0xc>
 801460a:	f855 3b04 	ldr.w	r3, [r5], #4
 801460e:	4798      	blx	r3
 8014610:	3601      	adds	r6, #1
 8014612:	e7f2      	b.n	80145fa <__libc_init_array+0x1e>
 8014614:	08017e70 	.word	0x08017e70
 8014618:	08017e70 	.word	0x08017e70
 801461c:	08017e70 	.word	0x08017e70
 8014620:	08017e74 	.word	0x08017e74

08014624 <__retarget_lock_init_recursive>:
 8014624:	4770      	bx	lr

08014626 <__retarget_lock_acquire_recursive>:
 8014626:	4770      	bx	lr

08014628 <__retarget_lock_release_recursive>:
 8014628:	4770      	bx	lr

0801462a <memcpy>:
 801462a:	440a      	add	r2, r1
 801462c:	4291      	cmp	r1, r2
 801462e:	f100 33ff 	add.w	r3, r0, #4294967295
 8014632:	d100      	bne.n	8014636 <memcpy+0xc>
 8014634:	4770      	bx	lr
 8014636:	b510      	push	{r4, lr}
 8014638:	f811 4b01 	ldrb.w	r4, [r1], #1
 801463c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014640:	4291      	cmp	r1, r2
 8014642:	d1f9      	bne.n	8014638 <memcpy+0xe>
 8014644:	bd10      	pop	{r4, pc}
	...

08014648 <__assert_func>:
 8014648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801464a:	4614      	mov	r4, r2
 801464c:	461a      	mov	r2, r3
 801464e:	4b09      	ldr	r3, [pc, #36]	@ (8014674 <__assert_func+0x2c>)
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	4605      	mov	r5, r0
 8014654:	68d8      	ldr	r0, [r3, #12]
 8014656:	b14c      	cbz	r4, 801466c <__assert_func+0x24>
 8014658:	4b07      	ldr	r3, [pc, #28]	@ (8014678 <__assert_func+0x30>)
 801465a:	9100      	str	r1, [sp, #0]
 801465c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014660:	4906      	ldr	r1, [pc, #24]	@ (801467c <__assert_func+0x34>)
 8014662:	462b      	mov	r3, r5
 8014664:	f000 fc88 	bl	8014f78 <fiprintf>
 8014668:	f000 fd3c 	bl	80150e4 <abort>
 801466c:	4b04      	ldr	r3, [pc, #16]	@ (8014680 <__assert_func+0x38>)
 801466e:	461c      	mov	r4, r3
 8014670:	e7f3      	b.n	801465a <__assert_func+0x12>
 8014672:	bf00      	nop
 8014674:	200000ec 	.word	0x200000ec
 8014678:	08017df9 	.word	0x08017df9
 801467c:	08017e06 	.word	0x08017e06
 8014680:	08017e34 	.word	0x08017e34

08014684 <_free_r>:
 8014684:	b538      	push	{r3, r4, r5, lr}
 8014686:	4605      	mov	r5, r0
 8014688:	2900      	cmp	r1, #0
 801468a:	d041      	beq.n	8014710 <_free_r+0x8c>
 801468c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014690:	1f0c      	subs	r4, r1, #4
 8014692:	2b00      	cmp	r3, #0
 8014694:	bfb8      	it	lt
 8014696:	18e4      	addlt	r4, r4, r3
 8014698:	f000 f8e8 	bl	801486c <__malloc_lock>
 801469c:	4a1d      	ldr	r2, [pc, #116]	@ (8014714 <_free_r+0x90>)
 801469e:	6813      	ldr	r3, [r2, #0]
 80146a0:	b933      	cbnz	r3, 80146b0 <_free_r+0x2c>
 80146a2:	6063      	str	r3, [r4, #4]
 80146a4:	6014      	str	r4, [r2, #0]
 80146a6:	4628      	mov	r0, r5
 80146a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146ac:	f000 b8e4 	b.w	8014878 <__malloc_unlock>
 80146b0:	42a3      	cmp	r3, r4
 80146b2:	d908      	bls.n	80146c6 <_free_r+0x42>
 80146b4:	6820      	ldr	r0, [r4, #0]
 80146b6:	1821      	adds	r1, r4, r0
 80146b8:	428b      	cmp	r3, r1
 80146ba:	bf01      	itttt	eq
 80146bc:	6819      	ldreq	r1, [r3, #0]
 80146be:	685b      	ldreq	r3, [r3, #4]
 80146c0:	1809      	addeq	r1, r1, r0
 80146c2:	6021      	streq	r1, [r4, #0]
 80146c4:	e7ed      	b.n	80146a2 <_free_r+0x1e>
 80146c6:	461a      	mov	r2, r3
 80146c8:	685b      	ldr	r3, [r3, #4]
 80146ca:	b10b      	cbz	r3, 80146d0 <_free_r+0x4c>
 80146cc:	42a3      	cmp	r3, r4
 80146ce:	d9fa      	bls.n	80146c6 <_free_r+0x42>
 80146d0:	6811      	ldr	r1, [r2, #0]
 80146d2:	1850      	adds	r0, r2, r1
 80146d4:	42a0      	cmp	r0, r4
 80146d6:	d10b      	bne.n	80146f0 <_free_r+0x6c>
 80146d8:	6820      	ldr	r0, [r4, #0]
 80146da:	4401      	add	r1, r0
 80146dc:	1850      	adds	r0, r2, r1
 80146de:	4283      	cmp	r3, r0
 80146e0:	6011      	str	r1, [r2, #0]
 80146e2:	d1e0      	bne.n	80146a6 <_free_r+0x22>
 80146e4:	6818      	ldr	r0, [r3, #0]
 80146e6:	685b      	ldr	r3, [r3, #4]
 80146e8:	6053      	str	r3, [r2, #4]
 80146ea:	4408      	add	r0, r1
 80146ec:	6010      	str	r0, [r2, #0]
 80146ee:	e7da      	b.n	80146a6 <_free_r+0x22>
 80146f0:	d902      	bls.n	80146f8 <_free_r+0x74>
 80146f2:	230c      	movs	r3, #12
 80146f4:	602b      	str	r3, [r5, #0]
 80146f6:	e7d6      	b.n	80146a6 <_free_r+0x22>
 80146f8:	6820      	ldr	r0, [r4, #0]
 80146fa:	1821      	adds	r1, r4, r0
 80146fc:	428b      	cmp	r3, r1
 80146fe:	bf04      	itt	eq
 8014700:	6819      	ldreq	r1, [r3, #0]
 8014702:	685b      	ldreq	r3, [r3, #4]
 8014704:	6063      	str	r3, [r4, #4]
 8014706:	bf04      	itt	eq
 8014708:	1809      	addeq	r1, r1, r0
 801470a:	6021      	streq	r1, [r4, #0]
 801470c:	6054      	str	r4, [r2, #4]
 801470e:	e7ca      	b.n	80146a6 <_free_r+0x22>
 8014710:	bd38      	pop	{r3, r4, r5, pc}
 8014712:	bf00      	nop
 8014714:	2000b4ac 	.word	0x2000b4ac

08014718 <malloc>:
 8014718:	4b02      	ldr	r3, [pc, #8]	@ (8014724 <malloc+0xc>)
 801471a:	4601      	mov	r1, r0
 801471c:	6818      	ldr	r0, [r3, #0]
 801471e:	f000 b825 	b.w	801476c <_malloc_r>
 8014722:	bf00      	nop
 8014724:	200000ec 	.word	0x200000ec

08014728 <sbrk_aligned>:
 8014728:	b570      	push	{r4, r5, r6, lr}
 801472a:	4e0f      	ldr	r6, [pc, #60]	@ (8014768 <sbrk_aligned+0x40>)
 801472c:	460c      	mov	r4, r1
 801472e:	6831      	ldr	r1, [r6, #0]
 8014730:	4605      	mov	r5, r0
 8014732:	b911      	cbnz	r1, 801473a <sbrk_aligned+0x12>
 8014734:	f000 fcc6 	bl	80150c4 <_sbrk_r>
 8014738:	6030      	str	r0, [r6, #0]
 801473a:	4621      	mov	r1, r4
 801473c:	4628      	mov	r0, r5
 801473e:	f000 fcc1 	bl	80150c4 <_sbrk_r>
 8014742:	1c43      	adds	r3, r0, #1
 8014744:	d103      	bne.n	801474e <sbrk_aligned+0x26>
 8014746:	f04f 34ff 	mov.w	r4, #4294967295
 801474a:	4620      	mov	r0, r4
 801474c:	bd70      	pop	{r4, r5, r6, pc}
 801474e:	1cc4      	adds	r4, r0, #3
 8014750:	f024 0403 	bic.w	r4, r4, #3
 8014754:	42a0      	cmp	r0, r4
 8014756:	d0f8      	beq.n	801474a <sbrk_aligned+0x22>
 8014758:	1a21      	subs	r1, r4, r0
 801475a:	4628      	mov	r0, r5
 801475c:	f000 fcb2 	bl	80150c4 <_sbrk_r>
 8014760:	3001      	adds	r0, #1
 8014762:	d1f2      	bne.n	801474a <sbrk_aligned+0x22>
 8014764:	e7ef      	b.n	8014746 <sbrk_aligned+0x1e>
 8014766:	bf00      	nop
 8014768:	2000b4a8 	.word	0x2000b4a8

0801476c <_malloc_r>:
 801476c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014770:	1ccd      	adds	r5, r1, #3
 8014772:	f025 0503 	bic.w	r5, r5, #3
 8014776:	3508      	adds	r5, #8
 8014778:	2d0c      	cmp	r5, #12
 801477a:	bf38      	it	cc
 801477c:	250c      	movcc	r5, #12
 801477e:	2d00      	cmp	r5, #0
 8014780:	4606      	mov	r6, r0
 8014782:	db01      	blt.n	8014788 <_malloc_r+0x1c>
 8014784:	42a9      	cmp	r1, r5
 8014786:	d904      	bls.n	8014792 <_malloc_r+0x26>
 8014788:	230c      	movs	r3, #12
 801478a:	6033      	str	r3, [r6, #0]
 801478c:	2000      	movs	r0, #0
 801478e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014792:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014868 <_malloc_r+0xfc>
 8014796:	f000 f869 	bl	801486c <__malloc_lock>
 801479a:	f8d8 3000 	ldr.w	r3, [r8]
 801479e:	461c      	mov	r4, r3
 80147a0:	bb44      	cbnz	r4, 80147f4 <_malloc_r+0x88>
 80147a2:	4629      	mov	r1, r5
 80147a4:	4630      	mov	r0, r6
 80147a6:	f7ff ffbf 	bl	8014728 <sbrk_aligned>
 80147aa:	1c43      	adds	r3, r0, #1
 80147ac:	4604      	mov	r4, r0
 80147ae:	d158      	bne.n	8014862 <_malloc_r+0xf6>
 80147b0:	f8d8 4000 	ldr.w	r4, [r8]
 80147b4:	4627      	mov	r7, r4
 80147b6:	2f00      	cmp	r7, #0
 80147b8:	d143      	bne.n	8014842 <_malloc_r+0xd6>
 80147ba:	2c00      	cmp	r4, #0
 80147bc:	d04b      	beq.n	8014856 <_malloc_r+0xea>
 80147be:	6823      	ldr	r3, [r4, #0]
 80147c0:	4639      	mov	r1, r7
 80147c2:	4630      	mov	r0, r6
 80147c4:	eb04 0903 	add.w	r9, r4, r3
 80147c8:	f000 fc7c 	bl	80150c4 <_sbrk_r>
 80147cc:	4581      	cmp	r9, r0
 80147ce:	d142      	bne.n	8014856 <_malloc_r+0xea>
 80147d0:	6821      	ldr	r1, [r4, #0]
 80147d2:	1a6d      	subs	r5, r5, r1
 80147d4:	4629      	mov	r1, r5
 80147d6:	4630      	mov	r0, r6
 80147d8:	f7ff ffa6 	bl	8014728 <sbrk_aligned>
 80147dc:	3001      	adds	r0, #1
 80147de:	d03a      	beq.n	8014856 <_malloc_r+0xea>
 80147e0:	6823      	ldr	r3, [r4, #0]
 80147e2:	442b      	add	r3, r5
 80147e4:	6023      	str	r3, [r4, #0]
 80147e6:	f8d8 3000 	ldr.w	r3, [r8]
 80147ea:	685a      	ldr	r2, [r3, #4]
 80147ec:	bb62      	cbnz	r2, 8014848 <_malloc_r+0xdc>
 80147ee:	f8c8 7000 	str.w	r7, [r8]
 80147f2:	e00f      	b.n	8014814 <_malloc_r+0xa8>
 80147f4:	6822      	ldr	r2, [r4, #0]
 80147f6:	1b52      	subs	r2, r2, r5
 80147f8:	d420      	bmi.n	801483c <_malloc_r+0xd0>
 80147fa:	2a0b      	cmp	r2, #11
 80147fc:	d917      	bls.n	801482e <_malloc_r+0xc2>
 80147fe:	1961      	adds	r1, r4, r5
 8014800:	42a3      	cmp	r3, r4
 8014802:	6025      	str	r5, [r4, #0]
 8014804:	bf18      	it	ne
 8014806:	6059      	strne	r1, [r3, #4]
 8014808:	6863      	ldr	r3, [r4, #4]
 801480a:	bf08      	it	eq
 801480c:	f8c8 1000 	streq.w	r1, [r8]
 8014810:	5162      	str	r2, [r4, r5]
 8014812:	604b      	str	r3, [r1, #4]
 8014814:	4630      	mov	r0, r6
 8014816:	f000 f82f 	bl	8014878 <__malloc_unlock>
 801481a:	f104 000b 	add.w	r0, r4, #11
 801481e:	1d23      	adds	r3, r4, #4
 8014820:	f020 0007 	bic.w	r0, r0, #7
 8014824:	1ac2      	subs	r2, r0, r3
 8014826:	bf1c      	itt	ne
 8014828:	1a1b      	subne	r3, r3, r0
 801482a:	50a3      	strne	r3, [r4, r2]
 801482c:	e7af      	b.n	801478e <_malloc_r+0x22>
 801482e:	6862      	ldr	r2, [r4, #4]
 8014830:	42a3      	cmp	r3, r4
 8014832:	bf0c      	ite	eq
 8014834:	f8c8 2000 	streq.w	r2, [r8]
 8014838:	605a      	strne	r2, [r3, #4]
 801483a:	e7eb      	b.n	8014814 <_malloc_r+0xa8>
 801483c:	4623      	mov	r3, r4
 801483e:	6864      	ldr	r4, [r4, #4]
 8014840:	e7ae      	b.n	80147a0 <_malloc_r+0x34>
 8014842:	463c      	mov	r4, r7
 8014844:	687f      	ldr	r7, [r7, #4]
 8014846:	e7b6      	b.n	80147b6 <_malloc_r+0x4a>
 8014848:	461a      	mov	r2, r3
 801484a:	685b      	ldr	r3, [r3, #4]
 801484c:	42a3      	cmp	r3, r4
 801484e:	d1fb      	bne.n	8014848 <_malloc_r+0xdc>
 8014850:	2300      	movs	r3, #0
 8014852:	6053      	str	r3, [r2, #4]
 8014854:	e7de      	b.n	8014814 <_malloc_r+0xa8>
 8014856:	230c      	movs	r3, #12
 8014858:	6033      	str	r3, [r6, #0]
 801485a:	4630      	mov	r0, r6
 801485c:	f000 f80c 	bl	8014878 <__malloc_unlock>
 8014860:	e794      	b.n	801478c <_malloc_r+0x20>
 8014862:	6005      	str	r5, [r0, #0]
 8014864:	e7d6      	b.n	8014814 <_malloc_r+0xa8>
 8014866:	bf00      	nop
 8014868:	2000b4ac 	.word	0x2000b4ac

0801486c <__malloc_lock>:
 801486c:	4801      	ldr	r0, [pc, #4]	@ (8014874 <__malloc_lock+0x8>)
 801486e:	f7ff beda 	b.w	8014626 <__retarget_lock_acquire_recursive>
 8014872:	bf00      	nop
 8014874:	2000b4a4 	.word	0x2000b4a4

08014878 <__malloc_unlock>:
 8014878:	4801      	ldr	r0, [pc, #4]	@ (8014880 <__malloc_unlock+0x8>)
 801487a:	f7ff bed5 	b.w	8014628 <__retarget_lock_release_recursive>
 801487e:	bf00      	nop
 8014880:	2000b4a4 	.word	0x2000b4a4

08014884 <__sfputc_r>:
 8014884:	6893      	ldr	r3, [r2, #8]
 8014886:	3b01      	subs	r3, #1
 8014888:	2b00      	cmp	r3, #0
 801488a:	b410      	push	{r4}
 801488c:	6093      	str	r3, [r2, #8]
 801488e:	da08      	bge.n	80148a2 <__sfputc_r+0x1e>
 8014890:	6994      	ldr	r4, [r2, #24]
 8014892:	42a3      	cmp	r3, r4
 8014894:	db01      	blt.n	801489a <__sfputc_r+0x16>
 8014896:	290a      	cmp	r1, #10
 8014898:	d103      	bne.n	80148a2 <__sfputc_r+0x1e>
 801489a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801489e:	f000 bb7d 	b.w	8014f9c <__swbuf_r>
 80148a2:	6813      	ldr	r3, [r2, #0]
 80148a4:	1c58      	adds	r0, r3, #1
 80148a6:	6010      	str	r0, [r2, #0]
 80148a8:	7019      	strb	r1, [r3, #0]
 80148aa:	4608      	mov	r0, r1
 80148ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148b0:	4770      	bx	lr

080148b2 <__sfputs_r>:
 80148b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148b4:	4606      	mov	r6, r0
 80148b6:	460f      	mov	r7, r1
 80148b8:	4614      	mov	r4, r2
 80148ba:	18d5      	adds	r5, r2, r3
 80148bc:	42ac      	cmp	r4, r5
 80148be:	d101      	bne.n	80148c4 <__sfputs_r+0x12>
 80148c0:	2000      	movs	r0, #0
 80148c2:	e007      	b.n	80148d4 <__sfputs_r+0x22>
 80148c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148c8:	463a      	mov	r2, r7
 80148ca:	4630      	mov	r0, r6
 80148cc:	f7ff ffda 	bl	8014884 <__sfputc_r>
 80148d0:	1c43      	adds	r3, r0, #1
 80148d2:	d1f3      	bne.n	80148bc <__sfputs_r+0xa>
 80148d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080148d8 <_vfiprintf_r>:
 80148d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148dc:	460d      	mov	r5, r1
 80148de:	b09d      	sub	sp, #116	@ 0x74
 80148e0:	4614      	mov	r4, r2
 80148e2:	4698      	mov	r8, r3
 80148e4:	4606      	mov	r6, r0
 80148e6:	b118      	cbz	r0, 80148f0 <_vfiprintf_r+0x18>
 80148e8:	6a03      	ldr	r3, [r0, #32]
 80148ea:	b90b      	cbnz	r3, 80148f0 <_vfiprintf_r+0x18>
 80148ec:	f7ff fd8c 	bl	8014408 <__sinit>
 80148f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80148f2:	07d9      	lsls	r1, r3, #31
 80148f4:	d405      	bmi.n	8014902 <_vfiprintf_r+0x2a>
 80148f6:	89ab      	ldrh	r3, [r5, #12]
 80148f8:	059a      	lsls	r2, r3, #22
 80148fa:	d402      	bmi.n	8014902 <_vfiprintf_r+0x2a>
 80148fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80148fe:	f7ff fe92 	bl	8014626 <__retarget_lock_acquire_recursive>
 8014902:	89ab      	ldrh	r3, [r5, #12]
 8014904:	071b      	lsls	r3, r3, #28
 8014906:	d501      	bpl.n	801490c <_vfiprintf_r+0x34>
 8014908:	692b      	ldr	r3, [r5, #16]
 801490a:	b99b      	cbnz	r3, 8014934 <_vfiprintf_r+0x5c>
 801490c:	4629      	mov	r1, r5
 801490e:	4630      	mov	r0, r6
 8014910:	f000 fb82 	bl	8015018 <__swsetup_r>
 8014914:	b170      	cbz	r0, 8014934 <_vfiprintf_r+0x5c>
 8014916:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014918:	07dc      	lsls	r4, r3, #31
 801491a:	d504      	bpl.n	8014926 <_vfiprintf_r+0x4e>
 801491c:	f04f 30ff 	mov.w	r0, #4294967295
 8014920:	b01d      	add	sp, #116	@ 0x74
 8014922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014926:	89ab      	ldrh	r3, [r5, #12]
 8014928:	0598      	lsls	r0, r3, #22
 801492a:	d4f7      	bmi.n	801491c <_vfiprintf_r+0x44>
 801492c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801492e:	f7ff fe7b 	bl	8014628 <__retarget_lock_release_recursive>
 8014932:	e7f3      	b.n	801491c <_vfiprintf_r+0x44>
 8014934:	2300      	movs	r3, #0
 8014936:	9309      	str	r3, [sp, #36]	@ 0x24
 8014938:	2320      	movs	r3, #32
 801493a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801493e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014942:	2330      	movs	r3, #48	@ 0x30
 8014944:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014af4 <_vfiprintf_r+0x21c>
 8014948:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801494c:	f04f 0901 	mov.w	r9, #1
 8014950:	4623      	mov	r3, r4
 8014952:	469a      	mov	sl, r3
 8014954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014958:	b10a      	cbz	r2, 801495e <_vfiprintf_r+0x86>
 801495a:	2a25      	cmp	r2, #37	@ 0x25
 801495c:	d1f9      	bne.n	8014952 <_vfiprintf_r+0x7a>
 801495e:	ebba 0b04 	subs.w	fp, sl, r4
 8014962:	d00b      	beq.n	801497c <_vfiprintf_r+0xa4>
 8014964:	465b      	mov	r3, fp
 8014966:	4622      	mov	r2, r4
 8014968:	4629      	mov	r1, r5
 801496a:	4630      	mov	r0, r6
 801496c:	f7ff ffa1 	bl	80148b2 <__sfputs_r>
 8014970:	3001      	adds	r0, #1
 8014972:	f000 80a7 	beq.w	8014ac4 <_vfiprintf_r+0x1ec>
 8014976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014978:	445a      	add	r2, fp
 801497a:	9209      	str	r2, [sp, #36]	@ 0x24
 801497c:	f89a 3000 	ldrb.w	r3, [sl]
 8014980:	2b00      	cmp	r3, #0
 8014982:	f000 809f 	beq.w	8014ac4 <_vfiprintf_r+0x1ec>
 8014986:	2300      	movs	r3, #0
 8014988:	f04f 32ff 	mov.w	r2, #4294967295
 801498c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014990:	f10a 0a01 	add.w	sl, sl, #1
 8014994:	9304      	str	r3, [sp, #16]
 8014996:	9307      	str	r3, [sp, #28]
 8014998:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801499c:	931a      	str	r3, [sp, #104]	@ 0x68
 801499e:	4654      	mov	r4, sl
 80149a0:	2205      	movs	r2, #5
 80149a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149a6:	4853      	ldr	r0, [pc, #332]	@ (8014af4 <_vfiprintf_r+0x21c>)
 80149a8:	f7eb fc12 	bl	80001d0 <memchr>
 80149ac:	9a04      	ldr	r2, [sp, #16]
 80149ae:	b9d8      	cbnz	r0, 80149e8 <_vfiprintf_r+0x110>
 80149b0:	06d1      	lsls	r1, r2, #27
 80149b2:	bf44      	itt	mi
 80149b4:	2320      	movmi	r3, #32
 80149b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80149ba:	0713      	lsls	r3, r2, #28
 80149bc:	bf44      	itt	mi
 80149be:	232b      	movmi	r3, #43	@ 0x2b
 80149c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80149c4:	f89a 3000 	ldrb.w	r3, [sl]
 80149c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80149ca:	d015      	beq.n	80149f8 <_vfiprintf_r+0x120>
 80149cc:	9a07      	ldr	r2, [sp, #28]
 80149ce:	4654      	mov	r4, sl
 80149d0:	2000      	movs	r0, #0
 80149d2:	f04f 0c0a 	mov.w	ip, #10
 80149d6:	4621      	mov	r1, r4
 80149d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149dc:	3b30      	subs	r3, #48	@ 0x30
 80149de:	2b09      	cmp	r3, #9
 80149e0:	d94b      	bls.n	8014a7a <_vfiprintf_r+0x1a2>
 80149e2:	b1b0      	cbz	r0, 8014a12 <_vfiprintf_r+0x13a>
 80149e4:	9207      	str	r2, [sp, #28]
 80149e6:	e014      	b.n	8014a12 <_vfiprintf_r+0x13a>
 80149e8:	eba0 0308 	sub.w	r3, r0, r8
 80149ec:	fa09 f303 	lsl.w	r3, r9, r3
 80149f0:	4313      	orrs	r3, r2
 80149f2:	9304      	str	r3, [sp, #16]
 80149f4:	46a2      	mov	sl, r4
 80149f6:	e7d2      	b.n	801499e <_vfiprintf_r+0xc6>
 80149f8:	9b03      	ldr	r3, [sp, #12]
 80149fa:	1d19      	adds	r1, r3, #4
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	9103      	str	r1, [sp, #12]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	bfbb      	ittet	lt
 8014a04:	425b      	neglt	r3, r3
 8014a06:	f042 0202 	orrlt.w	r2, r2, #2
 8014a0a:	9307      	strge	r3, [sp, #28]
 8014a0c:	9307      	strlt	r3, [sp, #28]
 8014a0e:	bfb8      	it	lt
 8014a10:	9204      	strlt	r2, [sp, #16]
 8014a12:	7823      	ldrb	r3, [r4, #0]
 8014a14:	2b2e      	cmp	r3, #46	@ 0x2e
 8014a16:	d10a      	bne.n	8014a2e <_vfiprintf_r+0x156>
 8014a18:	7863      	ldrb	r3, [r4, #1]
 8014a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8014a1c:	d132      	bne.n	8014a84 <_vfiprintf_r+0x1ac>
 8014a1e:	9b03      	ldr	r3, [sp, #12]
 8014a20:	1d1a      	adds	r2, r3, #4
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	9203      	str	r2, [sp, #12]
 8014a26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014a2a:	3402      	adds	r4, #2
 8014a2c:	9305      	str	r3, [sp, #20]
 8014a2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014b04 <_vfiprintf_r+0x22c>
 8014a32:	7821      	ldrb	r1, [r4, #0]
 8014a34:	2203      	movs	r2, #3
 8014a36:	4650      	mov	r0, sl
 8014a38:	f7eb fbca 	bl	80001d0 <memchr>
 8014a3c:	b138      	cbz	r0, 8014a4e <_vfiprintf_r+0x176>
 8014a3e:	9b04      	ldr	r3, [sp, #16]
 8014a40:	eba0 000a 	sub.w	r0, r0, sl
 8014a44:	2240      	movs	r2, #64	@ 0x40
 8014a46:	4082      	lsls	r2, r0
 8014a48:	4313      	orrs	r3, r2
 8014a4a:	3401      	adds	r4, #1
 8014a4c:	9304      	str	r3, [sp, #16]
 8014a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a52:	4829      	ldr	r0, [pc, #164]	@ (8014af8 <_vfiprintf_r+0x220>)
 8014a54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014a58:	2206      	movs	r2, #6
 8014a5a:	f7eb fbb9 	bl	80001d0 <memchr>
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	d03f      	beq.n	8014ae2 <_vfiprintf_r+0x20a>
 8014a62:	4b26      	ldr	r3, [pc, #152]	@ (8014afc <_vfiprintf_r+0x224>)
 8014a64:	bb1b      	cbnz	r3, 8014aae <_vfiprintf_r+0x1d6>
 8014a66:	9b03      	ldr	r3, [sp, #12]
 8014a68:	3307      	adds	r3, #7
 8014a6a:	f023 0307 	bic.w	r3, r3, #7
 8014a6e:	3308      	adds	r3, #8
 8014a70:	9303      	str	r3, [sp, #12]
 8014a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a74:	443b      	add	r3, r7
 8014a76:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a78:	e76a      	b.n	8014950 <_vfiprintf_r+0x78>
 8014a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a7e:	460c      	mov	r4, r1
 8014a80:	2001      	movs	r0, #1
 8014a82:	e7a8      	b.n	80149d6 <_vfiprintf_r+0xfe>
 8014a84:	2300      	movs	r3, #0
 8014a86:	3401      	adds	r4, #1
 8014a88:	9305      	str	r3, [sp, #20]
 8014a8a:	4619      	mov	r1, r3
 8014a8c:	f04f 0c0a 	mov.w	ip, #10
 8014a90:	4620      	mov	r0, r4
 8014a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a96:	3a30      	subs	r2, #48	@ 0x30
 8014a98:	2a09      	cmp	r2, #9
 8014a9a:	d903      	bls.n	8014aa4 <_vfiprintf_r+0x1cc>
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d0c6      	beq.n	8014a2e <_vfiprintf_r+0x156>
 8014aa0:	9105      	str	r1, [sp, #20]
 8014aa2:	e7c4      	b.n	8014a2e <_vfiprintf_r+0x156>
 8014aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8014aa8:	4604      	mov	r4, r0
 8014aaa:	2301      	movs	r3, #1
 8014aac:	e7f0      	b.n	8014a90 <_vfiprintf_r+0x1b8>
 8014aae:	ab03      	add	r3, sp, #12
 8014ab0:	9300      	str	r3, [sp, #0]
 8014ab2:	462a      	mov	r2, r5
 8014ab4:	4b12      	ldr	r3, [pc, #72]	@ (8014b00 <_vfiprintf_r+0x228>)
 8014ab6:	a904      	add	r1, sp, #16
 8014ab8:	4630      	mov	r0, r6
 8014aba:	f3af 8000 	nop.w
 8014abe:	4607      	mov	r7, r0
 8014ac0:	1c78      	adds	r0, r7, #1
 8014ac2:	d1d6      	bne.n	8014a72 <_vfiprintf_r+0x19a>
 8014ac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014ac6:	07d9      	lsls	r1, r3, #31
 8014ac8:	d405      	bmi.n	8014ad6 <_vfiprintf_r+0x1fe>
 8014aca:	89ab      	ldrh	r3, [r5, #12]
 8014acc:	059a      	lsls	r2, r3, #22
 8014ace:	d402      	bmi.n	8014ad6 <_vfiprintf_r+0x1fe>
 8014ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ad2:	f7ff fda9 	bl	8014628 <__retarget_lock_release_recursive>
 8014ad6:	89ab      	ldrh	r3, [r5, #12]
 8014ad8:	065b      	lsls	r3, r3, #25
 8014ada:	f53f af1f 	bmi.w	801491c <_vfiprintf_r+0x44>
 8014ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014ae0:	e71e      	b.n	8014920 <_vfiprintf_r+0x48>
 8014ae2:	ab03      	add	r3, sp, #12
 8014ae4:	9300      	str	r3, [sp, #0]
 8014ae6:	462a      	mov	r2, r5
 8014ae8:	4b05      	ldr	r3, [pc, #20]	@ (8014b00 <_vfiprintf_r+0x228>)
 8014aea:	a904      	add	r1, sp, #16
 8014aec:	4630      	mov	r0, r6
 8014aee:	f000 f879 	bl	8014be4 <_printf_i>
 8014af2:	e7e4      	b.n	8014abe <_vfiprintf_r+0x1e6>
 8014af4:	08017e35 	.word	0x08017e35
 8014af8:	08017e3f 	.word	0x08017e3f
 8014afc:	00000000 	.word	0x00000000
 8014b00:	080148b3 	.word	0x080148b3
 8014b04:	08017e3b 	.word	0x08017e3b

08014b08 <_printf_common>:
 8014b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b0c:	4616      	mov	r6, r2
 8014b0e:	4698      	mov	r8, r3
 8014b10:	688a      	ldr	r2, [r1, #8]
 8014b12:	690b      	ldr	r3, [r1, #16]
 8014b14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014b18:	4293      	cmp	r3, r2
 8014b1a:	bfb8      	it	lt
 8014b1c:	4613      	movlt	r3, r2
 8014b1e:	6033      	str	r3, [r6, #0]
 8014b20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014b24:	4607      	mov	r7, r0
 8014b26:	460c      	mov	r4, r1
 8014b28:	b10a      	cbz	r2, 8014b2e <_printf_common+0x26>
 8014b2a:	3301      	adds	r3, #1
 8014b2c:	6033      	str	r3, [r6, #0]
 8014b2e:	6823      	ldr	r3, [r4, #0]
 8014b30:	0699      	lsls	r1, r3, #26
 8014b32:	bf42      	ittt	mi
 8014b34:	6833      	ldrmi	r3, [r6, #0]
 8014b36:	3302      	addmi	r3, #2
 8014b38:	6033      	strmi	r3, [r6, #0]
 8014b3a:	6825      	ldr	r5, [r4, #0]
 8014b3c:	f015 0506 	ands.w	r5, r5, #6
 8014b40:	d106      	bne.n	8014b50 <_printf_common+0x48>
 8014b42:	f104 0a19 	add.w	sl, r4, #25
 8014b46:	68e3      	ldr	r3, [r4, #12]
 8014b48:	6832      	ldr	r2, [r6, #0]
 8014b4a:	1a9b      	subs	r3, r3, r2
 8014b4c:	42ab      	cmp	r3, r5
 8014b4e:	dc26      	bgt.n	8014b9e <_printf_common+0x96>
 8014b50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014b54:	6822      	ldr	r2, [r4, #0]
 8014b56:	3b00      	subs	r3, #0
 8014b58:	bf18      	it	ne
 8014b5a:	2301      	movne	r3, #1
 8014b5c:	0692      	lsls	r2, r2, #26
 8014b5e:	d42b      	bmi.n	8014bb8 <_printf_common+0xb0>
 8014b60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014b64:	4641      	mov	r1, r8
 8014b66:	4638      	mov	r0, r7
 8014b68:	47c8      	blx	r9
 8014b6a:	3001      	adds	r0, #1
 8014b6c:	d01e      	beq.n	8014bac <_printf_common+0xa4>
 8014b6e:	6823      	ldr	r3, [r4, #0]
 8014b70:	6922      	ldr	r2, [r4, #16]
 8014b72:	f003 0306 	and.w	r3, r3, #6
 8014b76:	2b04      	cmp	r3, #4
 8014b78:	bf02      	ittt	eq
 8014b7a:	68e5      	ldreq	r5, [r4, #12]
 8014b7c:	6833      	ldreq	r3, [r6, #0]
 8014b7e:	1aed      	subeq	r5, r5, r3
 8014b80:	68a3      	ldr	r3, [r4, #8]
 8014b82:	bf0c      	ite	eq
 8014b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b88:	2500      	movne	r5, #0
 8014b8a:	4293      	cmp	r3, r2
 8014b8c:	bfc4      	itt	gt
 8014b8e:	1a9b      	subgt	r3, r3, r2
 8014b90:	18ed      	addgt	r5, r5, r3
 8014b92:	2600      	movs	r6, #0
 8014b94:	341a      	adds	r4, #26
 8014b96:	42b5      	cmp	r5, r6
 8014b98:	d11a      	bne.n	8014bd0 <_printf_common+0xc8>
 8014b9a:	2000      	movs	r0, #0
 8014b9c:	e008      	b.n	8014bb0 <_printf_common+0xa8>
 8014b9e:	2301      	movs	r3, #1
 8014ba0:	4652      	mov	r2, sl
 8014ba2:	4641      	mov	r1, r8
 8014ba4:	4638      	mov	r0, r7
 8014ba6:	47c8      	blx	r9
 8014ba8:	3001      	adds	r0, #1
 8014baa:	d103      	bne.n	8014bb4 <_printf_common+0xac>
 8014bac:	f04f 30ff 	mov.w	r0, #4294967295
 8014bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bb4:	3501      	adds	r5, #1
 8014bb6:	e7c6      	b.n	8014b46 <_printf_common+0x3e>
 8014bb8:	18e1      	adds	r1, r4, r3
 8014bba:	1c5a      	adds	r2, r3, #1
 8014bbc:	2030      	movs	r0, #48	@ 0x30
 8014bbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014bc2:	4422      	add	r2, r4
 8014bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014bc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014bcc:	3302      	adds	r3, #2
 8014bce:	e7c7      	b.n	8014b60 <_printf_common+0x58>
 8014bd0:	2301      	movs	r3, #1
 8014bd2:	4622      	mov	r2, r4
 8014bd4:	4641      	mov	r1, r8
 8014bd6:	4638      	mov	r0, r7
 8014bd8:	47c8      	blx	r9
 8014bda:	3001      	adds	r0, #1
 8014bdc:	d0e6      	beq.n	8014bac <_printf_common+0xa4>
 8014bde:	3601      	adds	r6, #1
 8014be0:	e7d9      	b.n	8014b96 <_printf_common+0x8e>
	...

08014be4 <_printf_i>:
 8014be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014be8:	7e0f      	ldrb	r7, [r1, #24]
 8014bea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014bec:	2f78      	cmp	r7, #120	@ 0x78
 8014bee:	4691      	mov	r9, r2
 8014bf0:	4680      	mov	r8, r0
 8014bf2:	460c      	mov	r4, r1
 8014bf4:	469a      	mov	sl, r3
 8014bf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014bfa:	d807      	bhi.n	8014c0c <_printf_i+0x28>
 8014bfc:	2f62      	cmp	r7, #98	@ 0x62
 8014bfe:	d80a      	bhi.n	8014c16 <_printf_i+0x32>
 8014c00:	2f00      	cmp	r7, #0
 8014c02:	f000 80d1 	beq.w	8014da8 <_printf_i+0x1c4>
 8014c06:	2f58      	cmp	r7, #88	@ 0x58
 8014c08:	f000 80b8 	beq.w	8014d7c <_printf_i+0x198>
 8014c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014c10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014c14:	e03a      	b.n	8014c8c <_printf_i+0xa8>
 8014c16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014c1a:	2b15      	cmp	r3, #21
 8014c1c:	d8f6      	bhi.n	8014c0c <_printf_i+0x28>
 8014c1e:	a101      	add	r1, pc, #4	@ (adr r1, 8014c24 <_printf_i+0x40>)
 8014c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014c24:	08014c7d 	.word	0x08014c7d
 8014c28:	08014c91 	.word	0x08014c91
 8014c2c:	08014c0d 	.word	0x08014c0d
 8014c30:	08014c0d 	.word	0x08014c0d
 8014c34:	08014c0d 	.word	0x08014c0d
 8014c38:	08014c0d 	.word	0x08014c0d
 8014c3c:	08014c91 	.word	0x08014c91
 8014c40:	08014c0d 	.word	0x08014c0d
 8014c44:	08014c0d 	.word	0x08014c0d
 8014c48:	08014c0d 	.word	0x08014c0d
 8014c4c:	08014c0d 	.word	0x08014c0d
 8014c50:	08014d8f 	.word	0x08014d8f
 8014c54:	08014cbb 	.word	0x08014cbb
 8014c58:	08014d49 	.word	0x08014d49
 8014c5c:	08014c0d 	.word	0x08014c0d
 8014c60:	08014c0d 	.word	0x08014c0d
 8014c64:	08014db1 	.word	0x08014db1
 8014c68:	08014c0d 	.word	0x08014c0d
 8014c6c:	08014cbb 	.word	0x08014cbb
 8014c70:	08014c0d 	.word	0x08014c0d
 8014c74:	08014c0d 	.word	0x08014c0d
 8014c78:	08014d51 	.word	0x08014d51
 8014c7c:	6833      	ldr	r3, [r6, #0]
 8014c7e:	1d1a      	adds	r2, r3, #4
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	6032      	str	r2, [r6, #0]
 8014c84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014c88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014c8c:	2301      	movs	r3, #1
 8014c8e:	e09c      	b.n	8014dca <_printf_i+0x1e6>
 8014c90:	6833      	ldr	r3, [r6, #0]
 8014c92:	6820      	ldr	r0, [r4, #0]
 8014c94:	1d19      	adds	r1, r3, #4
 8014c96:	6031      	str	r1, [r6, #0]
 8014c98:	0606      	lsls	r6, r0, #24
 8014c9a:	d501      	bpl.n	8014ca0 <_printf_i+0xbc>
 8014c9c:	681d      	ldr	r5, [r3, #0]
 8014c9e:	e003      	b.n	8014ca8 <_printf_i+0xc4>
 8014ca0:	0645      	lsls	r5, r0, #25
 8014ca2:	d5fb      	bpl.n	8014c9c <_printf_i+0xb8>
 8014ca4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014ca8:	2d00      	cmp	r5, #0
 8014caa:	da03      	bge.n	8014cb4 <_printf_i+0xd0>
 8014cac:	232d      	movs	r3, #45	@ 0x2d
 8014cae:	426d      	negs	r5, r5
 8014cb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014cb4:	4858      	ldr	r0, [pc, #352]	@ (8014e18 <_printf_i+0x234>)
 8014cb6:	230a      	movs	r3, #10
 8014cb8:	e011      	b.n	8014cde <_printf_i+0xfa>
 8014cba:	6821      	ldr	r1, [r4, #0]
 8014cbc:	6833      	ldr	r3, [r6, #0]
 8014cbe:	0608      	lsls	r0, r1, #24
 8014cc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8014cc4:	d402      	bmi.n	8014ccc <_printf_i+0xe8>
 8014cc6:	0649      	lsls	r1, r1, #25
 8014cc8:	bf48      	it	mi
 8014cca:	b2ad      	uxthmi	r5, r5
 8014ccc:	2f6f      	cmp	r7, #111	@ 0x6f
 8014cce:	4852      	ldr	r0, [pc, #328]	@ (8014e18 <_printf_i+0x234>)
 8014cd0:	6033      	str	r3, [r6, #0]
 8014cd2:	bf14      	ite	ne
 8014cd4:	230a      	movne	r3, #10
 8014cd6:	2308      	moveq	r3, #8
 8014cd8:	2100      	movs	r1, #0
 8014cda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014cde:	6866      	ldr	r6, [r4, #4]
 8014ce0:	60a6      	str	r6, [r4, #8]
 8014ce2:	2e00      	cmp	r6, #0
 8014ce4:	db05      	blt.n	8014cf2 <_printf_i+0x10e>
 8014ce6:	6821      	ldr	r1, [r4, #0]
 8014ce8:	432e      	orrs	r6, r5
 8014cea:	f021 0104 	bic.w	r1, r1, #4
 8014cee:	6021      	str	r1, [r4, #0]
 8014cf0:	d04b      	beq.n	8014d8a <_printf_i+0x1a6>
 8014cf2:	4616      	mov	r6, r2
 8014cf4:	fbb5 f1f3 	udiv	r1, r5, r3
 8014cf8:	fb03 5711 	mls	r7, r3, r1, r5
 8014cfc:	5dc7      	ldrb	r7, [r0, r7]
 8014cfe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014d02:	462f      	mov	r7, r5
 8014d04:	42bb      	cmp	r3, r7
 8014d06:	460d      	mov	r5, r1
 8014d08:	d9f4      	bls.n	8014cf4 <_printf_i+0x110>
 8014d0a:	2b08      	cmp	r3, #8
 8014d0c:	d10b      	bne.n	8014d26 <_printf_i+0x142>
 8014d0e:	6823      	ldr	r3, [r4, #0]
 8014d10:	07df      	lsls	r7, r3, #31
 8014d12:	d508      	bpl.n	8014d26 <_printf_i+0x142>
 8014d14:	6923      	ldr	r3, [r4, #16]
 8014d16:	6861      	ldr	r1, [r4, #4]
 8014d18:	4299      	cmp	r1, r3
 8014d1a:	bfde      	ittt	le
 8014d1c:	2330      	movle	r3, #48	@ 0x30
 8014d1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014d22:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014d26:	1b92      	subs	r2, r2, r6
 8014d28:	6122      	str	r2, [r4, #16]
 8014d2a:	f8cd a000 	str.w	sl, [sp]
 8014d2e:	464b      	mov	r3, r9
 8014d30:	aa03      	add	r2, sp, #12
 8014d32:	4621      	mov	r1, r4
 8014d34:	4640      	mov	r0, r8
 8014d36:	f7ff fee7 	bl	8014b08 <_printf_common>
 8014d3a:	3001      	adds	r0, #1
 8014d3c:	d14a      	bne.n	8014dd4 <_printf_i+0x1f0>
 8014d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8014d42:	b004      	add	sp, #16
 8014d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d48:	6823      	ldr	r3, [r4, #0]
 8014d4a:	f043 0320 	orr.w	r3, r3, #32
 8014d4e:	6023      	str	r3, [r4, #0]
 8014d50:	4832      	ldr	r0, [pc, #200]	@ (8014e1c <_printf_i+0x238>)
 8014d52:	2778      	movs	r7, #120	@ 0x78
 8014d54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014d58:	6823      	ldr	r3, [r4, #0]
 8014d5a:	6831      	ldr	r1, [r6, #0]
 8014d5c:	061f      	lsls	r7, r3, #24
 8014d5e:	f851 5b04 	ldr.w	r5, [r1], #4
 8014d62:	d402      	bmi.n	8014d6a <_printf_i+0x186>
 8014d64:	065f      	lsls	r7, r3, #25
 8014d66:	bf48      	it	mi
 8014d68:	b2ad      	uxthmi	r5, r5
 8014d6a:	6031      	str	r1, [r6, #0]
 8014d6c:	07d9      	lsls	r1, r3, #31
 8014d6e:	bf44      	itt	mi
 8014d70:	f043 0320 	orrmi.w	r3, r3, #32
 8014d74:	6023      	strmi	r3, [r4, #0]
 8014d76:	b11d      	cbz	r5, 8014d80 <_printf_i+0x19c>
 8014d78:	2310      	movs	r3, #16
 8014d7a:	e7ad      	b.n	8014cd8 <_printf_i+0xf4>
 8014d7c:	4826      	ldr	r0, [pc, #152]	@ (8014e18 <_printf_i+0x234>)
 8014d7e:	e7e9      	b.n	8014d54 <_printf_i+0x170>
 8014d80:	6823      	ldr	r3, [r4, #0]
 8014d82:	f023 0320 	bic.w	r3, r3, #32
 8014d86:	6023      	str	r3, [r4, #0]
 8014d88:	e7f6      	b.n	8014d78 <_printf_i+0x194>
 8014d8a:	4616      	mov	r6, r2
 8014d8c:	e7bd      	b.n	8014d0a <_printf_i+0x126>
 8014d8e:	6833      	ldr	r3, [r6, #0]
 8014d90:	6825      	ldr	r5, [r4, #0]
 8014d92:	6961      	ldr	r1, [r4, #20]
 8014d94:	1d18      	adds	r0, r3, #4
 8014d96:	6030      	str	r0, [r6, #0]
 8014d98:	062e      	lsls	r6, r5, #24
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	d501      	bpl.n	8014da2 <_printf_i+0x1be>
 8014d9e:	6019      	str	r1, [r3, #0]
 8014da0:	e002      	b.n	8014da8 <_printf_i+0x1c4>
 8014da2:	0668      	lsls	r0, r5, #25
 8014da4:	d5fb      	bpl.n	8014d9e <_printf_i+0x1ba>
 8014da6:	8019      	strh	r1, [r3, #0]
 8014da8:	2300      	movs	r3, #0
 8014daa:	6123      	str	r3, [r4, #16]
 8014dac:	4616      	mov	r6, r2
 8014dae:	e7bc      	b.n	8014d2a <_printf_i+0x146>
 8014db0:	6833      	ldr	r3, [r6, #0]
 8014db2:	1d1a      	adds	r2, r3, #4
 8014db4:	6032      	str	r2, [r6, #0]
 8014db6:	681e      	ldr	r6, [r3, #0]
 8014db8:	6862      	ldr	r2, [r4, #4]
 8014dba:	2100      	movs	r1, #0
 8014dbc:	4630      	mov	r0, r6
 8014dbe:	f7eb fa07 	bl	80001d0 <memchr>
 8014dc2:	b108      	cbz	r0, 8014dc8 <_printf_i+0x1e4>
 8014dc4:	1b80      	subs	r0, r0, r6
 8014dc6:	6060      	str	r0, [r4, #4]
 8014dc8:	6863      	ldr	r3, [r4, #4]
 8014dca:	6123      	str	r3, [r4, #16]
 8014dcc:	2300      	movs	r3, #0
 8014dce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014dd2:	e7aa      	b.n	8014d2a <_printf_i+0x146>
 8014dd4:	6923      	ldr	r3, [r4, #16]
 8014dd6:	4632      	mov	r2, r6
 8014dd8:	4649      	mov	r1, r9
 8014dda:	4640      	mov	r0, r8
 8014ddc:	47d0      	blx	sl
 8014dde:	3001      	adds	r0, #1
 8014de0:	d0ad      	beq.n	8014d3e <_printf_i+0x15a>
 8014de2:	6823      	ldr	r3, [r4, #0]
 8014de4:	079b      	lsls	r3, r3, #30
 8014de6:	d413      	bmi.n	8014e10 <_printf_i+0x22c>
 8014de8:	68e0      	ldr	r0, [r4, #12]
 8014dea:	9b03      	ldr	r3, [sp, #12]
 8014dec:	4298      	cmp	r0, r3
 8014dee:	bfb8      	it	lt
 8014df0:	4618      	movlt	r0, r3
 8014df2:	e7a6      	b.n	8014d42 <_printf_i+0x15e>
 8014df4:	2301      	movs	r3, #1
 8014df6:	4632      	mov	r2, r6
 8014df8:	4649      	mov	r1, r9
 8014dfa:	4640      	mov	r0, r8
 8014dfc:	47d0      	blx	sl
 8014dfe:	3001      	adds	r0, #1
 8014e00:	d09d      	beq.n	8014d3e <_printf_i+0x15a>
 8014e02:	3501      	adds	r5, #1
 8014e04:	68e3      	ldr	r3, [r4, #12]
 8014e06:	9903      	ldr	r1, [sp, #12]
 8014e08:	1a5b      	subs	r3, r3, r1
 8014e0a:	42ab      	cmp	r3, r5
 8014e0c:	dcf2      	bgt.n	8014df4 <_printf_i+0x210>
 8014e0e:	e7eb      	b.n	8014de8 <_printf_i+0x204>
 8014e10:	2500      	movs	r5, #0
 8014e12:	f104 0619 	add.w	r6, r4, #25
 8014e16:	e7f5      	b.n	8014e04 <_printf_i+0x220>
 8014e18:	08017e46 	.word	0x08017e46
 8014e1c:	08017e57 	.word	0x08017e57

08014e20 <__sflush_r>:
 8014e20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e28:	0716      	lsls	r6, r2, #28
 8014e2a:	4605      	mov	r5, r0
 8014e2c:	460c      	mov	r4, r1
 8014e2e:	d454      	bmi.n	8014eda <__sflush_r+0xba>
 8014e30:	684b      	ldr	r3, [r1, #4]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	dc02      	bgt.n	8014e3c <__sflush_r+0x1c>
 8014e36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	dd48      	ble.n	8014ece <__sflush_r+0xae>
 8014e3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014e3e:	2e00      	cmp	r6, #0
 8014e40:	d045      	beq.n	8014ece <__sflush_r+0xae>
 8014e42:	2300      	movs	r3, #0
 8014e44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014e48:	682f      	ldr	r7, [r5, #0]
 8014e4a:	6a21      	ldr	r1, [r4, #32]
 8014e4c:	602b      	str	r3, [r5, #0]
 8014e4e:	d030      	beq.n	8014eb2 <__sflush_r+0x92>
 8014e50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014e52:	89a3      	ldrh	r3, [r4, #12]
 8014e54:	0759      	lsls	r1, r3, #29
 8014e56:	d505      	bpl.n	8014e64 <__sflush_r+0x44>
 8014e58:	6863      	ldr	r3, [r4, #4]
 8014e5a:	1ad2      	subs	r2, r2, r3
 8014e5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014e5e:	b10b      	cbz	r3, 8014e64 <__sflush_r+0x44>
 8014e60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014e62:	1ad2      	subs	r2, r2, r3
 8014e64:	2300      	movs	r3, #0
 8014e66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014e68:	6a21      	ldr	r1, [r4, #32]
 8014e6a:	4628      	mov	r0, r5
 8014e6c:	47b0      	blx	r6
 8014e6e:	1c43      	adds	r3, r0, #1
 8014e70:	89a3      	ldrh	r3, [r4, #12]
 8014e72:	d106      	bne.n	8014e82 <__sflush_r+0x62>
 8014e74:	6829      	ldr	r1, [r5, #0]
 8014e76:	291d      	cmp	r1, #29
 8014e78:	d82b      	bhi.n	8014ed2 <__sflush_r+0xb2>
 8014e7a:	4a2a      	ldr	r2, [pc, #168]	@ (8014f24 <__sflush_r+0x104>)
 8014e7c:	40ca      	lsrs	r2, r1
 8014e7e:	07d6      	lsls	r6, r2, #31
 8014e80:	d527      	bpl.n	8014ed2 <__sflush_r+0xb2>
 8014e82:	2200      	movs	r2, #0
 8014e84:	6062      	str	r2, [r4, #4]
 8014e86:	04d9      	lsls	r1, r3, #19
 8014e88:	6922      	ldr	r2, [r4, #16]
 8014e8a:	6022      	str	r2, [r4, #0]
 8014e8c:	d504      	bpl.n	8014e98 <__sflush_r+0x78>
 8014e8e:	1c42      	adds	r2, r0, #1
 8014e90:	d101      	bne.n	8014e96 <__sflush_r+0x76>
 8014e92:	682b      	ldr	r3, [r5, #0]
 8014e94:	b903      	cbnz	r3, 8014e98 <__sflush_r+0x78>
 8014e96:	6560      	str	r0, [r4, #84]	@ 0x54
 8014e98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014e9a:	602f      	str	r7, [r5, #0]
 8014e9c:	b1b9      	cbz	r1, 8014ece <__sflush_r+0xae>
 8014e9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014ea2:	4299      	cmp	r1, r3
 8014ea4:	d002      	beq.n	8014eac <__sflush_r+0x8c>
 8014ea6:	4628      	mov	r0, r5
 8014ea8:	f7ff fbec 	bl	8014684 <_free_r>
 8014eac:	2300      	movs	r3, #0
 8014eae:	6363      	str	r3, [r4, #52]	@ 0x34
 8014eb0:	e00d      	b.n	8014ece <__sflush_r+0xae>
 8014eb2:	2301      	movs	r3, #1
 8014eb4:	4628      	mov	r0, r5
 8014eb6:	47b0      	blx	r6
 8014eb8:	4602      	mov	r2, r0
 8014eba:	1c50      	adds	r0, r2, #1
 8014ebc:	d1c9      	bne.n	8014e52 <__sflush_r+0x32>
 8014ebe:	682b      	ldr	r3, [r5, #0]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d0c6      	beq.n	8014e52 <__sflush_r+0x32>
 8014ec4:	2b1d      	cmp	r3, #29
 8014ec6:	d001      	beq.n	8014ecc <__sflush_r+0xac>
 8014ec8:	2b16      	cmp	r3, #22
 8014eca:	d11e      	bne.n	8014f0a <__sflush_r+0xea>
 8014ecc:	602f      	str	r7, [r5, #0]
 8014ece:	2000      	movs	r0, #0
 8014ed0:	e022      	b.n	8014f18 <__sflush_r+0xf8>
 8014ed2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ed6:	b21b      	sxth	r3, r3
 8014ed8:	e01b      	b.n	8014f12 <__sflush_r+0xf2>
 8014eda:	690f      	ldr	r7, [r1, #16]
 8014edc:	2f00      	cmp	r7, #0
 8014ede:	d0f6      	beq.n	8014ece <__sflush_r+0xae>
 8014ee0:	0793      	lsls	r3, r2, #30
 8014ee2:	680e      	ldr	r6, [r1, #0]
 8014ee4:	bf08      	it	eq
 8014ee6:	694b      	ldreq	r3, [r1, #20]
 8014ee8:	600f      	str	r7, [r1, #0]
 8014eea:	bf18      	it	ne
 8014eec:	2300      	movne	r3, #0
 8014eee:	eba6 0807 	sub.w	r8, r6, r7
 8014ef2:	608b      	str	r3, [r1, #8]
 8014ef4:	f1b8 0f00 	cmp.w	r8, #0
 8014ef8:	dde9      	ble.n	8014ece <__sflush_r+0xae>
 8014efa:	6a21      	ldr	r1, [r4, #32]
 8014efc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014efe:	4643      	mov	r3, r8
 8014f00:	463a      	mov	r2, r7
 8014f02:	4628      	mov	r0, r5
 8014f04:	47b0      	blx	r6
 8014f06:	2800      	cmp	r0, #0
 8014f08:	dc08      	bgt.n	8014f1c <__sflush_r+0xfc>
 8014f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014f12:	81a3      	strh	r3, [r4, #12]
 8014f14:	f04f 30ff 	mov.w	r0, #4294967295
 8014f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f1c:	4407      	add	r7, r0
 8014f1e:	eba8 0800 	sub.w	r8, r8, r0
 8014f22:	e7e7      	b.n	8014ef4 <__sflush_r+0xd4>
 8014f24:	20400001 	.word	0x20400001

08014f28 <_fflush_r>:
 8014f28:	b538      	push	{r3, r4, r5, lr}
 8014f2a:	690b      	ldr	r3, [r1, #16]
 8014f2c:	4605      	mov	r5, r0
 8014f2e:	460c      	mov	r4, r1
 8014f30:	b913      	cbnz	r3, 8014f38 <_fflush_r+0x10>
 8014f32:	2500      	movs	r5, #0
 8014f34:	4628      	mov	r0, r5
 8014f36:	bd38      	pop	{r3, r4, r5, pc}
 8014f38:	b118      	cbz	r0, 8014f42 <_fflush_r+0x1a>
 8014f3a:	6a03      	ldr	r3, [r0, #32]
 8014f3c:	b90b      	cbnz	r3, 8014f42 <_fflush_r+0x1a>
 8014f3e:	f7ff fa63 	bl	8014408 <__sinit>
 8014f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d0f3      	beq.n	8014f32 <_fflush_r+0xa>
 8014f4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014f4c:	07d0      	lsls	r0, r2, #31
 8014f4e:	d404      	bmi.n	8014f5a <_fflush_r+0x32>
 8014f50:	0599      	lsls	r1, r3, #22
 8014f52:	d402      	bmi.n	8014f5a <_fflush_r+0x32>
 8014f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f56:	f7ff fb66 	bl	8014626 <__retarget_lock_acquire_recursive>
 8014f5a:	4628      	mov	r0, r5
 8014f5c:	4621      	mov	r1, r4
 8014f5e:	f7ff ff5f 	bl	8014e20 <__sflush_r>
 8014f62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f64:	07da      	lsls	r2, r3, #31
 8014f66:	4605      	mov	r5, r0
 8014f68:	d4e4      	bmi.n	8014f34 <_fflush_r+0xc>
 8014f6a:	89a3      	ldrh	r3, [r4, #12]
 8014f6c:	059b      	lsls	r3, r3, #22
 8014f6e:	d4e1      	bmi.n	8014f34 <_fflush_r+0xc>
 8014f70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f72:	f7ff fb59 	bl	8014628 <__retarget_lock_release_recursive>
 8014f76:	e7dd      	b.n	8014f34 <_fflush_r+0xc>

08014f78 <fiprintf>:
 8014f78:	b40e      	push	{r1, r2, r3}
 8014f7a:	b503      	push	{r0, r1, lr}
 8014f7c:	4601      	mov	r1, r0
 8014f7e:	ab03      	add	r3, sp, #12
 8014f80:	4805      	ldr	r0, [pc, #20]	@ (8014f98 <fiprintf+0x20>)
 8014f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f86:	6800      	ldr	r0, [r0, #0]
 8014f88:	9301      	str	r3, [sp, #4]
 8014f8a:	f7ff fca5 	bl	80148d8 <_vfiprintf_r>
 8014f8e:	b002      	add	sp, #8
 8014f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f94:	b003      	add	sp, #12
 8014f96:	4770      	bx	lr
 8014f98:	200000ec 	.word	0x200000ec

08014f9c <__swbuf_r>:
 8014f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f9e:	460e      	mov	r6, r1
 8014fa0:	4614      	mov	r4, r2
 8014fa2:	4605      	mov	r5, r0
 8014fa4:	b118      	cbz	r0, 8014fae <__swbuf_r+0x12>
 8014fa6:	6a03      	ldr	r3, [r0, #32]
 8014fa8:	b90b      	cbnz	r3, 8014fae <__swbuf_r+0x12>
 8014faa:	f7ff fa2d 	bl	8014408 <__sinit>
 8014fae:	69a3      	ldr	r3, [r4, #24]
 8014fb0:	60a3      	str	r3, [r4, #8]
 8014fb2:	89a3      	ldrh	r3, [r4, #12]
 8014fb4:	071a      	lsls	r2, r3, #28
 8014fb6:	d501      	bpl.n	8014fbc <__swbuf_r+0x20>
 8014fb8:	6923      	ldr	r3, [r4, #16]
 8014fba:	b943      	cbnz	r3, 8014fce <__swbuf_r+0x32>
 8014fbc:	4621      	mov	r1, r4
 8014fbe:	4628      	mov	r0, r5
 8014fc0:	f000 f82a 	bl	8015018 <__swsetup_r>
 8014fc4:	b118      	cbz	r0, 8014fce <__swbuf_r+0x32>
 8014fc6:	f04f 37ff 	mov.w	r7, #4294967295
 8014fca:	4638      	mov	r0, r7
 8014fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fce:	6823      	ldr	r3, [r4, #0]
 8014fd0:	6922      	ldr	r2, [r4, #16]
 8014fd2:	1a98      	subs	r0, r3, r2
 8014fd4:	6963      	ldr	r3, [r4, #20]
 8014fd6:	b2f6      	uxtb	r6, r6
 8014fd8:	4283      	cmp	r3, r0
 8014fda:	4637      	mov	r7, r6
 8014fdc:	dc05      	bgt.n	8014fea <__swbuf_r+0x4e>
 8014fde:	4621      	mov	r1, r4
 8014fe0:	4628      	mov	r0, r5
 8014fe2:	f7ff ffa1 	bl	8014f28 <_fflush_r>
 8014fe6:	2800      	cmp	r0, #0
 8014fe8:	d1ed      	bne.n	8014fc6 <__swbuf_r+0x2a>
 8014fea:	68a3      	ldr	r3, [r4, #8]
 8014fec:	3b01      	subs	r3, #1
 8014fee:	60a3      	str	r3, [r4, #8]
 8014ff0:	6823      	ldr	r3, [r4, #0]
 8014ff2:	1c5a      	adds	r2, r3, #1
 8014ff4:	6022      	str	r2, [r4, #0]
 8014ff6:	701e      	strb	r6, [r3, #0]
 8014ff8:	6962      	ldr	r2, [r4, #20]
 8014ffa:	1c43      	adds	r3, r0, #1
 8014ffc:	429a      	cmp	r2, r3
 8014ffe:	d004      	beq.n	801500a <__swbuf_r+0x6e>
 8015000:	89a3      	ldrh	r3, [r4, #12]
 8015002:	07db      	lsls	r3, r3, #31
 8015004:	d5e1      	bpl.n	8014fca <__swbuf_r+0x2e>
 8015006:	2e0a      	cmp	r6, #10
 8015008:	d1df      	bne.n	8014fca <__swbuf_r+0x2e>
 801500a:	4621      	mov	r1, r4
 801500c:	4628      	mov	r0, r5
 801500e:	f7ff ff8b 	bl	8014f28 <_fflush_r>
 8015012:	2800      	cmp	r0, #0
 8015014:	d0d9      	beq.n	8014fca <__swbuf_r+0x2e>
 8015016:	e7d6      	b.n	8014fc6 <__swbuf_r+0x2a>

08015018 <__swsetup_r>:
 8015018:	b538      	push	{r3, r4, r5, lr}
 801501a:	4b29      	ldr	r3, [pc, #164]	@ (80150c0 <__swsetup_r+0xa8>)
 801501c:	4605      	mov	r5, r0
 801501e:	6818      	ldr	r0, [r3, #0]
 8015020:	460c      	mov	r4, r1
 8015022:	b118      	cbz	r0, 801502c <__swsetup_r+0x14>
 8015024:	6a03      	ldr	r3, [r0, #32]
 8015026:	b90b      	cbnz	r3, 801502c <__swsetup_r+0x14>
 8015028:	f7ff f9ee 	bl	8014408 <__sinit>
 801502c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015030:	0719      	lsls	r1, r3, #28
 8015032:	d422      	bmi.n	801507a <__swsetup_r+0x62>
 8015034:	06da      	lsls	r2, r3, #27
 8015036:	d407      	bmi.n	8015048 <__swsetup_r+0x30>
 8015038:	2209      	movs	r2, #9
 801503a:	602a      	str	r2, [r5, #0]
 801503c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015040:	81a3      	strh	r3, [r4, #12]
 8015042:	f04f 30ff 	mov.w	r0, #4294967295
 8015046:	e033      	b.n	80150b0 <__swsetup_r+0x98>
 8015048:	0758      	lsls	r0, r3, #29
 801504a:	d512      	bpl.n	8015072 <__swsetup_r+0x5a>
 801504c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801504e:	b141      	cbz	r1, 8015062 <__swsetup_r+0x4a>
 8015050:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015054:	4299      	cmp	r1, r3
 8015056:	d002      	beq.n	801505e <__swsetup_r+0x46>
 8015058:	4628      	mov	r0, r5
 801505a:	f7ff fb13 	bl	8014684 <_free_r>
 801505e:	2300      	movs	r3, #0
 8015060:	6363      	str	r3, [r4, #52]	@ 0x34
 8015062:	89a3      	ldrh	r3, [r4, #12]
 8015064:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015068:	81a3      	strh	r3, [r4, #12]
 801506a:	2300      	movs	r3, #0
 801506c:	6063      	str	r3, [r4, #4]
 801506e:	6923      	ldr	r3, [r4, #16]
 8015070:	6023      	str	r3, [r4, #0]
 8015072:	89a3      	ldrh	r3, [r4, #12]
 8015074:	f043 0308 	orr.w	r3, r3, #8
 8015078:	81a3      	strh	r3, [r4, #12]
 801507a:	6923      	ldr	r3, [r4, #16]
 801507c:	b94b      	cbnz	r3, 8015092 <__swsetup_r+0x7a>
 801507e:	89a3      	ldrh	r3, [r4, #12]
 8015080:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015088:	d003      	beq.n	8015092 <__swsetup_r+0x7a>
 801508a:	4621      	mov	r1, r4
 801508c:	4628      	mov	r0, r5
 801508e:	f000 f856 	bl	801513e <__smakebuf_r>
 8015092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015096:	f013 0201 	ands.w	r2, r3, #1
 801509a:	d00a      	beq.n	80150b2 <__swsetup_r+0x9a>
 801509c:	2200      	movs	r2, #0
 801509e:	60a2      	str	r2, [r4, #8]
 80150a0:	6962      	ldr	r2, [r4, #20]
 80150a2:	4252      	negs	r2, r2
 80150a4:	61a2      	str	r2, [r4, #24]
 80150a6:	6922      	ldr	r2, [r4, #16]
 80150a8:	b942      	cbnz	r2, 80150bc <__swsetup_r+0xa4>
 80150aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80150ae:	d1c5      	bne.n	801503c <__swsetup_r+0x24>
 80150b0:	bd38      	pop	{r3, r4, r5, pc}
 80150b2:	0799      	lsls	r1, r3, #30
 80150b4:	bf58      	it	pl
 80150b6:	6962      	ldrpl	r2, [r4, #20]
 80150b8:	60a2      	str	r2, [r4, #8]
 80150ba:	e7f4      	b.n	80150a6 <__swsetup_r+0x8e>
 80150bc:	2000      	movs	r0, #0
 80150be:	e7f7      	b.n	80150b0 <__swsetup_r+0x98>
 80150c0:	200000ec 	.word	0x200000ec

080150c4 <_sbrk_r>:
 80150c4:	b538      	push	{r3, r4, r5, lr}
 80150c6:	4d06      	ldr	r5, [pc, #24]	@ (80150e0 <_sbrk_r+0x1c>)
 80150c8:	2300      	movs	r3, #0
 80150ca:	4604      	mov	r4, r0
 80150cc:	4608      	mov	r0, r1
 80150ce:	602b      	str	r3, [r5, #0]
 80150d0:	f7ec ff58 	bl	8001f84 <_sbrk>
 80150d4:	1c43      	adds	r3, r0, #1
 80150d6:	d102      	bne.n	80150de <_sbrk_r+0x1a>
 80150d8:	682b      	ldr	r3, [r5, #0]
 80150da:	b103      	cbz	r3, 80150de <_sbrk_r+0x1a>
 80150dc:	6023      	str	r3, [r4, #0]
 80150de:	bd38      	pop	{r3, r4, r5, pc}
 80150e0:	2000b4a0 	.word	0x2000b4a0

080150e4 <abort>:
 80150e4:	b508      	push	{r3, lr}
 80150e6:	2006      	movs	r0, #6
 80150e8:	f000 f88e 	bl	8015208 <raise>
 80150ec:	2001      	movs	r0, #1
 80150ee:	f7ec fed1 	bl	8001e94 <_exit>

080150f2 <__swhatbuf_r>:
 80150f2:	b570      	push	{r4, r5, r6, lr}
 80150f4:	460c      	mov	r4, r1
 80150f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150fa:	2900      	cmp	r1, #0
 80150fc:	b096      	sub	sp, #88	@ 0x58
 80150fe:	4615      	mov	r5, r2
 8015100:	461e      	mov	r6, r3
 8015102:	da0d      	bge.n	8015120 <__swhatbuf_r+0x2e>
 8015104:	89a3      	ldrh	r3, [r4, #12]
 8015106:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801510a:	f04f 0100 	mov.w	r1, #0
 801510e:	bf14      	ite	ne
 8015110:	2340      	movne	r3, #64	@ 0x40
 8015112:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015116:	2000      	movs	r0, #0
 8015118:	6031      	str	r1, [r6, #0]
 801511a:	602b      	str	r3, [r5, #0]
 801511c:	b016      	add	sp, #88	@ 0x58
 801511e:	bd70      	pop	{r4, r5, r6, pc}
 8015120:	466a      	mov	r2, sp
 8015122:	f000 f879 	bl	8015218 <_fstat_r>
 8015126:	2800      	cmp	r0, #0
 8015128:	dbec      	blt.n	8015104 <__swhatbuf_r+0x12>
 801512a:	9901      	ldr	r1, [sp, #4]
 801512c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015130:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015134:	4259      	negs	r1, r3
 8015136:	4159      	adcs	r1, r3
 8015138:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801513c:	e7eb      	b.n	8015116 <__swhatbuf_r+0x24>

0801513e <__smakebuf_r>:
 801513e:	898b      	ldrh	r3, [r1, #12]
 8015140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015142:	079d      	lsls	r5, r3, #30
 8015144:	4606      	mov	r6, r0
 8015146:	460c      	mov	r4, r1
 8015148:	d507      	bpl.n	801515a <__smakebuf_r+0x1c>
 801514a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801514e:	6023      	str	r3, [r4, #0]
 8015150:	6123      	str	r3, [r4, #16]
 8015152:	2301      	movs	r3, #1
 8015154:	6163      	str	r3, [r4, #20]
 8015156:	b003      	add	sp, #12
 8015158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801515a:	ab01      	add	r3, sp, #4
 801515c:	466a      	mov	r2, sp
 801515e:	f7ff ffc8 	bl	80150f2 <__swhatbuf_r>
 8015162:	9f00      	ldr	r7, [sp, #0]
 8015164:	4605      	mov	r5, r0
 8015166:	4639      	mov	r1, r7
 8015168:	4630      	mov	r0, r6
 801516a:	f7ff faff 	bl	801476c <_malloc_r>
 801516e:	b948      	cbnz	r0, 8015184 <__smakebuf_r+0x46>
 8015170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015174:	059a      	lsls	r2, r3, #22
 8015176:	d4ee      	bmi.n	8015156 <__smakebuf_r+0x18>
 8015178:	f023 0303 	bic.w	r3, r3, #3
 801517c:	f043 0302 	orr.w	r3, r3, #2
 8015180:	81a3      	strh	r3, [r4, #12]
 8015182:	e7e2      	b.n	801514a <__smakebuf_r+0xc>
 8015184:	89a3      	ldrh	r3, [r4, #12]
 8015186:	6020      	str	r0, [r4, #0]
 8015188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801518c:	81a3      	strh	r3, [r4, #12]
 801518e:	9b01      	ldr	r3, [sp, #4]
 8015190:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015194:	b15b      	cbz	r3, 80151ae <__smakebuf_r+0x70>
 8015196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801519a:	4630      	mov	r0, r6
 801519c:	f000 f84e 	bl	801523c <_isatty_r>
 80151a0:	b128      	cbz	r0, 80151ae <__smakebuf_r+0x70>
 80151a2:	89a3      	ldrh	r3, [r4, #12]
 80151a4:	f023 0303 	bic.w	r3, r3, #3
 80151a8:	f043 0301 	orr.w	r3, r3, #1
 80151ac:	81a3      	strh	r3, [r4, #12]
 80151ae:	89a3      	ldrh	r3, [r4, #12]
 80151b0:	431d      	orrs	r5, r3
 80151b2:	81a5      	strh	r5, [r4, #12]
 80151b4:	e7cf      	b.n	8015156 <__smakebuf_r+0x18>

080151b6 <_raise_r>:
 80151b6:	291f      	cmp	r1, #31
 80151b8:	b538      	push	{r3, r4, r5, lr}
 80151ba:	4605      	mov	r5, r0
 80151bc:	460c      	mov	r4, r1
 80151be:	d904      	bls.n	80151ca <_raise_r+0x14>
 80151c0:	2316      	movs	r3, #22
 80151c2:	6003      	str	r3, [r0, #0]
 80151c4:	f04f 30ff 	mov.w	r0, #4294967295
 80151c8:	bd38      	pop	{r3, r4, r5, pc}
 80151ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80151cc:	b112      	cbz	r2, 80151d4 <_raise_r+0x1e>
 80151ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80151d2:	b94b      	cbnz	r3, 80151e8 <_raise_r+0x32>
 80151d4:	4628      	mov	r0, r5
 80151d6:	f000 f853 	bl	8015280 <_getpid_r>
 80151da:	4622      	mov	r2, r4
 80151dc:	4601      	mov	r1, r0
 80151de:	4628      	mov	r0, r5
 80151e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151e4:	f000 b83a 	b.w	801525c <_kill_r>
 80151e8:	2b01      	cmp	r3, #1
 80151ea:	d00a      	beq.n	8015202 <_raise_r+0x4c>
 80151ec:	1c59      	adds	r1, r3, #1
 80151ee:	d103      	bne.n	80151f8 <_raise_r+0x42>
 80151f0:	2316      	movs	r3, #22
 80151f2:	6003      	str	r3, [r0, #0]
 80151f4:	2001      	movs	r0, #1
 80151f6:	e7e7      	b.n	80151c8 <_raise_r+0x12>
 80151f8:	2100      	movs	r1, #0
 80151fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80151fe:	4620      	mov	r0, r4
 8015200:	4798      	blx	r3
 8015202:	2000      	movs	r0, #0
 8015204:	e7e0      	b.n	80151c8 <_raise_r+0x12>
	...

08015208 <raise>:
 8015208:	4b02      	ldr	r3, [pc, #8]	@ (8015214 <raise+0xc>)
 801520a:	4601      	mov	r1, r0
 801520c:	6818      	ldr	r0, [r3, #0]
 801520e:	f7ff bfd2 	b.w	80151b6 <_raise_r>
 8015212:	bf00      	nop
 8015214:	200000ec 	.word	0x200000ec

08015218 <_fstat_r>:
 8015218:	b538      	push	{r3, r4, r5, lr}
 801521a:	4d07      	ldr	r5, [pc, #28]	@ (8015238 <_fstat_r+0x20>)
 801521c:	2300      	movs	r3, #0
 801521e:	4604      	mov	r4, r0
 8015220:	4608      	mov	r0, r1
 8015222:	4611      	mov	r1, r2
 8015224:	602b      	str	r3, [r5, #0]
 8015226:	f7ec fe85 	bl	8001f34 <_fstat>
 801522a:	1c43      	adds	r3, r0, #1
 801522c:	d102      	bne.n	8015234 <_fstat_r+0x1c>
 801522e:	682b      	ldr	r3, [r5, #0]
 8015230:	b103      	cbz	r3, 8015234 <_fstat_r+0x1c>
 8015232:	6023      	str	r3, [r4, #0]
 8015234:	bd38      	pop	{r3, r4, r5, pc}
 8015236:	bf00      	nop
 8015238:	2000b4a0 	.word	0x2000b4a0

0801523c <_isatty_r>:
 801523c:	b538      	push	{r3, r4, r5, lr}
 801523e:	4d06      	ldr	r5, [pc, #24]	@ (8015258 <_isatty_r+0x1c>)
 8015240:	2300      	movs	r3, #0
 8015242:	4604      	mov	r4, r0
 8015244:	4608      	mov	r0, r1
 8015246:	602b      	str	r3, [r5, #0]
 8015248:	f7ec fe84 	bl	8001f54 <_isatty>
 801524c:	1c43      	adds	r3, r0, #1
 801524e:	d102      	bne.n	8015256 <_isatty_r+0x1a>
 8015250:	682b      	ldr	r3, [r5, #0]
 8015252:	b103      	cbz	r3, 8015256 <_isatty_r+0x1a>
 8015254:	6023      	str	r3, [r4, #0]
 8015256:	bd38      	pop	{r3, r4, r5, pc}
 8015258:	2000b4a0 	.word	0x2000b4a0

0801525c <_kill_r>:
 801525c:	b538      	push	{r3, r4, r5, lr}
 801525e:	4d07      	ldr	r5, [pc, #28]	@ (801527c <_kill_r+0x20>)
 8015260:	2300      	movs	r3, #0
 8015262:	4604      	mov	r4, r0
 8015264:	4608      	mov	r0, r1
 8015266:	4611      	mov	r1, r2
 8015268:	602b      	str	r3, [r5, #0]
 801526a:	f7ec fe01 	bl	8001e70 <_kill>
 801526e:	1c43      	adds	r3, r0, #1
 8015270:	d102      	bne.n	8015278 <_kill_r+0x1c>
 8015272:	682b      	ldr	r3, [r5, #0]
 8015274:	b103      	cbz	r3, 8015278 <_kill_r+0x1c>
 8015276:	6023      	str	r3, [r4, #0]
 8015278:	bd38      	pop	{r3, r4, r5, pc}
 801527a:	bf00      	nop
 801527c:	2000b4a0 	.word	0x2000b4a0

08015280 <_getpid_r>:
 8015280:	f7ec bdee 	b.w	8001e60 <_getpid>

08015284 <_init>:
 8015284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015286:	bf00      	nop
 8015288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801528a:	bc08      	pop	{r3}
 801528c:	469e      	mov	lr, r3
 801528e:	4770      	bx	lr

08015290 <_fini>:
 8015290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015292:	bf00      	nop
 8015294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015296:	bc08      	pop	{r3}
 8015298:	469e      	mov	lr, r3
 801529a:	4770      	bx	lr


arm_2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006208  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006390  08006390  00007390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063b0  080063b0  0000804c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080063b0  080063b0  000073b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063b8  080063b8  0000804c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063b8  080063b8  000073b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063bc  080063bc  000073bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  080063c0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000804c  2**0
                  CONTENTS
 10 .bss          000006d4  2000004c  2000004c  0000804c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000720  20000720  0000804c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e14a  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de4  00000000  00000000  000161c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  00017fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a95  00000000  00000000  00018d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021127  00000000  00000000  000197b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef92  00000000  00000000  0003a8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbd90  00000000  00000000  0004986e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001155fe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003884  00000000  00000000  00115644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00118ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000004c 	.word	0x2000004c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006378 	.word	0x08006378

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000050 	.word	0x20000050
 80001c4:	08006378 	.word	0x08006378

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004f8:	f3bf 8f4f 	dsb	sy
}
 80004fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80004fe:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <__NVIC_SystemReset+0x24>)
 8000500:	68db      	ldr	r3, [r3, #12]
 8000502:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000506:	4904      	ldr	r1, [pc, #16]	@ (8000518 <__NVIC_SystemReset+0x24>)
 8000508:	4b04      	ldr	r3, [pc, #16]	@ (800051c <__NVIC_SystemReset+0x28>)
 800050a:	4313      	orrs	r3, r2
 800050c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800050e:	f3bf 8f4f 	dsb	sy
}
 8000512:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <__NVIC_SystemReset+0x20>
 8000518:	e000ed00 	.word	0xe000ed00
 800051c:	05fa0004 	.word	0x05fa0004

08000520 <setMotor>:
uint8_t LIM_SW3_STAT = 1;
uint8_t button1_state = 1, button2_state = 1;


void setMotor(uint8_t motor, int16_t speed)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	460a      	mov	r2, r1
 800052a:	71fb      	strb	r3, [r7, #7]
 800052c:	4613      	mov	r3, r2
 800052e:	80bb      	strh	r3, [r7, #4]
	uint8_t dir_a = (speed >= 0);
 8000530:	88bb      	ldrh	r3, [r7, #4]
 8000532:	43db      	mvns	r3, r3
 8000534:	b29b      	uxth	r3, r3
 8000536:	0bdb      	lsrs	r3, r3, #15
 8000538:	b2db      	uxtb	r3, r3
 800053a:	73fb      	strb	r3, [r7, #15]
	uint8_t dir_b = (speed < 0);
 800053c:	88bb      	ldrh	r3, [r7, #4]
 800053e:	0bdb      	lsrs	r3, r3, #15
 8000540:	b2db      	uxtb	r3, r3
 8000542:	73bb      	strb	r3, [r7, #14]
	speed = abs(speed);
 8000544:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000548:	2b00      	cmp	r3, #0
 800054a:	bfb8      	it	lt
 800054c:	425b      	neglt	r3, r3
 800054e:	b29b      	uxth	r3, r3
 8000550:	80bb      	strh	r3, [r7, #4]

	switch(motor)
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	3b01      	subs	r3, #1
 8000556:	2b03      	cmp	r3, #3
 8000558:	d854      	bhi.n	8000604 <setMotor+0xe4>
 800055a:	a201      	add	r2, pc, #4	@ (adr r2, 8000560 <setMotor+0x40>)
 800055c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000560:	08000571 	.word	0x08000571
 8000564:	08000597 	.word	0x08000597
 8000568:	080005bd 	.word	0x080005bd
 800056c:	080005e3 	.word	0x080005e3
	{
		case 1:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, dir_a);
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	461a      	mov	r2, r3
 8000574:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000578:	4825      	ldr	r0, [pc, #148]	@ (8000610 <setMotor+0xf0>)
 800057a:	f002 ff99 	bl	80034b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8 , dir_b);
 800057e:	7bbb      	ldrb	r3, [r7, #14]
 8000580:	461a      	mov	r2, r3
 8000582:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000586:	4822      	ldr	r0, [pc, #136]	@ (8000610 <setMotor+0xf0>)
 8000588:	f002 ff92 	bl	80034b0 <HAL_GPIO_WritePin>
			TIM13 -> CCR1 = speed;
 800058c:	4a21      	ldr	r2, [pc, #132]	@ (8000614 <setMotor+0xf4>)
 800058e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000592:	6353      	str	r3, [r2, #52]	@ 0x34
			break;
 8000594:	e037      	b.n	8000606 <setMotor+0xe6>
		case 2:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, dir_a);
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	461a      	mov	r2, r3
 800059a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800059e:	481e      	ldr	r0, [pc, #120]	@ (8000618 <setMotor+0xf8>)
 80005a0:	f002 ff86 	bl	80034b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, dir_b);
 80005a4:	7bbb      	ldrb	r3, [r7, #14]
 80005a6:	461a      	mov	r2, r3
 80005a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ac:	4818      	ldr	r0, [pc, #96]	@ (8000610 <setMotor+0xf0>)
 80005ae:	f002 ff7f 	bl	80034b0 <HAL_GPIO_WritePin>
			TIM12 -> CCR2 = speed;
 80005b2:	4a1a      	ldr	r2, [pc, #104]	@ (800061c <setMotor+0xfc>)
 80005b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005b8:	6393      	str	r3, [r2, #56]	@ 0x38
			break;
 80005ba:	e024      	b.n	8000606 <setMotor+0xe6>
		case 3:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, dir_a);
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	461a      	mov	r2, r3
 80005c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c4:	4814      	ldr	r0, [pc, #80]	@ (8000618 <setMotor+0xf8>)
 80005c6:	f002 ff73 	bl	80034b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 , dir_b);
 80005ca:	7bbb      	ldrb	r3, [r7, #14]
 80005cc:	461a      	mov	r2, r3
 80005ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d2:	4811      	ldr	r0, [pc, #68]	@ (8000618 <setMotor+0xf8>)
 80005d4:	f002 ff6c 	bl	80034b0 <HAL_GPIO_WritePin>
			TIM12 -> CCR1 = speed;
 80005d8:	4a10      	ldr	r2, [pc, #64]	@ (800061c <setMotor+0xfc>)
 80005da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005de:	6353      	str	r3, [r2, #52]	@ 0x34
			break;
 80005e0:	e011      	b.n	8000606 <setMotor+0xe6>
		case 4:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 , dir_a);
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	461a      	mov	r2, r3
 80005e6:	2104      	movs	r1, #4
 80005e8:	4809      	ldr	r0, [pc, #36]	@ (8000610 <setMotor+0xf0>)
 80005ea:	f002 ff61 	bl	80034b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4 , dir_b);
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	461a      	mov	r2, r3
 80005f2:	2110      	movs	r1, #16
 80005f4:	4806      	ldr	r0, [pc, #24]	@ (8000610 <setMotor+0xf0>)
 80005f6:	f002 ff5b 	bl	80034b0 <HAL_GPIO_WritePin>
			TIM14 -> CCR1 = speed;
 80005fa:	4a09      	ldr	r2, [pc, #36]	@ (8000620 <setMotor+0x100>)
 80005fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000600:	6353      	str	r3, [r2, #52]	@ 0x34
			break;
 8000602:	e000      	b.n	8000606 <setMotor+0xe6>
		default:
			break;
 8000604:	bf00      	nop
	}
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000
 8000614:	40001c00 	.word	0x40001c00
 8000618:	40020c00 	.word	0x40020c00
 800061c:	40001800 	.word	0x40001800
 8000620:	40002000 	.word	0x40002000

08000624 <arm_init>:

uint8_t arm_init()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	if(LIM_SW2_STAT == 1)
 8000628:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <arm_init+0x5c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d104      	bne.n	800063a <arm_init+0x16>
	{
		setMotor(2, MAX_HORIZONTAL_HOME_SPEED); //--- go back
 8000630:	4914      	ldr	r1, [pc, #80]	@ (8000684 <arm_init+0x60>)
 8000632:	2002      	movs	r0, #2
 8000634:	f7ff ff74 	bl	8000520 <setMotor>
 8000638:	e003      	b.n	8000642 <arm_init+0x1e>
	}
	else
	{
		setMotor(2, 0);
 800063a:	2100      	movs	r1, #0
 800063c:	2002      	movs	r0, #2
 800063e:	f7ff ff6f 	bl	8000520 <setMotor>
	}

	if(LIM_SW2_STAT == 0 && LIM_SW3_STAT == 1)
 8000642:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <arm_init+0x5c>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d109      	bne.n	800065e <arm_init+0x3a>
 800064a:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <arm_init+0x64>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d105      	bne.n	800065e <arm_init+0x3a>
	{
		setMotor(3, MAX_VERTICAL_HOME_SPEED); //--- go down
 8000652:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8000656:	2003      	movs	r0, #3
 8000658:	f7ff ff62 	bl	8000520 <setMotor>
 800065c:	e003      	b.n	8000666 <arm_init+0x42>
	}
	else
	{
		setMotor(3, 0);
 800065e:	2100      	movs	r1, #0
 8000660:	2003      	movs	r0, #3
 8000662:	f7ff ff5d 	bl	8000520 <setMotor>
	}

	if(LIM_SW2_STAT == 0 && LIM_SW3_STAT == 0)
 8000666:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <arm_init+0x5c>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d105      	bne.n	800067a <arm_init+0x56>
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <arm_init+0x64>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <arm_init+0x56>
	{
		return 1; //--- Homing Success
 8000676:	2301      	movs	r3, #1
 8000678:	e000      	b.n	800067c <arm_init+0x58>
	}
	else
	{
		return 0; //--- Homing Failed
 800067a:	2300      	movs	r3, #0
	}
}
 800067c:	4618      	mov	r0, r3
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000039 	.word	0x20000039
 8000684:	fffffea2 	.word	0xfffffea2
 8000688:	2000003a 	.word	0x2000003a

0800068c <transmit_uart>:

void transmit_uart()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	memcpy(UART1_TX_BUFFER + 3, &button1_state, 1);
 8000690:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <transmit_uart+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	@ (80006dc <transmit_uart+0x50>)
 8000694:	7812      	ldrb	r2, [r2, #0]
 8000696:	701a      	strb	r2, [r3, #0]
	memcpy(UART1_TX_BUFFER + 4, &button2_state, 1);
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <transmit_uart+0x54>)
 800069a:	4a12      	ldr	r2, [pc, #72]	@ (80006e4 <transmit_uart+0x58>)
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	701a      	strb	r2, [r3, #0]
	memcpy(UART1_TX_BUFFER + 5, &LIM_SW2_STAT, 1);
 80006a0:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <transmit_uart+0x5c>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	@ (80006ec <transmit_uart+0x60>)
 80006a4:	7812      	ldrb	r2, [r2, #0]
 80006a6:	701a      	strb	r2, [r3, #0]
	memcpy(UART1_TX_BUFFER + 6, &LIM_SW3_STAT, 1);
 80006a8:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <transmit_uart+0x64>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	@ (80006f4 <transmit_uart+0x68>)
 80006ac:	7812      	ldrb	r2, [r2, #0]
 80006ae:	701a      	strb	r2, [r3, #0]
	memcpy(UART1_TX_BUFFER + 7, &enc1_cnt, 2);
 80006b0:	4a11      	ldr	r2, [pc, #68]	@ (80006f8 <transmit_uart+0x6c>)
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <transmit_uart+0x70>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	8013      	strh	r3, [r2, #0]
	memcpy(UART1_TX_BUFFER + 9, &enc2_cnt, 2);
 80006b8:	4a11      	ldr	r2, [pc, #68]	@ (8000700 <transmit_uart+0x74>)
 80006ba:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <transmit_uart+0x78>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	8013      	strh	r3, [r2, #0]
	memcpy(UART1_TX_BUFFER + 11, &enc3_cnt, 2);
 80006c0:	4a11      	ldr	r2, [pc, #68]	@ (8000708 <transmit_uart+0x7c>)
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <transmit_uart+0x80>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	8013      	strh	r3, [r2, #0]

	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)UART1_TX_BUFFER, sizeof(UART1_TX_BUFFER));
 80006c8:	2235      	movs	r2, #53	@ 0x35
 80006ca:	4911      	ldr	r1, [pc, #68]	@ (8000710 <transmit_uart+0x84>)
 80006cc:	4811      	ldr	r0, [pc, #68]	@ (8000714 <transmit_uart+0x88>)
 80006ce:	f004 fbe3 	bl	8004e98 <HAL_UART_Transmit_DMA>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000007 	.word	0x20000007
 80006dc:	2000003b 	.word	0x2000003b
 80006e0:	20000008 	.word	0x20000008
 80006e4:	2000003c 	.word	0x2000003c
 80006e8:	20000009 	.word	0x20000009
 80006ec:	20000039 	.word	0x20000039
 80006f0:	2000000a 	.word	0x2000000a
 80006f4:	2000003a 	.word	0x2000003a
 80006f8:	2000000b 	.word	0x2000000b
 80006fc:	2000063c 	.word	0x2000063c
 8000700:	2000000d 	.word	0x2000000d
 8000704:	2000063e 	.word	0x2000063e
 8000708:	2000000f 	.word	0x2000000f
 800070c:	20000640 	.word	0x20000640
 8000710:	20000004 	.word	0x20000004
 8000714:	200004a0 	.word	0x200004a0

08000718 <led_blink>:


void led_blink()
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	static uint16_t timer = 0;
	static uint8_t state = 0;

	if(timer >= 99)
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <led_blink+0x44>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	2b62      	cmp	r3, #98	@ 0x62
 8000722:	d913      	bls.n	800074c <led_blink+0x34>
	{
		state = !(state);
 8000724:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <led_blink+0x48>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	bf0c      	ite	eq
 800072c:	2301      	moveq	r3, #1
 800072e:	2300      	movne	r3, #0
 8000730:	b2db      	uxtb	r3, r3
 8000732:	461a      	mov	r2, r3
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <led_blink+0x48>)
 8000736:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, state);
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <led_blink+0x48>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	2102      	movs	r1, #2
 8000740:	4808      	ldr	r0, [pc, #32]	@ (8000764 <led_blink+0x4c>)
 8000742:	f002 feb5 	bl	80034b0 <HAL_GPIO_WritePin>
		timer = 0;
 8000746:	4b05      	ldr	r3, [pc, #20]	@ (800075c <led_blink+0x44>)
 8000748:	2200      	movs	r2, #0
 800074a:	801a      	strh	r2, [r3, #0]
	}

	timer++;
 800074c:	4b03      	ldr	r3, [pc, #12]	@ (800075c <led_blink+0x44>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	b29a      	uxth	r2, r3
 8000754:	4b01      	ldr	r3, [pc, #4]	@ (800075c <led_blink+0x44>)
 8000756:	801a      	strh	r2, [r3, #0]
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000716 	.word	0x20000716
 8000760:	20000718 	.word	0x20000718
 8000764:	40021000 	.word	0x40021000

08000768 <read_limit_switch>:

void read_limit_switch()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	LIM_SW2_STAT = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 800076c:	2102      	movs	r1, #2
 800076e:	4808      	ldr	r0, [pc, #32]	@ (8000790 <read_limit_switch+0x28>)
 8000770:	f002 fe86 	bl	8003480 <HAL_GPIO_ReadPin>
 8000774:	4603      	mov	r3, r0
 8000776:	461a      	mov	r2, r3
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <read_limit_switch+0x2c>)
 800077a:	701a      	strb	r2, [r3, #0]
	LIM_SW3_STAT = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3);
 800077c:	2108      	movs	r1, #8
 800077e:	4804      	ldr	r0, [pc, #16]	@ (8000790 <read_limit_switch+0x28>)
 8000780:	f002 fe7e 	bl	8003480 <HAL_GPIO_ReadPin>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	4b03      	ldr	r3, [pc, #12]	@ (8000798 <read_limit_switch+0x30>)
 800078a:	701a      	strb	r2, [r3, #0]
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40020c00 	.word	0x40020c00
 8000794:	20000039 	.word	0x20000039
 8000798:	2000003a 	.word	0x2000003a

0800079c <read_button>:

void read_button()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	button1_state = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 80007a0:	2110      	movs	r1, #16
 80007a2:	4808      	ldr	r0, [pc, #32]	@ (80007c4 <read_button+0x28>)
 80007a4:	f002 fe6c 	bl	8003480 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <read_button+0x2c>)
 80007ae:	701a      	strb	r2, [r3, #0]
	button2_state = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7);
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <read_button+0x28>)
 80007b4:	f002 fe64 	bl	8003480 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b03      	ldr	r3, [pc, #12]	@ (80007cc <read_button+0x30>)
 80007be:	701a      	strb	r2, [r3, #0]
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40020c00 	.word	0x40020c00
 80007c8:	2000003b 	.word	0x2000003b
 80007cc:	2000003c 	.word	0x2000003c

080007d0 <write_relay>:

void write_relay(uint8_t state)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	if(state == 0) //--- ON STATE
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d106      	bne.n	80007ee <write_relay+0x1e>
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e6:	4807      	ldr	r0, [pc, #28]	@ (8000804 <write_relay+0x34>)
 80007e8:	f002 fe62 	bl	80034b0 <HAL_GPIO_WritePin>
	}
	else //--- OFF STATE
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
	}
}
 80007ec:	e005      	b.n	80007fa <write_relay+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f4:	4803      	ldr	r0, [pc, #12]	@ (8000804 <write_relay+0x34>)
 80007f6:	f002 fe5b 	bl	80034b0 <HAL_GPIO_WritePin>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <arm_state_machine>:

void arm_state_machine()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	switch(arm_state)
 800080c:	4b68      	ldr	r3, [pc, #416]	@ (80009b0 <arm_state_machine+0x1a8>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b02      	cmp	r3, #2
 8000812:	d02f      	beq.n	8000874 <arm_state_machine+0x6c>
 8000814:	2b02      	cmp	r3, #2
 8000816:	f300 80c6 	bgt.w	80009a6 <arm_state_machine+0x19e>
 800081a:	2b00      	cmp	r3, #0
 800081c:	d002      	beq.n	8000824 <arm_state_machine+0x1c>
 800081e:	2b01      	cmp	r3, #1
 8000820:	d00d      	beq.n	800083e <arm_state_machine+0x36>
			arm_cnt_ms++;

			break;

		default:
			break;
 8000822:	e0c0      	b.n	80009a6 <arm_state_machine+0x19e>
			if(arm_init())
 8000824:	f7ff fefe 	bl	8000624 <arm_init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	f000 80bd 	beq.w	80009aa <arm_state_machine+0x1a2>
				arm_state++;
 8000830:	4b5f      	ldr	r3, [pc, #380]	@ (80009b0 <arm_state_machine+0x1a8>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b5d      	ldr	r3, [pc, #372]	@ (80009b0 <arm_state_machine+0x1a8>)
 800083a:	701a      	strb	r2, [r3, #0]
			break;
 800083c:	e0b5      	b.n	80009aa <arm_state_machine+0x1a2>
			if(arm_cnt_ms >= 1250)
 800083e:	4b5d      	ldr	r3, [pc, #372]	@ (80009b4 <arm_state_machine+0x1ac>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8000846:	4293      	cmp	r3, r2
 8000848:	d90d      	bls.n	8000866 <arm_state_machine+0x5e>
			  TIM1 -> CNT = TIM2 -> CNT = TIM3 -> CNT = 0;
 800084a:	4a5b      	ldr	r2, [pc, #364]	@ (80009b8 <arm_state_machine+0x1b0>)
 800084c:	2300      	movs	r3, #0
 800084e:	6253      	str	r3, [r2, #36]	@ 0x24
 8000850:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000854:	6253      	str	r3, [r2, #36]	@ 0x24
 8000856:	4a59      	ldr	r2, [pc, #356]	@ (80009bc <arm_state_machine+0x1b4>)
 8000858:	6253      	str	r3, [r2, #36]	@ 0x24
			  arm_state++;
 800085a:	4b55      	ldr	r3, [pc, #340]	@ (80009b0 <arm_state_machine+0x1a8>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b53      	ldr	r3, [pc, #332]	@ (80009b0 <arm_state_machine+0x1a8>)
 8000864:	701a      	strb	r2, [r3, #0]
			arm_cnt_ms++;
 8000866:	4b53      	ldr	r3, [pc, #332]	@ (80009b4 <arm_state_machine+0x1ac>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	b29a      	uxth	r2, r3
 800086e:	4b51      	ldr	r3, [pc, #324]	@ (80009b4 <arm_state_machine+0x1ac>)
 8000870:	801a      	strh	r2, [r3, #0]
			break;
 8000872:	e09b      	b.n	80009ac <arm_state_machine+0x1a4>
			if(arm_cnt_ms >= 9)
 8000874:	4b4f      	ldr	r3, [pc, #316]	@ (80009b4 <arm_state_machine+0x1ac>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	2b08      	cmp	r3, #8
 800087a:	f240 808d 	bls.w	8000998 <arm_state_machine+0x190>
				enc1_cnt = -TIM1 -> CNT;
 800087e:	4b4f      	ldr	r3, [pc, #316]	@ (80009bc <arm_state_machine+0x1b4>)
 8000880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000882:	b29b      	uxth	r3, r3
 8000884:	425b      	negs	r3, r3
 8000886:	b29b      	uxth	r3, r3
 8000888:	b21a      	sxth	r2, r3
 800088a:	4b4d      	ldr	r3, [pc, #308]	@ (80009c0 <arm_state_machine+0x1b8>)
 800088c:	801a      	strh	r2, [r3, #0]
				enc2_cnt = -TIM2 -> CNT;
 800088e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000894:	b29b      	uxth	r3, r3
 8000896:	425b      	negs	r3, r3
 8000898:	b29b      	uxth	r3, r3
 800089a:	b21a      	sxth	r2, r3
 800089c:	4b49      	ldr	r3, [pc, #292]	@ (80009c4 <arm_state_machine+0x1bc>)
 800089e:	801a      	strh	r2, [r3, #0]
				enc3_cnt = -TIM3 -> CNT;
 80008a0:	4b45      	ldr	r3, [pc, #276]	@ (80009b8 <arm_state_machine+0x1b0>)
 80008a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	425b      	negs	r3, r3
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	b21a      	sxth	r2, r3
 80008ac:	4b46      	ldr	r3, [pc, #280]	@ (80009c8 <arm_state_machine+0x1c0>)
 80008ae:	801a      	strh	r2, [r3, #0]
				TIM1 -> CNT = TIM2 -> CNT = TIM3 -> CNT = 0;
 80008b0:	4a41      	ldr	r2, [pc, #260]	@ (80009b8 <arm_state_machine+0x1b0>)
 80008b2:	2300      	movs	r3, #0
 80008b4:	6253      	str	r3, [r2, #36]	@ 0x24
 80008b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ba:	6253      	str	r3, [r2, #36]	@ 0x24
 80008bc:	4a3f      	ldr	r2, [pc, #252]	@ (80009bc <arm_state_machine+0x1b4>)
 80008be:	6253      	str	r3, [r2, #36]	@ 0x24
				PID_Update(&pid_rotation, setpoint_rotation, enc1_cnt, MAX_ROTATION_PID_SPEED);
 80008c0:	4b42      	ldr	r3, [pc, #264]	@ (80009cc <arm_state_machine+0x1c4>)
 80008c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008c6:	ee07 3a90 	vmov	s15, r3
 80008ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ce:	4b3c      	ldr	r3, [pc, #240]	@ (80009c0 <arm_state_machine+0x1b8>)
 80008d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008d4:	ee07 3a10 	vmov	s14, r3
 80008d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80008dc:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 80009d0 <arm_state_machine+0x1c8>
 80008e0:	eef0 0a47 	vmov.f32	s1, s14
 80008e4:	eeb0 0a67 	vmov.f32	s0, s15
 80008e8:	483a      	ldr	r0, [pc, #232]	@ (80009d4 <arm_state_machine+0x1cc>)
 80008ea:	f001 f84a 	bl	8001982 <PID_Update>
				PID_Update(&pid_horizontal, setpoint_horizontal, enc2_cnt, MAX_HORIZONTAL_PID_SPEED);
 80008ee:	4b3a      	ldr	r3, [pc, #232]	@ (80009d8 <arm_state_machine+0x1d0>)
 80008f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008f4:	ee07 3a90 	vmov	s15, r3
 80008f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fc:	4b31      	ldr	r3, [pc, #196]	@ (80009c4 <arm_state_machine+0x1bc>)
 80008fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000902:	ee07 3a10 	vmov	s14, r3
 8000906:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800090a:	ed9f 1a31 	vldr	s2, [pc, #196]	@ 80009d0 <arm_state_machine+0x1c8>
 800090e:	eef0 0a47 	vmov.f32	s1, s14
 8000912:	eeb0 0a67 	vmov.f32	s0, s15
 8000916:	4831      	ldr	r0, [pc, #196]	@ (80009dc <arm_state_machine+0x1d4>)
 8000918:	f001 f833 	bl	8001982 <PID_Update>
				PID_Update(&pid_vertical, setpoint_vertical, enc3_cnt, MAX_VERTICAL_PID_SPEED);
 800091c:	4b30      	ldr	r3, [pc, #192]	@ (80009e0 <arm_state_machine+0x1d8>)
 800091e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000922:	ee07 3a90 	vmov	s15, r3
 8000926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800092a:	4b27      	ldr	r3, [pc, #156]	@ (80009c8 <arm_state_machine+0x1c0>)
 800092c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000930:	ee07 3a10 	vmov	s14, r3
 8000934:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000938:	ed9f 1a25 	vldr	s2, [pc, #148]	@ 80009d0 <arm_state_machine+0x1c8>
 800093c:	eef0 0a47 	vmov.f32	s1, s14
 8000940:	eeb0 0a67 	vmov.f32	s0, s15
 8000944:	4827      	ldr	r0, [pc, #156]	@ (80009e4 <arm_state_machine+0x1dc>)
 8000946:	f001 f81c 	bl	8001982 <PID_Update>
				setMotor(1, (int16_t)pid_rotation.output);
 800094a:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <arm_state_machine+0x1cc>)
 800094c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000954:	ee17 3a90 	vmov	r3, s15
 8000958:	b21b      	sxth	r3, r3
 800095a:	4619      	mov	r1, r3
 800095c:	2001      	movs	r0, #1
 800095e:	f7ff fddf 	bl	8000520 <setMotor>
				setMotor(2, (int16_t)pid_horizontal.output);
 8000962:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <arm_state_machine+0x1d4>)
 8000964:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800096c:	ee17 3a90 	vmov	r3, s15
 8000970:	b21b      	sxth	r3, r3
 8000972:	4619      	mov	r1, r3
 8000974:	2002      	movs	r0, #2
 8000976:	f7ff fdd3 	bl	8000520 <setMotor>
				setMotor(3, (int16_t)pid_vertical.output);
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <arm_state_machine+0x1dc>)
 800097c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000984:	ee17 3a90 	vmov	r3, s15
 8000988:	b21b      	sxth	r3, r3
 800098a:	4619      	mov	r1, r3
 800098c:	2003      	movs	r0, #3
 800098e:	f7ff fdc7 	bl	8000520 <setMotor>
				arm_cnt_ms = 0;
 8000992:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <arm_state_machine+0x1ac>)
 8000994:	2200      	movs	r2, #0
 8000996:	801a      	strh	r2, [r3, #0]
			arm_cnt_ms++;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <arm_state_machine+0x1ac>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	b29a      	uxth	r2, r3
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <arm_state_machine+0x1ac>)
 80009a2:	801a      	strh	r2, [r3, #0]
			break;
 80009a4:	e002      	b.n	80009ac <arm_state_machine+0x1a4>
			break;
 80009a6:	bf00      	nop
 80009a8:	e000      	b.n	80009ac <arm_state_machine+0x1a4>
			break;
 80009aa:	bf00      	nop
	}
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000642 	.word	0x20000642
 80009b4:	20000644 	.word	0x20000644
 80009b8:	40000400 	.word	0x40000400
 80009bc:	40010000 	.word	0x40010000
 80009c0:	2000063c 	.word	0x2000063c
 80009c4:	2000063e 	.word	0x2000063e
 80009c8:	20000640 	.word	0x20000640
 80009cc:	20000710 	.word	0x20000710
 80009d0:	4479c000 	.word	0x4479c000
 80009d4:	20000648 	.word	0x20000648
 80009d8:	20000712 	.word	0x20000712
 80009dc:	20000678 	.word	0x20000678
 80009e0:	20000714 	.word	0x20000714
 80009e4:	200006a8 	.word	0x200006a8

080009e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a15      	ldr	r2, [pc, #84]	@ (8000a48 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d123      	bne.n	8000a40 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		if(rst_state)
 80009f8:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d010      	beq.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x3a>
		{
			if(rst_cnt >= 500)
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a06:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000a0a:	db01      	blt.n	8000a10 <HAL_TIM_PeriodElapsedCallback+0x28>
			{
				NVIC_SystemReset();
 8000a0c:	f7ff fd72 	bl	80004f4 <__NVIC_SystemReset>
			}
			else
			{
				rst_cnt++;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	3301      	adds	r3, #1
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	b21a      	sxth	r2, r3
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000a20:	801a      	strh	r2, [r3, #0]
			}
		}

		led_blink();
 8000a22:	f7ff fe79 	bl	8000718 <led_blink>

		transmit_uart();
 8000a26:	f7ff fe31 	bl	800068c <transmit_uart>

		read_limit_switch();
 8000a2a:	f7ff fe9d 	bl	8000768 <read_limit_switch>

		read_button();
 8000a2e:	f7ff feb5 	bl	800079c <read_button>

		write_relay(relay_state);
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff feca 	bl	80007d0 <write_relay>

		arm_state_machine();
 8000a3c:	f7ff fee4 	bl	8000808 <arm_state_machine>
	}
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200001d0 	.word	0x200001d0
 8000a4c:	2000063a 	.word	0x2000063a
 8000a50:	20000638 	.word	0x20000638
 8000a54:	20000000 	.word	0x20000000

08000a58 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //--- VGT BASE
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x80>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d132      	bne.n	8000ace <HAL_UART_RxCpltCallback+0x76>
	{
		if(UART1_RX_BUFFER[0] == 'A' && UART1_RX_BUFFER[1] == 'B' && UART1_RX_BUFFER[2] == 'C')
 8000a68:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <HAL_UART_RxCpltCallback+0x84>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b41      	cmp	r3, #65	@ 0x41
 8000a6e:	d129      	bne.n	8000ac4 <HAL_UART_RxCpltCallback+0x6c>
 8000a70:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <HAL_UART_RxCpltCallback+0x84>)
 8000a72:	785b      	ldrb	r3, [r3, #1]
 8000a74:	2b42      	cmp	r3, #66	@ 0x42
 8000a76:	d125      	bne.n	8000ac4 <HAL_UART_RxCpltCallback+0x6c>
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <HAL_UART_RxCpltCallback+0x84>)
 8000a7a:	789b      	ldrb	r3, [r3, #2]
 8000a7c:	2b43      	cmp	r3, #67	@ 0x43
 8000a7e:	d121      	bne.n	8000ac4 <HAL_UART_RxCpltCallback+0x6c>
		{
			memcpy(&robot_start, UART1_RX_BUFFER + 3, 1);
 8000a80:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x88>)
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x8c>)
 8000a86:	701a      	strb	r2, [r3, #0]
			memcpy(&robot_reset, UART1_RX_BUFFER + 4, 1);
 8000a88:	4b17      	ldr	r3, [pc, #92]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x90>)
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <HAL_UART_RxCpltCallback+0x94>)
 8000a8e:	701a      	strb	r2, [r3, #0]
			memcpy(&relay_state, UART1_RX_BUFFER + 5, 1);
 8000a90:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <HAL_UART_RxCpltCallback+0x98>)
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <HAL_UART_RxCpltCallback+0x9c>)
 8000a96:	701a      	strb	r2, [r3, #0]
			memcpy(&setpoint_rotation, UART1_RX_BUFFER + 6, 2);
 8000a98:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <HAL_UART_RxCpltCallback+0xa0>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <HAL_UART_RxCpltCallback+0xa4>)
 8000aa0:	801a      	strh	r2, [r3, #0]
			memcpy(&setpoint_horizontal, UART1_RX_BUFFER + 8, 2);
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <HAL_UART_RxCpltCallback+0xa8>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <HAL_UART_RxCpltCallback+0xac>)
 8000aaa:	801a      	strh	r2, [r3, #0]
			memcpy(&setpoint_vertical, UART1_RX_BUFFER + 10, 2);
 8000aac:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <HAL_UART_RxCpltCallback+0xb0>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <HAL_UART_RxCpltCallback+0xb4>)
 8000ab4:	801a      	strh	r2, [r3, #0]

			if(robot_reset == 1)
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <HAL_UART_RxCpltCallback+0x94>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d102      	bne.n	8000ac4 <HAL_UART_RxCpltCallback+0x6c>
			{
				rst_state = 1;
 8000abe:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <HAL_UART_RxCpltCallback+0xb8>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8000ac4:	2235      	movs	r2, #53	@ 0x35
 8000ac6:	4905      	ldr	r1, [pc, #20]	@ (8000adc <HAL_UART_RxCpltCallback+0x84>)
 8000ac8:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x80>)
 8000aca:	f004 fa61 	bl	8004f90 <HAL_UART_Receive_DMA>
	}
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200004a0 	.word	0x200004a0
 8000adc:	200006d8 	.word	0x200006d8
 8000ae0:	200006db 	.word	0x200006db
 8000ae4:	2000070d 	.word	0x2000070d
 8000ae8:	200006dc 	.word	0x200006dc
 8000aec:	2000070e 	.word	0x2000070e
 8000af0:	200006dd 	.word	0x200006dd
 8000af4:	20000000 	.word	0x20000000
 8000af8:	200006de 	.word	0x200006de
 8000afc:	20000710 	.word	0x20000710
 8000b00:	200006e0 	.word	0x200006e0
 8000b04:	20000712 	.word	0x20000712
 8000b08:	200006e2 	.word	0x200006e2
 8000b0c:	20000714 	.word	0x20000714
 8000b10:	2000063a 	.word	0x2000063a

08000b14 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //--- VGT BASE
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a0d      	ldr	r2, [pc, #52]	@ (8000b54 <HAL_UART_RxHalfCpltCallback+0x40>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d113      	bne.n	8000b4c <HAL_UART_RxHalfCpltCallback+0x38>
	{
		if(!(UART1_RX_BUFFER[0] == 'A' && UART1_RX_BUFFER[1] == 'B' && UART1_RX_BUFFER[2] == 'C'))
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <HAL_UART_RxHalfCpltCallback+0x44>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b41      	cmp	r3, #65	@ 0x41
 8000b2a:	d107      	bne.n	8000b3c <HAL_UART_RxHalfCpltCallback+0x28>
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <HAL_UART_RxHalfCpltCallback+0x44>)
 8000b2e:	785b      	ldrb	r3, [r3, #1]
 8000b30:	2b42      	cmp	r3, #66	@ 0x42
 8000b32:	d103      	bne.n	8000b3c <HAL_UART_RxHalfCpltCallback+0x28>
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <HAL_UART_RxHalfCpltCallback+0x44>)
 8000b36:	789b      	ldrb	r3, [r3, #2]
 8000b38:	2b43      	cmp	r3, #67	@ 0x43
 8000b3a:	d007      	beq.n	8000b4c <HAL_UART_RxHalfCpltCallback+0x38>
		{
			HAL_UART_AbortReceive(&huart1);
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <HAL_UART_RxHalfCpltCallback+0x40>)
 8000b3e:	f004 fa4c 	bl	8004fda <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8000b42:	2235      	movs	r2, #53	@ 0x35
 8000b44:	4904      	ldr	r1, [pc, #16]	@ (8000b58 <HAL_UART_RxHalfCpltCallback+0x44>)
 8000b46:	4803      	ldr	r0, [pc, #12]	@ (8000b54 <HAL_UART_RxHalfCpltCallback+0x40>)
 8000b48:	f004 fa22 	bl	8004f90 <HAL_UART_Receive_DMA>
		}
	}

}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200004a0 	.word	0x200004a0
 8000b58:	200006d8 	.word	0x200006d8

08000b5c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //--- VGT BASE
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a07      	ldr	r2, [pc, #28]	@ (8000b84 <HAL_UART_ErrorCallback+0x28>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d107      	bne.n	8000b7c <HAL_UART_ErrorCallback+0x20>
	{
		HAL_UART_AbortReceive(&huart1);
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <HAL_UART_ErrorCallback+0x28>)
 8000b6e:	f004 fa34 	bl	8004fda <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8000b72:	2235      	movs	r2, #53	@ 0x35
 8000b74:	4904      	ldr	r1, [pc, #16]	@ (8000b88 <HAL_UART_ErrorCallback+0x2c>)
 8000b76:	4803      	ldr	r0, [pc, #12]	@ (8000b84 <HAL_UART_ErrorCallback+0x28>)
 8000b78:	f004 fa0a 	bl	8004f90 <HAL_UART_Receive_DMA>
	}
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200004a0 	.word	0x200004a0
 8000b88:	200006d8 	.word	0x200006d8

08000b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b92:	f001 fd47 	bl	8002624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b96:	f000 f89f 	bl	8000cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9a:	f000 fe0f 	bl	80017bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000b9e:	f000 fde5 	bl	800176c <MX_DMA_Init>
  MX_TIM1_Init();
 8000ba2:	f000 f903 	bl	8000dac <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ba6:	f000 f959 	bl	8000e5c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000baa:	f000 f9ab 	bl	8000f04 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bae:	f000 f9fd 	bl	8000fac <MX_TIM4_Init>
  MX_TIM5_Init();
 8000bb2:	f000 fa4f 	bl	8001054 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000bb6:	f000 fad7 	bl	8001168 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000bba:	f000 fb2d 	bl	8001218 <MX_TIM9_Init>
  MX_TIM10_Init();
 8000bbe:	f000 fb7b 	bl	80012b8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000bc2:	f000 fbc7 	bl	8001354 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000bc6:	f000 fc13 	bl	80013f0 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000bca:	f000 fc61 	bl	8001490 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000bce:	f000 fcad 	bl	800152c <MX_TIM14_Init>
  MX_UART4_Init();
 8000bd2:	f000 fcf9 	bl	80015c8 <MX_UART4_Init>
  MX_UART5_Init();
 8000bd6:	f000 fd21 	bl	800161c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000bda:	f000 fd49 	bl	8001670 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000bde:	f000 fd71 	bl	80016c4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000be2:	f000 fd99 	bl	8001718 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000be6:	f000 fa89 	bl	80010fc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000bea:	213c      	movs	r1, #60	@ 0x3c
 8000bec:	4829      	ldr	r0, [pc, #164]	@ (8000c94 <main+0x108>)
 8000bee:	f003 fb8f 	bl	8004310 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000bf2:	213c      	movs	r1, #60	@ 0x3c
 8000bf4:	4828      	ldr	r0, [pc, #160]	@ (8000c98 <main+0x10c>)
 8000bf6:	f003 fb8b 	bl	8004310 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000bfa:	213c      	movs	r1, #60	@ 0x3c
 8000bfc:	4827      	ldr	r0, [pc, #156]	@ (8000c9c <main+0x110>)
 8000bfe:	f003 fb87 	bl	8004310 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000c02:	213c      	movs	r1, #60	@ 0x3c
 8000c04:	4826      	ldr	r0, [pc, #152]	@ (8000ca0 <main+0x114>)
 8000c06:	f003 fb83 	bl	8004310 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000c0a:	213c      	movs	r1, #60	@ 0x3c
 8000c0c:	4825      	ldr	r0, [pc, #148]	@ (8000ca4 <main+0x118>)
 8000c0e:	f003 fb7f 	bl	8004310 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000c12:	213c      	movs	r1, #60	@ 0x3c
 8000c14:	4824      	ldr	r0, [pc, #144]	@ (8000ca8 <main+0x11c>)
 8000c16:	f003 fb7b 	bl	8004310 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4823      	ldr	r0, [pc, #140]	@ (8000cac <main+0x120>)
 8000c1e:	f003 fa09 	bl	8004034 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000c22:	2104      	movs	r1, #4
 8000c24:	4821      	ldr	r0, [pc, #132]	@ (8000cac <main+0x120>)
 8000c26:	f003 fa05 	bl	8004034 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4820      	ldr	r0, [pc, #128]	@ (8000cb0 <main+0x124>)
 8000c2e:	f003 fa01 	bl	8004034 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000c32:	2100      	movs	r1, #0
 8000c34:	481f      	ldr	r0, [pc, #124]	@ (8000cb4 <main+0x128>)
 8000c36:	f003 f9fd 	bl	8004034 <HAL_TIM_PWM_Start>

  float kp = 40, ki = 3, kd = 0;
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb8 <main+0x12c>)
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <main+0x130>)
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	f04f 0300 	mov.w	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]

  PID_Init(&pid_rotation, kp, ki, kd);
 8000c48:	ed97 1a01 	vldr	s2, [r7, #4]
 8000c4c:	edd7 0a02 	vldr	s1, [r7, #8]
 8000c50:	ed97 0a03 	vldr	s0, [r7, #12]
 8000c54:	481a      	ldr	r0, [pc, #104]	@ (8000cc0 <main+0x134>)
 8000c56:	f000 fe57 	bl	8001908 <PID_Init>
  PID_Init(&pid_horizontal, kp, ki, kd);
 8000c5a:	ed97 1a01 	vldr	s2, [r7, #4]
 8000c5e:	edd7 0a02 	vldr	s1, [r7, #8]
 8000c62:	ed97 0a03 	vldr	s0, [r7, #12]
 8000c66:	4817      	ldr	r0, [pc, #92]	@ (8000cc4 <main+0x138>)
 8000c68:	f000 fe4e 	bl	8001908 <PID_Init>
  PID_Init(&pid_vertical, kp, ki, kd);
 8000c6c:	ed97 1a01 	vldr	s2, [r7, #4]
 8000c70:	edd7 0a02 	vldr	s1, [r7, #8]
 8000c74:	ed97 0a03 	vldr	s0, [r7, #12]
 8000c78:	4813      	ldr	r0, [pc, #76]	@ (8000cc8 <main+0x13c>)
 8000c7a:	f000 fe45 	bl	8001908 <PID_Init>

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8000c7e:	2235      	movs	r2, #53	@ 0x35
 8000c80:	4912      	ldr	r1, [pc, #72]	@ (8000ccc <main+0x140>)
 8000c82:	4813      	ldr	r0, [pc, #76]	@ (8000cd0 <main+0x144>)
 8000c84:	f004 f984 	bl	8004f90 <HAL_UART_Receive_DMA>

  HAL_TIM_Base_Start_IT(&htim6);
 8000c88:	4812      	ldr	r0, [pc, #72]	@ (8000cd4 <main+0x148>)
 8000c8a:	f003 f913 	bl	8003eb4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c8e:	bf00      	nop
 8000c90:	e7fd      	b.n	8000c8e <main+0x102>
 8000c92:	bf00      	nop
 8000c94:	20000068 	.word	0x20000068
 8000c98:	200000b0 	.word	0x200000b0
 8000c9c:	200000f8 	.word	0x200000f8
 8000ca0:	20000140 	.word	0x20000140
 8000ca4:	20000188 	.word	0x20000188
 8000ca8:	20000218 	.word	0x20000218
 8000cac:	20000338 	.word	0x20000338
 8000cb0:	20000380 	.word	0x20000380
 8000cb4:	200003c8 	.word	0x200003c8
 8000cb8:	42200000 	.word	0x42200000
 8000cbc:	40400000 	.word	0x40400000
 8000cc0:	20000648 	.word	0x20000648
 8000cc4:	20000678 	.word	0x20000678
 8000cc8:	200006a8 	.word	0x200006a8
 8000ccc:	200006d8 	.word	0x200006d8
 8000cd0:	200004a0 	.word	0x200004a0
 8000cd4:	200001d0 	.word	0x200001d0

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b094      	sub	sp, #80	@ 0x50
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	f107 0320 	add.w	r3, r7, #32
 8000ce2:	2230      	movs	r2, #48	@ 0x30
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f005 fb1a 	bl	8006320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	4b28      	ldr	r3, [pc, #160]	@ (8000da4 <SystemClock_Config+0xcc>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d04:	4a27      	ldr	r2, [pc, #156]	@ (8000da4 <SystemClock_Config+0xcc>)
 8000d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0c:	4b25      	ldr	r3, [pc, #148]	@ (8000da4 <SystemClock_Config+0xcc>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	4b22      	ldr	r3, [pc, #136]	@ (8000da8 <SystemClock_Config+0xd0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a21      	ldr	r2, [pc, #132]	@ (8000da8 <SystemClock_Config+0xd0>)
 8000d22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	4b1f      	ldr	r3, [pc, #124]	@ (8000da8 <SystemClock_Config+0xd0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d34:	2301      	movs	r3, #1
 8000d36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d4c:	23a8      	movs	r3, #168	@ 0xa8
 8000d4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d54:	2304      	movs	r3, #4
 8000d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d58:	f107 0320 	add.w	r3, r7, #32
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f002 fbc1 	bl	80034e4 <HAL_RCC_OscConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d68:	f000 fdc8 	bl	80018fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d70:	2302      	movs	r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d78:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2105      	movs	r1, #5
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fe22 	bl	80039d4 <HAL_RCC_ClockConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d96:	f000 fdb1 	bl	80018fc <Error_Handler>
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	3750      	adds	r7, #80	@ 0x50
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40007000 	.word	0x40007000

08000dac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08c      	sub	sp, #48	@ 0x30
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	2224      	movs	r2, #36	@ 0x24
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f005 fab0 	bl	8006320 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <MX_TIM1_Init+0xa8>)
 8000dca:	4a23      	ldr	r2, [pc, #140]	@ (8000e58 <MX_TIM1_Init+0xac>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dce:	4b21      	ldr	r3, [pc, #132]	@ (8000e54 <MX_TIM1_Init+0xa8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <MX_TIM1_Init+0xa8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	@ (8000e54 <MX_TIM1_Init+0xa8>)
 8000ddc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000de0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <MX_TIM1_Init+0xa8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <MX_TIM1_Init+0xa8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <MX_TIM1_Init+0xa8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000df4:	2301      	movs	r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <MX_TIM1_Init+0xa8>)
 8000e20:	f003 f9d0 	bl	80041c4 <HAL_TIM_Encoder_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000e2a:	f000 fd67 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4806      	ldr	r0, [pc, #24]	@ (8000e54 <MX_TIM1_Init+0xa8>)
 8000e3c:	f003 ff4c 	bl	8004cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000e46:	f000 fd59 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	3730      	adds	r7, #48	@ 0x30
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000068 	.word	0x20000068
 8000e58:	40010000 	.word	0x40010000

08000e5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08c      	sub	sp, #48	@ 0x30
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	2224      	movs	r2, #36	@ 0x24
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f005 fa58 	bl	8006320 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e78:	4b21      	ldr	r3, [pc, #132]	@ (8000f00 <MX_TIM2_Init+0xa4>)
 8000e7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <MX_TIM2_Init+0xa4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e86:	4b1e      	ldr	r3, [pc, #120]	@ (8000f00 <MX_TIM2_Init+0xa4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <MX_TIM2_Init+0xa4>)
 8000e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <MX_TIM2_Init+0xa4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <MX_TIM2_Init+0xa4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <MX_TIM2_Init+0xa4>)
 8000ecc:	f003 f97a 	bl	80041c4 <HAL_TIM_Encoder_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ed6:	f000 fd11 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <MX_TIM2_Init+0xa4>)
 8000ee8:	f003 fef6 	bl	8004cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ef2:	f000 fd03 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	3730      	adds	r7, #48	@ 0x30
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200000b0 	.word	0x200000b0

08000f04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	@ 0x30
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	2224      	movs	r2, #36	@ 0x24
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f005 fa04 	bl	8006320 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f20:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <MX_TIM3_Init+0xa0>)
 8000f22:	4a21      	ldr	r2, [pc, #132]	@ (8000fa8 <MX_TIM3_Init+0xa4>)
 8000f24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <MX_TIM3_Init+0xa0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <MX_TIM3_Init+0xa0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <MX_TIM3_Init+0xa0>)
 8000f34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <MX_TIM3_Init+0xa0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <MX_TIM3_Init+0xa0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <MX_TIM3_Init+0xa0>)
 8000f72:	f003 f927 	bl	80041c4 <HAL_TIM_Encoder_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000f7c:	f000 fcbe 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_TIM3_Init+0xa0>)
 8000f8e:	f003 fea3 	bl	8004cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000f98:	f000 fcb0 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3730      	adds	r7, #48	@ 0x30
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200000f8 	.word	0x200000f8
 8000fa8:	40000400 	.word	0x40000400

08000fac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	@ 0x30
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2224      	movs	r2, #36	@ 0x24
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f005 f9b0 	bl	8006320 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fc8:	4b20      	ldr	r3, [pc, #128]	@ (800104c <MX_TIM4_Init+0xa0>)
 8000fca:	4a21      	ldr	r2, [pc, #132]	@ (8001050 <MX_TIM4_Init+0xa4>)
 8000fcc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fce:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <MX_TIM4_Init+0xa0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <MX_TIM4_Init+0xa0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <MX_TIM4_Init+0xa0>)
 8000fdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fe0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <MX_TIM4_Init+0xa0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <MX_TIM4_Init+0xa0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001006:	2301      	movs	r3, #1
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	4619      	mov	r1, r3
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <MX_TIM4_Init+0xa0>)
 800101a:	f003 f8d3 	bl	80041c4 <HAL_TIM_Encoder_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001024:	f000 fc6a 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_TIM4_Init+0xa0>)
 8001036:	f003 fe4f 	bl	8004cd8 <HAL_TIMEx_MasterConfigSynchronization>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001040:	f000 fc5c 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3730      	adds	r7, #48	@ 0x30
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000140 	.word	0x20000140
 8001050:	40000800 	.word	0x40000800

08001054 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	@ 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */
  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2224      	movs	r2, #36	@ 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f005 f95c 	bl	8006320 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001070:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <MX_TIM5_Init+0xa0>)
 8001072:	4a21      	ldr	r2, [pc, #132]	@ (80010f8 <MX_TIM5_Init+0xa4>)
 8001074:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001076:	4b1f      	ldr	r3, [pc, #124]	@ (80010f4 <MX_TIM5_Init+0xa0>)
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <MX_TIM5_Init+0xa0>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001082:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <MX_TIM5_Init+0xa0>)
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_TIM5_Init+0xa0>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <MX_TIM5_Init+0xa0>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001096:	2301      	movs	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800109e:	2301      	movs	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010ae:	2301      	movs	r3, #1
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <MX_TIM5_Init+0xa0>)
 80010c2:	f003 f87f 	bl	80041c4 <HAL_TIM_Encoder_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80010cc:	f000 fc16 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <MX_TIM5_Init+0xa0>)
 80010de:	f003 fdfb 	bl	8004cd8 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80010e8:	f000 fc08 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3730      	adds	r7, #48	@ 0x30
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000188 	.word	0x20000188
 80010f8:	40000c00 	.word	0x40000c00

080010fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001102:	463b      	mov	r3, r7
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <MX_TIM6_Init+0x64>)
 800110c:	4a15      	ldr	r2, [pc, #84]	@ (8001164 <MX_TIM6_Init+0x68>)
 800110e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001110:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <MX_TIM6_Init+0x64>)
 8001112:	2253      	movs	r2, #83	@ 0x53
 8001114:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001116:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <MX_TIM6_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800111c:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <MX_TIM6_Init+0x64>)
 800111e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001122:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001124:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <MX_TIM6_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800112a:	480d      	ldr	r0, [pc, #52]	@ (8001160 <MX_TIM6_Init+0x64>)
 800112c:	f002 fe72 	bl	8003e14 <HAL_TIM_Base_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001136:	f000 fbe1 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	@ (8001160 <MX_TIM6_Init+0x64>)
 8001148:	f003 fdc6 	bl	8004cd8 <HAL_TIMEx_MasterConfigSynchronization>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001152:	f000 fbd3 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200001d0 	.word	0x200001d0
 8001164:	40001000 	.word	0x40001000

08001168 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	@ 0x30
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2224      	movs	r2, #36	@ 0x24
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f005 f8d2 	bl	8006320 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <MX_TIM8_Init+0xa8>)
 8001186:	4a23      	ldr	r2, [pc, #140]	@ (8001214 <MX_TIM8_Init+0xac>)
 8001188:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800118a:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <MX_TIM8_Init+0xa8>)
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <MX_TIM8_Init+0xa8>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001196:	4b1e      	ldr	r3, [pc, #120]	@ (8001210 <MX_TIM8_Init+0xa8>)
 8001198:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800119c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119e:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <MX_TIM8_Init+0xa8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <MX_TIM8_Init+0xa8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <MX_TIM8_Init+0xa8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011b8:	2301      	movs	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011c8:	2301      	movs	r3, #1
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4619      	mov	r1, r3
 80011da:	480d      	ldr	r0, [pc, #52]	@ (8001210 <MX_TIM8_Init+0xa8>)
 80011dc:	f002 fff2 	bl	80041c4 <HAL_TIM_Encoder_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80011e6:	f000 fb89 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	@ (8001210 <MX_TIM8_Init+0xa8>)
 80011f8:	f003 fd6e 	bl	8004cd8 <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001202:	f000 fb7b 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	3730      	adds	r7, #48	@ 0x30
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000218 	.word	0x20000218
 8001214:	40010400 	.word	0x40010400

08001218 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
 800122c:	615a      	str	r2, [r3, #20]
 800122e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001230:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <MX_TIM9_Init+0x98>)
 8001232:	4a20      	ldr	r2, [pc, #128]	@ (80012b4 <MX_TIM9_Init+0x9c>)
 8001234:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001236:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <MX_TIM9_Init+0x98>)
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <MX_TIM9_Init+0x98>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001242:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <MX_TIM9_Init+0x98>)
 8001244:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001248:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124a:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <MX_TIM9_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001250:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <MX_TIM9_Init+0x98>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001256:	4816      	ldr	r0, [pc, #88]	@ (80012b0 <MX_TIM9_Init+0x98>)
 8001258:	f002 fe9c 	bl	8003f94 <HAL_TIM_PWM_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001262:	f000 fb4b 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001266:	2360      	movs	r3, #96	@ 0x60
 8001268:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <MX_TIM9_Init+0x98>)
 800127e:	f003 f9c5 	bl	800460c <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001288:	f000 fb38 	bl	80018fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2204      	movs	r2, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4807      	ldr	r0, [pc, #28]	@ (80012b0 <MX_TIM9_Init+0x98>)
 8001294:	f003 f9ba 	bl	800460c <HAL_TIM_PWM_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800129e:	f000 fb2d 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80012a2:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <MX_TIM9_Init+0x98>)
 80012a4:	f000 fe76 	bl	8001f94 <HAL_TIM_MspPostInit>

}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000260 	.word	0x20000260
 80012b4:	40014000 	.word	0x40014000

080012b8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
 80012cc:	615a      	str	r2, [r3, #20]
 80012ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80012d0:	4b1e      	ldr	r3, [pc, #120]	@ (800134c <MX_TIM10_Init+0x94>)
 80012d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001350 <MX_TIM10_Init+0x98>)
 80012d4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <MX_TIM10_Init+0x94>)
 80012d8:	2200      	movs	r2, #0
 80012da:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <MX_TIM10_Init+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <MX_TIM10_Init+0x94>)
 80012e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012e8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ea:	4b18      	ldr	r3, [pc, #96]	@ (800134c <MX_TIM10_Init+0x94>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f0:	4b16      	ldr	r3, [pc, #88]	@ (800134c <MX_TIM10_Init+0x94>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80012f6:	4815      	ldr	r0, [pc, #84]	@ (800134c <MX_TIM10_Init+0x94>)
 80012f8:	f002 fd8c 	bl	8003e14 <HAL_TIM_Base_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001302:	f000 fafb 	bl	80018fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001306:	4811      	ldr	r0, [pc, #68]	@ (800134c <MX_TIM10_Init+0x94>)
 8001308:	f002 fe44 	bl	8003f94 <HAL_TIM_PWM_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001312:	f000 faf3 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001316:	2360      	movs	r3, #96	@ 0x60
 8001318:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2200      	movs	r2, #0
 800132a:	4619      	mov	r1, r3
 800132c:	4807      	ldr	r0, [pc, #28]	@ (800134c <MX_TIM10_Init+0x94>)
 800132e:	f003 f96d 	bl	800460c <HAL_TIM_PWM_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001338:	f000 fae0 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <MX_TIM10_Init+0x94>)
 800133e:	f000 fe29 	bl	8001f94 <HAL_TIM_MspPostInit>

}
 8001342:	bf00      	nop
 8001344:	3720      	adds	r7, #32
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200002a8 	.word	0x200002a8
 8001350:	40014400 	.word	0x40014400

08001354 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800136c:	4b1e      	ldr	r3, [pc, #120]	@ (80013e8 <MX_TIM11_Init+0x94>)
 800136e:	4a1f      	ldr	r2, [pc, #124]	@ (80013ec <MX_TIM11_Init+0x98>)
 8001370:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001372:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <MX_TIM11_Init+0x94>)
 8001374:	2200      	movs	r2, #0
 8001376:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <MX_TIM11_Init+0x94>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800137e:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <MX_TIM11_Init+0x94>)
 8001380:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001384:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001386:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <MX_TIM11_Init+0x94>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138c:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <MX_TIM11_Init+0x94>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001392:	4815      	ldr	r0, [pc, #84]	@ (80013e8 <MX_TIM11_Init+0x94>)
 8001394:	f002 fd3e 	bl	8003e14 <HAL_TIM_Base_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800139e:	f000 faad 	bl	80018fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80013a2:	4811      	ldr	r0, [pc, #68]	@ (80013e8 <MX_TIM11_Init+0x94>)
 80013a4:	f002 fdf6 	bl	8003f94 <HAL_TIM_PWM_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80013ae:	f000 faa5 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b2:	2360      	movs	r3, #96	@ 0x60
 80013b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	4807      	ldr	r0, [pc, #28]	@ (80013e8 <MX_TIM11_Init+0x94>)
 80013ca:	f003 f91f 	bl	800460c <HAL_TIM_PWM_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80013d4:	f000 fa92 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80013d8:	4803      	ldr	r0, [pc, #12]	@ (80013e8 <MX_TIM11_Init+0x94>)
 80013da:	f000 fddb 	bl	8001f94 <HAL_TIM_MspPostInit>

}
 80013de:	bf00      	nop
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200002f0 	.word	0x200002f0
 80013ec:	40014800 	.word	0x40014800

080013f0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	615a      	str	r2, [r3, #20]
 8001406:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001408:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <MX_TIM12_Init+0x98>)
 800140a:	4a20      	ldr	r2, [pc, #128]	@ (800148c <MX_TIM12_Init+0x9c>)
 800140c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 800140e:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <MX_TIM12_Init+0x98>)
 8001410:	2253      	movs	r2, #83	@ 0x53
 8001412:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <MX_TIM12_Init+0x98>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 800141a:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <MX_TIM12_Init+0x98>)
 800141c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001420:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <MX_TIM12_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <MX_TIM12_Init+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800142e:	4816      	ldr	r0, [pc, #88]	@ (8001488 <MX_TIM12_Init+0x98>)
 8001430:	f002 fdb0 	bl	8003f94 <HAL_TIM_PWM_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800143a:	f000 fa5f 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800143e:	2360      	movs	r3, #96	@ 0x60
 8001440:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	480c      	ldr	r0, [pc, #48]	@ (8001488 <MX_TIM12_Init+0x98>)
 8001456:	f003 f8d9 	bl	800460c <HAL_TIM_PWM_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001460:	f000 fa4c 	bl	80018fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2204      	movs	r2, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4807      	ldr	r0, [pc, #28]	@ (8001488 <MX_TIM12_Init+0x98>)
 800146c:	f003 f8ce 	bl	800460c <HAL_TIM_PWM_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001476:	f000 fa41 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800147a:	4803      	ldr	r0, [pc, #12]	@ (8001488 <MX_TIM12_Init+0x98>)
 800147c:	f000 fd8a 	bl	8001f94 <HAL_TIM_MspPostInit>

}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000338 	.word	0x20000338
 800148c:	40001800 	.word	0x40001800

08001490 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80014a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <MX_TIM13_Init+0x94>)
 80014aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001528 <MX_TIM13_Init+0x98>)
 80014ac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 80014ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001524 <MX_TIM13_Init+0x94>)
 80014b0:	2253      	movs	r2, #83	@ 0x53
 80014b2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <MX_TIM13_Init+0x94>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_TIM13_Init+0x94>)
 80014bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014c0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <MX_TIM13_Init+0x94>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <MX_TIM13_Init+0x94>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80014ce:	4815      	ldr	r0, [pc, #84]	@ (8001524 <MX_TIM13_Init+0x94>)
 80014d0:	f002 fca0 	bl	8003e14 <HAL_TIM_Base_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80014da:	f000 fa0f 	bl	80018fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80014de:	4811      	ldr	r0, [pc, #68]	@ (8001524 <MX_TIM13_Init+0x94>)
 80014e0:	f002 fd58 	bl	8003f94 <HAL_TIM_PWM_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80014ea:	f000 fa07 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ee:	2360      	movs	r3, #96	@ 0x60
 80014f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	4807      	ldr	r0, [pc, #28]	@ (8001524 <MX_TIM13_Init+0x94>)
 8001506:	f003 f881 	bl	800460c <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001510:	f000 f9f4 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001514:	4803      	ldr	r0, [pc, #12]	@ (8001524 <MX_TIM13_Init+0x94>)
 8001516:	f000 fd3d 	bl	8001f94 <HAL_TIM_MspPostInit>

}
 800151a:	bf00      	nop
 800151c:	3720      	adds	r7, #32
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000380 	.word	0x20000380
 8001528:	40001c00 	.word	0x40001c00

0800152c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
 8001540:	615a      	str	r2, [r3, #20]
 8001542:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001544:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <MX_TIM14_Init+0x94>)
 8001546:	4a1f      	ldr	r2, [pc, #124]	@ (80015c4 <MX_TIM14_Init+0x98>)
 8001548:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 800154a:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <MX_TIM14_Init+0x94>)
 800154c:	2253      	movs	r2, #83	@ 0x53
 800154e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001550:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <MX_TIM14_Init+0x94>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8001556:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <MX_TIM14_Init+0x94>)
 8001558:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800155c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155e:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <MX_TIM14_Init+0x94>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <MX_TIM14_Init+0x94>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800156a:	4815      	ldr	r0, [pc, #84]	@ (80015c0 <MX_TIM14_Init+0x94>)
 800156c:	f002 fc52 	bl	8003e14 <HAL_TIM_Base_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001576:	f000 f9c1 	bl	80018fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800157a:	4811      	ldr	r0, [pc, #68]	@ (80015c0 <MX_TIM14_Init+0x94>)
 800157c:	f002 fd0a 	bl	8003f94 <HAL_TIM_PWM_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001586:	f000 f9b9 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158a:	2360      	movs	r3, #96	@ 0x60
 800158c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	4619      	mov	r1, r3
 80015a0:	4807      	ldr	r0, [pc, #28]	@ (80015c0 <MX_TIM14_Init+0x94>)
 80015a2:	f003 f833 	bl	800460c <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80015ac:	f000 f9a6 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80015b0:	4803      	ldr	r0, [pc, #12]	@ (80015c0 <MX_TIM14_Init+0x94>)
 80015b2:	f000 fcef 	bl	8001f94 <HAL_TIM_MspPostInit>

}
 80015b6:	bf00      	nop
 80015b8:	3720      	adds	r7, #32
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200003c8 	.word	0x200003c8
 80015c4:	40002000 	.word	0x40002000

080015c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <MX_UART4_Init+0x4c>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <MX_UART4_Init+0x50>)
 80015d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <MX_UART4_Init+0x4c>)
 80015d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <MX_UART4_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <MX_UART4_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <MX_UART4_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015ec:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <MX_UART4_Init+0x4c>)
 80015ee:	220c      	movs	r2, #12
 80015f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f2:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <MX_UART4_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <MX_UART4_Init+0x4c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	@ (8001614 <MX_UART4_Init+0x4c>)
 8001600:	f003 fbfa 	bl	8004df8 <HAL_UART_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800160a:	f000 f977 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000410 	.word	0x20000410
 8001618:	40004c00 	.word	0x40004c00

0800161c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <MX_UART5_Init+0x4c>)
 8001622:	4a12      	ldr	r2, [pc, #72]	@ (800166c <MX_UART5_Init+0x50>)
 8001624:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <MX_UART5_Init+0x4c>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <MX_UART5_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <MX_UART5_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <MX_UART5_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <MX_UART5_Init+0x4c>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <MX_UART5_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <MX_UART5_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	@ (8001668 <MX_UART5_Init+0x4c>)
 8001654:	f003 fbd0 	bl	8004df8 <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800165e:	f000 f94d 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000458 	.word	0x20000458
 800166c:	40005000 	.word	0x40005000

08001670 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 8001676:	4a12      	ldr	r2, [pc, #72]	@ (80016c0 <MX_USART1_UART_Init+0x50>)
 8001678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 80016a8:	f003 fba6 	bl	8004df8 <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016b2:	f000 f923 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200004a0 	.word	0x200004a0
 80016c0:	40011000 	.word	0x40011000

080016c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c8:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	@ (8001714 <MX_USART2_UART_Init+0x50>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016fc:	f003 fb7c 	bl	8004df8 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001706:	f000 f8f9 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200004e8 	.word	0x200004e8
 8001714:	40004400 	.word	0x40004400

08001718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 800171e:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <MX_USART3_UART_Init+0x50>)
 8001720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 8001750:	f003 fb52 	bl	8004df8 <HAL_UART_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800175a:	f000 f8cf 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000530 	.word	0x20000530
 8001768:	40004800 	.word	0x40004800

0800176c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <MX_DMA_Init+0x4c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a0f      	ldr	r2, [pc, #60]	@ (80017b8 <MX_DMA_Init+0x4c>)
 800177c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b0d      	ldr	r3, [pc, #52]	@ (80017b8 <MX_DMA_Init+0x4c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	203a      	movs	r0, #58	@ 0x3a
 8001794:	f001 f893 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001798:	203a      	movs	r0, #58	@ 0x3a
 800179a:	f001 f8ac 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	2046      	movs	r0, #70	@ 0x46
 80017a4:	f001 f88b 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80017a8:	2046      	movs	r0, #70	@ 0x46
 80017aa:	f001 f8a4 	bl	80028f6 <HAL_NVIC_EnableIRQ>

}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800

080017bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08c      	sub	sp, #48	@ 0x30
 80017c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
 80017d6:	4b46      	ldr	r3, [pc, #280]	@ (80018f0 <MX_GPIO_Init+0x134>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a45      	ldr	r2, [pc, #276]	@ (80018f0 <MX_GPIO_Init+0x134>)
 80017dc:	f043 0310 	orr.w	r3, r3, #16
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b43      	ldr	r3, [pc, #268]	@ (80018f0 <MX_GPIO_Init+0x134>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	4b3f      	ldr	r3, [pc, #252]	@ (80018f0 <MX_GPIO_Init+0x134>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a3e      	ldr	r2, [pc, #248]	@ (80018f0 <MX_GPIO_Init+0x134>)
 80017f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b3c      	ldr	r3, [pc, #240]	@ (80018f0 <MX_GPIO_Init+0x134>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b38      	ldr	r3, [pc, #224]	@ (80018f0 <MX_GPIO_Init+0x134>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a37      	ldr	r2, [pc, #220]	@ (80018f0 <MX_GPIO_Init+0x134>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b35      	ldr	r3, [pc, #212]	@ (80018f0 <MX_GPIO_Init+0x134>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b31      	ldr	r3, [pc, #196]	@ (80018f0 <MX_GPIO_Init+0x134>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a30      	ldr	r2, [pc, #192]	@ (80018f0 <MX_GPIO_Init+0x134>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b2e      	ldr	r3, [pc, #184]	@ (80018f0 <MX_GPIO_Init+0x134>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b2a      	ldr	r3, [pc, #168]	@ (80018f0 <MX_GPIO_Init+0x134>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a29      	ldr	r2, [pc, #164]	@ (80018f0 <MX_GPIO_Init+0x134>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b27      	ldr	r3, [pc, #156]	@ (80018f0 <MX_GPIO_Init+0x134>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b23      	ldr	r3, [pc, #140]	@ (80018f0 <MX_GPIO_Init+0x134>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a22      	ldr	r2, [pc, #136]	@ (80018f0 <MX_GPIO_Init+0x134>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b20      	ldr	r3, [pc, #128]	@ (80018f0 <MX_GPIO_Init+0x134>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_10
 800187a:	2200      	movs	r2, #0
 800187c:	f246 5116 	movw	r1, #25878	@ 0x6516
 8001880:	481c      	ldr	r0, [pc, #112]	@ (80018f4 <MX_GPIO_Init+0x138>)
 8001882:	f001 fe15 	bl	80034b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	f44f 6150 	mov.w	r1, #3328	@ 0xd00
 800188c:	481a      	ldr	r0, [pc, #104]	@ (80018f8 <MX_GPIO_Init+0x13c>)
 800188e:	f001 fe0f 	bl	80034b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE8 PE10
                           PE13 PE14 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_10
 8001892:	f246 5316 	movw	r3, #25878	@ 0x6516
 8001896:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	4812      	ldr	r0, [pc, #72]	@ (80018f4 <MX_GPIO_Init+0x138>)
 80018ac:	f001 fc4c 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 80018b0:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	480b      	ldr	r0, [pc, #44]	@ (80018f8 <MX_GPIO_Init+0x13c>)
 80018ca:	f001 fc3d 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80018ce:	239b      	movs	r3, #155	@ 0x9b
 80018d0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	4619      	mov	r1, r3
 80018e0:	4805      	ldr	r0, [pc, #20]	@ (80018f8 <MX_GPIO_Init+0x13c>)
 80018e2:	f001 fc31 	bl	8003148 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018e6:	bf00      	nop
 80018e8:	3730      	adds	r7, #48	@ 0x30
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40020c00 	.word	0x40020c00

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <Error_Handler+0x8>

08001908 <PID_Init>:

#include "pid.h"

/* Functions */
void PID_Init(PID_t *uPID, float kp, float ki, float kd)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	ed87 0a02 	vstr	s0, [r7, #8]
 8001914:	edc7 0a01 	vstr	s1, [r7, #4]
 8001918:	ed87 1a00 	vstr	s2, [r7]
	uPID -> kp = kp;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	601a      	str	r2, [r3, #0]
	uPID -> ki = ki;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	605a      	str	r2, [r3, #4]
	uPID -> kd = kd;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	609a      	str	r2, [r3, #8]

	uPID -> proportional 	= 0;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
	uPID -> integral 		= 0;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
	uPID -> derivative 		= 0;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	615a      	str	r2, [r3, #20]

	uPID -> error 			= 0;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
	uPID -> prev_error 		= 0;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
	uPID -> setpoint 		= 0;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	621a      	str	r2, [r3, #32]
	uPID -> feedback		= 0;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	@ 0x24

	uPID -> max_output		= 0;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	629a      	str	r2, [r3, #40]	@ 0x28
	uPID -> output			= 0;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	62da      	str	r2, [r3, #44]	@ 0x2c

	return;
 8001976:	bf00      	nop
}
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <PID_Update>:


void PID_Update(PID_t *uPID, float setpoint, float feedback, float max_output)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	ed87 0a02 	vstr	s0, [r7, #8]
 800198e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001992:	ed87 1a00 	vstr	s2, [r7]
	uPID->setpoint 		= setpoint;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	621a      	str	r2, [r3, #32]
	uPID->feedback 		= feedback;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	625a      	str	r2, [r3, #36]	@ 0x24
	uPID->max_output 	= max_output;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	629a      	str	r2, [r3, #40]	@ 0x28

	uPID->error = uPID->setpoint - uPID->feedback;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80019b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	edc3 7a06 	vstr	s15, [r3, #24]
//	    if(uPID->error > 180) 			{ setpoint -= 360; }
//	    else if(uPID->error < -180) 	{ setpoint += 360; }
//	    uPID->error = setpoint - feedback;
//	}

	uPID->proportional = uPID->kp * uPID->error;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	ed93 7a00 	vldr	s14, [r3]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80019ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	edc3 7a03 	vstr	s15, [r3, #12]
	uPID->integral    += uPID->ki * uPID->error;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	ed93 7a04 	vldr	s14, [r3, #16]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80019e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	edc3 7a04 	vstr	s15, [r3, #16]
	uPID->derivative   = uPID->kd * (uPID->error - uPID->prev_error);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	edd3 6a06 	vldr	s13, [r3, #24]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	edc3 7a05 	vstr	s15, [r3, #20]
	uPID->prev_error   = uPID->error;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	699a      	ldr	r2, [r3, #24]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	61da      	str	r2, [r3, #28]

	if(uPID->integral >= uPID->max_output) 			{ uPID->integral =   uPID->max_output;  }
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	db04      	blt.n	8001a3c <PID_Update+0xba>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	e014      	b.n	8001a66 <PID_Update+0xe4>
	else if(uPID->integral < -(uPID->max_output)) 	{ uPID->integral = -(uPID->max_output); }
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a48:	eef1 7a67 	vneg.f32	s15, s15
 8001a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a54:	d507      	bpl.n	8001a66 <PID_Update+0xe4>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a5c:	eef1 7a67 	vneg.f32	s15, s15
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	edc3 7a04 	vstr	s15, [r3, #16]

	uPID->output = (uPID->proportional) + (uPID->integral) + (uPID->derivative);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	if(uPID->output >= uPID->max_output) 			{ uPID->output =   uPID->max_output;  }
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9a:	db04      	blt.n	8001aa6 <PID_Update+0x124>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }

	return;
 8001aa4:	e016      	b.n	8001ad4 <PID_Update+0x152>
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ab2:	eef1 7a67 	vneg.f32	s15, s15
 8001ab6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	d400      	bmi.n	8001ac2 <PID_Update+0x140>
	return;
 8001ac0:	e008      	b.n	8001ad4 <PID_Update+0x152>
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ac8:	eef1 7a67 	vneg.f32	s15, s15
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	return;
 8001ad2:	bf00      	nop
}
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <HAL_MspInit+0x58>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	4a12      	ldr	r2, [pc, #72]	@ (8001b38 <HAL_MspInit+0x58>)
 8001af0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <HAL_MspInit+0x58>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	603b      	str	r3, [r7, #0]
 8001b06:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <HAL_MspInit+0x58>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b38 <HAL_MspInit+0x58>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_MspInit+0x58>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	2005      	movs	r0, #5
 8001b24:	f000 fecb 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b28:	2005      	movs	r0, #5
 8001b2a:	f000 fee4 	bl	80028f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b094      	sub	sp, #80	@ 0x50
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a8b      	ldr	r2, [pc, #556]	@ (8001d88 <HAL_TIM_Encoder_MspInit+0x24c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d12d      	bne.n	8001bba <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b62:	4b8a      	ldr	r3, [pc, #552]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	4a89      	ldr	r2, [pc, #548]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6e:	4b87      	ldr	r3, [pc, #540]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b7e:	4b83      	ldr	r3, [pc, #524]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	4a82      	ldr	r2, [pc, #520]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001b84:	f043 0310 	orr.w	r3, r3, #16
 8001b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8a:	4b80      	ldr	r3, [pc, #512]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001b96:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4877      	ldr	r0, [pc, #476]	@ (8001d90 <HAL_TIM_Encoder_MspInit+0x254>)
 8001bb4:	f001 fac8 	bl	8003148 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001bb8:	e129      	b.n	8001e0e <HAL_TIM_Encoder_MspInit+0x2d2>
  else if(htim_encoder->Instance==TIM2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bc2:	d14a      	bne.n	8001c5a <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bc8:	4b70      	ldr	r3, [pc, #448]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	4a6f      	ldr	r2, [pc, #444]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd4:	4b6d      	ldr	r3, [pc, #436]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001be4:	4b69      	ldr	r3, [pc, #420]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	4a68      	ldr	r2, [pc, #416]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf0:	4b66      	ldr	r3, [pc, #408]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c00:	4b62      	ldr	r3, [pc, #392]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c04:	4a61      	ldr	r2, [pc, #388]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001c06:	f043 0302 	orr.w	r3, r3, #2
 8001c0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0c:	4b5f      	ldr	r3, [pc, #380]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c18:	2320      	movs	r3, #32
 8001c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c30:	4619      	mov	r1, r3
 8001c32:	4858      	ldr	r0, [pc, #352]	@ (8001d94 <HAL_TIM_Encoder_MspInit+0x258>)
 8001c34:	f001 fa88 	bl	8003148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c50:	4619      	mov	r1, r3
 8001c52:	4851      	ldr	r0, [pc, #324]	@ (8001d98 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001c54:	f001 fa78 	bl	8003148 <HAL_GPIO_Init>
}
 8001c58:	e0d9      	b.n	8001e0e <HAL_TIM_Encoder_MspInit+0x2d2>
  else if(htim_encoder->Instance==TIM3)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a4f      	ldr	r2, [pc, #316]	@ (8001d9c <HAL_TIM_Encoder_MspInit+0x260>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d12c      	bne.n	8001cbe <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c68:	4b48      	ldr	r3, [pc, #288]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	4a47      	ldr	r2, [pc, #284]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001c6e:	f043 0302 	orr.w	r3, r3, #2
 8001c72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c74:	4b45      	ldr	r3, [pc, #276]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
 8001c84:	4b41      	ldr	r3, [pc, #260]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c88:	4a40      	ldr	r2, [pc, #256]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001c8a:	f043 0302 	orr.w	r3, r3, #2
 8001c8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c90:	4b3e      	ldr	r3, [pc, #248]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	623b      	str	r3, [r7, #32]
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c9c:	2330      	movs	r3, #48	@ 0x30
 8001c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cac:	2302      	movs	r3, #2
 8001cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4838      	ldr	r0, [pc, #224]	@ (8001d98 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001cb8:	f001 fa46 	bl	8003148 <HAL_GPIO_Init>
}
 8001cbc:	e0a7      	b.n	8001e0e <HAL_TIM_Encoder_MspInit+0x2d2>
  else if(htim_encoder->Instance==TIM4)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a37      	ldr	r2, [pc, #220]	@ (8001da0 <HAL_TIM_Encoder_MspInit+0x264>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d12d      	bne.n	8001d24 <HAL_TIM_Encoder_MspInit+0x1e8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	4a2e      	ldr	r2, [pc, #184]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	4b28      	ldr	r3, [pc, #160]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cec:	4a27      	ldr	r2, [pc, #156]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001cee:	f043 0308 	orr.w	r3, r3, #8
 8001cf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf4:	4b25      	ldr	r3, [pc, #148]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d00:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d12:	2302      	movs	r3, #2
 8001d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d16:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4821      	ldr	r0, [pc, #132]	@ (8001da4 <HAL_TIM_Encoder_MspInit+0x268>)
 8001d1e:	f001 fa13 	bl	8003148 <HAL_GPIO_Init>
}
 8001d22:	e074      	b.n	8001e0e <HAL_TIM_Encoder_MspInit+0x2d2>
  else if(htim_encoder->Instance==TIM5)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1f      	ldr	r2, [pc, #124]	@ (8001da8 <HAL_TIM_Encoder_MspInit+0x26c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d13e      	bne.n	8001dac <HAL_TIM_Encoder_MspInit+0x270>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	4a15      	ldr	r2, [pc, #84]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3e:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a0e      	ldr	r2, [pc, #56]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <HAL_TIM_Encoder_MspInit+0x250>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d66:	2303      	movs	r3, #3
 8001d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d76:	2302      	movs	r3, #2
 8001d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4804      	ldr	r0, [pc, #16]	@ (8001d94 <HAL_TIM_Encoder_MspInit+0x258>)
 8001d82:	f001 f9e1 	bl	8003148 <HAL_GPIO_Init>
}
 8001d86:	e042      	b.n	8001e0e <HAL_TIM_Encoder_MspInit+0x2d2>
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40000800 	.word	0x40000800
 8001da4:	40020c00 	.word	0x40020c00
 8001da8:	40000c00 	.word	0x40000c00
  else if(htim_encoder->Instance==TIM8)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a19      	ldr	r2, [pc, #100]	@ (8001e18 <HAL_TIM_Encoder_MspInit+0x2dc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d12b      	bne.n	8001e0e <HAL_TIM_Encoder_MspInit+0x2d2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x2e0>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbe:	4a17      	ldr	r2, [pc, #92]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x2e0>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc6:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x2e0>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x2e0>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	4a10      	ldr	r2, [pc, #64]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x2e0>)
 8001ddc:	f043 0304 	orr.w	r3, r3, #4
 8001de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x2e0>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dee:	23c0      	movs	r3, #192	@ 0xc0
 8001df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e02:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001e0a:	f001 f99d 	bl	8003148 <HAL_GPIO_Init>
}
 8001e0e:	bf00      	nop
 8001e10:	3750      	adds	r7, #80	@ 0x50
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40010400 	.word	0x40010400
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020800 	.word	0x40020800

08001e24 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a36      	ldr	r2, [pc, #216]	@ (8001f0c <HAL_TIM_Base_MspInit+0xe8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d116      	bne.n	8001e64 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	4b35      	ldr	r3, [pc, #212]	@ (8001f10 <HAL_TIM_Base_MspInit+0xec>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	4a34      	ldr	r2, [pc, #208]	@ (8001f10 <HAL_TIM_Base_MspInit+0xec>)
 8001e40:	f043 0310 	orr.w	r3, r3, #16
 8001e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e46:	4b32      	ldr	r3, [pc, #200]	@ (8001f10 <HAL_TIM_Base_MspInit+0xec>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	61fb      	str	r3, [r7, #28]
 8001e50:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	2036      	movs	r0, #54	@ 0x36
 8001e58:	f000 fd31 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e5c:	2036      	movs	r0, #54	@ 0x36
 8001e5e:	f000 fd4a 	bl	80028f6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001e62:	e04e      	b.n	8001f02 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM10)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a2a      	ldr	r2, [pc, #168]	@ (8001f14 <HAL_TIM_Base_MspInit+0xf0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d10e      	bne.n	8001e8c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <HAL_TIM_Base_MspInit+0xec>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	4a26      	ldr	r2, [pc, #152]	@ (8001f10 <HAL_TIM_Base_MspInit+0xec>)
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7e:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <HAL_TIM_Base_MspInit+0xec>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	69bb      	ldr	r3, [r7, #24]
}
 8001e8a:	e03a      	b.n	8001f02 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM11)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a21      	ldr	r2, [pc, #132]	@ (8001f18 <HAL_TIM_Base_MspInit+0xf4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d10e      	bne.n	8001eb4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <HAL_TIM_Base_MspInit+0xec>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001f10 <HAL_TIM_Base_MspInit+0xec>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <HAL_TIM_Base_MspInit+0xec>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
}
 8001eb2:	e026      	b.n	8001f02 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM13)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a18      	ldr	r2, [pc, #96]	@ (8001f1c <HAL_TIM_Base_MspInit+0xf8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10e      	bne.n	8001edc <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <HAL_TIM_Base_MspInit+0xec>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	4a12      	ldr	r2, [pc, #72]	@ (8001f10 <HAL_TIM_Base_MspInit+0xec>)
 8001ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ece:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <HAL_TIM_Base_MspInit+0xec>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
}
 8001eda:	e012      	b.n	8001f02 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM14)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f20 <HAL_TIM_Base_MspInit+0xfc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10d      	bne.n	8001f02 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <HAL_TIM_Base_MspInit+0xec>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	4a08      	ldr	r2, [pc, #32]	@ (8001f10 <HAL_TIM_Base_MspInit+0xec>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_TIM_Base_MspInit+0xec>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
}
 8001f02:	bf00      	nop
 8001f04:	3720      	adds	r7, #32
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40001000 	.word	0x40001000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40014400 	.word	0x40014400
 8001f18:	40014800 	.word	0x40014800
 8001f1c:	40001c00 	.word	0x40001c00
 8001f20:	40002000 	.word	0x40002000

08001f24 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a15      	ldr	r2, [pc, #84]	@ (8001f88 <HAL_TIM_PWM_MspInit+0x64>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM9_MspInit 0 */

    /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <HAL_TIM_PWM_MspInit+0x68>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	4a13      	ldr	r2, [pc, #76]	@ (8001f8c <HAL_TIM_PWM_MspInit+0x68>)
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f46:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <HAL_TIM_PWM_MspInit+0x68>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001f52:	e012      	b.n	8001f7a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <HAL_TIM_PWM_MspInit+0x6c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d10d      	bne.n	8001f7a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <HAL_TIM_PWM_MspInit+0x68>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	4a09      	ldr	r2, [pc, #36]	@ (8001f8c <HAL_TIM_PWM_MspInit+0x68>)
 8001f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6e:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <HAL_TIM_PWM_MspInit+0x68>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40014000 	.word	0x40014000
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40001800 	.word	0x40001800

08001f94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08e      	sub	sp, #56	@ 0x38
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a6d      	ldr	r2, [pc, #436]	@ (8002168 <HAL_TIM_MspPostInit+0x1d4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d11e      	bne.n	8001ff4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM9_MspPostInit 0 */

    /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	623b      	str	r3, [r7, #32]
 8001fba:	4b6c      	ldr	r3, [pc, #432]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	4a6b      	ldr	r2, [pc, #428]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 8001fc0:	f043 0310 	orr.w	r3, r3, #16
 8001fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc6:	4b69      	ldr	r3, [pc, #420]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001fd2:	2360      	movs	r3, #96	@ 0x60
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fea:	4619      	mov	r1, r3
 8001fec:	4860      	ldr	r0, [pc, #384]	@ (8002170 <HAL_TIM_MspPostInit+0x1dc>)
 8001fee:	f001 f8ab 	bl	8003148 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001ff2:	e0b5      	b.n	8002160 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM10)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a5e      	ldr	r2, [pc, #376]	@ (8002174 <HAL_TIM_MspPostInit+0x1e0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d11f      	bne.n	800203e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	4b5a      	ldr	r3, [pc, #360]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	4a59      	ldr	r2, [pc, #356]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	6313      	str	r3, [r2, #48]	@ 0x30
 800200e:	4b57      	ldr	r3, [pc, #348]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800201a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800202c:	2303      	movs	r3, #3
 800202e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002030:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002034:	4619      	mov	r1, r3
 8002036:	4850      	ldr	r0, [pc, #320]	@ (8002178 <HAL_TIM_MspPostInit+0x1e4>)
 8002038:	f001 f886 	bl	8003148 <HAL_GPIO_Init>
}
 800203c:	e090      	b.n	8002160 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM11)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a4e      	ldr	r2, [pc, #312]	@ (800217c <HAL_TIM_MspPostInit+0x1e8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d11f      	bne.n	8002088 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	4b47      	ldr	r3, [pc, #284]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	4a46      	ldr	r2, [pc, #280]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	6313      	str	r3, [r2, #48]	@ 0x30
 8002058:	4b44      	ldr	r3, [pc, #272]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002064:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002076:	2303      	movs	r3, #3
 8002078:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800207e:	4619      	mov	r1, r3
 8002080:	483d      	ldr	r0, [pc, #244]	@ (8002178 <HAL_TIM_MspPostInit+0x1e4>)
 8002082:	f001 f861 	bl	8003148 <HAL_GPIO_Init>
}
 8002086:	e06b      	b.n	8002160 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM12)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a3c      	ldr	r2, [pc, #240]	@ (8002180 <HAL_TIM_MspPostInit+0x1ec>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d11f      	bne.n	80020d2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	4b35      	ldr	r3, [pc, #212]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	4a34      	ldr	r2, [pc, #208]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a2:	4b32      	ldr	r3, [pc, #200]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80020ae:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80020c0:	2309      	movs	r3, #9
 80020c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c8:	4619      	mov	r1, r3
 80020ca:	482b      	ldr	r0, [pc, #172]	@ (8002178 <HAL_TIM_MspPostInit+0x1e4>)
 80020cc:	f001 f83c 	bl	8003148 <HAL_GPIO_Init>
}
 80020d0:	e046      	b.n	8002160 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM13)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002184 <HAL_TIM_MspPostInit+0x1f0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d11e      	bne.n	800211a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020dc:	2300      	movs	r3, #0
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	4b22      	ldr	r3, [pc, #136]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e4:	4a21      	ldr	r2, [pc, #132]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ec:	4b1f      	ldr	r3, [pc, #124]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020f8:	2340      	movs	r3, #64	@ 0x40
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002108:	2309      	movs	r3, #9
 800210a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002110:	4619      	mov	r1, r3
 8002112:	481d      	ldr	r0, [pc, #116]	@ (8002188 <HAL_TIM_MspPostInit+0x1f4>)
 8002114:	f001 f818 	bl	8003148 <HAL_GPIO_Init>
}
 8002118:	e022      	b.n	8002160 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM14)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a1b      	ldr	r2, [pc, #108]	@ (800218c <HAL_TIM_MspPostInit+0x1f8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d11d      	bne.n	8002160 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212c:	4a0f      	ldr	r2, [pc, #60]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6313      	str	r3, [r2, #48]	@ 0x30
 8002134:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <HAL_TIM_MspPostInit+0x1d8>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002140:	2380      	movs	r3, #128	@ 0x80
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002150:	2309      	movs	r3, #9
 8002152:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002158:	4619      	mov	r1, r3
 800215a:	480b      	ldr	r0, [pc, #44]	@ (8002188 <HAL_TIM_MspPostInit+0x1f4>)
 800215c:	f000 fff4 	bl	8003148 <HAL_GPIO_Init>
}
 8002160:	bf00      	nop
 8002162:	3738      	adds	r7, #56	@ 0x38
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40014000 	.word	0x40014000
 800216c:	40023800 	.word	0x40023800
 8002170:	40021000 	.word	0x40021000
 8002174:	40014400 	.word	0x40014400
 8002178:	40020400 	.word	0x40020400
 800217c:	40014800 	.word	0x40014800
 8002180:	40001800 	.word	0x40001800
 8002184:	40001c00 	.word	0x40001c00
 8002188:	40020000 	.word	0x40020000
 800218c:	40002000 	.word	0x40002000

08002190 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b092      	sub	sp, #72	@ 0x48
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a8c      	ldr	r2, [pc, #560]	@ (80023e0 <HAL_UART_MspInit+0x250>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d12d      	bne.n	800220e <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80021b6:	4b8b      	ldr	r3, [pc, #556]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	4a8a      	ldr	r2, [pc, #552]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 80021bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80021c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c2:	4b88      	ldr	r3, [pc, #544]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80021cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021d2:	4b84      	ldr	r3, [pc, #528]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	4a83      	ldr	r2, [pc, #524]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021de:	4b81      	ldr	r3, [pc, #516]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021ea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80021fc:	2308      	movs	r3, #8
 80021fe:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002200:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002204:	4619      	mov	r1, r3
 8002206:	4878      	ldr	r0, [pc, #480]	@ (80023e8 <HAL_UART_MspInit+0x258>)
 8002208:	f000 ff9e 	bl	8003148 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800220c:	e162      	b.n	80024d4 <HAL_UART_MspInit+0x344>
  else if(huart->Instance==UART5)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a76      	ldr	r2, [pc, #472]	@ (80023ec <HAL_UART_MspInit+0x25c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d14b      	bne.n	80022b0 <HAL_UART_MspInit+0x120>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002218:	2300      	movs	r3, #0
 800221a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800221c:	4b71      	ldr	r3, [pc, #452]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	4a70      	ldr	r2, [pc, #448]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 8002222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002226:	6413      	str	r3, [r2, #64]	@ 0x40
 8002228:	4b6e      	ldr	r3, [pc, #440]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002230:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	@ 0x24
 8002238:	4b6a      	ldr	r3, [pc, #424]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223c:	4a69      	ldr	r2, [pc, #420]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	6313      	str	r3, [r2, #48]	@ 0x30
 8002244:	4b67      	ldr	r3, [pc, #412]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
 8002254:	4b63      	ldr	r3, [pc, #396]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	4a62      	ldr	r2, [pc, #392]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 800225a:	f043 0308 	orr.w	r3, r3, #8
 800225e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002260:	4b60      	ldr	r3, [pc, #384]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	623b      	str	r3, [r7, #32]
 800226a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800226c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002270:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227a:	2303      	movs	r3, #3
 800227c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800227e:	2308      	movs	r3, #8
 8002280:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002282:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002286:	4619      	mov	r1, r3
 8002288:	4857      	ldr	r0, [pc, #348]	@ (80023e8 <HAL_UART_MspInit+0x258>)
 800228a:	f000 ff5d 	bl	8003148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800228e:	2304      	movs	r3, #4
 8002290:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229a:	2303      	movs	r3, #3
 800229c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800229e:	2308      	movs	r3, #8
 80022a0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022a6:	4619      	mov	r1, r3
 80022a8:	4851      	ldr	r0, [pc, #324]	@ (80023f0 <HAL_UART_MspInit+0x260>)
 80022aa:	f000 ff4d 	bl	8003148 <HAL_GPIO_Init>
}
 80022ae:	e111      	b.n	80024d4 <HAL_UART_MspInit+0x344>
  else if(huart->Instance==USART1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a4f      	ldr	r2, [pc, #316]	@ (80023f4 <HAL_UART_MspInit+0x264>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	f040 80a8 	bne.w	800240c <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART1_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	4b48      	ldr	r3, [pc, #288]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 80022c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c4:	4a47      	ldr	r2, [pc, #284]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 80022c6:	f043 0310 	orr.w	r3, r3, #16
 80022ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80022cc:	4b45      	ldr	r3, [pc, #276]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 80022ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	4b41      	ldr	r3, [pc, #260]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e0:	4a40      	ldr	r2, [pc, #256]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e8:	4b3e      	ldr	r3, [pc, #248]	@ (80023e4 <HAL_UART_MspInit+0x254>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022f4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022f8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002306:	2307      	movs	r3, #7
 8002308:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800230e:	4619      	mov	r1, r3
 8002310:	4839      	ldr	r0, [pc, #228]	@ (80023f8 <HAL_UART_MspInit+0x268>)
 8002312:	f000 ff19 	bl	8003148 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002316:	4b39      	ldr	r3, [pc, #228]	@ (80023fc <HAL_UART_MspInit+0x26c>)
 8002318:	4a39      	ldr	r2, [pc, #228]	@ (8002400 <HAL_UART_MspInit+0x270>)
 800231a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800231c:	4b37      	ldr	r3, [pc, #220]	@ (80023fc <HAL_UART_MspInit+0x26c>)
 800231e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002322:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002324:	4b35      	ldr	r3, [pc, #212]	@ (80023fc <HAL_UART_MspInit+0x26c>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800232a:	4b34      	ldr	r3, [pc, #208]	@ (80023fc <HAL_UART_MspInit+0x26c>)
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002330:	4b32      	ldr	r3, [pc, #200]	@ (80023fc <HAL_UART_MspInit+0x26c>)
 8002332:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002336:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002338:	4b30      	ldr	r3, [pc, #192]	@ (80023fc <HAL_UART_MspInit+0x26c>)
 800233a:	2200      	movs	r2, #0
 800233c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800233e:	4b2f      	ldr	r3, [pc, #188]	@ (80023fc <HAL_UART_MspInit+0x26c>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002344:	4b2d      	ldr	r3, [pc, #180]	@ (80023fc <HAL_UART_MspInit+0x26c>)
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800234a:	4b2c      	ldr	r3, [pc, #176]	@ (80023fc <HAL_UART_MspInit+0x26c>)
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002350:	4b2a      	ldr	r3, [pc, #168]	@ (80023fc <HAL_UART_MspInit+0x26c>)
 8002352:	2200      	movs	r2, #0
 8002354:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002356:	4829      	ldr	r0, [pc, #164]	@ (80023fc <HAL_UART_MspInit+0x26c>)
 8002358:	f000 fae8 	bl	800292c <HAL_DMA_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8002362:	f7ff facb 	bl	80018fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a24      	ldr	r2, [pc, #144]	@ (80023fc <HAL_UART_MspInit+0x26c>)
 800236a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800236c:	4a23      	ldr	r2, [pc, #140]	@ (80023fc <HAL_UART_MspInit+0x26c>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002372:	4b24      	ldr	r3, [pc, #144]	@ (8002404 <HAL_UART_MspInit+0x274>)
 8002374:	4a24      	ldr	r2, [pc, #144]	@ (8002408 <HAL_UART_MspInit+0x278>)
 8002376:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002378:	4b22      	ldr	r3, [pc, #136]	@ (8002404 <HAL_UART_MspInit+0x274>)
 800237a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800237e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002380:	4b20      	ldr	r3, [pc, #128]	@ (8002404 <HAL_UART_MspInit+0x274>)
 8002382:	2240      	movs	r2, #64	@ 0x40
 8002384:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002386:	4b1f      	ldr	r3, [pc, #124]	@ (8002404 <HAL_UART_MspInit+0x274>)
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800238c:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <HAL_UART_MspInit+0x274>)
 800238e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002392:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002394:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <HAL_UART_MspInit+0x274>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800239a:	4b1a      	ldr	r3, [pc, #104]	@ (8002404 <HAL_UART_MspInit+0x274>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80023a0:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <HAL_UART_MspInit+0x274>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023a6:	4b17      	ldr	r3, [pc, #92]	@ (8002404 <HAL_UART_MspInit+0x274>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ac:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <HAL_UART_MspInit+0x274>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80023b2:	4814      	ldr	r0, [pc, #80]	@ (8002404 <HAL_UART_MspInit+0x274>)
 80023b4:	f000 faba 	bl	800292c <HAL_DMA_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_UART_MspInit+0x232>
      Error_Handler();
 80023be:	f7ff fa9d 	bl	80018fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002404 <HAL_UART_MspInit+0x274>)
 80023c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80023c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002404 <HAL_UART_MspInit+0x274>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2100      	movs	r1, #0
 80023d2:	2025      	movs	r0, #37	@ 0x25
 80023d4:	f000 fa73 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023d8:	2025      	movs	r0, #37	@ 0x25
 80023da:	f000 fa8c 	bl	80028f6 <HAL_NVIC_EnableIRQ>
}
 80023de:	e079      	b.n	80024d4 <HAL_UART_MspInit+0x344>
 80023e0:	40004c00 	.word	0x40004c00
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020800 	.word	0x40020800
 80023ec:	40005000 	.word	0x40005000
 80023f0:	40020c00 	.word	0x40020c00
 80023f4:	40011000 	.word	0x40011000
 80023f8:	40020000 	.word	0x40020000
 80023fc:	20000578 	.word	0x20000578
 8002400:	40026440 	.word	0x40026440
 8002404:	200005d8 	.word	0x200005d8
 8002408:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a32      	ldr	r2, [pc, #200]	@ (80024dc <HAL_UART_MspInit+0x34c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d12c      	bne.n	8002470 <HAL_UART_MspInit+0x2e0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	4b31      	ldr	r3, [pc, #196]	@ (80024e0 <HAL_UART_MspInit+0x350>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	4a30      	ldr	r2, [pc, #192]	@ (80024e0 <HAL_UART_MspInit+0x350>)
 8002420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002424:	6413      	str	r3, [r2, #64]	@ 0x40
 8002426:	4b2e      	ldr	r3, [pc, #184]	@ (80024e0 <HAL_UART_MspInit+0x350>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	4b2a      	ldr	r3, [pc, #168]	@ (80024e0 <HAL_UART_MspInit+0x350>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	4a29      	ldr	r2, [pc, #164]	@ (80024e0 <HAL_UART_MspInit+0x350>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6313      	str	r3, [r2, #48]	@ 0x30
 8002442:	4b27      	ldr	r3, [pc, #156]	@ (80024e0 <HAL_UART_MspInit+0x350>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800244e:	230c      	movs	r3, #12
 8002450:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002452:	2302      	movs	r3, #2
 8002454:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245a:	2303      	movs	r3, #3
 800245c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800245e:	2307      	movs	r3, #7
 8002460:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002462:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002466:	4619      	mov	r1, r3
 8002468:	481e      	ldr	r0, [pc, #120]	@ (80024e4 <HAL_UART_MspInit+0x354>)
 800246a:	f000 fe6d 	bl	8003148 <HAL_GPIO_Init>
}
 800246e:	e031      	b.n	80024d4 <HAL_UART_MspInit+0x344>
  else if(huart->Instance==USART3)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1c      	ldr	r2, [pc, #112]	@ (80024e8 <HAL_UART_MspInit+0x358>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d12c      	bne.n	80024d4 <HAL_UART_MspInit+0x344>
    __HAL_RCC_USART3_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	4b18      	ldr	r3, [pc, #96]	@ (80024e0 <HAL_UART_MspInit+0x350>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	4a17      	ldr	r2, [pc, #92]	@ (80024e0 <HAL_UART_MspInit+0x350>)
 8002484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002488:	6413      	str	r3, [r2, #64]	@ 0x40
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_UART_MspInit+0x350>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <HAL_UART_MspInit+0x350>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	4a10      	ldr	r2, [pc, #64]	@ (80024e0 <HAL_UART_MspInit+0x350>)
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a6:	4b0e      	ldr	r3, [pc, #56]	@ (80024e0 <HAL_UART_MspInit+0x350>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024b2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024b6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c0:	2303      	movs	r3, #3
 80024c2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024c4:	2307      	movs	r3, #7
 80024c6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024cc:	4619      	mov	r1, r3
 80024ce:	4807      	ldr	r0, [pc, #28]	@ (80024ec <HAL_UART_MspInit+0x35c>)
 80024d0:	f000 fe3a 	bl	8003148 <HAL_GPIO_Init>
}
 80024d4:	bf00      	nop
 80024d6:	3748      	adds	r7, #72	@ 0x48
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40004400 	.word	0x40004400
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40004800 	.word	0x40004800
 80024ec:	40020400 	.word	0x40020400

080024f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <NMI_Handler+0x4>

080024f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <HardFault_Handler+0x4>

08002500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <MemManage_Handler+0x4>

08002508 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800250c:	bf00      	nop
 800250e:	e7fd      	b.n	800250c <BusFault_Handler+0x4>

08002510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <UsageFault_Handler+0x4>

08002518 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002546:	f000 f8bf 	bl	80026c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}

0800254e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002560:	4802      	ldr	r0, [pc, #8]	@ (800256c <USART1_IRQHandler+0x10>)
 8002562:	f002 fddd 	bl	8005120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200004a0 	.word	0x200004a0

08002570 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002574:	4802      	ldr	r0, [pc, #8]	@ (8002580 <TIM6_DAC_IRQHandler+0x10>)
 8002576:	f001 ff59 	bl	800442c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200001d0 	.word	0x200001d0

08002584 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002588:	4802      	ldr	r0, [pc, #8]	@ (8002594 <DMA2_Stream2_IRQHandler+0x10>)
 800258a:	f000 fb67 	bl	8002c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000578 	.word	0x20000578

08002598 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800259c:	4802      	ldr	r0, [pc, #8]	@ (80025a8 <DMA2_Stream7_IRQHandler+0x10>)
 800259e:	f000 fb5d 	bl	8002c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200005d8 	.word	0x200005d8

080025ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b0:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <SystemInit+0x20>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b6:	4a05      	ldr	r2, [pc, #20]	@ (80025cc <SystemInit+0x20>)
 80025b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002608 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80025d4:	f7ff ffea 	bl	80025ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025d8:	480c      	ldr	r0, [pc, #48]	@ (800260c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025da:	490d      	ldr	r1, [pc, #52]	@ (8002610 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002614 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e0:	e002      	b.n	80025e8 <LoopCopyDataInit>

080025e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e6:	3304      	adds	r3, #4

080025e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ec:	d3f9      	bcc.n	80025e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002618 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025f0:	4c0a      	ldr	r4, [pc, #40]	@ (800261c <LoopFillZerobss+0x22>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f4:	e001      	b.n	80025fa <LoopFillZerobss>

080025f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f8:	3204      	adds	r2, #4

080025fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025fc:	d3fb      	bcc.n	80025f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025fe:	f003 fe97 	bl	8006330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002602:	f7fe fac3 	bl	8000b8c <main>
  bx  lr    
 8002606:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800260c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002610:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8002614:	080063c0 	.word	0x080063c0
  ldr r2, =_sbss
 8002618:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 800261c:	20000720 	.word	0x20000720

08002620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002620:	e7fe      	b.n	8002620 <ADC_IRQHandler>
	...

08002624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002628:	4b0e      	ldr	r3, [pc, #56]	@ (8002664 <HAL_Init+0x40>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0d      	ldr	r2, [pc, #52]	@ (8002664 <HAL_Init+0x40>)
 800262e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002632:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002634:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <HAL_Init+0x40>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0a      	ldr	r2, [pc, #40]	@ (8002664 <HAL_Init+0x40>)
 800263a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800263e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002640:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <HAL_Init+0x40>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a07      	ldr	r2, [pc, #28]	@ (8002664 <HAL_Init+0x40>)
 8002646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800264a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800264c:	2003      	movs	r0, #3
 800264e:	f000 f92b 	bl	80028a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002652:	200f      	movs	r0, #15
 8002654:	f000 f808 	bl	8002668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002658:	f7ff fa42 	bl	8001ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023c00 	.word	0x40023c00

08002668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002670:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <HAL_InitTick+0x54>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <HAL_InitTick+0x58>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	4619      	mov	r1, r3
 800267a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800267e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002682:	fbb2 f3f3 	udiv	r3, r2, r3
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f943 	bl	8002912 <HAL_SYSTICK_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e00e      	b.n	80026b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b0f      	cmp	r3, #15
 800269a:	d80a      	bhi.n	80026b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800269c:	2200      	movs	r2, #0
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295
 80026a4:	f000 f90b 	bl	80028be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a8:	4a06      	ldr	r2, [pc, #24]	@ (80026c4 <HAL_InitTick+0x5c>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e000      	b.n	80026b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000040 	.word	0x20000040
 80026c0:	20000048 	.word	0x20000048
 80026c4:	20000044 	.word	0x20000044

080026c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_IncTick+0x20>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_IncTick+0x24>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	4a04      	ldr	r2, [pc, #16]	@ (80026ec <HAL_IncTick+0x24>)
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000048 	.word	0x20000048
 80026ec:	2000071c 	.word	0x2000071c

080026f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return uwTick;
 80026f4:	4b03      	ldr	r3, [pc, #12]	@ (8002704 <HAL_GetTick+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	2000071c 	.word	0x2000071c

08002708 <__NVIC_SetPriorityGrouping>:
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002718:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002724:	4013      	ands	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273a:	4a04      	ldr	r2, [pc, #16]	@ (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	60d3      	str	r3, [r2, #12]
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_GetPriorityGrouping>:
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002754:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <__NVIC_GetPriorityGrouping+0x18>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 0307 	and.w	r3, r3, #7
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_EnableIRQ>:
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	db0b      	blt.n	8002796 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	4907      	ldr	r1, [pc, #28]	@ (80027a4 <__NVIC_EnableIRQ+0x38>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2001      	movs	r0, #1
 800278e:	fa00 f202 	lsl.w	r2, r0, r2
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000e100 	.word	0xe000e100

080027a8 <__NVIC_SetPriority>:
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	6039      	str	r1, [r7, #0]
 80027b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	db0a      	blt.n	80027d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	490c      	ldr	r1, [pc, #48]	@ (80027f4 <__NVIC_SetPriority+0x4c>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	0112      	lsls	r2, r2, #4
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	440b      	add	r3, r1
 80027cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80027d0:	e00a      	b.n	80027e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4908      	ldr	r1, [pc, #32]	@ (80027f8 <__NVIC_SetPriority+0x50>)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	3b04      	subs	r3, #4
 80027e0:	0112      	lsls	r2, r2, #4
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	440b      	add	r3, r1
 80027e6:	761a      	strb	r2, [r3, #24]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000e100 	.word	0xe000e100
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <NVIC_EncodePriority>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	@ 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f1c3 0307 	rsb	r3, r3, #7
 8002816:	2b04      	cmp	r3, #4
 8002818:	bf28      	it	cs
 800281a:	2304      	movcs	r3, #4
 800281c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3304      	adds	r3, #4
 8002822:	2b06      	cmp	r3, #6
 8002824:	d902      	bls.n	800282c <NVIC_EncodePriority+0x30>
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3b03      	subs	r3, #3
 800282a:	e000      	b.n	800282e <NVIC_EncodePriority+0x32>
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	f04f 32ff 	mov.w	r2, #4294967295
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	401a      	ands	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002844:	f04f 31ff 	mov.w	r1, #4294967295
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa01 f303 	lsl.w	r3, r1, r3
 800284e:	43d9      	mvns	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	4313      	orrs	r3, r2
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	@ 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002874:	d301      	bcc.n	800287a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002876:	2301      	movs	r3, #1
 8002878:	e00f      	b.n	800289a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287a:	4a0a      	ldr	r2, [pc, #40]	@ (80028a4 <SysTick_Config+0x40>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002882:	210f      	movs	r1, #15
 8002884:	f04f 30ff 	mov.w	r0, #4294967295
 8002888:	f7ff ff8e 	bl	80027a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800288c:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <SysTick_Config+0x40>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002892:	4b04      	ldr	r3, [pc, #16]	@ (80028a4 <SysTick_Config+0x40>)
 8002894:	2207      	movs	r2, #7
 8002896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	e000e010 	.word	0xe000e010

080028a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff29 	bl	8002708 <__NVIC_SetPriorityGrouping>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d0:	f7ff ff3e 	bl	8002750 <__NVIC_GetPriorityGrouping>
 80028d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff ff8e 	bl	80027fc <NVIC_EncodePriority>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff5d 	bl	80027a8 <__NVIC_SetPriority>
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff31 	bl	800276c <__NVIC_EnableIRQ>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ffa2 	bl	8002864 <SysTick_Config>
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002938:	f7ff feda 	bl	80026f0 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e099      	b.n	8002a7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002968:	e00f      	b.n	800298a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800296a:	f7ff fec1 	bl	80026f0 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b05      	cmp	r3, #5
 8002976:	d908      	bls.n	800298a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2220      	movs	r2, #32
 800297c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2203      	movs	r2, #3
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e078      	b.n	8002a7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e8      	bne.n	800296a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4b38      	ldr	r3, [pc, #224]	@ (8002a84 <HAL_DMA_Init+0x158>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d107      	bne.n	80029f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ec:	4313      	orrs	r3, r2
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f023 0307 	bic.w	r3, r3, #7
 8002a0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d117      	bne.n	8002a4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00e      	beq.n	8002a4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 fb0d 	bl	8003050 <DMA_CheckFifoParam>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2240      	movs	r2, #64	@ 0x40
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e016      	b.n	8002a7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fac4 	bl	8002fe4 <DMA_CalcBaseAndBitshift>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a64:	223f      	movs	r2, #63	@ 0x3f
 8002a66:	409a      	lsls	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	f010803f 	.word	0xf010803f

08002a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_DMA_Start_IT+0x26>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e040      	b.n	8002b30 <HAL_DMA_Start_IT+0xa8>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d12f      	bne.n	8002b22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fa56 	bl	8002f88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae0:	223f      	movs	r2, #63	@ 0x3f
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0216 	orr.w	r2, r2, #22
 8002af6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0208 	orr.w	r2, r2, #8
 8002b0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e005      	b.n	8002b2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b46:	f7ff fdd3 	bl	80026f0 <HAL_GetTick>
 8002b4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d008      	beq.n	8002b6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2280      	movs	r2, #128	@ 0x80
 8002b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e052      	b.n	8002c10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0216 	bic.w	r2, r2, #22
 8002b78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d103      	bne.n	8002b9a <HAL_DMA_Abort+0x62>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0208 	bic.w	r2, r2, #8
 8002ba8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bba:	e013      	b.n	8002be4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bbc:	f7ff fd98 	bl	80026f0 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	d90c      	bls.n	8002be4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e015      	b.n	8002c10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1e4      	bne.n	8002bbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf6:	223f      	movs	r2, #63	@ 0x3f
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d004      	beq.n	8002c36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2280      	movs	r2, #128	@ 0x80
 8002c30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e00c      	b.n	8002c50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2205      	movs	r2, #5
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0201 	bic.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c68:	4b8e      	ldr	r3, [pc, #568]	@ (8002ea4 <HAL_DMA_IRQHandler+0x248>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a8e      	ldr	r2, [pc, #568]	@ (8002ea8 <HAL_DMA_IRQHandler+0x24c>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0a9b      	lsrs	r3, r3, #10
 8002c74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c86:	2208      	movs	r2, #8
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01a      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0204 	bic.w	r2, r2, #4
 8002cae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc0:	f043 0201 	orr.w	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ccc:	2201      	movs	r2, #1
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d012      	beq.n	8002cfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	2201      	movs	r2, #1
 8002cec:	409a      	lsls	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf6:	f043 0202 	orr.w	r2, r3, #2
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d02:	2204      	movs	r2, #4
 8002d04:	409a      	lsls	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d012      	beq.n	8002d34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d20:	2204      	movs	r2, #4
 8002d22:	409a      	lsls	r2, r3
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	f043 0204 	orr.w	r2, r3, #4
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d38:	2210      	movs	r2, #16
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d043      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d03c      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d56:	2210      	movs	r2, #16
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d018      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d108      	bne.n	8002d8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d024      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
 8002d8a:	e01f      	b.n	8002dcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01b      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
 8002d9c:	e016      	b.n	8002dcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0208 	bic.w	r2, r2, #8
 8002dba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 808f 	beq.w	8002efc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8087 	beq.w	8002efc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df2:	2220      	movs	r2, #32
 8002df4:	409a      	lsls	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	d136      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0216 	bic.w	r2, r2, #22
 8002e14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d103      	bne.n	8002e36 <HAL_DMA_IRQHandler+0x1da>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0208 	bic.w	r2, r2, #8
 8002e44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4a:	223f      	movs	r2, #63	@ 0x3f
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d07e      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
        }
        return;
 8002e72:	e079      	b.n	8002f68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01d      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10d      	bne.n	8002eac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d031      	beq.n	8002efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
 8002ea0:	e02c      	b.n	8002efc <HAL_DMA_IRQHandler+0x2a0>
 8002ea2:	bf00      	nop
 8002ea4:	20000040 	.word	0x20000040
 8002ea8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d023      	beq.n	8002efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
 8002ebc:	e01e      	b.n	8002efc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10f      	bne.n	8002eec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0210 	bic.w	r2, r2, #16
 8002eda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d032      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d022      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2205      	movs	r2, #5
 8002f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d307      	bcc.n	8002f44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f2      	bne.n	8002f28 <HAL_DMA_IRQHandler+0x2cc>
 8002f42:	e000      	b.n	8002f46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
 8002f66:	e000      	b.n	8002f6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f68:	bf00      	nop
    }
  }
}
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b40      	cmp	r3, #64	@ 0x40
 8002fb4:	d108      	bne.n	8002fc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fc6:	e007      	b.n	8002fd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	60da      	str	r2, [r3, #12]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	3b10      	subs	r3, #16
 8002ff4:	4a14      	ldr	r2, [pc, #80]	@ (8003048 <DMA_CalcBaseAndBitshift+0x64>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ffe:	4a13      	ldr	r2, [pc, #76]	@ (800304c <DMA_CalcBaseAndBitshift+0x68>)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b03      	cmp	r3, #3
 8003010:	d909      	bls.n	8003026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	1d1a      	adds	r2, r3, #4
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	659a      	str	r2, [r3, #88]	@ 0x58
 8003024:	e007      	b.n	8003036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	aaaaaaab 	.word	0xaaaaaaab
 800304c:	080063a8 	.word	0x080063a8

08003050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11f      	bne.n	80030aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d856      	bhi.n	800311e <DMA_CheckFifoParam+0xce>
 8003070:	a201      	add	r2, pc, #4	@ (adr r2, 8003078 <DMA_CheckFifoParam+0x28>)
 8003072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003076:	bf00      	nop
 8003078:	08003089 	.word	0x08003089
 800307c:	0800309b 	.word	0x0800309b
 8003080:	08003089 	.word	0x08003089
 8003084:	0800311f 	.word	0x0800311f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d046      	beq.n	8003122 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003098:	e043      	b.n	8003122 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030a2:	d140      	bne.n	8003126 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a8:	e03d      	b.n	8003126 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030b2:	d121      	bne.n	80030f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d837      	bhi.n	800312a <DMA_CheckFifoParam+0xda>
 80030ba:	a201      	add	r2, pc, #4	@ (adr r2, 80030c0 <DMA_CheckFifoParam+0x70>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	080030d1 	.word	0x080030d1
 80030c4:	080030d7 	.word	0x080030d7
 80030c8:	080030d1 	.word	0x080030d1
 80030cc:	080030e9 	.word	0x080030e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      break;
 80030d4:	e030      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d025      	beq.n	800312e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e6:	e022      	b.n	800312e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030f0:	d11f      	bne.n	8003132 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030f6:	e01c      	b.n	8003132 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d903      	bls.n	8003106 <DMA_CheckFifoParam+0xb6>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d003      	beq.n	800310c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003104:	e018      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
      break;
 800310a:	e015      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003110:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00e      	beq.n	8003136 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      break;
 800311c:	e00b      	b.n	8003136 <DMA_CheckFifoParam+0xe6>
      break;
 800311e:	bf00      	nop
 8003120:	e00a      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 8003122:	bf00      	nop
 8003124:	e008      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 8003126:	bf00      	nop
 8003128:	e006      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 800312a:	bf00      	nop
 800312c:	e004      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 800312e:	bf00      	nop
 8003130:	e002      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;   
 8003132:	bf00      	nop
 8003134:	e000      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 8003136:	bf00      	nop
    }
  } 
  
  return status; 
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop

08003148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003148:	b480      	push	{r7}
 800314a:	b089      	sub	sp, #36	@ 0x24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e16b      	b.n	800343c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003164:	2201      	movs	r2, #1
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	429a      	cmp	r2, r3
 800317e:	f040 815a 	bne.w	8003436 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b01      	cmp	r3, #1
 800318c:	d005      	beq.n	800319a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003196:	2b02      	cmp	r3, #2
 8003198:	d130      	bne.n	80031fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	2203      	movs	r2, #3
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d0:	2201      	movs	r2, #1
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 0201 	and.w	r2, r3, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b03      	cmp	r3, #3
 8003206:	d017      	beq.n	8003238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2203      	movs	r2, #3
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d123      	bne.n	800328c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	08da      	lsrs	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3208      	adds	r2, #8
 800324c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	220f      	movs	r2, #15
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	08da      	lsrs	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3208      	adds	r2, #8
 8003286:	69b9      	ldr	r1, [r7, #24]
 8003288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2203      	movs	r2, #3
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0203 	and.w	r2, r3, #3
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80b4 	beq.w	8003436 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	4b60      	ldr	r3, [pc, #384]	@ (8003454 <HAL_GPIO_Init+0x30c>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d6:	4a5f      	ldr	r2, [pc, #380]	@ (8003454 <HAL_GPIO_Init+0x30c>)
 80032d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80032de:	4b5d      	ldr	r3, [pc, #372]	@ (8003454 <HAL_GPIO_Init+0x30c>)
 80032e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003458 <HAL_GPIO_Init+0x310>)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	3302      	adds	r3, #2
 80032f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	220f      	movs	r2, #15
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a52      	ldr	r2, [pc, #328]	@ (800345c <HAL_GPIO_Init+0x314>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d02b      	beq.n	800336e <HAL_GPIO_Init+0x226>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a51      	ldr	r2, [pc, #324]	@ (8003460 <HAL_GPIO_Init+0x318>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d025      	beq.n	800336a <HAL_GPIO_Init+0x222>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a50      	ldr	r2, [pc, #320]	@ (8003464 <HAL_GPIO_Init+0x31c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01f      	beq.n	8003366 <HAL_GPIO_Init+0x21e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a4f      	ldr	r2, [pc, #316]	@ (8003468 <HAL_GPIO_Init+0x320>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d019      	beq.n	8003362 <HAL_GPIO_Init+0x21a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a4e      	ldr	r2, [pc, #312]	@ (800346c <HAL_GPIO_Init+0x324>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_GPIO_Init+0x216>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4d      	ldr	r2, [pc, #308]	@ (8003470 <HAL_GPIO_Init+0x328>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00d      	beq.n	800335a <HAL_GPIO_Init+0x212>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4c      	ldr	r2, [pc, #304]	@ (8003474 <HAL_GPIO_Init+0x32c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d007      	beq.n	8003356 <HAL_GPIO_Init+0x20e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4b      	ldr	r2, [pc, #300]	@ (8003478 <HAL_GPIO_Init+0x330>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <HAL_GPIO_Init+0x20a>
 800334e:	2307      	movs	r3, #7
 8003350:	e00e      	b.n	8003370 <HAL_GPIO_Init+0x228>
 8003352:	2308      	movs	r3, #8
 8003354:	e00c      	b.n	8003370 <HAL_GPIO_Init+0x228>
 8003356:	2306      	movs	r3, #6
 8003358:	e00a      	b.n	8003370 <HAL_GPIO_Init+0x228>
 800335a:	2305      	movs	r3, #5
 800335c:	e008      	b.n	8003370 <HAL_GPIO_Init+0x228>
 800335e:	2304      	movs	r3, #4
 8003360:	e006      	b.n	8003370 <HAL_GPIO_Init+0x228>
 8003362:	2303      	movs	r3, #3
 8003364:	e004      	b.n	8003370 <HAL_GPIO_Init+0x228>
 8003366:	2302      	movs	r3, #2
 8003368:	e002      	b.n	8003370 <HAL_GPIO_Init+0x228>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_GPIO_Init+0x228>
 800336e:	2300      	movs	r3, #0
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	f002 0203 	and.w	r2, r2, #3
 8003376:	0092      	lsls	r2, r2, #2
 8003378:	4093      	lsls	r3, r2
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003380:	4935      	ldr	r1, [pc, #212]	@ (8003458 <HAL_GPIO_Init+0x310>)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	3302      	adds	r3, #2
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800338e:	4b3b      	ldr	r3, [pc, #236]	@ (800347c <HAL_GPIO_Init+0x334>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033b2:	4a32      	ldr	r2, [pc, #200]	@ (800347c <HAL_GPIO_Init+0x334>)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033b8:	4b30      	ldr	r3, [pc, #192]	@ (800347c <HAL_GPIO_Init+0x334>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033dc:	4a27      	ldr	r2, [pc, #156]	@ (800347c <HAL_GPIO_Init+0x334>)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033e2:	4b26      	ldr	r3, [pc, #152]	@ (800347c <HAL_GPIO_Init+0x334>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003406:	4a1d      	ldr	r2, [pc, #116]	@ (800347c <HAL_GPIO_Init+0x334>)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800340c:	4b1b      	ldr	r3, [pc, #108]	@ (800347c <HAL_GPIO_Init+0x334>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003430:	4a12      	ldr	r2, [pc, #72]	@ (800347c <HAL_GPIO_Init+0x334>)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3301      	adds	r3, #1
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	2b0f      	cmp	r3, #15
 8003440:	f67f ae90 	bls.w	8003164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop
 8003448:	3724      	adds	r7, #36	@ 0x24
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	40013800 	.word	0x40013800
 800345c:	40020000 	.word	0x40020000
 8003460:	40020400 	.word	0x40020400
 8003464:	40020800 	.word	0x40020800
 8003468:	40020c00 	.word	0x40020c00
 800346c:	40021000 	.word	0x40021000
 8003470:	40021400 	.word	0x40021400
 8003474:	40021800 	.word	0x40021800
 8003478:	40021c00 	.word	0x40021c00
 800347c:	40013c00 	.word	0x40013c00

08003480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	887b      	ldrh	r3, [r7, #2]
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
 800349c:	e001      	b.n	80034a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]
 80034bc:	4613      	mov	r3, r2
 80034be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c0:	787b      	ldrb	r3, [r7, #1]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034c6:	887a      	ldrh	r2, [r7, #2]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034cc:	e003      	b.n	80034d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ce:	887b      	ldrh	r3, [r7, #2]
 80034d0:	041a      	lsls	r2, r3, #16
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	619a      	str	r2, [r3, #24]
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e267      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d075      	beq.n	80035ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003502:	4b88      	ldr	r3, [pc, #544]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b04      	cmp	r3, #4
 800350c:	d00c      	beq.n	8003528 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350e:	4b85      	ldr	r3, [pc, #532]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003516:	2b08      	cmp	r3, #8
 8003518:	d112      	bne.n	8003540 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351a:	4b82      	ldr	r3, [pc, #520]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003522:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003526:	d10b      	bne.n	8003540 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	4b7e      	ldr	r3, [pc, #504]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d05b      	beq.n	80035ec <HAL_RCC_OscConfig+0x108>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d157      	bne.n	80035ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e242      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003548:	d106      	bne.n	8003558 <HAL_RCC_OscConfig+0x74>
 800354a:	4b76      	ldr	r3, [pc, #472]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a75      	ldr	r2, [pc, #468]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e01d      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x98>
 8003562:	4b70      	ldr	r3, [pc, #448]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a6f      	ldr	r2, [pc, #444]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b6d      	ldr	r3, [pc, #436]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a6c      	ldr	r2, [pc, #432]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 800357c:	4b69      	ldr	r3, [pc, #420]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a68      	ldr	r2, [pc, #416]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b66      	ldr	r3, [pc, #408]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a65      	ldr	r2, [pc, #404]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7ff f8a8 	bl	80026f0 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a4:	f7ff f8a4 	bl	80026f0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	@ 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e207      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0xc0>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7ff f894 	bl	80026f0 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035cc:	f7ff f890 	bl	80026f0 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	@ 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e1f3      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	4b51      	ldr	r3, [pc, #324]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0xe8>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d063      	beq.n	80036c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003606:	4b47      	ldr	r3, [pc, #284]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800360e:	2b08      	cmp	r3, #8
 8003610:	d11c      	bne.n	800364c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003612:	4b44      	ldr	r3, [pc, #272]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d116      	bne.n	800364c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	4b41      	ldr	r3, [pc, #260]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_RCC_OscConfig+0x152>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e1c7      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b3b      	ldr	r3, [pc, #236]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4937      	ldr	r1, [pc, #220]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	e03a      	b.n	80036c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003654:	4b34      	ldr	r3, [pc, #208]	@ (8003728 <HAL_RCC_OscConfig+0x244>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7ff f849 	bl	80026f0 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003662:	f7ff f845 	bl	80026f0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e1a8      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	4b2b      	ldr	r3, [pc, #172]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003680:	4b28      	ldr	r3, [pc, #160]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4925      	ldr	r1, [pc, #148]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]
 8003694:	e015      	b.n	80036c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003696:	4b24      	ldr	r3, [pc, #144]	@ (8003728 <HAL_RCC_OscConfig+0x244>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7ff f828 	bl	80026f0 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a4:	f7ff f824 	bl	80026f0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e187      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d036      	beq.n	800373c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d6:	4b15      	ldr	r3, [pc, #84]	@ (800372c <HAL_RCC_OscConfig+0x248>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036dc:	f7ff f808 	bl	80026f0 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e4:	f7ff f804 	bl	80026f0 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e167      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 80036f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x200>
 8003702:	e01b      	b.n	800373c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003704:	4b09      	ldr	r3, [pc, #36]	@ (800372c <HAL_RCC_OscConfig+0x248>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370a:	f7fe fff1 	bl	80026f0 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003710:	e00e      	b.n	8003730 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003712:	f7fe ffed 	bl	80026f0 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d907      	bls.n	8003730 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e150      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
 8003724:	40023800 	.word	0x40023800
 8003728:	42470000 	.word	0x42470000
 800372c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003730:	4b88      	ldr	r3, [pc, #544]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1ea      	bne.n	8003712 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 8097 	beq.w	8003878 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800374a:	2300      	movs	r3, #0
 800374c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374e:	4b81      	ldr	r3, [pc, #516]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10f      	bne.n	800377a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	4b7d      	ldr	r3, [pc, #500]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	4a7c      	ldr	r2, [pc, #496]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003768:	6413      	str	r3, [r2, #64]	@ 0x40
 800376a:	4b7a      	ldr	r3, [pc, #488]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003776:	2301      	movs	r3, #1
 8003778:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377a:	4b77      	ldr	r3, [pc, #476]	@ (8003958 <HAL_RCC_OscConfig+0x474>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003782:	2b00      	cmp	r3, #0
 8003784:	d118      	bne.n	80037b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003786:	4b74      	ldr	r3, [pc, #464]	@ (8003958 <HAL_RCC_OscConfig+0x474>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a73      	ldr	r2, [pc, #460]	@ (8003958 <HAL_RCC_OscConfig+0x474>)
 800378c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003792:	f7fe ffad 	bl	80026f0 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379a:	f7fe ffa9 	bl	80026f0 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e10c      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003958 <HAL_RCC_OscConfig+0x474>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d106      	bne.n	80037ce <HAL_RCC_OscConfig+0x2ea>
 80037c0:	4b64      	ldr	r3, [pc, #400]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c4:	4a63      	ldr	r2, [pc, #396]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80037cc:	e01c      	b.n	8003808 <HAL_RCC_OscConfig+0x324>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCC_OscConfig+0x30c>
 80037d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037da:	4a5e      	ldr	r2, [pc, #376]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037dc:	f043 0304 	orr.w	r3, r3, #4
 80037e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ee:	e00b      	b.n	8003808 <HAL_RCC_OscConfig+0x324>
 80037f0:	4b58      	ldr	r3, [pc, #352]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f4:	4a57      	ldr	r2, [pc, #348]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037f6:	f023 0301 	bic.w	r3, r3, #1
 80037fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80037fc:	4b55      	ldr	r3, [pc, #340]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003800:	4a54      	ldr	r2, [pc, #336]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003802:	f023 0304 	bic.w	r3, r3, #4
 8003806:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d015      	beq.n	800383c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fe ff6e 	bl	80026f0 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003816:	e00a      	b.n	800382e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fe ff6a 	bl	80026f0 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e0cb      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382e:	4b49      	ldr	r3, [pc, #292]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0ee      	beq.n	8003818 <HAL_RCC_OscConfig+0x334>
 800383a:	e014      	b.n	8003866 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800383c:	f7fe ff58 	bl	80026f0 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003842:	e00a      	b.n	800385a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003844:	f7fe ff54 	bl	80026f0 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e0b5      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385a:	4b3e      	ldr	r3, [pc, #248]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1ee      	bne.n	8003844 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d105      	bne.n	8003878 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800386c:	4b39      	ldr	r3, [pc, #228]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	4a38      	ldr	r2, [pc, #224]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003872:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003876:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80a1 	beq.w	80039c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003882:	4b34      	ldr	r3, [pc, #208]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b08      	cmp	r3, #8
 800388c:	d05c      	beq.n	8003948 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d141      	bne.n	800391a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003896:	4b31      	ldr	r3, [pc, #196]	@ (800395c <HAL_RCC_OscConfig+0x478>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7fe ff28 	bl	80026f0 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fe ff24 	bl	80026f0 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e087      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	4b27      	ldr	r3, [pc, #156]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	019b      	lsls	r3, r3, #6
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	085b      	lsrs	r3, r3, #1
 80038da:	3b01      	subs	r3, #1
 80038dc:	041b      	lsls	r3, r3, #16
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	061b      	lsls	r3, r3, #24
 80038e6:	491b      	ldr	r1, [pc, #108]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038ec:	4b1b      	ldr	r3, [pc, #108]	@ (800395c <HAL_RCC_OscConfig+0x478>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f2:	f7fe fefd 	bl	80026f0 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fa:	f7fe fef9 	bl	80026f0 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e05c      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390c:	4b11      	ldr	r3, [pc, #68]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x416>
 8003918:	e054      	b.n	80039c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391a:	4b10      	ldr	r3, [pc, #64]	@ (800395c <HAL_RCC_OscConfig+0x478>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fe fee6 	bl	80026f0 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003928:	f7fe fee2 	bl	80026f0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e045      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x444>
 8003946:	e03d      	b.n	80039c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e038      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
 8003954:	40023800 	.word	0x40023800
 8003958:	40007000 	.word	0x40007000
 800395c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003960:	4b1b      	ldr	r3, [pc, #108]	@ (80039d0 <HAL_RCC_OscConfig+0x4ec>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d028      	beq.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003978:	429a      	cmp	r2, r3
 800397a:	d121      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003986:	429a      	cmp	r2, r3
 8003988:	d11a      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003990:	4013      	ands	r3, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003996:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003998:	4293      	cmp	r3, r2
 800399a:	d111      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a6:	085b      	lsrs	r3, r3, #1
 80039a8:	3b01      	subs	r3, #1
 80039aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800

080039d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0cc      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039e8:	4b68      	ldr	r3, [pc, #416]	@ (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d90c      	bls.n	8003a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b65      	ldr	r3, [pc, #404]	@ (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b63      	ldr	r3, [pc, #396]	@ (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0b8      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d020      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a28:	4b59      	ldr	r3, [pc, #356]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a58      	ldr	r2, [pc, #352]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a40:	4b53      	ldr	r3, [pc, #332]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a52      	ldr	r2, [pc, #328]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4c:	4b50      	ldr	r3, [pc, #320]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	494d      	ldr	r1, [pc, #308]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d044      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b47      	ldr	r3, [pc, #284]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d119      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e07f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d003      	beq.n	8003a92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a92:	4b3f      	ldr	r3, [pc, #252]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e06f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e067      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab2:	4b37      	ldr	r3, [pc, #220]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4934      	ldr	r1, [pc, #208]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac4:	f7fe fe14 	bl	80026f0 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003acc:	f7fe fe10 	bl	80026f0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e04f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 020c 	and.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1eb      	bne.n	8003acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003af4:	4b25      	ldr	r3, [pc, #148]	@ (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d20c      	bcs.n	8003b1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	4b22      	ldr	r3, [pc, #136]	@ (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e032      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b28:	4b19      	ldr	r3, [pc, #100]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4916      	ldr	r1, [pc, #88]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b46:	4b12      	ldr	r3, [pc, #72]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	490e      	ldr	r1, [pc, #56]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b5a:	f000 f821 	bl	8003ba0 <HAL_RCC_GetSysClockFreq>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b0b      	ldr	r3, [pc, #44]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	490a      	ldr	r1, [pc, #40]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	5ccb      	ldrb	r3, [r1, r3]
 8003b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b72:	4a09      	ldr	r2, [pc, #36]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b76:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fd74 	bl	8002668 <HAL_InitTick>

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023c00 	.word	0x40023c00
 8003b90:	40023800 	.word	0x40023800
 8003b94:	08006390 	.word	0x08006390
 8003b98:	20000040 	.word	0x20000040
 8003b9c:	20000044 	.word	0x20000044

08003ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba4:	b094      	sub	sp, #80	@ 0x50
 8003ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb8:	4b79      	ldr	r3, [pc, #484]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d00d      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	f200 80e1 	bhi.w	8003d8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0x3a>
 8003bd2:	e0db      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b73      	ldr	r3, [pc, #460]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bd8:	e0db      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bda:	4b73      	ldr	r3, [pc, #460]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bde:	e0d8      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be0:	4b6f      	ldr	r3, [pc, #444]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003be8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bea:	4b6d      	ldr	r3, [pc, #436]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d063      	beq.n	8003cbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	099b      	lsrs	r3, r3, #6
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c08:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c12:	4622      	mov	r2, r4
 8003c14:	462b      	mov	r3, r5
 8003c16:	f04f 0000 	mov.w	r0, #0
 8003c1a:	f04f 0100 	mov.w	r1, #0
 8003c1e:	0159      	lsls	r1, r3, #5
 8003c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c24:	0150      	lsls	r0, r2, #5
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	1a51      	subs	r1, r2, r1
 8003c2e:	6139      	str	r1, [r7, #16]
 8003c30:	4629      	mov	r1, r5
 8003c32:	eb63 0301 	sbc.w	r3, r3, r1
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c44:	4659      	mov	r1, fp
 8003c46:	018b      	lsls	r3, r1, #6
 8003c48:	4651      	mov	r1, sl
 8003c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c4e:	4651      	mov	r1, sl
 8003c50:	018a      	lsls	r2, r1, #6
 8003c52:	4651      	mov	r1, sl
 8003c54:	ebb2 0801 	subs.w	r8, r2, r1
 8003c58:	4659      	mov	r1, fp
 8003c5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c72:	4690      	mov	r8, r2
 8003c74:	4699      	mov	r9, r3
 8003c76:	4623      	mov	r3, r4
 8003c78:	eb18 0303 	adds.w	r3, r8, r3
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	462b      	mov	r3, r5
 8003c80:	eb49 0303 	adc.w	r3, r9, r3
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c92:	4629      	mov	r1, r5
 8003c94:	024b      	lsls	r3, r1, #9
 8003c96:	4621      	mov	r1, r4
 8003c98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	024a      	lsls	r2, r1, #9
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003caa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cb0:	f7fc fa8a 	bl	80001c8 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cbc:	e058      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cbe:	4b38      	ldr	r3, [pc, #224]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	099b      	lsrs	r3, r3, #6
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	4611      	mov	r1, r2
 8003cca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cce:	623b      	str	r3, [r7, #32]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cd8:	4642      	mov	r2, r8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	f04f 0000 	mov.w	r0, #0
 8003ce0:	f04f 0100 	mov.w	r1, #0
 8003ce4:	0159      	lsls	r1, r3, #5
 8003ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cea:	0150      	lsls	r0, r2, #5
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d10:	ebb2 040a 	subs.w	r4, r2, sl
 8003d14:	eb63 050b 	sbc.w	r5, r3, fp
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	00eb      	lsls	r3, r5, #3
 8003d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d26:	00e2      	lsls	r2, r4, #3
 8003d28:	4614      	mov	r4, r2
 8003d2a:	461d      	mov	r5, r3
 8003d2c:	4643      	mov	r3, r8
 8003d2e:	18e3      	adds	r3, r4, r3
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	464b      	mov	r3, r9
 8003d34:	eb45 0303 	adc.w	r3, r5, r3
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d46:	4629      	mov	r1, r5
 8003d48:	028b      	lsls	r3, r1, #10
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d50:	4621      	mov	r1, r4
 8003d52:	028a      	lsls	r2, r1, #10
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	61fa      	str	r2, [r7, #28]
 8003d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d64:	f7fc fa30 	bl	80001c8 <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d70:	4b0b      	ldr	r3, [pc, #44]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d8a:	e002      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d8c:	4b05      	ldr	r3, [pc, #20]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3750      	adds	r7, #80	@ 0x50
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	00f42400 	.word	0x00f42400
 8003da8:	007a1200 	.word	0x007a1200

08003dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db0:	4b03      	ldr	r3, [pc, #12]	@ (8003dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20000040 	.word	0x20000040

08003dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dc8:	f7ff fff0 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b05      	ldr	r3, [pc, #20]	@ (8003de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0a9b      	lsrs	r3, r3, #10
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4903      	ldr	r1, [pc, #12]	@ (8003de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	080063a0 	.word	0x080063a0

08003dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003df0:	f7ff ffdc 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0b5b      	lsrs	r3, r3, #13
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	@ (8003e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	080063a0 	.word	0x080063a0

08003e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e041      	b.n	8003eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fd fff2 	bl	8001e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f000 fcc4 	bl	80047e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d001      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e04e      	b.n	8003f6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a23      	ldr	r2, [pc, #140]	@ (8003f78 <HAL_TIM_Base_Start_IT+0xc4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d022      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef6:	d01d      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f7c <HAL_TIM_Base_Start_IT+0xc8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d018      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1e      	ldr	r2, [pc, #120]	@ (8003f80 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d013      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1c      	ldr	r2, [pc, #112]	@ (8003f84 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00e      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8003f88 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d009      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a19      	ldr	r2, [pc, #100]	@ (8003f8c <HAL_TIM_Base_Start_IT+0xd8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d004      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a18      	ldr	r2, [pc, #96]	@ (8003f90 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d111      	bne.n	8003f58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b06      	cmp	r3, #6
 8003f44:	d010      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0201 	orr.w	r2, r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f56:	e007      	b.n	8003f68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40010400 	.word	0x40010400
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40001800 	.word	0x40001800

08003f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e041      	b.n	800402a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd ffb2 	bl	8001f24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f000 fc04 	bl	80047e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <HAL_TIM_PWM_Start+0x24>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e022      	b.n	800409e <HAL_TIM_PWM_Start+0x6a>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b04      	cmp	r3, #4
 800405c:	d109      	bne.n	8004072 <HAL_TIM_PWM_Start+0x3e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b01      	cmp	r3, #1
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	e015      	b.n	800409e <HAL_TIM_PWM_Start+0x6a>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b08      	cmp	r3, #8
 8004076:	d109      	bne.n	800408c <HAL_TIM_PWM_Start+0x58>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	bf14      	ite	ne
 8004084:	2301      	movne	r3, #1
 8004086:	2300      	moveq	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e008      	b.n	800409e <HAL_TIM_PWM_Start+0x6a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	bf14      	ite	ne
 8004098:	2301      	movne	r3, #1
 800409a:	2300      	moveq	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e07c      	b.n	80041a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_PWM_Start+0x82>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040b4:	e013      	b.n	80040de <HAL_TIM_PWM_Start+0xaa>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_PWM_Start+0x92>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040c4:	e00b      	b.n	80040de <HAL_TIM_PWM_Start+0xaa>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d104      	bne.n	80040d6 <HAL_TIM_PWM_Start+0xa2>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040d4:	e003      	b.n	80040de <HAL_TIM_PWM_Start+0xaa>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2201      	movs	r2, #1
 80040e4:	6839      	ldr	r1, [r7, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fdd0 	bl	8004c8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a2d      	ldr	r2, [pc, #180]	@ (80041a8 <HAL_TIM_PWM_Start+0x174>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_TIM_PWM_Start+0xcc>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a2c      	ldr	r2, [pc, #176]	@ (80041ac <HAL_TIM_PWM_Start+0x178>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d101      	bne.n	8004104 <HAL_TIM_PWM_Start+0xd0>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_TIM_PWM_Start+0xd2>
 8004104:	2300      	movs	r3, #0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004118:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a22      	ldr	r2, [pc, #136]	@ (80041a8 <HAL_TIM_PWM_Start+0x174>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d022      	beq.n	800416a <HAL_TIM_PWM_Start+0x136>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412c:	d01d      	beq.n	800416a <HAL_TIM_PWM_Start+0x136>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1f      	ldr	r2, [pc, #124]	@ (80041b0 <HAL_TIM_PWM_Start+0x17c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d018      	beq.n	800416a <HAL_TIM_PWM_Start+0x136>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1d      	ldr	r2, [pc, #116]	@ (80041b4 <HAL_TIM_PWM_Start+0x180>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_TIM_PWM_Start+0x136>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1c      	ldr	r2, [pc, #112]	@ (80041b8 <HAL_TIM_PWM_Start+0x184>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <HAL_TIM_PWM_Start+0x136>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a16      	ldr	r2, [pc, #88]	@ (80041ac <HAL_TIM_PWM_Start+0x178>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d009      	beq.n	800416a <HAL_TIM_PWM_Start+0x136>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a18      	ldr	r2, [pc, #96]	@ (80041bc <HAL_TIM_PWM_Start+0x188>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_TIM_PWM_Start+0x136>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a16      	ldr	r2, [pc, #88]	@ (80041c0 <HAL_TIM_PWM_Start+0x18c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d111      	bne.n	800418e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b06      	cmp	r3, #6
 800417a:	d010      	beq.n	800419e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418c:	e007      	b.n	800419e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0201 	orr.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40010000 	.word	0x40010000
 80041ac:	40010400 	.word	0x40010400
 80041b0:	40000400 	.word	0x40000400
 80041b4:	40000800 	.word	0x40000800
 80041b8:	40000c00 	.word	0x40000c00
 80041bc:	40014000 	.word	0x40014000
 80041c0:	40001800 	.word	0x40001800

080041c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e097      	b.n	8004308 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d106      	bne.n	80041f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7fd fca5 	bl	8001b3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2202      	movs	r2, #2
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004208:	f023 0307 	bic.w	r3, r3, #7
 800420c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3304      	adds	r3, #4
 8004216:	4619      	mov	r1, r3
 8004218:	4610      	mov	r0, r2
 800421a:	f000 fae1 	bl	80047e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	4313      	orrs	r3, r2
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004264:	f023 030c 	bic.w	r3, r3, #12
 8004268:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004270:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004274:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	4313      	orrs	r3, r2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	011a      	lsls	r2, r3, #4
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	031b      	lsls	r3, r3, #12
 8004294:	4313      	orrs	r3, r2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	4313      	orrs	r3, r2
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004320:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004328:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004330:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004338:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d110      	bne.n	8004362 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d102      	bne.n	800434c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004346:	7b7b      	ldrb	r3, [r7, #13]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d001      	beq.n	8004350 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e069      	b.n	8004424 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004360:	e031      	b.n	80043c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b04      	cmp	r3, #4
 8004366:	d110      	bne.n	800438a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004368:	7bbb      	ldrb	r3, [r7, #14]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d102      	bne.n	8004374 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800436e:	7b3b      	ldrb	r3, [r7, #12]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d001      	beq.n	8004378 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e055      	b.n	8004424 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004388:	e01d      	b.n	80043c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d108      	bne.n	80043a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004390:	7bbb      	ldrb	r3, [r7, #14]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004396:	7b7b      	ldrb	r3, [r7, #13]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d102      	bne.n	80043a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800439c:	7b3b      	ldrb	r3, [r7, #12]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d001      	beq.n	80043a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e03e      	b.n	8004424 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_TIM_Encoder_Start+0xc4>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d008      	beq.n	80043e4 <HAL_TIM_Encoder_Start+0xd4>
 80043d2:	e00f      	b.n	80043f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2201      	movs	r2, #1
 80043da:	2100      	movs	r1, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fc55 	bl	8004c8c <TIM_CCxChannelCmd>
      break;
 80043e2:	e016      	b.n	8004412 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2201      	movs	r2, #1
 80043ea:	2104      	movs	r1, #4
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fc4d 	bl	8004c8c <TIM_CCxChannelCmd>
      break;
 80043f2:	e00e      	b.n	8004412 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2201      	movs	r2, #1
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fc45 	bl	8004c8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2201      	movs	r2, #1
 8004408:	2104      	movs	r1, #4
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fc3e 	bl	8004c8c <TIM_CCxChannelCmd>
      break;
 8004410:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d020      	beq.n	8004490 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01b      	beq.n	8004490 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0202 	mvn.w	r2, #2
 8004460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f994 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 800447c:	e005      	b.n	800448a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f986 	bl	8004790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f997 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	d020      	beq.n	80044dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01b      	beq.n	80044dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0204 	mvn.w	r2, #4
 80044ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f96e 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 80044c8:	e005      	b.n	80044d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f960 	bl	8004790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f971 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d020      	beq.n	8004528 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01b      	beq.n	8004528 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0208 	mvn.w	r2, #8
 80044f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2204      	movs	r2, #4
 80044fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f948 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f93a 	bl	8004790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f94b 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	d020      	beq.n	8004574 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01b      	beq.n	8004574 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0210 	mvn.w	r2, #16
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2208      	movs	r2, #8
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f922 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f914 	bl	8004790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f925 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00c      	beq.n	8004598 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0201 	mvn.w	r2, #1
 8004590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fc fa28 	bl	80009e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00c      	beq.n	80045bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fc14 	bl	8004de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00c      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f8f6 	bl	80047cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00c      	beq.n	8004604 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0220 	mvn.w	r2, #32
 80045fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fbe6 	bl	8004dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004626:	2302      	movs	r3, #2
 8004628:	e0ae      	b.n	8004788 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b0c      	cmp	r3, #12
 8004636:	f200 809f 	bhi.w	8004778 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800463a:	a201      	add	r2, pc, #4	@ (adr r2, 8004640 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800463c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004640:	08004675 	.word	0x08004675
 8004644:	08004779 	.word	0x08004779
 8004648:	08004779 	.word	0x08004779
 800464c:	08004779 	.word	0x08004779
 8004650:	080046b5 	.word	0x080046b5
 8004654:	08004779 	.word	0x08004779
 8004658:	08004779 	.word	0x08004779
 800465c:	08004779 	.word	0x08004779
 8004660:	080046f7 	.word	0x080046f7
 8004664:	08004779 	.word	0x08004779
 8004668:	08004779 	.word	0x08004779
 800466c:	08004779 	.word	0x08004779
 8004670:	08004737 	.word	0x08004737
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	4618      	mov	r0, r3
 800467c:	f000 f956 	bl	800492c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0208 	orr.w	r2, r2, #8
 800468e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699a      	ldr	r2, [r3, #24]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0204 	bic.w	r2, r2, #4
 800469e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6999      	ldr	r1, [r3, #24]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	691a      	ldr	r2, [r3, #16]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	619a      	str	r2, [r3, #24]
      break;
 80046b2:	e064      	b.n	800477e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f9a6 	bl	8004a0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6999      	ldr	r1, [r3, #24]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	021a      	lsls	r2, r3, #8
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	619a      	str	r2, [r3, #24]
      break;
 80046f4:	e043      	b.n	800477e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 f9fb 	bl	8004af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69da      	ldr	r2, [r3, #28]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0208 	orr.w	r2, r2, #8
 8004710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69da      	ldr	r2, [r3, #28]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0204 	bic.w	r2, r2, #4
 8004720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69d9      	ldr	r1, [r3, #28]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	61da      	str	r2, [r3, #28]
      break;
 8004734:	e023      	b.n	800477e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fa4f 	bl	8004be0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69d9      	ldr	r1, [r3, #28]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	021a      	lsls	r2, r3, #8
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	61da      	str	r2, [r3, #28]
      break;
 8004776:	e002      	b.n	800477e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	75fb      	strb	r3, [r7, #23]
      break;
 800477c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004786:	7dfb      	ldrb	r3, [r7, #23]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a43      	ldr	r2, [pc, #268]	@ (8004900 <TIM_Base_SetConfig+0x120>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d013      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047fe:	d00f      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a40      	ldr	r2, [pc, #256]	@ (8004904 <TIM_Base_SetConfig+0x124>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00b      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a3f      	ldr	r2, [pc, #252]	@ (8004908 <TIM_Base_SetConfig+0x128>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d007      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a3e      	ldr	r2, [pc, #248]	@ (800490c <TIM_Base_SetConfig+0x12c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d003      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3d      	ldr	r2, [pc, #244]	@ (8004910 <TIM_Base_SetConfig+0x130>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d108      	bne.n	8004832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a32      	ldr	r2, [pc, #200]	@ (8004900 <TIM_Base_SetConfig+0x120>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d02b      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004840:	d027      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2f      	ldr	r2, [pc, #188]	@ (8004904 <TIM_Base_SetConfig+0x124>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d023      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2e      	ldr	r2, [pc, #184]	@ (8004908 <TIM_Base_SetConfig+0x128>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d01f      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2d      	ldr	r2, [pc, #180]	@ (800490c <TIM_Base_SetConfig+0x12c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01b      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2c      	ldr	r2, [pc, #176]	@ (8004910 <TIM_Base_SetConfig+0x130>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d017      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2b      	ldr	r2, [pc, #172]	@ (8004914 <TIM_Base_SetConfig+0x134>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2a      	ldr	r2, [pc, #168]	@ (8004918 <TIM_Base_SetConfig+0x138>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00f      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a29      	ldr	r2, [pc, #164]	@ (800491c <TIM_Base_SetConfig+0x13c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00b      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a28      	ldr	r2, [pc, #160]	@ (8004920 <TIM_Base_SetConfig+0x140>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d007      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a27      	ldr	r2, [pc, #156]	@ (8004924 <TIM_Base_SetConfig+0x144>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d003      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a26      	ldr	r2, [pc, #152]	@ (8004928 <TIM_Base_SetConfig+0x148>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d108      	bne.n	80048a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004900 <TIM_Base_SetConfig+0x120>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d003      	beq.n	80048d2 <TIM_Base_SetConfig+0xf2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a10      	ldr	r2, [pc, #64]	@ (8004910 <TIM_Base_SetConfig+0x130>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d103      	bne.n	80048da <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f043 0204 	orr.w	r2, r3, #4
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	601a      	str	r2, [r3, #0]
}
 80048f2:	bf00      	nop
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40010000 	.word	0x40010000
 8004904:	40000400 	.word	0x40000400
 8004908:	40000800 	.word	0x40000800
 800490c:	40000c00 	.word	0x40000c00
 8004910:	40010400 	.word	0x40010400
 8004914:	40014000 	.word	0x40014000
 8004918:	40014400 	.word	0x40014400
 800491c:	40014800 	.word	0x40014800
 8004920:	40001800 	.word	0x40001800
 8004924:	40001c00 	.word	0x40001c00
 8004928:	40002000 	.word	0x40002000

0800492c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f023 0201 	bic.w	r2, r3, #1
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0303 	bic.w	r3, r3, #3
 8004962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f023 0302 	bic.w	r3, r3, #2
 8004974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a20      	ldr	r2, [pc, #128]	@ (8004a04 <TIM_OC1_SetConfig+0xd8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_OC1_SetConfig+0x64>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a1f      	ldr	r2, [pc, #124]	@ (8004a08 <TIM_OC1_SetConfig+0xdc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d10c      	bne.n	80049aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 0308 	bic.w	r3, r3, #8
 8004996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f023 0304 	bic.w	r3, r3, #4
 80049a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a15      	ldr	r2, [pc, #84]	@ (8004a04 <TIM_OC1_SetConfig+0xd8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d003      	beq.n	80049ba <TIM_OC1_SetConfig+0x8e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a14      	ldr	r2, [pc, #80]	@ (8004a08 <TIM_OC1_SetConfig+0xdc>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d111      	bne.n	80049de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	621a      	str	r2, [r3, #32]
}
 80049f8:	bf00      	nop
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	40010000 	.word	0x40010000
 8004a08:	40010400 	.word	0x40010400

08004a0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	f023 0210 	bic.w	r2, r3, #16
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	021b      	lsls	r3, r3, #8
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f023 0320 	bic.w	r3, r3, #32
 8004a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a22      	ldr	r2, [pc, #136]	@ (8004af0 <TIM_OC2_SetConfig+0xe4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d003      	beq.n	8004a74 <TIM_OC2_SetConfig+0x68>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a21      	ldr	r2, [pc, #132]	@ (8004af4 <TIM_OC2_SetConfig+0xe8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d10d      	bne.n	8004a90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a17      	ldr	r2, [pc, #92]	@ (8004af0 <TIM_OC2_SetConfig+0xe4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_OC2_SetConfig+0x94>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a16      	ldr	r2, [pc, #88]	@ (8004af4 <TIM_OC2_SetConfig+0xe8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d113      	bne.n	8004ac8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004aa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004aae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	621a      	str	r2, [r3, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40010000 	.word	0x40010000
 8004af4:	40010400 	.word	0x40010400

08004af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a21      	ldr	r2, [pc, #132]	@ (8004bd8 <TIM_OC3_SetConfig+0xe0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d003      	beq.n	8004b5e <TIM_OC3_SetConfig+0x66>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a20      	ldr	r2, [pc, #128]	@ (8004bdc <TIM_OC3_SetConfig+0xe4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d10d      	bne.n	8004b7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a16      	ldr	r2, [pc, #88]	@ (8004bd8 <TIM_OC3_SetConfig+0xe0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d003      	beq.n	8004b8a <TIM_OC3_SetConfig+0x92>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a15      	ldr	r2, [pc, #84]	@ (8004bdc <TIM_OC3_SetConfig+0xe4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d113      	bne.n	8004bb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	621a      	str	r2, [r3, #32]
}
 8004bcc:	bf00      	nop
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	40010000 	.word	0x40010000
 8004bdc:	40010400 	.word	0x40010400

08004be0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	021b      	lsls	r3, r3, #8
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	031b      	lsls	r3, r3, #12
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a12      	ldr	r2, [pc, #72]	@ (8004c84 <TIM_OC4_SetConfig+0xa4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_OC4_SetConfig+0x68>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a11      	ldr	r2, [pc, #68]	@ (8004c88 <TIM_OC4_SetConfig+0xa8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d109      	bne.n	8004c5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	019b      	lsls	r3, r3, #6
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	621a      	str	r2, [r3, #32]
}
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40010000 	.word	0x40010000
 8004c88:	40010400 	.word	0x40010400

08004c8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a1a      	ldr	r2, [r3, #32]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	43db      	mvns	r3, r3
 8004cae:	401a      	ands	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a1a      	ldr	r2, [r3, #32]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e05a      	b.n	8004da6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a21      	ldr	r2, [pc, #132]	@ (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d022      	beq.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d3c:	d01d      	beq.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1d      	ldr	r2, [pc, #116]	@ (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d018      	beq.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1a      	ldr	r2, [pc, #104]	@ (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00e      	beq.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a18      	ldr	r2, [pc, #96]	@ (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d009      	beq.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a17      	ldr	r2, [pc, #92]	@ (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d004      	beq.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a15      	ldr	r2, [pc, #84]	@ (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d10c      	bne.n	8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40010000 	.word	0x40010000
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40000800 	.word	0x40000800
 8004dc0:	40000c00 	.word	0x40000c00
 8004dc4:	40010400 	.word	0x40010400
 8004dc8:	40014000 	.word	0x40014000
 8004dcc:	40001800 	.word	0x40001800

08004dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e042      	b.n	8004e90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fd f9b6 	bl	8002190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2224      	movs	r2, #36	@ 0x24
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fffb 	bl	8005e38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08c      	sub	sp, #48	@ 0x30
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d162      	bne.n	8004f78 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_UART_Transmit_DMA+0x26>
 8004eb8:	88fb      	ldrh	r3, [r7, #6]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e05b      	b.n	8004f7a <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	88fa      	ldrh	r2, [r7, #6]
 8004ecc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	88fa      	ldrh	r2, [r7, #6]
 8004ed2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2221      	movs	r2, #33	@ 0x21
 8004ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee6:	4a27      	ldr	r2, [pc, #156]	@ (8004f84 <HAL_UART_Transmit_DMA+0xec>)
 8004ee8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eee:	4a26      	ldr	r2, [pc, #152]	@ (8004f88 <HAL_UART_Transmit_DMA+0xf0>)
 8004ef0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef6:	4a25      	ldr	r2, [pc, #148]	@ (8004f8c <HAL_UART_Transmit_DMA+0xf4>)
 8004ef8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efe:	2200      	movs	r2, #0
 8004f00:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004f02:	f107 0308 	add.w	r3, r7, #8
 8004f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0e:	6819      	ldr	r1, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3304      	adds	r3, #4
 8004f16:	461a      	mov	r2, r3
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	f7fd fdb5 	bl	8002a88 <HAL_DMA_Start_IT>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2210      	movs	r2, #16
 8004f28:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e021      	b.n	8004f7a <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f3e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3314      	adds	r3, #20
 8004f46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	617b      	str	r3, [r7, #20]
   return(result);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f60:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6a39      	ldr	r1, [r7, #32]
 8004f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e5      	bne.n	8004f40 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	e000      	b.n	8004f7a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004f78:	2302      	movs	r3, #2
  }
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3730      	adds	r7, #48	@ 0x30
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	080056b5 	.word	0x080056b5
 8004f88:	0800574f 	.word	0x0800574f
 8004f8c:	080058d3 	.word	0x080058d3

08004f90 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	d112      	bne.n	8004fd0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_UART_Receive_DMA+0x26>
 8004fb0:	88fb      	ldrh	r3, [r7, #6]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e00b      	b.n	8004fd2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 fcce 	bl	8005968 <UART_Start_Receive_DMA>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	e000      	b.n	8004fd2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
  }
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b09a      	sub	sp, #104	@ 0x68
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	330c      	adds	r3, #12
 8004fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004ff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ff8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	330c      	adds	r3, #12
 8005000:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005002:	657a      	str	r2, [r7, #84]	@ 0x54
 8005004:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005008:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e5      	bne.n	8004fe2 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3314      	adds	r3, #20
 800501c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	663b      	str	r3, [r7, #96]	@ 0x60
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3314      	adds	r3, #20
 8005034:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005036:	643a      	str	r2, [r7, #64]	@ 0x40
 8005038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800503c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e5      	bne.n	8005016 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504e:	2b01      	cmp	r3, #1
 8005050:	d119      	bne.n	8005086 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	330c      	adds	r3, #12
 8005058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	61fb      	str	r3, [r7, #28]
   return(result);
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	f023 0310 	bic.w	r3, r3, #16
 8005068:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	330c      	adds	r3, #12
 8005070:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005072:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005074:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005078:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e5      	bne.n	8005052 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005090:	2b40      	cmp	r3, #64	@ 0x40
 8005092:	d136      	bne.n	8005102 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3314      	adds	r3, #20
 800509a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3314      	adds	r3, #20
 80050b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050b4:	61ba      	str	r2, [r7, #24]
 80050b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6979      	ldr	r1, [r7, #20]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	613b      	str	r3, [r7, #16]
   return(result);
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e5      	bne.n	8005094 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d018      	beq.n	8005102 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d4:	2200      	movs	r2, #0
 80050d6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fd fd2b 	bl	8002b38 <HAL_DMA_Abort>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00c      	beq.n	8005102 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fd ff3f 	bl	8002f70 <HAL_DMA_GetError>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d104      	bne.n	8005102 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2210      	movs	r2, #16
 80050fc:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e00a      	b.n	8005118 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3768      	adds	r7, #104	@ 0x68
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b0ba      	sub	sp, #232	@ 0xe8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005146:	2300      	movs	r3, #0
 8005148:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800514c:	2300      	movs	r3, #0
 800514e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800515e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10f      	bne.n	8005186 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <HAL_UART_IRQHandler+0x66>
 8005172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fd9c 	bl	8005cbc <UART_Receive_IT>
      return;
 8005184:	e273      	b.n	800566e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80de 	beq.w	800534c <HAL_UART_IRQHandler+0x22c>
 8005190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800519c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80d1 	beq.w	800534c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <HAL_UART_IRQHandler+0xae>
 80051b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c6:	f043 0201 	orr.w	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <HAL_UART_IRQHandler+0xd2>
 80051da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ea:	f043 0202 	orr.w	r2, r3, #2
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00b      	beq.n	8005216 <HAL_UART_IRQHandler+0xf6>
 80051fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520e:	f043 0204 	orr.w	r2, r3, #4
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d011      	beq.n	8005246 <HAL_UART_IRQHandler+0x126>
 8005222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	d105      	bne.n	800523a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800522e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523e:	f043 0208 	orr.w	r2, r3, #8
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 820a 	beq.w	8005664 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <HAL_UART_IRQHandler+0x14e>
 800525c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fd27 	bl	8005cbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005278:	2b40      	cmp	r3, #64	@ 0x40
 800527a:	bf0c      	ite	eq
 800527c:	2301      	moveq	r3, #1
 800527e:	2300      	movne	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d103      	bne.n	800529a <HAL_UART_IRQHandler+0x17a>
 8005292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005296:	2b00      	cmp	r3, #0
 8005298:	d04f      	beq.n	800533a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fc32 	bl	8005b04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052aa:	2b40      	cmp	r3, #64	@ 0x40
 80052ac:	d141      	bne.n	8005332 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3314      	adds	r3, #20
 80052b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3314      	adds	r3, #20
 80052d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80052da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80052de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80052e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80052f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1d9      	bne.n	80052ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d013      	beq.n	800532a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005306:	4a8a      	ldr	r2, [pc, #552]	@ (8005530 <HAL_UART_IRQHandler+0x410>)
 8005308:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530e:	4618      	mov	r0, r3
 8005310:	f7fd fc82 	bl	8002c18 <HAL_DMA_Abort_IT>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d016      	beq.n	8005348 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800531e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005324:	4610      	mov	r0, r2
 8005326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005328:	e00e      	b.n	8005348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fb fc16 	bl	8000b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005330:	e00a      	b.n	8005348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fb fc12 	bl	8000b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005338:	e006      	b.n	8005348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fb fc0e 	bl	8000b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005346:	e18d      	b.n	8005664 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005348:	bf00      	nop
    return;
 800534a:	e18b      	b.n	8005664 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005350:	2b01      	cmp	r3, #1
 8005352:	f040 8167 	bne.w	8005624 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 8160 	beq.w	8005624 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 8159 	beq.w	8005624 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	60bb      	str	r3, [r7, #8]
 8005386:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005392:	2b40      	cmp	r3, #64	@ 0x40
 8005394:	f040 80ce 	bne.w	8005534 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80a9 	beq.w	8005500 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053b6:	429a      	cmp	r2, r3
 80053b8:	f080 80a2 	bcs.w	8005500 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ce:	f000 8088 	beq.w	80054e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	330c      	adds	r3, #12
 80053d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80053e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80053fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005402:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800540a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005416:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1d9      	bne.n	80053d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3314      	adds	r3, #20
 8005424:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800542e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005430:	f023 0301 	bic.w	r3, r3, #1
 8005434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3314      	adds	r3, #20
 800543e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005442:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005446:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800544a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e1      	bne.n	800541e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3314      	adds	r3, #20
 8005460:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800546a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800546c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005470:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3314      	adds	r3, #20
 800547a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800547e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005480:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005484:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800548c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e3      	bne.n	800545a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2220      	movs	r2, #32
 8005496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	330c      	adds	r3, #12
 80054a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054aa:	e853 3f00 	ldrex	r3, [r3]
 80054ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054b2:	f023 0310 	bic.w	r3, r3, #16
 80054b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	330c      	adds	r3, #12
 80054c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80054c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80054c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054cc:	e841 2300 	strex	r3, r2, [r1]
 80054d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1e3      	bne.n	80054a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fd fb2b 	bl	8002b38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2202      	movs	r2, #2
 80054e6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	4619      	mov	r1, r3
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f8cf 	bl	800569c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80054fe:	e0b3      	b.n	8005668 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005504:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005508:	429a      	cmp	r2, r3
 800550a:	f040 80ad 	bne.w	8005668 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005518:	f040 80a6 	bne.w	8005668 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f8b7 	bl	800569c <HAL_UARTEx_RxEventCallback>
      return;
 800552e:	e09b      	b.n	8005668 <HAL_UART_IRQHandler+0x548>
 8005530:	08005bcb 	.word	0x08005bcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800553c:	b29b      	uxth	r3, r3
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 808e 	beq.w	800566c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8089 	beq.w	800566c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	330c      	adds	r3, #12
 8005560:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800556a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800556c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005570:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800557e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005580:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800558c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1e3      	bne.n	800555a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3314      	adds	r3, #20
 8005598:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	623b      	str	r3, [r7, #32]
   return(result);
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	f023 0301 	bic.w	r3, r3, #1
 80055a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3314      	adds	r3, #20
 80055b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80055b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e3      	bne.n	8005592 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	330c      	adds	r3, #12
 80055de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0310 	bic.w	r3, r3, #16
 80055ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	330c      	adds	r3, #12
 80055f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80055fc:	61fa      	str	r2, [r7, #28]
 80055fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	69b9      	ldr	r1, [r7, #24]
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	617b      	str	r3, [r7, #20]
   return(result);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e3      	bne.n	80055d8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005616:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800561a:	4619      	mov	r1, r3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f83d 	bl	800569c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005622:	e023      	b.n	800566c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562c:	2b00      	cmp	r3, #0
 800562e:	d009      	beq.n	8005644 <HAL_UART_IRQHandler+0x524>
 8005630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fad5 	bl	8005bec <UART_Transmit_IT>
    return;
 8005642:	e014      	b.n	800566e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00e      	beq.n	800566e <HAL_UART_IRQHandler+0x54e>
 8005650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fb15 	bl	8005c8c <UART_EndTransmit_IT>
    return;
 8005662:	e004      	b.n	800566e <HAL_UART_IRQHandler+0x54e>
    return;
 8005664:	bf00      	nop
 8005666:	e002      	b.n	800566e <HAL_UART_IRQHandler+0x54e>
      return;
 8005668:	bf00      	nop
 800566a:	e000      	b.n	800566e <HAL_UART_IRQHandler+0x54e>
      return;
 800566c:	bf00      	nop
  }
}
 800566e:	37e8      	adds	r7, #232	@ 0xe8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b090      	sub	sp, #64	@ 0x40
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d137      	bne.n	8005740 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80056d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d2:	2200      	movs	r2, #0
 80056d4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3314      	adds	r3, #20
 80056dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	623b      	str	r3, [r7, #32]
   return(result);
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3314      	adds	r3, #20
 80056f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80056f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e5      	bne.n	80056d6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800570a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	330c      	adds	r3, #12
 8005710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	60fb      	str	r3, [r7, #12]
   return(result);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005720:	637b      	str	r3, [r7, #52]	@ 0x34
 8005722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	330c      	adds	r3, #12
 8005728:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800572a:	61fa      	str	r2, [r7, #28]
 800572c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	69b9      	ldr	r1, [r7, #24]
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	617b      	str	r3, [r7, #20]
   return(result);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e5      	bne.n	800570a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800573e:	e002      	b.n	8005746 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005740:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005742:	f7ff ff97 	bl	8005674 <HAL_UART_TxCpltCallback>
}
 8005746:	bf00      	nop
 8005748:	3740      	adds	r7, #64	@ 0x40
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f7ff ff93 	bl	8005688 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005762:	bf00      	nop
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b09c      	sub	sp, #112	@ 0x70
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005776:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005782:	2b00      	cmp	r3, #0
 8005784:	d172      	bne.n	800586c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005788:	2200      	movs	r2, #0
 800578a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800578c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	330c      	adds	r3, #12
 8005792:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800579c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800579e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	330c      	adds	r3, #12
 80057aa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80057ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80057ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e5      	bne.n	800578c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3314      	adds	r3, #20
 80057c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ca:	e853 3f00 	ldrex	r3, [r3]
 80057ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80057d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3314      	adds	r3, #20
 80057de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80057e0:	647a      	str	r2, [r7, #68]	@ 0x44
 80057e2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057e8:	e841 2300 	strex	r3, r2, [r1]
 80057ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e5      	bne.n	80057c0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3314      	adds	r3, #20
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fe:	e853 3f00 	ldrex	r3, [r3]
 8005802:	623b      	str	r3, [r7, #32]
   return(result);
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800580a:	663b      	str	r3, [r7, #96]	@ 0x60
 800580c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3314      	adds	r3, #20
 8005812:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005814:	633a      	str	r2, [r7, #48]	@ 0x30
 8005816:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800581a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800581c:	e841 2300 	strex	r3, r2, [r1]
 8005820:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1e5      	bne.n	80057f4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005828:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800582a:	2220      	movs	r2, #32
 800582c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005834:	2b01      	cmp	r3, #1
 8005836:	d119      	bne.n	800586c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	330c      	adds	r3, #12
 800583e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	e853 3f00 	ldrex	r3, [r3]
 8005846:	60fb      	str	r3, [r7, #12]
   return(result);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0310 	bic.w	r3, r3, #16
 800584e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	330c      	adds	r3, #12
 8005856:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005858:	61fa      	str	r2, [r7, #28]
 800585a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585c:	69b9      	ldr	r1, [r7, #24]
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	e841 2300 	strex	r3, r2, [r1]
 8005864:	617b      	str	r3, [r7, #20]
   return(result);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e5      	bne.n	8005838 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800586c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800586e:	2200      	movs	r2, #0
 8005870:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005872:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005876:	2b01      	cmp	r3, #1
 8005878:	d106      	bne.n	8005888 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800587a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800587c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800587e:	4619      	mov	r1, r3
 8005880:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005882:	f7ff ff0b 	bl	800569c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005886:	e002      	b.n	800588e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005888:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800588a:	f7fb f8e5 	bl	8000a58 <HAL_UART_RxCpltCallback>
}
 800588e:	bf00      	nop
 8005890:	3770      	adds	r7, #112	@ 0x70
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2201      	movs	r2, #1
 80058a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d108      	bne.n	80058c4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058b6:	085b      	lsrs	r3, r3, #1
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	4619      	mov	r1, r3
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff feed 	bl	800569c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058c2:	e002      	b.n	80058ca <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7fb f925 	bl	8000b14 <HAL_UART_RxHalfCpltCallback>
}
 80058ca:	bf00      	nop
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ee:	2b80      	cmp	r3, #128	@ 0x80
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b21      	cmp	r3, #33	@ 0x21
 8005904:	d108      	bne.n	8005918 <UART_DMAError+0x46>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005912:	68b8      	ldr	r0, [r7, #8]
 8005914:	f000 f8ce 	bl	8005ab4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005922:	2b40      	cmp	r3, #64	@ 0x40
 8005924:	bf0c      	ite	eq
 8005926:	2301      	moveq	r3, #1
 8005928:	2300      	movne	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b22      	cmp	r3, #34	@ 0x22
 8005938:	d108      	bne.n	800594c <UART_DMAError+0x7a>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2200      	movs	r2, #0
 8005944:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005946:	68b8      	ldr	r0, [r7, #8]
 8005948:	f000 f8dc 	bl	8005b04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005950:	f043 0210 	orr.w	r2, r3, #16
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005958:	68b8      	ldr	r0, [r7, #8]
 800595a:	f7fb f8ff 	bl	8000b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b098      	sub	sp, #96	@ 0x60
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	4613      	mov	r3, r2
 8005974:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	88fa      	ldrh	r2, [r7, #6]
 8005980:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2222      	movs	r2, #34	@ 0x22
 800598c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005994:	4a44      	ldr	r2, [pc, #272]	@ (8005aa8 <UART_Start_Receive_DMA+0x140>)
 8005996:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599c:	4a43      	ldr	r2, [pc, #268]	@ (8005aac <UART_Start_Receive_DMA+0x144>)
 800599e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a4:	4a42      	ldr	r2, [pc, #264]	@ (8005ab0 <UART_Start_Receive_DMA+0x148>)
 80059a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ac:	2200      	movs	r2, #0
 80059ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80059b0:	f107 0308 	add.w	r3, r7, #8
 80059b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3304      	adds	r3, #4
 80059c0:	4619      	mov	r1, r3
 80059c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	f7fd f85e 	bl	8002a88 <HAL_DMA_Start_IT>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d008      	beq.n	80059e4 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2210      	movs	r2, #16
 80059d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2220      	movs	r2, #32
 80059dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e05d      	b.n	8005aa0 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80059e4:	2300      	movs	r3, #0
 80059e6:	613b      	str	r3, [r7, #16]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d019      	beq.n	8005a36 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	330c      	adds	r3, #12
 8005a08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	330c      	adds	r3, #12
 8005a20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a22:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005a24:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005a28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e5      	bne.n	8005a02 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3314      	adds	r3, #20
 8005a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a48:	f043 0301 	orr.w	r3, r3, #1
 8005a4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3314      	adds	r3, #20
 8005a54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a56:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005a58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005a5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e5      	bne.n	8005a36 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3314      	adds	r3, #20
 8005a70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	617b      	str	r3, [r7, #20]
   return(result);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a80:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3314      	adds	r3, #20
 8005a88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005a8a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6a39      	ldr	r1, [r7, #32]
 8005a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e5      	bne.n	8005a6a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3760      	adds	r7, #96	@ 0x60
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	0800576b 	.word	0x0800576b
 8005aac:	08005897 	.word	0x08005897
 8005ab0:	080058d3 	.word	0x080058d3

08005ab4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b089      	sub	sp, #36	@ 0x24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ad2:	61fb      	str	r3, [r7, #28]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	61ba      	str	r2, [r7, #24]
 8005ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6979      	ldr	r1, [r7, #20]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e5      	bne.n	8005abc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005af8:	bf00      	nop
 8005afa:	3724      	adds	r7, #36	@ 0x24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b095      	sub	sp, #84	@ 0x54
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	330c      	adds	r3, #12
 8005b2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e5      	bne.n	8005b0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3314      	adds	r3, #20
 8005b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	f023 0301 	bic.w	r3, r3, #1
 8005b56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3314      	adds	r3, #20
 8005b5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e5      	bne.n	8005b40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d119      	bne.n	8005bb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	330c      	adds	r3, #12
 8005b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f023 0310 	bic.w	r3, r3, #16
 8005b92:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	330c      	adds	r3, #12
 8005b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b9c:	61ba      	str	r2, [r7, #24]
 8005b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba0:	6979      	ldr	r1, [r7, #20]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	e841 2300 	strex	r3, r2, [r1]
 8005ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e5      	bne.n	8005b7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005bbe:	bf00      	nop
 8005bc0:	3754      	adds	r7, #84	@ 0x54
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7fa ffbc 	bl	8000b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b21      	cmp	r3, #33	@ 0x21
 8005bfe:	d13e      	bne.n	8005c7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c08:	d114      	bne.n	8005c34 <UART_Transmit_IT+0x48>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d110      	bne.n	8005c34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	1c9a      	adds	r2, r3, #2
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]
 8005c32:	e008      	b.n	8005c46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	1c59      	adds	r1, r3, #1
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6211      	str	r1, [r2, #32]
 8005c3e:	781a      	ldrb	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	4619      	mov	r1, r3
 8005c54:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10f      	bne.n	8005c7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e000      	b.n	8005c80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c7e:	2302      	movs	r3, #2
  }
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ca2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff fce1 	bl	8005674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08c      	sub	sp, #48	@ 0x30
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b22      	cmp	r3, #34	@ 0x22
 8005cd6:	f040 80aa 	bne.w	8005e2e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ce2:	d115      	bne.n	8005d10 <UART_Receive_IT+0x54>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d111      	bne.n	8005d10 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d08:	1c9a      	adds	r2, r3, #2
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d0e:	e024      	b.n	8005d5a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d1e:	d007      	beq.n	8005d30 <UART_Receive_IT+0x74>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <UART_Receive_IT+0x82>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	e008      	b.n	8005d50 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	4619      	mov	r1, r3
 8005d68:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d15d      	bne.n	8005e2a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0220 	bic.w	r2, r2, #32
 8005d7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	695a      	ldr	r2, [r3, #20]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0201 	bic.w	r2, r2, #1
 8005d9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d135      	bne.n	8005e20 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	330c      	adds	r3, #12
 8005dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f023 0310 	bic.w	r3, r3, #16
 8005dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	330c      	adds	r3, #12
 8005dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dda:	623a      	str	r2, [r7, #32]
 8005ddc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	69f9      	ldr	r1, [r7, #28]
 8005de0:	6a3a      	ldr	r2, [r7, #32]
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e5      	bne.n	8005dba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b10      	cmp	r3, #16
 8005dfa:	d10a      	bne.n	8005e12 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff fc3f 	bl	800569c <HAL_UARTEx_RxEventCallback>
 8005e1e:	e002      	b.n	8005e26 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7fa fe19 	bl	8000a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	e002      	b.n	8005e30 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e000      	b.n	8005e30 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e2e:	2302      	movs	r3, #2
  }
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3730      	adds	r7, #48	@ 0x30
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e3c:	b0c0      	sub	sp, #256	@ 0x100
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e54:	68d9      	ldr	r1, [r3, #12]
 8005e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	ea40 0301 	orr.w	r3, r0, r1
 8005e60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e90:	f021 010c 	bic.w	r1, r1, #12
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e9e:	430b      	orrs	r3, r1
 8005ea0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb2:	6999      	ldr	r1, [r3, #24]
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	ea40 0301 	orr.w	r3, r0, r1
 8005ebe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	4b8f      	ldr	r3, [pc, #572]	@ (8006104 <UART_SetConfig+0x2cc>)
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d005      	beq.n	8005ed8 <UART_SetConfig+0xa0>
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4b8d      	ldr	r3, [pc, #564]	@ (8006108 <UART_SetConfig+0x2d0>)
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d104      	bne.n	8005ee2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ed8:	f7fd ff88 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 8005edc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ee0:	e003      	b.n	8005eea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ee2:	f7fd ff6f 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8005ee6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ef4:	f040 810c 	bne.w	8006110 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005efc:	2200      	movs	r2, #0
 8005efe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	462b      	mov	r3, r5
 8005f0e:	1891      	adds	r1, r2, r2
 8005f10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f12:	415b      	adcs	r3, r3
 8005f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	eb12 0801 	adds.w	r8, r2, r1
 8005f20:	4629      	mov	r1, r5
 8005f22:	eb43 0901 	adc.w	r9, r3, r1
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f3a:	4690      	mov	r8, r2
 8005f3c:	4699      	mov	r9, r3
 8005f3e:	4623      	mov	r3, r4
 8005f40:	eb18 0303 	adds.w	r3, r8, r3
 8005f44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f48:	462b      	mov	r3, r5
 8005f4a:	eb49 0303 	adc.w	r3, r9, r3
 8005f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f66:	460b      	mov	r3, r1
 8005f68:	18db      	adds	r3, r3, r3
 8005f6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	eb42 0303 	adc.w	r3, r2, r3
 8005f72:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f7c:	f7fa f924 	bl	80001c8 <__aeabi_uldivmod>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4b61      	ldr	r3, [pc, #388]	@ (800610c <UART_SetConfig+0x2d4>)
 8005f86:	fba3 2302 	umull	r2, r3, r3, r2
 8005f8a:	095b      	lsrs	r3, r3, #5
 8005f8c:	011c      	lsls	r4, r3, #4
 8005f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	1891      	adds	r1, r2, r2
 8005fa6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005fa8:	415b      	adcs	r3, r3
 8005faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005fb0:	4641      	mov	r1, r8
 8005fb2:	eb12 0a01 	adds.w	sl, r2, r1
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	eb43 0b01 	adc.w	fp, r3, r1
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fd0:	4692      	mov	sl, r2
 8005fd2:	469b      	mov	fp, r3
 8005fd4:	4643      	mov	r3, r8
 8005fd6:	eb1a 0303 	adds.w	r3, sl, r3
 8005fda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fde:	464b      	mov	r3, r9
 8005fe0:	eb4b 0303 	adc.w	r3, fp, r3
 8005fe4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ff4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ff8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	18db      	adds	r3, r3, r3
 8006000:	643b      	str	r3, [r7, #64]	@ 0x40
 8006002:	4613      	mov	r3, r2
 8006004:	eb42 0303 	adc.w	r3, r2, r3
 8006008:	647b      	str	r3, [r7, #68]	@ 0x44
 800600a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800600e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006012:	f7fa f8d9 	bl	80001c8 <__aeabi_uldivmod>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4611      	mov	r1, r2
 800601c:	4b3b      	ldr	r3, [pc, #236]	@ (800610c <UART_SetConfig+0x2d4>)
 800601e:	fba3 2301 	umull	r2, r3, r3, r1
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	2264      	movs	r2, #100	@ 0x64
 8006026:	fb02 f303 	mul.w	r3, r2, r3
 800602a:	1acb      	subs	r3, r1, r3
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006032:	4b36      	ldr	r3, [pc, #216]	@ (800610c <UART_SetConfig+0x2d4>)
 8006034:	fba3 2302 	umull	r2, r3, r3, r2
 8006038:	095b      	lsrs	r3, r3, #5
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006040:	441c      	add	r4, r3
 8006042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006046:	2200      	movs	r2, #0
 8006048:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800604c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006050:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006054:	4642      	mov	r2, r8
 8006056:	464b      	mov	r3, r9
 8006058:	1891      	adds	r1, r2, r2
 800605a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800605c:	415b      	adcs	r3, r3
 800605e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006060:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006064:	4641      	mov	r1, r8
 8006066:	1851      	adds	r1, r2, r1
 8006068:	6339      	str	r1, [r7, #48]	@ 0x30
 800606a:	4649      	mov	r1, r9
 800606c:	414b      	adcs	r3, r1
 800606e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	f04f 0300 	mov.w	r3, #0
 8006078:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800607c:	4659      	mov	r1, fp
 800607e:	00cb      	lsls	r3, r1, #3
 8006080:	4651      	mov	r1, sl
 8006082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006086:	4651      	mov	r1, sl
 8006088:	00ca      	lsls	r2, r1, #3
 800608a:	4610      	mov	r0, r2
 800608c:	4619      	mov	r1, r3
 800608e:	4603      	mov	r3, r0
 8006090:	4642      	mov	r2, r8
 8006092:	189b      	adds	r3, r3, r2
 8006094:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006098:	464b      	mov	r3, r9
 800609a:	460a      	mov	r2, r1
 800609c:	eb42 0303 	adc.w	r3, r2, r3
 80060a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80060b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060b8:	460b      	mov	r3, r1
 80060ba:	18db      	adds	r3, r3, r3
 80060bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060be:	4613      	mov	r3, r2
 80060c0:	eb42 0303 	adc.w	r3, r2, r3
 80060c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80060ce:	f7fa f87b 	bl	80001c8 <__aeabi_uldivmod>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	4b0d      	ldr	r3, [pc, #52]	@ (800610c <UART_SetConfig+0x2d4>)
 80060d8:	fba3 1302 	umull	r1, r3, r3, r2
 80060dc:	095b      	lsrs	r3, r3, #5
 80060de:	2164      	movs	r1, #100	@ 0x64
 80060e0:	fb01 f303 	mul.w	r3, r1, r3
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	3332      	adds	r3, #50	@ 0x32
 80060ea:	4a08      	ldr	r2, [pc, #32]	@ (800610c <UART_SetConfig+0x2d4>)
 80060ec:	fba2 2303 	umull	r2, r3, r2, r3
 80060f0:	095b      	lsrs	r3, r3, #5
 80060f2:	f003 0207 	and.w	r2, r3, #7
 80060f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4422      	add	r2, r4
 80060fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006100:	e106      	b.n	8006310 <UART_SetConfig+0x4d8>
 8006102:	bf00      	nop
 8006104:	40011000 	.word	0x40011000
 8006108:	40011400 	.word	0x40011400
 800610c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006114:	2200      	movs	r2, #0
 8006116:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800611a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800611e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006122:	4642      	mov	r2, r8
 8006124:	464b      	mov	r3, r9
 8006126:	1891      	adds	r1, r2, r2
 8006128:	6239      	str	r1, [r7, #32]
 800612a:	415b      	adcs	r3, r3
 800612c:	627b      	str	r3, [r7, #36]	@ 0x24
 800612e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006132:	4641      	mov	r1, r8
 8006134:	1854      	adds	r4, r2, r1
 8006136:	4649      	mov	r1, r9
 8006138:	eb43 0501 	adc.w	r5, r3, r1
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	00eb      	lsls	r3, r5, #3
 8006146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800614a:	00e2      	lsls	r2, r4, #3
 800614c:	4614      	mov	r4, r2
 800614e:	461d      	mov	r5, r3
 8006150:	4643      	mov	r3, r8
 8006152:	18e3      	adds	r3, r4, r3
 8006154:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006158:	464b      	mov	r3, r9
 800615a:	eb45 0303 	adc.w	r3, r5, r3
 800615e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800616e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006172:	f04f 0200 	mov.w	r2, #0
 8006176:	f04f 0300 	mov.w	r3, #0
 800617a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800617e:	4629      	mov	r1, r5
 8006180:	008b      	lsls	r3, r1, #2
 8006182:	4621      	mov	r1, r4
 8006184:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006188:	4621      	mov	r1, r4
 800618a:	008a      	lsls	r2, r1, #2
 800618c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006190:	f7fa f81a 	bl	80001c8 <__aeabi_uldivmod>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	4b60      	ldr	r3, [pc, #384]	@ (800631c <UART_SetConfig+0x4e4>)
 800619a:	fba3 2302 	umull	r2, r3, r3, r2
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	011c      	lsls	r4, r3, #4
 80061a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80061b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80061b4:	4642      	mov	r2, r8
 80061b6:	464b      	mov	r3, r9
 80061b8:	1891      	adds	r1, r2, r2
 80061ba:	61b9      	str	r1, [r7, #24]
 80061bc:	415b      	adcs	r3, r3
 80061be:	61fb      	str	r3, [r7, #28]
 80061c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061c4:	4641      	mov	r1, r8
 80061c6:	1851      	adds	r1, r2, r1
 80061c8:	6139      	str	r1, [r7, #16]
 80061ca:	4649      	mov	r1, r9
 80061cc:	414b      	adcs	r3, r1
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061dc:	4659      	mov	r1, fp
 80061de:	00cb      	lsls	r3, r1, #3
 80061e0:	4651      	mov	r1, sl
 80061e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061e6:	4651      	mov	r1, sl
 80061e8:	00ca      	lsls	r2, r1, #3
 80061ea:	4610      	mov	r0, r2
 80061ec:	4619      	mov	r1, r3
 80061ee:	4603      	mov	r3, r0
 80061f0:	4642      	mov	r2, r8
 80061f2:	189b      	adds	r3, r3, r2
 80061f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061f8:	464b      	mov	r3, r9
 80061fa:	460a      	mov	r2, r1
 80061fc:	eb42 0303 	adc.w	r3, r2, r3
 8006200:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800620e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800621c:	4649      	mov	r1, r9
 800621e:	008b      	lsls	r3, r1, #2
 8006220:	4641      	mov	r1, r8
 8006222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006226:	4641      	mov	r1, r8
 8006228:	008a      	lsls	r2, r1, #2
 800622a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800622e:	f7f9 ffcb 	bl	80001c8 <__aeabi_uldivmod>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4611      	mov	r1, r2
 8006238:	4b38      	ldr	r3, [pc, #224]	@ (800631c <UART_SetConfig+0x4e4>)
 800623a:	fba3 2301 	umull	r2, r3, r3, r1
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	2264      	movs	r2, #100	@ 0x64
 8006242:	fb02 f303 	mul.w	r3, r2, r3
 8006246:	1acb      	subs	r3, r1, r3
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	3332      	adds	r3, #50	@ 0x32
 800624c:	4a33      	ldr	r2, [pc, #204]	@ (800631c <UART_SetConfig+0x4e4>)
 800624e:	fba2 2303 	umull	r2, r3, r2, r3
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006258:	441c      	add	r4, r3
 800625a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800625e:	2200      	movs	r2, #0
 8006260:	673b      	str	r3, [r7, #112]	@ 0x70
 8006262:	677a      	str	r2, [r7, #116]	@ 0x74
 8006264:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006268:	4642      	mov	r2, r8
 800626a:	464b      	mov	r3, r9
 800626c:	1891      	adds	r1, r2, r2
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	415b      	adcs	r3, r3
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006278:	4641      	mov	r1, r8
 800627a:	1851      	adds	r1, r2, r1
 800627c:	6039      	str	r1, [r7, #0]
 800627e:	4649      	mov	r1, r9
 8006280:	414b      	adcs	r3, r1
 8006282:	607b      	str	r3, [r7, #4]
 8006284:	f04f 0200 	mov.w	r2, #0
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006290:	4659      	mov	r1, fp
 8006292:	00cb      	lsls	r3, r1, #3
 8006294:	4651      	mov	r1, sl
 8006296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800629a:	4651      	mov	r1, sl
 800629c:	00ca      	lsls	r2, r1, #3
 800629e:	4610      	mov	r0, r2
 80062a0:	4619      	mov	r1, r3
 80062a2:	4603      	mov	r3, r0
 80062a4:	4642      	mov	r2, r8
 80062a6:	189b      	adds	r3, r3, r2
 80062a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062aa:	464b      	mov	r3, r9
 80062ac:	460a      	mov	r2, r1
 80062ae:	eb42 0303 	adc.w	r3, r2, r3
 80062b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80062be:	667a      	str	r2, [r7, #100]	@ 0x64
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80062cc:	4649      	mov	r1, r9
 80062ce:	008b      	lsls	r3, r1, #2
 80062d0:	4641      	mov	r1, r8
 80062d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062d6:	4641      	mov	r1, r8
 80062d8:	008a      	lsls	r2, r1, #2
 80062da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80062de:	f7f9 ff73 	bl	80001c8 <__aeabi_uldivmod>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <UART_SetConfig+0x4e4>)
 80062e8:	fba3 1302 	umull	r1, r3, r3, r2
 80062ec:	095b      	lsrs	r3, r3, #5
 80062ee:	2164      	movs	r1, #100	@ 0x64
 80062f0:	fb01 f303 	mul.w	r3, r1, r3
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	3332      	adds	r3, #50	@ 0x32
 80062fa:	4a08      	ldr	r2, [pc, #32]	@ (800631c <UART_SetConfig+0x4e4>)
 80062fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	f003 020f 	and.w	r2, r3, #15
 8006306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4422      	add	r2, r4
 800630e:	609a      	str	r2, [r3, #8]
}
 8006310:	bf00      	nop
 8006312:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006316:	46bd      	mov	sp, r7
 8006318:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800631c:	51eb851f 	.word	0x51eb851f

08006320 <memset>:
 8006320:	4402      	add	r2, r0
 8006322:	4603      	mov	r3, r0
 8006324:	4293      	cmp	r3, r2
 8006326:	d100      	bne.n	800632a <memset+0xa>
 8006328:	4770      	bx	lr
 800632a:	f803 1b01 	strb.w	r1, [r3], #1
 800632e:	e7f9      	b.n	8006324 <memset+0x4>

08006330 <__libc_init_array>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4d0d      	ldr	r5, [pc, #52]	@ (8006368 <__libc_init_array+0x38>)
 8006334:	4c0d      	ldr	r4, [pc, #52]	@ (800636c <__libc_init_array+0x3c>)
 8006336:	1b64      	subs	r4, r4, r5
 8006338:	10a4      	asrs	r4, r4, #2
 800633a:	2600      	movs	r6, #0
 800633c:	42a6      	cmp	r6, r4
 800633e:	d109      	bne.n	8006354 <__libc_init_array+0x24>
 8006340:	4d0b      	ldr	r5, [pc, #44]	@ (8006370 <__libc_init_array+0x40>)
 8006342:	4c0c      	ldr	r4, [pc, #48]	@ (8006374 <__libc_init_array+0x44>)
 8006344:	f000 f818 	bl	8006378 <_init>
 8006348:	1b64      	subs	r4, r4, r5
 800634a:	10a4      	asrs	r4, r4, #2
 800634c:	2600      	movs	r6, #0
 800634e:	42a6      	cmp	r6, r4
 8006350:	d105      	bne.n	800635e <__libc_init_array+0x2e>
 8006352:	bd70      	pop	{r4, r5, r6, pc}
 8006354:	f855 3b04 	ldr.w	r3, [r5], #4
 8006358:	4798      	blx	r3
 800635a:	3601      	adds	r6, #1
 800635c:	e7ee      	b.n	800633c <__libc_init_array+0xc>
 800635e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006362:	4798      	blx	r3
 8006364:	3601      	adds	r6, #1
 8006366:	e7f2      	b.n	800634e <__libc_init_array+0x1e>
 8006368:	080063b8 	.word	0x080063b8
 800636c:	080063b8 	.word	0x080063b8
 8006370:	080063b8 	.word	0x080063b8
 8006374:	080063bc 	.word	0x080063bc

08006378 <_init>:
 8006378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637a:	bf00      	nop
 800637c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637e:	bc08      	pop	{r3}
 8006380:	469e      	mov	lr, r3
 8006382:	4770      	bx	lr

08006384 <_fini>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	bf00      	nop
 8006388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638a:	bc08      	pop	{r3}
 800638c:	469e      	mov	lr, r3
 800638e:	4770      	bx	lr
